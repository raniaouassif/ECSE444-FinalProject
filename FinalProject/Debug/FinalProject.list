
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060c8  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006284  08006284  00016284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080062c4  080062c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080062c4  080062c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080062c4  080062c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080062c4  080062c4  000162c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080062c8  080062c8  000162c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080062cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001d758  2000000c  080062d8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001d764  080062d8  0002d764  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014f52  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002993  00000000  00000000  00034f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00037928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011f0  00000000  00000000  00038c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b0e4  00000000  00000000  00039e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000145d8  00000000  00000000  00064f14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010af6a  00000000  00000000  000794ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00184456  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050d8  00000000  00000000  001844a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	0800626c 	.word	0x0800626c

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	0800626c 	.word	0x0800626c

080001fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000202:	2300      	movs	r3, #0
 8000204:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000206:	2003      	movs	r0, #3
 8000208:	f000 f960 	bl	80004cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800020c:	2000      	movs	r0, #0
 800020e:	f000 f80d 	bl	800022c <HAL_InitTick>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000218:	2301      	movs	r3, #1
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	e001      	b.n	8000222 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800021e:	f005 fd0b 	bl	8005c38 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000222:	79fb      	ldrb	r3, [r7, #7]
}
 8000224:	4618      	mov	r0, r3
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000234:	2300      	movs	r3, #0
 8000236:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <HAL_InitTick+0x6c>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d023      	beq.n	8000288 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <HAL_InitTick+0x70>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <HAL_InitTick+0x6c>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	4619      	mov	r1, r3
 800024a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000252:	fbb2 f3f3 	udiv	r3, r2, r3
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f96d 	bl	8000536 <HAL_SYSTICK_Config>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d10f      	bne.n	8000282 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b0f      	cmp	r3, #15
 8000266:	d809      	bhi.n	800027c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000268:	2200      	movs	r2, #0
 800026a:	6879      	ldr	r1, [r7, #4]
 800026c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000270:	f000 f937 	bl	80004e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000274:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <HAL_InitTick+0x74>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6013      	str	r3, [r2, #0]
 800027a:	e007      	b.n	800028c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800027c:	2301      	movs	r3, #1
 800027e:	73fb      	strb	r3, [r7, #15]
 8000280:	e004      	b.n	800028c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000282:	2301      	movs	r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]
 8000286:	e001      	b.n	800028c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000288:	2301      	movs	r3, #1
 800028a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800028c:	7bfb      	ldrb	r3, [r7, #15]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000004 	.word	0x20000004
 800029c:	20000008 	.word	0x20000008
 80002a0:	20000000 	.word	0x20000000

080002a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_IncTick+0x20>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_IncTick+0x24>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4413      	add	r3, r2
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <HAL_IncTick+0x24>)
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	20000004 	.word	0x20000004
 80002c8:	20000028 	.word	0x20000028

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <HAL_GetTick+0x14>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000028 	.word	0x20000028

080002e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ec:	f7ff ffee 	bl	80002cc <HAL_GetTick>
 80002f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002fc:	d005      	beq.n	800030a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <HAL_Delay+0x44>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	461a      	mov	r2, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	4413      	add	r3, r2
 8000308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800030a:	bf00      	nop
 800030c:	f7ff ffde 	bl	80002cc <HAL_GetTick>
 8000310:	4602      	mov	r2, r0
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	429a      	cmp	r2, r3
 800031a:	d8f7      	bhi.n	800030c <HAL_Delay+0x28>
  {
  }
}
 800031c:	bf00      	nop
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000004 	.word	0x20000004

0800032c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	60d3      	str	r3, [r2, #12]
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <__NVIC_GetPriorityGrouping+0x18>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	f003 0307 	and.w	r3, r3, #7
}
 8000382:	4618      	mov	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800039a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db0b      	blt.n	80003ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 021f 	and.w	r2, r3, #31
 80003a8:	4907      	ldr	r1, [pc, #28]	; (80003c8 <__NVIC_EnableIRQ+0x38>)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	095b      	lsrs	r3, r3, #5
 80003b0:	2001      	movs	r0, #1
 80003b2:	fa00 f202 	lsl.w	r2, r0, r2
 80003b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	e000e100 	.word	0xe000e100

080003cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	6039      	str	r1, [r7, #0]
 80003d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	db0a      	blt.n	80003f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	490c      	ldr	r1, [pc, #48]	; (8000418 <__NVIC_SetPriority+0x4c>)
 80003e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ea:	0112      	lsls	r2, r2, #4
 80003ec:	b2d2      	uxtb	r2, r2
 80003ee:	440b      	add	r3, r1
 80003f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003f4:	e00a      	b.n	800040c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4908      	ldr	r1, [pc, #32]	; (800041c <__NVIC_SetPriority+0x50>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f003 030f 	and.w	r3, r3, #15
 8000402:	3b04      	subs	r3, #4
 8000404:	0112      	lsls	r2, r2, #4
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	440b      	add	r3, r1
 800040a:	761a      	strb	r2, [r3, #24]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	e000e100 	.word	0xe000e100
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000420:	b480      	push	{r7}
 8000422:	b089      	sub	sp, #36	; 0x24
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f003 0307 	and.w	r3, r3, #7
 8000432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000434:	69fb      	ldr	r3, [r7, #28]
 8000436:	f1c3 0307 	rsb	r3, r3, #7
 800043a:	2b04      	cmp	r3, #4
 800043c:	bf28      	it	cs
 800043e:	2304      	movcs	r3, #4
 8000440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000442:	69fb      	ldr	r3, [r7, #28]
 8000444:	3304      	adds	r3, #4
 8000446:	2b06      	cmp	r3, #6
 8000448:	d902      	bls.n	8000450 <NVIC_EncodePriority+0x30>
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	3b03      	subs	r3, #3
 800044e:	e000      	b.n	8000452 <NVIC_EncodePriority+0x32>
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000458:	69bb      	ldr	r3, [r7, #24]
 800045a:	fa02 f303 	lsl.w	r3, r2, r3
 800045e:	43da      	mvns	r2, r3
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	401a      	ands	r2, r3
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000468:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	43d9      	mvns	r1, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000478:	4313      	orrs	r3, r2
         );
}
 800047a:	4618      	mov	r0, r3
 800047c:	3724      	adds	r7, #36	; 0x24
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
	...

08000488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3b01      	subs	r3, #1
 8000494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000498:	d301      	bcc.n	800049e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800049a:	2301      	movs	r3, #1
 800049c:	e00f      	b.n	80004be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800049e:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <SysTick_Config+0x40>)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004a6:	210f      	movs	r1, #15
 80004a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004ac:	f7ff ff8e 	bl	80003cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <SysTick_Config+0x40>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004b6:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <SysTick_Config+0x40>)
 80004b8:	2207      	movs	r2, #7
 80004ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	e000e010 	.word	0xe000e010

080004cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff ff29 	bl	800032c <__NVIC_SetPriorityGrouping>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b086      	sub	sp, #24
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004f4:	f7ff ff3e 	bl	8000374 <__NVIC_GetPriorityGrouping>
 80004f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	68b9      	ldr	r1, [r7, #8]
 80004fe:	6978      	ldr	r0, [r7, #20]
 8000500:	f7ff ff8e 	bl	8000420 <NVIC_EncodePriority>
 8000504:	4602      	mov	r2, r0
 8000506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800050a:	4611      	mov	r1, r2
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff5d 	bl	80003cc <__NVIC_SetPriority>
}
 8000512:	bf00      	nop
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	4603      	mov	r3, r0
 8000522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff31 	bl	8000390 <__NVIC_EnableIRQ>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f7ff ffa2 	bl	8000488 <SysTick_Config>
 8000544:	4603      	mov	r3, r0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d101      	bne.n	8000560 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800055c:	2301      	movs	r3, #1
 800055e:	e014      	b.n	800058a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d105      	bne.n	8000576 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f005 fb85 	bl	8005c80 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2202      	movs	r2, #2
 800057a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b086      	sub	sp, #24
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
 80005a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80005a2:	2300      	movs	r3, #0
 80005a4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	795b      	ldrb	r3, [r3, #5]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d101      	bne.n	80005b2 <HAL_DAC_Start_DMA+0x1e>
 80005ae:	2302      	movs	r3, #2
 80005b0:	e0ab      	b.n	800070a <HAL_DAC_Start_DMA+0x176>
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	2201      	movs	r2, #1
 80005b6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	2202      	movs	r2, #2
 80005bc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d12f      	bne.n	8000624 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	689b      	ldr	r3, [r3, #8]
 80005c8:	4a52      	ldr	r2, [pc, #328]	; (8000714 <HAL_DAC_Start_DMA+0x180>)
 80005ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	4a51      	ldr	r2, [pc, #324]	; (8000718 <HAL_DAC_Start_DMA+0x184>)
 80005d2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	4a50      	ldr	r2, [pc, #320]	; (800071c <HAL_DAC_Start_DMA+0x188>)
 80005da:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	681a      	ldr	r2, [r3, #0]
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005ea:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80005ec:	6a3b      	ldr	r3, [r7, #32]
 80005ee:	2b08      	cmp	r3, #8
 80005f0:	d013      	beq.n	800061a <HAL_DAC_Start_DMA+0x86>
 80005f2:	6a3b      	ldr	r3, [r7, #32]
 80005f4:	2b08      	cmp	r3, #8
 80005f6:	d845      	bhi.n	8000684 <HAL_DAC_Start_DMA+0xf0>
 80005f8:	6a3b      	ldr	r3, [r7, #32]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d003      	beq.n	8000606 <HAL_DAC_Start_DMA+0x72>
 80005fe:	6a3b      	ldr	r3, [r7, #32]
 8000600:	2b04      	cmp	r3, #4
 8000602:	d005      	beq.n	8000610 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000604:	e03e      	b.n	8000684 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	681b      	ldr	r3, [r3, #0]
 800060a:	3308      	adds	r3, #8
 800060c:	613b      	str	r3, [r7, #16]
        break;
 800060e:	e03c      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000610:	68fb      	ldr	r3, [r7, #12]
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	330c      	adds	r3, #12
 8000616:	613b      	str	r3, [r7, #16]
        break;
 8000618:	e037      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	3310      	adds	r3, #16
 8000620:	613b      	str	r3, [r7, #16]
        break;
 8000622:	e032      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	4a3d      	ldr	r2, [pc, #244]	; (8000720 <HAL_DAC_Start_DMA+0x18c>)
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	68db      	ldr	r3, [r3, #12]
 8000630:	4a3c      	ldr	r2, [pc, #240]	; (8000724 <HAL_DAC_Start_DMA+0x190>)
 8000632:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	68db      	ldr	r3, [r3, #12]
 8000638:	4a3b      	ldr	r2, [pc, #236]	; (8000728 <HAL_DAC_Start_DMA+0x194>)
 800063a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800064a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800064c:	6a3b      	ldr	r3, [r7, #32]
 800064e:	2b08      	cmp	r3, #8
 8000650:	d013      	beq.n	800067a <HAL_DAC_Start_DMA+0xe6>
 8000652:	6a3b      	ldr	r3, [r7, #32]
 8000654:	2b08      	cmp	r3, #8
 8000656:	d817      	bhi.n	8000688 <HAL_DAC_Start_DMA+0xf4>
 8000658:	6a3b      	ldr	r3, [r7, #32]
 800065a:	2b00      	cmp	r3, #0
 800065c:	d003      	beq.n	8000666 <HAL_DAC_Start_DMA+0xd2>
 800065e:	6a3b      	ldr	r3, [r7, #32]
 8000660:	2b04      	cmp	r3, #4
 8000662:	d005      	beq.n	8000670 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000664:	e010      	b.n	8000688 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	3314      	adds	r3, #20
 800066c:	613b      	str	r3, [r7, #16]
        break;
 800066e:	e00c      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	3318      	adds	r3, #24
 8000676:	613b      	str	r3, [r7, #16]
        break;
 8000678:	e007      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	331c      	adds	r3, #28
 8000680:	613b      	str	r3, [r7, #16]
        break;
 8000682:	e002      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        break;
 8000684:	bf00      	nop
 8000686:	e000      	b.n	800068a <HAL_DAC_Start_DMA+0xf6>
        break;
 8000688:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d111      	bne.n	80006b4 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800069e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	6898      	ldr	r0, [r3, #8]
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	683b      	ldr	r3, [r7, #0]
 80006a8:	693a      	ldr	r2, [r7, #16]
 80006aa:	f000 fe83 	bl	80013b4 <HAL_DMA_Start_IT>
 80006ae:	4603      	mov	r3, r0
 80006b0:	75fb      	strb	r3, [r7, #23]
 80006b2:	e010      	b.n	80006d6 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	681a      	ldr	r2, [r3, #0]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80006c2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	68d8      	ldr	r0, [r3, #12]
 80006c8:	6879      	ldr	r1, [r7, #4]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	693a      	ldr	r2, [r7, #16]
 80006ce:	f000 fe71 	bl	80013b4 <HAL_DMA_Start_IT>
 80006d2:	4603      	mov	r3, r0
 80006d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	2200      	movs	r2, #0
 80006da:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80006dc:	7dfb      	ldrb	r3, [r7, #23]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d10c      	bne.n	80006fc <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80006e2:	68fb      	ldr	r3, [r7, #12]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	6819      	ldr	r1, [r3, #0]
 80006e8:	68bb      	ldr	r3, [r7, #8]
 80006ea:	f003 0310 	and.w	r3, r3, #16
 80006ee:	2201      	movs	r2, #1
 80006f0:	409a      	lsls	r2, r3
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	430a      	orrs	r2, r1
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	e005      	b.n	8000708 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	691b      	ldr	r3, [r3, #16]
 8000700:	f043 0204 	orr.w	r2, r3, #4
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000708:	7dfb      	ldrb	r3, [r7, #23]
}
 800070a:	4618      	mov	r0, r3
 800070c:	3718      	adds	r7, #24
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	080009e9 	.word	0x080009e9
 8000718:	08000a0b 	.word	0x08000a0b
 800071c:	08000a27 	.word	0x08000a27
 8000720:	08000a91 	.word	0x08000a91
 8000724:	08000ab3 	.word	0x08000ab3
 8000728:	08000acf 	.word	0x08000acf

0800072c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800072c:	b480      	push	{r7}
 800072e:	b083      	sub	sp, #12
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr

08000740 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr

08000754 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000754:	b480      	push	{r7}
 8000756:	b083      	sub	sp, #12
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800075c:	bf00      	nop
 800075e:	370c      	adds	r7, #12
 8000760:	46bd      	mov	sp, r7
 8000762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000766:	4770      	bx	lr

08000768 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000774:	2300      	movs	r3, #0
 8000776:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	795b      	ldrb	r3, [r3, #5]
 800077c:	2b01      	cmp	r3, #1
 800077e:	d101      	bne.n	8000784 <HAL_DAC_ConfigChannel+0x1c>
 8000780:	2302      	movs	r3, #2
 8000782:	e12a      	b.n	80009da <HAL_DAC_ConfigChannel+0x272>
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	2201      	movs	r2, #1
 8000788:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	2202      	movs	r2, #2
 800078e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	2b04      	cmp	r3, #4
 8000796:	d174      	bne.n	8000882 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000798:	f7ff fd98 	bl	80002cc <HAL_GetTick>
 800079c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d134      	bne.n	800080e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80007a4:	e011      	b.n	80007ca <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80007a6:	f7ff fd91 	bl	80002cc <HAL_GetTick>
 80007aa:	4602      	mov	r2, r0
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	2b01      	cmp	r3, #1
 80007b2:	d90a      	bls.n	80007ca <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	691b      	ldr	r3, [r3, #16]
 80007b8:	f043 0208 	orr.w	r2, r3, #8
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	2203      	movs	r2, #3
 80007c4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80007c6:	2303      	movs	r3, #3
 80007c8:	e107      	b.n	80009da <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80007ca:	68fb      	ldr	r3, [r7, #12]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d1e6      	bne.n	80007a6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80007d8:	2001      	movs	r0, #1
 80007da:	f7ff fd83 	bl	80002e4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80007de:	68fb      	ldr	r3, [r7, #12]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	68ba      	ldr	r2, [r7, #8]
 80007e4:	69d2      	ldr	r2, [r2, #28]
 80007e6:	641a      	str	r2, [r3, #64]	; 0x40
 80007e8:	e01e      	b.n	8000828 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80007ea:	f7ff fd6f 	bl	80002cc <HAL_GetTick>
 80007ee:	4602      	mov	r2, r0
 80007f0:	69bb      	ldr	r3, [r7, #24]
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	2b01      	cmp	r3, #1
 80007f6:	d90a      	bls.n	800080e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	691b      	ldr	r3, [r3, #16]
 80007fc:	f043 0208 	orr.w	r2, r3, #8
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	2203      	movs	r2, #3
 8000808:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800080a:	2303      	movs	r3, #3
 800080c:	e0e5      	b.n	80009da <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000814:	2b00      	cmp	r3, #0
 8000816:	dbe8      	blt.n	80007ea <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000818:	2001      	movs	r0, #1
 800081a:	f7ff fd63 	bl	80002e4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	68ba      	ldr	r2, [r7, #8]
 8000824:	69d2      	ldr	r2, [r2, #28]
 8000826:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000828:	68fb      	ldr	r3, [r7, #12]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f003 0310 	and.w	r3, r3, #16
 8000834:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000838:	fa01 f303 	lsl.w	r3, r1, r3
 800083c:	43db      	mvns	r3, r3
 800083e:	ea02 0103 	and.w	r1, r2, r3
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	6a1a      	ldr	r2, [r3, #32]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f003 0310 	and.w	r3, r3, #16
 800084c:	409a      	lsls	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	430a      	orrs	r2, r1
 8000854:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f003 0310 	and.w	r3, r3, #16
 8000862:	21ff      	movs	r1, #255	; 0xff
 8000864:	fa01 f303 	lsl.w	r3, r1, r3
 8000868:	43db      	mvns	r3, r3
 800086a:	ea02 0103 	and.w	r1, r2, r3
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f003 0310 	and.w	r3, r3, #16
 8000878:	409a      	lsls	r2, r3
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	430a      	orrs	r2, r1
 8000880:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d11d      	bne.n	80008c6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000890:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f003 0310 	and.w	r3, r3, #16
 8000898:	221f      	movs	r2, #31
 800089a:	fa02 f303 	lsl.w	r3, r2, r3
 800089e:	43db      	mvns	r3, r3
 80008a0:	69fa      	ldr	r2, [r7, #28]
 80008a2:	4013      	ands	r3, r2
 80008a4:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80008a6:	68bb      	ldr	r3, [r7, #8]
 80008a8:	699b      	ldr	r3, [r3, #24]
 80008aa:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f003 0310 	and.w	r3, r3, #16
 80008b2:	697a      	ldr	r2, [r7, #20]
 80008b4:	fa02 f303 	lsl.w	r3, r2, r3
 80008b8:	69fa      	ldr	r2, [r7, #28]
 80008ba:	4313      	orrs	r3, r2
 80008bc:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	69fa      	ldr	r2, [r7, #28]
 80008c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	681b      	ldr	r3, [r3, #0]
 80008ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80008cc:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	2207      	movs	r2, #7
 80008d6:	fa02 f303 	lsl.w	r3, r2, r3
 80008da:	43db      	mvns	r3, r3
 80008dc:	69fa      	ldr	r2, [r7, #28]
 80008de:	4013      	ands	r3, r2
 80008e0:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80008e2:	68bb      	ldr	r3, [r7, #8]
 80008e4:	685a      	ldr	r2, [r3, #4]
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	431a      	orrs	r2, r3
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	691b      	ldr	r3, [r3, #16]
 80008f0:	4313      	orrs	r3, r2
 80008f2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0310 	and.w	r3, r3, #16
 80008fa:	697a      	ldr	r2, [r7, #20]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	69fa      	ldr	r2, [r7, #28]
 8000902:	4313      	orrs	r3, r2
 8000904:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	69fa      	ldr	r2, [r7, #28]
 800090c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	6819      	ldr	r1, [r3, #0]
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	f003 0310 	and.w	r3, r3, #16
 800091a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800091e:	fa02 f303 	lsl.w	r3, r2, r3
 8000922:	43da      	mvns	r2, r3
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	400a      	ands	r2, r1
 800092a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f003 0310 	and.w	r3, r3, #16
 800093a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	43db      	mvns	r3, r3
 8000944:	69fa      	ldr	r2, [r7, #28]
 8000946:	4013      	ands	r3, r2
 8000948:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	f003 0310 	and.w	r3, r3, #16
 8000956:	697a      	ldr	r2, [r7, #20]
 8000958:	fa02 f303 	lsl.w	r3, r2, r3
 800095c:	69fa      	ldr	r2, [r7, #28]
 800095e:	4313      	orrs	r3, r2
 8000960:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800096a:	d104      	bne.n	8000976 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 800096c:	69fb      	ldr	r3, [r7, #28]
 800096e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000972:	61fb      	str	r3, [r7, #28]
 8000974:	e018      	b.n	80009a8 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	2b00      	cmp	r3, #0
 800097c:	d104      	bne.n	8000988 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 800097e:	69fb      	ldr	r3, [r7, #28]
 8000980:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000984:	61fb      	str	r3, [r7, #28]
 8000986:	e00f      	b.n	80009a8 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000988:	f003 f928 	bl	8003bdc <HAL_RCC_GetHCLKFreq>
 800098c:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800098e:	693b      	ldr	r3, [r7, #16]
 8000990:	4a14      	ldr	r2, [pc, #80]	; (80009e4 <HAL_DAC_ConfigChannel+0x27c>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d904      	bls.n	80009a0 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000996:	69fb      	ldr	r3, [r7, #28]
 8000998:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800099c:	61fb      	str	r3, [r7, #28]
 800099e:	e003      	b.n	80009a8 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80009a0:	69fb      	ldr	r3, [r7, #28]
 80009a2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80009a6:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	69fa      	ldr	r2, [r7, #28]
 80009ae:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	6819      	ldr	r1, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	f003 0310 	and.w	r3, r3, #16
 80009bc:	22c0      	movs	r2, #192	; 0xc0
 80009be:	fa02 f303 	lsl.w	r3, r2, r3
 80009c2:	43da      	mvns	r2, r3
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	400a      	ands	r2, r1
 80009ca:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	2201      	movs	r2, #1
 80009d0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	2200      	movs	r2, #0
 80009d6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80009d8:	2300      	movs	r3, #0
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3720      	adds	r7, #32
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	04c4b400 	.word	0x04c4b400

080009e8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80009f4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 80009f6:	68f8      	ldr	r0, [r7, #12]
 80009f8:	f7ff fe98 	bl	800072c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	2201      	movs	r2, #1
 8000a00:	711a      	strb	r2, [r3, #4]
}
 8000a02:	bf00      	nop
 8000a04:	3710      	adds	r7, #16
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}

08000a0a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	b084      	sub	sp, #16
 8000a0e:	af00      	add	r7, sp, #0
 8000a10:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a16:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f7ff fe91 	bl	8000740 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000a1e:	bf00      	nop
 8000a20:	3710      	adds	r7, #16
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b084      	sub	sp, #16
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a32:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	691b      	ldr	r3, [r3, #16]
 8000a38:	f043 0204 	orr.w	r2, r3, #4
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000a40:	68f8      	ldr	r0, [r7, #12]
 8000a42:	f7ff fe87 	bl	8000754 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	711a      	strb	r2, [r3, #4]
}
 8000a4c:	bf00      	nop
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr

08000a68 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr

08000a7c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000a84:	bf00      	nop
 8000a86:	370c      	adds	r7, #12
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b084      	sub	sp, #16
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000a9c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000a9e:	68f8      	ldr	r0, [r7, #12]
 8000aa0:	f7ff ffd8 	bl	8000a54 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	711a      	strb	r2, [r3, #4]
}
 8000aaa:	bf00      	nop
 8000aac:	3710      	adds	r7, #16
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}

08000ab2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000ab2:	b580      	push	{r7, lr}
 8000ab4:	b084      	sub	sp, #16
 8000ab6:	af00      	add	r7, sp, #0
 8000ab8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000abe:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000ac0:	68f8      	ldr	r0, [r7, #12]
 8000ac2:	f7ff ffd1 	bl	8000a68 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000ac6:	bf00      	nop
 8000ac8:	3710      	adds	r7, #16
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000ace:	b580      	push	{r7, lr}
 8000ad0:	b084      	sub	sp, #16
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ada:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	691b      	ldr	r3, [r3, #16]
 8000ae0:	f043 0204 	orr.w	r2, r3, #4
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000ae8:	68f8      	ldr	r0, [r7, #12]
 8000aea:	f7ff ffc7 	bl	8000a7c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2201      	movs	r2, #1
 8000af2:	711a      	strb	r2, [r3, #4]
}
 8000af4:	bf00      	nop
 8000af6:	3710      	adds	r7, #16
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b082      	sub	sp, #8
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	2b00      	cmp	r3, #0
 8000b08:	d101      	bne.n	8000b0e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	e0ac      	b.n	8000c68 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	681b      	ldr	r3, [r3, #0]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f000 fab6 	bl	8001084 <DFSDM_GetChannelFromInstance>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	4a55      	ldr	r2, [pc, #340]	; (8000c70 <HAL_DFSDM_ChannelInit+0x174>)
 8000b1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000b24:	2301      	movs	r3, #1
 8000b26:	e09f      	b.n	8000c68 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000b28:	6878      	ldr	r0, [r7, #4]
 8000b2a:	f005 f9c3 	bl	8005eb4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000b2e:	4b51      	ldr	r3, [pc, #324]	; (8000c74 <HAL_DFSDM_ChannelInit+0x178>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	3301      	adds	r3, #1
 8000b34:	4a4f      	ldr	r2, [pc, #316]	; (8000c74 <HAL_DFSDM_ChannelInit+0x178>)
 8000b36:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000b38:	4b4e      	ldr	r3, [pc, #312]	; (8000c74 <HAL_DFSDM_ChannelInit+0x178>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d125      	bne.n	8000b8c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000b40:	4b4d      	ldr	r3, [pc, #308]	; (8000c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a4c      	ldr	r2, [pc, #304]	; (8000c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000b4a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000b4c:	4b4a      	ldr	r3, [pc, #296]	; (8000c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	689b      	ldr	r3, [r3, #8]
 8000b54:	4948      	ldr	r1, [pc, #288]	; (8000c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b56:	4313      	orrs	r3, r2
 8000b58:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000b5a:	4b47      	ldr	r3, [pc, #284]	; (8000c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a46      	ldr	r2, [pc, #280]	; (8000c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b60:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000b64:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	791b      	ldrb	r3, [r3, #4]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d108      	bne.n	8000b80 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000b6e:	4b42      	ldr	r3, [pc, #264]	; (8000c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b70:	681a      	ldr	r2, [r3, #0]
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	68db      	ldr	r3, [r3, #12]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	041b      	lsls	r3, r3, #16
 8000b7a:	493f      	ldr	r1, [pc, #252]	; (8000c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000b80:	4b3d      	ldr	r3, [pc, #244]	; (8000c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a3c      	ldr	r2, [pc, #240]	; (8000c78 <HAL_DFSDM_ChannelInit+0x17c>)
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	681a      	ldr	r2, [r3, #0]
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000b9a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	6819      	ldr	r1, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000baa:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000bb0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	430a      	orrs	r2, r1
 8000bb8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	f022 020f 	bic.w	r2, r2, #15
 8000bc8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6819      	ldr	r1, [r3, #0]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000bd8:	431a      	orrs	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	430a      	orrs	r2, r1
 8000be0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	689a      	ldr	r2, [r3, #8]
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000bf0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	6899      	ldr	r1, [r3, #8]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c00:	3b01      	subs	r3, #1
 8000c02:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000c04:	431a      	orrs	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	430a      	orrs	r2, r1
 8000c0c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f002 0207 	and.w	r2, r2, #7
 8000c1c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	6859      	ldr	r1, [r3, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c28:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000c30:	431a      	orrs	r2, r3
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	430a      	orrs	r2, r1
 8000c38:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681a      	ldr	r2, [r3, #0]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000c48:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4618      	mov	r0, r3
 8000c58:	f000 fa14 	bl	8001084 <DFSDM_GetChannelFromInstance>
 8000c5c:	4602      	mov	r2, r0
 8000c5e:	4904      	ldr	r1, [pc, #16]	; (8000c70 <HAL_DFSDM_ChannelInit+0x174>)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8000c66:	2300      	movs	r3, #0
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	20000030 	.word	0x20000030
 8000c74:	2000002c 	.word	0x2000002c
 8000c78:	40016000 	.word	0x40016000

08000c7c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b082      	sub	sp, #8
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d101      	bne.n	8000c8e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e0ca      	b.n	8000e24 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a66      	ldr	r2, [pc, #408]	; (8000e2c <HAL_DFSDM_FilterInit+0x1b0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d109      	bne.n	8000cac <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8000c9c:	2b01      	cmp	r3, #1
 8000c9e:	d003      	beq.n	8000ca8 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d101      	bne.n	8000cac <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	e0bb      	b.n	8000e24 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2201      	movs	r2, #1
 8000cbc:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f005 f849 	bl	8005d5c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8000cd8:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	7a1b      	ldrb	r3, [r3, #8]
 8000cde:	2b01      	cmp	r3, #1
 8000ce0:	d108      	bne.n	8000cf4 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	e007      	b.n	8000d04 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000d02:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	7a5b      	ldrb	r3, [r3, #9]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	d108      	bne.n	8000d1e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	681a      	ldr	r2, [r3, #0]
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000d1a:	601a      	str	r2, [r3, #0]
 8000d1c:	e007      	b.n	8000d2e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000d2c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	687a      	ldr	r2, [r7, #4]
 8000d36:	6812      	ldr	r2, [r2, #0]
 8000d38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000d3c:	f023 0308 	bic.w	r3, r3, #8
 8000d40:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	2b02      	cmp	r3, #2
 8000d48:	d108      	bne.n	8000d5c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6819      	ldr	r1, [r3, #0]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	695a      	ldr	r2, [r3, #20]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7c1b      	ldrb	r3, [r3, #16]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d108      	bne.n	8000d76 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f042 0210 	orr.w	r2, r2, #16
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	e007      	b.n	8000d86 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	f022 0210 	bic.w	r2, r2, #16
 8000d84:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	7c5b      	ldrb	r3, [r3, #17]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d108      	bne.n	8000da0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	681a      	ldr	r2, [r3, #0]
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f042 0220 	orr.w	r2, r2, #32
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	e007      	b.n	8000db0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	681a      	ldr	r2, [r3, #0]
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	f022 0220 	bic.w	r2, r2, #32
 8000dae:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	695b      	ldr	r3, [r3, #20]
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	6812      	ldr	r2, [r2, #0]
 8000dba:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8000dbe:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8000dc2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	6959      	ldr	r1, [r3, #20]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	6a1b      	ldr	r3, [r3, #32]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000dd6:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ddc:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8000dde:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	430a      	orrs	r2, r1
 8000de6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	685a      	ldr	r2, [r3, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	68da      	ldr	r2, [r3, #12]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	699a      	ldr	r2, [r3, #24]
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	7c1a      	ldrb	r2, [r3, #16]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	681a      	ldr	r2, [r3, #0]
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f042 0201 	orr.w	r2, r2, #1
 8000e18:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2201      	movs	r2, #1
 8000e1e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8000e22:	2300      	movs	r3, #0
}
 8000e24:	4618      	mov	r0, r3
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40016100 	.word	0x40016100

08000e30 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b087      	sub	sp, #28
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d02e      	beq.n	8000ea8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8000e50:	2bff      	cmp	r3, #255	; 0xff
 8000e52:	d029      	beq.n	8000ea8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	68fa      	ldr	r2, [r7, #12]
 8000e5c:	6812      	ldr	r2, [r2, #0]
 8000e5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e66:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2b01      	cmp	r3, #1
 8000e6c:	d10d      	bne.n	8000e8a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	021b      	lsls	r3, r3, #8
 8000e78:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000e7c:	431a      	orrs	r2, r3
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	e00a      	b.n	8000ea0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	6819      	ldr	r1, [r3, #0]
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	021b      	lsls	r3, r3, #8
 8000e94:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	430a      	orrs	r2, r1
 8000e9e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	631a      	str	r2, [r3, #48]	; 0x30
 8000ea6:	e001      	b.n	8000eac <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8000eac:	7dfb      	ldrb	r3, [r7, #23]
}
 8000eae:	4618      	mov	r0, r3
 8000eb0:	371c      	adds	r7, #28
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
	...

08000ebc <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b086      	sub	sp, #24
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	60f8      	str	r0, [r7, #12]
 8000ec4:	60b9      	str	r1, [r7, #8]
 8000ec6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d002      	beq.n	8000ed8 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d102      	bne.n	8000ede <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	75fb      	strb	r3, [r7, #23]
 8000edc:	e064      	b.n	8000fa8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ee8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8000eec:	d002      	beq.n	8000ef4 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	75fb      	strb	r3, [r7, #23]
 8000ef2:	e059      	b.n	8000fa8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d10e      	bne.n	8000f1a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d10a      	bne.n	8000f1a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f08:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d105      	bne.n	8000f1a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b01      	cmp	r3, #1
 8000f12:	d002      	beq.n	8000f1a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8000f14:	2301      	movs	r3, #1
 8000f16:	75fb      	strb	r3, [r7, #23]
 8000f18:	e046      	b.n	8000fa8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d10b      	bne.n	8000f3a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d107      	bne.n	8000f3a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f2e:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000f30:	2b20      	cmp	r3, #32
 8000f32:	d102      	bne.n	8000f3a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	75fb      	strb	r3, [r7, #23]
 8000f38:	e036      	b.n	8000fa8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d004      	beq.n	8000f4e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 8000f4a:	2b03      	cmp	r3, #3
 8000f4c:	d12a      	bne.n	8000fa4 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f52:	4a18      	ldr	r2, [pc, #96]	; (8000fb4 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8000f54:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f5a:	4a17      	ldr	r2, [pc, #92]	; (8000fb8 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 8000f5c:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f62:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8000f64:	2b20      	cmp	r3, #32
 8000f66:	d101      	bne.n	8000f6c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8000f68:	4a14      	ldr	r2, [pc, #80]	; (8000fbc <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 8000f6a:	e000      	b.n	8000f6e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 8000f6c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f72:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	331c      	adds	r3, #28
 8000f7e:	4619      	mov	r1, r3
 8000f80:	68ba      	ldr	r2, [r7, #8]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f000 fa16 	bl	80013b4 <HAL_DMA_Start_IT>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d006      	beq.n	8000f9c <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 8000f8e:	68fb      	ldr	r3, [r7, #12]
 8000f90:	22ff      	movs	r2, #255	; 0xff
 8000f92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8000f9a:	e005      	b.n	8000fa8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8000f9c:	68f8      	ldr	r0, [r7, #12]
 8000f9e:	f000 f8bd 	bl	800111c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8000fa2:	e001      	b.n	8000fa8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8000fa8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	08001045 	.word	0x08001045
 8000fb8:	08001061 	.word	0x08001061
 8000fbc:	08001029 	.word	0x08001029

08000fc0 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b084      	sub	sp, #16
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000fd2:	2b02      	cmp	r3, #2
 8000fd4:	d007      	beq.n	8000fe6 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8000fdc:	2b04      	cmp	r3, #4
 8000fde:	d002      	beq.n	8000fe6 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	73fb      	strb	r3, [r7, #15]
 8000fe4:	e007      	b.n	8000ff6 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fea:	4618      	mov	r0, r3
 8000fec:	f000 fa5d 	bl	80014aa <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f000 f8e9 	bl	80011c8 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}

08001000 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001000:	b480      	push	{r7}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr

08001014 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001034:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f7ff ffe2 	bl	8001000 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b084      	sub	sp, #16
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001050:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001052:	68f8      	ldr	r0, [r7, #12]
 8001054:	f004 fa6e 	bl	8005534 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001058:	bf00      	nop
 800105a:	3710      	adds	r7, #16
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}

08001060 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
 8001066:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800106c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	2203      	movs	r2, #3
 8001072:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001074:	68f8      	ldr	r0, [r7, #12]
 8001076:	f7ff ffcd 	bl	8001014 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001084:	b480      	push	{r7}
 8001086:	b085      	sub	sp, #20
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <DFSDM_GetChannelFromInstance+0x7c>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d102      	bne.n	800109a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001094:	2300      	movs	r3, #0
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	e02b      	b.n	80010f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4a19      	ldr	r2, [pc, #100]	; (8001104 <DFSDM_GetChannelFromInstance+0x80>)
 800109e:	4293      	cmp	r3, r2
 80010a0:	d102      	bne.n	80010a8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	e024      	b.n	80010f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	4a17      	ldr	r2, [pc, #92]	; (8001108 <DFSDM_GetChannelFromInstance+0x84>)
 80010ac:	4293      	cmp	r3, r2
 80010ae:	d102      	bne.n	80010b6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80010b0:	2302      	movs	r3, #2
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	e01d      	b.n	80010f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4a14      	ldr	r2, [pc, #80]	; (800110c <DFSDM_GetChannelFromInstance+0x88>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d102      	bne.n	80010c4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80010be:	2304      	movs	r3, #4
 80010c0:	60fb      	str	r3, [r7, #12]
 80010c2:	e016      	b.n	80010f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4a12      	ldr	r2, [pc, #72]	; (8001110 <DFSDM_GetChannelFromInstance+0x8c>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d102      	bne.n	80010d2 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80010cc:	2305      	movs	r3, #5
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	e00f      	b.n	80010f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a0f      	ldr	r2, [pc, #60]	; (8001114 <DFSDM_GetChannelFromInstance+0x90>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d102      	bne.n	80010e0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 80010da:	2306      	movs	r3, #6
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	e008      	b.n	80010f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a0d      	ldr	r2, [pc, #52]	; (8001118 <DFSDM_GetChannelFromInstance+0x94>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d102      	bne.n	80010ee <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80010e8:	2307      	movs	r3, #7
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	e001      	b.n	80010f2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80010ee:	2303      	movs	r3, #3
 80010f0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80010f2:	68fb      	ldr	r3, [r7, #12]
}
 80010f4:	4618      	mov	r0, r3
 80010f6:	3714      	adds	r7, #20
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr
 8001100:	40016000 	.word	0x40016000
 8001104:	40016020 	.word	0x40016020
 8001108:	40016040 	.word	0x40016040
 800110c:	40016080 	.word	0x40016080
 8001110:	400160a0 	.word	0x400160a0
 8001114:	400160c0 	.word	0x400160c0
 8001118:	400160e0 	.word	0x400160e0

0800111c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001128:	2b00      	cmp	r3, #0
 800112a:	d108      	bne.n	800113e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	681a      	ldr	r2, [r3, #0]
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	e033      	b.n	80011a6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f022 0201 	bic.w	r2, r2, #1
 800114c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800115c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f042 0201 	orr.w	r2, r2, #1
 800116c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001174:	2b03      	cmp	r3, #3
 8001176:	d116      	bne.n	80011a6 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800117c:	2b00      	cmp	r3, #0
 800117e:	d107      	bne.n	8001190 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681a      	ldr	r2, [r3, #0]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0202 	orr.w	r2, r2, #2
 800118e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001196:	2b01      	cmp	r3, #1
 8001198:	d102      	bne.n	80011a0 <DFSDM_RegConvStart+0x84>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800119e:	e000      	b.n	80011a2 <DFSDM_RegConvStart+0x86>
 80011a0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d101      	bne.n	80011b4 <DFSDM_RegConvStart+0x98>
 80011b0:	2202      	movs	r2, #2
 80011b2:	e000      	b.n	80011b6 <DFSDM_RegConvStart+0x9a>
 80011b4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0201 	bic.w	r2, r2, #1
 80011de:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d107      	bne.n	80011f8 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80011f6:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	681a      	ldr	r2, [r3, #0]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f042 0201 	orr.w	r2, r2, #1
 8001206:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800120e:	2b04      	cmp	r3, #4
 8001210:	d116      	bne.n	8001240 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001216:	2b00      	cmp	r3, #0
 8001218:	d107      	bne.n	800122a <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f042 0202 	orr.w	r2, r2, #2
 8001228:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001230:	2b01      	cmp	r3, #1
 8001232:	d102      	bne.n	800123a <DFSDM_RegConvStop+0x72>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001238:	e000      	b.n	800123c <DFSDM_RegConvStop+0x74>
 800123a:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800123c:	687a      	ldr	r2, [r7, #4]
 800123e:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001246:	2b02      	cmp	r3, #2
 8001248:	d101      	bne.n	800124e <DFSDM_RegConvStop+0x86>
 800124a:	2201      	movs	r2, #1
 800124c:	e000      	b.n	8001250 <DFSDM_RegConvStop+0x88>
 800124e:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
	...

08001264 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d101      	bne.n	8001276 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001272:	2301      	movs	r3, #1
 8001274:	e08d      	b.n	8001392 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	461a      	mov	r2, r3
 800127c:	4b47      	ldr	r3, [pc, #284]	; (800139c <HAL_DMA_Init+0x138>)
 800127e:	429a      	cmp	r2, r3
 8001280:	d80f      	bhi.n	80012a2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	461a      	mov	r2, r3
 8001288:	4b45      	ldr	r3, [pc, #276]	; (80013a0 <HAL_DMA_Init+0x13c>)
 800128a:	4413      	add	r3, r2
 800128c:	4a45      	ldr	r2, [pc, #276]	; (80013a4 <HAL_DMA_Init+0x140>)
 800128e:	fba2 2303 	umull	r2, r3, r2, r3
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	009a      	lsls	r2, r3, #2
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a42      	ldr	r2, [pc, #264]	; (80013a8 <HAL_DMA_Init+0x144>)
 800129e:	641a      	str	r2, [r3, #64]	; 0x40
 80012a0:	e00e      	b.n	80012c0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	461a      	mov	r2, r3
 80012a8:	4b40      	ldr	r3, [pc, #256]	; (80013ac <HAL_DMA_Init+0x148>)
 80012aa:	4413      	add	r3, r2
 80012ac:	4a3d      	ldr	r2, [pc, #244]	; (80013a4 <HAL_DMA_Init+0x140>)
 80012ae:	fba2 2303 	umull	r2, r3, r2, r3
 80012b2:	091b      	lsrs	r3, r3, #4
 80012b4:	009a      	lsls	r2, r3, #2
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	4a3c      	ldr	r2, [pc, #240]	; (80013b0 <HAL_DMA_Init+0x14c>)
 80012be:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2202      	movs	r2, #2
 80012c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80012d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80012da:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80012e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80012f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80012fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6a1b      	ldr	r3, [r3, #32]
 8001302:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001304:	68fa      	ldr	r2, [r7, #12]
 8001306:	4313      	orrs	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f000 fa12 	bl	800173c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001320:	d102      	bne.n	8001328 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2200      	movs	r2, #0
 8001326:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001338:	687a      	ldr	r2, [r7, #4]
 800133a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800133c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d010      	beq.n	8001368 <HAL_DMA_Init+0x104>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b04      	cmp	r3, #4
 800134c:	d80c      	bhi.n	8001368 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f000 fa32 	bl	80017b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	e008      	b.n	800137a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	2200      	movs	r2, #0
 800136c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2200      	movs	r2, #0
 8001372:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2200      	movs	r2, #0
 8001378:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	2200      	movs	r2, #0
 800137e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2200      	movs	r2, #0
 800138c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001390:	2300      	movs	r3, #0
}
 8001392:	4618      	mov	r0, r3
 8001394:	3710      	adds	r7, #16
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	40020407 	.word	0x40020407
 80013a0:	bffdfff8 	.word	0xbffdfff8
 80013a4:	cccccccd 	.word	0xcccccccd
 80013a8:	40020000 	.word	0x40020000
 80013ac:	bffdfbf8 	.word	0xbffdfbf8
 80013b0:	40020400 	.word	0x40020400

080013b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	60f8      	str	r0, [r7, #12]
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80013c2:	2300      	movs	r3, #0
 80013c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d101      	bne.n	80013d4 <HAL_DMA_Start_IT+0x20>
 80013d0:	2302      	movs	r3, #2
 80013d2:	e066      	b.n	80014a2 <HAL_DMA_Start_IT+0xee>
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d155      	bne.n	8001494 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2202      	movs	r2, #2
 80013ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	2200      	movs	r2, #0
 80013f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 0201 	bic.w	r2, r2, #1
 8001404:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	687a      	ldr	r2, [r7, #4]
 800140a:	68b9      	ldr	r1, [r7, #8]
 800140c:	68f8      	ldr	r0, [r7, #12]
 800140e:	f000 f957 	bl	80016c0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	2b00      	cmp	r3, #0
 8001418:	d008      	beq.n	800142c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	681a      	ldr	r2, [r3, #0]
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f042 020e 	orr.w	r2, r2, #14
 8001428:	601a      	str	r2, [r3, #0]
 800142a:	e00f      	b.n	800144c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	681a      	ldr	r2, [r3, #0]
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f022 0204 	bic.w	r2, r2, #4
 800143a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f042 020a 	orr.w	r2, r2, #10
 800144a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001468:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800146e:	2b00      	cmp	r3, #0
 8001470:	d007      	beq.n	8001482 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800147c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001480:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	681a      	ldr	r2, [r3, #0]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f042 0201 	orr.w	r2, r2, #1
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	e005      	b.n	80014a0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	2200      	movs	r2, #0
 8001498:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800149c:	2302      	movs	r3, #2
 800149e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b085      	sub	sp, #20
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d008      	beq.n	80014d4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2204      	movs	r2, #4
 80014c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e040      	b.n	8001556 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 020e 	bic.w	r2, r2, #14
 80014e2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014e8:	681a      	ldr	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014f2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	681a      	ldr	r2, [r3, #0]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f022 0201 	bic.w	r2, r2, #1
 8001502:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001508:	f003 021c 	and.w	r2, r3, #28
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001510:	2101      	movs	r1, #1
 8001512:	fa01 f202 	lsl.w	r2, r1, r2
 8001516:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	687a      	ldr	r2, [r7, #4]
 800151e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001520:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001526:	2b00      	cmp	r3, #0
 8001528:	d00c      	beq.n	8001544 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001534:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001538:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800153e:	687a      	ldr	r2, [r7, #4]
 8001540:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001542:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr

08001562 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001562:	b580      	push	{r7, lr}
 8001564:	b084      	sub	sp, #16
 8001566:	af00      	add	r7, sp, #0
 8001568:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800157e:	f003 031c 	and.w	r3, r3, #28
 8001582:	2204      	movs	r2, #4
 8001584:	409a      	lsls	r2, r3
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	4013      	ands	r3, r2
 800158a:	2b00      	cmp	r3, #0
 800158c:	d026      	beq.n	80015dc <HAL_DMA_IRQHandler+0x7a>
 800158e:	68bb      	ldr	r3, [r7, #8]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	2b00      	cmp	r3, #0
 8001596:	d021      	beq.n	80015dc <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d107      	bne.n	80015b6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f022 0204 	bic.w	r2, r2, #4
 80015b4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ba:	f003 021c 	and.w	r2, r3, #28
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	2104      	movs	r1, #4
 80015c4:	fa01 f202 	lsl.w	r2, r1, r2
 80015c8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d071      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	6878      	ldr	r0, [r7, #4]
 80015d8:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80015da:	e06c      	b.n	80016b6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e0:	f003 031c 	and.w	r3, r3, #28
 80015e4:	2202      	movs	r2, #2
 80015e6:	409a      	lsls	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4013      	ands	r3, r2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d02e      	beq.n	800164e <HAL_DMA_IRQHandler+0xec>
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d029      	beq.n	800164e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f003 0320 	and.w	r3, r3, #32
 8001604:	2b00      	cmp	r3, #0
 8001606:	d10b      	bne.n	8001620 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	681a      	ldr	r2, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f022 020a 	bic.w	r2, r2, #10
 8001616:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001624:	f003 021c 	and.w	r2, r3, #28
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162c:	2102      	movs	r1, #2
 800162e:	fa01 f202 	lsl.w	r2, r1, r2
 8001632:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	2200      	movs	r2, #0
 8001638:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001640:	2b00      	cmp	r3, #0
 8001642:	d038      	beq.n	80016b6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800164c:	e033      	b.n	80016b6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001652:	f003 031c 	and.w	r3, r3, #28
 8001656:	2208      	movs	r2, #8
 8001658:	409a      	lsls	r2, r3
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	4013      	ands	r3, r2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d02a      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x156>
 8001662:	68bb      	ldr	r3, [r7, #8]
 8001664:	f003 0308 	and.w	r3, r3, #8
 8001668:	2b00      	cmp	r3, #0
 800166a:	d025      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	681a      	ldr	r2, [r3, #0]
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f022 020e 	bic.w	r2, r2, #14
 800167a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001680:	f003 021c 	and.w	r2, r3, #28
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001688:	2101      	movs	r1, #1
 800168a:	fa01 f202 	lsl.w	r2, r1, r2
 800168e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	2201      	movs	r2, #1
 8001694:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2201      	movs	r2, #1
 800169a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d004      	beq.n	80016b8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80016b6:	bf00      	nop
 80016b8:	bf00      	nop
}
 80016ba:	3710      	adds	r7, #16
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b085      	sub	sp, #20
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	60f8      	str	r0, [r7, #12]
 80016c8:	60b9      	str	r1, [r7, #8]
 80016ca:	607a      	str	r2, [r7, #4]
 80016cc:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016d6:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d004      	beq.n	80016ea <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e4:	68fa      	ldr	r2, [r7, #12]
 80016e6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016e8:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f003 021c 	and.w	r2, r3, #28
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	2101      	movs	r1, #1
 80016f8:	fa01 f202 	lsl.w	r2, r1, r2
 80016fc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	2b10      	cmp	r3, #16
 800170c:	d108      	bne.n	8001720 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68ba      	ldr	r2, [r7, #8]
 800171c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800171e:	e007      	b.n	8001730 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68ba      	ldr	r2, [r7, #8]
 8001726:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	687a      	ldr	r2, [r7, #4]
 800172e:	60da      	str	r2, [r3, #12]
}
 8001730:	bf00      	nop
 8001732:	3714      	adds	r7, #20
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800173c:	b480      	push	{r7}
 800173e:	b085      	sub	sp, #20
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	461a      	mov	r2, r3
 800174a:	4b17      	ldr	r3, [pc, #92]	; (80017a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800174c:	429a      	cmp	r2, r3
 800174e:	d80a      	bhi.n	8001766 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001754:	089b      	lsrs	r3, r3, #2
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800175c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	6493      	str	r3, [r2, #72]	; 0x48
 8001764:	e007      	b.n	8001776 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	089b      	lsrs	r3, r3, #2
 800176c:	009a      	lsls	r2, r3, #2
 800176e:	4b0f      	ldr	r3, [pc, #60]	; (80017ac <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001770:	4413      	add	r3, r2
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	b2db      	uxtb	r3, r3
 800177c:	3b08      	subs	r3, #8
 800177e:	4a0c      	ldr	r2, [pc, #48]	; (80017b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001780:	fba2 2303 	umull	r2, r3, r2, r3
 8001784:	091b      	lsrs	r3, r3, #4
 8001786:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	4a0a      	ldr	r2, [pc, #40]	; (80017b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800178c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f003 031f 	and.w	r3, r3, #31
 8001794:	2201      	movs	r2, #1
 8001796:	409a      	lsls	r2, r3
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800179c:	bf00      	nop
 800179e:	3714      	adds	r7, #20
 80017a0:	46bd      	mov	sp, r7
 80017a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a6:	4770      	bx	lr
 80017a8:	40020407 	.word	0x40020407
 80017ac:	4002081c 	.word	0x4002081c
 80017b0:	cccccccd 	.word	0xcccccccd
 80017b4:	40020880 	.word	0x40020880

080017b8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80017c8:	68fa      	ldr	r2, [r7, #12]
 80017ca:	4b0b      	ldr	r3, [pc, #44]	; (80017f8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80017cc:	4413      	add	r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	461a      	mov	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4a08      	ldr	r2, [pc, #32]	; (80017fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80017da:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	3b01      	subs	r3, #1
 80017e0:	f003 0303 	and.w	r3, r3, #3
 80017e4:	2201      	movs	r2, #1
 80017e6:	409a      	lsls	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	1000823f 	.word	0x1000823f
 80017fc:	40020940 	.word	0x40020940

08001800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001800:	b480      	push	{r7}
 8001802:	b087      	sub	sp, #28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
 8001808:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800180a:	2300      	movs	r3, #0
 800180c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800180e:	e166      	b.n	8001ade <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681a      	ldr	r2, [r3, #0]
 8001814:	2101      	movs	r1, #1
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	fa01 f303 	lsl.w	r3, r1, r3
 800181c:	4013      	ands	r3, r2
 800181e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2b00      	cmp	r3, #0
 8001824:	f000 8158 	beq.w	8001ad8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f003 0303 	and.w	r3, r3, #3
 8001830:	2b01      	cmp	r3, #1
 8001832:	d005      	beq.n	8001840 <HAL_GPIO_Init+0x40>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f003 0303 	and.w	r3, r3, #3
 800183c:	2b02      	cmp	r3, #2
 800183e:	d130      	bne.n	80018a2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	689b      	ldr	r3, [r3, #8]
 8001844:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001846:	697b      	ldr	r3, [r7, #20]
 8001848:	005b      	lsls	r3, r3, #1
 800184a:	2203      	movs	r2, #3
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	43db      	mvns	r3, r3
 8001852:	693a      	ldr	r2, [r7, #16]
 8001854:	4013      	ands	r3, r2
 8001856:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001858:	683b      	ldr	r3, [r7, #0]
 800185a:	68da      	ldr	r2, [r3, #12]
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	fa02 f303 	lsl.w	r3, r2, r3
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	4313      	orrs	r3, r2
 8001868:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	693a      	ldr	r2, [r7, #16]
 800186e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001876:	2201      	movs	r2, #1
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43db      	mvns	r3, r3
 8001880:	693a      	ldr	r2, [r7, #16]
 8001882:	4013      	ands	r3, r2
 8001884:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	091b      	lsrs	r3, r3, #4
 800188c:	f003 0201 	and.w	r2, r3, #1
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	693a      	ldr	r2, [r7, #16]
 8001898:	4313      	orrs	r3, r2
 800189a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	693a      	ldr	r2, [r7, #16]
 80018a0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f003 0303 	and.w	r3, r3, #3
 80018aa:	2b03      	cmp	r3, #3
 80018ac:	d017      	beq.n	80018de <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	2203      	movs	r2, #3
 80018ba:	fa02 f303 	lsl.w	r3, r2, r3
 80018be:	43db      	mvns	r3, r3
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	4013      	ands	r3, r2
 80018c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	689a      	ldr	r2, [r3, #8]
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	4313      	orrs	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	693a      	ldr	r2, [r7, #16]
 80018dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	f003 0303 	and.w	r3, r3, #3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d123      	bne.n	8001932 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	08da      	lsrs	r2, r3, #3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	3208      	adds	r2, #8
 80018f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018f6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	f003 0307 	and.w	r3, r3, #7
 80018fe:	009b      	lsls	r3, r3, #2
 8001900:	220f      	movs	r2, #15
 8001902:	fa02 f303 	lsl.w	r3, r2, r3
 8001906:	43db      	mvns	r3, r3
 8001908:	693a      	ldr	r2, [r7, #16]
 800190a:	4013      	ands	r3, r2
 800190c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	691a      	ldr	r2, [r3, #16]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	f003 0307 	and.w	r3, r3, #7
 8001918:	009b      	lsls	r3, r3, #2
 800191a:	fa02 f303 	lsl.w	r3, r2, r3
 800191e:	693a      	ldr	r2, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	08da      	lsrs	r2, r3, #3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	3208      	adds	r2, #8
 800192c:	6939      	ldr	r1, [r7, #16]
 800192e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	005b      	lsls	r3, r3, #1
 800193c:	2203      	movs	r2, #3
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	43db      	mvns	r3, r3
 8001944:	693a      	ldr	r2, [r7, #16]
 8001946:	4013      	ands	r3, r2
 8001948:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0203 	and.w	r2, r3, #3
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	fa02 f303 	lsl.w	r3, r2, r3
 800195a:	693a      	ldr	r2, [r7, #16]
 800195c:	4313      	orrs	r3, r2
 800195e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	693a      	ldr	r2, [r7, #16]
 8001964:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	685b      	ldr	r3, [r3, #4]
 800196a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800196e:	2b00      	cmp	r3, #0
 8001970:	f000 80b2 	beq.w	8001ad8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001974:	4b61      	ldr	r3, [pc, #388]	; (8001afc <HAL_GPIO_Init+0x2fc>)
 8001976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001978:	4a60      	ldr	r2, [pc, #384]	; (8001afc <HAL_GPIO_Init+0x2fc>)
 800197a:	f043 0301 	orr.w	r3, r3, #1
 800197e:	6613      	str	r3, [r2, #96]	; 0x60
 8001980:	4b5e      	ldr	r3, [pc, #376]	; (8001afc <HAL_GPIO_Init+0x2fc>)
 8001982:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001984:	f003 0301 	and.w	r3, r3, #1
 8001988:	60bb      	str	r3, [r7, #8]
 800198a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800198c:	4a5c      	ldr	r2, [pc, #368]	; (8001b00 <HAL_GPIO_Init+0x300>)
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	089b      	lsrs	r3, r3, #2
 8001992:	3302      	adds	r3, #2
 8001994:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001998:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	f003 0303 	and.w	r3, r3, #3
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	693a      	ldr	r2, [r7, #16]
 80019ac:	4013      	ands	r3, r2
 80019ae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80019b6:	d02b      	beq.n	8001a10 <HAL_GPIO_Init+0x210>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a52      	ldr	r2, [pc, #328]	; (8001b04 <HAL_GPIO_Init+0x304>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d025      	beq.n	8001a0c <HAL_GPIO_Init+0x20c>
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	4a51      	ldr	r2, [pc, #324]	; (8001b08 <HAL_GPIO_Init+0x308>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d01f      	beq.n	8001a08 <HAL_GPIO_Init+0x208>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	4a50      	ldr	r2, [pc, #320]	; (8001b0c <HAL_GPIO_Init+0x30c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d019      	beq.n	8001a04 <HAL_GPIO_Init+0x204>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a4f      	ldr	r2, [pc, #316]	; (8001b10 <HAL_GPIO_Init+0x310>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d013      	beq.n	8001a00 <HAL_GPIO_Init+0x200>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	4a4e      	ldr	r2, [pc, #312]	; (8001b14 <HAL_GPIO_Init+0x314>)
 80019dc:	4293      	cmp	r3, r2
 80019de:	d00d      	beq.n	80019fc <HAL_GPIO_Init+0x1fc>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a4d      	ldr	r2, [pc, #308]	; (8001b18 <HAL_GPIO_Init+0x318>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d007      	beq.n	80019f8 <HAL_GPIO_Init+0x1f8>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a4c      	ldr	r2, [pc, #304]	; (8001b1c <HAL_GPIO_Init+0x31c>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d101      	bne.n	80019f4 <HAL_GPIO_Init+0x1f4>
 80019f0:	2307      	movs	r3, #7
 80019f2:	e00e      	b.n	8001a12 <HAL_GPIO_Init+0x212>
 80019f4:	2308      	movs	r3, #8
 80019f6:	e00c      	b.n	8001a12 <HAL_GPIO_Init+0x212>
 80019f8:	2306      	movs	r3, #6
 80019fa:	e00a      	b.n	8001a12 <HAL_GPIO_Init+0x212>
 80019fc:	2305      	movs	r3, #5
 80019fe:	e008      	b.n	8001a12 <HAL_GPIO_Init+0x212>
 8001a00:	2304      	movs	r3, #4
 8001a02:	e006      	b.n	8001a12 <HAL_GPIO_Init+0x212>
 8001a04:	2303      	movs	r3, #3
 8001a06:	e004      	b.n	8001a12 <HAL_GPIO_Init+0x212>
 8001a08:	2302      	movs	r3, #2
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0x212>
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	e000      	b.n	8001a12 <HAL_GPIO_Init+0x212>
 8001a10:	2300      	movs	r3, #0
 8001a12:	697a      	ldr	r2, [r7, #20]
 8001a14:	f002 0203 	and.w	r2, r2, #3
 8001a18:	0092      	lsls	r2, r2, #2
 8001a1a:	4093      	lsls	r3, r2
 8001a1c:	693a      	ldr	r2, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001a22:	4937      	ldr	r1, [pc, #220]	; (8001b00 <HAL_GPIO_Init+0x300>)
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	3302      	adds	r3, #2
 8001a2a:	693a      	ldr	r2, [r7, #16]
 8001a2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a30:	4b3b      	ldr	r3, [pc, #236]	; (8001b20 <HAL_GPIO_Init+0x320>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	43db      	mvns	r3, r3
 8001a3a:	693a      	ldr	r2, [r7, #16]
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	685b      	ldr	r3, [r3, #4]
 8001a44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	4313      	orrs	r3, r2
 8001a52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a54:	4a32      	ldr	r2, [pc, #200]	; (8001b20 <HAL_GPIO_Init+0x320>)
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a5a:	4b31      	ldr	r3, [pc, #196]	; (8001b20 <HAL_GPIO_Init+0x320>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	43db      	mvns	r3, r3
 8001a64:	693a      	ldr	r2, [r7, #16]
 8001a66:	4013      	ands	r3, r2
 8001a68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d003      	beq.n	8001a7e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a7e:	4a28      	ldr	r2, [pc, #160]	; (8001b20 <HAL_GPIO_Init+0x320>)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a84:	4b26      	ldr	r3, [pc, #152]	; (8001b20 <HAL_GPIO_Init+0x320>)
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	43db      	mvns	r3, r3
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	4013      	ands	r3, r2
 8001a92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d003      	beq.n	8001aa8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001aa8:	4a1d      	ldr	r2, [pc, #116]	; (8001b20 <HAL_GPIO_Init+0x320>)
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001aae:	4b1c      	ldr	r3, [pc, #112]	; (8001b20 <HAL_GPIO_Init+0x320>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	43db      	mvns	r3, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4013      	ands	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d003      	beq.n	8001ad2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001aca:	693a      	ldr	r2, [r7, #16]
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	4313      	orrs	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ad2:	4a13      	ldr	r2, [pc, #76]	; (8001b20 <HAL_GPIO_Init+0x320>)
 8001ad4:	693b      	ldr	r3, [r7, #16]
 8001ad6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	3301      	adds	r3, #1
 8001adc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	f47f ae91 	bne.w	8001810 <HAL_GPIO_Init+0x10>
  }
}
 8001aee:	bf00      	nop
 8001af0:	bf00      	nop
 8001af2:	371c      	adds	r7, #28
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr
 8001afc:	40021000 	.word	0x40021000
 8001b00:	40010000 	.word	0x40010000
 8001b04:	48000400 	.word	0x48000400
 8001b08:	48000800 	.word	0x48000800
 8001b0c:	48000c00 	.word	0x48000c00
 8001b10:	48001000 	.word	0x48001000
 8001b14:	48001400 	.word	0x48001400
 8001b18:	48001800 	.word	0x48001800
 8001b1c:	48001c00 	.word	0x48001c00
 8001b20:	40010400 	.word	0x40010400

08001b24 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b087      	sub	sp, #28
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001b32:	e0c9      	b.n	8001cc8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001b34:	2201      	movs	r2, #1
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	4013      	ands	r3, r2
 8001b40:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80bc 	beq.w	8001cc2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001b4a:	4a66      	ldr	r2, [pc, #408]	; (8001ce4 <HAL_GPIO_DeInit+0x1c0>)
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	089b      	lsrs	r3, r3, #2
 8001b50:	3302      	adds	r3, #2
 8001b52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b56:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	f003 0303 	and.w	r3, r3, #3
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	220f      	movs	r2, #15
 8001b62:	fa02 f303 	lsl.w	r3, r2, r3
 8001b66:	68fa      	ldr	r2, [r7, #12]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b72:	d02b      	beq.n	8001bcc <HAL_GPIO_DeInit+0xa8>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a5c      	ldr	r2, [pc, #368]	; (8001ce8 <HAL_GPIO_DeInit+0x1c4>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d025      	beq.n	8001bc8 <HAL_GPIO_DeInit+0xa4>
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	4a5b      	ldr	r2, [pc, #364]	; (8001cec <HAL_GPIO_DeInit+0x1c8>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d01f      	beq.n	8001bc4 <HAL_GPIO_DeInit+0xa0>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	4a5a      	ldr	r2, [pc, #360]	; (8001cf0 <HAL_GPIO_DeInit+0x1cc>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d019      	beq.n	8001bc0 <HAL_GPIO_DeInit+0x9c>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a59      	ldr	r2, [pc, #356]	; (8001cf4 <HAL_GPIO_DeInit+0x1d0>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d013      	beq.n	8001bbc <HAL_GPIO_DeInit+0x98>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a58      	ldr	r2, [pc, #352]	; (8001cf8 <HAL_GPIO_DeInit+0x1d4>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d00d      	beq.n	8001bb8 <HAL_GPIO_DeInit+0x94>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a57      	ldr	r2, [pc, #348]	; (8001cfc <HAL_GPIO_DeInit+0x1d8>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d007      	beq.n	8001bb4 <HAL_GPIO_DeInit+0x90>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a56      	ldr	r2, [pc, #344]	; (8001d00 <HAL_GPIO_DeInit+0x1dc>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d101      	bne.n	8001bb0 <HAL_GPIO_DeInit+0x8c>
 8001bac:	2307      	movs	r3, #7
 8001bae:	e00e      	b.n	8001bce <HAL_GPIO_DeInit+0xaa>
 8001bb0:	2308      	movs	r3, #8
 8001bb2:	e00c      	b.n	8001bce <HAL_GPIO_DeInit+0xaa>
 8001bb4:	2306      	movs	r3, #6
 8001bb6:	e00a      	b.n	8001bce <HAL_GPIO_DeInit+0xaa>
 8001bb8:	2305      	movs	r3, #5
 8001bba:	e008      	b.n	8001bce <HAL_GPIO_DeInit+0xaa>
 8001bbc:	2304      	movs	r3, #4
 8001bbe:	e006      	b.n	8001bce <HAL_GPIO_DeInit+0xaa>
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e004      	b.n	8001bce <HAL_GPIO_DeInit+0xaa>
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	e002      	b.n	8001bce <HAL_GPIO_DeInit+0xaa>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <HAL_GPIO_DeInit+0xaa>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	697a      	ldr	r2, [r7, #20]
 8001bd0:	f002 0203 	and.w	r2, r2, #3
 8001bd4:	0092      	lsls	r2, r2, #2
 8001bd6:	4093      	lsls	r3, r2
 8001bd8:	68fa      	ldr	r2, [r7, #12]
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d132      	bne.n	8001c44 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001bde:	4b49      	ldr	r3, [pc, #292]	; (8001d04 <HAL_GPIO_DeInit+0x1e0>)
 8001be0:	681a      	ldr	r2, [r3, #0]
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	43db      	mvns	r3, r3
 8001be6:	4947      	ldr	r1, [pc, #284]	; (8001d04 <HAL_GPIO_DeInit+0x1e0>)
 8001be8:	4013      	ands	r3, r2
 8001bea:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001bec:	4b45      	ldr	r3, [pc, #276]	; (8001d04 <HAL_GPIO_DeInit+0x1e0>)
 8001bee:	685a      	ldr	r2, [r3, #4]
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	43db      	mvns	r3, r3
 8001bf4:	4943      	ldr	r1, [pc, #268]	; (8001d04 <HAL_GPIO_DeInit+0x1e0>)
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001bfa:	4b42      	ldr	r3, [pc, #264]	; (8001d04 <HAL_GPIO_DeInit+0x1e0>)
 8001bfc:	68da      	ldr	r2, [r3, #12]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4940      	ldr	r1, [pc, #256]	; (8001d04 <HAL_GPIO_DeInit+0x1e0>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001c08:	4b3e      	ldr	r3, [pc, #248]	; (8001d04 <HAL_GPIO_DeInit+0x1e0>)
 8001c0a:	689a      	ldr	r2, [r3, #8]
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	43db      	mvns	r3, r3
 8001c10:	493c      	ldr	r1, [pc, #240]	; (8001d04 <HAL_GPIO_DeInit+0x1e0>)
 8001c12:	4013      	ands	r3, r2
 8001c14:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	f003 0303 	and.w	r3, r3, #3
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	220f      	movs	r2, #15
 8001c20:	fa02 f303 	lsl.w	r3, r2, r3
 8001c24:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001c26:	4a2f      	ldr	r2, [pc, #188]	; (8001ce4 <HAL_GPIO_DeInit+0x1c0>)
 8001c28:	697b      	ldr	r3, [r7, #20]
 8001c2a:	089b      	lsrs	r3, r3, #2
 8001c2c:	3302      	adds	r3, #2
 8001c2e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	43da      	mvns	r2, r3
 8001c36:	482b      	ldr	r0, [pc, #172]	; (8001ce4 <HAL_GPIO_DeInit+0x1c0>)
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	089b      	lsrs	r3, r3, #2
 8001c3c:	400a      	ands	r2, r1
 8001c3e:	3302      	adds	r3, #2
 8001c40:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681a      	ldr	r2, [r3, #0]
 8001c48:	697b      	ldr	r3, [r7, #20]
 8001c4a:	005b      	lsls	r3, r3, #1
 8001c4c:	2103      	movs	r1, #3
 8001c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	08da      	lsrs	r2, r3, #3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	3208      	adds	r2, #8
 8001c60:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	009b      	lsls	r3, r3, #2
 8001c6c:	220f      	movs	r2, #15
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	08d2      	lsrs	r2, r2, #3
 8001c78:	4019      	ands	r1, r3
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	3208      	adds	r2, #8
 8001c7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	689a      	ldr	r2, [r3, #8]
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2103      	movs	r1, #3
 8001c8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	401a      	ands	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685a      	ldr	r2, [r3, #4]
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	401a      	ands	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	68da      	ldr	r2, [r3, #12]
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2103      	movs	r1, #3
 8001cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	401a      	ands	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	3301      	adds	r3, #1
 8001cc6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001cc8:	683a      	ldr	r2, [r7, #0]
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	fa22 f303 	lsr.w	r3, r2, r3
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f47f af2f 	bne.w	8001b34 <HAL_GPIO_DeInit+0x10>
  }
}
 8001cd6:	bf00      	nop
 8001cd8:	bf00      	nop
 8001cda:	371c      	adds	r7, #28
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr
 8001ce4:	40010000 	.word	0x40010000
 8001ce8:	48000400 	.word	0x48000400
 8001cec:	48000800 	.word	0x48000800
 8001cf0:	48000c00 	.word	0x48000c00
 8001cf4:	48001000 	.word	0x48001000
 8001cf8:	48001400 	.word	0x48001400
 8001cfc:	48001800 	.word	0x48001800
 8001d00:	48001c00 	.word	0x48001c00
 8001d04:	40010400 	.word	0x40010400

08001d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	460b      	mov	r3, r1
 8001d12:	807b      	strh	r3, [r7, #2]
 8001d14:	4613      	mov	r3, r2
 8001d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d18:	787b      	ldrb	r3, [r7, #1]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d003      	beq.n	8001d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d1e:	887a      	ldrh	r2, [r7, #2]
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d24:	e002      	b.n	8001d2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d26:	887a      	ldrh	r2, [r7, #2]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d2c:	bf00      	nop
 8001d2e:	370c      	adds	r7, #12
 8001d30:	46bd      	mov	sp, r7
 8001d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d36:	4770      	bx	lr

08001d38 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	460b      	mov	r3, r1
 8001d42:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	695b      	ldr	r3, [r3, #20]
 8001d48:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001d4a:	887a      	ldrh	r2, [r7, #2]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	041a      	lsls	r2, r3, #16
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	43d9      	mvns	r1, r3
 8001d56:	887b      	ldrh	r3, [r7, #2]
 8001d58:	400b      	ands	r3, r1
 8001d5a:	431a      	orrs	r2, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	619a      	str	r2, [r3, #24]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	4603      	mov	r3, r0
 8001d74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001d76:	4b08      	ldr	r3, [pc, #32]	; (8001d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d78:	695a      	ldr	r2, [r3, #20]
 8001d7a:	88fb      	ldrh	r3, [r7, #6]
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d006      	beq.n	8001d90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d82:	4a05      	ldr	r2, [pc, #20]	; (8001d98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d84:	88fb      	ldrh	r3, [r7, #6]
 8001d86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f003 fbb4 	bl	80054f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40010400 	.word	0x40010400

08001d9c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b086      	sub	sp, #24
 8001da0:	af02      	add	r7, sp, #8
 8001da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001da4:	2300      	movs	r3, #0
 8001da6:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001da8:	f7fe fa90 	bl	80002cc <HAL_GetTick>
 8001dac:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
 8001db8:	e092      	b.n	8001ee0 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	f040 808b 	bne.w	8001ee0 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8001dca:	6878      	ldr	r0, [r7, #4]
 8001dcc:	f004 f8e2 	bl	8005f94 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8001dd0:	f241 3188 	movw	r1, #5000	; 0x1388
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f000 fad0 	bl	800237a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689a      	ldr	r2, [r3, #8]
 8001de0:	4b42      	ldr	r3, [pc, #264]	; (8001eec <HAL_OSPI_Init+0x150>)
 8001de2:	4013      	ands	r3, r2
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	68d1      	ldr	r1, [r2, #12]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	6912      	ldr	r2, [r2, #16]
 8001dec:	3a01      	subs	r2, #1
 8001dee:	0412      	lsls	r2, r2, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6952      	ldr	r2, [r2, #20]
 8001df6:	3a01      	subs	r2, #1
 8001df8:	0212      	lsls	r2, r2, #8
 8001dfa:	4311      	orrs	r1, r2
 8001dfc:	687a      	ldr	r2, [r7, #4]
 8001dfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e00:	4311      	orrs	r1, r2
 8001e02:	687a      	ldr	r2, [r7, #4]
 8001e04:	69d2      	ldr	r2, [r2, #28]
 8001e06:	4311      	orrs	r1, r2
 8001e08:	687a      	ldr	r2, [r7, #4]
 8001e0a:	6812      	ldr	r2, [r2, #0]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	0412      	lsls	r2, r2, #16
 8001e1a:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	3b01      	subs	r3, #1
 8001e2c:	021a      	lsls	r2, r3, #8
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	430a      	orrs	r2, r1
 8001e34:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3a:	9300      	str	r3, [sp, #0]
 8001e3c:	68bb      	ldr	r3, [r7, #8]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	2120      	movs	r1, #32
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f000 fddc 	bl	8002a00 <OSPI_WaitFlagStateUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8001e4c:	7bfb      	ldrb	r3, [r7, #15]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d146      	bne.n	8001ee0 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6a1b      	ldr	r3, [r3, #32]
 8001e60:	1e5a      	subs	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001e88:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	430a      	orrs	r2, r1
 8001e9c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f042 0201 	orr.w	r2, r2, #1
 8001eae:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d107      	bne.n	8001ec8 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	689a      	ldr	r2, [r3, #8]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0202 	orr.w	r2, r2, #2
 8001ec6:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001ed0:	d103      	bne.n	8001eda <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2201      	movs	r2, #1
 8001ed6:	645a      	str	r2, [r3, #68]	; 0x44
 8001ed8:	e002      	b.n	8001ee0 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2202      	movs	r2, #2
 8001ede:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8001ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	f8e0f8f4 	.word	0xf8e0f8f4

08001ef0 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d102      	bne.n	8001f08 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	73fb      	strb	r3, [r7, #15]
 8001f06:	e015      	b.n	8001f34 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	689a      	ldr	r2, [r3, #8]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f022 0202 	bic.w	r2, r2, #2
 8001f26:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f004 f89f 	bl	800606c <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8001f34:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f36:	4618      	mov	r0, r3
 8001f38:	3710      	adds	r7, #16
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8001f3e:	b580      	push	{r7, lr}
 8001f40:	b08a      	sub	sp, #40	; 0x28
 8001f42:	af02      	add	r7, sp, #8
 8001f44:	60f8      	str	r0, [r7, #12]
 8001f46:	60b9      	str	r1, [r7, #8]
 8001f48:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8001f4a:	f7fe f9bf 	bl	80002cc <HAL_GetTick>
 8001f4e:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f54:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f5a:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8001f5c:	697b      	ldr	r3, [r7, #20]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d104      	bne.n	8001f6c <HAL_OSPI_Command+0x2e>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	68db      	ldr	r3, [r3, #12]
 8001f66:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f6a:	d10d      	bne.n	8001f88 <HAL_OSPI_Command+0x4a>
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	2b14      	cmp	r3, #20
 8001f70:	d103      	bne.n	8001f7a <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d006      	beq.n	8001f88 <HAL_OSPI_Command+0x4a>
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b24      	cmp	r3, #36	; 0x24
 8001f7e:	d153      	bne.n	8002028 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b01      	cmp	r3, #1
 8001f86:	d14f      	bne.n	8002028 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	9300      	str	r3, [sp, #0]
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	2120      	movs	r1, #32
 8001f92:	68f8      	ldr	r0, [r7, #12]
 8001f94:	f000 fd34 	bl	8002a00 <OSPI_WaitFlagStateUntilTimeout>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8001f9c:	7ffb      	ldrb	r3, [r7, #31]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d148      	bne.n	8002034 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8001fa8:	68b9      	ldr	r1, [r7, #8]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f000 fd60 	bl	8002a70 <OSPI_ConfigCmd>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8001fb4:	7ffb      	ldrb	r3, [r7, #31]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d13c      	bne.n	8002034 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8001fba:	68bb      	ldr	r3, [r7, #8]
 8001fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d10e      	bne.n	8001fe0 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	2102      	movs	r1, #2
 8001fcc:	68f8      	ldr	r0, [r7, #12]
 8001fce:	f000 fd17 	bl	8002a00 <OSPI_WaitFlagStateUntilTimeout>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2202      	movs	r2, #2
 8001fdc:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8001fde:	e029      	b.n	8002034 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d103      	bne.n	8001ff0 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	2204      	movs	r2, #4
 8001fec:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8001fee:	e021      	b.n	8002034 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d10b      	bne.n	8002010 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	2b24      	cmp	r3, #36	; 0x24
 8001ffe:	d103      	bne.n	8002008 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2204      	movs	r2, #4
 8002004:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002006:	e015      	b.n	8002034 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	2214      	movs	r2, #20
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800200e:	e011      	b.n	8002034 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002014:	2b14      	cmp	r3, #20
 8002016:	d103      	bne.n	8002020 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2204      	movs	r2, #4
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800201e:	e009      	b.n	8002034 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2224      	movs	r2, #36	; 0x24
 8002024:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002026:	e005      	b.n	8002034 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002028:	2301      	movs	r3, #1
 800202a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2210      	movs	r2, #16
 8002030:	649a      	str	r2, [r3, #72]	; 0x48
 8002032:	e000      	b.n	8002036 <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8002034:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002036:	7ffb      	ldrb	r3, [r7, #31]
}
 8002038:	4618      	mov	r0, r3
 800203a:	3720      	adds	r7, #32
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af02      	add	r7, sp, #8
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800204c:	f7fe f93e 	bl	80002cc <HAL_GetTick>
 8002050:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	3350      	adds	r3, #80	; 0x50
 8002058:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d105      	bne.n	800206c <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8002060:	2301      	movs	r3, #1
 8002062:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2208      	movs	r2, #8
 8002068:	649a      	str	r2, [r3, #72]	; 0x48
 800206a:	e057      	b.n	800211c <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002070:	2b04      	cmp	r3, #4
 8002072:	d14e      	bne.n	8002112 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800207a:	1c5a      	adds	r2, r3, #1
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800209c:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	2201      	movs	r2, #1
 80020a6:	2104      	movs	r1, #4
 80020a8:	68f8      	ldr	r0, [r7, #12]
 80020aa:	f000 fca9 	bl	8002a00 <OSPI_WaitFlagStateUntilTimeout>
 80020ae:	4603      	mov	r3, r0
 80020b0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80020b2:	7ffb      	ldrb	r3, [r7, #31]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d113      	bne.n	80020e0 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020bc:	781a      	ldrb	r2, [r3, #0]
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d0:	1e5a      	subs	r2, r3, #1
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1df      	bne.n	800209e <HAL_OSPI_Transmit+0x5e>
 80020de:	e000      	b.n	80020e2 <HAL_OSPI_Transmit+0xa2>
          break;
 80020e0:	bf00      	nop

      if (status == HAL_OK)
 80020e2:	7ffb      	ldrb	r3, [r7, #31]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d119      	bne.n	800211c <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	2201      	movs	r2, #1
 80020f0:	2102      	movs	r1, #2
 80020f2:	68f8      	ldr	r0, [r7, #12]
 80020f4:	f000 fc84 	bl	8002a00 <OSPI_WaitFlagStateUntilTimeout>
 80020f8:	4603      	mov	r3, r0
 80020fa:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80020fc:	7ffb      	ldrb	r3, [r7, #31]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d10c      	bne.n	800211c <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2202      	movs	r2, #2
 8002108:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2202      	movs	r2, #2
 800210e:	645a      	str	r2, [r3, #68]	; 0x44
 8002110:	e004      	b.n	800211c <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2210      	movs	r2, #16
 800211a:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 800211c:	7ffb      	ldrb	r3, [r7, #31]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3720      	adds	r7, #32
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002126:	b580      	push	{r7, lr}
 8002128:	b08c      	sub	sp, #48	; 0x30
 800212a:	af02      	add	r7, sp, #8
 800212c:	60f8      	str	r0, [r7, #12]
 800212e:	60b9      	str	r1, [r7, #8]
 8002130:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002132:	f7fe f8cb 	bl	80002cc <HAL_GetTick>
 8002136:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	3350      	adds	r3, #80	; 0x50
 800213e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002146:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002150:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d106      	bne.n	8002166 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2208      	movs	r2, #8
 8002162:	649a      	str	r2, [r3, #72]	; 0x48
 8002164:	e07c      	b.n	8002260 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	2b04      	cmp	r3, #4
 800216c:	d172      	bne.n	8002254 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	1c5a      	adds	r2, r3, #1
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800219a:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021a4:	d104      	bne.n	80021b0 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	649a      	str	r2, [r3, #72]	; 0x48
 80021ae:	e011      	b.n	80021d4 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80021b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	649a      	str	r2, [r3, #72]	; 0x48
 80021c8:	e004      	b.n	80021d4 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	697a      	ldr	r2, [r7, #20]
 80021d0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	6a3b      	ldr	r3, [r7, #32]
 80021da:	2201      	movs	r2, #1
 80021dc:	2106      	movs	r1, #6
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 fc0e 	bl	8002a00 <OSPI_WaitFlagStateUntilTimeout>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80021ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d114      	bne.n	800221c <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f6:	69fa      	ldr	r2, [r7, #28]
 80021f8:	7812      	ldrb	r2, [r2, #0]
 80021fa:	b2d2      	uxtb	r2, r2
 80021fc:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002202:	1c5a      	adds	r2, r3, #1
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d1dc      	bne.n	80021d4 <HAL_OSPI_Receive+0xae>
 800221a:	e000      	b.n	800221e <HAL_OSPI_Receive+0xf8>
          break;
 800221c:	bf00      	nop

      if (status == HAL_OK)
 800221e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002222:	2b00      	cmp	r3, #0
 8002224:	d11c      	bne.n	8002260 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	6a3b      	ldr	r3, [r7, #32]
 800222c:	2201      	movs	r2, #1
 800222e:	2102      	movs	r1, #2
 8002230:	68f8      	ldr	r0, [r7, #12]
 8002232:	f000 fbe5 	bl	8002a00 <OSPI_WaitFlagStateUntilTimeout>
 8002236:	4603      	mov	r3, r0
 8002238:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800223c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10d      	bne.n	8002260 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	2202      	movs	r2, #2
 800224a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	2202      	movs	r2, #2
 8002250:	645a      	str	r2, [r3, #68]	; 0x44
 8002252:	e005      	b.n	8002260 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002254:	2301      	movs	r3, #1
 8002256:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2210      	movs	r2, #16
 800225e:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8002260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002264:	4618      	mov	r0, r3
 8002266:	3728      	adds	r7, #40	; 0x28
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b08a      	sub	sp, #40	; 0x28
 8002270:	af02      	add	r7, sp, #8
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002278:	f7fe f828 	bl	80002cc <HAL_GetTick>
 800227c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002284:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800228e:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002294:	2b04      	cmp	r3, #4
 8002296:	d164      	bne.n	8002362 <HAL_OSPI_AutoPolling+0xf6>
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022a0:	d15f      	bne.n	8002362 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	2200      	movs	r2, #0
 80022aa:	2120      	movs	r1, #32
 80022ac:	68f8      	ldr	r0, [r7, #12]
 80022ae:	f000 fba7 	bl	8002a00 <OSPI_WaitFlagStateUntilTimeout>
 80022b2:	4603      	mov	r3, r0
 80022b4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80022b6:	7ffb      	ldrb	r3, [r7, #31]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d158      	bne.n	800236e <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	6812      	ldr	r2, [r2, #0]
 80022c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	68ba      	ldr	r2, [r7, #8]
 80022ce:	6852      	ldr	r2, [r2, #4]
 80022d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	6912      	ldr	r2, [r2, #16]
 80022dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	6899      	ldr	r1, [r3, #8]
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	430b      	orrs	r3, r1
 80022f4:	431a      	orrs	r2, r3
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80022fe:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002308:	d104      	bne.n	8002314 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	649a      	str	r2, [r3, #72]	; 0x48
 8002312:	e011      	b.n	8002338 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800231c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002320:	2b00      	cmp	r3, #0
 8002322:	d004      	beq.n	800232e <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	697a      	ldr	r2, [r7, #20]
 800232a:	649a      	str	r2, [r3, #72]	; 0x48
 800232c:	e004      	b.n	8002338 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	2201      	movs	r2, #1
 8002340:	2108      	movs	r1, #8
 8002342:	68f8      	ldr	r0, [r7, #12]
 8002344:	f000 fb5c 	bl	8002a00 <OSPI_WaitFlagStateUntilTimeout>
 8002348:	4603      	mov	r3, r0
 800234a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800234c:	7ffb      	ldrb	r3, [r7, #31]
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10d      	bne.n	800236e <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2208      	movs	r2, #8
 8002358:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2202      	movs	r2, #2
 800235e:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002360:	e005      	b.n	800236e <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2210      	movs	r2, #16
 800236a:	649a      	str	r2, [r3, #72]	; 0x48
 800236c:	e000      	b.n	8002370 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800236e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002370:	7ffb      	ldrb	r3, [r7, #31]
}
 8002372:	4618      	mov	r0, r3
 8002374:	3720      	adds	r7, #32
 8002376:	46bd      	mov	sp, r7
 8002378:	bd80      	pop	{r7, pc}

0800237a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800237a:	b480      	push	{r7}
 800237c:	b083      	sub	sp, #12
 800237e:	af00      	add	r7, sp, #0
 8002380:	6078      	str	r0, [r7, #4]
 8002382:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	683a      	ldr	r2, [r7, #0]
 8002388:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b092      	sub	sp, #72	; 0x48
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023a4:	2300      	movs	r3, #0
 80023a6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a08      	ldr	r2, [pc, #32]	; (80023d8 <HAL_OSPIM_Config+0x40>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d105      	bne.n	80023c6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80023ba:	2300      	movs	r3, #0
 80023bc:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80023be:	2301      	movs	r3, #1
 80023c0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80023c4:	e004      	b.n	80023d0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80023c6:	2301      	movs	r3, #1
 80023c8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80023ca:	2300      	movs	r3, #0
 80023cc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80023d0:	2300      	movs	r3, #0
 80023d2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80023d6:	e01f      	b.n	8002418 <HAL_OSPIM_Config+0x80>
 80023d8:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80023dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80023e0:	3301      	adds	r3, #1
 80023e2:	b2d8      	uxtb	r0, r3
 80023e4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80023e8:	f107 0114 	add.w	r1, r7, #20
 80023ec:	4613      	mov	r3, r2
 80023ee:	009b      	lsls	r3, r3, #2
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	4619      	mov	r1, r3
 80023f8:	f000 fc9c 	bl	8002d34 <OSPIM_GetConfig>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	2208      	movs	r2, #8
 800240c:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800240e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002412:	3301      	adds	r3, #1
 8002414:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002418:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800241c:	2b01      	cmp	r3, #1
 800241e:	d9dd      	bls.n	80023dc <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8002420:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002424:	2b00      	cmp	r3, #0
 8002426:	f040 82de 	bne.w	80029e6 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800242a:	4bc6      	ldr	r3, [pc, #792]	; (8002744 <HAL_OSPIM_Config+0x3ac>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00b      	beq.n	800244e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002436:	4bc3      	ldr	r3, [pc, #780]	; (8002744 <HAL_OSPIM_Config+0x3ac>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4ac2      	ldr	r2, [pc, #776]	; (8002744 <HAL_OSPIM_Config+0x3ac>)
 800243c:	f023 0301 	bic.w	r3, r3, #1
 8002440:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002442:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002446:	f043 0301 	orr.w	r3, r3, #1
 800244a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800244e:	4bbe      	ldr	r3, [pc, #760]	; (8002748 <HAL_OSPIM_Config+0x3b0>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0301 	and.w	r3, r3, #1
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00b      	beq.n	8002472 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800245a:	4bbb      	ldr	r3, [pc, #748]	; (8002748 <HAL_OSPIM_Config+0x3b0>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4aba      	ldr	r2, [pc, #744]	; (8002748 <HAL_OSPIM_Config+0x3b0>)
 8002460:	f023 0301 	bic.w	r3, r3, #1
 8002464:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002466:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800246a:	f043 0302 	orr.w	r3, r3, #2
 800246e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002472:	49b6      	ldr	r1, [pc, #728]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 8002474:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002476:	4613      	mov	r3, r2
 8002478:	009b      	lsls	r3, r3, #2
 800247a:	4413      	add	r3, r2
 800247c:	009b      	lsls	r3, r3, #2
 800247e:	3348      	adds	r3, #72	; 0x48
 8002480:	443b      	add	r3, r7
 8002482:	3b2c      	subs	r3, #44	; 0x2c
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	3b01      	subs	r3, #1
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	440b      	add	r3, r1
 800248c:	6859      	ldr	r1, [r3, #4]
 800248e:	48af      	ldr	r0, [pc, #700]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 8002490:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	009b      	lsls	r3, r3, #2
 800249a:	3348      	adds	r3, #72	; 0x48
 800249c:	443b      	add	r3, r7
 800249e:	3b2c      	subs	r3, #44	; 0x2c
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	4403      	add	r3, r0
 80024ac:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80024ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024b0:	4613      	mov	r3, r2
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4413      	add	r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	3348      	adds	r3, #72	; 0x48
 80024ba:	443b      	add	r3, r7
 80024bc:	3b34      	subs	r3, #52	; 0x34
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80a1 	beq.w	8002608 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80024c6:	49a1      	ldr	r1, [pc, #644]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 80024c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024ca:	4613      	mov	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	4413      	add	r3, r2
 80024d0:	009b      	lsls	r3, r3, #2
 80024d2:	3348      	adds	r3, #72	; 0x48
 80024d4:	443b      	add	r3, r7
 80024d6:	3b34      	subs	r3, #52	; 0x34
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	3b01      	subs	r3, #1
 80024dc:	009b      	lsls	r3, r3, #2
 80024de:	440b      	add	r3, r1
 80024e0:	6859      	ldr	r1, [r3, #4]
 80024e2:	489a      	ldr	r0, [pc, #616]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 80024e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80024e6:	4613      	mov	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	4413      	add	r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	3348      	adds	r3, #72	; 0x48
 80024f0:	443b      	add	r3, r7
 80024f2:	3b34      	subs	r3, #52	; 0x34
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	f021 0201 	bic.w	r2, r1, #1
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4403      	add	r3, r0
 8002500:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8002502:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002504:	4613      	mov	r3, r2
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	3348      	adds	r3, #72	; 0x48
 800250e:	443b      	add	r3, r7
 8002510:	3b30      	subs	r3, #48	; 0x30
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d01d      	beq.n	8002554 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8002518:	498c      	ldr	r1, [pc, #560]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 800251a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800251c:	4613      	mov	r3, r2
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	3348      	adds	r3, #72	; 0x48
 8002526:	443b      	add	r3, r7
 8002528:	3b30      	subs	r3, #48	; 0x30
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	3b01      	subs	r3, #1
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	6859      	ldr	r1, [r3, #4]
 8002534:	4885      	ldr	r0, [pc, #532]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 8002536:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002538:	4613      	mov	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	3348      	adds	r3, #72	; 0x48
 8002542:	443b      	add	r3, r7
 8002544:	3b30      	subs	r3, #48	; 0x30
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	3b01      	subs	r3, #1
 800254a:	f021 0210 	bic.w	r2, r1, #16
 800254e:	009b      	lsls	r3, r3, #2
 8002550:	4403      	add	r3, r0
 8002552:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002554:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002556:	4613      	mov	r3, r2
 8002558:	009b      	lsls	r3, r3, #2
 800255a:	4413      	add	r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	3348      	adds	r3, #72	; 0x48
 8002560:	443b      	add	r3, r7
 8002562:	3b28      	subs	r3, #40	; 0x28
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d021      	beq.n	80025ae <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800256a:	4978      	ldr	r1, [pc, #480]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 800256c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	3348      	adds	r3, #72	; 0x48
 8002578:	443b      	add	r3, r7
 800257a:	3b28      	subs	r3, #40	; 0x28
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3b01      	subs	r3, #1
 8002580:	f003 0301 	and.w	r3, r3, #1
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	6859      	ldr	r1, [r3, #4]
 800258a:	4870      	ldr	r0, [pc, #448]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 800258c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800258e:	4613      	mov	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	3348      	adds	r3, #72	; 0x48
 8002598:	443b      	add	r3, r7
 800259a:	3b28      	subs	r3, #40	; 0x28
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3b01      	subs	r3, #1
 80025a0:	f003 0301 	and.w	r3, r3, #1
 80025a4:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4403      	add	r3, r0
 80025ac:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80025ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025b0:	4613      	mov	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	4413      	add	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	3348      	adds	r3, #72	; 0x48
 80025ba:	443b      	add	r3, r7
 80025bc:	3b24      	subs	r3, #36	; 0x24
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d021      	beq.n	8002608 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80025c4:	4961      	ldr	r1, [pc, #388]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 80025c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025c8:	4613      	mov	r3, r2
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	4413      	add	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	3348      	adds	r3, #72	; 0x48
 80025d2:	443b      	add	r3, r7
 80025d4:	3b24      	subs	r3, #36	; 0x24
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	3b01      	subs	r3, #1
 80025da:	f003 0301 	and.w	r3, r3, #1
 80025de:	009b      	lsls	r3, r3, #2
 80025e0:	440b      	add	r3, r1
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	4859      	ldr	r0, [pc, #356]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 80025e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025e8:	4613      	mov	r3, r2
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	009b      	lsls	r3, r3, #2
 80025f0:	3348      	adds	r3, #72	; 0x48
 80025f2:	443b      	add	r3, r7
 80025f4:	3b24      	subs	r3, #36	; 0x24
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	3b01      	subs	r3, #1
 80025fa:	f003 0301 	and.w	r3, r3, #1
 80025fe:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	4403      	add	r3, r0
 8002606:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	6819      	ldr	r1, [r3, #0]
 800260c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	3348      	adds	r3, #72	; 0x48
 800261a:	443b      	add	r3, r7
 800261c:	3b34      	subs	r3, #52	; 0x34
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4299      	cmp	r1, r3
 8002622:	d038      	beq.n	8002696 <HAL_OSPIM_Config+0x2fe>
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800262c:	4613      	mov	r3, r2
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	4413      	add	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	3348      	adds	r3, #72	; 0x48
 8002636:	443b      	add	r3, r7
 8002638:	3b30      	subs	r3, #48	; 0x30
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4299      	cmp	r1, r3
 800263e:	d02a      	beq.n	8002696 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002640:	68bb      	ldr	r3, [r7, #8]
 8002642:	6899      	ldr	r1, [r3, #8]
 8002644:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002648:	4613      	mov	r3, r2
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	4413      	add	r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	3348      	adds	r3, #72	; 0x48
 8002652:	443b      	add	r3, r7
 8002654:	3b2c      	subs	r3, #44	; 0x2c
 8002656:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002658:	4299      	cmp	r1, r3
 800265a:	d01c      	beq.n	8002696 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800265c:	68bb      	ldr	r3, [r7, #8]
 800265e:	68d9      	ldr	r1, [r3, #12]
 8002660:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002664:	4613      	mov	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	4413      	add	r3, r2
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	3348      	adds	r3, #72	; 0x48
 800266e:	443b      	add	r3, r7
 8002670:	3b28      	subs	r3, #40	; 0x28
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4299      	cmp	r1, r3
 8002676:	d00e      	beq.n	8002696 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	6919      	ldr	r1, [r3, #16]
 800267c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002680:	4613      	mov	r3, r2
 8002682:	009b      	lsls	r3, r3, #2
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	3348      	adds	r3, #72	; 0x48
 800268a:	443b      	add	r3, r7
 800268c:	3b24      	subs	r3, #36	; 0x24
 800268e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002690:	4299      	cmp	r1, r3
 8002692:	f040 80d3 	bne.w	800283c <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8002696:	492d      	ldr	r1, [pc, #180]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 8002698:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800269c:	4613      	mov	r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	4413      	add	r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	3348      	adds	r3, #72	; 0x48
 80026a6:	443b      	add	r3, r7
 80026a8:	3b34      	subs	r3, #52	; 0x34
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	3b01      	subs	r3, #1
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	6859      	ldr	r1, [r3, #4]
 80026b4:	4825      	ldr	r0, [pc, #148]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 80026b6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80026ba:	4613      	mov	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	4413      	add	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	3348      	adds	r3, #72	; 0x48
 80026c4:	443b      	add	r3, r7
 80026c6:	3b34      	subs	r3, #52	; 0x34
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3b01      	subs	r3, #1
 80026cc:	f021 0201 	bic.w	r2, r1, #1
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	4403      	add	r3, r0
 80026d4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80026d6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80026da:	4613      	mov	r3, r2
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	3348      	adds	r3, #72	; 0x48
 80026e4:	443b      	add	r3, r7
 80026e6:	3b30      	subs	r3, #48	; 0x30
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d01f      	beq.n	800272e <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80026ee:	4917      	ldr	r1, [pc, #92]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 80026f0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80026f4:	4613      	mov	r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	3348      	adds	r3, #72	; 0x48
 80026fe:	443b      	add	r3, r7
 8002700:	3b30      	subs	r3, #48	; 0x30
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	3b01      	subs	r3, #1
 8002706:	009b      	lsls	r3, r3, #2
 8002708:	440b      	add	r3, r1
 800270a:	6859      	ldr	r1, [r3, #4]
 800270c:	480f      	ldr	r0, [pc, #60]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 800270e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002712:	4613      	mov	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	3348      	adds	r3, #72	; 0x48
 800271c:	443b      	add	r3, r7
 800271e:	3b30      	subs	r3, #48	; 0x30
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	3b01      	subs	r3, #1
 8002724:	f021 0210 	bic.w	r2, r1, #16
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4403      	add	r3, r0
 800272c:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800272e:	4907      	ldr	r1, [pc, #28]	; (800274c <HAL_OSPIM_Config+0x3b4>)
 8002730:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002734:	4613      	mov	r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	4413      	add	r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	3348      	adds	r3, #72	; 0x48
 800273e:	443b      	add	r3, r7
 8002740:	3b2c      	subs	r3, #44	; 0x2c
 8002742:	e005      	b.n	8002750 <HAL_OSPIM_Config+0x3b8>
 8002744:	a0001000 	.word	0xa0001000
 8002748:	a0001400 	.word	0xa0001400
 800274c:	50061c00 	.word	0x50061c00
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	3b01      	subs	r3, #1
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	6859      	ldr	r1, [r3, #4]
 800275a:	48a6      	ldr	r0, [pc, #664]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 800275c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002760:	4613      	mov	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	4413      	add	r3, r2
 8002766:	009b      	lsls	r3, r3, #2
 8002768:	3348      	adds	r3, #72	; 0x48
 800276a:	443b      	add	r3, r7
 800276c:	3b2c      	subs	r3, #44	; 0x2c
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3b01      	subs	r3, #1
 8002772:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	4403      	add	r3, r0
 800277a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800277c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002780:	4613      	mov	r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	4413      	add	r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	3348      	adds	r3, #72	; 0x48
 800278a:	443b      	add	r3, r7
 800278c:	3b28      	subs	r3, #40	; 0x28
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d023      	beq.n	80027dc <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002794:	4997      	ldr	r1, [pc, #604]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 8002796:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800279a:	4613      	mov	r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	3348      	adds	r3, #72	; 0x48
 80027a4:	443b      	add	r3, r7
 80027a6:	3b28      	subs	r3, #40	; 0x28
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	f003 0301 	and.w	r3, r3, #1
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	6859      	ldr	r1, [r3, #4]
 80027b6:	488f      	ldr	r0, [pc, #572]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 80027b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	3348      	adds	r3, #72	; 0x48
 80027c6:	443b      	add	r3, r7
 80027c8:	3b28      	subs	r3, #40	; 0x28
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	3b01      	subs	r3, #1
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80027d6:	009b      	lsls	r3, r3, #2
 80027d8:	4403      	add	r3, r0
 80027da:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80027dc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	3348      	adds	r3, #72	; 0x48
 80027ea:	443b      	add	r3, r7
 80027ec:	3b24      	subs	r3, #36	; 0x24
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d023      	beq.n	800283c <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80027f4:	497f      	ldr	r1, [pc, #508]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 80027f6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80027fa:	4613      	mov	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	3348      	adds	r3, #72	; 0x48
 8002804:	443b      	add	r3, r7
 8002806:	3b24      	subs	r3, #36	; 0x24
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	3b01      	subs	r3, #1
 800280c:	f003 0301 	and.w	r3, r3, #1
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	440b      	add	r3, r1
 8002814:	6859      	ldr	r1, [r3, #4]
 8002816:	4877      	ldr	r0, [pc, #476]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 8002818:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800281c:	4613      	mov	r3, r2
 800281e:	009b      	lsls	r3, r3, #2
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	3348      	adds	r3, #72	; 0x48
 8002826:	443b      	add	r3, r7
 8002828:	3b24      	subs	r3, #36	; 0x24
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	3b01      	subs	r3, #1
 800282e:	f003 0301 	and.w	r3, r3, #1
 8002832:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4403      	add	r3, r0
 800283a:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 800283c:	4a6d      	ldr	r2, [pc, #436]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	3b01      	subs	r3, #1
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	4413      	add	r3, r2
 8002848:	685b      	ldr	r3, [r3, #4]
 800284a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800284e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002850:	025b      	lsls	r3, r3, #9
 8002852:	431a      	orrs	r2, r3
 8002854:	4967      	ldr	r1, [pc, #412]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	689b      	ldr	r3, [r3, #8]
 800285a:	3b01      	subs	r3, #1
 800285c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	440b      	add	r3, r1
 8002864:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002866:	4a63      	ldr	r2, [pc, #396]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	3b01      	subs	r3, #1
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f023 0203 	bic.w	r2, r3, #3
 8002878:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	431a      	orrs	r2, r3
 800287e:	495d      	ldr	r1, [pc, #372]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	3b01      	subs	r3, #1
 8002886:	f042 0201 	orr.w	r2, r2, #1
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d014      	beq.n	80028c2 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8002898:	4a56      	ldr	r2, [pc, #344]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 800289a:	68bb      	ldr	r3, [r7, #8]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	3b01      	subs	r3, #1
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	4413      	add	r3, r2
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80028aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028ac:	015b      	lsls	r3, r3, #5
 80028ae:	431a      	orrs	r2, r3
 80028b0:	4950      	ldr	r1, [pc, #320]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	3b01      	subs	r3, #1
 80028b8:	f042 0210 	orr.w	r2, r2, #16
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	440b      	add	r3, r1
 80028c0:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d019      	beq.n	8002902 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80028ce:	4a49      	ldr	r2, [pc, #292]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	3b01      	subs	r3, #1
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80028e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80028e6:	049b      	lsls	r3, r3, #18
 80028e8:	431a      	orrs	r2, r3
 80028ea:	4942      	ldr	r1, [pc, #264]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	3b01      	subs	r3, #1
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80028fa:	009b      	lsls	r3, r3, #2
 80028fc:	440b      	add	r3, r1
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	e01c      	b.n	800293c <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d018      	beq.n	800293c <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800290a:	4a3a      	ldr	r2, [pc, #232]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	3b01      	subs	r3, #1
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002920:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002922:	069b      	lsls	r3, r3, #26
 8002924:	431a      	orrs	r2, r3
 8002926:	4933      	ldr	r1, [pc, #204]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	3b01      	subs	r3, #1
 800292e:	f003 0301 	and.w	r3, r3, #1
 8002932:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	440b      	add	r3, r1
 800293a:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	691b      	ldr	r3, [r3, #16]
 8002940:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d019      	beq.n	800297c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002948:	4a2a      	ldr	r2, [pc, #168]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	3b01      	subs	r3, #1
 8002950:	f003 0301 	and.w	r3, r3, #1
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800295e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002960:	049b      	lsls	r3, r3, #18
 8002962:	431a      	orrs	r2, r3
 8002964:	4923      	ldr	r1, [pc, #140]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	3b01      	subs	r3, #1
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	605a      	str	r2, [r3, #4]
 800297a:	e01c      	b.n	80029b6 <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d018      	beq.n	80029b6 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002984:	4a1b      	ldr	r2, [pc, #108]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	3b01      	subs	r3, #1
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	4413      	add	r3, r2
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800299a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800299c:	069b      	lsls	r3, r3, #26
 800299e:	431a      	orrs	r2, r3
 80029a0:	4914      	ldr	r1, [pc, #80]	; (80029f4 <HAL_OSPIM_Config+0x65c>)
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	3b01      	subs	r3, #1
 80029a8:	f003 0301 	and.w	r3, r3, #1
 80029ac:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 80029b6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80029c2:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <HAL_OSPIM_Config+0x660>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a0c      	ldr	r2, [pc, #48]	; (80029f8 <HAL_OSPIM_Config+0x660>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 80029ce:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d005      	beq.n	80029e6 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80029da:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_OSPIM_Config+0x664>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a07      	ldr	r2, [pc, #28]	; (80029fc <HAL_OSPIM_Config+0x664>)
 80029e0:	f043 0301 	orr.w	r3, r3, #1
 80029e4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 80029e6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3748      	adds	r7, #72	; 0x48
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	50061c00 	.word	0x50061c00
 80029f8:	a0001000 	.word	0xa0001000
 80029fc:	a0001400 	.word	0xa0001400

08002a00 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	603b      	str	r3, [r7, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002a10:	e01a      	b.n	8002a48 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a12:	69bb      	ldr	r3, [r7, #24]
 8002a14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a18:	d016      	beq.n	8002a48 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1a:	f7fd fc57 	bl	80002cc <HAL_GetTick>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	1ad3      	subs	r3, r2, r3
 8002a24:	69ba      	ldr	r2, [r7, #24]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d302      	bcc.n	8002a30 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d10b      	bne.n	8002a48 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a36:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a3c:	f043 0201 	orr.w	r2, r3, #1
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e00e      	b.n	8002a66 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	6a1a      	ldr	r2, [r3, #32]
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	4013      	ands	r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	bf14      	ite	ne
 8002a56:	2301      	movne	r3, #1
 8002a58:	2300      	moveq	r3, #0
 8002a5a:	b2db      	uxtb	r3, r3
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	79fb      	ldrb	r3, [r7, #7]
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1d6      	bne.n	8002a12 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3710      	adds	r7, #16
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
	...

08002a70 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b089      	sub	sp, #36	; 0x24
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a8c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10a      	bne.n	8002aac <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	430a      	orrs	r2, r1
 8002aaa:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8002aac:	683b      	ldr	r3, [r7, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d114      	bne.n	8002ade <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002abc:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002ac6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002ad0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002ada:	60fb      	str	r3, [r7, #12]
 8002adc:	e013      	b.n	8002b06 <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002ae6:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002af0:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002afa:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002b04:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	431a      	orrs	r2, r3
 8002b10:	69bb      	ldr	r3, [r7, #24]
 8002b12:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d012      	beq.n	8002b42 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8002b24:	69bb      	ldr	r3, [r7, #24]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b34:	4319      	orrs	r1, r3
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8002b42:	697b      	ldr	r3, [r7, #20]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f023 021f 	bic.w	r2, r3, #31
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	431a      	orrs	r2, r3
 8002b50:	697b      	ldr	r3, [r7, #20]
 8002b52:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d009      	beq.n	8002b70 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d105      	bne.n	8002b70 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	3a01      	subs	r2, #1
 8002b6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8099 	beq.w	8002cac <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	69db      	ldr	r3, [r3, #28]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d055      	beq.n	8002c2e <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d01e      	beq.n	8002bc8 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002b8a:	69bb      	ldr	r3, [r7, #24]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	4b68      	ldr	r3, [pc, #416]	; (8002d30 <OSPI_ConfigCmd+0x2c0>)
 8002b90:	4013      	ands	r3, r2
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	68d1      	ldr	r1, [r2, #12]
 8002b96:	683a      	ldr	r2, [r7, #0]
 8002b98:	6952      	ldr	r2, [r2, #20]
 8002b9a:	4311      	orrs	r1, r2
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	6912      	ldr	r2, [r2, #16]
 8002ba0:	4311      	orrs	r1, r2
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	69d2      	ldr	r2, [r2, #28]
 8002ba6:	4311      	orrs	r1, r2
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bac:	4311      	orrs	r1, r2
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	6a12      	ldr	r2, [r2, #32]
 8002bb2:	4311      	orrs	r1, r2
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002bb8:	4311      	orrs	r1, r2
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002bbe:	430a      	orrs	r2, r1
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	601a      	str	r2, [r3, #0]
 8002bc6:	e028      	b.n	8002c1a <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002bd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002bd4:	683a      	ldr	r2, [r7, #0]
 8002bd6:	68d1      	ldr	r1, [r2, #12]
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	6952      	ldr	r2, [r2, #20]
 8002bdc:	4311      	orrs	r1, r2
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	6912      	ldr	r2, [r2, #16]
 8002be2:	4311      	orrs	r1, r2
 8002be4:	683a      	ldr	r2, [r7, #0]
 8002be6:	69d2      	ldr	r2, [r2, #28]
 8002be8:	4311      	orrs	r1, r2
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002bee:	4311      	orrs	r1, r2
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	6a12      	ldr	r2, [r2, #32]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c04:	d109      	bne.n	8002c1a <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002c0a:	2b08      	cmp	r3, #8
 8002c0c:	d105      	bne.n	8002c1a <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c16:	69bb      	ldr	r3, [r7, #24]
 8002c18:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	683a      	ldr	r2, [r7, #0]
 8002c28:	6992      	ldr	r2, [r2, #24]
 8002c2a:	649a      	str	r2, [r3, #72]	; 0x48
 8002c2c:	e078      	b.n	8002d20 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d017      	beq.n	8002c66 <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002c3e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c42:	683a      	ldr	r2, [r7, #0]
 8002c44:	68d1      	ldr	r1, [r2, #12]
 8002c46:	683a      	ldr	r2, [r7, #0]
 8002c48:	6952      	ldr	r2, [r2, #20]
 8002c4a:	4311      	orrs	r1, r2
 8002c4c:	683a      	ldr	r2, [r7, #0]
 8002c4e:	6912      	ldr	r2, [r2, #16]
 8002c50:	4311      	orrs	r1, r2
 8002c52:	683a      	ldr	r2, [r7, #0]
 8002c54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c56:	4311      	orrs	r1, r2
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	601a      	str	r2, [r3, #0]
 8002c64:	e01d      	b.n	8002ca2 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	68d9      	ldr	r1, [r3, #12]
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	695b      	ldr	r3, [r3, #20]
 8002c76:	4319      	orrs	r1, r3
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	431a      	orrs	r2, r3
 8002c80:	69bb      	ldr	r3, [r7, #24]
 8002c82:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c8c:	d109      	bne.n	8002ca2 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002c92:	2b08      	cmp	r3, #8
 8002c94:	d105      	bne.n	8002ca2 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c9e:	69bb      	ldr	r3, [r7, #24]
 8002ca0:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	601a      	str	r2, [r3, #0]
 8002caa:	e039      	b.n	8002d20 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	69db      	ldr	r3, [r3, #28]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d030      	beq.n	8002d16 <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d017      	beq.n	8002cec <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002cc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002cc8:	683a      	ldr	r2, [r7, #0]
 8002cca:	69d1      	ldr	r1, [r2, #28]
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002cd0:	4311      	orrs	r1, r2
 8002cd2:	683a      	ldr	r2, [r7, #0]
 8002cd4:	6a12      	ldr	r2, [r2, #32]
 8002cd6:	4311      	orrs	r1, r2
 8002cd8:	683a      	ldr	r2, [r7, #0]
 8002cda:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cdc:	4311      	orrs	r1, r2
 8002cde:	683a      	ldr	r2, [r7, #0]
 8002ce0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	e00e      	b.n	8002d0a <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	69d9      	ldr	r1, [r3, #28]
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfc:	4319      	orrs	r1, r3
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	6a1b      	ldr	r3, [r3, #32]
 8002d02:	430b      	orrs	r3, r1
 8002d04:	431a      	orrs	r2, r3
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	6992      	ldr	r2, [r2, #24]
 8002d12:	649a      	str	r2, [r3, #72]	; 0x48
 8002d14:	e004      	b.n	8002d20 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2208      	movs	r2, #8
 8002d1e:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8002d20:	7ffb      	ldrb	r3, [r7, #31]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3724      	adds	r7, #36	; 0x24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr
 8002d2e:	bf00      	nop
 8002d30:	f0ffc0c0 	.word	0xf0ffc0c0

08002d34 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b087      	sub	sp, #28
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4603      	mov	r3, r0
 8002d3c:	6039      	str	r1, [r7, #0]
 8002d3e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8002d44:	2300      	movs	r3, #0
 8002d46:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d005      	beq.n	8002d5a <OSPIM_GetConfig+0x26>
 8002d4e:	79fb      	ldrb	r3, [r7, #7]
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d802      	bhi.n	8002d5a <OSPIM_GetConfig+0x26>
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d102      	bne.n	8002d60 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	75fb      	strb	r3, [r7, #23]
 8002d5e:	e08e      	b.n	8002e7e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	2200      	movs	r2, #0
 8002d64:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2200      	movs	r2, #0
 8002d76:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8002d78:	683b      	ldr	r3, [r7, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8002d7e:	79fb      	ldrb	r3, [r7, #7]
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d101      	bne.n	8002d88 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8002d84:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <OSPIM_GetConfig+0x158>)
 8002d86:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002d88:	2300      	movs	r3, #0
 8002d8a:	60fb      	str	r3, [r7, #12]
 8002d8c:	e074      	b.n	8002e78 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8002d8e:	4a40      	ldr	r2, [pc, #256]	; (8002e90 <OSPIM_GetConfig+0x15c>)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	4413      	add	r3, r2
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002d9a:	68bb      	ldr	r3, [r7, #8]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d00a      	beq.n	8002dba <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	693b      	ldr	r3, [r7, #16]
 8002da8:	4053      	eors	r3, r2
 8002daa:	f003 0302 	and.w	r3, r3, #2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d103      	bne.n	8002dba <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	f003 0310 	and.w	r3, r3, #16
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002dc4:	68ba      	ldr	r2, [r7, #8]
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	4053      	eors	r3, r2
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1c5a      	adds	r2, r3, #1
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002de4:	68ba      	ldr	r2, [r7, #8]
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4053      	eors	r3, r2
 8002dea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d103      	bne.n	8002dfa <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	1c5a      	adds	r2, r3, #1
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d018      	beq.n	8002e36 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002e04:	68ba      	ldr	r2, [r7, #8]
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	4053      	eors	r3, r2
 8002e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d111      	bne.n	8002e36 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d106      	bne.n	8002e2a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	60da      	str	r2, [r3, #12]
 8002e28:	e005      	b.n	8002e36 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d018      	beq.n	8002e72 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4053      	eors	r3, r2
 8002e46:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d111      	bne.n	8002e72 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d106      	bne.n	8002e66 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	611a      	str	r2, [r3, #16]
 8002e64:	e005      	b.n	8002e72 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	3301      	adds	r3, #1
 8002e6a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	3301      	adds	r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d987      	bls.n	8002d8e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8002e7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	371c      	adds	r7, #28
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	04040222 	.word	0x04040222
 8002e90:	50061c00 	.word	0x50061c00

08002e94 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002e98:	4b0d      	ldr	r3, [pc, #52]	; (8002ed0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002ea0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ea4:	d102      	bne.n	8002eac <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002ea6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eaa:	e00b      	b.n	8002ec4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002eac:	4b08      	ldr	r3, [pc, #32]	; (8002ed0 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002eae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002eb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eb6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002eba:	d102      	bne.n	8002ec2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002ebc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ec0:	e000      	b.n	8002ec4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002ec2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	40007000 	.word	0x40007000

08002ed4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002ed4:	b480      	push	{r7}
 8002ed6:	b085      	sub	sp, #20
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d141      	bne.n	8002f66 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002ee2:	4b4b      	ldr	r3, [pc, #300]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002eea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002eee:	d131      	bne.n	8002f54 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ef0:	4b47      	ldr	r3, [pc, #284]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef6:	4a46      	ldr	r2, [pc, #280]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ef8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002efc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f00:	4b43      	ldr	r3, [pc, #268]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f08:	4a41      	ldr	r2, [pc, #260]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f10:	4b40      	ldr	r3, [pc, #256]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2232      	movs	r2, #50	; 0x32
 8002f16:	fb02 f303 	mul.w	r3, r2, r3
 8002f1a:	4a3f      	ldr	r2, [pc, #252]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f20:	0c9b      	lsrs	r3, r3, #18
 8002f22:	3301      	adds	r3, #1
 8002f24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f26:	e002      	b.n	8002f2e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002f2e:	4b38      	ldr	r3, [pc, #224]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f30:	695b      	ldr	r3, [r3, #20]
 8002f32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f3a:	d102      	bne.n	8002f42 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f2      	bne.n	8002f28 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002f42:	4b33      	ldr	r3, [pc, #204]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f44:	695b      	ldr	r3, [r3, #20]
 8002f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f4e:	d158      	bne.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e057      	b.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f54:	4b2e      	ldr	r3, [pc, #184]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f5a:	4a2d      	ldr	r2, [pc, #180]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002f64:	e04d      	b.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f6c:	d141      	bne.n	8002ff2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f6e:	4b28      	ldr	r3, [pc, #160]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f7a:	d131      	bne.n	8002fe0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002f7c:	4b24      	ldr	r3, [pc, #144]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f82:	4a23      	ldr	r2, [pc, #140]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f8c:	4b20      	ldr	r3, [pc, #128]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002f94:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002f96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002f9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002f9c:	4b1d      	ldr	r3, [pc, #116]	; (8003014 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2232      	movs	r2, #50	; 0x32
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	4a1c      	ldr	r2, [pc, #112]	; (8003018 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002fa8:	fba2 2303 	umull	r2, r3, r2, r3
 8002fac:	0c9b      	lsrs	r3, r3, #18
 8002fae:	3301      	adds	r3, #1
 8002fb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fb2:	e002      	b.n	8002fba <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002fba:	4b15      	ldr	r3, [pc, #84]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc6:	d102      	bne.n	8002fce <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f2      	bne.n	8002fb4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002fce:	4b10      	ldr	r3, [pc, #64]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fda:	d112      	bne.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002fdc:	2303      	movs	r3, #3
 8002fde:	e011      	b.n	8003004 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fe6:	4a0a      	ldr	r2, [pc, #40]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002ff0:	e007      	b.n	8003002 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002ff2:	4b07      	ldr	r3, [pc, #28]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002ffa:	4a05      	ldr	r2, [pc, #20]	; (8003010 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003000:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40007000 	.word	0x40007000
 8003014:	20000008 	.word	0x20000008
 8003018:	431bde83 	.word	0x431bde83

0800301c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d102      	bne.n	8003030 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800302a:	2301      	movs	r3, #1
 800302c:	f000 bc08 	b.w	8003840 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003030:	4b96      	ldr	r3, [pc, #600]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 030c 	and.w	r3, r3, #12
 8003038:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800303a:	4b94      	ldr	r3, [pc, #592]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800303c:	68db      	ldr	r3, [r3, #12]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 80e4 	beq.w	800321a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d007      	beq.n	8003068 <HAL_RCC_OscConfig+0x4c>
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	2b0c      	cmp	r3, #12
 800305c:	f040 808b 	bne.w	8003176 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	2b01      	cmp	r3, #1
 8003064:	f040 8087 	bne.w	8003176 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003068:	4b88      	ldr	r3, [pc, #544]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d005      	beq.n	8003080 <HAL_RCC_OscConfig+0x64>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	e3df      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1a      	ldr	r2, [r3, #32]
 8003084:	4b81      	ldr	r3, [pc, #516]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d004      	beq.n	800309a <HAL_RCC_OscConfig+0x7e>
 8003090:	4b7e      	ldr	r3, [pc, #504]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003098:	e005      	b.n	80030a6 <HAL_RCC_OscConfig+0x8a>
 800309a:	4b7c      	ldr	r3, [pc, #496]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800309c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80030a0:	091b      	lsrs	r3, r3, #4
 80030a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d223      	bcs.n	80030f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a1b      	ldr	r3, [r3, #32]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fda0 	bl	8003bf4 <RCC_SetFlashLatencyFromMSIRange>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d001      	beq.n	80030be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e3c0      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030be:	4b73      	ldr	r3, [pc, #460]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a72      	ldr	r2, [pc, #456]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030c4:	f043 0308 	orr.w	r3, r3, #8
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b70      	ldr	r3, [pc, #448]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	496d      	ldr	r1, [pc, #436]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80030dc:	4b6b      	ldr	r3, [pc, #428]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030de:	685b      	ldr	r3, [r3, #4]
 80030e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	69db      	ldr	r3, [r3, #28]
 80030e8:	021b      	lsls	r3, r3, #8
 80030ea:	4968      	ldr	r1, [pc, #416]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030ec:	4313      	orrs	r3, r2
 80030ee:	604b      	str	r3, [r1, #4]
 80030f0:	e025      	b.n	800313e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80030f2:	4b66      	ldr	r3, [pc, #408]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a65      	ldr	r2, [pc, #404]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80030f8:	f043 0308 	orr.w	r3, r3, #8
 80030fc:	6013      	str	r3, [r2, #0]
 80030fe:	4b63      	ldr	r3, [pc, #396]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	4960      	ldr	r1, [pc, #384]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800310c:	4313      	orrs	r3, r2
 800310e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003110:	4b5e      	ldr	r3, [pc, #376]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
 800311c:	021b      	lsls	r3, r3, #8
 800311e:	495b      	ldr	r1, [pc, #364]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003120:	4313      	orrs	r3, r2
 8003122:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d109      	bne.n	800313e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	4618      	mov	r0, r3
 8003130:	f000 fd60 	bl	8003bf4 <RCC_SetFlashLatencyFromMSIRange>
 8003134:	4603      	mov	r3, r0
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e380      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800313e:	f000 fcc1 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8003142:	4602      	mov	r2, r0
 8003144:	4b51      	ldr	r3, [pc, #324]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	091b      	lsrs	r3, r3, #4
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	4950      	ldr	r1, [pc, #320]	; (8003290 <HAL_RCC_OscConfig+0x274>)
 8003150:	5ccb      	ldrb	r3, [r1, r3]
 8003152:	f003 031f 	and.w	r3, r3, #31
 8003156:	fa22 f303 	lsr.w	r3, r2, r3
 800315a:	4a4e      	ldr	r2, [pc, #312]	; (8003294 <HAL_RCC_OscConfig+0x278>)
 800315c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800315e:	4b4e      	ldr	r3, [pc, #312]	; (8003298 <HAL_RCC_OscConfig+0x27c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4618      	mov	r0, r3
 8003164:	f7fd f862 	bl	800022c <HAL_InitTick>
 8003168:	4603      	mov	r3, r0
 800316a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d052      	beq.n	8003218 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003172:	7bfb      	ldrb	r3, [r7, #15]
 8003174:	e364      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	699b      	ldr	r3, [r3, #24]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d032      	beq.n	80031e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800317e:	4b43      	ldr	r3, [pc, #268]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a42      	ldr	r2, [pc, #264]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003184:	f043 0301 	orr.w	r3, r3, #1
 8003188:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800318a:	f7fd f89f 	bl	80002cc <HAL_GetTick>
 800318e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003190:	e008      	b.n	80031a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003192:	f7fd f89b 	bl	80002cc <HAL_GetTick>
 8003196:	4602      	mov	r2, r0
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	1ad3      	subs	r3, r2, r3
 800319c:	2b02      	cmp	r3, #2
 800319e:	d901      	bls.n	80031a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80031a0:	2303      	movs	r3, #3
 80031a2:	e34d      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80031a4:	4b39      	ldr	r3, [pc, #228]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d0f0      	beq.n	8003192 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b0:	4b36      	ldr	r3, [pc, #216]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a35      	ldr	r2, [pc, #212]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031b6:	f043 0308 	orr.w	r3, r3, #8
 80031ba:	6013      	str	r3, [r2, #0]
 80031bc:	4b33      	ldr	r3, [pc, #204]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	4930      	ldr	r1, [pc, #192]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031ca:	4313      	orrs	r3, r2
 80031cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031ce:	4b2f      	ldr	r3, [pc, #188]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	492b      	ldr	r1, [pc, #172]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	604b      	str	r3, [r1, #4]
 80031e2:	e01a      	b.n	800321a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80031e4:	4b29      	ldr	r3, [pc, #164]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a28      	ldr	r2, [pc, #160]	; (800328c <HAL_RCC_OscConfig+0x270>)
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80031f0:	f7fd f86c 	bl	80002cc <HAL_GetTick>
 80031f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80031f6:	e008      	b.n	800320a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80031f8:	f7fd f868 	bl	80002cc <HAL_GetTick>
 80031fc:	4602      	mov	r2, r0
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	1ad3      	subs	r3, r2, r3
 8003202:	2b02      	cmp	r3, #2
 8003204:	d901      	bls.n	800320a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e31a      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800320a:	4b20      	ldr	r3, [pc, #128]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0302 	and.w	r3, r3, #2
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1f0      	bne.n	80031f8 <HAL_RCC_OscConfig+0x1dc>
 8003216:	e000      	b.n	800321a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003218:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b00      	cmp	r3, #0
 8003224:	d073      	beq.n	800330e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	2b08      	cmp	r3, #8
 800322a:	d005      	beq.n	8003238 <HAL_RCC_OscConfig+0x21c>
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	2b0c      	cmp	r3, #12
 8003230:	d10e      	bne.n	8003250 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003232:	697b      	ldr	r3, [r7, #20]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d10b      	bne.n	8003250 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	4b14      	ldr	r3, [pc, #80]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d063      	beq.n	800330c <HAL_RCC_OscConfig+0x2f0>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d15f      	bne.n	800330c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e2f7      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003258:	d106      	bne.n	8003268 <HAL_RCC_OscConfig+0x24c>
 800325a:	4b0c      	ldr	r3, [pc, #48]	; (800328c <HAL_RCC_OscConfig+0x270>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a0b      	ldr	r2, [pc, #44]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e025      	b.n	80032b4 <HAL_RCC_OscConfig+0x298>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003270:	d114      	bne.n	800329c <HAL_RCC_OscConfig+0x280>
 8003272:	4b06      	ldr	r3, [pc, #24]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a05      	ldr	r2, [pc, #20]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800327c:	6013      	str	r3, [r2, #0]
 800327e:	4b03      	ldr	r3, [pc, #12]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a02      	ldr	r2, [pc, #8]	; (800328c <HAL_RCC_OscConfig+0x270>)
 8003284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003288:	6013      	str	r3, [r2, #0]
 800328a:	e013      	b.n	80032b4 <HAL_RCC_OscConfig+0x298>
 800328c:	40021000 	.word	0x40021000
 8003290:	08006284 	.word	0x08006284
 8003294:	20000008 	.word	0x20000008
 8003298:	20000000 	.word	0x20000000
 800329c:	4ba0      	ldr	r3, [pc, #640]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a9f      	ldr	r2, [pc, #636]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032a6:	6013      	str	r3, [r2, #0]
 80032a8:	4b9d      	ldr	r3, [pc, #628]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a9c      	ldr	r2, [pc, #624]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d013      	beq.n	80032e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032bc:	f7fd f806 	bl	80002cc <HAL_GetTick>
 80032c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032c2:	e008      	b.n	80032d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032c4:	f7fd f802 	bl	80002cc <HAL_GetTick>
 80032c8:	4602      	mov	r2, r0
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	1ad3      	subs	r3, r2, r3
 80032ce:	2b64      	cmp	r3, #100	; 0x64
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e2b4      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80032d6:	4b92      	ldr	r3, [pc, #584]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d0f0      	beq.n	80032c4 <HAL_RCC_OscConfig+0x2a8>
 80032e2:	e014      	b.n	800330e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e4:	f7fc fff2 	bl	80002cc <HAL_GetTick>
 80032e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032ea:	e008      	b.n	80032fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032ec:	f7fc ffee 	bl	80002cc <HAL_GetTick>
 80032f0:	4602      	mov	r2, r0
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	1ad3      	subs	r3, r2, r3
 80032f6:	2b64      	cmp	r3, #100	; 0x64
 80032f8:	d901      	bls.n	80032fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80032fa:	2303      	movs	r3, #3
 80032fc:	e2a0      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80032fe:	4b88      	ldr	r3, [pc, #544]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d1f0      	bne.n	80032ec <HAL_RCC_OscConfig+0x2d0>
 800330a:	e000      	b.n	800330e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d060      	beq.n	80033dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	2b04      	cmp	r3, #4
 800331e:	d005      	beq.n	800332c <HAL_RCC_OscConfig+0x310>
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	2b0c      	cmp	r3, #12
 8003324:	d119      	bne.n	800335a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b02      	cmp	r3, #2
 800332a:	d116      	bne.n	800335a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800332c:	4b7c      	ldr	r3, [pc, #496]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_OscConfig+0x328>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d101      	bne.n	8003344 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e27d      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003344:	4b76      	ldr	r3, [pc, #472]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	691b      	ldr	r3, [r3, #16]
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	4973      	ldr	r1, [pc, #460]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003354:	4313      	orrs	r3, r2
 8003356:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003358:	e040      	b.n	80033dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d023      	beq.n	80033aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003362:	4b6f      	ldr	r3, [pc, #444]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a6e      	ldr	r2, [pc, #440]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800336c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336e:	f7fc ffad 	bl	80002cc <HAL_GetTick>
 8003372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003374:	e008      	b.n	8003388 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003376:	f7fc ffa9 	bl	80002cc <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d901      	bls.n	8003388 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003384:	2303      	movs	r3, #3
 8003386:	e25b      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003388:	4b65      	ldr	r3, [pc, #404]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003390:	2b00      	cmp	r3, #0
 8003392:	d0f0      	beq.n	8003376 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003394:	4b62      	ldr	r3, [pc, #392]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	061b      	lsls	r3, r3, #24
 80033a2:	495f      	ldr	r1, [pc, #380]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033a4:	4313      	orrs	r3, r2
 80033a6:	604b      	str	r3, [r1, #4]
 80033a8:	e018      	b.n	80033dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033aa:	4b5d      	ldr	r3, [pc, #372]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a5c      	ldr	r2, [pc, #368]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b6:	f7fc ff89 	bl	80002cc <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033bc:	e008      	b.n	80033d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033be:	f7fc ff85 	bl	80002cc <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	2b02      	cmp	r3, #2
 80033ca:	d901      	bls.n	80033d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80033cc:	2303      	movs	r3, #3
 80033ce:	e237      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033d0:	4b53      	ldr	r3, [pc, #332]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d1f0      	bne.n	80033be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d03c      	beq.n	8003462 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d01c      	beq.n	800342a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033f0:	4b4b      	ldr	r3, [pc, #300]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80033f6:	4a4a      	ldr	r2, [pc, #296]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80033f8:	f043 0301 	orr.w	r3, r3, #1
 80033fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003400:	f7fc ff64 	bl	80002cc <HAL_GetTick>
 8003404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003406:	e008      	b.n	800341a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003408:	f7fc ff60 	bl	80002cc <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	2b02      	cmp	r3, #2
 8003414:	d901      	bls.n	800341a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003416:	2303      	movs	r3, #3
 8003418:	e212      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800341a:	4b41      	ldr	r3, [pc, #260]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800341c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d0ef      	beq.n	8003408 <HAL_RCC_OscConfig+0x3ec>
 8003428:	e01b      	b.n	8003462 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800342a:	4b3d      	ldr	r3, [pc, #244]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800342c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003430:	4a3b      	ldr	r2, [pc, #236]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003432:	f023 0301 	bic.w	r3, r3, #1
 8003436:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800343a:	f7fc ff47 	bl	80002cc <HAL_GetTick>
 800343e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003440:	e008      	b.n	8003454 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003442:	f7fc ff43 	bl	80002cc <HAL_GetTick>
 8003446:	4602      	mov	r2, r0
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	1ad3      	subs	r3, r2, r3
 800344c:	2b02      	cmp	r3, #2
 800344e:	d901      	bls.n	8003454 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003450:	2303      	movs	r3, #3
 8003452:	e1f5      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003454:	4b32      	ldr	r3, [pc, #200]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d1ef      	bne.n	8003442 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f003 0304 	and.w	r3, r3, #4
 800346a:	2b00      	cmp	r3, #0
 800346c:	f000 80a6 	beq.w	80035bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003470:	2300      	movs	r3, #0
 8003472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003474:	4b2a      	ldr	r3, [pc, #168]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10d      	bne.n	800349c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003480:	4b27      	ldr	r3, [pc, #156]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003484:	4a26      	ldr	r2, [pc, #152]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800348a:	6593      	str	r3, [r2, #88]	; 0x58
 800348c:	4b24      	ldr	r3, [pc, #144]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003494:	60bb      	str	r3, [r7, #8]
 8003496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003498:	2301      	movs	r3, #1
 800349a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800349c:	4b21      	ldr	r3, [pc, #132]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d118      	bne.n	80034da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034a8:	4b1e      	ldr	r3, [pc, #120]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a1d      	ldr	r2, [pc, #116]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 80034ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034b4:	f7fc ff0a 	bl	80002cc <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034bc:	f7fc ff06 	bl	80002cc <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b02      	cmp	r3, #2
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e1b8      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80034ce:	4b15      	ldr	r3, [pc, #84]	; (8003524 <HAL_RCC_OscConfig+0x508>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d0f0      	beq.n	80034bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d108      	bne.n	80034f4 <HAL_RCC_OscConfig+0x4d8>
 80034e2:	4b0f      	ldr	r3, [pc, #60]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80034e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034e8:	4a0d      	ldr	r2, [pc, #52]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80034ea:	f043 0301 	orr.w	r3, r3, #1
 80034ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80034f2:	e029      	b.n	8003548 <HAL_RCC_OscConfig+0x52c>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d115      	bne.n	8003528 <HAL_RCC_OscConfig+0x50c>
 80034fc:	4b08      	ldr	r3, [pc, #32]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 80034fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003502:	4a07      	ldr	r2, [pc, #28]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003504:	f043 0304 	orr.w	r3, r3, #4
 8003508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800350c:	4b04      	ldr	r3, [pc, #16]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	4a03      	ldr	r2, [pc, #12]	; (8003520 <HAL_RCC_OscConfig+0x504>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800351c:	e014      	b.n	8003548 <HAL_RCC_OscConfig+0x52c>
 800351e:	bf00      	nop
 8003520:	40021000 	.word	0x40021000
 8003524:	40007000 	.word	0x40007000
 8003528:	4b9d      	ldr	r3, [pc, #628]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800352a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800352e:	4a9c      	ldr	r2, [pc, #624]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003538:	4b99      	ldr	r3, [pc, #612]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	4a98      	ldr	r2, [pc, #608]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003540:	f023 0304 	bic.w	r3, r3, #4
 8003544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d016      	beq.n	800357e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003550:	f7fc febc 	bl	80002cc <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003556:	e00a      	b.n	800356e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003558:	f7fc feb8 	bl	80002cc <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	f241 3288 	movw	r2, #5000	; 0x1388
 8003566:	4293      	cmp	r3, r2
 8003568:	d901      	bls.n	800356e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800356a:	2303      	movs	r3, #3
 800356c:	e168      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800356e:	4b8c      	ldr	r3, [pc, #560]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003574:	f003 0302 	and.w	r3, r3, #2
 8003578:	2b00      	cmp	r3, #0
 800357a:	d0ed      	beq.n	8003558 <HAL_RCC_OscConfig+0x53c>
 800357c:	e015      	b.n	80035aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800357e:	f7fc fea5 	bl	80002cc <HAL_GetTick>
 8003582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003584:	e00a      	b.n	800359c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fc fea1 	bl	80002cc <HAL_GetTick>
 800358a:	4602      	mov	r2, r0
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	f241 3288 	movw	r2, #5000	; 0x1388
 8003594:	4293      	cmp	r3, r2
 8003596:	d901      	bls.n	800359c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e151      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800359c:	4b80      	ldr	r3, [pc, #512]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800359e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d1ed      	bne.n	8003586 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035aa:	7ffb      	ldrb	r3, [r7, #31]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d105      	bne.n	80035bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035b0:	4b7b      	ldr	r3, [pc, #492]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80035b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035b4:	4a7a      	ldr	r2, [pc, #488]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80035b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0320 	and.w	r3, r3, #32
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d03c      	beq.n	8003642 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01c      	beq.n	800360a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80035d0:	4b73      	ldr	r3, [pc, #460]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80035d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035d6:	4a72      	ldr	r2, [pc, #456]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fc fe74 	bl	80002cc <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80035e8:	f7fc fe70 	bl	80002cc <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e122      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80035fa:	4b69      	ldr	r3, [pc, #420]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80035fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ef      	beq.n	80035e8 <HAL_RCC_OscConfig+0x5cc>
 8003608:	e01b      	b.n	8003642 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800360a:	4b65      	ldr	r3, [pc, #404]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800360c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003610:	4a63      	ldr	r2, [pc, #396]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fc fe57 	bl	80002cc <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003622:	f7fc fe53 	bl	80002cc <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e105      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003634:	4b5a      	ldr	r3, [pc, #360]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ef      	bne.n	8003622 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003646:	2b00      	cmp	r3, #0
 8003648:	f000 80f9 	beq.w	800383e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003650:	2b02      	cmp	r3, #2
 8003652:	f040 80cf 	bne.w	80037f4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003656:	4b52      	ldr	r3, [pc, #328]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	f003 0203 	and.w	r2, r3, #3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003666:	429a      	cmp	r2, r3
 8003668:	d12c      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003674:	3b01      	subs	r3, #1
 8003676:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003678:	429a      	cmp	r2, r3
 800367a:	d123      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003688:	429a      	cmp	r2, r3
 800368a:	d11b      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003696:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003698:	429a      	cmp	r2, r3
 800369a:	d113      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036a6:	085b      	lsrs	r3, r3, #1
 80036a8:	3b01      	subs	r3, #1
 80036aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80036ac:	429a      	cmp	r2, r3
 80036ae:	d109      	bne.n	80036c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ba:	085b      	lsrs	r3, r3, #1
 80036bc:	3b01      	subs	r3, #1
 80036be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d071      	beq.n	80037a8 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80036c4:	69bb      	ldr	r3, [r7, #24]
 80036c6:	2b0c      	cmp	r3, #12
 80036c8:	d068      	beq.n	800379c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80036ca:	4b35      	ldr	r3, [pc, #212]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d105      	bne.n	80036e2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80036d6:	4b32      	ldr	r3, [pc, #200]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e0ac      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80036e6:	4b2e      	ldr	r3, [pc, #184]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a2d      	ldr	r2, [pc, #180]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 80036ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80036f2:	f7fc fdeb 	bl	80002cc <HAL_GetTick>
 80036f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036f8:	e008      	b.n	800370c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036fa:	f7fc fde7 	bl	80002cc <HAL_GetTick>
 80036fe:	4602      	mov	r2, r0
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	1ad3      	subs	r3, r2, r3
 8003704:	2b02      	cmp	r3, #2
 8003706:	d901      	bls.n	800370c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003708:	2303      	movs	r3, #3
 800370a:	e099      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800370c:	4b24      	ldr	r3, [pc, #144]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1f0      	bne.n	80036fa <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003718:	4b21      	ldr	r3, [pc, #132]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800371a:	68da      	ldr	r2, [r3, #12]
 800371c:	4b21      	ldr	r3, [pc, #132]	; (80037a4 <HAL_RCC_OscConfig+0x788>)
 800371e:	4013      	ands	r3, r2
 8003720:	687a      	ldr	r2, [r7, #4]
 8003722:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003724:	687a      	ldr	r2, [r7, #4]
 8003726:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003728:	3a01      	subs	r2, #1
 800372a:	0112      	lsls	r2, r2, #4
 800372c:	4311      	orrs	r1, r2
 800372e:	687a      	ldr	r2, [r7, #4]
 8003730:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003732:	0212      	lsls	r2, r2, #8
 8003734:	4311      	orrs	r1, r2
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800373a:	0852      	lsrs	r2, r2, #1
 800373c:	3a01      	subs	r2, #1
 800373e:	0552      	lsls	r2, r2, #21
 8003740:	4311      	orrs	r1, r2
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003746:	0852      	lsrs	r2, r2, #1
 8003748:	3a01      	subs	r2, #1
 800374a:	0652      	lsls	r2, r2, #25
 800374c:	4311      	orrs	r1, r2
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003752:	06d2      	lsls	r2, r2, #27
 8003754:	430a      	orrs	r2, r1
 8003756:	4912      	ldr	r1, [pc, #72]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003758:	4313      	orrs	r3, r2
 800375a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800375c:	4b10      	ldr	r3, [pc, #64]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a0f      	ldr	r2, [pc, #60]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003766:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003768:	4b0d      	ldr	r3, [pc, #52]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	4a0c      	ldr	r2, [pc, #48]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 800376e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003772:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003774:	f7fc fdaa 	bl	80002cc <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800377a:	e008      	b.n	800378e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800377c:	f7fc fda6 	bl	80002cc <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b02      	cmp	r3, #2
 8003788:	d901      	bls.n	800378e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e058      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800378e:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <HAL_RCC_OscConfig+0x784>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800379a:	e050      	b.n	800383e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e04f      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
 80037a0:	40021000 	.word	0x40021000
 80037a4:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037a8:	4b27      	ldr	r3, [pc, #156]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d144      	bne.n	800383e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a23      	ldr	r2, [pc, #140]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 80037ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80037c0:	4b21      	ldr	r3, [pc, #132]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	4a20      	ldr	r2, [pc, #128]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 80037c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80037ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80037cc:	f7fc fd7e 	bl	80002cc <HAL_GetTick>
 80037d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037d2:	e008      	b.n	80037e6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d4:	f7fc fd7a 	bl	80002cc <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	693b      	ldr	r3, [r7, #16]
 80037dc:	1ad3      	subs	r3, r2, r3
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d901      	bls.n	80037e6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80037e2:	2303      	movs	r3, #3
 80037e4:	e02c      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80037e6:	4b18      	ldr	r3, [pc, #96]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d0f0      	beq.n	80037d4 <HAL_RCC_OscConfig+0x7b8>
 80037f2:	e024      	b.n	800383e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	2b0c      	cmp	r3, #12
 80037f8:	d01f      	beq.n	800383a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a12      	ldr	r2, [pc, #72]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 8003800:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003804:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003806:	f7fc fd61 	bl	80002cc <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800380e:	f7fc fd5d 	bl	80002cc <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e00f      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003820:	4b09      	ldr	r3, [pc, #36]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003828:	2b00      	cmp	r3, #0
 800382a:	d1f0      	bne.n	800380e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800382c:	4b06      	ldr	r3, [pc, #24]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 800382e:	68da      	ldr	r2, [r3, #12]
 8003830:	4905      	ldr	r1, [pc, #20]	; (8003848 <HAL_RCC_OscConfig+0x82c>)
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <HAL_RCC_OscConfig+0x830>)
 8003834:	4013      	ands	r3, r2
 8003836:	60cb      	str	r3, [r1, #12]
 8003838:	e001      	b.n	800383e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e000      	b.n	8003840 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40021000 	.word	0x40021000
 800384c:	feeefffc 	.word	0xfeeefffc

08003850 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d101      	bne.n	8003868 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	e11d      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003868:	4b90      	ldr	r3, [pc, #576]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 030f 	and.w	r3, r3, #15
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d910      	bls.n	8003898 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b8d      	ldr	r3, [pc, #564]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f023 020f 	bic.w	r2, r3, #15
 800387e:	498b      	ldr	r1, [pc, #556]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	4313      	orrs	r3, r2
 8003884:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003886:	4b89      	ldr	r3, [pc, #548]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 030f 	and.w	r3, r3, #15
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	429a      	cmp	r2, r3
 8003892:	d001      	beq.n	8003898 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e105      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0302 	and.w	r3, r3, #2
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d010      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689a      	ldr	r2, [r3, #8]
 80038a8:	4b81      	ldr	r3, [pc, #516]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d908      	bls.n	80038c6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b4:	4b7e      	ldr	r3, [pc, #504]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	497b      	ldr	r1, [pc, #492]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d079      	beq.n	80039c6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b03      	cmp	r3, #3
 80038d8:	d11e      	bne.n	8003918 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038da:	4b75      	ldr	r3, [pc, #468]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d101      	bne.n	80038ea <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e0dc      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80038ea:	f000 f9dd 	bl	8003ca8 <RCC_GetSysClockFreqFromPLLSource>
 80038ee:	4603      	mov	r3, r0
 80038f0:	4a70      	ldr	r2, [pc, #448]	; (8003ab4 <HAL_RCC_ClockConfig+0x264>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d946      	bls.n	8003984 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80038f6:	4b6e      	ldr	r3, [pc, #440]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d140      	bne.n	8003984 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003902:	4b6b      	ldr	r3, [pc, #428]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800390a:	4a69      	ldr	r2, [pc, #420]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 800390c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003910:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003912:	2380      	movs	r3, #128	; 0x80
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e035      	b.n	8003984 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	2b02      	cmp	r3, #2
 800391e:	d107      	bne.n	8003930 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003920:	4b63      	ldr	r3, [pc, #396]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d115      	bne.n	8003958 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e0b9      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d107      	bne.n	8003948 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003938:	4b5d      	ldr	r3, [pc, #372]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d109      	bne.n	8003958 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	e0ad      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003948:	4b59      	ldr	r3, [pc, #356]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e0a5      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003958:	f000 f8b4 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 800395c:	4603      	mov	r3, r0
 800395e:	4a55      	ldr	r2, [pc, #340]	; (8003ab4 <HAL_RCC_ClockConfig+0x264>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d90f      	bls.n	8003984 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003964:	4b52      	ldr	r3, [pc, #328]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d109      	bne.n	8003984 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003970:	4b4f      	ldr	r3, [pc, #316]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003978:	4a4d      	ldr	r2, [pc, #308]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 800397a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800397e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003980:	2380      	movs	r3, #128	; 0x80
 8003982:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003984:	4b4a      	ldr	r3, [pc, #296]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f023 0203 	bic.w	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	4947      	ldr	r1, [pc, #284]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003992:	4313      	orrs	r3, r2
 8003994:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003996:	f7fc fc99 	bl	80002cc <HAL_GetTick>
 800399a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800399c:	e00a      	b.n	80039b4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800399e:	f7fc fc95 	bl	80002cc <HAL_GetTick>
 80039a2:	4602      	mov	r2, r0
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	1ad3      	subs	r3, r2, r3
 80039a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d901      	bls.n	80039b4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e077      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b4:	4b3e      	ldr	r3, [pc, #248]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	f003 020c 	and.w	r2, r3, #12
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	429a      	cmp	r2, r3
 80039c4:	d1eb      	bne.n	800399e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	2b80      	cmp	r3, #128	; 0x80
 80039ca:	d105      	bne.n	80039d8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80039cc:	4b38      	ldr	r3, [pc, #224]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	4a37      	ldr	r2, [pc, #220]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80039d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80039d6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d010      	beq.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689a      	ldr	r2, [r3, #8]
 80039e8:	4b31      	ldr	r3, [pc, #196]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d208      	bcs.n	8003a06 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039f4:	4b2e      	ldr	r3, [pc, #184]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	492b      	ldr	r1, [pc, #172]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003a02:	4313      	orrs	r3, r2
 8003a04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a06:	4b29      	ldr	r3, [pc, #164]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f003 030f 	and.w	r3, r3, #15
 8003a0e:	683a      	ldr	r2, [r7, #0]
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d210      	bcs.n	8003a36 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a14:	4b25      	ldr	r3, [pc, #148]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f023 020f 	bic.w	r2, r3, #15
 8003a1c:	4923      	ldr	r1, [pc, #140]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	4313      	orrs	r3, r2
 8003a22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a24:	4b21      	ldr	r3, [pc, #132]	; (8003aac <HAL_RCC_ClockConfig+0x25c>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f003 030f 	and.w	r3, r3, #15
 8003a2c:	683a      	ldr	r2, [r7, #0]
 8003a2e:	429a      	cmp	r2, r3
 8003a30:	d001      	beq.n	8003a36 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e036      	b.n	8003aa4 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0304 	and.w	r3, r3, #4
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d008      	beq.n	8003a54 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a42:	4b1b      	ldr	r3, [pc, #108]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	68db      	ldr	r3, [r3, #12]
 8003a4e:	4918      	ldr	r1, [pc, #96]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003a50:	4313      	orrs	r3, r2
 8003a52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0308 	and.w	r3, r3, #8
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d009      	beq.n	8003a74 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a60:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	00db      	lsls	r3, r3, #3
 8003a6e:	4910      	ldr	r1, [pc, #64]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003a70:	4313      	orrs	r3, r2
 8003a72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003a74:	f000 f826 	bl	8003ac4 <HAL_RCC_GetSysClockFreq>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	4b0d      	ldr	r3, [pc, #52]	; (8003ab0 <HAL_RCC_ClockConfig+0x260>)
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	091b      	lsrs	r3, r3, #4
 8003a80:	f003 030f 	and.w	r3, r3, #15
 8003a84:	490c      	ldr	r1, [pc, #48]	; (8003ab8 <HAL_RCC_ClockConfig+0x268>)
 8003a86:	5ccb      	ldrb	r3, [r1, r3]
 8003a88:	f003 031f 	and.w	r3, r3, #31
 8003a8c:	fa22 f303 	lsr.w	r3, r2, r3
 8003a90:	4a0a      	ldr	r2, [pc, #40]	; (8003abc <HAL_RCC_ClockConfig+0x26c>)
 8003a92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003a94:	4b0a      	ldr	r3, [pc, #40]	; (8003ac0 <HAL_RCC_ClockConfig+0x270>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	4618      	mov	r0, r3
 8003a9a:	f7fc fbc7 	bl	800022c <HAL_InitTick>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	73fb      	strb	r3, [r7, #15]

  return status;
 8003aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40022000 	.word	0x40022000
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	04c4b400 	.word	0x04c4b400
 8003ab8:	08006284 	.word	0x08006284
 8003abc:	20000008 	.word	0x20000008
 8003ac0:	20000000 	.word	0x20000000

08003ac4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b089      	sub	sp, #36	; 0x24
 8003ac8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
 8003ace:	2300      	movs	r3, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ad2:	4b3e      	ldr	r3, [pc, #248]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f003 030c 	and.w	r3, r3, #12
 8003ada:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003adc:	4b3b      	ldr	r3, [pc, #236]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	f003 0303 	and.w	r3, r3, #3
 8003ae4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d005      	beq.n	8003af8 <HAL_RCC_GetSysClockFreq+0x34>
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	2b0c      	cmp	r3, #12
 8003af0:	d121      	bne.n	8003b36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d11e      	bne.n	8003b36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003af8:	4b34      	ldr	r3, [pc, #208]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0308 	and.w	r3, r3, #8
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003b04:	4b31      	ldr	r3, [pc, #196]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b0a:	0a1b      	lsrs	r3, r3, #8
 8003b0c:	f003 030f 	and.w	r3, r3, #15
 8003b10:	61fb      	str	r3, [r7, #28]
 8003b12:	e005      	b.n	8003b20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003b14:	4b2d      	ldr	r3, [pc, #180]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	091b      	lsrs	r3, r3, #4
 8003b1a:	f003 030f 	and.w	r3, r3, #15
 8003b1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003b20:	4a2b      	ldr	r2, [pc, #172]	; (8003bd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d10d      	bne.n	8003b4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003b30:	69fb      	ldr	r3, [r7, #28]
 8003b32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003b34:	e00a      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d102      	bne.n	8003b42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003b3c:	4b25      	ldr	r3, [pc, #148]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b3e:	61bb      	str	r3, [r7, #24]
 8003b40:	e004      	b.n	8003b4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d101      	bne.n	8003b4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003b48:	4b23      	ldr	r3, [pc, #140]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	2b0c      	cmp	r3, #12
 8003b50:	d134      	bne.n	8003bbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003b52:	4b1e      	ldr	r3, [pc, #120]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	f003 0303 	and.w	r3, r3, #3
 8003b5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	2b02      	cmp	r3, #2
 8003b60:	d003      	beq.n	8003b6a <HAL_RCC_GetSysClockFreq+0xa6>
 8003b62:	68bb      	ldr	r3, [r7, #8]
 8003b64:	2b03      	cmp	r3, #3
 8003b66:	d003      	beq.n	8003b70 <HAL_RCC_GetSysClockFreq+0xac>
 8003b68:	e005      	b.n	8003b76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003b6a:	4b1a      	ldr	r3, [pc, #104]	; (8003bd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003b6c:	617b      	str	r3, [r7, #20]
      break;
 8003b6e:	e005      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003b70:	4b19      	ldr	r3, [pc, #100]	; (8003bd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003b72:	617b      	str	r3, [r7, #20]
      break;
 8003b74:	e002      	b.n	8003b7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	617b      	str	r3, [r7, #20]
      break;
 8003b7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003b7c:	4b13      	ldr	r3, [pc, #76]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b7e:	68db      	ldr	r3, [r3, #12]
 8003b80:	091b      	lsrs	r3, r3, #4
 8003b82:	f003 030f 	and.w	r3, r3, #15
 8003b86:	3301      	adds	r3, #1
 8003b88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003b8a:	4b10      	ldr	r3, [pc, #64]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003b8c:	68db      	ldr	r3, [r3, #12]
 8003b8e:	0a1b      	lsrs	r3, r3, #8
 8003b90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	fb03 f202 	mul.w	r2, r3, r2
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	; (8003bcc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ba4:	68db      	ldr	r3, [r3, #12]
 8003ba6:	0e5b      	lsrs	r3, r3, #25
 8003ba8:	f003 0303 	and.w	r3, r3, #3
 8003bac:	3301      	adds	r3, #1
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	683b      	ldr	r3, [r7, #0]
 8003bb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003bbc:	69bb      	ldr	r3, [r7, #24]
}
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	3724      	adds	r7, #36	; 0x24
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	40021000 	.word	0x40021000
 8003bd0:	08006294 	.word	0x08006294
 8003bd4:	00f42400 	.word	0x00f42400
 8003bd8:	007a1200 	.word	0x007a1200

08003bdc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003be0:	4b03      	ldr	r3, [pc, #12]	; (8003bf0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003be2:	681b      	ldr	r3, [r3, #0]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	20000008 	.word	0x20000008

08003bf4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b086      	sub	sp, #24
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003c00:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d003      	beq.n	8003c14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003c0c:	f7ff f942 	bl	8002e94 <HAL_PWREx_GetVoltageRange>
 8003c10:	6178      	str	r0, [r7, #20]
 8003c12:	e014      	b.n	8003c3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003c14:	4b22      	ldr	r3, [pc, #136]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c18:	4a21      	ldr	r2, [pc, #132]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c1e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c20:	4b1f      	ldr	r3, [pc, #124]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003c2c:	f7ff f932 	bl	8002e94 <HAL_PWREx_GetVoltageRange>
 8003c30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003c32:	4b1b      	ldr	r3, [pc, #108]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c36:	4a1a      	ldr	r2, [pc, #104]	; (8003ca0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003c38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c44:	d10b      	bne.n	8003c5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2b80      	cmp	r3, #128	; 0x80
 8003c4a:	d913      	bls.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2ba0      	cmp	r3, #160	; 0xa0
 8003c50:	d902      	bls.n	8003c58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003c52:	2302      	movs	r3, #2
 8003c54:	613b      	str	r3, [r7, #16]
 8003c56:	e00d      	b.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c58:	2301      	movs	r3, #1
 8003c5a:	613b      	str	r3, [r7, #16]
 8003c5c:	e00a      	b.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2b7f      	cmp	r3, #127	; 0x7f
 8003c62:	d902      	bls.n	8003c6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003c64:	2302      	movs	r3, #2
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	e004      	b.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2b70      	cmp	r3, #112	; 0x70
 8003c6e:	d101      	bne.n	8003c74 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003c70:	2301      	movs	r3, #1
 8003c72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003c74:	4b0b      	ldr	r3, [pc, #44]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f023 020f 	bic.w	r2, r3, #15
 8003c7c:	4909      	ldr	r1, [pc, #36]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003c84:	4b07      	ldr	r3, [pc, #28]	; (8003ca4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 030f 	and.w	r3, r3, #15
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d001      	beq.n	8003c96 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003c92:	2301      	movs	r3, #1
 8003c94:	e000      	b.n	8003c98 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003c96:	2300      	movs	r3, #0
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3718      	adds	r7, #24
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	40021000 	.word	0x40021000
 8003ca4:	40022000 	.word	0x40022000

08003ca8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ca8:	b480      	push	{r7}
 8003caa:	b087      	sub	sp, #28
 8003cac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003cae:	4b2d      	ldr	r3, [pc, #180]	; (8003d64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b03      	cmp	r3, #3
 8003cbc:	d00b      	beq.n	8003cd6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d825      	bhi.n	8003d10 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d008      	beq.n	8003cdc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	2b02      	cmp	r3, #2
 8003cce:	d11f      	bne.n	8003d10 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003cd0:	4b25      	ldr	r3, [pc, #148]	; (8003d68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003cd2:	613b      	str	r3, [r7, #16]
    break;
 8003cd4:	e01f      	b.n	8003d16 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003cd6:	4b25      	ldr	r3, [pc, #148]	; (8003d6c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003cd8:	613b      	str	r3, [r7, #16]
    break;
 8003cda:	e01c      	b.n	8003d16 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cdc:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d107      	bne.n	8003cf8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ce8:	4b1e      	ldr	r3, [pc, #120]	; (8003d64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cee:	0a1b      	lsrs	r3, r3, #8
 8003cf0:	f003 030f 	and.w	r3, r3, #15
 8003cf4:	617b      	str	r3, [r7, #20]
 8003cf6:	e005      	b.n	8003d04 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cf8:	4b1a      	ldr	r3, [pc, #104]	; (8003d64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	091b      	lsrs	r3, r3, #4
 8003cfe:	f003 030f 	and.w	r3, r3, #15
 8003d02:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003d04:	4a1a      	ldr	r2, [pc, #104]	; (8003d70 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d0c:	613b      	str	r3, [r7, #16]
    break;
 8003d0e:	e002      	b.n	8003d16 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003d10:	2300      	movs	r3, #0
 8003d12:	613b      	str	r3, [r7, #16]
    break;
 8003d14:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d16:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	091b      	lsrs	r3, r3, #4
 8003d1c:	f003 030f 	and.w	r3, r3, #15
 8003d20:	3301      	adds	r3, #1
 8003d22:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d24:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d26:	68db      	ldr	r3, [r3, #12]
 8003d28:	0a1b      	lsrs	r3, r3, #8
 8003d2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d2e:	693a      	ldr	r2, [r7, #16]
 8003d30:	fb03 f202 	mul.w	r2, r3, r2
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d3c:	4b09      	ldr	r3, [pc, #36]	; (8003d64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	0e5b      	lsrs	r3, r3, #25
 8003d42:	f003 0303 	and.w	r3, r3, #3
 8003d46:	3301      	adds	r3, #1
 8003d48:	005b      	lsls	r3, r3, #1
 8003d4a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d54:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003d56:	683b      	ldr	r3, [r7, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40021000 	.word	0x40021000
 8003d68:	00f42400 	.word	0x00f42400
 8003d6c:	007a1200 	.word	0x007a1200
 8003d70:	08006294 	.word	0x08006294

08003d74 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b086      	sub	sp, #24
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d80:	2300      	movs	r3, #0
 8003d82:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d040      	beq.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003d94:	2b80      	cmp	r3, #128	; 0x80
 8003d96:	d02a      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003d98:	2b80      	cmp	r3, #128	; 0x80
 8003d9a:	d825      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003d9c:	2b60      	cmp	r3, #96	; 0x60
 8003d9e:	d026      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003da0:	2b60      	cmp	r3, #96	; 0x60
 8003da2:	d821      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003da4:	2b40      	cmp	r3, #64	; 0x40
 8003da6:	d006      	beq.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003da8:	2b40      	cmp	r3, #64	; 0x40
 8003daa:	d81d      	bhi.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d009      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003db0:	2b20      	cmp	r3, #32
 8003db2:	d010      	beq.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003db4:	e018      	b.n	8003de8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003db6:	4b89      	ldr	r3, [pc, #548]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003db8:	68db      	ldr	r3, [r3, #12]
 8003dba:	4a88      	ldr	r2, [pc, #544]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003dc0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dc2:	e015      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	3304      	adds	r3, #4
 8003dc8:	2100      	movs	r1, #0
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 fb02 	bl	80043d4 <RCCEx_PLLSAI1_Config>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003dd4:	e00c      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	3320      	adds	r3, #32
 8003dda:	2100      	movs	r1, #0
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fbed 	bl	80045bc <RCCEx_PLLSAI2_Config>
 8003de2:	4603      	mov	r3, r0
 8003de4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003de6:	e003      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	74fb      	strb	r3, [r7, #19]
      break;
 8003dec:	e000      	b.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003dee:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003df0:	7cfb      	ldrb	r3, [r7, #19]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d10b      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003df6:	4b79      	ldr	r3, [pc, #484]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003df8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003dfc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e04:	4975      	ldr	r1, [pc, #468]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003e0c:	e001      	b.n	8003e12 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e0e:	7cfb      	ldrb	r3, [r7, #19]
 8003e10:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d047      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e26:	d030      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2c:	d82a      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e2e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e32:	d02a      	beq.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003e34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e38:	d824      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e3e:	d008      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e44:	d81e      	bhi.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00a      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003e4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e4e:	d010      	beq.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003e50:	e018      	b.n	8003e84 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003e52:	4b62      	ldr	r3, [pc, #392]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	4a61      	ldr	r2, [pc, #388]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e5c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e5e:	e015      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3304      	adds	r3, #4
 8003e64:	2100      	movs	r1, #0
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fab4 	bl	80043d4 <RCCEx_PLLSAI1_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e70:	e00c      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	3320      	adds	r3, #32
 8003e76:	2100      	movs	r1, #0
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f000 fb9f 	bl	80045bc <RCCEx_PLLSAI2_Config>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003e82:	e003      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003e84:	2301      	movs	r3, #1
 8003e86:	74fb      	strb	r3, [r7, #19]
      break;
 8003e88:	e000      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003e8a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003e8c:	7cfb      	ldrb	r3, [r7, #19]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d10b      	bne.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003e92:	4b52      	ldr	r3, [pc, #328]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003e94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e98:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	494e      	ldr	r1, [pc, #312]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ea8:	e001      	b.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003eaa:	7cfb      	ldrb	r3, [r7, #19]
 8003eac:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	f000 809f 	beq.w	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ec0:	4b46      	ldr	r3, [pc, #280]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d101      	bne.n	8003ed0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003ecc:	2301      	movs	r3, #1
 8003ece:	e000      	b.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00d      	beq.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ed6:	4b41      	ldr	r3, [pc, #260]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eda:	4a40      	ldr	r2, [pc, #256]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003edc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ee0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ee2:	4b3e      	ldr	r3, [pc, #248]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ee6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eea:	60bb      	str	r3, [r7, #8]
 8003eec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eee:	2301      	movs	r3, #1
 8003ef0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ef2:	4b3b      	ldr	r3, [pc, #236]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a3a      	ldr	r2, [pc, #232]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003efe:	f7fc f9e5 	bl	80002cc <HAL_GetTick>
 8003f02:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f04:	e009      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f06:	f7fc f9e1 	bl	80002cc <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d902      	bls.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	74fb      	strb	r3, [r7, #19]
        break;
 8003f18:	e005      	b.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003f1a:	4b31      	ldr	r3, [pc, #196]	; (8003fe0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ef      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8003f26:	7cfb      	ldrb	r3, [r7, #19]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d15b      	bne.n	8003fe4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003f2c:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f36:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d01f      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d019      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003f4a:	4b24      	ldr	r3, [pc, #144]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f54:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003f56:	4b21      	ldr	r3, [pc, #132]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5c:	4a1f      	ldr	r2, [pc, #124]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f66:	4b1d      	ldr	r3, [pc, #116]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6c:	4a1b      	ldr	r2, [pc, #108]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f6e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f76:	4a19      	ldr	r2, [pc, #100]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	f003 0301 	and.w	r3, r3, #1
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d016      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f88:	f7fc f9a0 	bl	80002cc <HAL_GetTick>
 8003f8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f8e:	e00b      	b.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f90:	f7fc f99c 	bl	80002cc <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d902      	bls.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	74fb      	strb	r3, [r7, #19]
            break;
 8003fa6:	e006      	b.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fae:	f003 0302 	and.w	r3, r3, #2
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d0ec      	beq.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8003fb6:	7cfb      	ldrb	r3, [r7, #19]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10c      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003fbc:	4b07      	ldr	r3, [pc, #28]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fcc:	4903      	ldr	r1, [pc, #12]	; (8003fdc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003fd6:	7cfb      	ldrb	r3, [r7, #19]
 8003fd8:	74bb      	strb	r3, [r7, #18]
 8003fda:	e005      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fe4:	7cfb      	ldrb	r3, [r7, #19]
 8003fe6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fe8:	7c7b      	ldrb	r3, [r7, #17]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d105      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fee:	4ba0      	ldr	r3, [pc, #640]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ff2:	4a9f      	ldr	r2, [pc, #636]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ff8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00a      	beq.n	800401c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004006:	4b9a      	ldr	r3, [pc, #616]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800400c:	f023 0203 	bic.w	r2, r3, #3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004014:	4996      	ldr	r1, [pc, #600]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004016:	4313      	orrs	r3, r2
 8004018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d00a      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004028:	4b91      	ldr	r3, [pc, #580]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	f023 020c 	bic.w	r2, r3, #12
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004036:	498e      	ldr	r1, [pc, #568]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004038:	4313      	orrs	r3, r2
 800403a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0304 	and.w	r3, r3, #4
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00a      	beq.n	8004060 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800404a:	4b89      	ldr	r3, [pc, #548]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800404c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004050:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004058:	4985      	ldr	r1, [pc, #532]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800405a:	4313      	orrs	r3, r2
 800405c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0308 	and.w	r3, r3, #8
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00a      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800406c:	4b80      	ldr	r3, [pc, #512]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800406e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004072:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800407a:	497d      	ldr	r1, [pc, #500]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800407c:	4313      	orrs	r3, r2
 800407e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0310 	and.w	r3, r3, #16
 800408a:	2b00      	cmp	r3, #0
 800408c:	d00a      	beq.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800408e:	4b78      	ldr	r3, [pc, #480]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800409c:	4974      	ldr	r1, [pc, #464]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800409e:	4313      	orrs	r3, r2
 80040a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00a      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80040b0:	4b6f      	ldr	r3, [pc, #444]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040be:	496c      	ldr	r1, [pc, #432]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d00a      	beq.n	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040d2:	4b67      	ldr	r3, [pc, #412]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040e0:	4963      	ldr	r1, [pc, #396]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d00a      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80040f4:	4b5e      	ldr	r3, [pc, #376]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80040f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004102:	495b      	ldr	r1, [pc, #364]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004104:	4313      	orrs	r3, r2
 8004106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00a      	beq.n	800412c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004116:	4b56      	ldr	r3, [pc, #344]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004124:	4952      	ldr	r1, [pc, #328]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004126:	4313      	orrs	r3, r2
 8004128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00a      	beq.n	800414e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004138:	4b4d      	ldr	r3, [pc, #308]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800413a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800413e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004146:	494a      	ldr	r1, [pc, #296]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004148:	4313      	orrs	r3, r2
 800414a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004156:	2b00      	cmp	r3, #0
 8004158:	d00a      	beq.n	8004170 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800415a:	4b45      	ldr	r3, [pc, #276]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800415c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004168:	4941      	ldr	r1, [pc, #260]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800416a:	4313      	orrs	r3, r2
 800416c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00a      	beq.n	8004192 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800417c:	4b3c      	ldr	r3, [pc, #240]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004182:	f023 0203 	bic.w	r2, r3, #3
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418a:	4939      	ldr	r1, [pc, #228]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800418c:	4313      	orrs	r3, r2
 800418e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d028      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800419e:	4b34      	ldr	r3, [pc, #208]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ac:	4930      	ldr	r1, [pc, #192]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041bc:	d106      	bne.n	80041cc <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041be:	4b2c      	ldr	r3, [pc, #176]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	4a2b      	ldr	r2, [pc, #172]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041c8:	60d3      	str	r3, [r2, #12]
 80041ca:	e011      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80041d4:	d10c      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	3304      	adds	r3, #4
 80041da:	2101      	movs	r1, #1
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 f8f9 	bl	80043d4 <RCCEx_PLLSAI1_Config>
 80041e2:	4603      	mov	r3, r0
 80041e4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80041e6:	7cfb      	ldrb	r3, [r7, #19]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80041ec:	7cfb      	ldrb	r3, [r7, #19]
 80041ee:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d04d      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004200:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004204:	d108      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004206:	4b1a      	ldr	r3, [pc, #104]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004208:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800420c:	4a18      	ldr	r2, [pc, #96]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800420e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004212:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004216:	e012      	b.n	800423e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004218:	4b15      	ldr	r3, [pc, #84]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800421a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800421e:	4a14      	ldr	r2, [pc, #80]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004220:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004224:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004228:	4b11      	ldr	r3, [pc, #68]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800422e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004236:	490e      	ldr	r1, [pc, #56]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004238:	4313      	orrs	r3, r2
 800423a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004242:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004246:	d106      	bne.n	8004256 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004248:	4b09      	ldr	r3, [pc, #36]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	4a08      	ldr	r2, [pc, #32]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800424e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004252:	60d3      	str	r3, [r2, #12]
 8004254:	e020      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800425a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800425e:	d109      	bne.n	8004274 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004260:	4b03      	ldr	r3, [pc, #12]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	4a02      	ldr	r2, [pc, #8]	; (8004270 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800426a:	60d3      	str	r3, [r2, #12]
 800426c:	e014      	b.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800426e:	bf00      	nop
 8004270:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004278:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800427c:	d10c      	bne.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	3304      	adds	r3, #4
 8004282:	2101      	movs	r1, #1
 8004284:	4618      	mov	r0, r3
 8004286:	f000 f8a5 	bl	80043d4 <RCCEx_PLLSAI1_Config>
 800428a:	4603      	mov	r3, r0
 800428c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800428e:	7cfb      	ldrb	r3, [r7, #19]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d001      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004294:	7cfb      	ldrb	r3, [r7, #19]
 8004296:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d028      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80042a4:	4b4a      	ldr	r3, [pc, #296]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042b2:	4947      	ldr	r1, [pc, #284]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80042c2:	d106      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042c4:	4b42      	ldr	r3, [pc, #264]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042c6:	68db      	ldr	r3, [r3, #12]
 80042c8:	4a41      	ldr	r2, [pc, #260]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80042ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042ce:	60d3      	str	r3, [r2, #12]
 80042d0:	e011      	b.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80042d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80042da:	d10c      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	3304      	adds	r3, #4
 80042e0:	2101      	movs	r1, #1
 80042e2:	4618      	mov	r0, r3
 80042e4:	f000 f876 	bl	80043d4 <RCCEx_PLLSAI1_Config>
 80042e8:	4603      	mov	r3, r0
 80042ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80042ec:	7cfb      	ldrb	r3, [r7, #19]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80042f2:	7cfb      	ldrb	r3, [r7, #19]
 80042f4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d01e      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004302:	4b33      	ldr	r3, [pc, #204]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004308:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004312:	492f      	ldr	r1, [pc, #188]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004314:	4313      	orrs	r3, r2
 8004316:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004320:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004324:	d10c      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3304      	adds	r3, #4
 800432a:	2102      	movs	r1, #2
 800432c:	4618      	mov	r0, r3
 800432e:	f000 f851 	bl	80043d4 <RCCEx_PLLSAI1_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004336:	7cfb      	ldrb	r3, [r7, #19]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d00b      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800434c:	4b20      	ldr	r3, [pc, #128]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800434e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004352:	f023 0204 	bic.w	r2, r3, #4
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800435c:	491c      	ldr	r1, [pc, #112]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00b      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004370:	4b17      	ldr	r3, [pc, #92]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004372:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004376:	f023 0218 	bic.w	r2, r3, #24
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004380:	4913      	ldr	r1, [pc, #76]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004382:	4313      	orrs	r3, r2
 8004384:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d017      	beq.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004394:	4b0e      	ldr	r3, [pc, #56]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004396:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800439a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043a4:	490a      	ldr	r1, [pc, #40]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043a6:	4313      	orrs	r3, r2
 80043a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043b6:	d105      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043b8:	4b05      	ldr	r3, [pc, #20]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	4a04      	ldr	r2, [pc, #16]	; (80043d0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043c2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80043c4:	7cbb      	ldrb	r3, [r7, #18]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3718      	adds	r7, #24
 80043ca:	46bd      	mov	sp, r7
 80043cc:	bd80      	pop	{r7, pc}
 80043ce:	bf00      	nop
 80043d0:	40021000 	.word	0x40021000

080043d4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80043e2:	4b72      	ldr	r3, [pc, #456]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	f003 0303 	and.w	r3, r3, #3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00e      	beq.n	800440c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80043ee:	4b6f      	ldr	r3, [pc, #444]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	f003 0203 	and.w	r2, r3, #3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d103      	bne.n	8004406 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
       ||
 8004402:	2b00      	cmp	r3, #0
 8004404:	d142      	bne.n	800448c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004406:	2301      	movs	r3, #1
 8004408:	73fb      	strb	r3, [r7, #15]
 800440a:	e03f      	b.n	800448c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d018      	beq.n	8004446 <RCCEx_PLLSAI1_Config+0x72>
 8004414:	2b03      	cmp	r3, #3
 8004416:	d825      	bhi.n	8004464 <RCCEx_PLLSAI1_Config+0x90>
 8004418:	2b01      	cmp	r3, #1
 800441a:	d002      	beq.n	8004422 <RCCEx_PLLSAI1_Config+0x4e>
 800441c:	2b02      	cmp	r3, #2
 800441e:	d009      	beq.n	8004434 <RCCEx_PLLSAI1_Config+0x60>
 8004420:	e020      	b.n	8004464 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004422:	4b62      	ldr	r3, [pc, #392]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f003 0302 	and.w	r3, r3, #2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d11d      	bne.n	800446a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004432:	e01a      	b.n	800446a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004434:	4b5d      	ldr	r3, [pc, #372]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800443c:	2b00      	cmp	r3, #0
 800443e:	d116      	bne.n	800446e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004444:	e013      	b.n	800446e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004446:	4b59      	ldr	r3, [pc, #356]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d10f      	bne.n	8004472 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004452:	4b56      	ldr	r3, [pc, #344]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d109      	bne.n	8004472 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004462:	e006      	b.n	8004472 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	73fb      	strb	r3, [r7, #15]
      break;
 8004468:	e004      	b.n	8004474 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800446a:	bf00      	nop
 800446c:	e002      	b.n	8004474 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800446e:	bf00      	nop
 8004470:	e000      	b.n	8004474 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004472:	bf00      	nop
    }

    if(status == HAL_OK)
 8004474:	7bfb      	ldrb	r3, [r7, #15]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d108      	bne.n	800448c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800447a:	4b4c      	ldr	r3, [pc, #304]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800447c:	68db      	ldr	r3, [r3, #12]
 800447e:	f023 0203 	bic.w	r2, r3, #3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4949      	ldr	r1, [pc, #292]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004488:	4313      	orrs	r3, r2
 800448a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800448c:	7bfb      	ldrb	r3, [r7, #15]
 800448e:	2b00      	cmp	r3, #0
 8004490:	f040 8086 	bne.w	80045a0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004494:	4b45      	ldr	r3, [pc, #276]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a44      	ldr	r2, [pc, #272]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800449a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800449e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044a0:	f7fb ff14 	bl	80002cc <HAL_GetTick>
 80044a4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044a6:	e009      	b.n	80044bc <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80044a8:	f7fb ff10 	bl	80002cc <HAL_GetTick>
 80044ac:	4602      	mov	r2, r0
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d902      	bls.n	80044bc <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80044b6:	2303      	movs	r3, #3
 80044b8:	73fb      	strb	r3, [r7, #15]
        break;
 80044ba:	e005      	b.n	80044c8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80044bc:	4b3b      	ldr	r3, [pc, #236]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d1ef      	bne.n	80044a8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80044c8:	7bfb      	ldrb	r3, [r7, #15]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d168      	bne.n	80045a0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d113      	bne.n	80044fc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80044d4:	4b35      	ldr	r3, [pc, #212]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	4b35      	ldr	r3, [pc, #212]	; (80045b0 <RCCEx_PLLSAI1_Config+0x1dc>)
 80044da:	4013      	ands	r3, r2
 80044dc:	687a      	ldr	r2, [r7, #4]
 80044de:	6892      	ldr	r2, [r2, #8]
 80044e0:	0211      	lsls	r1, r2, #8
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	68d2      	ldr	r2, [r2, #12]
 80044e6:	06d2      	lsls	r2, r2, #27
 80044e8:	4311      	orrs	r1, r2
 80044ea:	687a      	ldr	r2, [r7, #4]
 80044ec:	6852      	ldr	r2, [r2, #4]
 80044ee:	3a01      	subs	r2, #1
 80044f0:	0112      	lsls	r2, r2, #4
 80044f2:	430a      	orrs	r2, r1
 80044f4:	492d      	ldr	r1, [pc, #180]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	610b      	str	r3, [r1, #16]
 80044fa:	e02d      	b.n	8004558 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d115      	bne.n	800452e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004502:	4b2a      	ldr	r3, [pc, #168]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004504:	691a      	ldr	r2, [r3, #16]
 8004506:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004508:	4013      	ands	r3, r2
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6892      	ldr	r2, [r2, #8]
 800450e:	0211      	lsls	r1, r2, #8
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6912      	ldr	r2, [r2, #16]
 8004514:	0852      	lsrs	r2, r2, #1
 8004516:	3a01      	subs	r2, #1
 8004518:	0552      	lsls	r2, r2, #21
 800451a:	4311      	orrs	r1, r2
 800451c:	687a      	ldr	r2, [r7, #4]
 800451e:	6852      	ldr	r2, [r2, #4]
 8004520:	3a01      	subs	r2, #1
 8004522:	0112      	lsls	r2, r2, #4
 8004524:	430a      	orrs	r2, r1
 8004526:	4921      	ldr	r1, [pc, #132]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004528:	4313      	orrs	r3, r2
 800452a:	610b      	str	r3, [r1, #16]
 800452c:	e014      	b.n	8004558 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800452e:	4b1f      	ldr	r3, [pc, #124]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004530:	691a      	ldr	r2, [r3, #16]
 8004532:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004534:	4013      	ands	r3, r2
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6892      	ldr	r2, [r2, #8]
 800453a:	0211      	lsls	r1, r2, #8
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6952      	ldr	r2, [r2, #20]
 8004540:	0852      	lsrs	r2, r2, #1
 8004542:	3a01      	subs	r2, #1
 8004544:	0652      	lsls	r2, r2, #25
 8004546:	4311      	orrs	r1, r2
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	6852      	ldr	r2, [r2, #4]
 800454c:	3a01      	subs	r2, #1
 800454e:	0112      	lsls	r2, r2, #4
 8004550:	430a      	orrs	r2, r1
 8004552:	4916      	ldr	r1, [pc, #88]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004554:	4313      	orrs	r3, r2
 8004556:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004558:	4b14      	ldr	r3, [pc, #80]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a13      	ldr	r2, [pc, #76]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800455e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004562:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004564:	f7fb feb2 	bl	80002cc <HAL_GetTick>
 8004568:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800456a:	e009      	b.n	8004580 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800456c:	f7fb feae 	bl	80002cc <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	2b02      	cmp	r3, #2
 8004578:	d902      	bls.n	8004580 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	73fb      	strb	r3, [r7, #15]
          break;
 800457e:	e005      	b.n	800458c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004580:	4b0a      	ldr	r3, [pc, #40]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004588:	2b00      	cmp	r3, #0
 800458a:	d0ef      	beq.n	800456c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800458c:	7bfb      	ldrb	r3, [r7, #15]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d106      	bne.n	80045a0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004592:	4b06      	ldr	r3, [pc, #24]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	4904      	ldr	r1, [pc, #16]	; (80045ac <RCCEx_PLLSAI1_Config+0x1d8>)
 800459c:	4313      	orrs	r3, r2
 800459e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a2:	4618      	mov	r0, r3
 80045a4:	3710      	adds	r7, #16
 80045a6:	46bd      	mov	sp, r7
 80045a8:	bd80      	pop	{r7, pc}
 80045aa:	bf00      	nop
 80045ac:	40021000 	.word	0x40021000
 80045b0:	07ff800f 	.word	0x07ff800f
 80045b4:	ff9f800f 	.word	0xff9f800f
 80045b8:	f9ff800f 	.word	0xf9ff800f

080045bc <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
 80045c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80045c6:	2300      	movs	r3, #0
 80045c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80045ca:	4b72      	ldr	r3, [pc, #456]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f003 0303 	and.w	r3, r3, #3
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00e      	beq.n	80045f4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80045d6:	4b6f      	ldr	r3, [pc, #444]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 80045d8:	68db      	ldr	r3, [r3, #12]
 80045da:	f003 0203 	and.w	r2, r3, #3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	429a      	cmp	r2, r3
 80045e4:	d103      	bne.n	80045ee <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
       ||
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d142      	bne.n	8004674 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	73fb      	strb	r3, [r7, #15]
 80045f2:	e03f      	b.n	8004674 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b03      	cmp	r3, #3
 80045fa:	d018      	beq.n	800462e <RCCEx_PLLSAI2_Config+0x72>
 80045fc:	2b03      	cmp	r3, #3
 80045fe:	d825      	bhi.n	800464c <RCCEx_PLLSAI2_Config+0x90>
 8004600:	2b01      	cmp	r3, #1
 8004602:	d002      	beq.n	800460a <RCCEx_PLLSAI2_Config+0x4e>
 8004604:	2b02      	cmp	r3, #2
 8004606:	d009      	beq.n	800461c <RCCEx_PLLSAI2_Config+0x60>
 8004608:	e020      	b.n	800464c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800460a:	4b62      	ldr	r3, [pc, #392]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d11d      	bne.n	8004652 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800461a:	e01a      	b.n	8004652 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800461c:	4b5d      	ldr	r3, [pc, #372]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004624:	2b00      	cmp	r3, #0
 8004626:	d116      	bne.n	8004656 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800462c:	e013      	b.n	8004656 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800462e:	4b59      	ldr	r3, [pc, #356]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10f      	bne.n	800465a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800463a:	4b56      	ldr	r3, [pc, #344]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d109      	bne.n	800465a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800464a:	e006      	b.n	800465a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800464c:	2301      	movs	r3, #1
 800464e:	73fb      	strb	r3, [r7, #15]
      break;
 8004650:	e004      	b.n	800465c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004652:	bf00      	nop
 8004654:	e002      	b.n	800465c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004656:	bf00      	nop
 8004658:	e000      	b.n	800465c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800465a:	bf00      	nop
    }

    if(status == HAL_OK)
 800465c:	7bfb      	ldrb	r3, [r7, #15]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d108      	bne.n	8004674 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004662:	4b4c      	ldr	r3, [pc, #304]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004664:	68db      	ldr	r3, [r3, #12]
 8004666:	f023 0203 	bic.w	r2, r3, #3
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4949      	ldr	r1, [pc, #292]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004670:	4313      	orrs	r3, r2
 8004672:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004674:	7bfb      	ldrb	r3, [r7, #15]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f040 8086 	bne.w	8004788 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800467c:	4b45      	ldr	r3, [pc, #276]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a44      	ldr	r2, [pc, #272]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004682:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004686:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004688:	f7fb fe20 	bl	80002cc <HAL_GetTick>
 800468c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800468e:	e009      	b.n	80046a4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004690:	f7fb fe1c 	bl	80002cc <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b02      	cmp	r3, #2
 800469c:	d902      	bls.n	80046a4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	73fb      	strb	r3, [r7, #15]
        break;
 80046a2:	e005      	b.n	80046b0 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046a4:	4b3b      	ldr	r3, [pc, #236]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d1ef      	bne.n	8004690 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80046b0:	7bfb      	ldrb	r3, [r7, #15]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d168      	bne.n	8004788 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d113      	bne.n	80046e4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046bc:	4b35      	ldr	r3, [pc, #212]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046be:	695a      	ldr	r2, [r3, #20]
 80046c0:	4b35      	ldr	r3, [pc, #212]	; (8004798 <RCCEx_PLLSAI2_Config+0x1dc>)
 80046c2:	4013      	ands	r3, r2
 80046c4:	687a      	ldr	r2, [r7, #4]
 80046c6:	6892      	ldr	r2, [r2, #8]
 80046c8:	0211      	lsls	r1, r2, #8
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	68d2      	ldr	r2, [r2, #12]
 80046ce:	06d2      	lsls	r2, r2, #27
 80046d0:	4311      	orrs	r1, r2
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	6852      	ldr	r2, [r2, #4]
 80046d6:	3a01      	subs	r2, #1
 80046d8:	0112      	lsls	r2, r2, #4
 80046da:	430a      	orrs	r2, r1
 80046dc:	492d      	ldr	r1, [pc, #180]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046de:	4313      	orrs	r3, r2
 80046e0:	614b      	str	r3, [r1, #20]
 80046e2:	e02d      	b.n	8004740 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d115      	bne.n	8004716 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80046ea:	4b2a      	ldr	r3, [pc, #168]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 80046ec:	695a      	ldr	r2, [r3, #20]
 80046ee:	4b2b      	ldr	r3, [pc, #172]	; (800479c <RCCEx_PLLSAI2_Config+0x1e0>)
 80046f0:	4013      	ands	r3, r2
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6892      	ldr	r2, [r2, #8]
 80046f6:	0211      	lsls	r1, r2, #8
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	6912      	ldr	r2, [r2, #16]
 80046fc:	0852      	lsrs	r2, r2, #1
 80046fe:	3a01      	subs	r2, #1
 8004700:	0552      	lsls	r2, r2, #21
 8004702:	4311      	orrs	r1, r2
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	6852      	ldr	r2, [r2, #4]
 8004708:	3a01      	subs	r2, #1
 800470a:	0112      	lsls	r2, r2, #4
 800470c:	430a      	orrs	r2, r1
 800470e:	4921      	ldr	r1, [pc, #132]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004710:	4313      	orrs	r3, r2
 8004712:	614b      	str	r3, [r1, #20]
 8004714:	e014      	b.n	8004740 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004716:	4b1f      	ldr	r3, [pc, #124]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004718:	695a      	ldr	r2, [r3, #20]
 800471a:	4b21      	ldr	r3, [pc, #132]	; (80047a0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800471c:	4013      	ands	r3, r2
 800471e:	687a      	ldr	r2, [r7, #4]
 8004720:	6892      	ldr	r2, [r2, #8]
 8004722:	0211      	lsls	r1, r2, #8
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	6952      	ldr	r2, [r2, #20]
 8004728:	0852      	lsrs	r2, r2, #1
 800472a:	3a01      	subs	r2, #1
 800472c:	0652      	lsls	r2, r2, #25
 800472e:	4311      	orrs	r1, r2
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	6852      	ldr	r2, [r2, #4]
 8004734:	3a01      	subs	r2, #1
 8004736:	0112      	lsls	r2, r2, #4
 8004738:	430a      	orrs	r2, r1
 800473a:	4916      	ldr	r1, [pc, #88]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800473c:	4313      	orrs	r3, r2
 800473e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004740:	4b14      	ldr	r3, [pc, #80]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a13      	ldr	r2, [pc, #76]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800474a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474c:	f7fb fdbe 	bl	80002cc <HAL_GetTick>
 8004750:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004752:	e009      	b.n	8004768 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004754:	f7fb fdba 	bl	80002cc <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d902      	bls.n	8004768 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	73fb      	strb	r3, [r7, #15]
          break;
 8004766:	e005      	b.n	8004774 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004768:	4b0a      	ldr	r3, [pc, #40]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d0ef      	beq.n	8004754 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004774:	7bfb      	ldrb	r3, [r7, #15]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 800477c:	695a      	ldr	r2, [r3, #20]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	4904      	ldr	r1, [pc, #16]	; (8004794 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004784:	4313      	orrs	r3, r2
 8004786:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004788:	7bfb      	ldrb	r3, [r7, #15]
}
 800478a:	4618      	mov	r0, r3
 800478c:	3710      	adds	r7, #16
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40021000 	.word	0x40021000
 8004798:	07ff800f 	.word	0x07ff800f
 800479c:	ff9f800f 	.word	0xff9f800f
 80047a0:	f9ff800f 	.word	0xf9ff800f

080047a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b082      	sub	sp, #8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047b2:	2301      	movs	r3, #1
 80047b4:	e049      	b.n	800484a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d106      	bne.n	80047d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f001 fc72 	bl	80060b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681a      	ldr	r2, [r3, #0]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3304      	adds	r3, #4
 80047e0:	4619      	mov	r1, r3
 80047e2:	4610      	mov	r0, r2
 80047e4:	f000 fa50 	bl	8004c88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	2201      	movs	r2, #1
 800482c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2201      	movs	r2, #1
 8004834:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2201      	movs	r2, #1
 8004844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3708      	adds	r7, #8
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	691b      	ldr	r3, [r3, #16]
 8004860:	f003 0302 	and.w	r3, r3, #2
 8004864:	2b02      	cmp	r3, #2
 8004866:	d122      	bne.n	80048ae <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f003 0302 	and.w	r3, r3, #2
 8004872:	2b02      	cmp	r3, #2
 8004874:	d11b      	bne.n	80048ae <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f06f 0202 	mvn.w	r2, #2
 800487e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	f003 0303 	and.w	r3, r3, #3
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004894:	6878      	ldr	r0, [r7, #4]
 8004896:	f000 f9d8 	bl	8004c4a <HAL_TIM_IC_CaptureCallback>
 800489a:	e005      	b.n	80048a8 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f000 f9ca 	bl	8004c36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f9db 	bl	8004c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2200      	movs	r2, #0
 80048ac:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	f003 0304 	and.w	r3, r3, #4
 80048b8:	2b04      	cmp	r3, #4
 80048ba:	d122      	bne.n	8004902 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	f003 0304 	and.w	r3, r3, #4
 80048c6:	2b04      	cmp	r3, #4
 80048c8:	d11b      	bne.n	8004902 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f06f 0204 	mvn.w	r2, #4
 80048d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 f9ae 	bl	8004c4a <HAL_TIM_IC_CaptureCallback>
 80048ee:	e005      	b.n	80048fc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f0:	6878      	ldr	r0, [r7, #4]
 80048f2:	f000 f9a0 	bl	8004c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f9b1 	bl	8004c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	f003 0308 	and.w	r3, r3, #8
 800490c:	2b08      	cmp	r3, #8
 800490e:	d122      	bne.n	8004956 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b08      	cmp	r3, #8
 800491c:	d11b      	bne.n	8004956 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f06f 0208 	mvn.w	r2, #8
 8004926:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2204      	movs	r2, #4
 800492c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	69db      	ldr	r3, [r3, #28]
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	2b00      	cmp	r3, #0
 800493a:	d003      	beq.n	8004944 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f984 	bl	8004c4a <HAL_TIM_IC_CaptureCallback>
 8004942:	e005      	b.n	8004950 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f976 	bl	8004c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 f987 	bl	8004c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	f003 0310 	and.w	r3, r3, #16
 8004960:	2b10      	cmp	r3, #16
 8004962:	d122      	bne.n	80049aa <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68db      	ldr	r3, [r3, #12]
 800496a:	f003 0310 	and.w	r3, r3, #16
 800496e:	2b10      	cmp	r3, #16
 8004970:	d11b      	bne.n	80049aa <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f06f 0210 	mvn.w	r2, #16
 800497a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2208      	movs	r2, #8
 8004980:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	69db      	ldr	r3, [r3, #28]
 8004988:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498c:	2b00      	cmp	r3, #0
 800498e:	d003      	beq.n	8004998 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f95a 	bl	8004c4a <HAL_TIM_IC_CaptureCallback>
 8004996:	e005      	b.n	80049a4 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f94c 	bl	8004c36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f000 f95d 	bl	8004c5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	f003 0301 	and.w	r3, r3, #1
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d10e      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b01      	cmp	r3, #1
 80049c4:	d107      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f06f 0201 	mvn.w	r2, #1
 80049ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f000 f926 	bl	8004c22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e0:	2b80      	cmp	r3, #128	; 0x80
 80049e2:	d10e      	bne.n	8004a02 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049ee:	2b80      	cmp	r3, #128	; 0x80
 80049f0:	d107      	bne.n	8004a02 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 fb09 	bl	8005014 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a10:	d10e      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	68db      	ldr	r3, [r3, #12]
 8004a18:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a1c:	2b80      	cmp	r3, #128	; 0x80
 8004a1e:	d107      	bne.n	8004a30 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fafc 	bl	8005028 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	691b      	ldr	r3, [r3, #16]
 8004a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a3a:	2b40      	cmp	r3, #64	; 0x40
 8004a3c:	d10e      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	68db      	ldr	r3, [r3, #12]
 8004a44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a48:	2b40      	cmp	r3, #64	; 0x40
 8004a4a:	d107      	bne.n	8004a5c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 f90b 	bl	8004c72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	f003 0320 	and.w	r3, r3, #32
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d10e      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68db      	ldr	r3, [r3, #12]
 8004a70:	f003 0320 	and.w	r3, r3, #32
 8004a74:	2b20      	cmp	r3, #32
 8004a76:	d107      	bne.n	8004a88 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f06f 0220 	mvn.w	r2, #32
 8004a80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a82:	6878      	ldr	r0, [r7, #4]
 8004a84:	f000 fabc 	bl	8005000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a88:	bf00      	nop
 8004a8a:	3708      	adds	r7, #8
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
 8004a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d101      	bne.n	8004aac <HAL_TIM_ConfigClockSource+0x1c>
 8004aa8:	2302      	movs	r3, #2
 8004aaa:	e0b6      	b.n	8004c1a <HAL_TIM_ConfigClockSource+0x18a>
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2202      	movs	r2, #2
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	689b      	ldr	r3, [r3, #8]
 8004ac2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004aca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004ace:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004ad6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ae8:	d03e      	beq.n	8004b68 <HAL_TIM_ConfigClockSource+0xd8>
 8004aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004aee:	f200 8087 	bhi.w	8004c00 <HAL_TIM_ConfigClockSource+0x170>
 8004af2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004af6:	f000 8086 	beq.w	8004c06 <HAL_TIM_ConfigClockSource+0x176>
 8004afa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004afe:	d87f      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x170>
 8004b00:	2b70      	cmp	r3, #112	; 0x70
 8004b02:	d01a      	beq.n	8004b3a <HAL_TIM_ConfigClockSource+0xaa>
 8004b04:	2b70      	cmp	r3, #112	; 0x70
 8004b06:	d87b      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x170>
 8004b08:	2b60      	cmp	r3, #96	; 0x60
 8004b0a:	d050      	beq.n	8004bae <HAL_TIM_ConfigClockSource+0x11e>
 8004b0c:	2b60      	cmp	r3, #96	; 0x60
 8004b0e:	d877      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x170>
 8004b10:	2b50      	cmp	r3, #80	; 0x50
 8004b12:	d03c      	beq.n	8004b8e <HAL_TIM_ConfigClockSource+0xfe>
 8004b14:	2b50      	cmp	r3, #80	; 0x50
 8004b16:	d873      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x170>
 8004b18:	2b40      	cmp	r3, #64	; 0x40
 8004b1a:	d058      	beq.n	8004bce <HAL_TIM_ConfigClockSource+0x13e>
 8004b1c:	2b40      	cmp	r3, #64	; 0x40
 8004b1e:	d86f      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x170>
 8004b20:	2b30      	cmp	r3, #48	; 0x30
 8004b22:	d064      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x15e>
 8004b24:	2b30      	cmp	r3, #48	; 0x30
 8004b26:	d86b      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x170>
 8004b28:	2b20      	cmp	r3, #32
 8004b2a:	d060      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x15e>
 8004b2c:	2b20      	cmp	r3, #32
 8004b2e:	d867      	bhi.n	8004c00 <HAL_TIM_ConfigClockSource+0x170>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d05c      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x15e>
 8004b34:	2b10      	cmp	r3, #16
 8004b36:	d05a      	beq.n	8004bee <HAL_TIM_ConfigClockSource+0x15e>
 8004b38:	e062      	b.n	8004c00 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6818      	ldr	r0, [r3, #0]
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	6899      	ldr	r1, [r3, #8]
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	685a      	ldr	r2, [r3, #4]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f000 f9b1 	bl	8004eb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004b5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	609a      	str	r2, [r3, #8]
      break;
 8004b66:	e04f      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6818      	ldr	r0, [r3, #0]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	6899      	ldr	r1, [r3, #8]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f000 f99a 	bl	8004eb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b8a:	609a      	str	r2, [r3, #8]
      break;
 8004b8c:	e03c      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6818      	ldr	r0, [r3, #0]
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6859      	ldr	r1, [r3, #4]
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	68db      	ldr	r3, [r3, #12]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	f000 f90e 	bl	8004dbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	2150      	movs	r1, #80	; 0x50
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	f000 f967 	bl	8004e7a <TIM_ITRx_SetConfig>
      break;
 8004bac:	e02c      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6818      	ldr	r0, [r3, #0]
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	6859      	ldr	r1, [r3, #4]
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	68db      	ldr	r3, [r3, #12]
 8004bba:	461a      	mov	r2, r3
 8004bbc:	f000 f92d 	bl	8004e1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	2160      	movs	r1, #96	; 0x60
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f000 f957 	bl	8004e7a <TIM_ITRx_SetConfig>
      break;
 8004bcc:	e01c      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6818      	ldr	r0, [r3, #0]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	6859      	ldr	r1, [r3, #4]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	461a      	mov	r2, r3
 8004bdc:	f000 f8ee 	bl	8004dbc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	2140      	movs	r1, #64	; 0x40
 8004be6:	4618      	mov	r0, r3
 8004be8:	f000 f947 	bl	8004e7a <TIM_ITRx_SetConfig>
      break;
 8004bec:	e00c      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4610      	mov	r0, r2
 8004bfa:	f000 f93e 	bl	8004e7a <TIM_ITRx_SetConfig>
      break;
 8004bfe:	e003      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	73fb      	strb	r3, [r7, #15]
      break;
 8004c04:	e000      	b.n	8004c08 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004c06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	3710      	adds	r7, #16
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b083      	sub	sp, #12
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004c2a:	bf00      	nop
 8004c2c:	370c      	adds	r7, #12
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c34:	4770      	bx	lr

08004c36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c36:	b480      	push	{r7}
 8004c38:	b083      	sub	sp, #12
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c3e:	bf00      	nop
 8004c40:	370c      	adds	r7, #12
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr

08004c4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c4a:	b480      	push	{r7}
 8004c4c:	b083      	sub	sp, #12
 8004c4e:	af00      	add	r7, sp, #0
 8004c50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c52:	bf00      	nop
 8004c54:	370c      	adds	r7, #12
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr

08004c5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c66:	bf00      	nop
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr

08004c72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c72:	b480      	push	{r7}
 8004c74:	b083      	sub	sp, #12
 8004c76:	af00      	add	r7, sp, #0
 8004c78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c7a:	bf00      	nop
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr
	...

08004c88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	4a40      	ldr	r2, [pc, #256]	; (8004d9c <TIM_Base_SetConfig+0x114>)
 8004c9c:	4293      	cmp	r3, r2
 8004c9e:	d013      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ca6:	d00f      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	4a3d      	ldr	r2, [pc, #244]	; (8004da0 <TIM_Base_SetConfig+0x118>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d00b      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a3c      	ldr	r2, [pc, #240]	; (8004da4 <TIM_Base_SetConfig+0x11c>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d007      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a3b      	ldr	r2, [pc, #236]	; (8004da8 <TIM_Base_SetConfig+0x120>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d003      	beq.n	8004cc8 <TIM_Base_SetConfig+0x40>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a3a      	ldr	r2, [pc, #232]	; (8004dac <TIM_Base_SetConfig+0x124>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d108      	bne.n	8004cda <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cd0:	683b      	ldr	r3, [r7, #0]
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	4a2f      	ldr	r2, [pc, #188]	; (8004d9c <TIM_Base_SetConfig+0x114>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d01f      	beq.n	8004d22 <TIM_Base_SetConfig+0x9a>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ce8:	d01b      	beq.n	8004d22 <TIM_Base_SetConfig+0x9a>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	4a2c      	ldr	r2, [pc, #176]	; (8004da0 <TIM_Base_SetConfig+0x118>)
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d017      	beq.n	8004d22 <TIM_Base_SetConfig+0x9a>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a2b      	ldr	r2, [pc, #172]	; (8004da4 <TIM_Base_SetConfig+0x11c>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d013      	beq.n	8004d22 <TIM_Base_SetConfig+0x9a>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a2a      	ldr	r2, [pc, #168]	; (8004da8 <TIM_Base_SetConfig+0x120>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d00f      	beq.n	8004d22 <TIM_Base_SetConfig+0x9a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a29      	ldr	r2, [pc, #164]	; (8004dac <TIM_Base_SetConfig+0x124>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d00b      	beq.n	8004d22 <TIM_Base_SetConfig+0x9a>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a28      	ldr	r2, [pc, #160]	; (8004db0 <TIM_Base_SetConfig+0x128>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d007      	beq.n	8004d22 <TIM_Base_SetConfig+0x9a>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a27      	ldr	r2, [pc, #156]	; (8004db4 <TIM_Base_SetConfig+0x12c>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d003      	beq.n	8004d22 <TIM_Base_SetConfig+0x9a>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a26      	ldr	r2, [pc, #152]	; (8004db8 <TIM_Base_SetConfig+0x130>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d108      	bne.n	8004d34 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	68fa      	ldr	r2, [r7, #12]
 8004d46:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <TIM_Base_SetConfig+0x114>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d00f      	beq.n	8004d80 <TIM_Base_SetConfig+0xf8>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	4a12      	ldr	r2, [pc, #72]	; (8004dac <TIM_Base_SetConfig+0x124>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d00b      	beq.n	8004d80 <TIM_Base_SetConfig+0xf8>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	4a11      	ldr	r2, [pc, #68]	; (8004db0 <TIM_Base_SetConfig+0x128>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d007      	beq.n	8004d80 <TIM_Base_SetConfig+0xf8>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	4a10      	ldr	r2, [pc, #64]	; (8004db4 <TIM_Base_SetConfig+0x12c>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d003      	beq.n	8004d80 <TIM_Base_SetConfig+0xf8>
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a0f      	ldr	r2, [pc, #60]	; (8004db8 <TIM_Base_SetConfig+0x130>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d103      	bne.n	8004d88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	615a      	str	r2, [r3, #20]
}
 8004d8e:	bf00      	nop
 8004d90:	3714      	adds	r7, #20
 8004d92:	46bd      	mov	sp, r7
 8004d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d98:	4770      	bx	lr
 8004d9a:	bf00      	nop
 8004d9c:	40012c00 	.word	0x40012c00
 8004da0:	40000400 	.word	0x40000400
 8004da4:	40000800 	.word	0x40000800
 8004da8:	40000c00 	.word	0x40000c00
 8004dac:	40013400 	.word	0x40013400
 8004db0:	40014000 	.word	0x40014000
 8004db4:	40014400 	.word	0x40014400
 8004db8:	40014800 	.word	0x40014800

08004dbc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b087      	sub	sp, #28
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	60f8      	str	r0, [r7, #12]
 8004dc4:	60b9      	str	r1, [r7, #8]
 8004dc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a1b      	ldr	r3, [r3, #32]
 8004dcc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	6a1b      	ldr	r3, [r3, #32]
 8004dd2:	f023 0201 	bic.w	r2, r3, #1
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004de6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	011b      	lsls	r3, r3, #4
 8004dec:	693a      	ldr	r2, [r7, #16]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f023 030a 	bic.w	r3, r3, #10
 8004df8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	621a      	str	r2, [r3, #32]
}
 8004e0e:	bf00      	nop
 8004e10:	371c      	adds	r7, #28
 8004e12:	46bd      	mov	sp, r7
 8004e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e18:	4770      	bx	lr

08004e1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e1a:	b480      	push	{r7}
 8004e1c:	b087      	sub	sp, #28
 8004e1e:	af00      	add	r7, sp, #0
 8004e20:	60f8      	str	r0, [r7, #12]
 8004e22:	60b9      	str	r1, [r7, #8]
 8004e24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6a1b      	ldr	r3, [r3, #32]
 8004e2a:	f023 0210 	bic.w	r2, r3, #16
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	699b      	ldr	r3, [r3, #24]
 8004e36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6a1b      	ldr	r3, [r3, #32]
 8004e3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004e44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	031b      	lsls	r3, r3, #12
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004e56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	011b      	lsls	r3, r3, #4
 8004e5c:	693a      	ldr	r2, [r7, #16]
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	697a      	ldr	r2, [r7, #20]
 8004e66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	621a      	str	r2, [r3, #32]
}
 8004e6e:	bf00      	nop
 8004e70:	371c      	adds	r7, #28
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004e7a:	b480      	push	{r7}
 8004e7c:	b085      	sub	sp, #20
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
 8004e82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	4313      	orrs	r3, r2
 8004e98:	f043 0307 	orr.w	r3, r3, #7
 8004e9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	68fa      	ldr	r2, [r7, #12]
 8004ea2:	609a      	str	r2, [r3, #8]
}
 8004ea4:	bf00      	nop
 8004ea6:	3714      	adds	r7, #20
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eae:	4770      	bx	lr

08004eb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b087      	sub	sp, #28
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	60f8      	str	r0, [r7, #12]
 8004eb8:	60b9      	str	r1, [r7, #8]
 8004eba:	607a      	str	r2, [r7, #4]
 8004ebc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004eca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	021a      	lsls	r2, r3, #8
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	431a      	orrs	r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	697a      	ldr	r2, [r7, #20]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	697a      	ldr	r2, [r7, #20]
 8004ee2:	609a      	str	r2, [r3, #8]
}
 8004ee4:	bf00      	nop
 8004ee6:	371c      	adds	r7, #28
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ef0:	b480      	push	{r7}
 8004ef2:	b085      	sub	sp, #20
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
 8004ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	d101      	bne.n	8004f08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004f04:	2302      	movs	r3, #2
 8004f06:	e068      	b.n	8004fda <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a2e      	ldr	r2, [pc, #184]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d004      	beq.n	8004f3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a2d      	ldr	r2, [pc, #180]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d108      	bne.n	8004f4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004f42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	685b      	ldr	r3, [r3, #4]
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	68fa      	ldr	r2, [r7, #12]
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68fa      	ldr	r2, [r7, #12]
 8004f66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a1e      	ldr	r2, [pc, #120]	; (8004fe8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d01d      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f7a:	d018      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	4a1b      	ldr	r2, [pc, #108]	; (8004ff0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d013      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4a1a      	ldr	r2, [pc, #104]	; (8004ff4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00e      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004f96:	4293      	cmp	r3, r2
 8004f98:	d009      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a13      	ldr	r2, [pc, #76]	; (8004fec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d004      	beq.n	8004fae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a14      	ldr	r2, [pc, #80]	; (8004ffc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d10c      	bne.n	8004fc8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004fae:	68bb      	ldr	r3, [r7, #8]
 8004fb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fb4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	68ba      	ldr	r2, [r7, #8]
 8004fc6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	40012c00 	.word	0x40012c00
 8004fec:	40013400 	.word	0x40013400
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40000c00 	.word	0x40000c00
 8004ffc:	40014000 	.word	0x40014000

08005000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005000:	b480      	push	{r7}
 8005002:	b083      	sub	sp, #12
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005008:	bf00      	nop
 800500a:	370c      	adds	r7, #12
 800500c:	46bd      	mov	sp, r7
 800500e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005012:	4770      	bx	lr

08005014 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005040:	f7fb f8dc 	bl	80001fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005044:	f000 f80f 	bl	8005066 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005048:	f000 f9d0 	bl	80053ec <MX_GPIO_Init>
  MX_DMA_Init();
 800504c:	f000 f99c 	bl	8005388 <MX_DMA_Init>
  MX_DAC1_Init();
 8005050:	f000 f85c 	bl	800510c <MX_DAC1_Init>
  MX_TIM2_Init();
 8005054:	f000 f94a 	bl	80052ec <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8005058:	f000 f88c 	bl	8005174 <MX_DFSDM1_Init>
  MX_OCTOSPI1_Init();
 800505c:	f000 f8f0 	bl	8005240 <MX_OCTOSPI1_Init>
  /* USER CODE BEGIN 2 */

  BSP_QSPI_Init();
 8005060:	f000 fac2 	bl	80055e8 <BSP_QSPI_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005064:	e7fe      	b.n	8005064 <main+0x28>

08005066 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005066:	b580      	push	{r7, lr}
 8005068:	b096      	sub	sp, #88	; 0x58
 800506a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800506c:	f107 0314 	add.w	r3, r7, #20
 8005070:	2244      	movs	r2, #68	; 0x44
 8005072:	2100      	movs	r1, #0
 8005074:	4618      	mov	r0, r3
 8005076:	f001 f8f1 	bl	800625c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800507a:	463b      	mov	r3, r7
 800507c:	2200      	movs	r2, #0
 800507e:	601a      	str	r2, [r3, #0]
 8005080:	605a      	str	r2, [r3, #4]
 8005082:	609a      	str	r2, [r3, #8]
 8005084:	60da      	str	r2, [r3, #12]
 8005086:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8005088:	f44f 7000 	mov.w	r0, #512	; 0x200
 800508c:	f7fd ff22 	bl	8002ed4 <HAL_PWREx_ControlVoltageScaling>
 8005090:	4603      	mov	r3, r0
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8005096:	f000 fa9b 	bl	80055d0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800509a:	2310      	movs	r3, #16
 800509c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800509e:	2301      	movs	r3, #1
 80050a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80050a2:	2300      	movs	r3, #0
 80050a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80050a6:	2360      	movs	r3, #96	; 0x60
 80050a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050aa:	2302      	movs	r3, #2
 80050ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80050ae:	2301      	movs	r3, #1
 80050b0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80050b2:	2301      	movs	r3, #1
 80050b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 80050b6:	2328      	movs	r3, #40	; 0x28
 80050b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80050ba:	2302      	movs	r3, #2
 80050bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80050be:	2302      	movs	r3, #2
 80050c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80050c2:	2302      	movs	r3, #2
 80050c4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80050c6:	f107 0314 	add.w	r3, r7, #20
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fd ffa6 	bl	800301c <HAL_RCC_OscConfig>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <SystemClock_Config+0x74>
  {
    Error_Handler();
 80050d6:	f000 fa7b 	bl	80055d0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80050da:	230f      	movs	r3, #15
 80050dc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80050de:	2303      	movs	r3, #3
 80050e0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80050e2:	2300      	movs	r3, #0
 80050e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80050e6:	2300      	movs	r3, #0
 80050e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80050ea:	2300      	movs	r3, #0
 80050ec:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80050ee:	463b      	mov	r3, r7
 80050f0:	2103      	movs	r1, #3
 80050f2:	4618      	mov	r0, r3
 80050f4:	f7fe fbac 	bl	8003850 <HAL_RCC_ClockConfig>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d001      	beq.n	8005102 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80050fe:	f000 fa67 	bl	80055d0 <Error_Handler>
  }
}
 8005102:	bf00      	nop
 8005104:	3758      	adds	r7, #88	; 0x58
 8005106:	46bd      	mov	sp, r7
 8005108:	bd80      	pop	{r7, pc}
	...

0800510c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b08a      	sub	sp, #40	; 0x28
 8005110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8005112:	463b      	mov	r3, r7
 8005114:	2228      	movs	r2, #40	; 0x28
 8005116:	2100      	movs	r1, #0
 8005118:	4618      	mov	r0, r3
 800511a:	f001 f89f 	bl	800625c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800511e:	4b13      	ldr	r3, [pc, #76]	; (800516c <MX_DAC1_Init+0x60>)
 8005120:	4a13      	ldr	r2, [pc, #76]	; (8005170 <MX_DAC1_Init+0x64>)
 8005122:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005124:	4811      	ldr	r0, [pc, #68]	; (800516c <MX_DAC1_Init+0x60>)
 8005126:	f7fb fa12 	bl	800054e <HAL_DAC_Init>
 800512a:	4603      	mov	r3, r0
 800512c:	2b00      	cmp	r3, #0
 800512e:	d001      	beq.n	8005134 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8005130:	f000 fa4e 	bl	80055d0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005134:	2300      	movs	r3, #0
 8005136:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8005138:	230a      	movs	r3, #10
 800513a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800513c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005140:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005142:	2300      	movs	r3, #0
 8005144:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005146:	2300      	movs	r3, #0
 8005148:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800514a:	2300      	movs	r3, #0
 800514c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800514e:	463b      	mov	r3, r7
 8005150:	2200      	movs	r2, #0
 8005152:	4619      	mov	r1, r3
 8005154:	4805      	ldr	r0, [pc, #20]	; (800516c <MX_DAC1_Init+0x60>)
 8005156:	f7fb fb07 	bl	8000768 <HAL_DAC_ConfigChannel>
 800515a:	4603      	mov	r3, r0
 800515c:	2b00      	cmp	r3, #0
 800515e:	d001      	beq.n	8005164 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8005160:	f000 fa36 	bl	80055d0 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8005164:	bf00      	nop
 8005166:	3728      	adds	r7, #40	; 0x28
 8005168:	46bd      	mov	sp, r7
 800516a:	bd80      	pop	{r7, pc}
 800516c:	20000050 	.word	0x20000050
 8005170:	40007400 	.word	0x40007400

08005174 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8005174:	b580      	push	{r7, lr}
 8005176:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8005178:	4b2c      	ldr	r3, [pc, #176]	; (800522c <MX_DFSDM1_Init+0xb8>)
 800517a:	4a2d      	ldr	r2, [pc, #180]	; (8005230 <MX_DFSDM1_Init+0xbc>)
 800517c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800517e:	4b2b      	ldr	r3, [pc, #172]	; (800522c <MX_DFSDM1_Init+0xb8>)
 8005180:	2200      	movs	r2, #0
 8005182:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8005184:	4b29      	ldr	r3, [pc, #164]	; (800522c <MX_DFSDM1_Init+0xb8>)
 8005186:	2201      	movs	r2, #1
 8005188:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800518a:	4b28      	ldr	r3, [pc, #160]	; (800522c <MX_DFSDM1_Init+0xb8>)
 800518c:	2201      	movs	r2, #1
 800518e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC2_ORDER;
 8005190:	4b26      	ldr	r3, [pc, #152]	; (800522c <MX_DFSDM1_Init+0xb8>)
 8005192:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005196:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 240;
 8005198:	4b24      	ldr	r3, [pc, #144]	; (800522c <MX_DFSDM1_Init+0xb8>)
 800519a:	22f0      	movs	r2, #240	; 0xf0
 800519c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800519e:	4b23      	ldr	r3, [pc, #140]	; (800522c <MX_DFSDM1_Init+0xb8>)
 80051a0:	2201      	movs	r2, #1
 80051a2:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 80051a4:	4821      	ldr	r0, [pc, #132]	; (800522c <MX_DFSDM1_Init+0xb8>)
 80051a6:	f7fb fd69 	bl	8000c7c <HAL_DFSDM_FilterInit>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 80051b0:	f000 fa0e 	bl	80055d0 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80051b4:	4b1f      	ldr	r3, [pc, #124]	; (8005234 <MX_DFSDM1_Init+0xc0>)
 80051b6:	4a20      	ldr	r2, [pc, #128]	; (8005238 <MX_DFSDM1_Init+0xc4>)
 80051b8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80051ba:	4b1e      	ldr	r3, [pc, #120]	; (8005234 <MX_DFSDM1_Init+0xc0>)
 80051bc:	2201      	movs	r2, #1
 80051be:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80051c0:	4b1c      	ldr	r3, [pc, #112]	; (8005234 <MX_DFSDM1_Init+0xc0>)
 80051c2:	2200      	movs	r2, #0
 80051c4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 80051c6:	4b1b      	ldr	r3, [pc, #108]	; (8005234 <MX_DFSDM1_Init+0xc0>)
 80051c8:	2222      	movs	r2, #34	; 0x22
 80051ca:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80051cc:	4b19      	ldr	r3, [pc, #100]	; (8005234 <MX_DFSDM1_Init+0xc0>)
 80051ce:	2200      	movs	r2, #0
 80051d0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80051d2:	4b18      	ldr	r3, [pc, #96]	; (8005234 <MX_DFSDM1_Init+0xc0>)
 80051d4:	2200      	movs	r2, #0
 80051d6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80051d8:	4b16      	ldr	r3, [pc, #88]	; (8005234 <MX_DFSDM1_Init+0xc0>)
 80051da:	2200      	movs	r2, #0
 80051dc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80051de:	4b15      	ldr	r3, [pc, #84]	; (8005234 <MX_DFSDM1_Init+0xc0>)
 80051e0:	2200      	movs	r2, #0
 80051e2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80051e4:	4b13      	ldr	r3, [pc, #76]	; (8005234 <MX_DFSDM1_Init+0xc0>)
 80051e6:	2204      	movs	r2, #4
 80051e8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80051ea:	4b12      	ldr	r3, [pc, #72]	; (8005234 <MX_DFSDM1_Init+0xc0>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80051f0:	4b10      	ldr	r3, [pc, #64]	; (8005234 <MX_DFSDM1_Init+0xc0>)
 80051f2:	2201      	movs	r2, #1
 80051f4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80051f6:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <MX_DFSDM1_Init+0xc0>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80051fc:	4b0d      	ldr	r3, [pc, #52]	; (8005234 <MX_DFSDM1_Init+0xc0>)
 80051fe:	2200      	movs	r2, #0
 8005200:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8005202:	480c      	ldr	r0, [pc, #48]	; (8005234 <MX_DFSDM1_Init+0xc0>)
 8005204:	f7fb fc7a 	bl	8000afc <HAL_DFSDM_ChannelInit>
 8005208:	4603      	mov	r3, r0
 800520a:	2b00      	cmp	r3, #0
 800520c:	d001      	beq.n	8005212 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800520e:	f000 f9df 	bl	80055d0 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8005212:	2201      	movs	r2, #1
 8005214:	4909      	ldr	r1, [pc, #36]	; (800523c <MX_DFSDM1_Init+0xc8>)
 8005216:	4805      	ldr	r0, [pc, #20]	; (800522c <MX_DFSDM1_Init+0xb8>)
 8005218:	f7fb fe0a 	bl	8000e30 <HAL_DFSDM_FilterConfigRegChannel>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d001      	beq.n	8005226 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8005222:	f000 f9d5 	bl	80055d0 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8005226:	bf00      	nop
 8005228:	bd80      	pop	{r7, pc}
 800522a:	bf00      	nop
 800522c:	200000c4 	.word	0x200000c4
 8005230:	40016100 	.word	0x40016100
 8005234:	20000118 	.word	0x20000118
 8005238:	40016040 	.word	0x40016040
 800523c:	00020004 	.word	0x00020004

08005240 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8005240:	b580      	push	{r7, lr}
 8005242:	b086      	sub	sp, #24
 8005244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8005246:	1d3b      	adds	r3, r7, #4
 8005248:	2200      	movs	r2, #0
 800524a:	601a      	str	r2, [r3, #0]
 800524c:	605a      	str	r2, [r3, #4]
 800524e:	609a      	str	r2, [r3, #8]
 8005250:	60da      	str	r2, [r3, #12]
 8005252:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8005254:	4b23      	ldr	r3, [pc, #140]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 8005256:	4a24      	ldr	r2, [pc, #144]	; (80052e8 <MX_OCTOSPI1_Init+0xa8>)
 8005258:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800525a:	4b22      	ldr	r3, [pc, #136]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 800525c:	2201      	movs	r2, #1
 800525e:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8005260:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 8005262:	2200      	movs	r2, #0
 8005264:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8005266:	4b1f      	ldr	r3, [pc, #124]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 8005268:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800526c:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800526e:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 8005270:	2220      	movs	r2, #32
 8005272:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8005274:	4b1b      	ldr	r3, [pc, #108]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 8005276:	2201      	movs	r2, #1
 8005278:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800527a:	4b1a      	ldr	r3, [pc, #104]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 800527c:	2200      	movs	r2, #0
 800527e:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8005280:	4b18      	ldr	r3, [pc, #96]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 8005282:	2200      	movs	r2, #0
 8005284:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8005286:	4b17      	ldr	r3, [pc, #92]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 8005288:	2201      	movs	r2, #1
 800528a:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800528c:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 800528e:	2200      	movs	r2, #0
 8005290:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8005292:	4b14      	ldr	r3, [pc, #80]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 8005294:	2200      	movs	r2, #0
 8005296:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8005298:	4b12      	ldr	r3, [pc, #72]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 800529a:	2200      	movs	r2, #0
 800529c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800529e:	4b11      	ldr	r3, [pc, #68]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 80052a0:	2208      	movs	r2, #8
 80052a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 80052a4:	480f      	ldr	r0, [pc, #60]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 80052a6:	f7fc fd79 	bl	8001d9c <HAL_OSPI_Init>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 80052b0:	f000 f98e 	bl	80055d0 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 80052b4:	2301      	movs	r3, #1
 80052b6:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 80052b8:	2301      	movs	r3, #1
 80052ba:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 80052bc:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80052c0:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80052c2:	1d3b      	adds	r3, r7, #4
 80052c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052c8:	4619      	mov	r1, r3
 80052ca:	4806      	ldr	r0, [pc, #24]	; (80052e4 <MX_OCTOSPI1_Init+0xa4>)
 80052cc:	f7fd f864 	bl	8002398 <HAL_OSPIM_Config>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d001      	beq.n	80052da <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80052d6:	f000 f97b 	bl	80055d0 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80052da:	bf00      	nop
 80052dc:	3718      	adds	r7, #24
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	bf00      	nop
 80052e4:	200001b0 	.word	0x200001b0
 80052e8:	a0001000 	.word	0xa0001000

080052ec <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b088      	sub	sp, #32
 80052f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052f2:	f107 0310 	add.w	r3, r7, #16
 80052f6:	2200      	movs	r2, #0
 80052f8:	601a      	str	r2, [r3, #0]
 80052fa:	605a      	str	r2, [r3, #4]
 80052fc:	609a      	str	r2, [r3, #8]
 80052fe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005300:	1d3b      	adds	r3, r7, #4
 8005302:	2200      	movs	r2, #0
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	605a      	str	r2, [r3, #4]
 8005308:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800530a:	4b1e      	ldr	r3, [pc, #120]	; (8005384 <MX_TIM2_Init+0x98>)
 800530c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005310:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8005312:	4b1c      	ldr	r3, [pc, #112]	; (8005384 <MX_TIM2_Init+0x98>)
 8005314:	2200      	movs	r2, #0
 8005316:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005318:	4b1a      	ldr	r3, [pc, #104]	; (8005384 <MX_TIM2_Init+0x98>)
 800531a:	2200      	movs	r2, #0
 800531c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 800531e:	4b19      	ldr	r3, [pc, #100]	; (8005384 <MX_TIM2_Init+0x98>)
 8005320:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8005324:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005326:	4b17      	ldr	r3, [pc, #92]	; (8005384 <MX_TIM2_Init+0x98>)
 8005328:	2200      	movs	r2, #0
 800532a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800532c:	4b15      	ldr	r3, [pc, #84]	; (8005384 <MX_TIM2_Init+0x98>)
 800532e:	2200      	movs	r2, #0
 8005330:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005332:	4814      	ldr	r0, [pc, #80]	; (8005384 <MX_TIM2_Init+0x98>)
 8005334:	f7ff fa36 	bl	80047a4 <HAL_TIM_Base_Init>
 8005338:	4603      	mov	r3, r0
 800533a:	2b00      	cmp	r3, #0
 800533c:	d001      	beq.n	8005342 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800533e:	f000 f947 	bl	80055d0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005342:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005346:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005348:	f107 0310 	add.w	r3, r7, #16
 800534c:	4619      	mov	r1, r3
 800534e:	480d      	ldr	r0, [pc, #52]	; (8005384 <MX_TIM2_Init+0x98>)
 8005350:	f7ff fb9e 	bl	8004a90 <HAL_TIM_ConfigClockSource>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800535a:	f000 f939 	bl	80055d0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800535e:	2320      	movs	r3, #32
 8005360:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005366:	1d3b      	adds	r3, r7, #4
 8005368:	4619      	mov	r1, r3
 800536a:	4806      	ldr	r0, [pc, #24]	; (8005384 <MX_TIM2_Init+0x98>)
 800536c:	f7ff fdc0 	bl	8004ef0 <HAL_TIMEx_MasterConfigSynchronization>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d001      	beq.n	800537a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005376:	f000 f92b 	bl	80055d0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800537a:	bf00      	nop
 800537c:	3720      	adds	r7, #32
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	20000200 	.word	0x20000200

08005388 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800538e:	4b16      	ldr	r3, [pc, #88]	; (80053e8 <MX_DMA_Init+0x60>)
 8005390:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005392:	4a15      	ldr	r2, [pc, #84]	; (80053e8 <MX_DMA_Init+0x60>)
 8005394:	f043 0304 	orr.w	r3, r3, #4
 8005398:	6493      	str	r3, [r2, #72]	; 0x48
 800539a:	4b13      	ldr	r3, [pc, #76]	; (80053e8 <MX_DMA_Init+0x60>)
 800539c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800539e:	f003 0304 	and.w	r3, r3, #4
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80053a6:	4b10      	ldr	r3, [pc, #64]	; (80053e8 <MX_DMA_Init+0x60>)
 80053a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053aa:	4a0f      	ldr	r2, [pc, #60]	; (80053e8 <MX_DMA_Init+0x60>)
 80053ac:	f043 0301 	orr.w	r3, r3, #1
 80053b0:	6493      	str	r3, [r2, #72]	; 0x48
 80053b2:	4b0d      	ldr	r3, [pc, #52]	; (80053e8 <MX_DMA_Init+0x60>)
 80053b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80053b6:	f003 0301 	and.w	r3, r3, #1
 80053ba:	603b      	str	r3, [r7, #0]
 80053bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80053be:	2200      	movs	r2, #0
 80053c0:	2100      	movs	r1, #0
 80053c2:	200b      	movs	r0, #11
 80053c4:	f7fb f88d 	bl	80004e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80053c8:	200b      	movs	r0, #11
 80053ca:	f7fb f8a6 	bl	800051a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80053ce:	2200      	movs	r2, #0
 80053d0:	2100      	movs	r1, #0
 80053d2:	200c      	movs	r0, #12
 80053d4:	f7fb f885 	bl	80004e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80053d8:	200c      	movs	r0, #12
 80053da:	f7fb f89e 	bl	800051a <HAL_NVIC_EnableIRQ>

}
 80053de:	bf00      	nop
 80053e0:	3708      	adds	r7, #8
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}
 80053e6:	bf00      	nop
 80053e8:	40021000 	.word	0x40021000

080053ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08a      	sub	sp, #40	; 0x28
 80053f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053f2:	f107 0314 	add.w	r3, r7, #20
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	605a      	str	r2, [r3, #4]
 80053fc:	609a      	str	r2, [r3, #8]
 80053fe:	60da      	str	r2, [r3, #12]
 8005400:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005402:	4b39      	ldr	r3, [pc, #228]	; (80054e8 <MX_GPIO_Init+0xfc>)
 8005404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005406:	4a38      	ldr	r2, [pc, #224]	; (80054e8 <MX_GPIO_Init+0xfc>)
 8005408:	f043 0310 	orr.w	r3, r3, #16
 800540c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800540e:	4b36      	ldr	r3, [pc, #216]	; (80054e8 <MX_GPIO_Init+0xfc>)
 8005410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005412:	f003 0310 	and.w	r3, r3, #16
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800541a:	4b33      	ldr	r3, [pc, #204]	; (80054e8 <MX_GPIO_Init+0xfc>)
 800541c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800541e:	4a32      	ldr	r2, [pc, #200]	; (80054e8 <MX_GPIO_Init+0xfc>)
 8005420:	f043 0304 	orr.w	r3, r3, #4
 8005424:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005426:	4b30      	ldr	r3, [pc, #192]	; (80054e8 <MX_GPIO_Init+0xfc>)
 8005428:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	60fb      	str	r3, [r7, #12]
 8005430:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005432:	4b2d      	ldr	r3, [pc, #180]	; (80054e8 <MX_GPIO_Init+0xfc>)
 8005434:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005436:	4a2c      	ldr	r2, [pc, #176]	; (80054e8 <MX_GPIO_Init+0xfc>)
 8005438:	f043 0301 	orr.w	r3, r3, #1
 800543c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800543e:	4b2a      	ldr	r3, [pc, #168]	; (80054e8 <MX_GPIO_Init+0xfc>)
 8005440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005442:	f003 0301 	and.w	r3, r3, #1
 8005446:	60bb      	str	r3, [r7, #8]
 8005448:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800544a:	4b27      	ldr	r3, [pc, #156]	; (80054e8 <MX_GPIO_Init+0xfc>)
 800544c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800544e:	4a26      	ldr	r2, [pc, #152]	; (80054e8 <MX_GPIO_Init+0xfc>)
 8005450:	f043 0302 	orr.w	r3, r3, #2
 8005454:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005456:	4b24      	ldr	r3, [pc, #144]	; (80054e8 <MX_GPIO_Init+0xfc>)
 8005458:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800545a:	f003 0302 	and.w	r3, r3, #2
 800545e:	607b      	str	r3, [r7, #4]
 8005460:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
 8005462:	2200      	movs	r2, #0
 8005464:	2108      	movs	r1, #8
 8005466:	4821      	ldr	r0, [pc, #132]	; (80054ec <MX_GPIO_Init+0x100>)
 8005468:	f7fc fc4e 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);
 800546c:	2200      	movs	r2, #0
 800546e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005472:	481f      	ldr	r0, [pc, #124]	; (80054f0 <MX_GPIO_Init+0x104>)
 8005474:	f7fc fc48 	bl	8001d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : redLED_Pin */
  GPIO_InitStruct.Pin = redLED_Pin;
 8005478:	2308      	movs	r3, #8
 800547a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800547c:	2301      	movs	r3, #1
 800547e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005480:	2300      	movs	r3, #0
 8005482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005484:	2300      	movs	r3, #0
 8005486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(redLED_GPIO_Port, &GPIO_InitStruct);
 8005488:	f107 0314 	add.w	r3, r7, #20
 800548c:	4619      	mov	r1, r3
 800548e:	4817      	ldr	r0, [pc, #92]	; (80054ec <MX_GPIO_Init+0x100>)
 8005490:	f7fc f9b6 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : pushButton_Pin */
  GPIO_InitStruct.Pin = pushButton_Pin;
 8005494:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800549a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800549e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054a0:	2300      	movs	r3, #0
 80054a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pushButton_GPIO_Port, &GPIO_InitStruct);
 80054a4:	f107 0314 	add.w	r3, r7, #20
 80054a8:	4619      	mov	r1, r3
 80054aa:	4812      	ldr	r0, [pc, #72]	; (80054f4 <MX_GPIO_Init+0x108>)
 80054ac:	f7fc f9a8 	bl	8001800 <HAL_GPIO_Init>

  /*Configure GPIO pin : greenLED_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin;
 80054b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80054b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80054b6:	2301      	movs	r3, #1
 80054b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ba:	2300      	movs	r3, #0
 80054bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80054be:	2300      	movs	r3, #0
 80054c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(greenLED_GPIO_Port, &GPIO_InitStruct);
 80054c2:	f107 0314 	add.w	r3, r7, #20
 80054c6:	4619      	mov	r1, r3
 80054c8:	4809      	ldr	r0, [pc, #36]	; (80054f0 <MX_GPIO_Init+0x104>)
 80054ca:	f7fc f999 	bl	8001800 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80054ce:	2200      	movs	r2, #0
 80054d0:	2100      	movs	r1, #0
 80054d2:	2028      	movs	r0, #40	; 0x28
 80054d4:	f7fb f805 	bl	80004e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80054d8:	2028      	movs	r0, #40	; 0x28
 80054da:	f7fb f81e 	bl	800051a <HAL_NVIC_EnableIRQ>

}
 80054de:	bf00      	nop
 80054e0:	3728      	adds	r7, #40	; 0x28
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
 80054e6:	bf00      	nop
 80054e8:	40021000 	.word	0x40021000
 80054ec:	48001000 	.word	0x48001000
 80054f0:	48000400 	.word	0x48000400
 80054f4:	48000800 	.word	0x48000800

080054f8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b082      	sub	sp, #8
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	4603      	mov	r3, r0
 8005500:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == pushButton_Pin) {
 8005502:	88fb      	ldrh	r3, [r7, #6]
 8005504:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005508:	d10a      	bne.n	8005520 <HAL_GPIO_EXTI_Callback+0x28>
		HAL_GPIO_TogglePin(greenLED_GPIO_Port, greenLED_Pin);
 800550a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800550e:	4806      	ldr	r0, [pc, #24]	; (8005528 <HAL_GPIO_EXTI_Callback+0x30>)
 8005510:	f7fc fc12 	bl	8001d38 <HAL_GPIO_TogglePin>
		HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, SEQUENCE, SEQUENCE_LENGTH);
 8005514:	f247 5230 	movw	r2, #30000	; 0x7530
 8005518:	4904      	ldr	r1, [pc, #16]	; (800552c <HAL_GPIO_EXTI_Callback+0x34>)
 800551a:	4805      	ldr	r0, [pc, #20]	; (8005530 <HAL_GPIO_EXTI_Callback+0x38>)
 800551c:	f7fb fcce 	bl	8000ebc <HAL_DFSDM_FilterRegularStart_DMA>
	}
}
 8005520:	bf00      	nop
 8005522:	3708      	adds	r7, #8
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}
 8005528:	48000400 	.word	0x48000400
 800552c:	2000024c 	.word	0x2000024c
 8005530:	200000c4 	.word	0x200000c4

08005534 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter ) {
 8005534:	b580      	push	{r7, lr}
 8005536:	b086      	sub	sp, #24
 8005538:	af02      	add	r7, sp, #8
 800553a:	6078      	str	r0, [r7, #4]

	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 800553c:	4821      	ldr	r0, [pc, #132]	; (80055c4 <HAL_DFSDM_FilterRegConvCpltCallback+0x90>)
 800553e:	f7fb fd3f 	bl	8000fc0 <HAL_DFSDM_FilterRegularStop_DMA>

	for(uint32_t i = 0 ; i < SEQUENCE_LENGTH; i++ ){
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	e02b      	b.n	80055a0 <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>
		SEQUENCE[i] = SEQUENCE[i] >> 8; // 24 bit signed  :  −8,388,608 : 8,388,607
 8005548:	4a1f      	ldr	r2, [pc, #124]	; (80055c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005550:	121a      	asrs	r2, r3, #8
 8005552:	491d      	ldr	r1, [pc, #116]	; (80055c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(SEQUENCE[i] < 0 ) {
 800555a:	4a1b      	ldr	r2, [pc, #108]	; (80055c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005562:	2b00      	cmp	r3, #0
 8005564:	da09      	bge.n	800557a <HAL_DFSDM_FilterRegConvCpltCallback+0x46>
			SEQUENCE[i]= SEQUENCE[i]+ (1<<24);
 8005566:	4a18      	ldr	r2, [pc, #96]	; (80055c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800556e:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 8005572:	4915      	ldr	r1, [pc, #84]	; (80055c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if( SEQUENCE[i] >= 4096) {
 800557a:	4a13      	ldr	r2, [pc, #76]	; (80055c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005582:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005586:	db08      	blt.n	800559a <HAL_DFSDM_FilterRegConvCpltCallback+0x66>
			SEQUENCE[i] = SEQUENCE[i] >> 12;
 8005588:	4a0f      	ldr	r2, [pc, #60]	; (80055c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005590:	131a      	asrs	r2, r3, #12
 8005592:	490d      	ldr	r1, [pc, #52]	; (80055c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint32_t i = 0 ; i < SEQUENCE_LENGTH; i++ ){
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	3301      	adds	r3, #1
 800559e:	60fb      	str	r3, [r7, #12]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f247 522f 	movw	r2, #29999	; 0x752f
 80055a6:	4293      	cmp	r3, r2
 80055a8:	d9ce      	bls.n	8005548 <HAL_DFSDM_FilterRegConvCpltCallback+0x14>
//	if(BSP_QSPI_Write((uint8_t *) SEQUENCE, (uint32_t)  0x000000, sizeof(SEQUENCE)) != QSPI_OK)
//				Error_Handler();

//	if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  0x000000, sizeof(SEQUENCE)) != QSPI_OK)
//					Error_Handler();
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 80055aa:	2300      	movs	r3, #0
 80055ac:	9300      	str	r3, [sp, #0]
 80055ae:	f247 5330 	movw	r3, #30000	; 0x7530
 80055b2:	4a05      	ldr	r2, [pc, #20]	; (80055c8 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>)
 80055b4:	2100      	movs	r1, #0
 80055b6:	4805      	ldr	r0, [pc, #20]	; (80055cc <HAL_DFSDM_FilterRegConvCpltCallback+0x98>)
 80055b8:	f7fa ffec 	bl	8000594 <HAL_DAC_Start_DMA>

}
 80055bc:	bf00      	nop
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	200000c4 	.word	0x200000c4
 80055c8:	2000024c 	.word	0x2000024c
 80055cc:	20000050 	.word	0x20000050

080055d0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
 80055d4:	2200      	movs	r2, #0
 80055d6:	2108      	movs	r1, #8
 80055d8:	4802      	ldr	r0, [pc, #8]	; (80055e4 <Error_Handler+0x14>)
 80055da:	f7fc fb95 	bl	8001d08 <HAL_GPIO_WritePin>
	__BKPT();
 80055de:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 80055e0:	bf00      	nop
 80055e2:	bd80      	pop	{r7, pc}
 80055e4:	48001000 	.word	0x48001000

080055e8 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 80055ee:	4b3b      	ldr	r3, [pc, #236]	; (80056dc <BSP_QSPI_Init+0xf4>)
 80055f0:	4a3b      	ldr	r2, [pc, #236]	; (80056e0 <BSP_QSPI_Init+0xf8>)
 80055f2:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 80055f4:	4839      	ldr	r0, [pc, #228]	; (80056dc <BSP_QSPI_Init+0xf4>)
 80055f6:	f7fc fc7b 	bl	8001ef0 <HAL_OSPI_DeInit>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d001      	beq.n	8005604 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e067      	b.n	80056d4 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8005604:	f000 f86e 	bl	80056e4 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8005608:	4b34      	ldr	r3, [pc, #208]	; (80056dc <BSP_QSPI_Init+0xf4>)
 800560a:	2204      	movs	r2, #4
 800560c:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 800560e:	4b33      	ldr	r3, [pc, #204]	; (80056dc <BSP_QSPI_Init+0xf4>)
 8005610:	2200      	movs	r2, #0
 8005612:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8005614:	4b31      	ldr	r3, [pc, #196]	; (80056dc <BSP_QSPI_Init+0xf4>)
 8005616:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800561a:	60da      	str	r2, [r3, #12]
 800561c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8005620:	60bb      	str	r3, [r7, #8]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	fa93 f3a3 	rbit	r3, r3
 8005628:	607b      	str	r3, [r7, #4]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	60fb      	str	r3, [r7, #12]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <BSP_QSPI_Init+0x50>
  {
    return 32U;
 8005634:	2320      	movs	r3, #32
 8005636:	e003      	b.n	8005640 <BSP_QSPI_Init+0x58>
  }
  return __builtin_clz(value);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	fab3 f383 	clz	r3, r3
 800563e:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8005640:	461a      	mov	r2, r3
 8005642:	4b26      	ldr	r3, [pc, #152]	; (80056dc <BSP_QSPI_Init+0xf4>)
 8005644:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8005646:	4b25      	ldr	r3, [pc, #148]	; (80056dc <BSP_QSPI_Init+0xf4>)
 8005648:	2201      	movs	r2, #1
 800564a:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 800564c:	4b23      	ldr	r3, [pc, #140]	; (80056dc <BSP_QSPI_Init+0xf4>)
 800564e:	2200      	movs	r2, #0
 8005650:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 8005652:	4b22      	ldr	r3, [pc, #136]	; (80056dc <BSP_QSPI_Init+0xf4>)
 8005654:	2200      	movs	r2, #0
 8005656:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8005658:	4b20      	ldr	r3, [pc, #128]	; (80056dc <BSP_QSPI_Init+0xf4>)
 800565a:	2204      	movs	r2, #4
 800565c:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800565e:	4b1f      	ldr	r3, [pc, #124]	; (80056dc <BSP_QSPI_Init+0xf4>)
 8005660:	2200      	movs	r2, #0
 8005662:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8005664:	4b1d      	ldr	r3, [pc, #116]	; (80056dc <BSP_QSPI_Init+0xf4>)
 8005666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800566a:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 800566c:	4b1b      	ldr	r3, [pc, #108]	; (80056dc <BSP_QSPI_Init+0xf4>)
 800566e:	2200      	movs	r2, #0
 8005670:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 8005672:	4b1a      	ldr	r3, [pc, #104]	; (80056dc <BSP_QSPI_Init+0xf4>)
 8005674:	2200      	movs	r2, #0
 8005676:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8005678:	4818      	ldr	r0, [pc, #96]	; (80056dc <BSP_QSPI_Init+0xf4>)
 800567a:	f7fc fb8f 	bl	8001d9c <HAL_OSPI_Init>
 800567e:	4603      	mov	r3, r0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d001      	beq.n	8005688 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e025      	b.n	80056d4 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8005688:	4814      	ldr	r0, [pc, #80]	; (80056dc <BSP_QSPI_Init+0xf4>)
 800568a:	f000 f86b 	bl	8005764 <QSPI_ResetMemory>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8005694:	2304      	movs	r3, #4
 8005696:	e01d      	b.n	80056d4 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8005698:	2101      	movs	r1, #1
 800569a:	4810      	ldr	r0, [pc, #64]	; (80056dc <BSP_QSPI_Init+0xf4>)
 800569c:	f000 f950 	bl	8005940 <QSPI_QuadMode>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d001      	beq.n	80056aa <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e014      	b.n	80056d4 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80056aa:	2101      	movs	r1, #1
 80056ac:	480b      	ldr	r0, [pc, #44]	; (80056dc <BSP_QSPI_Init+0xf4>)
 80056ae:	f000 f9f3 	bl	8005a98 <QSPI_HighPerfMode>
 80056b2:	4603      	mov	r3, r0
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d001      	beq.n	80056bc <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 80056b8:	2301      	movs	r3, #1
 80056ba:	e00b      	b.n	80056d4 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 80056bc:	4b07      	ldr	r3, [pc, #28]	; (80056dc <BSP_QSPI_Init+0xf4>)
 80056be:	2202      	movs	r2, #2
 80056c0:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80056c2:	4806      	ldr	r0, [pc, #24]	; (80056dc <BSP_QSPI_Init+0xf4>)
 80056c4:	f7fc fb6a 	bl	8001d9c <HAL_OSPI_Init>
 80056c8:	4603      	mov	r3, r0
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d001      	beq.n	80056d2 <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 80056ce:	2301      	movs	r3, #1
 80056d0:	e000      	b.n	80056d4 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 80056d2:	2300      	movs	r3, #0
}
 80056d4:	4618      	mov	r0, r3
 80056d6:	3710      	adds	r7, #16
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	2001d70c 	.word	0x2001d70c
 80056e0:	a0001000 	.word	0xa0001000

080056e4 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b088      	sub	sp, #32
 80056e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 80056ea:	4b1c      	ldr	r3, [pc, #112]	; (800575c <BSP_QSPI_MspInit+0x78>)
 80056ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ee:	4a1b      	ldr	r2, [pc, #108]	; (800575c <BSP_QSPI_MspInit+0x78>)
 80056f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056f4:	6513      	str	r3, [r2, #80]	; 0x50
 80056f6:	4b19      	ldr	r3, [pc, #100]	; (800575c <BSP_QSPI_MspInit+0x78>)
 80056f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8005702:	4b16      	ldr	r3, [pc, #88]	; (800575c <BSP_QSPI_MspInit+0x78>)
 8005704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005706:	4a15      	ldr	r2, [pc, #84]	; (800575c <BSP_QSPI_MspInit+0x78>)
 8005708:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800570c:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 800570e:	4b13      	ldr	r3, [pc, #76]	; (800575c <BSP_QSPI_MspInit+0x78>)
 8005710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005712:	4a12      	ldr	r2, [pc, #72]	; (800575c <BSP_QSPI_MspInit+0x78>)
 8005714:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005718:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800571a:	4b10      	ldr	r3, [pc, #64]	; (800575c <BSP_QSPI_MspInit+0x78>)
 800571c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800571e:	4a0f      	ldr	r2, [pc, #60]	; (800575c <BSP_QSPI_MspInit+0x78>)
 8005720:	f043 0310 	orr.w	r3, r3, #16
 8005724:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005726:	4b0d      	ldr	r3, [pc, #52]	; (800575c <BSP_QSPI_MspInit+0x78>)
 8005728:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572a:	f003 0310 	and.w	r3, r3, #16
 800572e:	607b      	str	r3, [r7, #4]
 8005730:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8005732:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8005736:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8005738:	2302      	movs	r3, #2
 800573a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800573c:	2300      	movs	r3, #0
 800573e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005740:	2303      	movs	r3, #3
 8005742:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8005744:	230a      	movs	r3, #10
 8005746:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005748:	f107 030c 	add.w	r3, r7, #12
 800574c:	4619      	mov	r1, r3
 800574e:	4804      	ldr	r0, [pc, #16]	; (8005760 <BSP_QSPI_MspInit+0x7c>)
 8005750:	f7fc f856 	bl	8001800 <HAL_GPIO_Init>
}
 8005754:	bf00      	nop
 8005756:	3720      	adds	r7, #32
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	40021000 	.word	0x40021000
 8005760:	48001000 	.word	0x48001000

08005764 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b096      	sub	sp, #88	; 0x58
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800576c:	2300      	movs	r3, #0
 800576e:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005770:	2300      	movs	r3, #0
 8005772:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8005774:	2366      	movs	r3, #102	; 0x66
 8005776:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005778:	2301      	movs	r3, #1
 800577a:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800577c:	2300      	movs	r3, #0
 800577e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005780:	2300      	movs	r3, #0
 8005782:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005784:	2300      	movs	r3, #0
 8005786:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005788:	2300      	movs	r3, #0
 800578a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800578c:	2300      	movs	r3, #0
 800578e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8005790:	2300      	movs	r3, #0
 8005792:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005794:	2300      	movs	r3, #0
 8005796:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005798:	2300      	movs	r3, #0
 800579a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800579c:	f107 0308 	add.w	r3, r7, #8
 80057a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80057a4:	4619      	mov	r1, r3
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fc fbc9 	bl	8001f3e <HAL_OSPI_Command>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 80057b2:	2301      	movs	r3, #1
 80057b4:	e019      	b.n	80057ea <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80057b6:	2399      	movs	r3, #153	; 0x99
 80057b8:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80057ba:	f107 0308 	add.w	r3, r7, #8
 80057be:	f241 3288 	movw	r2, #5000	; 0x1388
 80057c2:	4619      	mov	r1, r3
 80057c4:	6878      	ldr	r0, [r7, #4]
 80057c6:	f7fc fbba 	bl	8001f3e <HAL_OSPI_Command>
 80057ca:	4603      	mov	r3, r0
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d001      	beq.n	80057d4 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	e00a      	b.n	80057ea <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80057d4:	f241 3188 	movw	r1, #5000	; 0x1388
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	f000 f866 	bl	80058aa <QSPI_AutoPollingMemReady>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d001      	beq.n	80057e8 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e000      	b.n	80057ea <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3758      	adds	r7, #88	; 0x58
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b09c      	sub	sp, #112	; 0x70
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80057fa:	2300      	movs	r3, #0
 80057fc:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80057fe:	2300      	movs	r3, #0
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8005802:	2306      	movs	r3, #6
 8005804:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005806:	2301      	movs	r3, #1
 8005808:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800580a:	2300      	movs	r3, #0
 800580c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800580e:	2300      	movs	r3, #0
 8005810:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005812:	2300      	movs	r3, #0
 8005814:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005816:	2300      	movs	r3, #0
 8005818:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800581a:	2300      	movs	r3, #0
 800581c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 800581e:	2300      	movs	r3, #0
 8005820:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005822:	2300      	movs	r3, #0
 8005824:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005826:	2300      	movs	r3, #0
 8005828:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800582a:	f107 0320 	add.w	r3, r7, #32
 800582e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005832:	4619      	mov	r1, r3
 8005834:	6878      	ldr	r0, [r7, #4]
 8005836:	f7fc fb82 	bl	8001f3e <HAL_OSPI_Command>
 800583a:	4603      	mov	r3, r0
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8005840:	2301      	movs	r3, #1
 8005842:	e02e      	b.n	80058a2 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8005844:	2302      	movs	r3, #2
 8005846:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8005848:	2302      	movs	r3, #2
 800584a:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800584c:	2300      	movs	r3, #0
 800584e:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8005850:	2310      	movs	r3, #16
 8005852:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8005854:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005858:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800585a:	2305      	movs	r3, #5
 800585c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 800585e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005862:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8005864:	2301      	movs	r3, #1
 8005866:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8005868:	2300      	movs	r3, #0
 800586a:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800586c:	f107 0320 	add.w	r3, r7, #32
 8005870:	f241 3288 	movw	r2, #5000	; 0x1388
 8005874:	4619      	mov	r1, r3
 8005876:	6878      	ldr	r0, [r7, #4]
 8005878:	f7fc fb61 	bl	8001f3e <HAL_OSPI_Command>
 800587c:	4603      	mov	r3, r0
 800587e:	2b00      	cmp	r3, #0
 8005880:	d001      	beq.n	8005886 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 8005882:	2301      	movs	r3, #1
 8005884:	e00d      	b.n	80058a2 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005886:	f107 030c 	add.w	r3, r7, #12
 800588a:	f241 3288 	movw	r2, #5000	; 0x1388
 800588e:	4619      	mov	r1, r3
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f7fc fceb 	bl	800226c <HAL_OSPI_AutoPolling>
 8005896:	4603      	mov	r3, r0
 8005898:	2b00      	cmp	r3, #0
 800589a:	d001      	beq.n	80058a0 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 800589c:	2301      	movs	r3, #1
 800589e:	e000      	b.n	80058a2 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 80058a0:	2300      	movs	r3, #0
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3770      	adds	r7, #112	; 0x70
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd80      	pop	{r7, pc}

080058aa <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80058aa:	b580      	push	{r7, lr}
 80058ac:	b09c      	sub	sp, #112	; 0x70
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	6078      	str	r0, [r7, #4]
 80058b2:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80058b4:	2300      	movs	r3, #0
 80058b6:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80058b8:	2300      	movs	r3, #0
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80058bc:	2305      	movs	r3, #5
 80058be:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80058c0:	2301      	movs	r3, #1
 80058c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80058c4:	2300      	movs	r3, #0
 80058c6:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80058c8:	2300      	movs	r3, #0
 80058ca:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80058cc:	2300      	movs	r3, #0
 80058ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80058d0:	2300      	movs	r3, #0
 80058d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80058d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058d8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 80058da:	2301      	movs	r3, #1
 80058dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80058de:	2300      	movs	r3, #0
 80058e0:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 80058e2:	2300      	movs	r3, #0
 80058e4:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80058e6:	2300      	movs	r3, #0
 80058e8:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80058ea:	2300      	movs	r3, #0
 80058ec:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 80058ee:	2300      	movs	r3, #0
 80058f0:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 80058f2:	2301      	movs	r3, #1
 80058f4:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80058f6:	2300      	movs	r3, #0
 80058f8:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 80058fa:	2310      	movs	r3, #16
 80058fc:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80058fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005902:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005904:	f107 0320 	add.w	r3, r7, #32
 8005908:	f241 3288 	movw	r2, #5000	; 0x1388
 800590c:	4619      	mov	r1, r3
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7fc fb15 	bl	8001f3e <HAL_OSPI_Command>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d001      	beq.n	800591e <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e00c      	b.n	8005938 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 800591e:	f107 030c 	add.w	r3, r7, #12
 8005922:	683a      	ldr	r2, [r7, #0]
 8005924:	4619      	mov	r1, r3
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f7fc fca0 	bl	800226c <HAL_OSPI_AutoPolling>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8005932:	2301      	movs	r3, #1
 8005934:	e000      	b.n	8005938 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8005936:	2300      	movs	r3, #0
}
 8005938:	4618      	mov	r0, r3
 800593a:	3770      	adds	r7, #112	; 0x70
 800593c:	46bd      	mov	sp, r7
 800593e:	bd80      	pop	{r7, pc}

08005940 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8005940:	b580      	push	{r7, lr}
 8005942:	b098      	sub	sp, #96	; 0x60
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	460b      	mov	r3, r1
 800594a:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800594c:	2300      	movs	r3, #0
 800594e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005950:	2300      	movs	r3, #0
 8005952:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8005954:	2305      	movs	r3, #5
 8005956:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005958:	2301      	movs	r3, #1
 800595a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800595c:	2300      	movs	r3, #0
 800595e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005960:	2300      	movs	r3, #0
 8005962:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005964:	2300      	movs	r3, #0
 8005966:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005968:	2300      	movs	r3, #0
 800596a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800596c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005970:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8005972:	2300      	movs	r3, #0
 8005974:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8005976:	2300      	movs	r3, #0
 8005978:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800597a:	2301      	movs	r3, #1
 800597c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800597e:	2300      	movs	r3, #0
 8005980:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005982:	2300      	movs	r3, #0
 8005984:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005986:	f107 0310 	add.w	r3, r7, #16
 800598a:	f241 3288 	movw	r2, #5000	; 0x1388
 800598e:	4619      	mov	r1, r3
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f7fc fad4 	bl	8001f3e <HAL_OSPI_Command>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e077      	b.n	8005a90 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80059a0:	f107 030f 	add.w	r3, r7, #15
 80059a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80059a8:	4619      	mov	r1, r3
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f7fc fbbb 	bl	8002126 <HAL_OSPI_Receive>
 80059b0:	4603      	mov	r3, r0
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d001      	beq.n	80059ba <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 80059b6:	2301      	movs	r3, #1
 80059b8:	e06a      	b.n	8005a90 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 80059ba:	6878      	ldr	r0, [r7, #4]
 80059bc:	f7ff ff19 	bl	80057f2 <QSPI_WriteEnable>
 80059c0:	4603      	mov	r3, r0
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d001      	beq.n	80059ca <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 80059c6:	2301      	movs	r3, #1
 80059c8:	e062      	b.n	8005a90 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 80059ca:	78fb      	ldrb	r3, [r7, #3]
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d105      	bne.n	80059dc <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 80059d0:	7bfb      	ldrb	r3, [r7, #15]
 80059d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80059d6:	b2db      	uxtb	r3, r3
 80059d8:	73fb      	strb	r3, [r7, #15]
 80059da:	e004      	b.n	80059e6 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 80059dc:	7bfb      	ldrb	r3, [r7, #15]
 80059de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80059e6:	2301      	movs	r3, #1
 80059e8:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80059ea:	f107 0310 	add.w	r3, r7, #16
 80059ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80059f2:	4619      	mov	r1, r3
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7fc faa2 	bl	8001f3e <HAL_OSPI_Command>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d001      	beq.n	8005a04 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8005a00:	2301      	movs	r3, #1
 8005a02:	e045      	b.n	8005a90 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a04:	f107 030f 	add.w	r3, r7, #15
 8005a08:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a0c:	4619      	mov	r1, r3
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fc fb16 	bl	8002040 <HAL_OSPI_Transmit>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e038      	b.n	8005a90 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8005a1e:	f241 3188 	movw	r1, #5000	; 0x1388
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff ff41 	bl	80058aa <QSPI_AutoPollingMemReady>
 8005a28:	4603      	mov	r3, r0
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d001      	beq.n	8005a32 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e02e      	b.n	8005a90 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8005a32:	2305      	movs	r3, #5
 8005a34:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a36:	f107 0310 	add.w	r3, r7, #16
 8005a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f7fc fa7c 	bl	8001f3e <HAL_OSPI_Command>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d001      	beq.n	8005a50 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	e01f      	b.n	8005a90 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005a50:	f107 030f 	add.w	r3, r7, #15
 8005a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a58:	4619      	mov	r1, r3
 8005a5a:	6878      	ldr	r0, [r7, #4]
 8005a5c:	f7fc fb63 	bl	8002126 <HAL_OSPI_Receive>
 8005a60:	4603      	mov	r3, r0
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8005a66:	2301      	movs	r3, #1
 8005a68:	e012      	b.n	8005a90 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8005a6a:	7bfb      	ldrb	r3, [r7, #15]
 8005a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d102      	bne.n	8005a7a <QSPI_QuadMode+0x13a>
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d007      	beq.n	8005a8a <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8005a7a:	7bfb      	ldrb	r3, [r7, #15]
 8005a7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d004      	beq.n	8005a8e <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3760      	adds	r7, #96	; 0x60
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b098      	sub	sp, #96	; 0x60
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	460b      	mov	r3, r1
 8005aa2:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8005aac:	2305      	movs	r3, #5
 8005aae:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8005ab8:	2300      	movs	r3, #0
 8005aba:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8005abc:	2300      	movs	r3, #0
 8005abe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8005ac4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005ac8:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8005aca:	2300      	movs	r3, #0
 8005acc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8005ada:	2300      	movs	r3, #0
 8005adc:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ade:	f107 0310 	add.w	r3, r7, #16
 8005ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ae6:	4619      	mov	r1, r3
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7fc fa28 	bl	8001f3e <HAL_OSPI_Command>
 8005aee:	4603      	mov	r3, r0
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d001      	beq.n	8005af8 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e09a      	b.n	8005c2e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005af8:	f107 030c 	add.w	r3, r7, #12
 8005afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b00:	4619      	mov	r1, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f7fc fb0f 	bl	8002126 <HAL_OSPI_Receive>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e08d      	b.n	8005c2e <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8005b12:	2315      	movs	r3, #21
 8005b14:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8005b16:	2302      	movs	r3, #2
 8005b18:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b1a:	f107 0310 	add.w	r3, r7, #16
 8005b1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b22:	4619      	mov	r1, r3
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f7fc fa0a 	bl	8001f3e <HAL_OSPI_Command>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e07c      	b.n	8005c2e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b34:	f107 030c 	add.w	r3, r7, #12
 8005b38:	3301      	adds	r3, #1
 8005b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6878      	ldr	r0, [r7, #4]
 8005b42:	f7fc faf0 	bl	8002126 <HAL_OSPI_Receive>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e06e      	b.n	8005c2e <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f7ff fe4e 	bl	80057f2 <QSPI_WriteEnable>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d001      	beq.n	8005b60 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8005b5c:	2301      	movs	r3, #1
 8005b5e:	e066      	b.n	8005c2e <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8005b60:	78fb      	ldrb	r3, [r7, #3]
 8005b62:	2b01      	cmp	r3, #1
 8005b64:	d105      	bne.n	8005b72 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8005b66:	7bbb      	ldrb	r3, [r7, #14]
 8005b68:	f043 0302 	orr.w	r3, r3, #2
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	73bb      	strb	r3, [r7, #14]
 8005b70:	e004      	b.n	8005b7c <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8005b72:	7bbb      	ldrb	r3, [r7, #14]
 8005b74:	f023 0302 	bic.w	r3, r3, #2
 8005b78:	b2db      	uxtb	r3, r3
 8005b7a:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8005b80:	2303      	movs	r3, #3
 8005b82:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b84:	f107 0310 	add.w	r3, r7, #16
 8005b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fc f9d5 	bl	8001f3e <HAL_OSPI_Command>
 8005b94:	4603      	mov	r3, r0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d001      	beq.n	8005b9e <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8005b9a:	2301      	movs	r3, #1
 8005b9c:	e047      	b.n	8005c2e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005b9e:	f107 030c 	add.w	r3, r7, #12
 8005ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ba6:	4619      	mov	r1, r3
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7fc fa49 	bl	8002040 <HAL_OSPI_Transmit>
 8005bae:	4603      	mov	r3, r0
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d001      	beq.n	8005bb8 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	e03a      	b.n	8005c2e <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8005bb8:	f241 3188 	movw	r1, #5000	; 0x1388
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7ff fe74 	bl	80058aa <QSPI_AutoPollingMemReady>
 8005bc2:	4603      	mov	r3, r0
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d001      	beq.n	8005bcc <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e030      	b.n	8005c2e <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8005bcc:	2315      	movs	r3, #21
 8005bce:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8005bd0:	2302      	movs	r3, #2
 8005bd2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bd4:	f107 0310 	add.w	r3, r7, #16
 8005bd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7fc f9ad 	bl	8001f3e <HAL_OSPI_Command>
 8005be4:	4603      	mov	r3, r0
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d001      	beq.n	8005bee <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	e01f      	b.n	8005c2e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005bee:	f107 030c 	add.w	r3, r7, #12
 8005bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7fc fa94 	bl	8002126 <HAL_OSPI_Receive>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d001      	beq.n	8005c08 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e012      	b.n	8005c2e <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8005c08:	7b7b      	ldrb	r3, [r7, #13]
 8005c0a:	f003 0302 	and.w	r3, r3, #2
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d102      	bne.n	8005c18 <QSPI_HighPerfMode+0x180>
 8005c12:	78fb      	ldrb	r3, [r7, #3]
 8005c14:	2b01      	cmp	r3, #1
 8005c16:	d007      	beq.n	8005c28 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8005c18:	7b7b      	ldrb	r3, [r7, #13]
 8005c1a:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d004      	beq.n	8005c2c <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8005c22:	78fb      	ldrb	r3, [r7, #3]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d101      	bne.n	8005c2c <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8005c28:	2301      	movs	r3, #1
 8005c2a:	e000      	b.n	8005c2e <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3760      	adds	r7, #96	; 0x60
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}
	...

08005c38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b083      	sub	sp, #12
 8005c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c3e:	4b0f      	ldr	r3, [pc, #60]	; (8005c7c <HAL_MspInit+0x44>)
 8005c40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c42:	4a0e      	ldr	r2, [pc, #56]	; (8005c7c <HAL_MspInit+0x44>)
 8005c44:	f043 0301 	orr.w	r3, r3, #1
 8005c48:	6613      	str	r3, [r2, #96]	; 0x60
 8005c4a:	4b0c      	ldr	r3, [pc, #48]	; (8005c7c <HAL_MspInit+0x44>)
 8005c4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	607b      	str	r3, [r7, #4]
 8005c54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c56:	4b09      	ldr	r3, [pc, #36]	; (8005c7c <HAL_MspInit+0x44>)
 8005c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5a:	4a08      	ldr	r2, [pc, #32]	; (8005c7c <HAL_MspInit+0x44>)
 8005c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c60:	6593      	str	r3, [r2, #88]	; 0x58
 8005c62:	4b06      	ldr	r3, [pc, #24]	; (8005c7c <HAL_MspInit+0x44>)
 8005c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c6e:	bf00      	nop
 8005c70:	370c      	adds	r7, #12
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	40021000 	.word	0x40021000

08005c80 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b08a      	sub	sp, #40	; 0x28
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c88:	f107 0314 	add.w	r3, r7, #20
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	605a      	str	r2, [r3, #4]
 8005c92:	609a      	str	r2, [r3, #8]
 8005c94:	60da      	str	r2, [r3, #12]
 8005c96:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4a2b      	ldr	r2, [pc, #172]	; (8005d4c <HAL_DAC_MspInit+0xcc>)
 8005c9e:	4293      	cmp	r3, r2
 8005ca0:	d14f      	bne.n	8005d42 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8005ca2:	4b2b      	ldr	r3, [pc, #172]	; (8005d50 <HAL_DAC_MspInit+0xd0>)
 8005ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca6:	4a2a      	ldr	r2, [pc, #168]	; (8005d50 <HAL_DAC_MspInit+0xd0>)
 8005ca8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005cac:	6593      	str	r3, [r2, #88]	; 0x58
 8005cae:	4b28      	ldr	r3, [pc, #160]	; (8005d50 <HAL_DAC_MspInit+0xd0>)
 8005cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005cb6:	613b      	str	r3, [r7, #16]
 8005cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cba:	4b25      	ldr	r3, [pc, #148]	; (8005d50 <HAL_DAC_MspInit+0xd0>)
 8005cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cbe:	4a24      	ldr	r2, [pc, #144]	; (8005d50 <HAL_DAC_MspInit+0xd0>)
 8005cc0:	f043 0301 	orr.w	r3, r3, #1
 8005cc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005cc6:	4b22      	ldr	r3, [pc, #136]	; (8005d50 <HAL_DAC_MspInit+0xd0>)
 8005cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cca:	f003 0301 	and.w	r3, r3, #1
 8005cce:	60fb      	str	r3, [r7, #12]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8005cd2:	2310      	movs	r3, #16
 8005cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cda:	2300      	movs	r3, #0
 8005cdc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cde:	f107 0314 	add.w	r3, r7, #20
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005ce8:	f7fb fd8a 	bl	8001800 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8005cec:	4b19      	ldr	r3, [pc, #100]	; (8005d54 <HAL_DAC_MspInit+0xd4>)
 8005cee:	4a1a      	ldr	r2, [pc, #104]	; (8005d58 <HAL_DAC_MspInit+0xd8>)
 8005cf0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8005cf2:	4b18      	ldr	r3, [pc, #96]	; (8005d54 <HAL_DAC_MspInit+0xd4>)
 8005cf4:	2206      	movs	r2, #6
 8005cf6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005cf8:	4b16      	ldr	r3, [pc, #88]	; (8005d54 <HAL_DAC_MspInit+0xd4>)
 8005cfa:	2210      	movs	r2, #16
 8005cfc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cfe:	4b15      	ldr	r3, [pc, #84]	; (8005d54 <HAL_DAC_MspInit+0xd4>)
 8005d00:	2200      	movs	r2, #0
 8005d02:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8005d04:	4b13      	ldr	r3, [pc, #76]	; (8005d54 <HAL_DAC_MspInit+0xd4>)
 8005d06:	2280      	movs	r2, #128	; 0x80
 8005d08:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005d0a:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <HAL_DAC_MspInit+0xd4>)
 8005d0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d10:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005d12:	4b10      	ldr	r3, [pc, #64]	; (8005d54 <HAL_DAC_MspInit+0xd4>)
 8005d14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005d18:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8005d1a:	4b0e      	ldr	r3, [pc, #56]	; (8005d54 <HAL_DAC_MspInit+0xd4>)
 8005d1c:	2220      	movs	r2, #32
 8005d1e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8005d20:	4b0c      	ldr	r3, [pc, #48]	; (8005d54 <HAL_DAC_MspInit+0xd4>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8005d26:	480b      	ldr	r0, [pc, #44]	; (8005d54 <HAL_DAC_MspInit+0xd4>)
 8005d28:	f7fb fa9c 	bl	8001264 <HAL_DMA_Init>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8005d32:	f7ff fc4d 	bl	80055d0 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a06      	ldr	r2, [pc, #24]	; (8005d54 <HAL_DAC_MspInit+0xd4>)
 8005d3a:	609a      	str	r2, [r3, #8]
 8005d3c:	4a05      	ldr	r2, [pc, #20]	; (8005d54 <HAL_DAC_MspInit+0xd4>)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005d42:	bf00      	nop
 8005d44:	3728      	adds	r7, #40	; 0x28
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}
 8005d4a:	bf00      	nop
 8005d4c:	40007400 	.word	0x40007400
 8005d50:	40021000 	.word	0x40021000
 8005d54:	20000064 	.word	0x20000064
 8005d58:	40020008 	.word	0x40020008

08005d5c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b0ae      	sub	sp, #184	; 0xb8
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	605a      	str	r2, [r3, #4]
 8005d6e:	609a      	str	r2, [r3, #8]
 8005d70:	60da      	str	r2, [r3, #12]
 8005d72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005d74:	f107 0310 	add.w	r3, r7, #16
 8005d78:	2294      	movs	r2, #148	; 0x94
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 fa6d 	bl	800625c <memset>
  if(DFSDM1_Init == 0)
 8005d82:	4b45      	ldr	r3, [pc, #276]	; (8005e98 <HAL_DFSDM_FilterMspInit+0x13c>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d14b      	bne.n	8005e22 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8005d8a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8005d90:	2300      	movs	r3, #0
 8005d92:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005d96:	f107 0310 	add.w	r3, r7, #16
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7fd ffea 	bl	8003d74 <HAL_RCCEx_PeriphCLKConfig>
 8005da0:	4603      	mov	r3, r0
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d001      	beq.n	8005daa <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8005da6:	f7ff fc13 	bl	80055d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8005daa:	4b3c      	ldr	r3, [pc, #240]	; (8005e9c <HAL_DFSDM_FilterMspInit+0x140>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3301      	adds	r3, #1
 8005db0:	4a3a      	ldr	r2, [pc, #232]	; (8005e9c <HAL_DFSDM_FilterMspInit+0x140>)
 8005db2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8005db4:	4b39      	ldr	r3, [pc, #228]	; (8005e9c <HAL_DFSDM_FilterMspInit+0x140>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b01      	cmp	r3, #1
 8005dba:	d10b      	bne.n	8005dd4 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8005dbc:	4b38      	ldr	r3, [pc, #224]	; (8005ea0 <HAL_DFSDM_FilterMspInit+0x144>)
 8005dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dc0:	4a37      	ldr	r2, [pc, #220]	; (8005ea0 <HAL_DFSDM_FilterMspInit+0x144>)
 8005dc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005dc6:	6613      	str	r3, [r2, #96]	; 0x60
 8005dc8:	4b35      	ldr	r3, [pc, #212]	; (8005ea0 <HAL_DFSDM_FilterMspInit+0x144>)
 8005dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005dcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005dd4:	4b32      	ldr	r3, [pc, #200]	; (8005ea0 <HAL_DFSDM_FilterMspInit+0x144>)
 8005dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd8:	4a31      	ldr	r2, [pc, #196]	; (8005ea0 <HAL_DFSDM_FilterMspInit+0x144>)
 8005dda:	f043 0310 	orr.w	r3, r3, #16
 8005dde:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005de0:	4b2f      	ldr	r3, [pc, #188]	; (8005ea0 <HAL_DFSDM_FilterMspInit+0x144>)
 8005de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005de4:	f003 0310 	and.w	r3, r3, #16
 8005de8:	60bb      	str	r3, [r7, #8]
 8005dea:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8005dec:	f44f 7320 	mov.w	r3, #640	; 0x280
 8005df0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005df4:	2302      	movs	r3, #2
 8005df6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dfa:	2300      	movs	r3, #0
 8005dfc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005e00:	2300      	movs	r3, #0
 8005e02:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8005e06:	2306      	movs	r3, #6
 8005e08:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005e0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005e10:	4619      	mov	r1, r3
 8005e12:	4824      	ldr	r0, [pc, #144]	; (8005ea4 <HAL_DFSDM_FilterMspInit+0x148>)
 8005e14:	f7fb fcf4 	bl	8001800 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8005e18:	4b1f      	ldr	r3, [pc, #124]	; (8005e98 <HAL_DFSDM_FilterMspInit+0x13c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	4a1e      	ldr	r2, [pc, #120]	; (8005e98 <HAL_DFSDM_FilterMspInit+0x13c>)
 8005e20:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4a20      	ldr	r2, [pc, #128]	; (8005ea8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8005e28:	4293      	cmp	r3, r2
 8005e2a:	d130      	bne.n	8005e8e <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 8005e2c:	4b1f      	ldr	r3, [pc, #124]	; (8005eac <HAL_DFSDM_FilterMspInit+0x150>)
 8005e2e:	4a20      	ldr	r2, [pc, #128]	; (8005eb0 <HAL_DFSDM_FilterMspInit+0x154>)
 8005e30:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8005e32:	4b1e      	ldr	r3, [pc, #120]	; (8005eac <HAL_DFSDM_FilterMspInit+0x150>)
 8005e34:	2256      	movs	r2, #86	; 0x56
 8005e36:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e38:	4b1c      	ldr	r3, [pc, #112]	; (8005eac <HAL_DFSDM_FilterMspInit+0x150>)
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e3e:	4b1b      	ldr	r3, [pc, #108]	; (8005eac <HAL_DFSDM_FilterMspInit+0x150>)
 8005e40:	2200      	movs	r2, #0
 8005e42:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8005e44:	4b19      	ldr	r3, [pc, #100]	; (8005eac <HAL_DFSDM_FilterMspInit+0x150>)
 8005e46:	2280      	movs	r2, #128	; 0x80
 8005e48:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e4a:	4b18      	ldr	r3, [pc, #96]	; (8005eac <HAL_DFSDM_FilterMspInit+0x150>)
 8005e4c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e50:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005e52:	4b16      	ldr	r3, [pc, #88]	; (8005eac <HAL_DFSDM_FilterMspInit+0x150>)
 8005e54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e58:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8005e5a:	4b14      	ldr	r3, [pc, #80]	; (8005eac <HAL_DFSDM_FilterMspInit+0x150>)
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8005e60:	4b12      	ldr	r3, [pc, #72]	; (8005eac <HAL_DFSDM_FilterMspInit+0x150>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8005e66:	4811      	ldr	r0, [pc, #68]	; (8005eac <HAL_DFSDM_FilterMspInit+0x150>)
 8005e68:	f7fb f9fc 	bl	8001264 <HAL_DMA_Init>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d001      	beq.n	8005e76 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8005e72:	f7ff fbad 	bl	80055d0 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	4a0c      	ldr	r2, [pc, #48]	; (8005eac <HAL_DFSDM_FilterMspInit+0x150>)
 8005e7a:	62da      	str	r2, [r3, #44]	; 0x2c
 8005e7c:	4a0b      	ldr	r2, [pc, #44]	; (8005eac <HAL_DFSDM_FilterMspInit+0x150>)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a09      	ldr	r2, [pc, #36]	; (8005eac <HAL_DFSDM_FilterMspInit+0x150>)
 8005e86:	629a      	str	r2, [r3, #40]	; 0x28
 8005e88:	4a08      	ldr	r2, [pc, #32]	; (8005eac <HAL_DFSDM_FilterMspInit+0x150>)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8005e8e:	bf00      	nop
 8005e90:	37b8      	adds	r7, #184	; 0xb8
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	2001d760 	.word	0x2001d760
 8005e9c:	2001d75c 	.word	0x2001d75c
 8005ea0:	40021000 	.word	0x40021000
 8005ea4:	48001000 	.word	0x48001000
 8005ea8:	40016100 	.word	0x40016100
 8005eac:	20000150 	.word	0x20000150
 8005eb0:	4002001c 	.word	0x4002001c

08005eb4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b0ae      	sub	sp, #184	; 0xb8
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ebc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	605a      	str	r2, [r3, #4]
 8005ec6:	609a      	str	r2, [r3, #8]
 8005ec8:	60da      	str	r2, [r3, #12]
 8005eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005ecc:	f107 0310 	add.w	r3, r7, #16
 8005ed0:	2294      	movs	r2, #148	; 0x94
 8005ed2:	2100      	movs	r1, #0
 8005ed4:	4618      	mov	r0, r3
 8005ed6:	f000 f9c1 	bl	800625c <memset>
  if(DFSDM1_Init == 0)
 8005eda:	4b2a      	ldr	r3, [pc, #168]	; (8005f84 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d14b      	bne.n	8005f7a <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8005ee2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005ee6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005eee:	f107 0310 	add.w	r3, r7, #16
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f7fd ff3e 	bl	8003d74 <HAL_RCCEx_PeriphCLKConfig>
 8005ef8:	4603      	mov	r3, r0
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d001      	beq.n	8005f02 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8005efe:	f7ff fb67 	bl	80055d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8005f02:	4b21      	ldr	r3, [pc, #132]	; (8005f88 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	3301      	adds	r3, #1
 8005f08:	4a1f      	ldr	r2, [pc, #124]	; (8005f88 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8005f0a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8005f0c:	4b1e      	ldr	r3, [pc, #120]	; (8005f88 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d10b      	bne.n	8005f2c <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8005f14:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8005f16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f18:	4a1c      	ldr	r2, [pc, #112]	; (8005f8c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8005f1a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005f1e:	6613      	str	r3, [r2, #96]	; 0x60
 8005f20:	4b1a      	ldr	r3, [pc, #104]	; (8005f8c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8005f22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8005f2c:	4b17      	ldr	r3, [pc, #92]	; (8005f8c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8005f2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f30:	4a16      	ldr	r2, [pc, #88]	; (8005f8c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8005f32:	f043 0310 	orr.w	r3, r3, #16
 8005f36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f38:	4b14      	ldr	r3, [pc, #80]	; (8005f8c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8005f3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	60bb      	str	r3, [r7, #8]
 8005f42:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8005f44:	f44f 7320 	mov.w	r3, #640	; 0x280
 8005f48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f4c:	2302      	movs	r3, #2
 8005f4e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f52:	2300      	movs	r3, #0
 8005f54:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8005f5e:	2306      	movs	r3, #6
 8005f60:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005f64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4809      	ldr	r0, [pc, #36]	; (8005f90 <HAL_DFSDM_ChannelMspInit+0xdc>)
 8005f6c:	f7fb fc48 	bl	8001800 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8005f70:	4b04      	ldr	r3, [pc, #16]	; (8005f84 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	3301      	adds	r3, #1
 8005f76:	4a03      	ldr	r2, [pc, #12]	; (8005f84 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8005f78:	6013      	str	r3, [r2, #0]
  }

}
 8005f7a:	bf00      	nop
 8005f7c:	37b8      	adds	r7, #184	; 0xb8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	2001d760 	.word	0x2001d760
 8005f88:	2001d75c 	.word	0x2001d75c
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	48001000 	.word	0x48001000

08005f94 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b0b0      	sub	sp, #192	; 0xc0
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005f9c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]
 8005fa4:	605a      	str	r2, [r3, #4]
 8005fa6:	609a      	str	r2, [r3, #8]
 8005fa8:	60da      	str	r2, [r3, #12]
 8005faa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005fac:	f107 0318 	add.w	r3, r7, #24
 8005fb0:	2294      	movs	r2, #148	; 0x94
 8005fb2:	2100      	movs	r1, #0
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	f000 f951 	bl	800625c <memset>
  if(hospi->Instance==OCTOSPI1)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	4a28      	ldr	r2, [pc, #160]	; (8006060 <HAL_OSPI_MspInit+0xcc>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d149      	bne.n	8006058 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8005fc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005fc8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005fd0:	f107 0318 	add.w	r3, r7, #24
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fd fecd 	bl	8003d74 <HAL_RCCEx_PeriphCLKConfig>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d001      	beq.n	8005fe4 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8005fe0:	f7ff faf6 	bl	80055d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8005fe4:	4b1f      	ldr	r3, [pc, #124]	; (8006064 <HAL_OSPI_MspInit+0xd0>)
 8005fe6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005fe8:	4a1e      	ldr	r2, [pc, #120]	; (8006064 <HAL_OSPI_MspInit+0xd0>)
 8005fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005ff0:	4b1c      	ldr	r3, [pc, #112]	; (8006064 <HAL_OSPI_MspInit+0xd0>)
 8005ff2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ff4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005ff8:	617b      	str	r3, [r7, #20]
 8005ffa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8005ffc:	4b19      	ldr	r3, [pc, #100]	; (8006064 <HAL_OSPI_MspInit+0xd0>)
 8005ffe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006000:	4a18      	ldr	r2, [pc, #96]	; (8006064 <HAL_OSPI_MspInit+0xd0>)
 8006002:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006006:	6513      	str	r3, [r2, #80]	; 0x50
 8006008:	4b16      	ldr	r3, [pc, #88]	; (8006064 <HAL_OSPI_MspInit+0xd0>)
 800600a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800600c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006010:	613b      	str	r3, [r7, #16]
 8006012:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8006014:	4b13      	ldr	r3, [pc, #76]	; (8006064 <HAL_OSPI_MspInit+0xd0>)
 8006016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006018:	4a12      	ldr	r2, [pc, #72]	; (8006064 <HAL_OSPI_MspInit+0xd0>)
 800601a:	f043 0310 	orr.w	r3, r3, #16
 800601e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006020:	4b10      	ldr	r3, [pc, #64]	; (8006064 <HAL_OSPI_MspInit+0xd0>)
 8006022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006024:	f003 0310 	and.w	r3, r3, #16
 8006028:	60fb      	str	r3, [r7, #12]
 800602a:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800602c:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8006030:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006034:	2302      	movs	r3, #2
 8006036:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800603a:	2300      	movs	r3, #0
 800603c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006040:	2303      	movs	r3, #3
 8006042:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8006046:	230a      	movs	r3, #10
 8006048:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800604c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8006050:	4619      	mov	r1, r3
 8006052:	4805      	ldr	r0, [pc, #20]	; (8006068 <HAL_OSPI_MspInit+0xd4>)
 8006054:	f7fb fbd4 	bl	8001800 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8006058:	bf00      	nop
 800605a:	37c0      	adds	r7, #192	; 0xc0
 800605c:	46bd      	mov	sp, r7
 800605e:	bd80      	pop	{r7, pc}
 8006060:	a0001000 	.word	0xa0001000
 8006064:	40021000 	.word	0x40021000
 8006068:	48001000 	.word	0x48001000

0800606c <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b082      	sub	sp, #8
 8006070:	af00      	add	r7, sp, #0
 8006072:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a0b      	ldr	r2, [pc, #44]	; (80060a8 <HAL_OSPI_MspDeInit+0x3c>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d110      	bne.n	80060a0 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 800607e:	4b0b      	ldr	r3, [pc, #44]	; (80060ac <HAL_OSPI_MspDeInit+0x40>)
 8006080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006082:	4a0a      	ldr	r2, [pc, #40]	; (80060ac <HAL_OSPI_MspDeInit+0x40>)
 8006084:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006088:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800608a:	4b08      	ldr	r3, [pc, #32]	; (80060ac <HAL_OSPI_MspDeInit+0x40>)
 800608c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800608e:	4a07      	ldr	r2, [pc, #28]	; (80060ac <HAL_OSPI_MspDeInit+0x40>)
 8006090:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006094:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8006096:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800609a:	4805      	ldr	r0, [pc, #20]	; (80060b0 <HAL_OSPI_MspDeInit+0x44>)
 800609c:	f7fb fd42 	bl	8001b24 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 80060a0:	bf00      	nop
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}
 80060a8:	a0001000 	.word	0xa0001000
 80060ac:	40021000 	.word	0x40021000
 80060b0:	48001000 	.word	0x48001000

080060b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c4:	d113      	bne.n	80060ee <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80060c6:	4b0c      	ldr	r3, [pc, #48]	; (80060f8 <HAL_TIM_Base_MspInit+0x44>)
 80060c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ca:	4a0b      	ldr	r2, [pc, #44]	; (80060f8 <HAL_TIM_Base_MspInit+0x44>)
 80060cc:	f043 0301 	orr.w	r3, r3, #1
 80060d0:	6593      	str	r3, [r2, #88]	; 0x58
 80060d2:	4b09      	ldr	r3, [pc, #36]	; (80060f8 <HAL_TIM_Base_MspInit+0x44>)
 80060d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060d6:	f003 0301 	and.w	r3, r3, #1
 80060da:	60fb      	str	r3, [r7, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80060de:	2200      	movs	r2, #0
 80060e0:	2100      	movs	r1, #0
 80060e2:	201c      	movs	r0, #28
 80060e4:	f7fa f9fd 	bl	80004e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80060e8:	201c      	movs	r0, #28
 80060ea:	f7fa fa16 	bl	800051a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80060ee:	bf00      	nop
 80060f0:	3710      	adds	r7, #16
 80060f2:	46bd      	mov	sp, r7
 80060f4:	bd80      	pop	{r7, pc}
 80060f6:	bf00      	nop
 80060f8:	40021000 	.word	0x40021000

080060fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80060fc:	b480      	push	{r7}
 80060fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006100:	e7fe      	b.n	8006100 <NMI_Handler+0x4>

08006102 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006102:	b480      	push	{r7}
 8006104:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006106:	e7fe      	b.n	8006106 <HardFault_Handler+0x4>

08006108 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800610c:	e7fe      	b.n	800610c <MemManage_Handler+0x4>

0800610e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800610e:	b480      	push	{r7}
 8006110:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006112:	e7fe      	b.n	8006112 <BusFault_Handler+0x4>

08006114 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006114:	b480      	push	{r7}
 8006116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006118:	e7fe      	b.n	8006118 <UsageFault_Handler+0x4>

0800611a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800611a:	b480      	push	{r7}
 800611c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800611e:	bf00      	nop
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006128:	b480      	push	{r7}
 800612a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800612c:	bf00      	nop
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr

08006136 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006136:	b480      	push	{r7}
 8006138:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800613a:	bf00      	nop
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006144:	b580      	push	{r7, lr}
 8006146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006148:	f7fa f8ac 	bl	80002a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800614c:	bf00      	nop
 800614e:	bd80      	pop	{r7, pc}

08006150 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006150:	b580      	push	{r7, lr}
 8006152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8006154:	4802      	ldr	r0, [pc, #8]	; (8006160 <DMA1_Channel1_IRQHandler+0x10>)
 8006156:	f7fb fa04 	bl	8001562 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800615a:	bf00      	nop
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	20000064 	.word	0x20000064

08006164 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8006168:	4802      	ldr	r0, [pc, #8]	; (8006174 <DMA1_Channel2_IRQHandler+0x10>)
 800616a:	f7fb f9fa 	bl	8001562 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800616e:	bf00      	nop
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	20000150 	.word	0x20000150

08006178 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800617c:	4802      	ldr	r0, [pc, #8]	; (8006188 <TIM2_IRQHandler+0x10>)
 800617e:	f7fe fb68 	bl	8004852 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006182:	bf00      	nop
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	20000200 	.word	0x20000200

0800618c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pushButton_Pin);
 8006190:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8006194:	f7fb fdea 	bl	8001d6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006198:	bf00      	nop
 800619a:	bd80      	pop	{r7, pc}

0800619c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800619c:	b480      	push	{r7}
 800619e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80061a0:	4b06      	ldr	r3, [pc, #24]	; (80061bc <SystemInit+0x20>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a6:	4a05      	ldr	r2, [pc, #20]	; (80061bc <SystemInit+0x20>)
 80061a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80061ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80061b0:	bf00      	nop
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	e000ed00 	.word	0xe000ed00

080061c0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80061c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80061f8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80061c4:	f7ff ffea 	bl	800619c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80061c8:	480c      	ldr	r0, [pc, #48]	; (80061fc <LoopForever+0x6>)
  ldr r1, =_edata
 80061ca:	490d      	ldr	r1, [pc, #52]	; (8006200 <LoopForever+0xa>)
  ldr r2, =_sidata
 80061cc:	4a0d      	ldr	r2, [pc, #52]	; (8006204 <LoopForever+0xe>)
  movs r3, #0
 80061ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80061d0:	e002      	b.n	80061d8 <LoopCopyDataInit>

080061d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80061d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80061d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80061d6:	3304      	adds	r3, #4

080061d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80061d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80061da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80061dc:	d3f9      	bcc.n	80061d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80061de:	4a0a      	ldr	r2, [pc, #40]	; (8006208 <LoopForever+0x12>)
  ldr r4, =_ebss
 80061e0:	4c0a      	ldr	r4, [pc, #40]	; (800620c <LoopForever+0x16>)
  movs r3, #0
 80061e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80061e4:	e001      	b.n	80061ea <LoopFillZerobss>

080061e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80061e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80061e8:	3204      	adds	r2, #4

080061ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80061ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80061ec:	d3fb      	bcc.n	80061e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80061ee:	f000 f811 	bl	8006214 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80061f2:	f7fe ff23 	bl	800503c <main>

080061f6 <LoopForever>:

LoopForever:
    b LoopForever
 80061f6:	e7fe      	b.n	80061f6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80061f8:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80061fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006200:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8006204:	080062cc 	.word	0x080062cc
  ldr r2, =_sbss
 8006208:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800620c:	2001d764 	.word	0x2001d764

08006210 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006210:	e7fe      	b.n	8006210 <ADC1_IRQHandler>
	...

08006214 <__libc_init_array>:
 8006214:	b570      	push	{r4, r5, r6, lr}
 8006216:	4d0d      	ldr	r5, [pc, #52]	; (800624c <__libc_init_array+0x38>)
 8006218:	4c0d      	ldr	r4, [pc, #52]	; (8006250 <__libc_init_array+0x3c>)
 800621a:	1b64      	subs	r4, r4, r5
 800621c:	10a4      	asrs	r4, r4, #2
 800621e:	2600      	movs	r6, #0
 8006220:	42a6      	cmp	r6, r4
 8006222:	d109      	bne.n	8006238 <__libc_init_array+0x24>
 8006224:	4d0b      	ldr	r5, [pc, #44]	; (8006254 <__libc_init_array+0x40>)
 8006226:	4c0c      	ldr	r4, [pc, #48]	; (8006258 <__libc_init_array+0x44>)
 8006228:	f000 f820 	bl	800626c <_init>
 800622c:	1b64      	subs	r4, r4, r5
 800622e:	10a4      	asrs	r4, r4, #2
 8006230:	2600      	movs	r6, #0
 8006232:	42a6      	cmp	r6, r4
 8006234:	d105      	bne.n	8006242 <__libc_init_array+0x2e>
 8006236:	bd70      	pop	{r4, r5, r6, pc}
 8006238:	f855 3b04 	ldr.w	r3, [r5], #4
 800623c:	4798      	blx	r3
 800623e:	3601      	adds	r6, #1
 8006240:	e7ee      	b.n	8006220 <__libc_init_array+0xc>
 8006242:	f855 3b04 	ldr.w	r3, [r5], #4
 8006246:	4798      	blx	r3
 8006248:	3601      	adds	r6, #1
 800624a:	e7f2      	b.n	8006232 <__libc_init_array+0x1e>
 800624c:	080062c4 	.word	0x080062c4
 8006250:	080062c4 	.word	0x080062c4
 8006254:	080062c4 	.word	0x080062c4
 8006258:	080062c8 	.word	0x080062c8

0800625c <memset>:
 800625c:	4402      	add	r2, r0
 800625e:	4603      	mov	r3, r0
 8006260:	4293      	cmp	r3, r2
 8006262:	d100      	bne.n	8006266 <memset+0xa>
 8006264:	4770      	bx	lr
 8006266:	f803 1b01 	strb.w	r1, [r3], #1
 800626a:	e7f9      	b.n	8006260 <memset+0x4>

0800626c <_init>:
 800626c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800626e:	bf00      	nop
 8006270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006272:	bc08      	pop	{r3}
 8006274:	469e      	mov	lr, r3
 8006276:	4770      	bx	lr

08006278 <_fini>:
 8006278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800627a:	bf00      	nop
 800627c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800627e:	bc08      	pop	{r3}
 8006280:	469e      	mov	lr, r3
 8006282:	4770      	bx	lr
