
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fd0  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08009190  08009190  00019190  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009234  08009234  000204f8  2**0
                  CONTENTS
  4 .ARM          00000008  08009234  08009234  00019234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800923c  0800923c  000204f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800923c  0800923c  0001923c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009240  08009240  00019240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f8  20000000  08009244  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004e63c  200004f8  0800973c  000204f8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2004eb34  0800973c  0002eb34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204f8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bba1  00000000  00000000  00020528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000301c  00000000  00000000  0003c0c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0003f0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  00040738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cda1  00000000  00000000  00041c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000199fc  00000000  00000000  0006ea01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011570b  00000000  00000000  000883fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019db08  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000637c  00000000  00000000  0019db58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200004f8 	.word	0x200004f8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08009178 	.word	0x08009178

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200004fc 	.word	0x200004fc
 80001fc:	08009178 	.word	0x08009178

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005be:	2003      	movs	r0, #3
 80005c0:	f000 f960 	bl	8000884 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 f80d 	bl	80005e4 <HAL_InitTick>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	e001      	b.n	80005da <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005d6:	f007 fd65 	bl	80080a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005da:	79fb      	ldrb	r3, [r7, #7]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <HAL_InitTick+0x6c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d023      	beq.n	8000640 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <HAL_InitTick+0x70>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <HAL_InitTick+0x6c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	fbb3 f3f1 	udiv	r3, r3, r1
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f96d 	bl	80008ee <HAL_SYSTICK_Config>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d10f      	bne.n	800063a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b0f      	cmp	r3, #15
 800061e:	d809      	bhi.n	8000634 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000620:	2200      	movs	r2, #0
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	f04f 30ff 	mov.w	r0, #4294967295
 8000628:	f000 f937 	bl	800089a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800062c:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <HAL_InitTick+0x74>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	e007      	b.n	8000644 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	e004      	b.n	8000644 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e001      	b.n	8000644 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000644:	7bfb      	ldrb	r3, [r7, #15]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000004 	.word	0x20000004
 8000654:	20000490 	.word	0x20000490
 8000658:	20000000 	.word	0x20000000

0800065c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_IncTick+0x20>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_IncTick+0x24>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4413      	add	r3, r2
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_IncTick+0x24>)
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000004 	.word	0x20000004
 8000680:	20000514 	.word	0x20000514

08000684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <HAL_GetTick+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	20000514 	.word	0x20000514

0800069c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006a4:	f7ff ffee 	bl	8000684 <HAL_GetTick>
 80006a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b4:	d005      	beq.n	80006c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_Delay+0x44>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006c2:	bf00      	nop
 80006c4:	f7ff ffde 	bl	8000684 <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d8f7      	bhi.n	80006c4 <HAL_Delay+0x28>
  {
  }
}
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000004 	.word	0x20000004

080006e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800070c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000716:	4a04      	ldr	r2, [pc, #16]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	60d3      	str	r3, [r2, #12]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <__NVIC_GetPriorityGrouping+0x18>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	f003 0307 	and.w	r3, r3, #7
}
 800073a:	4618      	mov	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	db0b      	blt.n	8000772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f003 021f 	and.w	r2, r3, #31
 8000760:	4907      	ldr	r1, [pc, #28]	; (8000780 <__NVIC_EnableIRQ+0x38>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	095b      	lsrs	r3, r3, #5
 8000768:	2001      	movs	r0, #1
 800076a:	fa00 f202 	lsl.w	r2, r0, r2
 800076e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000e100 	.word	0xe000e100

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db0a      	blt.n	80007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <__NVIC_SetPriority+0x4c>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ac:	e00a      	b.n	80007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <__NVIC_SetPriority+0x50>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	3b04      	subs	r3, #4
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	440b      	add	r3, r1
 80007c2:	761a      	strb	r2, [r3, #24]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f1c3 0307 	rsb	r3, r3, #7
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	bf28      	it	cs
 80007f6:	2304      	movcs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d902      	bls.n	8000808 <NVIC_EncodePriority+0x30>
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3b03      	subs	r3, #3
 8000806:	e000      	b.n	800080a <NVIC_EncodePriority+0x32>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43d9      	mvns	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4313      	orrs	r3, r2
         );
}
 8000832:	4618      	mov	r0, r3
 8000834:	3724      	adds	r7, #36	; 0x24
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000850:	d301      	bcc.n	8000856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000852:	2301      	movs	r3, #1
 8000854:	e00f      	b.n	8000876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <SysTick_Config+0x40>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085e:	210f      	movs	r1, #15
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f7ff ff8e 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <SysTick_Config+0x40>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <SysTick_Config+0x40>)
 8000870:	2207      	movs	r2, #7
 8000872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	e000e010 	.word	0xe000e010

08000884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff29 	bl	80006e4 <__NVIC_SetPriorityGrouping>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008ac:	f7ff ff3e 	bl	800072c <__NVIC_GetPriorityGrouping>
 80008b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	6978      	ldr	r0, [r7, #20]
 80008b8:	f7ff ff8e 	bl	80007d8 <NVIC_EncodePriority>
 80008bc:	4602      	mov	r2, r0
 80008be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff5d 	bl	8000784 <__NVIC_SetPriority>
}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff31 	bl	8000748 <__NVIC_EnableIRQ>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ffa2 	bl	8000840 <SysTick_Config>
 80008fc:	4603      	mov	r3, r0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	e014      	b.n	8000942 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d105      	bne.n	800092e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f007 fbdf 	bl	80080ec <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2202      	movs	r2, #2
 8000932:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2201      	movs	r2, #1
 800093e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	795b      	ldrb	r3, [r3, #5]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d101      	bne.n	800096a <HAL_DAC_Start_DMA+0x1e>
 8000966:	2302      	movs	r3, #2
 8000968:	e0ab      	b.n	8000ac2 <HAL_DAC_Start_DMA+0x176>
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2201      	movs	r2, #1
 800096e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2202      	movs	r2, #2
 8000974:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d12f      	bne.n	80009dc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	4a52      	ldr	r2, [pc, #328]	; (8000acc <HAL_DAC_Start_DMA+0x180>)
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	4a51      	ldr	r2, [pc, #324]	; (8000ad0 <HAL_DAC_Start_DMA+0x184>)
 800098a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	4a50      	ldr	r2, [pc, #320]	; (8000ad4 <HAL_DAC_Start_DMA+0x188>)
 8000992:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80009a2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80009a4:	6a3b      	ldr	r3, [r7, #32]
 80009a6:	2b08      	cmp	r3, #8
 80009a8:	d013      	beq.n	80009d2 <HAL_DAC_Start_DMA+0x86>
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	2b08      	cmp	r3, #8
 80009ae:	d845      	bhi.n	8000a3c <HAL_DAC_Start_DMA+0xf0>
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d003      	beq.n	80009be <HAL_DAC_Start_DMA+0x72>
 80009b6:	6a3b      	ldr	r3, [r7, #32]
 80009b8:	2b04      	cmp	r3, #4
 80009ba:	d005      	beq.n	80009c8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80009bc:	e03e      	b.n	8000a3c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	3308      	adds	r3, #8
 80009c4:	613b      	str	r3, [r7, #16]
        break;
 80009c6:	e03c      	b.n	8000a42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	330c      	adds	r3, #12
 80009ce:	613b      	str	r3, [r7, #16]
        break;
 80009d0:	e037      	b.n	8000a42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3310      	adds	r3, #16
 80009d8:	613b      	str	r3, [r7, #16]
        break;
 80009da:	e032      	b.n	8000a42 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	4a3d      	ldr	r2, [pc, #244]	; (8000ad8 <HAL_DAC_Start_DMA+0x18c>)
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	4a3c      	ldr	r2, [pc, #240]	; (8000adc <HAL_DAC_Start_DMA+0x190>)
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	4a3b      	ldr	r2, [pc, #236]	; (8000ae0 <HAL_DAC_Start_DMA+0x194>)
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a02:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	2b08      	cmp	r3, #8
 8000a08:	d013      	beq.n	8000a32 <HAL_DAC_Start_DMA+0xe6>
 8000a0a:	6a3b      	ldr	r3, [r7, #32]
 8000a0c:	2b08      	cmp	r3, #8
 8000a0e:	d817      	bhi.n	8000a40 <HAL_DAC_Start_DMA+0xf4>
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d003      	beq.n	8000a1e <HAL_DAC_Start_DMA+0xd2>
 8000a16:	6a3b      	ldr	r3, [r7, #32]
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	d005      	beq.n	8000a28 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000a1c:	e010      	b.n	8000a40 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3314      	adds	r3, #20
 8000a24:	613b      	str	r3, [r7, #16]
        break;
 8000a26:	e00c      	b.n	8000a42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3318      	adds	r3, #24
 8000a2e:	613b      	str	r3, [r7, #16]
        break;
 8000a30:	e007      	b.n	8000a42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	331c      	adds	r3, #28
 8000a38:	613b      	str	r3, [r7, #16]
        break;
 8000a3a:	e002      	b.n	8000a42 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000a3c:	bf00      	nop
 8000a3e:	e000      	b.n	8000a42 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000a40:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d111      	bne.n	8000a6c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a56:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	6898      	ldr	r0, [r3, #8]
 8000a5c:	6879      	ldr	r1, [r7, #4]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	f000 febf 	bl	80017e4 <HAL_DMA_Start_IT>
 8000a66:	4603      	mov	r3, r0
 8000a68:	75fb      	strb	r3, [r7, #23]
 8000a6a:	e010      	b.n	8000a8e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a7a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	68d8      	ldr	r0, [r3, #12]
 8000a80:	6879      	ldr	r1, [r7, #4]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	f000 fead 	bl	80017e4 <HAL_DMA_Start_IT>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2200      	movs	r2, #0
 8000a92:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000a94:	7dfb      	ldrb	r3, [r7, #23]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10c      	bne.n	8000ab4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	6819      	ldr	r1, [r3, #0]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	409a      	lsls	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e005      	b.n	8000ac0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	f043 0204 	orr.w	r2, r3, #4
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	08000e19 	.word	0x08000e19
 8000ad0:	08000e3b 	.word	0x08000e3b
 8000ad4:	08000e57 	.word	0x08000e57
 8000ad8:	08000ec1 	.word	0x08000ec1
 8000adc:	08000ee3 	.word	0x08000ee3
 8000ae0:	08000eff 	.word	0x08000eff

08000ae4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6819      	ldr	r1, [r3, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f003 0310 	and.w	r3, r3, #16
 8000afa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	400a      	ands	r2, r1
 8000b0a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6819      	ldr	r1, [r3, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	f003 0310 	and.w	r3, r3, #16
 8000b18:	2201      	movs	r2, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	400a      	ands	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10d      	bne.n	8000b4a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fed1 	bl	80018da <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e00c      	b.n	8000b64 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fec3 	bl	80018da <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000b62:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	795b      	ldrb	r3, [r3, #5]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d101      	bne.n	8000bb4 <HAL_DAC_ConfigChannel+0x1c>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e12a      	b.n	8000e0a <HAL_DAC_ConfigChannel+0x272>
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d174      	bne.n	8000cb2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000bc8:	f7ff fd5c 	bl	8000684 <HAL_GetTick>
 8000bcc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d134      	bne.n	8000c3e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000bd4:	e011      	b.n	8000bfa <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000bd6:	f7ff fd55 	bl	8000684 <HAL_GetTick>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d90a      	bls.n	8000bfa <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	f043 0208 	orr.w	r2, r3, #8
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e107      	b.n	8000e0a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1e6      	bne.n	8000bd6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff fd47 	bl	800069c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	69d2      	ldr	r2, [r2, #28]
 8000c16:	641a      	str	r2, [r3, #64]	; 0x40
 8000c18:	e01e      	b.n	8000c58 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000c1a:	f7ff fd33 	bl	8000684 <HAL_GetTick>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d90a      	bls.n	8000c3e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	f043 0208 	orr.w	r2, r3, #8
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2203      	movs	r2, #3
 8000c38:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e0e5      	b.n	8000e0a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	dbe8      	blt.n	8000c1a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff fd27 	bl	800069c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	69d2      	ldr	r2, [r2, #28]
 8000c56:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	ea02 0103 	and.w	r1, r2, r3
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	6a1a      	ldr	r2, [r3, #32]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0310 	and.w	r3, r3, #16
 8000c92:	21ff      	movs	r1, #255	; 0xff
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	ea02 0103 	and.w	r1, r2, r3
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d11d      	bne.n	8000cf6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc0:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	221f      	movs	r2, #31
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	69fa      	ldr	r2, [r7, #28]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69fa      	ldr	r2, [r7, #28]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	69fa      	ldr	r2, [r7, #28]
 8000cf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cfc:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f003 0310 	and.w	r3, r3, #16
 8000d04:	2207      	movs	r2, #7
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69fa      	ldr	r2, [r7, #28]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	69fa      	ldr	r2, [r7, #28]
 8000d3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6819      	ldr	r1, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	400a      	ands	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69fa      	ldr	r2, [r7, #28]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69fa      	ldr	r2, [r7, #28]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d9a:	d104      	bne.n	8000da6 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	e018      	b.n	8000dd8 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d104      	bne.n	8000db8 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	e00f      	b.n	8000dd8 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000db8:	f003 f988 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 8000dbc:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <HAL_DAC_ConfigChannel+0x27c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d904      	bls.n	8000dd0 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	e003      	b.n	8000dd8 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dd6:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	69fa      	ldr	r2, [r7, #28]
 8000dde:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6819      	ldr	r1, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	22c0      	movs	r2, #192	; 0xc0
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	400a      	ands	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2200      	movs	r2, #0
 8000e06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	04c4b400 	.word	0x04c4b400

08000e18 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f006 fc16 	bl	8007658 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	711a      	strb	r2, [r3, #4]
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f7ff fe90 	bl	8000b6e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e62:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	f043 0204 	orr.w	r2, r3, #4
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f7ff fe86 	bl	8000b82 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	711a      	strb	r2, [r3, #4]
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f7ff ffd8 	bl	8000e84 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	711a      	strb	r2, [r3, #4]
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f7ff ffd1 	bl	8000e98 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	f043 0204 	orr.w	r2, r3, #4
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f7ff ffc7 	bl	8000eac <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2201      	movs	r2, #1
 8000f22:	711a      	strb	r2, [r3, #4]
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0ac      	b.n	8001098 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 fab6 	bl	80014b4 <DFSDM_GetChannelFromInstance>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a55      	ldr	r2, [pc, #340]	; (80010a0 <HAL_DFSDM_ChannelInit+0x174>)
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e09f      	b.n	8001098 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f007 f9e1 	bl	8008320 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000f5e:	4b51      	ldr	r3, [pc, #324]	; (80010a4 <HAL_DFSDM_ChannelInit+0x178>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a4f      	ldr	r2, [pc, #316]	; (80010a4 <HAL_DFSDM_ChannelInit+0x178>)
 8000f66:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000f68:	4b4e      	ldr	r3, [pc, #312]	; (80010a4 <HAL_DFSDM_ChannelInit+0x178>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d125      	bne.n	8000fbc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000f70:	4b4d      	ldr	r3, [pc, #308]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a4c      	ldr	r2, [pc, #304]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000f7a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4948      	ldr	r1, [pc, #288]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000f8a:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a46      	ldr	r2, [pc, #280]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f90:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000f94:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	791b      	ldrb	r3, [r3, #4]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d108      	bne.n	8000fb0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000f9e:	4b42      	ldr	r3, [pc, #264]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	041b      	lsls	r3, r3, #16
 8000faa:	493f      	ldr	r1, [pc, #252]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000fb0:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a3c      	ldr	r2, [pc, #240]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fba:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000fca:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6819      	ldr	r1, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000fda:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000fe0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 020f 	bic.w	r2, r2, #15
 8000ff8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	430a      	orrs	r2, r1
 8001010:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001020:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6899      	ldr	r1, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	3b01      	subs	r3, #1
 8001032:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	430a      	orrs	r2, r1
 800103c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f002 0207 	and.w	r2, r2, #7
 800104c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6859      	ldr	r1, [r3, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001058:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	430a      	orrs	r2, r1
 8001068:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001078:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f000 fa14 	bl	80014b4 <DFSDM_GetChannelFromInstance>
 800108c:	4602      	mov	r2, r0
 800108e:	4904      	ldr	r1, [pc, #16]	; (80010a0 <HAL_DFSDM_ChannelInit+0x174>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	2000051c 	.word	0x2000051c
 80010a4:	20000518 	.word	0x20000518
 80010a8:	40016000 	.word	0x40016000

080010ac <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e0ca      	b.n	8001254 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a66      	ldr	r2, [pc, #408]	; (800125c <HAL_DFSDM_FilterInit+0x1b0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d109      	bne.n	80010dc <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0bb      	b.n	8001254 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f007 f867 	bl	80081c8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001108:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7a1b      	ldrb	r3, [r3, #8]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d108      	bne.n	8001124 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	e007      	b.n	8001134 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001132:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7a5b      	ldrb	r3, [r3, #9]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e007      	b.n	800115e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6812      	ldr	r2, [r2, #0]
 8001168:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800116c:	f023 0308 	bic.w	r3, r3, #8
 8001170:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d108      	bne.n	800118c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	695a      	ldr	r2, [r3, #20]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7c1b      	ldrb	r3, [r3, #16]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d108      	bne.n	80011a6 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0210 	orr.w	r2, r2, #16
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e007      	b.n	80011b6 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0210 	bic.w	r2, r2, #16
 80011b4:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7c5b      	ldrb	r3, [r3, #17]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d108      	bne.n	80011d0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0220 	orr.w	r2, r2, #32
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e007      	b.n	80011e0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0220 	bic.w	r2, r2, #32
 80011de:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80011ee:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80011f2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6959      	ldr	r1, [r3, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	3b01      	subs	r3, #1
 8001204:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001206:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800120e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	699a      	ldr	r2, [r3, #24]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7c1a      	ldrb	r2, [r3, #16]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 0201 	orr.w	r2, r2, #1
 8001248:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40016100 	.word	0x40016100

08001260 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001276:	2b00      	cmp	r3, #0
 8001278:	d02e      	beq.n	80012d8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001280:	2bff      	cmp	r3, #255	; 0xff
 8001282:	d029      	beq.n	80012d8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001296:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d10d      	bne.n	80012ba <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80012ac:	431a      	orrs	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e00a      	b.n	80012d0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6819      	ldr	r1, [r3, #0]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
 80012d6:	e001      	b.n	80012dc <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	371c      	adds	r7, #28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b086      	sub	sp, #24
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012f8:	2300      	movs	r3, #0
 80012fa:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d102      	bne.n	800130e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	75fb      	strb	r3, [r7, #23]
 800130c:	e064      	b.n	80013d8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001318:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800131c:	d002      	beq.n	8001324 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	75fb      	strb	r3, [r7, #23]
 8001322:	e059      	b.n	80013d8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001328:	2b00      	cmp	r3, #0
 800132a:	d10e      	bne.n	800134a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001330:	2b00      	cmp	r3, #0
 8001332:	d10a      	bne.n	800134a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001338:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	2b01      	cmp	r3, #1
 8001342:	d002      	beq.n	800134a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001344:	2301      	movs	r3, #1
 8001346:	75fb      	strb	r3, [r7, #23]
 8001348:	e046      	b.n	80013d8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800134e:	2b00      	cmp	r3, #0
 8001350:	d10b      	bne.n	800136a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001356:	2b00      	cmp	r3, #0
 8001358:	d107      	bne.n	800136a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800135e:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001360:	2b20      	cmp	r3, #32
 8001362:	d102      	bne.n	800136a <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	75fb      	strb	r3, [r7, #23]
 8001368:	e036      	b.n	80013d8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001370:	2b01      	cmp	r3, #1
 8001372:	d004      	beq.n	800137e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800137a:	2b03      	cmp	r3, #3
 800137c:	d12a      	bne.n	80013d4 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001382:	4a18      	ldr	r2, [pc, #96]	; (80013e4 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001384:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800138a:	4a17      	ldr	r2, [pc, #92]	; (80013e8 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800138c:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001392:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001394:	2b20      	cmp	r3, #32
 8001396:	d101      	bne.n	800139c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800139a:	e000      	b.n	800139e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 800139c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013a2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	331c      	adds	r3, #28
 80013ae:	4619      	mov	r1, r3
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	f000 fa16 	bl	80017e4 <HAL_DMA_Start_IT>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d006      	beq.n	80013cc <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	22ff      	movs	r2, #255	; 0xff
 80013c2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80013ca:	e005      	b.n	80013d8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 80013cc:	68f8      	ldr	r0, [r7, #12]
 80013ce:	f000 f8bd 	bl	800154c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80013d2:	e001      	b.n	80013d8 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 80013d4:	2301      	movs	r3, #1
 80013d6:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3718      	adds	r7, #24
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	08001475 	.word	0x08001475
 80013e8:	08001491 	.word	0x08001491
 80013ec:	08001459 	.word	0x08001459

080013f0 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013f8:	2300      	movs	r3, #0
 80013fa:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001402:	2b02      	cmp	r3, #2
 8001404:	d007      	beq.n	8001416 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800140c:	2b04      	cmp	r3, #4
 800140e:	d002      	beq.n	8001416 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	73fb      	strb	r3, [r7, #15]
 8001414:	e007      	b.n	8001426 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800141a:	4618      	mov	r0, r3
 800141c:	f000 fa5d 	bl	80018da <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 f8e9 	bl	80015f8 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8001426:	7bfb      	ldrb	r3, [r7, #15]
}
 8001428:	4618      	mov	r0, r3
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}

08001430 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001430:	b480      	push	{r7}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr

08001444 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 8001466:	68f8      	ldr	r0, [r7, #12]
 8001468:	f7ff ffe2 	bl	8001430 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 800146c:	bf00      	nop
 800146e:	3710      	adds	r7, #16
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001480:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001482:	68f8      	ldr	r0, [r7, #12]
 8001484:	f006 f934 	bl	80076f0 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}

08001490 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800149c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2203      	movs	r2, #3
 80014a2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80014a4:	68f8      	ldr	r0, [r7, #12]
 80014a6:	f7ff ffcd 	bl	8001444 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80014aa:	bf00      	nop
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	4a1c      	ldr	r2, [pc, #112]	; (8001530 <DFSDM_GetChannelFromInstance+0x7c>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d102      	bne.n	80014ca <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80014c4:	2300      	movs	r3, #0
 80014c6:	60fb      	str	r3, [r7, #12]
 80014c8:	e02b      	b.n	8001522 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	4a19      	ldr	r2, [pc, #100]	; (8001534 <DFSDM_GetChannelFromInstance+0x80>)
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d102      	bne.n	80014d8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80014d2:	2301      	movs	r3, #1
 80014d4:	60fb      	str	r3, [r7, #12]
 80014d6:	e024      	b.n	8001522 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	4a17      	ldr	r2, [pc, #92]	; (8001538 <DFSDM_GetChannelFromInstance+0x84>)
 80014dc:	4293      	cmp	r3, r2
 80014de:	d102      	bne.n	80014e6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80014e0:	2302      	movs	r3, #2
 80014e2:	60fb      	str	r3, [r7, #12]
 80014e4:	e01d      	b.n	8001522 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a14      	ldr	r2, [pc, #80]	; (800153c <DFSDM_GetChannelFromInstance+0x88>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d102      	bne.n	80014f4 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 80014ee:	2304      	movs	r3, #4
 80014f0:	60fb      	str	r3, [r7, #12]
 80014f2:	e016      	b.n	8001522 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	4a12      	ldr	r2, [pc, #72]	; (8001540 <DFSDM_GetChannelFromInstance+0x8c>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d102      	bne.n	8001502 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 80014fc:	2305      	movs	r3, #5
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	e00f      	b.n	8001522 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a0f      	ldr	r2, [pc, #60]	; (8001544 <DFSDM_GetChannelFromInstance+0x90>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d102      	bne.n	8001510 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800150a:	2306      	movs	r3, #6
 800150c:	60fb      	str	r3, [r7, #12]
 800150e:	e008      	b.n	8001522 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <DFSDM_GetChannelFromInstance+0x94>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d102      	bne.n	800151e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001518:	2307      	movs	r3, #7
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e001      	b.n	8001522 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800151e:	2303      	movs	r3, #3
 8001520:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001522:	68fb      	ldr	r3, [r7, #12]
}
 8001524:	4618      	mov	r0, r3
 8001526:	3714      	adds	r7, #20
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	40016000 	.word	0x40016000
 8001534:	40016020 	.word	0x40016020
 8001538:	40016040 	.word	0x40016040
 800153c:	40016080 	.word	0x40016080
 8001540:	400160a0 	.word	0x400160a0
 8001544:	400160c0 	.word	0x400160c0
 8001548:	400160e0 	.word	0x400160e0

0800154c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001558:	2b00      	cmp	r3, #0
 800155a:	d108      	bne.n	800156e <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	e033      	b.n	80015d6 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	681a      	ldr	r2, [r3, #0]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 0201 	bic.w	r2, r2, #1
 800157c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800158c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f042 0201 	orr.w	r2, r2, #1
 800159c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80015a4:	2b03      	cmp	r3, #3
 80015a6:	d116      	bne.n	80015d6 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d107      	bne.n	80015c0 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f042 0202 	orr.w	r2, r2, #2
 80015be:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d102      	bne.n	80015d0 <DFSDM_RegConvStart+0x84>
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	e000      	b.n	80015d2 <DFSDM_RegConvStart+0x86>
 80015d0:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <DFSDM_RegConvStart+0x98>
 80015e0:	2202      	movs	r2, #2
 80015e2:	e000      	b.n	80015e6 <DFSDM_RegConvStart+0x9a>
 80015e4:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr

080015f8 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	681a      	ldr	r2, [r3, #0]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 0201 	bic.w	r2, r2, #1
 800160e:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001614:	2b01      	cmp	r3, #1
 8001616:	d107      	bne.n	8001628 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001626:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f042 0201 	orr.w	r2, r2, #1
 8001636:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800163e:	2b04      	cmp	r3, #4
 8001640:	d116      	bne.n	8001670 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001646:	2b00      	cmp	r3, #0
 8001648:	d107      	bne.n	800165a <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f042 0202 	orr.w	r2, r2, #2
 8001658:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001660:	2b01      	cmp	r3, #1
 8001662:	d102      	bne.n	800166a <DFSDM_RegConvStop+0x72>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001668:	e000      	b.n	800166c <DFSDM_RegConvStop+0x74>
 800166a:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001676:	2b02      	cmp	r3, #2
 8001678:	d101      	bne.n	800167e <DFSDM_RegConvStop+0x86>
 800167a:	2201      	movs	r2, #1
 800167c:	e000      	b.n	8001680 <DFSDM_RegConvStop+0x88>
 800167e:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
	...

08001694 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b084      	sub	sp, #16
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e08d      	b.n	80017c2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	461a      	mov	r2, r3
 80016ac:	4b47      	ldr	r3, [pc, #284]	; (80017cc <HAL_DMA_Init+0x138>)
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d80f      	bhi.n	80016d2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	461a      	mov	r2, r3
 80016b8:	4b45      	ldr	r3, [pc, #276]	; (80017d0 <HAL_DMA_Init+0x13c>)
 80016ba:	4413      	add	r3, r2
 80016bc:	4a45      	ldr	r2, [pc, #276]	; (80017d4 <HAL_DMA_Init+0x140>)
 80016be:	fba2 2303 	umull	r2, r3, r2, r3
 80016c2:	091b      	lsrs	r3, r3, #4
 80016c4:	009a      	lsls	r2, r3, #2
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a42      	ldr	r2, [pc, #264]	; (80017d8 <HAL_DMA_Init+0x144>)
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40
 80016d0:	e00e      	b.n	80016f0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	461a      	mov	r2, r3
 80016d8:	4b40      	ldr	r3, [pc, #256]	; (80017dc <HAL_DMA_Init+0x148>)
 80016da:	4413      	add	r3, r2
 80016dc:	4a3d      	ldr	r2, [pc, #244]	; (80017d4 <HAL_DMA_Init+0x140>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	091b      	lsrs	r3, r3, #4
 80016e4:	009a      	lsls	r2, r3, #2
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a3c      	ldr	r2, [pc, #240]	; (80017e0 <HAL_DMA_Init+0x14c>)
 80016ee:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2202      	movs	r2, #2
 80016f4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001706:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800170a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001714:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	691b      	ldr	r3, [r3, #16]
 800171a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001720:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	699b      	ldr	r3, [r3, #24]
 8001726:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800172c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a1b      	ldr	r3, [r3, #32]
 8001732:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001734:	68fa      	ldr	r2, [r7, #12]
 8001736:	4313      	orrs	r3, r2
 8001738:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	68fa      	ldr	r2, [r7, #12]
 8001740:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001742:	6878      	ldr	r0, [r7, #4]
 8001744:	f000 fa72 	bl	8001c2c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001750:	d102      	bne.n	8001758 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800176c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d010      	beq.n	8001798 <HAL_DMA_Init+0x104>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b04      	cmp	r3, #4
 800177c:	d80c      	bhi.n	8001798 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fa92 	bl	8001ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001794:	605a      	str	r2, [r3, #4]
 8001796:	e008      	b.n	80017aa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	2200      	movs	r2, #0
 800179c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2200      	movs	r2, #0
 80017ae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	2201      	movs	r2, #1
 80017b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	40020407 	.word	0x40020407
 80017d0:	bffdfff8 	.word	0xbffdfff8
 80017d4:	cccccccd 	.word	0xcccccccd
 80017d8:	40020000 	.word	0x40020000
 80017dc:	bffdfbf8 	.word	0xbffdfbf8
 80017e0:	40020400 	.word	0x40020400

080017e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80017f2:	2300      	movs	r3, #0
 80017f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d101      	bne.n	8001804 <HAL_DMA_Start_IT+0x20>
 8001800:	2302      	movs	r3, #2
 8001802:	e066      	b.n	80018d2 <HAL_DMA_Start_IT+0xee>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001812:	b2db      	uxtb	r3, r3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d155      	bne.n	80018c4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2202      	movs	r2, #2
 800181c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 0201 	bic.w	r2, r2, #1
 8001834:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	68b9      	ldr	r1, [r7, #8]
 800183c:	68f8      	ldr	r0, [r7, #12]
 800183e:	f000 f9b6 	bl	8001bae <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	2b00      	cmp	r3, #0
 8001848:	d008      	beq.n	800185c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f042 020e 	orr.w	r2, r2, #14
 8001858:	601a      	str	r2, [r3, #0]
 800185a:	e00f      	b.n	800187c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f022 0204 	bic.w	r2, r2, #4
 800186a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f042 020a 	orr.w	r2, r2, #10
 800187a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d007      	beq.n	800189a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001894:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001898:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d007      	beq.n	80018b2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a6:	681a      	ldr	r2, [r3, #0]
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80018b0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f042 0201 	orr.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	e005      	b.n	80018d0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80018cc:	2302      	movs	r3, #2
 80018ce:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80018d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3718      	adds	r7, #24
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}

080018da <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018da:	b480      	push	{r7}
 80018dc:	b085      	sub	sp, #20
 80018de:	af00      	add	r7, sp, #0
 80018e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e2:	2300      	movs	r3, #0
 80018e4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d008      	beq.n	8001904 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2204      	movs	r2, #4
 80018f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2200      	movs	r2, #0
 80018fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	e040      	b.n	8001986 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 020e 	bic.w	r2, r2, #14
 8001912:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001918:	681a      	ldr	r2, [r3, #0]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800191e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001922:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f022 0201 	bic.w	r2, r2, #1
 8001932:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f003 021c 	and.w	r2, r3, #28
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	2101      	movs	r1, #1
 8001942:	fa01 f202 	lsl.w	r2, r1, r2
 8001946:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001950:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001956:	2b00      	cmp	r3, #0
 8001958:	d00c      	beq.n	8001974 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001964:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001968:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001972:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2200      	movs	r2, #0
 8001980:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001984:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr

08001992 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001992:	b580      	push	{r7, lr}
 8001994:	b084      	sub	sp, #16
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800199a:	2300      	movs	r3, #0
 800199c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d005      	beq.n	80019b6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2204      	movs	r2, #4
 80019ae:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	73fb      	strb	r3, [r7, #15]
 80019b4:	e047      	b.n	8001a46 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f022 020e 	bic.w	r2, r2, #14
 80019c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f022 0201 	bic.w	r2, r2, #1
 80019d4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019e4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	f003 021c 	and.w	r2, r3, #28
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	2101      	movs	r1, #1
 80019f4:	fa01 f202 	lsl.w	r2, r1, r2
 80019f8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001a02:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d00c      	beq.n	8001a26 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a16:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a1a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a24:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d003      	beq.n	8001a46 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	4798      	blx	r3
    }
  }
  return status;
 8001a46:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a48:	4618      	mov	r0, r3
 8001a4a:	3710      	adds	r7, #16
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b084      	sub	sp, #16
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	f003 031c 	and.w	r3, r3, #28
 8001a70:	2204      	movs	r2, #4
 8001a72:	409a      	lsls	r2, r3
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	4013      	ands	r3, r2
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d026      	beq.n	8001aca <HAL_DMA_IRQHandler+0x7a>
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f003 0304 	and.w	r3, r3, #4
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d021      	beq.n	8001aca <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0320 	and.w	r3, r3, #32
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d107      	bne.n	8001aa4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0204 	bic.w	r2, r2, #4
 8001aa2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa8:	f003 021c 	and.w	r2, r3, #28
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab0:	2104      	movs	r1, #4
 8001ab2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d071      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac4:	6878      	ldr	r0, [r7, #4]
 8001ac6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001ac8:	e06c      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ace:	f003 031c 	and.w	r3, r3, #28
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	409a      	lsls	r2, r3
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d02e      	beq.n	8001b3c <HAL_DMA_IRQHandler+0xec>
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d029      	beq.n	8001b3c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0320 	and.w	r3, r3, #32
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d10b      	bne.n	8001b0e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	681a      	ldr	r2, [r3, #0]
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f022 020a 	bic.w	r2, r2, #10
 8001b04:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b12:	f003 021c 	and.w	r2, r3, #28
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1a:	2102      	movs	r1, #2
 8001b1c:	fa01 f202 	lsl.w	r2, r1, r2
 8001b20:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d038      	beq.n	8001ba4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001b3a:	e033      	b.n	8001ba4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	f003 031c 	and.w	r3, r3, #28
 8001b44:	2208      	movs	r2, #8
 8001b46:	409a      	lsls	r2, r3
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d02a      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x156>
 8001b50:	68bb      	ldr	r3, [r7, #8]
 8001b52:	f003 0308 	and.w	r3, r3, #8
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d025      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 020e 	bic.w	r2, r2, #14
 8001b68:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6e:	f003 021c 	and.w	r2, r3, #28
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b76:	2101      	movs	r1, #1
 8001b78:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2201      	movs	r2, #1
 8001b82:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d004      	beq.n	8001ba6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001ba4:	bf00      	nop
 8001ba6:	bf00      	nop
}
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}

08001bae <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bae:	b480      	push	{r7}
 8001bb0:	b085      	sub	sp, #20
 8001bb2:	af00      	add	r7, sp, #0
 8001bb4:	60f8      	str	r0, [r7, #12]
 8001bb6:	60b9      	str	r1, [r7, #8]
 8001bb8:	607a      	str	r2, [r7, #4]
 8001bba:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bc0:	68fa      	ldr	r2, [r7, #12]
 8001bc2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001bc4:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d004      	beq.n	8001bd8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd2:	68fa      	ldr	r2, [r7, #12]
 8001bd4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bd6:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bdc:	f003 021c 	and.w	r2, r3, #28
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	2101      	movs	r1, #1
 8001be6:	fa01 f202 	lsl.w	r2, r1, r2
 8001bea:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	683a      	ldr	r2, [r7, #0]
 8001bf2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	2b10      	cmp	r3, #16
 8001bfa:	d108      	bne.n	8001c0e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68ba      	ldr	r2, [r7, #8]
 8001c0a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001c0c:	e007      	b.n	8001c1e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68ba      	ldr	r2, [r7, #8]
 8001c14:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	60da      	str	r2, [r3, #12]
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d80a      	bhi.n	8001c56 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c44:	089b      	lsrs	r3, r3, #2
 8001c46:	009b      	lsls	r3, r3, #2
 8001c48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001c4c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	6493      	str	r3, [r2, #72]	; 0x48
 8001c54:	e007      	b.n	8001c66 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5a:	089b      	lsrs	r3, r3, #2
 8001c5c:	009a      	lsls	r2, r3, #2
 8001c5e:	4b0f      	ldr	r3, [pc, #60]	; (8001c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001c60:	4413      	add	r3, r2
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	3b08      	subs	r3, #8
 8001c6e:	4a0c      	ldr	r2, [pc, #48]	; (8001ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c70:	fba2 2303 	umull	r2, r3, r2, r3
 8001c74:	091b      	lsrs	r3, r3, #4
 8001c76:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c7c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f003 031f 	and.w	r3, r3, #31
 8001c84:	2201      	movs	r2, #1
 8001c86:	409a      	lsls	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c8c:	bf00      	nop
 8001c8e:	3714      	adds	r7, #20
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr
 8001c98:	40020407 	.word	0x40020407
 8001c9c:	4002081c 	.word	0x4002081c
 8001ca0:	cccccccd 	.word	0xcccccccd
 8001ca4:	40020880 	.word	0x40020880

08001ca8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001cb8:	68fa      	ldr	r2, [r7, #12]
 8001cba:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001cbc:	4413      	add	r3, r2
 8001cbe:	009b      	lsls	r3, r3, #2
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a08      	ldr	r2, [pc, #32]	; (8001cec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001cca:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	3b01      	subs	r3, #1
 8001cd0:	f003 0303 	and.w	r3, r3, #3
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001cdc:	bf00      	nop
 8001cde:	3714      	adds	r7, #20
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr
 8001ce8:	1000823f 	.word	0x1000823f
 8001cec:	40020940 	.word	0x40020940

08001cf0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b087      	sub	sp, #28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cfe:	e166      	b.n	8001fce <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	2101      	movs	r1, #1
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	fa01 f303 	lsl.w	r3, r1, r3
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 8158 	beq.w	8001fc8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f003 0303 	and.w	r3, r3, #3
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d005      	beq.n	8001d30 <HAL_GPIO_Init+0x40>
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0303 	and.w	r3, r3, #3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d130      	bne.n	8001d92 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	005b      	lsls	r3, r3, #1
 8001d3a:	2203      	movs	r2, #3
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	43db      	mvns	r3, r3
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	68da      	ldr	r2, [r3, #12]
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	005b      	lsls	r3, r3, #1
 8001d50:	fa02 f303 	lsl.w	r3, r2, r3
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	693a      	ldr	r2, [r7, #16]
 8001d5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d66:	2201      	movs	r2, #1
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	091b      	lsrs	r3, r3, #4
 8001d7c:	f003 0201 	and.w	r2, r3, #1
 8001d80:	697b      	ldr	r3, [r7, #20]
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	f003 0303 	and.w	r3, r3, #3
 8001d9a:	2b03      	cmp	r3, #3
 8001d9c:	d017      	beq.n	8001dce <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	68db      	ldr	r3, [r3, #12]
 8001da2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	2203      	movs	r2, #3
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43db      	mvns	r3, r3
 8001db0:	693a      	ldr	r2, [r7, #16]
 8001db2:	4013      	ands	r3, r2
 8001db4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	689a      	ldr	r2, [r3, #8]
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d123      	bne.n	8001e22 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	08da      	lsrs	r2, r3, #3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	3208      	adds	r2, #8
 8001de2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001de6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	f003 0307 	and.w	r3, r3, #7
 8001dee:	009b      	lsls	r3, r3, #2
 8001df0:	220f      	movs	r2, #15
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	43db      	mvns	r3, r3
 8001df8:	693a      	ldr	r2, [r7, #16]
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	691a      	ldr	r2, [r3, #16]
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0e:	693a      	ldr	r2, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	08da      	lsrs	r2, r3, #3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	3208      	adds	r2, #8
 8001e1c:	6939      	ldr	r1, [r7, #16]
 8001e1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e32:	43db      	mvns	r3, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4013      	ands	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	f003 0203 	and.w	r2, r3, #3
 8001e42:	697b      	ldr	r3, [r7, #20]
 8001e44:	005b      	lsls	r3, r3, #1
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80b2 	beq.w	8001fc8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e64:	4b61      	ldr	r3, [pc, #388]	; (8001fec <HAL_GPIO_Init+0x2fc>)
 8001e66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e68:	4a60      	ldr	r2, [pc, #384]	; (8001fec <HAL_GPIO_Init+0x2fc>)
 8001e6a:	f043 0301 	orr.w	r3, r3, #1
 8001e6e:	6613      	str	r3, [r2, #96]	; 0x60
 8001e70:	4b5e      	ldr	r3, [pc, #376]	; (8001fec <HAL_GPIO_Init+0x2fc>)
 8001e72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e74:	f003 0301 	and.w	r3, r3, #1
 8001e78:	60bb      	str	r3, [r7, #8]
 8001e7a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e7c:	4a5c      	ldr	r2, [pc, #368]	; (8001ff0 <HAL_GPIO_Init+0x300>)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	089b      	lsrs	r3, r3, #2
 8001e82:	3302      	adds	r3, #2
 8001e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	f003 0303 	and.w	r3, r3, #3
 8001e90:	009b      	lsls	r3, r3, #2
 8001e92:	220f      	movs	r2, #15
 8001e94:	fa02 f303 	lsl.w	r3, r2, r3
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	693a      	ldr	r2, [r7, #16]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ea6:	d02b      	beq.n	8001f00 <HAL_GPIO_Init+0x210>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a52      	ldr	r2, [pc, #328]	; (8001ff4 <HAL_GPIO_Init+0x304>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d025      	beq.n	8001efc <HAL_GPIO_Init+0x20c>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a51      	ldr	r2, [pc, #324]	; (8001ff8 <HAL_GPIO_Init+0x308>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d01f      	beq.n	8001ef8 <HAL_GPIO_Init+0x208>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a50      	ldr	r2, [pc, #320]	; (8001ffc <HAL_GPIO_Init+0x30c>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d019      	beq.n	8001ef4 <HAL_GPIO_Init+0x204>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a4f      	ldr	r2, [pc, #316]	; (8002000 <HAL_GPIO_Init+0x310>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d013      	beq.n	8001ef0 <HAL_GPIO_Init+0x200>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	4a4e      	ldr	r2, [pc, #312]	; (8002004 <HAL_GPIO_Init+0x314>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d00d      	beq.n	8001eec <HAL_GPIO_Init+0x1fc>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a4d      	ldr	r2, [pc, #308]	; (8002008 <HAL_GPIO_Init+0x318>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d007      	beq.n	8001ee8 <HAL_GPIO_Init+0x1f8>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a4c      	ldr	r2, [pc, #304]	; (800200c <HAL_GPIO_Init+0x31c>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d101      	bne.n	8001ee4 <HAL_GPIO_Init+0x1f4>
 8001ee0:	2307      	movs	r3, #7
 8001ee2:	e00e      	b.n	8001f02 <HAL_GPIO_Init+0x212>
 8001ee4:	2308      	movs	r3, #8
 8001ee6:	e00c      	b.n	8001f02 <HAL_GPIO_Init+0x212>
 8001ee8:	2306      	movs	r3, #6
 8001eea:	e00a      	b.n	8001f02 <HAL_GPIO_Init+0x212>
 8001eec:	2305      	movs	r3, #5
 8001eee:	e008      	b.n	8001f02 <HAL_GPIO_Init+0x212>
 8001ef0:	2304      	movs	r3, #4
 8001ef2:	e006      	b.n	8001f02 <HAL_GPIO_Init+0x212>
 8001ef4:	2303      	movs	r3, #3
 8001ef6:	e004      	b.n	8001f02 <HAL_GPIO_Init+0x212>
 8001ef8:	2302      	movs	r3, #2
 8001efa:	e002      	b.n	8001f02 <HAL_GPIO_Init+0x212>
 8001efc:	2301      	movs	r3, #1
 8001efe:	e000      	b.n	8001f02 <HAL_GPIO_Init+0x212>
 8001f00:	2300      	movs	r3, #0
 8001f02:	697a      	ldr	r2, [r7, #20]
 8001f04:	f002 0203 	and.w	r2, r2, #3
 8001f08:	0092      	lsls	r2, r2, #2
 8001f0a:	4093      	lsls	r3, r2
 8001f0c:	693a      	ldr	r2, [r7, #16]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f12:	4937      	ldr	r1, [pc, #220]	; (8001ff0 <HAL_GPIO_Init+0x300>)
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	089b      	lsrs	r3, r3, #2
 8001f18:	3302      	adds	r3, #2
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f20:	4b3b      	ldr	r3, [pc, #236]	; (8002010 <HAL_GPIO_Init+0x320>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	43db      	mvns	r3, r3
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001f3c:	693a      	ldr	r2, [r7, #16]
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f44:	4a32      	ldr	r2, [pc, #200]	; (8002010 <HAL_GPIO_Init+0x320>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f4a:	4b31      	ldr	r3, [pc, #196]	; (8002010 <HAL_GPIO_Init+0x320>)
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	43db      	mvns	r3, r3
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	4013      	ands	r3, r2
 8001f58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d003      	beq.n	8001f6e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001f66:	693a      	ldr	r2, [r7, #16]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f6e:	4a28      	ldr	r2, [pc, #160]	; (8002010 <HAL_GPIO_Init+0x320>)
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f74:	4b26      	ldr	r3, [pc, #152]	; (8002010 <HAL_GPIO_Init+0x320>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	693a      	ldr	r2, [r7, #16]
 8001f80:	4013      	ands	r3, r2
 8001f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d003      	beq.n	8001f98 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f90:	693a      	ldr	r2, [r7, #16]
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	4313      	orrs	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f98:	4a1d      	ldr	r2, [pc, #116]	; (8002010 <HAL_GPIO_Init+0x320>)
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f9e:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <HAL_GPIO_Init+0x320>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	43db      	mvns	r3, r3
 8001fa8:	693a      	ldr	r2, [r7, #16]
 8001faa:	4013      	ands	r3, r2
 8001fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001fba:	693a      	ldr	r2, [r7, #16]
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4313      	orrs	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fc2:	4a13      	ldr	r2, [pc, #76]	; (8002010 <HAL_GPIO_Init+0x320>)
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f47f ae91 	bne.w	8001d00 <HAL_GPIO_Init+0x10>
  }
}
 8001fde:	bf00      	nop
 8001fe0:	bf00      	nop
 8001fe2:	371c      	adds	r7, #28
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40010000 	.word	0x40010000
 8001ff4:	48000400 	.word	0x48000400
 8001ff8:	48000800 	.word	0x48000800
 8001ffc:	48000c00 	.word	0x48000c00
 8002000:	48001000 	.word	0x48001000
 8002004:	48001400 	.word	0x48001400
 8002008:	48001800 	.word	0x48001800
 800200c:	48001c00 	.word	0x48001c00
 8002010:	40010400 	.word	0x40010400

08002014 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002014:	b480      	push	{r7}
 8002016:	b087      	sub	sp, #28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
 800201c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800201e:	2300      	movs	r3, #0
 8002020:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002022:	e0c9      	b.n	80021b8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002024:	2201      	movs	r2, #1
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	fa02 f303 	lsl.w	r3, r2, r3
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	4013      	ands	r3, r2
 8002030:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b00      	cmp	r3, #0
 8002036:	f000 80bc 	beq.w	80021b2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 800203a:	4a66      	ldr	r2, [pc, #408]	; (80021d4 <HAL_GPIO_DeInit+0x1c0>)
 800203c:	697b      	ldr	r3, [r7, #20]
 800203e:	089b      	lsrs	r3, r3, #2
 8002040:	3302      	adds	r3, #2
 8002042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002046:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	f003 0303 	and.w	r3, r3, #3
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	220f      	movs	r2, #15
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4013      	ands	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002062:	d02b      	beq.n	80020bc <HAL_GPIO_DeInit+0xa8>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a5c      	ldr	r2, [pc, #368]	; (80021d8 <HAL_GPIO_DeInit+0x1c4>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d025      	beq.n	80020b8 <HAL_GPIO_DeInit+0xa4>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a5b      	ldr	r2, [pc, #364]	; (80021dc <HAL_GPIO_DeInit+0x1c8>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d01f      	beq.n	80020b4 <HAL_GPIO_DeInit+0xa0>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a5a      	ldr	r2, [pc, #360]	; (80021e0 <HAL_GPIO_DeInit+0x1cc>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d019      	beq.n	80020b0 <HAL_GPIO_DeInit+0x9c>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a59      	ldr	r2, [pc, #356]	; (80021e4 <HAL_GPIO_DeInit+0x1d0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d013      	beq.n	80020ac <HAL_GPIO_DeInit+0x98>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a58      	ldr	r2, [pc, #352]	; (80021e8 <HAL_GPIO_DeInit+0x1d4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00d      	beq.n	80020a8 <HAL_GPIO_DeInit+0x94>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a57      	ldr	r2, [pc, #348]	; (80021ec <HAL_GPIO_DeInit+0x1d8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <HAL_GPIO_DeInit+0x90>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a56      	ldr	r2, [pc, #344]	; (80021f0 <HAL_GPIO_DeInit+0x1dc>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d101      	bne.n	80020a0 <HAL_GPIO_DeInit+0x8c>
 800209c:	2307      	movs	r3, #7
 800209e:	e00e      	b.n	80020be <HAL_GPIO_DeInit+0xaa>
 80020a0:	2308      	movs	r3, #8
 80020a2:	e00c      	b.n	80020be <HAL_GPIO_DeInit+0xaa>
 80020a4:	2306      	movs	r3, #6
 80020a6:	e00a      	b.n	80020be <HAL_GPIO_DeInit+0xaa>
 80020a8:	2305      	movs	r3, #5
 80020aa:	e008      	b.n	80020be <HAL_GPIO_DeInit+0xaa>
 80020ac:	2304      	movs	r3, #4
 80020ae:	e006      	b.n	80020be <HAL_GPIO_DeInit+0xaa>
 80020b0:	2303      	movs	r3, #3
 80020b2:	e004      	b.n	80020be <HAL_GPIO_DeInit+0xaa>
 80020b4:	2302      	movs	r3, #2
 80020b6:	e002      	b.n	80020be <HAL_GPIO_DeInit+0xaa>
 80020b8:	2301      	movs	r3, #1
 80020ba:	e000      	b.n	80020be <HAL_GPIO_DeInit+0xaa>
 80020bc:	2300      	movs	r3, #0
 80020be:	697a      	ldr	r2, [r7, #20]
 80020c0:	f002 0203 	and.w	r2, r2, #3
 80020c4:	0092      	lsls	r2, r2, #2
 80020c6:	4093      	lsls	r3, r2
 80020c8:	68fa      	ldr	r2, [r7, #12]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d132      	bne.n	8002134 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80020ce:	4b49      	ldr	r3, [pc, #292]	; (80021f4 <HAL_GPIO_DeInit+0x1e0>)
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	43db      	mvns	r3, r3
 80020d6:	4947      	ldr	r1, [pc, #284]	; (80021f4 <HAL_GPIO_DeInit+0x1e0>)
 80020d8:	4013      	ands	r3, r2
 80020da:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 80020dc:	4b45      	ldr	r3, [pc, #276]	; (80021f4 <HAL_GPIO_DeInit+0x1e0>)
 80020de:	685a      	ldr	r2, [r3, #4]
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	43db      	mvns	r3, r3
 80020e4:	4943      	ldr	r1, [pc, #268]	; (80021f4 <HAL_GPIO_DeInit+0x1e0>)
 80020e6:	4013      	ands	r3, r2
 80020e8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 80020ea:	4b42      	ldr	r3, [pc, #264]	; (80021f4 <HAL_GPIO_DeInit+0x1e0>)
 80020ec:	68da      	ldr	r2, [r3, #12]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	4940      	ldr	r1, [pc, #256]	; (80021f4 <HAL_GPIO_DeInit+0x1e0>)
 80020f4:	4013      	ands	r3, r2
 80020f6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 80020f8:	4b3e      	ldr	r3, [pc, #248]	; (80021f4 <HAL_GPIO_DeInit+0x1e0>)
 80020fa:	689a      	ldr	r2, [r3, #8]
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	43db      	mvns	r3, r3
 8002100:	493c      	ldr	r1, [pc, #240]	; (80021f4 <HAL_GPIO_DeInit+0x1e0>)
 8002102:	4013      	ands	r3, r2
 8002104:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	f003 0303 	and.w	r3, r3, #3
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	220f      	movs	r2, #15
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002116:	4a2f      	ldr	r2, [pc, #188]	; (80021d4 <HAL_GPIO_DeInit+0x1c0>)
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	089b      	lsrs	r3, r3, #2
 800211c:	3302      	adds	r3, #2
 800211e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	43da      	mvns	r2, r3
 8002126:	482b      	ldr	r0, [pc, #172]	; (80021d4 <HAL_GPIO_DeInit+0x1c0>)
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	089b      	lsrs	r3, r3, #2
 800212c:	400a      	ands	r2, r1
 800212e:	3302      	adds	r3, #2
 8002130:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681a      	ldr	r2, [r3, #0]
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2103      	movs	r1, #3
 800213e:	fa01 f303 	lsl.w	r3, r1, r3
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002148:	697b      	ldr	r3, [r7, #20]
 800214a:	08da      	lsrs	r2, r3, #3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3208      	adds	r2, #8
 8002150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	f003 0307 	and.w	r3, r3, #7
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	220f      	movs	r2, #15
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	697a      	ldr	r2, [r7, #20]
 8002166:	08d2      	lsrs	r2, r2, #3
 8002168:	4019      	ands	r1, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3208      	adds	r2, #8
 800216e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	689a      	ldr	r2, [r3, #8]
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	005b      	lsls	r3, r3, #1
 800217a:	2103      	movs	r1, #3
 800217c:	fa01 f303 	lsl.w	r3, r1, r3
 8002180:	43db      	mvns	r3, r3
 8002182:	401a      	ands	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685a      	ldr	r2, [r3, #4]
 800218c:	2101      	movs	r1, #1
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	fa01 f303 	lsl.w	r3, r1, r3
 8002194:	43db      	mvns	r3, r3
 8002196:	401a      	ands	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	68da      	ldr	r2, [r3, #12]
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	005b      	lsls	r3, r3, #1
 80021a4:	2103      	movs	r1, #3
 80021a6:	fa01 f303 	lsl.w	r3, r1, r3
 80021aa:	43db      	mvns	r3, r3
 80021ac:	401a      	ands	r2, r3
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	3301      	adds	r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f47f af2f 	bne.w	8002024 <HAL_GPIO_DeInit+0x10>
  }
}
 80021c6:	bf00      	nop
 80021c8:	bf00      	nop
 80021ca:	371c      	adds	r7, #28
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40010000 	.word	0x40010000
 80021d8:	48000400 	.word	0x48000400
 80021dc:	48000800 	.word	0x48000800
 80021e0:	48000c00 	.word	0x48000c00
 80021e4:	48001000 	.word	0x48001000
 80021e8:	48001400 	.word	0x48001400
 80021ec:	48001800 	.word	0x48001800
 80021f0:	48001c00 	.word	0x48001c00
 80021f4:	40010400 	.word	0x40010400

080021f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b083      	sub	sp, #12
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	807b      	strh	r3, [r7, #2]
 8002204:	4613      	mov	r3, r2
 8002206:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002208:	787b      	ldrb	r3, [r7, #1]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d003      	beq.n	8002216 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800220e:	887a      	ldrh	r2, [r7, #2]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002214:	e002      	b.n	800221c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002216:	887a      	ldrh	r2, [r7, #2]
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800221c:	bf00      	nop
 800221e:	370c      	adds	r7, #12
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr

08002228 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002228:	b480      	push	{r7}
 800222a:	b085      	sub	sp, #20
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
 8002230:	460b      	mov	r3, r1
 8002232:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800223a:	887a      	ldrh	r2, [r7, #2]
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4013      	ands	r3, r2
 8002240:	041a      	lsls	r2, r3, #16
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	43d9      	mvns	r1, r3
 8002246:	887b      	ldrh	r3, [r7, #2]
 8002248:	400b      	ands	r3, r1
 800224a:	431a      	orrs	r2, r3
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	619a      	str	r2, [r3, #24]
}
 8002250:	bf00      	nop
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr

0800225c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8002266:	4b08      	ldr	r3, [pc, #32]	; (8002288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002268:	695a      	ldr	r2, [r3, #20]
 800226a:	88fb      	ldrh	r3, [r7, #6]
 800226c:	4013      	ands	r3, r2
 800226e:	2b00      	cmp	r3, #0
 8002270:	d006      	beq.n	8002280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002272:	4a05      	ldr	r2, [pc, #20]	; (8002288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002274:	88fb      	ldrh	r3, [r7, #6]
 8002276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002278:	88fb      	ldrh	r3, [r7, #6]
 800227a:	4618      	mov	r0, r3
 800227c:	f005 f97a 	bl	8007574 <HAL_GPIO_EXTI_Callback>
  }
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	40010400 	.word	0x40010400

0800228c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af02      	add	r7, sp, #8
 8002292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002294:	2300      	movs	r3, #0
 8002296:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002298:	f7fe f9f4 	bl	8000684 <HAL_GetTick>
 800229c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d102      	bne.n	80022aa <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 80022a4:	2301      	movs	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	e092      	b.n	80023d0 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f040 808b 	bne.w	80023d0 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f006 f8a0 	bl	8008400 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80022c0:	f241 3188 	movw	r1, #5000	; 0x1388
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f000 fad0 	bl	800286a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	689a      	ldr	r2, [r3, #8]
 80022d0:	4b42      	ldr	r3, [pc, #264]	; (80023dc <HAL_OSPI_Init+0x150>)
 80022d2:	4013      	ands	r3, r2
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	68d1      	ldr	r1, [r2, #12]
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6912      	ldr	r2, [r2, #16]
 80022dc:	3a01      	subs	r2, #1
 80022de:	0412      	lsls	r2, r2, #16
 80022e0:	4311      	orrs	r1, r2
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	6952      	ldr	r2, [r2, #20]
 80022e6:	3a01      	subs	r2, #1
 80022e8:	0212      	lsls	r2, r2, #8
 80022ea:	4311      	orrs	r1, r2
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022f0:	4311      	orrs	r1, r2
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	69d2      	ldr	r2, [r2, #28]
 80022f6:	4311      	orrs	r1, r2
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	430b      	orrs	r3, r1
 80022fe:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	0412      	lsls	r2, r2, #16
 800230a:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	3b01      	subs	r3, #1
 800231c:	021a      	lsls	r2, r3, #8
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	430a      	orrs	r2, r1
 8002324:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	68bb      	ldr	r3, [r7, #8]
 800232e:	2200      	movs	r2, #0
 8002330:	2120      	movs	r1, #32
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f000 fddc 	bl	8002ef0 <OSPI_WaitFlagStateUntilTimeout>
 8002338:	4603      	mov	r3, r0
 800233a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d146      	bne.n	80023d0 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6a1b      	ldr	r3, [r3, #32]
 8002350:	1e5a      	subs	r2, r3, #1
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689a      	ldr	r2, [r3, #8]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	430a      	orrs	r2, r1
 800236e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002378:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	431a      	orrs	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	430a      	orrs	r2, r1
 800238c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f042 0201 	orr.w	r2, r2, #1
 800239e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	699b      	ldr	r3, [r3, #24]
 80023a4:	2b02      	cmp	r3, #2
 80023a6:	d107      	bne.n	80023b8 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	689a      	ldr	r2, [r3, #8]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f042 0202 	orr.w	r2, r2, #2
 80023b6:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80023c0:	d103      	bne.n	80023ca <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2201      	movs	r2, #1
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44
 80023c8:	e002      	b.n	80023d0 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2202      	movs	r2, #2
 80023ce:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80023d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3710      	adds	r7, #16
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	f8e0f8f4 	.word	0xf8e0f8f4

080023e0 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023e8:	2300      	movs	r3, #0
 80023ea:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d102      	bne.n	80023f8 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	73fb      	strb	r3, [r7, #15]
 80023f6:	e015      	b.n	8002424 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0201 	bic.w	r2, r2, #1
 8002406:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	689a      	ldr	r2, [r3, #8]
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f022 0202 	bic.w	r2, r2, #2
 8002416:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f006 f85d 	bl	80084d8 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2200      	movs	r2, #0
 8002422:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8002424:	7bfb      	ldrb	r3, [r7, #15]
}
 8002426:	4618      	mov	r0, r3
 8002428:	3710      	adds	r7, #16
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b08a      	sub	sp, #40	; 0x28
 8002432:	af02      	add	r7, sp, #8
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800243a:	f7fe f923 	bl	8000684 <HAL_GetTick>
 800243e:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002444:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244a:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d104      	bne.n	800245c <HAL_OSPI_Command+0x2e>
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68db      	ldr	r3, [r3, #12]
 8002456:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800245a:	d10d      	bne.n	8002478 <HAL_OSPI_Command+0x4a>
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	2b14      	cmp	r3, #20
 8002460:	d103      	bne.n	800246a <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	2b02      	cmp	r3, #2
 8002468:	d006      	beq.n	8002478 <HAL_OSPI_Command+0x4a>
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2b24      	cmp	r3, #36	; 0x24
 800246e:	d153      	bne.n	8002518 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d14f      	bne.n	8002518 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	69bb      	ldr	r3, [r7, #24]
 800247e:	2200      	movs	r2, #0
 8002480:	2120      	movs	r1, #32
 8002482:	68f8      	ldr	r0, [r7, #12]
 8002484:	f000 fd34 	bl	8002ef0 <OSPI_WaitFlagStateUntilTimeout>
 8002488:	4603      	mov	r3, r0
 800248a:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800248c:	7ffb      	ldrb	r3, [r7, #31]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d148      	bne.n	8002524 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	2200      	movs	r2, #0
 8002496:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8002498:	68b9      	ldr	r1, [r7, #8]
 800249a:	68f8      	ldr	r0, [r7, #12]
 800249c:	f000 fd60 	bl	8002f60 <OSPI_ConfigCmd>
 80024a0:	4603      	mov	r3, r0
 80024a2:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80024a4:	7ffb      	ldrb	r3, [r7, #31]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d13c      	bne.n	8002524 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d10e      	bne.n	80024d0 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	69bb      	ldr	r3, [r7, #24]
 80024b8:	2201      	movs	r2, #1
 80024ba:	2102      	movs	r1, #2
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 fd17 	bl	8002ef0 <OSPI_WaitFlagStateUntilTimeout>
 80024c2:	4603      	mov	r3, r0
 80024c4:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	2202      	movs	r2, #2
 80024cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80024ce:	e029      	b.n	8002524 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d103      	bne.n	80024e0 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	2204      	movs	r2, #4
 80024dc:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80024de:	e021      	b.n	8002524 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d10b      	bne.n	8002500 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ec:	2b24      	cmp	r3, #36	; 0x24
 80024ee:	d103      	bne.n	80024f8 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2204      	movs	r2, #4
 80024f4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80024f6:	e015      	b.n	8002524 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2214      	movs	r2, #20
 80024fc:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80024fe:	e011      	b.n	8002524 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002504:	2b14      	cmp	r3, #20
 8002506:	d103      	bne.n	8002510 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	2204      	movs	r2, #4
 800250c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800250e:	e009      	b.n	8002524 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	2224      	movs	r2, #36	; 0x24
 8002514:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002516:	e005      	b.n	8002524 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2210      	movs	r2, #16
 8002520:	649a      	str	r2, [r3, #72]	; 0x48
 8002522:	e000      	b.n	8002526 <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8002524:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002526:	7ffb      	ldrb	r3, [r7, #31]
}
 8002528:	4618      	mov	r0, r3
 800252a:	3720      	adds	r7, #32
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b08a      	sub	sp, #40	; 0x28
 8002534:	af02      	add	r7, sp, #8
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800253c:	f7fe f8a2 	bl	8000684 <HAL_GetTick>
 8002540:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	3350      	adds	r3, #80	; 0x50
 8002548:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d105      	bne.n	800255c <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2208      	movs	r2, #8
 8002558:	649a      	str	r2, [r3, #72]	; 0x48
 800255a:	e057      	b.n	800260c <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002560:	2b04      	cmp	r3, #4
 8002562:	d14e      	bne.n	8002602 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	68ba      	ldr	r2, [r7, #8]
 800257c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800258c:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	9300      	str	r3, [sp, #0]
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	2201      	movs	r2, #1
 8002596:	2104      	movs	r1, #4
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f000 fca9 	bl	8002ef0 <OSPI_WaitFlagStateUntilTimeout>
 800259e:	4603      	mov	r3, r0
 80025a0:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80025a2:	7ffb      	ldrb	r3, [r7, #31]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d113      	bne.n	80025d0 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025ac:	781a      	ldrb	r2, [r3, #0]
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025b6:	1c5a      	adds	r2, r3, #1
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025c0:	1e5a      	subs	r2, r3, #1
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d1df      	bne.n	800258e <HAL_OSPI_Transmit+0x5e>
 80025ce:	e000      	b.n	80025d2 <HAL_OSPI_Transmit+0xa2>
          break;
 80025d0:	bf00      	nop

      if (status == HAL_OK)
 80025d2:	7ffb      	ldrb	r3, [r7, #31]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d119      	bne.n	800260c <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2201      	movs	r2, #1
 80025e0:	2102      	movs	r1, #2
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 fc84 	bl	8002ef0 <OSPI_WaitFlagStateUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80025ec:	7ffb      	ldrb	r3, [r7, #31]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d10c      	bne.n	800260c <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2202      	movs	r2, #2
 80025f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2202      	movs	r2, #2
 80025fe:	645a      	str	r2, [r3, #68]	; 0x44
 8002600:	e004      	b.n	800260c <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002602:	2301      	movs	r3, #1
 8002604:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2210      	movs	r2, #16
 800260a:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 800260c:	7ffb      	ldrb	r3, [r7, #31]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3720      	adds	r7, #32
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}

08002616 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002616:	b580      	push	{r7, lr}
 8002618:	b08c      	sub	sp, #48	; 0x30
 800261a:	af02      	add	r7, sp, #8
 800261c:	60f8      	str	r0, [r7, #12]
 800261e:	60b9      	str	r1, [r7, #8]
 8002620:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002622:	f7fe f82f 	bl	8000684 <HAL_GetTick>
 8002626:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	3350      	adds	r3, #80	; 0x50
 800262e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002636:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002640:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d106      	bne.n	8002656 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2208      	movs	r2, #8
 8002652:	649a      	str	r2, [r3, #72]	; 0x48
 8002654:	e07c      	b.n	8002750 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	2b04      	cmp	r3, #4
 800265c:	d172      	bne.n	8002744 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002664:	1c5a      	adds	r2, r3, #1
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	68ba      	ldr	r2, [r7, #8]
 8002676:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800268a:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002694:	d104      	bne.n	80026a0 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	649a      	str	r2, [r3, #72]	; 0x48
 800269e:	e011      	b.n	80026c4 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80026a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d004      	beq.n	80026ba <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	649a      	str	r2, [r3, #72]	; 0x48
 80026b8:	e004      	b.n	80026c4 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	697a      	ldr	r2, [r7, #20]
 80026c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	6a3b      	ldr	r3, [r7, #32]
 80026ca:	2201      	movs	r2, #1
 80026cc:	2106      	movs	r1, #6
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f000 fc0e 	bl	8002ef0 <OSPI_WaitFlagStateUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80026da:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d114      	bne.n	800270c <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026e6:	69fa      	ldr	r2, [r7, #28]
 80026e8:	7812      	ldrb	r2, [r2, #0]
 80026ea:	b2d2      	uxtb	r2, r2
 80026ec:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026f2:	1c5a      	adds	r2, r3, #1
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026fc:	1e5a      	subs	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002706:	2b00      	cmp	r3, #0
 8002708:	d1dc      	bne.n	80026c4 <HAL_OSPI_Receive+0xae>
 800270a:	e000      	b.n	800270e <HAL_OSPI_Receive+0xf8>
          break;
 800270c:	bf00      	nop

      if (status == HAL_OK)
 800270e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002712:	2b00      	cmp	r3, #0
 8002714:	d11c      	bne.n	8002750 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	6a3b      	ldr	r3, [r7, #32]
 800271c:	2201      	movs	r2, #1
 800271e:	2102      	movs	r1, #2
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 fbe5 	bl	8002ef0 <OSPI_WaitFlagStateUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800272c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10d      	bne.n	8002750 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2202      	movs	r2, #2
 800273a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2202      	movs	r2, #2
 8002740:	645a      	str	r2, [r3, #68]	; 0x44
 8002742:	e005      	b.n	8002750 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2210      	movs	r2, #16
 800274e:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8002750:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002754:	4618      	mov	r0, r3
 8002756:	3728      	adds	r7, #40	; 0x28
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800275c:	b580      	push	{r7, lr}
 800275e:	b08a      	sub	sp, #40	; 0x28
 8002760:	af02      	add	r7, sp, #8
 8002762:	60f8      	str	r0, [r7, #12]
 8002764:	60b9      	str	r1, [r7, #8]
 8002766:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002768:	f7fd ff8c 	bl	8000684 <HAL_GetTick>
 800276c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002774:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800277e:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	2b04      	cmp	r3, #4
 8002786:	d164      	bne.n	8002852 <HAL_OSPI_AutoPolling+0xf6>
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002790:	d15f      	bne.n	8002852 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	9300      	str	r3, [sp, #0]
 8002796:	69bb      	ldr	r3, [r7, #24]
 8002798:	2200      	movs	r2, #0
 800279a:	2120      	movs	r1, #32
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f000 fba7 	bl	8002ef0 <OSPI_WaitFlagStateUntilTimeout>
 80027a2:	4603      	mov	r3, r0
 80027a4:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80027a6:	7ffb      	ldrb	r3, [r7, #31]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d158      	bne.n	800285e <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	68ba      	ldr	r2, [r7, #8]
 80027b2:	6812      	ldr	r2, [r2, #0]
 80027b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	6852      	ldr	r2, [r2, #4]
 80027c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	68ba      	ldr	r2, [r7, #8]
 80027ca:	6912      	ldr	r2, [r2, #16]
 80027cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	6899      	ldr	r1, [r3, #8]
 80027de:	68bb      	ldr	r3, [r7, #8]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	430b      	orrs	r3, r1
 80027e4:	431a      	orrs	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80027ee:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80027f8:	d104      	bne.n	8002804 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	649a      	str	r2, [r3, #72]	; 0x48
 8002802:	e011      	b.n	8002828 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800280c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002810:	2b00      	cmp	r3, #0
 8002812:	d004      	beq.n	800281e <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	697a      	ldr	r2, [r7, #20]
 800281a:	649a      	str	r2, [r3, #72]	; 0x48
 800281c:	e004      	b.n	8002828 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	693a      	ldr	r2, [r7, #16]
 8002824:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	69bb      	ldr	r3, [r7, #24]
 800282e:	2201      	movs	r2, #1
 8002830:	2108      	movs	r1, #8
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fb5c 	bl	8002ef0 <OSPI_WaitFlagStateUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800283c:	7ffb      	ldrb	r3, [r7, #31]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d10d      	bne.n	800285e <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2208      	movs	r2, #8
 8002848:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2202      	movs	r2, #2
 800284e:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002850:	e005      	b.n	800285e <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2210      	movs	r2, #16
 800285a:	649a      	str	r2, [r3, #72]	; 0x48
 800285c:	e000      	b.n	8002860 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800285e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002860:	7ffb      	ldrb	r3, [r7, #31]
}
 8002862:	4618      	mov	r0, r3
 8002864:	3720      	adds	r7, #32
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
 8002872:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	683a      	ldr	r2, [r7, #0]
 8002878:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800287a:	2300      	movs	r3, #0
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b092      	sub	sp, #72	; 0x48
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002894:	2300      	movs	r3, #0
 8002896:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800289a:	2300      	movs	r3, #0
 800289c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a08      	ldr	r2, [pc, #32]	; (80028c8 <HAL_OSPIM_Config+0x40>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d105      	bne.n	80028b6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80028aa:	2300      	movs	r3, #0
 80028ac:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80028ae:	2301      	movs	r3, #1
 80028b0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80028b4:	e004      	b.n	80028c0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80028b6:	2301      	movs	r3, #1
 80028b8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80028c6:	e01f      	b.n	8002908 <HAL_OSPIM_Config+0x80>
 80028c8:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80028cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80028d0:	3301      	adds	r3, #1
 80028d2:	b2d8      	uxtb	r0, r3
 80028d4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80028d8:	f107 0114 	add.w	r1, r7, #20
 80028dc:	4613      	mov	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	4413      	add	r3, r2
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	4619      	mov	r1, r3
 80028e8:	f000 fc9c 	bl	8003224 <OSPIM_GetConfig>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d005      	beq.n	80028fe <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2208      	movs	r2, #8
 80028fc:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80028fe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002902:	3301      	adds	r3, #1
 8002904:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002908:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800290c:	2b01      	cmp	r3, #1
 800290e:	d9dd      	bls.n	80028cc <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8002910:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002914:	2b00      	cmp	r3, #0
 8002916:	f040 82de 	bne.w	8002ed6 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800291a:	4bc6      	ldr	r3, [pc, #792]	; (8002c34 <HAL_OSPIM_Config+0x3ac>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	2b00      	cmp	r3, #0
 8002924:	d00b      	beq.n	800293e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002926:	4bc3      	ldr	r3, [pc, #780]	; (8002c34 <HAL_OSPIM_Config+0x3ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4ac2      	ldr	r2, [pc, #776]	; (8002c34 <HAL_OSPIM_Config+0x3ac>)
 800292c:	f023 0301 	bic.w	r3, r3, #1
 8002930:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002932:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002936:	f043 0301 	orr.w	r3, r3, #1
 800293a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800293e:	4bbe      	ldr	r3, [pc, #760]	; (8002c38 <HAL_OSPIM_Config+0x3b0>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0301 	and.w	r3, r3, #1
 8002946:	2b00      	cmp	r3, #0
 8002948:	d00b      	beq.n	8002962 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800294a:	4bbb      	ldr	r3, [pc, #748]	; (8002c38 <HAL_OSPIM_Config+0x3b0>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4aba      	ldr	r2, [pc, #744]	; (8002c38 <HAL_OSPIM_Config+0x3b0>)
 8002950:	f023 0301 	bic.w	r3, r3, #1
 8002954:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002956:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800295a:	f043 0302 	orr.w	r3, r3, #2
 800295e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002962:	49b6      	ldr	r1, [pc, #728]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 8002964:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002966:	4613      	mov	r3, r2
 8002968:	009b      	lsls	r3, r3, #2
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	3348      	adds	r3, #72	; 0x48
 8002970:	443b      	add	r3, r7
 8002972:	3b2c      	subs	r3, #44	; 0x2c
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	3b01      	subs	r3, #1
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	6859      	ldr	r1, [r3, #4]
 800297e:	48af      	ldr	r0, [pc, #700]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 8002980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	3348      	adds	r3, #72	; 0x48
 800298c:	443b      	add	r3, r7
 800298e:	3b2c      	subs	r3, #44	; 0x2c
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3b01      	subs	r3, #1
 8002994:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4403      	add	r3, r0
 800299c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800299e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029a0:	4613      	mov	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	4413      	add	r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	3348      	adds	r3, #72	; 0x48
 80029aa:	443b      	add	r3, r7
 80029ac:	3b34      	subs	r3, #52	; 0x34
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	f000 80a1 	beq.w	8002af8 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80029b6:	49a1      	ldr	r1, [pc, #644]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 80029b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	3348      	adds	r3, #72	; 0x48
 80029c4:	443b      	add	r3, r7
 80029c6:	3b34      	subs	r3, #52	; 0x34
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	3b01      	subs	r3, #1
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	6859      	ldr	r1, [r3, #4]
 80029d2:	489a      	ldr	r0, [pc, #616]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 80029d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029d6:	4613      	mov	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	4413      	add	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	3348      	adds	r3, #72	; 0x48
 80029e0:	443b      	add	r3, r7
 80029e2:	3b34      	subs	r3, #52	; 0x34
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	3b01      	subs	r3, #1
 80029e8:	f021 0201 	bic.w	r2, r1, #1
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	4403      	add	r3, r0
 80029f0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80029f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80029f4:	4613      	mov	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	3348      	adds	r3, #72	; 0x48
 80029fe:	443b      	add	r3, r7
 8002a00:	3b30      	subs	r3, #48	; 0x30
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d01d      	beq.n	8002a44 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8002a08:	498c      	ldr	r1, [pc, #560]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 8002a0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	3348      	adds	r3, #72	; 0x48
 8002a16:	443b      	add	r3, r7
 8002a18:	3b30      	subs	r3, #48	; 0x30
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	440b      	add	r3, r1
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	4885      	ldr	r0, [pc, #532]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 8002a26:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	3348      	adds	r3, #72	; 0x48
 8002a32:	443b      	add	r3, r7
 8002a34:	3b30      	subs	r3, #48	; 0x30
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	3b01      	subs	r3, #1
 8002a3a:	f021 0210 	bic.w	r2, r1, #16
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4403      	add	r3, r0
 8002a42:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002a44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a46:	4613      	mov	r3, r2
 8002a48:	009b      	lsls	r3, r3, #2
 8002a4a:	4413      	add	r3, r2
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	3348      	adds	r3, #72	; 0x48
 8002a50:	443b      	add	r3, r7
 8002a52:	3b28      	subs	r3, #40	; 0x28
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d021      	beq.n	8002a9e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8002a5a:	4978      	ldr	r1, [pc, #480]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 8002a5c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a5e:	4613      	mov	r3, r2
 8002a60:	009b      	lsls	r3, r3, #2
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	3348      	adds	r3, #72	; 0x48
 8002a68:	443b      	add	r3, r7
 8002a6a:	3b28      	subs	r3, #40	; 0x28
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	f003 0301 	and.w	r3, r3, #1
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	440b      	add	r3, r1
 8002a78:	6859      	ldr	r1, [r3, #4]
 8002a7a:	4870      	ldr	r0, [pc, #448]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 8002a7c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002a7e:	4613      	mov	r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	3348      	adds	r3, #72	; 0x48
 8002a88:	443b      	add	r3, r7
 8002a8a:	3b28      	subs	r3, #40	; 0x28
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	f003 0301 	and.w	r3, r3, #1
 8002a94:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	4403      	add	r3, r0
 8002a9c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002a9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	3348      	adds	r3, #72	; 0x48
 8002aaa:	443b      	add	r3, r7
 8002aac:	3b24      	subs	r3, #36	; 0x24
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d021      	beq.n	8002af8 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8002ab4:	4961      	ldr	r1, [pc, #388]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 8002ab6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ab8:	4613      	mov	r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	3348      	adds	r3, #72	; 0x48
 8002ac2:	443b      	add	r3, r7
 8002ac4:	3b24      	subs	r3, #36	; 0x24
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	f003 0301 	and.w	r3, r3, #1
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	6859      	ldr	r1, [r3, #4]
 8002ad4:	4859      	ldr	r0, [pc, #356]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 8002ad6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	3348      	adds	r3, #72	; 0x48
 8002ae2:	443b      	add	r3, r7
 8002ae4:	3b24      	subs	r3, #36	; 0x24
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	4403      	add	r3, r0
 8002af6:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	6819      	ldr	r1, [r3, #0]
 8002afc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002b00:	4613      	mov	r3, r2
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	3348      	adds	r3, #72	; 0x48
 8002b0a:	443b      	add	r3, r7
 8002b0c:	3b34      	subs	r3, #52	; 0x34
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4299      	cmp	r1, r3
 8002b12:	d038      	beq.n	8002b86 <HAL_OSPIM_Config+0x2fe>
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	6859      	ldr	r1, [r3, #4]
 8002b18:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002b1c:	4613      	mov	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	4413      	add	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	3348      	adds	r3, #72	; 0x48
 8002b26:	443b      	add	r3, r7
 8002b28:	3b30      	subs	r3, #48	; 0x30
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4299      	cmp	r1, r3
 8002b2e:	d02a      	beq.n	8002b86 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	6899      	ldr	r1, [r3, #8]
 8002b34:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	3348      	adds	r3, #72	; 0x48
 8002b42:	443b      	add	r3, r7
 8002b44:	3b2c      	subs	r3, #44	; 0x2c
 8002b46:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002b48:	4299      	cmp	r1, r3
 8002b4a:	d01c      	beq.n	8002b86 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	68d9      	ldr	r1, [r3, #12]
 8002b50:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002b54:	4613      	mov	r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	4413      	add	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	3348      	adds	r3, #72	; 0x48
 8002b5e:	443b      	add	r3, r7
 8002b60:	3b28      	subs	r3, #40	; 0x28
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4299      	cmp	r1, r3
 8002b66:	d00e      	beq.n	8002b86 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	6919      	ldr	r1, [r3, #16]
 8002b6c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002b70:	4613      	mov	r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	3348      	adds	r3, #72	; 0x48
 8002b7a:	443b      	add	r3, r7
 8002b7c:	3b24      	subs	r3, #36	; 0x24
 8002b7e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002b80:	4299      	cmp	r1, r3
 8002b82:	f040 80d3 	bne.w	8002d2c <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8002b86:	492d      	ldr	r1, [pc, #180]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 8002b88:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	3348      	adds	r3, #72	; 0x48
 8002b96:	443b      	add	r3, r7
 8002b98:	3b34      	subs	r3, #52	; 0x34
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	6859      	ldr	r1, [r3, #4]
 8002ba4:	4825      	ldr	r0, [pc, #148]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 8002ba6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002baa:	4613      	mov	r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	4413      	add	r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	3348      	adds	r3, #72	; 0x48
 8002bb4:	443b      	add	r3, r7
 8002bb6:	3b34      	subs	r3, #52	; 0x34
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	f021 0201 	bic.w	r2, r1, #1
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	4403      	add	r3, r0
 8002bc4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002bc6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	3348      	adds	r3, #72	; 0x48
 8002bd4:	443b      	add	r3, r7
 8002bd6:	3b30      	subs	r3, #48	; 0x30
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d01f      	beq.n	8002c1e <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8002bde:	4917      	ldr	r1, [pc, #92]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 8002be0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002be4:	4613      	mov	r3, r2
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	3348      	adds	r3, #72	; 0x48
 8002bee:	443b      	add	r3, r7
 8002bf0:	3b30      	subs	r3, #48	; 0x30
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	009b      	lsls	r3, r3, #2
 8002bf8:	440b      	add	r3, r1
 8002bfa:	6859      	ldr	r1, [r3, #4]
 8002bfc:	480f      	ldr	r0, [pc, #60]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 8002bfe:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002c02:	4613      	mov	r3, r2
 8002c04:	009b      	lsls	r3, r3, #2
 8002c06:	4413      	add	r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	3348      	adds	r3, #72	; 0x48
 8002c0c:	443b      	add	r3, r7
 8002c0e:	3b30      	subs	r3, #48	; 0x30
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	f021 0210 	bic.w	r2, r1, #16
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4403      	add	r3, r0
 8002c1c:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002c1e:	4907      	ldr	r1, [pc, #28]	; (8002c3c <HAL_OSPIM_Config+0x3b4>)
 8002c20:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002c24:	4613      	mov	r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	4413      	add	r3, r2
 8002c2a:	009b      	lsls	r3, r3, #2
 8002c2c:	3348      	adds	r3, #72	; 0x48
 8002c2e:	443b      	add	r3, r7
 8002c30:	3b2c      	subs	r3, #44	; 0x2c
 8002c32:	e005      	b.n	8002c40 <HAL_OSPIM_Config+0x3b8>
 8002c34:	a0001000 	.word	0xa0001000
 8002c38:	a0001400 	.word	0xa0001400
 8002c3c:	50061c00 	.word	0x50061c00
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	3b01      	subs	r3, #1
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	6859      	ldr	r1, [r3, #4]
 8002c4a:	48a6      	ldr	r0, [pc, #664]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002c4c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	3348      	adds	r3, #72	; 0x48
 8002c5a:	443b      	add	r3, r7
 8002c5c:	3b2c      	subs	r3, #44	; 0x2c
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4403      	add	r3, r0
 8002c6a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002c6c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	3348      	adds	r3, #72	; 0x48
 8002c7a:	443b      	add	r3, r7
 8002c7c:	3b28      	subs	r3, #40	; 0x28
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d023      	beq.n	8002ccc <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002c84:	4997      	ldr	r1, [pc, #604]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002c86:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	3348      	adds	r3, #72	; 0x48
 8002c94:	443b      	add	r3, r7
 8002c96:	3b28      	subs	r3, #40	; 0x28
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	6859      	ldr	r1, [r3, #4]
 8002ca6:	488f      	ldr	r0, [pc, #572]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002ca8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	3348      	adds	r3, #72	; 0x48
 8002cb6:	443b      	add	r3, r7
 8002cb8:	3b28      	subs	r3, #40	; 0x28
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8002cc6:	009b      	lsls	r3, r3, #2
 8002cc8:	4403      	add	r3, r0
 8002cca:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002ccc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	3348      	adds	r3, #72	; 0x48
 8002cda:	443b      	add	r3, r7
 8002cdc:	3b24      	subs	r3, #36	; 0x24
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d023      	beq.n	8002d2c <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002ce4:	497f      	ldr	r1, [pc, #508]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002ce6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002cea:	4613      	mov	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4413      	add	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	3348      	adds	r3, #72	; 0x48
 8002cf4:	443b      	add	r3, r7
 8002cf6:	3b24      	subs	r3, #36	; 0x24
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	3b01      	subs	r3, #1
 8002cfc:	f003 0301 	and.w	r3, r3, #1
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	6859      	ldr	r1, [r3, #4]
 8002d06:	4877      	ldr	r0, [pc, #476]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002d08:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002d0c:	4613      	mov	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	4413      	add	r3, r2
 8002d12:	009b      	lsls	r3, r3, #2
 8002d14:	3348      	adds	r3, #72	; 0x48
 8002d16:	443b      	add	r3, r7
 8002d18:	3b24      	subs	r3, #36	; 0x24
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	3b01      	subs	r3, #1
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4403      	add	r3, r0
 8002d2a:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002d2c:	4a6d      	ldr	r2, [pc, #436]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002d2e:	68bb      	ldr	r3, [r7, #8]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	009b      	lsls	r3, r3, #2
 8002d36:	4413      	add	r3, r2
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d40:	025b      	lsls	r3, r3, #9
 8002d42:	431a      	orrs	r2, r3
 8002d44:	4967      	ldr	r1, [pc, #412]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	3b01      	subs	r3, #1
 8002d4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	440b      	add	r3, r1
 8002d54:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002d56:	4a63      	ldr	r2, [pc, #396]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	f023 0203 	bic.w	r2, r3, #3
 8002d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d6a:	005b      	lsls	r3, r3, #1
 8002d6c:	431a      	orrs	r2, r3
 8002d6e:	495d      	ldr	r1, [pc, #372]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3b01      	subs	r3, #1
 8002d76:	f042 0201 	orr.w	r2, r2, #1
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	440b      	add	r3, r1
 8002d7e:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d014      	beq.n	8002db2 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8002d88:	4a56      	ldr	r2, [pc, #344]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002d9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d9c:	015b      	lsls	r3, r3, #5
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	4950      	ldr	r1, [pc, #320]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	f042 0210 	orr.w	r2, r2, #16
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	440b      	add	r3, r1
 8002db0:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d019      	beq.n	8002df2 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002dbe:	4a49      	ldr	r2, [pc, #292]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	009b      	lsls	r3, r3, #2
 8002dcc:	4413      	add	r3, r2
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dd6:	049b      	lsls	r3, r3, #18
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	4942      	ldr	r1, [pc, #264]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002ddc:	68bb      	ldr	r3, [r7, #8]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	605a      	str	r2, [r3, #4]
 8002df0:	e01c      	b.n	8002e2c <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	68db      	ldr	r3, [r3, #12]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d018      	beq.n	8002e2c <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002dfa:	4a3a      	ldr	r2, [pc, #232]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	3b01      	subs	r3, #1
 8002e02:	f003 0301 	and.w	r3, r3, #1
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	4413      	add	r3, r2
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002e10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e12:	069b      	lsls	r3, r3, #26
 8002e14:	431a      	orrs	r2, r3
 8002e16:	4933      	ldr	r1, [pc, #204]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	f003 0301 	and.w	r3, r3, #1
 8002e22:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	440b      	add	r3, r1
 8002e2a:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d019      	beq.n	8002e6c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002e38:	4a2a      	ldr	r2, [pc, #168]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4413      	add	r3, r2
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e50:	049b      	lsls	r3, r3, #18
 8002e52:	431a      	orrs	r2, r3
 8002e54:	4923      	ldr	r1, [pc, #140]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	605a      	str	r2, [r3, #4]
 8002e6a:	e01c      	b.n	8002ea6 <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	691b      	ldr	r3, [r3, #16]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d018      	beq.n	8002ea6 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002e74:	4a1b      	ldr	r2, [pc, #108]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	3b01      	subs	r3, #1
 8002e7c:	f003 0301 	and.w	r3, r3, #1
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	4413      	add	r3, r2
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002e8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e8c:	069b      	lsls	r3, r3, #26
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	4914      	ldr	r1, [pc, #80]	; (8002ee4 <HAL_OSPIM_Config+0x65c>)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	3b01      	subs	r3, #1
 8002e98:	f003 0301 	and.w	r3, r3, #1
 8002e9c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8002ea0:	009b      	lsls	r3, r3, #2
 8002ea2:	440b      	add	r3, r1
 8002ea4:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002ea6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002eaa:	f003 0301 	and.w	r3, r3, #1
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d005      	beq.n	8002ebe <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002eb2:	4b0d      	ldr	r3, [pc, #52]	; (8002ee8 <HAL_OSPIM_Config+0x660>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a0c      	ldr	r2, [pc, #48]	; (8002ee8 <HAL_OSPIM_Config+0x660>)
 8002eb8:	f043 0301 	orr.w	r3, r3, #1
 8002ebc:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002ebe:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002eca:	4b08      	ldr	r3, [pc, #32]	; (8002eec <HAL_OSPIM_Config+0x664>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a07      	ldr	r2, [pc, #28]	; (8002eec <HAL_OSPIM_Config+0x664>)
 8002ed0:	f043 0301 	orr.w	r3, r3, #1
 8002ed4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002ed6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3748      	adds	r7, #72	; 0x48
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	50061c00 	.word	0x50061c00
 8002ee8:	a0001000 	.word	0xa0001000
 8002eec:	a0001400 	.word	0xa0001400

08002ef0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	60f8      	str	r0, [r7, #12]
 8002ef8:	60b9      	str	r1, [r7, #8]
 8002efa:	603b      	str	r3, [r7, #0]
 8002efc:	4613      	mov	r3, r2
 8002efe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002f00:	e01a      	b.n	8002f38 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f08:	d016      	beq.n	8002f38 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f0a:	f7fd fbbb 	bl	8000684 <HAL_GetTick>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	429a      	cmp	r2, r3
 8002f18:	d302      	bcc.n	8002f20 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d10b      	bne.n	8002f38 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002f26:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2c:	f043 0201 	orr.w	r2, r3, #1
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e00e      	b.n	8002f56 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6a1a      	ldr	r2, [r3, #32]
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	4013      	ands	r3, r2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	bf14      	ite	ne
 8002f46:	2301      	movne	r3, #1
 8002f48:	2300      	moveq	r3, #0
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	461a      	mov	r2, r3
 8002f4e:	79fb      	ldrb	r3, [r7, #7]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d1d6      	bne.n	8002f02 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f54:	2300      	movs	r3, #0
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3710      	adds	r7, #16
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
	...

08002f60 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f7c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10a      	bne.n	8002f9c <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d114      	bne.n	8002fce <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002fac:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002fb6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002fc0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002fca:	60fb      	str	r3, [r7, #12]
 8002fcc:	e013      	b.n	8002ff6 <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002fd6:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002fe0:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002fea:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002ff4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	431a      	orrs	r2, r3
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003008:	2b00      	cmp	r3, #0
 800300a:	d012      	beq.n	8003032 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003024:	4319      	orrs	r1, r3
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302a:	430b      	orrs	r3, r1
 800302c:	431a      	orrs	r2, r3
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f023 021f 	bic.w	r2, r3, #31
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	431a      	orrs	r2, r3
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003048:	2b00      	cmp	r3, #0
 800304a:	d009      	beq.n	8003060 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d105      	bne.n	8003060 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	3a01      	subs	r2, #1
 800305e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	2b00      	cmp	r3, #0
 8003066:	f000 8099 	beq.w	800319c <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d055      	beq.n	800311e <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003076:	2b00      	cmp	r3, #0
 8003078:	d01e      	beq.n	80030b8 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 800307a:	69bb      	ldr	r3, [r7, #24]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	4b68      	ldr	r3, [pc, #416]	; (8003220 <OSPI_ConfigCmd+0x2c0>)
 8003080:	4013      	ands	r3, r2
 8003082:	683a      	ldr	r2, [r7, #0]
 8003084:	68d1      	ldr	r1, [r2, #12]
 8003086:	683a      	ldr	r2, [r7, #0]
 8003088:	6952      	ldr	r2, [r2, #20]
 800308a:	4311      	orrs	r1, r2
 800308c:	683a      	ldr	r2, [r7, #0]
 800308e:	6912      	ldr	r2, [r2, #16]
 8003090:	4311      	orrs	r1, r2
 8003092:	683a      	ldr	r2, [r7, #0]
 8003094:	69d2      	ldr	r2, [r2, #28]
 8003096:	4311      	orrs	r1, r2
 8003098:	683a      	ldr	r2, [r7, #0]
 800309a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800309c:	4311      	orrs	r1, r2
 800309e:	683a      	ldr	r2, [r7, #0]
 80030a0:	6a12      	ldr	r2, [r2, #32]
 80030a2:	4311      	orrs	r1, r2
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80030a8:	4311      	orrs	r1, r2
 80030aa:	683a      	ldr	r2, [r7, #0]
 80030ac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80030ae:	430a      	orrs	r2, r1
 80030b0:	431a      	orrs	r2, r3
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	e028      	b.n	800310a <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80030c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	68d1      	ldr	r1, [r2, #12]
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	6952      	ldr	r2, [r2, #20]
 80030cc:	4311      	orrs	r1, r2
 80030ce:	683a      	ldr	r2, [r7, #0]
 80030d0:	6912      	ldr	r2, [r2, #16]
 80030d2:	4311      	orrs	r1, r2
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	69d2      	ldr	r2, [r2, #28]
 80030d8:	4311      	orrs	r1, r2
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80030de:	4311      	orrs	r1, r2
 80030e0:	683a      	ldr	r2, [r7, #0]
 80030e2:	6a12      	ldr	r2, [r2, #32]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	431a      	orrs	r2, r3
 80030e8:	69bb      	ldr	r3, [r7, #24]
 80030ea:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030f4:	d109      	bne.n	800310a <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 80030fa:	2b08      	cmp	r3, #8
 80030fc:	d105      	bne.n	800310a <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003106:	69bb      	ldr	r3, [r7, #24]
 8003108:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	6992      	ldr	r2, [r2, #24]
 800311a:	649a      	str	r2, [r3, #72]	; 0x48
 800311c:	e078      	b.n	8003210 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003122:	2b00      	cmp	r3, #0
 8003124:	d017      	beq.n	8003156 <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800312e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	68d1      	ldr	r1, [r2, #12]
 8003136:	683a      	ldr	r2, [r7, #0]
 8003138:	6952      	ldr	r2, [r2, #20]
 800313a:	4311      	orrs	r1, r2
 800313c:	683a      	ldr	r2, [r7, #0]
 800313e:	6912      	ldr	r2, [r2, #16]
 8003140:	4311      	orrs	r1, r2
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003146:	4311      	orrs	r1, r2
 8003148:	683a      	ldr	r2, [r7, #0]
 800314a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800314c:	430a      	orrs	r2, r1
 800314e:	431a      	orrs	r2, r3
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	601a      	str	r2, [r3, #0]
 8003154:	e01d      	b.n	8003192 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8003156:	69bb      	ldr	r3, [r7, #24]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	68d9      	ldr	r1, [r3, #12]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	4319      	orrs	r1, r3
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	691b      	ldr	r3, [r3, #16]
 800316c:	430b      	orrs	r3, r1
 800316e:	431a      	orrs	r2, r3
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003178:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800317c:	d109      	bne.n	8003192 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003182:	2b08      	cmp	r3, #8
 8003184:	d105      	bne.n	8003192 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	e039      	b.n	8003210 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	69db      	ldr	r3, [r3, #28]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d030      	beq.n	8003206 <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d017      	beq.n	80031dc <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80031b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80031b8:	683a      	ldr	r2, [r7, #0]
 80031ba:	69d1      	ldr	r1, [r2, #28]
 80031bc:	683a      	ldr	r2, [r7, #0]
 80031be:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031c0:	4311      	orrs	r1, r2
 80031c2:	683a      	ldr	r2, [r7, #0]
 80031c4:	6a12      	ldr	r2, [r2, #32]
 80031c6:	4311      	orrs	r1, r2
 80031c8:	683a      	ldr	r2, [r7, #0]
 80031ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80031cc:	4311      	orrs	r1, r2
 80031ce:	683a      	ldr	r2, [r7, #0]
 80031d0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80031d2:	430a      	orrs	r2, r1
 80031d4:	431a      	orrs	r2, r3
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	e00e      	b.n	80031fa <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 80031dc:	69bb      	ldr	r3, [r7, #24]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	69d9      	ldr	r1, [r3, #28]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ec:	4319      	orrs	r1, r3
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	6a1b      	ldr	r3, [r3, #32]
 80031f2:	430b      	orrs	r3, r1
 80031f4:	431a      	orrs	r2, r3
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	6992      	ldr	r2, [r2, #24]
 8003202:	649a      	str	r2, [r3, #72]	; 0x48
 8003204:	e004      	b.n	8003210 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2208      	movs	r2, #8
 800320e:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003210:	7ffb      	ldrb	r3, [r7, #31]
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	f0ffc0c0 	.word	0xf0ffc0c0

08003224 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	4603      	mov	r3, r0
 800322c:	6039      	str	r1, [r7, #0]
 800322e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003230:	2300      	movs	r3, #0
 8003232:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003238:	79fb      	ldrb	r3, [r7, #7]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d005      	beq.n	800324a <OSPIM_GetConfig+0x26>
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	2b02      	cmp	r3, #2
 8003242:	d802      	bhi.n	800324a <OSPIM_GetConfig+0x26>
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	75fb      	strb	r3, [r7, #23]
 800324e:	e08e      	b.n	800336e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	2200      	movs	r2, #0
 800325a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2200      	movs	r2, #0
 8003260:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2200      	movs	r2, #0
 8003266:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	2200      	movs	r2, #0
 800326c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	2b02      	cmp	r3, #2
 8003272:	d101      	bne.n	8003278 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003274:	4b41      	ldr	r3, [pc, #260]	; (800337c <OSPIM_GetConfig+0x158>)
 8003276:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
 800327c:	e074      	b.n	8003368 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 800327e:	4a40      	ldr	r2, [pc, #256]	; (8003380 <OSPIM_GetConfig+0x15c>)
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	4413      	add	r3, r2
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f003 0301 	and.w	r3, r3, #1
 8003290:	2b00      	cmp	r3, #0
 8003292:	d00a      	beq.n	80032aa <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003294:	68ba      	ldr	r2, [r7, #8]
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4053      	eors	r3, r2
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d103      	bne.n	80032aa <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	4053      	eors	r3, r2
 80032ba:	f003 0320 	and.w	r3, r3, #32
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d103      	bne.n	80032ca <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00a      	beq.n	80032ea <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 80032d4:	68ba      	ldr	r2, [r7, #8]
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	4053      	eors	r3, r2
 80032da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d103      	bne.n	80032ea <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	1c5a      	adds	r2, r3, #1
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d018      	beq.n	8003326 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 80032f4:	68ba      	ldr	r2, [r7, #8]
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	4053      	eors	r3, r2
 80032fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d111      	bne.n	8003326 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d106      	bne.n	800331a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3301      	adds	r3, #1
 8003310:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	60da      	str	r2, [r3, #12]
 8003318:	e005      	b.n	8003326 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	3301      	adds	r3, #1
 800331e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d018      	beq.n	8003362 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4053      	eors	r3, r2
 8003336:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d111      	bne.n	8003362 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d106      	bne.n	8003356 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	3301      	adds	r3, #1
 800334c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	611a      	str	r2, [r3, #16]
 8003354:	e005      	b.n	8003362 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	3301      	adds	r3, #1
 800335a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	3301      	adds	r3, #1
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b01      	cmp	r3, #1
 800336c:	d987      	bls.n	800327e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800336e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003370:	4618      	mov	r0, r3
 8003372:	371c      	adds	r7, #28
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr
 800337c:	04040222 	.word	0x04040222
 8003380:	50061c00 	.word	0x50061c00

08003384 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003388:	4b0d      	ldr	r3, [pc, #52]	; (80033c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003394:	d102      	bne.n	800339c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800339a:	e00b      	b.n	80033b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800339e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033aa:	d102      	bne.n	80033b2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80033ac:	f44f 7300 	mov.w	r3, #512	; 0x200
 80033b0:	e000      	b.n	80033b4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80033b2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr
 80033be:	bf00      	nop
 80033c0:	40007000 	.word	0x40007000

080033c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d141      	bne.n	8003456 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80033d2:	4b4b      	ldr	r3, [pc, #300]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80033da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033de:	d131      	bne.n	8003444 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80033e0:	4b47      	ldr	r3, [pc, #284]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033e6:	4a46      	ldr	r2, [pc, #280]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80033f0:	4b43      	ldr	r3, [pc, #268]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80033f8:	4a41      	ldr	r2, [pc, #260]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80033fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033fe:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003400:	4b40      	ldr	r3, [pc, #256]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2232      	movs	r2, #50	; 0x32
 8003406:	fb02 f303 	mul.w	r3, r2, r3
 800340a:	4a3f      	ldr	r2, [pc, #252]	; (8003508 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800340c:	fba2 2303 	umull	r2, r3, r2, r3
 8003410:	0c9b      	lsrs	r3, r3, #18
 8003412:	3301      	adds	r3, #1
 8003414:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003416:	e002      	b.n	800341e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	3b01      	subs	r3, #1
 800341c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800341e:	4b38      	ldr	r3, [pc, #224]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003420:	695b      	ldr	r3, [r3, #20]
 8003422:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003426:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800342a:	d102      	bne.n	8003432 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d1f2      	bne.n	8003418 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003432:	4b33      	ldr	r3, [pc, #204]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003434:	695b      	ldr	r3, [r3, #20]
 8003436:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800343a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800343e:	d158      	bne.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e057      	b.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003444:	4b2e      	ldr	r3, [pc, #184]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003446:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800344a:	4a2d      	ldr	r2, [pc, #180]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800344c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003450:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003454:	e04d      	b.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800345c:	d141      	bne.n	80034e2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800345e:	4b28      	ldr	r3, [pc, #160]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003466:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800346a:	d131      	bne.n	80034d0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800346c:	4b24      	ldr	r3, [pc, #144]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800346e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003472:	4a23      	ldr	r2, [pc, #140]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003474:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003478:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800347c:	4b20      	ldr	r3, [pc, #128]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003484:	4a1e      	ldr	r2, [pc, #120]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003486:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800348a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800348c:	4b1d      	ldr	r3, [pc, #116]	; (8003504 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2232      	movs	r2, #50	; 0x32
 8003492:	fb02 f303 	mul.w	r3, r2, r3
 8003496:	4a1c      	ldr	r2, [pc, #112]	; (8003508 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003498:	fba2 2303 	umull	r2, r3, r2, r3
 800349c:	0c9b      	lsrs	r3, r3, #18
 800349e:	3301      	adds	r3, #1
 80034a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034a2:	e002      	b.n	80034aa <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3b01      	subs	r3, #1
 80034a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80034aa:	4b15      	ldr	r3, [pc, #84]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034b6:	d102      	bne.n	80034be <HAL_PWREx_ControlVoltageScaling+0xfa>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d1f2      	bne.n	80034a4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80034be:	4b10      	ldr	r3, [pc, #64]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80034ca:	d112      	bne.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e011      	b.n	80034f4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80034d0:	4b0b      	ldr	r3, [pc, #44]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034d6:	4a0a      	ldr	r2, [pc, #40]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80034e0:	e007      	b.n	80034f2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80034e2:	4b07      	ldr	r3, [pc, #28]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80034ea:	4a05      	ldr	r2, [pc, #20]	; (8003500 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80034ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034f0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
}
 80034f4:	4618      	mov	r0, r3
 80034f6:	3714      	adds	r7, #20
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr
 8003500:	40007000 	.word	0x40007000
 8003504:	20000490 	.word	0x20000490
 8003508:	431bde83 	.word	0x431bde83

0800350c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b088      	sub	sp, #32
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d102      	bne.n	8003520 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	f000 bc08 	b.w	8003d30 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003520:	4b96      	ldr	r3, [pc, #600]	; (800377c <HAL_RCC_OscConfig+0x270>)
 8003522:	689b      	ldr	r3, [r3, #8]
 8003524:	f003 030c 	and.w	r3, r3, #12
 8003528:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800352a:	4b94      	ldr	r3, [pc, #592]	; (800377c <HAL_RCC_OscConfig+0x270>)
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0310 	and.w	r3, r3, #16
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80e4 	beq.w	800370a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003542:	69bb      	ldr	r3, [r7, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d007      	beq.n	8003558 <HAL_RCC_OscConfig+0x4c>
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b0c      	cmp	r3, #12
 800354c:	f040 808b 	bne.w	8003666 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	2b01      	cmp	r3, #1
 8003554:	f040 8087 	bne.w	8003666 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003558:	4b88      	ldr	r3, [pc, #544]	; (800377c <HAL_RCC_OscConfig+0x270>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_RCC_OscConfig+0x64>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	699b      	ldr	r3, [r3, #24]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e3df      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6a1a      	ldr	r2, [r3, #32]
 8003574:	4b81      	ldr	r3, [pc, #516]	; (800377c <HAL_RCC_OscConfig+0x270>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0308 	and.w	r3, r3, #8
 800357c:	2b00      	cmp	r3, #0
 800357e:	d004      	beq.n	800358a <HAL_RCC_OscConfig+0x7e>
 8003580:	4b7e      	ldr	r3, [pc, #504]	; (800377c <HAL_RCC_OscConfig+0x270>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003588:	e005      	b.n	8003596 <HAL_RCC_OscConfig+0x8a>
 800358a:	4b7c      	ldr	r3, [pc, #496]	; (800377c <HAL_RCC_OscConfig+0x270>)
 800358c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003590:	091b      	lsrs	r3, r3, #4
 8003592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003596:	4293      	cmp	r3, r2
 8003598:	d223      	bcs.n	80035e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	4618      	mov	r0, r3
 80035a0:	f000 fdcc 	bl	800413c <RCC_SetFlashLatencyFromMSIRange>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e3c0      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035ae:	4b73      	ldr	r3, [pc, #460]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a72      	ldr	r2, [pc, #456]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80035b4:	f043 0308 	orr.w	r3, r3, #8
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	4b70      	ldr	r3, [pc, #448]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6a1b      	ldr	r3, [r3, #32]
 80035c6:	496d      	ldr	r1, [pc, #436]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80035c8:	4313      	orrs	r3, r2
 80035ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80035cc:	4b6b      	ldr	r3, [pc, #428]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	69db      	ldr	r3, [r3, #28]
 80035d8:	021b      	lsls	r3, r3, #8
 80035da:	4968      	ldr	r1, [pc, #416]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	604b      	str	r3, [r1, #4]
 80035e0:	e025      	b.n	800362e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80035e2:	4b66      	ldr	r3, [pc, #408]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a65      	ldr	r2, [pc, #404]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80035e8:	f043 0308 	orr.w	r3, r3, #8
 80035ec:	6013      	str	r3, [r2, #0]
 80035ee:	4b63      	ldr	r3, [pc, #396]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4960      	ldr	r1, [pc, #384]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80035fc:	4313      	orrs	r3, r2
 80035fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003600:	4b5e      	ldr	r3, [pc, #376]	; (800377c <HAL_RCC_OscConfig+0x270>)
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	69db      	ldr	r3, [r3, #28]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	495b      	ldr	r1, [pc, #364]	; (800377c <HAL_RCC_OscConfig+0x270>)
 8003610:	4313      	orrs	r3, r2
 8003612:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d109      	bne.n	800362e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fd8c 	bl	800413c <RCC_SetFlashLatencyFromMSIRange>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d001      	beq.n	800362e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800362a:	2301      	movs	r3, #1
 800362c:	e380      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800362e:	f000 fcc1 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003632:	4602      	mov	r2, r0
 8003634:	4b51      	ldr	r3, [pc, #324]	; (800377c <HAL_RCC_OscConfig+0x270>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	091b      	lsrs	r3, r3, #4
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	4950      	ldr	r1, [pc, #320]	; (8003780 <HAL_RCC_OscConfig+0x274>)
 8003640:	5ccb      	ldrb	r3, [r1, r3]
 8003642:	f003 031f 	and.w	r3, r3, #31
 8003646:	fa22 f303 	lsr.w	r3, r2, r3
 800364a:	4a4e      	ldr	r2, [pc, #312]	; (8003784 <HAL_RCC_OscConfig+0x278>)
 800364c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800364e:	4b4e      	ldr	r3, [pc, #312]	; (8003788 <HAL_RCC_OscConfig+0x27c>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4618      	mov	r0, r3
 8003654:	f7fc ffc6 	bl	80005e4 <HAL_InitTick>
 8003658:	4603      	mov	r3, r0
 800365a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d052      	beq.n	8003708 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003662:	7bfb      	ldrb	r3, [r7, #15]
 8003664:	e364      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d032      	beq.n	80036d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800366e:	4b43      	ldr	r3, [pc, #268]	; (800377c <HAL_RCC_OscConfig+0x270>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a42      	ldr	r2, [pc, #264]	; (800377c <HAL_RCC_OscConfig+0x270>)
 8003674:	f043 0301 	orr.w	r3, r3, #1
 8003678:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800367a:	f7fd f803 	bl	8000684 <HAL_GetTick>
 800367e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003680:	e008      	b.n	8003694 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003682:	f7fc ffff 	bl	8000684 <HAL_GetTick>
 8003686:	4602      	mov	r2, r0
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	1ad3      	subs	r3, r2, r3
 800368c:	2b02      	cmp	r3, #2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e34d      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003694:	4b39      	ldr	r3, [pc, #228]	; (800377c <HAL_RCC_OscConfig+0x270>)
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0302 	and.w	r3, r3, #2
 800369c:	2b00      	cmp	r3, #0
 800369e:	d0f0      	beq.n	8003682 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80036a0:	4b36      	ldr	r3, [pc, #216]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a35      	ldr	r2, [pc, #212]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80036a6:	f043 0308 	orr.w	r3, r3, #8
 80036aa:	6013      	str	r3, [r2, #0]
 80036ac:	4b33      	ldr	r3, [pc, #204]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	4930      	ldr	r1, [pc, #192]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80036be:	4b2f      	ldr	r3, [pc, #188]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	69db      	ldr	r3, [r3, #28]
 80036ca:	021b      	lsls	r3, r3, #8
 80036cc:	492b      	ldr	r1, [pc, #172]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80036ce:	4313      	orrs	r3, r2
 80036d0:	604b      	str	r3, [r1, #4]
 80036d2:	e01a      	b.n	800370a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80036d4:	4b29      	ldr	r3, [pc, #164]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a28      	ldr	r2, [pc, #160]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80036da:	f023 0301 	bic.w	r3, r3, #1
 80036de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80036e0:	f7fc ffd0 	bl	8000684 <HAL_GetTick>
 80036e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036e6:	e008      	b.n	80036fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80036e8:	f7fc ffcc 	bl	8000684 <HAL_GetTick>
 80036ec:	4602      	mov	r2, r0
 80036ee:	693b      	ldr	r3, [r7, #16]
 80036f0:	1ad3      	subs	r3, r2, r3
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d901      	bls.n	80036fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80036f6:	2303      	movs	r3, #3
 80036f8:	e31a      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80036fa:	4b20      	ldr	r3, [pc, #128]	; (800377c <HAL_RCC_OscConfig+0x270>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0302 	and.w	r3, r3, #2
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1f0      	bne.n	80036e8 <HAL_RCC_OscConfig+0x1dc>
 8003706:	e000      	b.n	800370a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003708:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0301 	and.w	r3, r3, #1
 8003712:	2b00      	cmp	r3, #0
 8003714:	d073      	beq.n	80037fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b08      	cmp	r3, #8
 800371a:	d005      	beq.n	8003728 <HAL_RCC_OscConfig+0x21c>
 800371c:	69bb      	ldr	r3, [r7, #24]
 800371e:	2b0c      	cmp	r3, #12
 8003720:	d10e      	bne.n	8003740 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b03      	cmp	r3, #3
 8003726:	d10b      	bne.n	8003740 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003728:	4b14      	ldr	r3, [pc, #80]	; (800377c <HAL_RCC_OscConfig+0x270>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003730:	2b00      	cmp	r3, #0
 8003732:	d063      	beq.n	80037fc <HAL_RCC_OscConfig+0x2f0>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d15f      	bne.n	80037fc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800373c:	2301      	movs	r3, #1
 800373e:	e2f7      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003748:	d106      	bne.n	8003758 <HAL_RCC_OscConfig+0x24c>
 800374a:	4b0c      	ldr	r3, [pc, #48]	; (800377c <HAL_RCC_OscConfig+0x270>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4a0b      	ldr	r2, [pc, #44]	; (800377c <HAL_RCC_OscConfig+0x270>)
 8003750:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003754:	6013      	str	r3, [r2, #0]
 8003756:	e025      	b.n	80037a4 <HAL_RCC_OscConfig+0x298>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003760:	d114      	bne.n	800378c <HAL_RCC_OscConfig+0x280>
 8003762:	4b06      	ldr	r3, [pc, #24]	; (800377c <HAL_RCC_OscConfig+0x270>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a05      	ldr	r2, [pc, #20]	; (800377c <HAL_RCC_OscConfig+0x270>)
 8003768:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800376c:	6013      	str	r3, [r2, #0]
 800376e:	4b03      	ldr	r3, [pc, #12]	; (800377c <HAL_RCC_OscConfig+0x270>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a02      	ldr	r2, [pc, #8]	; (800377c <HAL_RCC_OscConfig+0x270>)
 8003774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003778:	6013      	str	r3, [r2, #0]
 800377a:	e013      	b.n	80037a4 <HAL_RCC_OscConfig+0x298>
 800377c:	40021000 	.word	0x40021000
 8003780:	080091b8 	.word	0x080091b8
 8003784:	20000490 	.word	0x20000490
 8003788:	20000000 	.word	0x20000000
 800378c:	4ba0      	ldr	r3, [pc, #640]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4a9f      	ldr	r2, [pc, #636]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 8003792:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003796:	6013      	str	r3, [r2, #0]
 8003798:	4b9d      	ldr	r3, [pc, #628]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a9c      	ldr	r2, [pc, #624]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 800379e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80037a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d013      	beq.n	80037d4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037ac:	f7fc ff6a 	bl	8000684 <HAL_GetTick>
 80037b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037b2:	e008      	b.n	80037c6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037b4:	f7fc ff66 	bl	8000684 <HAL_GetTick>
 80037b8:	4602      	mov	r2, r0
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	1ad3      	subs	r3, r2, r3
 80037be:	2b64      	cmp	r3, #100	; 0x64
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e2b4      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80037c6:	4b92      	ldr	r3, [pc, #584]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d0f0      	beq.n	80037b4 <HAL_RCC_OscConfig+0x2a8>
 80037d2:	e014      	b.n	80037fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037d4:	f7fc ff56 	bl	8000684 <HAL_GetTick>
 80037d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037da:	e008      	b.n	80037ee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80037dc:	f7fc ff52 	bl	8000684 <HAL_GetTick>
 80037e0:	4602      	mov	r2, r0
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	1ad3      	subs	r3, r2, r3
 80037e6:	2b64      	cmp	r3, #100	; 0x64
 80037e8:	d901      	bls.n	80037ee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e2a0      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80037ee:	4b88      	ldr	r3, [pc, #544]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d1f0      	bne.n	80037dc <HAL_RCC_OscConfig+0x2d0>
 80037fa:	e000      	b.n	80037fe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0302 	and.w	r3, r3, #2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d060      	beq.n	80038cc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	2b04      	cmp	r3, #4
 800380e:	d005      	beq.n	800381c <HAL_RCC_OscConfig+0x310>
 8003810:	69bb      	ldr	r3, [r7, #24]
 8003812:	2b0c      	cmp	r3, #12
 8003814:	d119      	bne.n	800384a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b02      	cmp	r3, #2
 800381a:	d116      	bne.n	800384a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800381c:	4b7c      	ldr	r3, [pc, #496]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003824:	2b00      	cmp	r3, #0
 8003826:	d005      	beq.n	8003834 <HAL_RCC_OscConfig+0x328>
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e27d      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003834:	4b76      	ldr	r3, [pc, #472]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	061b      	lsls	r3, r3, #24
 8003842:	4973      	ldr	r1, [pc, #460]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 8003844:	4313      	orrs	r3, r2
 8003846:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003848:	e040      	b.n	80038cc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d023      	beq.n	800389a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003852:	4b6f      	ldr	r3, [pc, #444]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a6e      	ldr	r2, [pc, #440]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 8003858:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800385c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800385e:	f7fc ff11 	bl	8000684 <HAL_GetTick>
 8003862:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003864:	e008      	b.n	8003878 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003866:	f7fc ff0d 	bl	8000684 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	693b      	ldr	r3, [r7, #16]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d901      	bls.n	8003878 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	e25b      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003878:	4b65      	ldr	r3, [pc, #404]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003880:	2b00      	cmp	r3, #0
 8003882:	d0f0      	beq.n	8003866 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003884:	4b62      	ldr	r3, [pc, #392]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	061b      	lsls	r3, r3, #24
 8003892:	495f      	ldr	r1, [pc, #380]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 8003894:	4313      	orrs	r3, r2
 8003896:	604b      	str	r3, [r1, #4]
 8003898:	e018      	b.n	80038cc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800389a:	4b5d      	ldr	r3, [pc, #372]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a5c      	ldr	r2, [pc, #368]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 80038a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80038a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a6:	f7fc feed 	bl	8000684 <HAL_GetTick>
 80038aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038ac:	e008      	b.n	80038c0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80038ae:	f7fc fee9 	bl	8000684 <HAL_GetTick>
 80038b2:	4602      	mov	r2, r0
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	1ad3      	subs	r3, r2, r3
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d901      	bls.n	80038c0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e237      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80038c0:	4b53      	ldr	r3, [pc, #332]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d1f0      	bne.n	80038ae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d03c      	beq.n	8003952 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d01c      	beq.n	800391a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80038e0:	4b4b      	ldr	r3, [pc, #300]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 80038e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80038e6:	4a4a      	ldr	r2, [pc, #296]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 80038e8:	f043 0301 	orr.w	r3, r3, #1
 80038ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038f0:	f7fc fec8 	bl	8000684 <HAL_GetTick>
 80038f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80038f6:	e008      	b.n	800390a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038f8:	f7fc fec4 	bl	8000684 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d901      	bls.n	800390a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	e212      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800390a:	4b41      	ldr	r3, [pc, #260]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 800390c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	2b00      	cmp	r3, #0
 8003916:	d0ef      	beq.n	80038f8 <HAL_RCC_OscConfig+0x3ec>
 8003918:	e01b      	b.n	8003952 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800391a:	4b3d      	ldr	r3, [pc, #244]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 800391c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003920:	4a3b      	ldr	r2, [pc, #236]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800392a:	f7fc feab 	bl	8000684 <HAL_GetTick>
 800392e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003930:	e008      	b.n	8003944 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003932:	f7fc fea7 	bl	8000684 <HAL_GetTick>
 8003936:	4602      	mov	r2, r0
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	1ad3      	subs	r3, r2, r3
 800393c:	2b02      	cmp	r3, #2
 800393e:	d901      	bls.n	8003944 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003940:	2303      	movs	r3, #3
 8003942:	e1f5      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003944:	4b32      	ldr	r3, [pc, #200]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 8003946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1ef      	bne.n	8003932 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0304 	and.w	r3, r3, #4
 800395a:	2b00      	cmp	r3, #0
 800395c:	f000 80a6 	beq.w	8003aac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003960:	2300      	movs	r3, #0
 8003962:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003964:	4b2a      	ldr	r3, [pc, #168]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 8003966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003968:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800396c:	2b00      	cmp	r3, #0
 800396e:	d10d      	bne.n	800398c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003970:	4b27      	ldr	r3, [pc, #156]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 8003972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003974:	4a26      	ldr	r2, [pc, #152]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 8003976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800397a:	6593      	str	r3, [r2, #88]	; 0x58
 800397c:	4b24      	ldr	r3, [pc, #144]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 800397e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003980:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003984:	60bb      	str	r3, [r7, #8]
 8003986:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003988:	2301      	movs	r3, #1
 800398a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800398c:	4b21      	ldr	r3, [pc, #132]	; (8003a14 <HAL_RCC_OscConfig+0x508>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003994:	2b00      	cmp	r3, #0
 8003996:	d118      	bne.n	80039ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003998:	4b1e      	ldr	r3, [pc, #120]	; (8003a14 <HAL_RCC_OscConfig+0x508>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a1d      	ldr	r2, [pc, #116]	; (8003a14 <HAL_RCC_OscConfig+0x508>)
 800399e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80039a4:	f7fc fe6e 	bl	8000684 <HAL_GetTick>
 80039a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039aa:	e008      	b.n	80039be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039ac:	f7fc fe6a 	bl	8000684 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d901      	bls.n	80039be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80039ba:	2303      	movs	r3, #3
 80039bc:	e1b8      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80039be:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <HAL_RCC_OscConfig+0x508>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d0f0      	beq.n	80039ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d108      	bne.n	80039e4 <HAL_RCC_OscConfig+0x4d8>
 80039d2:	4b0f      	ldr	r3, [pc, #60]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 80039d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039d8:	4a0d      	ldr	r2, [pc, #52]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 80039da:	f043 0301 	orr.w	r3, r3, #1
 80039de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039e2:	e029      	b.n	8003a38 <HAL_RCC_OscConfig+0x52c>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	2b05      	cmp	r3, #5
 80039ea:	d115      	bne.n	8003a18 <HAL_RCC_OscConfig+0x50c>
 80039ec:	4b08      	ldr	r3, [pc, #32]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 80039ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039f2:	4a07      	ldr	r2, [pc, #28]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 80039f4:	f043 0304 	orr.w	r3, r3, #4
 80039f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80039fc:	4b04      	ldr	r3, [pc, #16]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 80039fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a02:	4a03      	ldr	r2, [pc, #12]	; (8003a10 <HAL_RCC_OscConfig+0x504>)
 8003a04:	f043 0301 	orr.w	r3, r3, #1
 8003a08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a0c:	e014      	b.n	8003a38 <HAL_RCC_OscConfig+0x52c>
 8003a0e:	bf00      	nop
 8003a10:	40021000 	.word	0x40021000
 8003a14:	40007000 	.word	0x40007000
 8003a18:	4b9d      	ldr	r3, [pc, #628]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	4a9c      	ldr	r2, [pc, #624]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003a20:	f023 0301 	bic.w	r3, r3, #1
 8003a24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003a28:	4b99      	ldr	r3, [pc, #612]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003a2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2e:	4a98      	ldr	r2, [pc, #608]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003a30:	f023 0304 	bic.w	r3, r3, #4
 8003a34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d016      	beq.n	8003a6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a40:	f7fc fe20 	bl	8000684 <HAL_GetTick>
 8003a44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a46:	e00a      	b.n	8003a5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a48:	f7fc fe1c 	bl	8000684 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e168      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a5e:	4b8c      	ldr	r3, [pc, #560]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a64:	f003 0302 	and.w	r3, r3, #2
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0ed      	beq.n	8003a48 <HAL_RCC_OscConfig+0x53c>
 8003a6c:	e015      	b.n	8003a9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a6e:	f7fc fe09 	bl	8000684 <HAL_GetTick>
 8003a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a74:	e00a      	b.n	8003a8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a76:	f7fc fe05 	bl	8000684 <HAL_GetTick>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	1ad3      	subs	r3, r2, r3
 8003a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d901      	bls.n	8003a8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003a88:	2303      	movs	r3, #3
 8003a8a:	e151      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a8c:	4b80      	ldr	r3, [pc, #512]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003a8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a92:	f003 0302 	and.w	r3, r3, #2
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1ed      	bne.n	8003a76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a9a:	7ffb      	ldrb	r3, [r7, #31]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d105      	bne.n	8003aac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003aa0:	4b7b      	ldr	r3, [pc, #492]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa4:	4a7a      	ldr	r2, [pc, #488]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003aa6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aaa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f003 0320 	and.w	r3, r3, #32
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d03c      	beq.n	8003b32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01c      	beq.n	8003afa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ac0:	4b73      	ldr	r3, [pc, #460]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003ac2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003ac6:	4a72      	ldr	r2, [pc, #456]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003ac8:	f043 0301 	orr.w	r3, r3, #1
 8003acc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ad0:	f7fc fdd8 	bl	8000684 <HAL_GetTick>
 8003ad4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003ad6:	e008      	b.n	8003aea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003ad8:	f7fc fdd4 	bl	8000684 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d901      	bls.n	8003aea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003ae6:	2303      	movs	r3, #3
 8003ae8:	e122      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003aea:	4b69      	ldr	r3, [pc, #420]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003aec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d0ef      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x5cc>
 8003af8:	e01b      	b.n	8003b32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003afa:	4b65      	ldr	r3, [pc, #404]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003afc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b00:	4a63      	ldr	r2, [pc, #396]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003b02:	f023 0301 	bic.w	r3, r3, #1
 8003b06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b0a:	f7fc fdbb 	bl	8000684 <HAL_GetTick>
 8003b0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b10:	e008      	b.n	8003b24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003b12:	f7fc fdb7 	bl	8000684 <HAL_GetTick>
 8003b16:	4602      	mov	r2, r0
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	1ad3      	subs	r3, r2, r3
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	d901      	bls.n	8003b24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e105      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003b24:	4b5a      	ldr	r3, [pc, #360]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003b26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d1ef      	bne.n	8003b12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	f000 80f9 	beq.w	8003d2e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	f040 80cf 	bne.w	8003ce4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003b46:	4b52      	ldr	r3, [pc, #328]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f003 0203 	and.w	r2, r3, #3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d12c      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	3b01      	subs	r3, #1
 8003b66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b68:	429a      	cmp	r2, r3
 8003b6a:	d123      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d11b      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d113      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	3b01      	subs	r3, #1
 8003b9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d109      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003baa:	085b      	lsrs	r3, r3, #1
 8003bac:	3b01      	subs	r3, #1
 8003bae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d071      	beq.n	8003c98 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	2b0c      	cmp	r3, #12
 8003bb8:	d068      	beq.n	8003c8c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003bba:	4b35      	ldr	r3, [pc, #212]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d105      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003bc6:	4b32      	ldr	r3, [pc, #200]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d001      	beq.n	8003bd6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	e0ac      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003bd6:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a2d      	ldr	r2, [pc, #180]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003bdc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003be0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003be2:	f7fc fd4f 	bl	8000684 <HAL_GetTick>
 8003be6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003be8:	e008      	b.n	8003bfc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bea:	f7fc fd4b 	bl	8000684 <HAL_GetTick>
 8003bee:	4602      	mov	r2, r0
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	1ad3      	subs	r3, r2, r3
 8003bf4:	2b02      	cmp	r3, #2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e099      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bfc:	4b24      	ldr	r3, [pc, #144]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f0      	bne.n	8003bea <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003c08:	4b21      	ldr	r3, [pc, #132]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003c0a:	68da      	ldr	r2, [r3, #12]
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <HAL_RCC_OscConfig+0x788>)
 8003c0e:	4013      	ands	r3, r2
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003c14:	687a      	ldr	r2, [r7, #4]
 8003c16:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003c18:	3a01      	subs	r2, #1
 8003c1a:	0112      	lsls	r2, r2, #4
 8003c1c:	4311      	orrs	r1, r2
 8003c1e:	687a      	ldr	r2, [r7, #4]
 8003c20:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003c22:	0212      	lsls	r2, r2, #8
 8003c24:	4311      	orrs	r1, r2
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003c2a:	0852      	lsrs	r2, r2, #1
 8003c2c:	3a01      	subs	r2, #1
 8003c2e:	0552      	lsls	r2, r2, #21
 8003c30:	4311      	orrs	r1, r2
 8003c32:	687a      	ldr	r2, [r7, #4]
 8003c34:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c36:	0852      	lsrs	r2, r2, #1
 8003c38:	3a01      	subs	r2, #1
 8003c3a:	0652      	lsls	r2, r2, #25
 8003c3c:	4311      	orrs	r1, r2
 8003c3e:	687a      	ldr	r2, [r7, #4]
 8003c40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c42:	06d2      	lsls	r2, r2, #27
 8003c44:	430a      	orrs	r2, r1
 8003c46:	4912      	ldr	r1, [pc, #72]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003c48:	4313      	orrs	r3, r2
 8003c4a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003c4c:	4b10      	ldr	r3, [pc, #64]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a0f      	ldr	r2, [pc, #60]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003c52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c56:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003c58:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	4a0c      	ldr	r2, [pc, #48]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003c5e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c62:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003c64:	f7fc fd0e 	bl	8000684 <HAL_GetTick>
 8003c68:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c6a:	e008      	b.n	8003c7e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c6c:	f7fc fd0a 	bl	8000684 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d901      	bls.n	8003c7e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003c7a:	2303      	movs	r3, #3
 8003c7c:	e058      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c7e:	4b04      	ldr	r3, [pc, #16]	; (8003c90 <HAL_RCC_OscConfig+0x784>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d0f0      	beq.n	8003c6c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003c8a:	e050      	b.n	8003d2e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e04f      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
 8003c90:	40021000 	.word	0x40021000
 8003c94:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003c98:	4b27      	ldr	r3, [pc, #156]	; (8003d38 <HAL_RCC_OscConfig+0x82c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d144      	bne.n	8003d2e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003ca4:	4b24      	ldr	r3, [pc, #144]	; (8003d38 <HAL_RCC_OscConfig+0x82c>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a23      	ldr	r2, [pc, #140]	; (8003d38 <HAL_RCC_OscConfig+0x82c>)
 8003caa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cae:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003cb0:	4b21      	ldr	r3, [pc, #132]	; (8003d38 <HAL_RCC_OscConfig+0x82c>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	4a20      	ldr	r2, [pc, #128]	; (8003d38 <HAL_RCC_OscConfig+0x82c>)
 8003cb6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cba:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003cbc:	f7fc fce2 	bl	8000684 <HAL_GetTick>
 8003cc0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cc2:	e008      	b.n	8003cd6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cc4:	f7fc fcde 	bl	8000684 <HAL_GetTick>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	1ad3      	subs	r3, r2, r3
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	d901      	bls.n	8003cd6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003cd2:	2303      	movs	r3, #3
 8003cd4:	e02c      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd6:	4b18      	ldr	r3, [pc, #96]	; (8003d38 <HAL_RCC_OscConfig+0x82c>)
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0f0      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x7b8>
 8003ce2:	e024      	b.n	8003d2e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ce4:	69bb      	ldr	r3, [r7, #24]
 8003ce6:	2b0c      	cmp	r3, #12
 8003ce8:	d01f      	beq.n	8003d2a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cea:	4b13      	ldr	r3, [pc, #76]	; (8003d38 <HAL_RCC_OscConfig+0x82c>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a12      	ldr	r2, [pc, #72]	; (8003d38 <HAL_RCC_OscConfig+0x82c>)
 8003cf0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf6:	f7fc fcc5 	bl	8000684 <HAL_GetTick>
 8003cfa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003cfc:	e008      	b.n	8003d10 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cfe:	f7fc fcc1 	bl	8000684 <HAL_GetTick>
 8003d02:	4602      	mov	r2, r0
 8003d04:	693b      	ldr	r3, [r7, #16]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d901      	bls.n	8003d10 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003d0c:	2303      	movs	r3, #3
 8003d0e:	e00f      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d10:	4b09      	ldr	r3, [pc, #36]	; (8003d38 <HAL_RCC_OscConfig+0x82c>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d1f0      	bne.n	8003cfe <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003d1c:	4b06      	ldr	r3, [pc, #24]	; (8003d38 <HAL_RCC_OscConfig+0x82c>)
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	4905      	ldr	r1, [pc, #20]	; (8003d38 <HAL_RCC_OscConfig+0x82c>)
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_RCC_OscConfig+0x830>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	60cb      	str	r3, [r1, #12]
 8003d28:	e001      	b.n	8003d2e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e000      	b.n	8003d30 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003d2e:	2300      	movs	r3, #0
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3720      	adds	r7, #32
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}
 8003d38:	40021000 	.word	0x40021000
 8003d3c:	feeefffc 	.word	0xfeeefffc

08003d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b086      	sub	sp, #24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d101      	bne.n	8003d58 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003d54:	2301      	movs	r3, #1
 8003d56:	e11d      	b.n	8003f94 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003d58:	4b90      	ldr	r3, [pc, #576]	; (8003f9c <HAL_RCC_ClockConfig+0x25c>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	429a      	cmp	r2, r3
 8003d64:	d910      	bls.n	8003d88 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d66:	4b8d      	ldr	r3, [pc, #564]	; (8003f9c <HAL_RCC_ClockConfig+0x25c>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f023 020f 	bic.w	r2, r3, #15
 8003d6e:	498b      	ldr	r1, [pc, #556]	; (8003f9c <HAL_RCC_ClockConfig+0x25c>)
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d76:	4b89      	ldr	r3, [pc, #548]	; (8003f9c <HAL_RCC_ClockConfig+0x25c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 030f 	and.w	r3, r3, #15
 8003d7e:	683a      	ldr	r2, [r7, #0]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d001      	beq.n	8003d88 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003d84:	2301      	movs	r3, #1
 8003d86:	e105      	b.n	8003f94 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0302 	and.w	r3, r3, #2
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d010      	beq.n	8003db6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	4b81      	ldr	r3, [pc, #516]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d908      	bls.n	8003db6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003da4:	4b7e      	ldr	r3, [pc, #504]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003da6:	689b      	ldr	r3, [r3, #8]
 8003da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	497b      	ldr	r1, [pc, #492]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d079      	beq.n	8003eb6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	685b      	ldr	r3, [r3, #4]
 8003dc6:	2b03      	cmp	r3, #3
 8003dc8:	d11e      	bne.n	8003e08 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003dca:	4b75      	ldr	r3, [pc, #468]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e0dc      	b.n	8003f94 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003dda:	f000 fa09 	bl	80041f0 <RCC_GetSysClockFreqFromPLLSource>
 8003dde:	4603      	mov	r3, r0
 8003de0:	4a70      	ldr	r2, [pc, #448]	; (8003fa4 <HAL_RCC_ClockConfig+0x264>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d946      	bls.n	8003e74 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003de6:	4b6e      	ldr	r3, [pc, #440]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d140      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003df2:	4b6b      	ldr	r3, [pc, #428]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003dfa:	4a69      	ldr	r2, [pc, #420]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003dfc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e02:	2380      	movs	r3, #128	; 0x80
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e035      	b.n	8003e74 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d107      	bne.n	8003e20 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e10:	4b63      	ldr	r3, [pc, #396]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d115      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0b9      	b.n	8003f94 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	685b      	ldr	r3, [r3, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d107      	bne.n	8003e38 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003e28:	4b5d      	ldr	r3, [pc, #372]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d109      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	e0ad      	b.n	8003f94 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e38:	4b59      	ldr	r3, [pc, #356]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d101      	bne.n	8003e48 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003e44:	2301      	movs	r3, #1
 8003e46:	e0a5      	b.n	8003f94 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003e48:	f000 f8b4 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4a55      	ldr	r2, [pc, #340]	; (8003fa4 <HAL_RCC_ClockConfig+0x264>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d90f      	bls.n	8003e74 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003e54:	4b52      	ldr	r3, [pc, #328]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d109      	bne.n	8003e74 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003e60:	4b4f      	ldr	r3, [pc, #316]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e68:	4a4d      	ldr	r2, [pc, #308]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e6e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003e74:	4b4a      	ldr	r3, [pc, #296]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f023 0203 	bic.w	r2, r3, #3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	4947      	ldr	r1, [pc, #284]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e86:	f7fc fbfd 	bl	8000684 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e8c:	e00a      	b.n	8003ea4 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e8e:	f7fc fbf9 	bl	8000684 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d901      	bls.n	8003ea4 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003ea0:	2303      	movs	r3, #3
 8003ea2:	e077      	b.n	8003f94 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ea4:	4b3e      	ldr	r3, [pc, #248]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 020c 	and.w	r2, r3, #12
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685b      	ldr	r3, [r3, #4]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d1eb      	bne.n	8003e8e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b80      	cmp	r3, #128	; 0x80
 8003eba:	d105      	bne.n	8003ec8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ebc:	4b38      	ldr	r3, [pc, #224]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	4a37      	ldr	r2, [pc, #220]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003ec2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ec6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0302 	and.w	r3, r3, #2
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d010      	beq.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689a      	ldr	r2, [r3, #8]
 8003ed8:	4b31      	ldr	r3, [pc, #196]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ee0:	429a      	cmp	r2, r3
 8003ee2:	d208      	bcs.n	8003ef6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ee4:	4b2e      	ldr	r3, [pc, #184]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	492b      	ldr	r1, [pc, #172]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ef6:	4b29      	ldr	r3, [pc, #164]	; (8003f9c <HAL_RCC_ClockConfig+0x25c>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 030f 	and.w	r3, r3, #15
 8003efe:	683a      	ldr	r2, [r7, #0]
 8003f00:	429a      	cmp	r2, r3
 8003f02:	d210      	bcs.n	8003f26 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f04:	4b25      	ldr	r3, [pc, #148]	; (8003f9c <HAL_RCC_ClockConfig+0x25c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f023 020f 	bic.w	r2, r3, #15
 8003f0c:	4923      	ldr	r1, [pc, #140]	; (8003f9c <HAL_RCC_ClockConfig+0x25c>)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f14:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <HAL_RCC_ClockConfig+0x25c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 030f 	and.w	r3, r3, #15
 8003f1c:	683a      	ldr	r2, [r7, #0]
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d001      	beq.n	8003f26 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e036      	b.n	8003f94 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0304 	and.w	r3, r3, #4
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d008      	beq.n	8003f44 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003f32:	4b1b      	ldr	r3, [pc, #108]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	4918      	ldr	r1, [pc, #96]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003f40:	4313      	orrs	r3, r2
 8003f42:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0308 	and.w	r3, r3, #8
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d009      	beq.n	8003f64 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003f50:	4b13      	ldr	r3, [pc, #76]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4910      	ldr	r1, [pc, #64]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003f64:	f000 f826 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	4b0d      	ldr	r3, [pc, #52]	; (8003fa0 <HAL_RCC_ClockConfig+0x260>)
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	091b      	lsrs	r3, r3, #4
 8003f70:	f003 030f 	and.w	r3, r3, #15
 8003f74:	490c      	ldr	r1, [pc, #48]	; (8003fa8 <HAL_RCC_ClockConfig+0x268>)
 8003f76:	5ccb      	ldrb	r3, [r1, r3]
 8003f78:	f003 031f 	and.w	r3, r3, #31
 8003f7c:	fa22 f303 	lsr.w	r3, r2, r3
 8003f80:	4a0a      	ldr	r2, [pc, #40]	; (8003fac <HAL_RCC_ClockConfig+0x26c>)
 8003f82:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003f84:	4b0a      	ldr	r3, [pc, #40]	; (8003fb0 <HAL_RCC_ClockConfig+0x270>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7fc fb2b 	bl	80005e4 <HAL_InitTick>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	73fb      	strb	r3, [r7, #15]

  return status;
 8003f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3718      	adds	r7, #24
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40022000 	.word	0x40022000
 8003fa0:	40021000 	.word	0x40021000
 8003fa4:	04c4b400 	.word	0x04c4b400
 8003fa8:	080091b8 	.word	0x080091b8
 8003fac:	20000490 	.word	0x20000490
 8003fb0:	20000000 	.word	0x20000000

08003fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b089      	sub	sp, #36	; 0x24
 8003fb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	61fb      	str	r3, [r7, #28]
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003fc2:	4b3e      	ldr	r3, [pc, #248]	; (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f003 030c 	and.w	r3, r3, #12
 8003fca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003fcc:	4b3b      	ldr	r3, [pc, #236]	; (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0303 	and.w	r3, r3, #3
 8003fd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	2b0c      	cmp	r3, #12
 8003fe0:	d121      	bne.n	8004026 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d11e      	bne.n	8004026 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003fe8:	4b34      	ldr	r3, [pc, #208]	; (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d107      	bne.n	8004004 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ff4:	4b31      	ldr	r3, [pc, #196]	; (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 8003ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ffa:	0a1b      	lsrs	r3, r3, #8
 8003ffc:	f003 030f 	and.w	r3, r3, #15
 8004000:	61fb      	str	r3, [r7, #28]
 8004002:	e005      	b.n	8004010 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004004:	4b2d      	ldr	r3, [pc, #180]	; (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	091b      	lsrs	r3, r3, #4
 800400a:	f003 030f 	and.w	r3, r3, #15
 800400e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004010:	4a2b      	ldr	r2, [pc, #172]	; (80040c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004012:	69fb      	ldr	r3, [r7, #28]
 8004014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004018:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d10d      	bne.n	800403c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004024:	e00a      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004026:	693b      	ldr	r3, [r7, #16]
 8004028:	2b04      	cmp	r3, #4
 800402a:	d102      	bne.n	8004032 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800402c:	4b25      	ldr	r3, [pc, #148]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800402e:	61bb      	str	r3, [r7, #24]
 8004030:	e004      	b.n	800403c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	2b08      	cmp	r3, #8
 8004036:	d101      	bne.n	800403c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004038:	4b23      	ldr	r3, [pc, #140]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800403a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	2b0c      	cmp	r3, #12
 8004040:	d134      	bne.n	80040ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004042:	4b1e      	ldr	r3, [pc, #120]	; (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004044:	68db      	ldr	r3, [r3, #12]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	2b02      	cmp	r3, #2
 8004050:	d003      	beq.n	800405a <HAL_RCC_GetSysClockFreq+0xa6>
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	2b03      	cmp	r3, #3
 8004056:	d003      	beq.n	8004060 <HAL_RCC_GetSysClockFreq+0xac>
 8004058:	e005      	b.n	8004066 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800405a:	4b1a      	ldr	r3, [pc, #104]	; (80040c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800405c:	617b      	str	r3, [r7, #20]
      break;
 800405e:	e005      	b.n	800406c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004060:	4b19      	ldr	r3, [pc, #100]	; (80040c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004062:	617b      	str	r3, [r7, #20]
      break;
 8004064:	e002      	b.n	800406c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004066:	69fb      	ldr	r3, [r7, #28]
 8004068:	617b      	str	r3, [r7, #20]
      break;
 800406a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800406c:	4b13      	ldr	r3, [pc, #76]	; (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 800406e:	68db      	ldr	r3, [r3, #12]
 8004070:	091b      	lsrs	r3, r3, #4
 8004072:	f003 030f 	and.w	r3, r3, #15
 8004076:	3301      	adds	r3, #1
 8004078:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800407a:	4b10      	ldr	r3, [pc, #64]	; (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	0a1b      	lsrs	r3, r3, #8
 8004080:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004084:	697a      	ldr	r2, [r7, #20]
 8004086:	fb03 f202 	mul.w	r2, r3, r2
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004090:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004092:	4b0a      	ldr	r3, [pc, #40]	; (80040bc <HAL_RCC_GetSysClockFreq+0x108>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	0e5b      	lsrs	r3, r3, #25
 8004098:	f003 0303 	and.w	r3, r3, #3
 800409c:	3301      	adds	r3, #1
 800409e:	005b      	lsls	r3, r3, #1
 80040a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80040ac:	69bb      	ldr	r3, [r7, #24]
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3724      	adds	r7, #36	; 0x24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b8:	4770      	bx	lr
 80040ba:	bf00      	nop
 80040bc:	40021000 	.word	0x40021000
 80040c0:	080091d0 	.word	0x080091d0
 80040c4:	00f42400 	.word	0x00f42400
 80040c8:	007a1200 	.word	0x007a1200

080040cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040cc:	b480      	push	{r7}
 80040ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80040d0:	4b03      	ldr	r3, [pc, #12]	; (80040e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80040d2:	681b      	ldr	r3, [r3, #0]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	20000490 	.word	0x20000490

080040e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80040e8:	f7ff fff0 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 80040ec:	4602      	mov	r2, r0
 80040ee:	4b06      	ldr	r3, [pc, #24]	; (8004108 <HAL_RCC_GetPCLK1Freq+0x24>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	0a1b      	lsrs	r3, r3, #8
 80040f4:	f003 0307 	and.w	r3, r3, #7
 80040f8:	4904      	ldr	r1, [pc, #16]	; (800410c <HAL_RCC_GetPCLK1Freq+0x28>)
 80040fa:	5ccb      	ldrb	r3, [r1, r3]
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004104:	4618      	mov	r0, r3
 8004106:	bd80      	pop	{r7, pc}
 8004108:	40021000 	.word	0x40021000
 800410c:	080091c8 	.word	0x080091c8

08004110 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004114:	f7ff ffda 	bl	80040cc <HAL_RCC_GetHCLKFreq>
 8004118:	4602      	mov	r2, r0
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_RCC_GetPCLK2Freq+0x24>)
 800411c:	689b      	ldr	r3, [r3, #8]
 800411e:	0adb      	lsrs	r3, r3, #11
 8004120:	f003 0307 	and.w	r3, r3, #7
 8004124:	4904      	ldr	r1, [pc, #16]	; (8004138 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004126:	5ccb      	ldrb	r3, [r1, r3]
 8004128:	f003 031f 	and.w	r3, r3, #31
 800412c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004130:	4618      	mov	r0, r3
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40021000 	.word	0x40021000
 8004138:	080091c8 	.word	0x080091c8

0800413c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004144:	2300      	movs	r3, #0
 8004146:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004148:	4b27      	ldr	r3, [pc, #156]	; (80041e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800414a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800414c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d003      	beq.n	800415c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004154:	f7ff f916 	bl	8003384 <HAL_PWREx_GetVoltageRange>
 8004158:	6178      	str	r0, [r7, #20]
 800415a:	e014      	b.n	8004186 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800415c:	4b22      	ldr	r3, [pc, #136]	; (80041e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800415e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004160:	4a21      	ldr	r2, [pc, #132]	; (80041e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004162:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004166:	6593      	str	r3, [r2, #88]	; 0x58
 8004168:	4b1f      	ldr	r3, [pc, #124]	; (80041e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800416a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004174:	f7ff f906 	bl	8003384 <HAL_PWREx_GetVoltageRange>
 8004178:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800417a:	4b1b      	ldr	r3, [pc, #108]	; (80041e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	4a1a      	ldr	r2, [pc, #104]	; (80041e8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004184:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800418c:	d10b      	bne.n	80041a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2b80      	cmp	r3, #128	; 0x80
 8004192:	d913      	bls.n	80041bc <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2ba0      	cmp	r3, #160	; 0xa0
 8004198:	d902      	bls.n	80041a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800419a:	2302      	movs	r3, #2
 800419c:	613b      	str	r3, [r7, #16]
 800419e:	e00d      	b.n	80041bc <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041a0:	2301      	movs	r3, #1
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	e00a      	b.n	80041bc <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2b7f      	cmp	r3, #127	; 0x7f
 80041aa:	d902      	bls.n	80041b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80041ac:	2302      	movs	r3, #2
 80041ae:	613b      	str	r3, [r7, #16]
 80041b0:	e004      	b.n	80041bc <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2b70      	cmp	r3, #112	; 0x70
 80041b6:	d101      	bne.n	80041bc <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80041b8:	2301      	movs	r3, #1
 80041ba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80041bc:	4b0b      	ldr	r3, [pc, #44]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f023 020f 	bic.w	r2, r3, #15
 80041c4:	4909      	ldr	r1, [pc, #36]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80041cc:	4b07      	ldr	r3, [pc, #28]	; (80041ec <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	693a      	ldr	r2, [r7, #16]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d001      	beq.n	80041de <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e000      	b.n	80041e0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	4618      	mov	r0, r3
 80041e2:	3718      	adds	r7, #24
 80041e4:	46bd      	mov	sp, r7
 80041e6:	bd80      	pop	{r7, pc}
 80041e8:	40021000 	.word	0x40021000
 80041ec:	40022000 	.word	0x40022000

080041f0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b087      	sub	sp, #28
 80041f4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041f6:	4b2d      	ldr	r3, [pc, #180]	; (80042ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f003 0303 	and.w	r3, r3, #3
 80041fe:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2b03      	cmp	r3, #3
 8004204:	d00b      	beq.n	800421e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b03      	cmp	r3, #3
 800420a:	d825      	bhi.n	8004258 <RCC_GetSysClockFreqFromPLLSource+0x68>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d008      	beq.n	8004224 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	2b02      	cmp	r3, #2
 8004216:	d11f      	bne.n	8004258 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004218:	4b25      	ldr	r3, [pc, #148]	; (80042b0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800421a:	613b      	str	r3, [r7, #16]
    break;
 800421c:	e01f      	b.n	800425e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800421e:	4b25      	ldr	r3, [pc, #148]	; (80042b4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004220:	613b      	str	r3, [r7, #16]
    break;
 8004222:	e01c      	b.n	800425e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004224:	4b21      	ldr	r3, [pc, #132]	; (80042ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0308 	and.w	r3, r3, #8
 800422c:	2b00      	cmp	r3, #0
 800422e:	d107      	bne.n	8004240 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004230:	4b1e      	ldr	r3, [pc, #120]	; (80042ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004236:	0a1b      	lsrs	r3, r3, #8
 8004238:	f003 030f 	and.w	r3, r3, #15
 800423c:	617b      	str	r3, [r7, #20]
 800423e:	e005      	b.n	800424c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004240:	4b1a      	ldr	r3, [pc, #104]	; (80042ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	091b      	lsrs	r3, r3, #4
 8004246:	f003 030f 	and.w	r3, r3, #15
 800424a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 800424c:	4a1a      	ldr	r2, [pc, #104]	; (80042b8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004254:	613b      	str	r3, [r7, #16]
    break;
 8004256:	e002      	b.n	800425e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004258:	2300      	movs	r3, #0
 800425a:	613b      	str	r3, [r7, #16]
    break;
 800425c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800425e:	4b13      	ldr	r3, [pc, #76]	; (80042ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004260:	68db      	ldr	r3, [r3, #12]
 8004262:	091b      	lsrs	r3, r3, #4
 8004264:	f003 030f 	and.w	r3, r3, #15
 8004268:	3301      	adds	r3, #1
 800426a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800426c:	4b0f      	ldr	r3, [pc, #60]	; (80042ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	0a1b      	lsrs	r3, r3, #8
 8004272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	fb03 f202 	mul.w	r2, r3, r2
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004282:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004284:	4b09      	ldr	r3, [pc, #36]	; (80042ac <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004286:	68db      	ldr	r3, [r3, #12]
 8004288:	0e5b      	lsrs	r3, r3, #25
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	3301      	adds	r3, #1
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800429e:	683b      	ldr	r3, [r7, #0]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	371c      	adds	r7, #28
 80042a4:	46bd      	mov	sp, r7
 80042a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042aa:	4770      	bx	lr
 80042ac:	40021000 	.word	0x40021000
 80042b0:	00f42400 	.word	0x00f42400
 80042b4:	007a1200 	.word	0x007a1200
 80042b8:	080091d0 	.word	0x080091d0

080042bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b086      	sub	sp, #24
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80042c4:	2300      	movs	r3, #0
 80042c6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042c8:	2300      	movs	r3, #0
 80042ca:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d040      	beq.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80042dc:	2b80      	cmp	r3, #128	; 0x80
 80042de:	d02a      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80042e0:	2b80      	cmp	r3, #128	; 0x80
 80042e2:	d825      	bhi.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80042e4:	2b60      	cmp	r3, #96	; 0x60
 80042e6:	d026      	beq.n	8004336 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80042e8:	2b60      	cmp	r3, #96	; 0x60
 80042ea:	d821      	bhi.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d006      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x42>
 80042f0:	2b40      	cmp	r3, #64	; 0x40
 80042f2:	d81d      	bhi.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d009      	beq.n	800430c <HAL_RCCEx_PeriphCLKConfig+0x50>
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d010      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x62>
 80042fc:	e018      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80042fe:	4b89      	ldr	r3, [pc, #548]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	4a88      	ldr	r2, [pc, #544]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004308:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800430a:	e015      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	3304      	adds	r3, #4
 8004310:	2100      	movs	r1, #0
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fb02 	bl	800491c <RCCEx_PLLSAI1_Config>
 8004318:	4603      	mov	r3, r0
 800431a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800431c:	e00c      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	3320      	adds	r3, #32
 8004322:	2100      	movs	r1, #0
 8004324:	4618      	mov	r0, r3
 8004326:	f000 fbed 	bl	8004b04 <RCCEx_PLLSAI2_Config>
 800432a:	4603      	mov	r3, r0
 800432c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800432e:	e003      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004330:	2301      	movs	r3, #1
 8004332:	74fb      	strb	r3, [r7, #19]
      break;
 8004334:	e000      	b.n	8004338 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004336:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004338:	7cfb      	ldrb	r3, [r7, #19]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d10b      	bne.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800433e:	4b79      	ldr	r3, [pc, #484]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004340:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004344:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800434c:	4975      	ldr	r1, [pc, #468]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004354:	e001      	b.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004356:	7cfb      	ldrb	r3, [r7, #19]
 8004358:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004362:	2b00      	cmp	r3, #0
 8004364:	d047      	beq.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800436a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800436e:	d030      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004370:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004374:	d82a      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004376:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800437a:	d02a      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800437c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004380:	d824      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004386:	d008      	beq.n	800439a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800438c:	d81e      	bhi.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004392:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004396:	d010      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004398:	e018      	b.n	80043cc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800439a:	4b62      	ldr	r3, [pc, #392]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	4a61      	ldr	r2, [pc, #388]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043a4:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043a6:	e015      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	3304      	adds	r3, #4
 80043ac:	2100      	movs	r1, #0
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 fab4 	bl	800491c <RCCEx_PLLSAI1_Config>
 80043b4:	4603      	mov	r3, r0
 80043b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043b8:	e00c      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	3320      	adds	r3, #32
 80043be:	2100      	movs	r1, #0
 80043c0:	4618      	mov	r0, r3
 80043c2:	f000 fb9f 	bl	8004b04 <RCCEx_PLLSAI2_Config>
 80043c6:	4603      	mov	r3, r0
 80043c8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80043ca:	e003      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	74fb      	strb	r3, [r7, #19]
      break;
 80043d0:	e000      	b.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80043d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043d4:	7cfb      	ldrb	r3, [r7, #19]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d10b      	bne.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80043da:	4b52      	ldr	r3, [pc, #328]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e8:	494e      	ldr	r1, [pc, #312]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80043f0:	e001      	b.n	80043f6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043f2:	7cfb      	ldrb	r3, [r7, #19]
 80043f4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	f000 809f 	beq.w	8004542 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004404:	2300      	movs	r3, #0
 8004406:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004408:	4b46      	ldr	r3, [pc, #280]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800440a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800440c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004410:	2b00      	cmp	r3, #0
 8004412:	d101      	bne.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004418:	2300      	movs	r3, #0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00d      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800441e:	4b41      	ldr	r3, [pc, #260]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004422:	4a40      	ldr	r2, [pc, #256]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004424:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004428:	6593      	str	r3, [r2, #88]	; 0x58
 800442a:	4b3e      	ldr	r3, [pc, #248]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004436:	2301      	movs	r3, #1
 8004438:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800443a:	4b3b      	ldr	r3, [pc, #236]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a3a      	ldr	r2, [pc, #232]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004440:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004444:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004446:	f7fc f91d 	bl	8000684 <HAL_GetTick>
 800444a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800444c:	e009      	b.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800444e:	f7fc f919 	bl	8000684 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d902      	bls.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	74fb      	strb	r3, [r7, #19]
        break;
 8004460:	e005      	b.n	800446e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004462:	4b31      	ldr	r3, [pc, #196]	; (8004528 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0ef      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800446e:	7cfb      	ldrb	r3, [r7, #19]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d15b      	bne.n	800452c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004474:	4b2b      	ldr	r3, [pc, #172]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800447a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d01f      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	429a      	cmp	r2, r3
 8004490:	d019      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004492:	4b24      	ldr	r3, [pc, #144]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004494:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004498:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800449c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800449e:	4b21      	ldr	r3, [pc, #132]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044a4:	4a1f      	ldr	r2, [pc, #124]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80044ae:	4b1d      	ldr	r3, [pc, #116]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044b4:	4a1b      	ldr	r2, [pc, #108]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80044be:	4a19      	ldr	r2, [pc, #100]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f003 0301 	and.w	r3, r3, #1
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d016      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fc f8d8 	bl	8000684 <HAL_GetTick>
 80044d4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044d6:	e00b      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044d8:	f7fc f8d4 	bl	8000684 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d902      	bls.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80044ea:	2303      	movs	r3, #3
 80044ec:	74fb      	strb	r3, [r7, #19]
            break;
 80044ee:	e006      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80044f0:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d0ec      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80044fe:	7cfb      	ldrb	r3, [r7, #19]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10c      	bne.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004504:	4b07      	ldr	r3, [pc, #28]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800450a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004514:	4903      	ldr	r1, [pc, #12]	; (8004524 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004516:	4313      	orrs	r3, r2
 8004518:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800451c:	e008      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800451e:	7cfb      	ldrb	r3, [r7, #19]
 8004520:	74bb      	strb	r3, [r7, #18]
 8004522:	e005      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004524:	40021000 	.word	0x40021000
 8004528:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800452c:	7cfb      	ldrb	r3, [r7, #19]
 800452e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004530:	7c7b      	ldrb	r3, [r7, #17]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d105      	bne.n	8004542 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004536:	4ba0      	ldr	r3, [pc, #640]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800453a:	4a9f      	ldr	r2, [pc, #636]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800453c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004540:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d00a      	beq.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800454e:	4b9a      	ldr	r3, [pc, #616]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004554:	f023 0203 	bic.w	r2, r3, #3
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455c:	4996      	ldr	r1, [pc, #600]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800455e:	4313      	orrs	r3, r2
 8004560:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d00a      	beq.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004570:	4b91      	ldr	r3, [pc, #580]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004576:	f023 020c 	bic.w	r2, r3, #12
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	498e      	ldr	r1, [pc, #568]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004580:	4313      	orrs	r3, r2
 8004582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d00a      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004592:	4b89      	ldr	r3, [pc, #548]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004594:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004598:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a0:	4985      	ldr	r1, [pc, #532]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80045b4:	4b80      	ldr	r3, [pc, #512]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045c2:	497d      	ldr	r1, [pc, #500]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0310 	and.w	r3, r3, #16
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80045d6:	4b78      	ldr	r3, [pc, #480]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e4:	4974      	ldr	r1, [pc, #464]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f003 0320 	and.w	r3, r3, #32
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80045f8:	4b6f      	ldr	r3, [pc, #444]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80045fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004606:	496c      	ldr	r1, [pc, #432]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800461a:	4b67      	ldr	r3, [pc, #412]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800461c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004620:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004628:	4963      	ldr	r1, [pc, #396]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800463c:	4b5e      	ldr	r3, [pc, #376]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800463e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004642:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800464a:	495b      	ldr	r1, [pc, #364]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800465e:	4b56      	ldr	r3, [pc, #344]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004664:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800466c:	4952      	ldr	r1, [pc, #328]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004680:	4b4d      	ldr	r3, [pc, #308]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004682:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004686:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468e:	494a      	ldr	r1, [pc, #296]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80046a2:	4b45      	ldr	r3, [pc, #276]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b0:	4941      	ldr	r1, [pc, #260]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80046c4:	4b3c      	ldr	r3, [pc, #240]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80046ca:	f023 0203 	bic.w	r2, r3, #3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046d2:	4939      	ldr	r1, [pc, #228]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d028      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80046e6:	4b34      	ldr	r3, [pc, #208]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046f4:	4930      	ldr	r1, [pc, #192]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004704:	d106      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004706:	4b2c      	ldr	r3, [pc, #176]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	4a2b      	ldr	r2, [pc, #172]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800470c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004710:	60d3      	str	r3, [r2, #12]
 8004712:	e011      	b.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004718:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800471c:	d10c      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	3304      	adds	r3, #4
 8004722:	2101      	movs	r1, #1
 8004724:	4618      	mov	r0, r3
 8004726:	f000 f8f9 	bl	800491c <RCCEx_PLLSAI1_Config>
 800472a:	4603      	mov	r3, r0
 800472c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800472e:	7cfb      	ldrb	r3, [r7, #19]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d001      	beq.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004734:	7cfb      	ldrb	r3, [r7, #19]
 8004736:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d04d      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800474c:	d108      	bne.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800474e:	4b1a      	ldr	r3, [pc, #104]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004750:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004754:	4a18      	ldr	r2, [pc, #96]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004756:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800475a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800475e:	e012      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004760:	4b15      	ldr	r3, [pc, #84]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004762:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004766:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004768:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800476c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004770:	4b11      	ldr	r3, [pc, #68]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800477e:	490e      	ldr	r1, [pc, #56]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004780:	4313      	orrs	r3, r2
 8004782:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800478a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800478e:	d106      	bne.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004790:	4b09      	ldr	r3, [pc, #36]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	4a08      	ldr	r2, [pc, #32]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800479a:	60d3      	str	r3, [r2, #12]
 800479c:	e020      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80047a6:	d109      	bne.n	80047bc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80047a8:	4b03      	ldr	r3, [pc, #12]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4a02      	ldr	r2, [pc, #8]	; (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047b2:	60d3      	str	r3, [r2, #12]
 80047b4:	e014      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80047b6:	bf00      	nop
 80047b8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80047c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047c4:	d10c      	bne.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	3304      	adds	r3, #4
 80047ca:	2101      	movs	r1, #1
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 f8a5 	bl	800491c <RCCEx_PLLSAI1_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80047d6:	7cfb      	ldrb	r3, [r7, #19]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d001      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80047dc:	7cfb      	ldrb	r3, [r7, #19]
 80047de:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d028      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80047ec:	4b4a      	ldr	r3, [pc, #296]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047fa:	4947      	ldr	r1, [pc, #284]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004806:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800480a:	d106      	bne.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800480c:	4b42      	ldr	r3, [pc, #264]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	4a41      	ldr	r2, [pc, #260]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004812:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004816:	60d3      	str	r3, [r2, #12]
 8004818:	e011      	b.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800481e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004822:	d10c      	bne.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	3304      	adds	r3, #4
 8004828:	2101      	movs	r1, #1
 800482a:	4618      	mov	r0, r3
 800482c:	f000 f876 	bl	800491c <RCCEx_PLLSAI1_Config>
 8004830:	4603      	mov	r3, r0
 8004832:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004834:	7cfb      	ldrb	r3, [r7, #19]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800483a:	7cfb      	ldrb	r3, [r7, #19]
 800483c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004846:	2b00      	cmp	r3, #0
 8004848:	d01e      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800484a:	4b33      	ldr	r3, [pc, #204]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800484c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004850:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800485a:	492f      	ldr	r1, [pc, #188]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800485c:	4313      	orrs	r3, r2
 800485e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004868:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800486c:	d10c      	bne.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	3304      	adds	r3, #4
 8004872:	2102      	movs	r1, #2
 8004874:	4618      	mov	r0, r3
 8004876:	f000 f851 	bl	800491c <RCCEx_PLLSAI1_Config>
 800487a:	4603      	mov	r3, r0
 800487c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800487e:	7cfb      	ldrb	r3, [r7, #19]
 8004880:	2b00      	cmp	r3, #0
 8004882:	d001      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004884:	7cfb      	ldrb	r3, [r7, #19]
 8004886:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00b      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004894:	4b20      	ldr	r3, [pc, #128]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004896:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800489a:	f023 0204 	bic.w	r2, r3, #4
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048a4:	491c      	ldr	r1, [pc, #112]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048a6:	4313      	orrs	r3, r2
 80048a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d00b      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80048b8:	4b17      	ldr	r3, [pc, #92]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048be:	f023 0218 	bic.w	r2, r3, #24
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c8:	4913      	ldr	r1, [pc, #76]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d017      	beq.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80048dc:	4b0e      	ldr	r3, [pc, #56]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048de:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048ec:	490a      	ldr	r1, [pc, #40]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80048fe:	d105      	bne.n	800490c <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004900:	4b05      	ldr	r3, [pc, #20]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	4a04      	ldr	r2, [pc, #16]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004906:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800490a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800490c:	7cbb      	ldrb	r3, [r7, #18]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3718      	adds	r7, #24
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	40021000 	.word	0x40021000

0800491c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
 8004924:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004926:	2300      	movs	r3, #0
 8004928:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800492a:	4b72      	ldr	r3, [pc, #456]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	f003 0303 	and.w	r3, r3, #3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d00e      	beq.n	8004954 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004936:	4b6f      	ldr	r3, [pc, #444]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004938:	68db      	ldr	r3, [r3, #12]
 800493a:	f003 0203 	and.w	r2, r3, #3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	429a      	cmp	r2, r3
 8004944:	d103      	bne.n	800494e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
       ||
 800494a:	2b00      	cmp	r3, #0
 800494c:	d142      	bne.n	80049d4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	73fb      	strb	r3, [r7, #15]
 8004952:	e03f      	b.n	80049d4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2b03      	cmp	r3, #3
 800495a:	d018      	beq.n	800498e <RCCEx_PLLSAI1_Config+0x72>
 800495c:	2b03      	cmp	r3, #3
 800495e:	d825      	bhi.n	80049ac <RCCEx_PLLSAI1_Config+0x90>
 8004960:	2b01      	cmp	r3, #1
 8004962:	d002      	beq.n	800496a <RCCEx_PLLSAI1_Config+0x4e>
 8004964:	2b02      	cmp	r3, #2
 8004966:	d009      	beq.n	800497c <RCCEx_PLLSAI1_Config+0x60>
 8004968:	e020      	b.n	80049ac <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800496a:	4b62      	ldr	r3, [pc, #392]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 0302 	and.w	r3, r3, #2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d11d      	bne.n	80049b2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800497a:	e01a      	b.n	80049b2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800497c:	4b5d      	ldr	r3, [pc, #372]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004984:	2b00      	cmp	r3, #0
 8004986:	d116      	bne.n	80049b6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800498c:	e013      	b.n	80049b6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800498e:	4b59      	ldr	r3, [pc, #356]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d10f      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800499a:	4b56      	ldr	r3, [pc, #344]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d109      	bne.n	80049ba <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80049aa:	e006      	b.n	80049ba <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80049ac:	2301      	movs	r3, #1
 80049ae:	73fb      	strb	r3, [r7, #15]
      break;
 80049b0:	e004      	b.n	80049bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049b2:	bf00      	nop
 80049b4:	e002      	b.n	80049bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049b6:	bf00      	nop
 80049b8:	e000      	b.n	80049bc <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80049ba:	bf00      	nop
    }

    if(status == HAL_OK)
 80049bc:	7bfb      	ldrb	r3, [r7, #15]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d108      	bne.n	80049d4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80049c2:	4b4c      	ldr	r3, [pc, #304]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049c4:	68db      	ldr	r3, [r3, #12]
 80049c6:	f023 0203 	bic.w	r2, r3, #3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4949      	ldr	r1, [pc, #292]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049d0:	4313      	orrs	r3, r2
 80049d2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80049d4:	7bfb      	ldrb	r3, [r7, #15]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	f040 8086 	bne.w	8004ae8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80049dc:	4b45      	ldr	r3, [pc, #276]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a44      	ldr	r2, [pc, #272]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80049e2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049e6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049e8:	f7fb fe4c 	bl	8000684 <HAL_GetTick>
 80049ec:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80049ee:	e009      	b.n	8004a04 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80049f0:	f7fb fe48 	bl	8000684 <HAL_GetTick>
 80049f4:	4602      	mov	r2, r0
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	2b02      	cmp	r3, #2
 80049fc:	d902      	bls.n	8004a04 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	73fb      	strb	r3, [r7, #15]
        break;
 8004a02:	e005      	b.n	8004a10 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004a04:	4b3b      	ldr	r3, [pc, #236]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d1ef      	bne.n	80049f0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d168      	bne.n	8004ae8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d113      	bne.n	8004a44 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a1c:	4b35      	ldr	r3, [pc, #212]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a1e:	691a      	ldr	r2, [r3, #16]
 8004a20:	4b35      	ldr	r3, [pc, #212]	; (8004af8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6892      	ldr	r2, [r2, #8]
 8004a28:	0211      	lsls	r1, r2, #8
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	68d2      	ldr	r2, [r2, #12]
 8004a2e:	06d2      	lsls	r2, r2, #27
 8004a30:	4311      	orrs	r1, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6852      	ldr	r2, [r2, #4]
 8004a36:	3a01      	subs	r2, #1
 8004a38:	0112      	lsls	r2, r2, #4
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	492d      	ldr	r1, [pc, #180]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	610b      	str	r3, [r1, #16]
 8004a42:	e02d      	b.n	8004aa0 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	2b01      	cmp	r3, #1
 8004a48:	d115      	bne.n	8004a76 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a4a:	4b2a      	ldr	r3, [pc, #168]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a4c:	691a      	ldr	r2, [r3, #16]
 8004a4e:	4b2b      	ldr	r3, [pc, #172]	; (8004afc <RCCEx_PLLSAI1_Config+0x1e0>)
 8004a50:	4013      	ands	r3, r2
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	6892      	ldr	r2, [r2, #8]
 8004a56:	0211      	lsls	r1, r2, #8
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	6912      	ldr	r2, [r2, #16]
 8004a5c:	0852      	lsrs	r2, r2, #1
 8004a5e:	3a01      	subs	r2, #1
 8004a60:	0552      	lsls	r2, r2, #21
 8004a62:	4311      	orrs	r1, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	6852      	ldr	r2, [r2, #4]
 8004a68:	3a01      	subs	r2, #1
 8004a6a:	0112      	lsls	r2, r2, #4
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	4921      	ldr	r1, [pc, #132]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a70:	4313      	orrs	r3, r2
 8004a72:	610b      	str	r3, [r1, #16]
 8004a74:	e014      	b.n	8004aa0 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a76:	4b1f      	ldr	r3, [pc, #124]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	4b21      	ldr	r3, [pc, #132]	; (8004b00 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a7c:	4013      	ands	r3, r2
 8004a7e:	687a      	ldr	r2, [r7, #4]
 8004a80:	6892      	ldr	r2, [r2, #8]
 8004a82:	0211      	lsls	r1, r2, #8
 8004a84:	687a      	ldr	r2, [r7, #4]
 8004a86:	6952      	ldr	r2, [r2, #20]
 8004a88:	0852      	lsrs	r2, r2, #1
 8004a8a:	3a01      	subs	r2, #1
 8004a8c:	0652      	lsls	r2, r2, #25
 8004a8e:	4311      	orrs	r1, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6852      	ldr	r2, [r2, #4]
 8004a94:	3a01      	subs	r2, #1
 8004a96:	0112      	lsls	r2, r2, #4
 8004a98:	430a      	orrs	r2, r1
 8004a9a:	4916      	ldr	r1, [pc, #88]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004aa0:	4b14      	ldr	r3, [pc, #80]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a13      	ldr	r2, [pc, #76]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aa6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004aaa:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aac:	f7fb fdea 	bl	8000684 <HAL_GetTick>
 8004ab0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ab2:	e009      	b.n	8004ac8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ab4:	f7fb fde6 	bl	8000684 <HAL_GetTick>
 8004ab8:	4602      	mov	r2, r0
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	1ad3      	subs	r3, r2, r3
 8004abe:	2b02      	cmp	r3, #2
 8004ac0:	d902      	bls.n	8004ac8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	73fb      	strb	r3, [r7, #15]
          break;
 8004ac6:	e005      	b.n	8004ad4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004ac8:	4b0a      	ldr	r3, [pc, #40]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d0ef      	beq.n	8004ab4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004ad4:	7bfb      	ldrb	r3, [r7, #15]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d106      	bne.n	8004ae8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004ada:	4b06      	ldr	r3, [pc, #24]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004adc:	691a      	ldr	r2, [r3, #16]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	4904      	ldr	r1, [pc, #16]	; (8004af4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004ae8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40021000 	.word	0x40021000
 8004af8:	07ff800f 	.word	0x07ff800f
 8004afc:	ff9f800f 	.word	0xff9f800f
 8004b00:	f9ff800f 	.word	0xf9ff800f

08004b04 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004b12:	4b72      	ldr	r3, [pc, #456]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00e      	beq.n	8004b3c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004b1e:	4b6f      	ldr	r3, [pc, #444]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b20:	68db      	ldr	r3, [r3, #12]
 8004b22:	f003 0203 	and.w	r2, r3, #3
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d103      	bne.n	8004b36 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
       ||
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d142      	bne.n	8004bbc <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	73fb      	strb	r3, [r7, #15]
 8004b3a:	e03f      	b.n	8004bbc <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b03      	cmp	r3, #3
 8004b42:	d018      	beq.n	8004b76 <RCCEx_PLLSAI2_Config+0x72>
 8004b44:	2b03      	cmp	r3, #3
 8004b46:	d825      	bhi.n	8004b94 <RCCEx_PLLSAI2_Config+0x90>
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d002      	beq.n	8004b52 <RCCEx_PLLSAI2_Config+0x4e>
 8004b4c:	2b02      	cmp	r3, #2
 8004b4e:	d009      	beq.n	8004b64 <RCCEx_PLLSAI2_Config+0x60>
 8004b50:	e020      	b.n	8004b94 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b52:	4b62      	ldr	r3, [pc, #392]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f003 0302 	and.w	r3, r3, #2
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d11d      	bne.n	8004b9a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b62:	e01a      	b.n	8004b9a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b64:	4b5d      	ldr	r3, [pc, #372]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d116      	bne.n	8004b9e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b74:	e013      	b.n	8004b9e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b76:	4b59      	ldr	r3, [pc, #356]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d10f      	bne.n	8004ba2 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b82:	4b56      	ldr	r3, [pc, #344]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b92:	e006      	b.n	8004ba2 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	73fb      	strb	r3, [r7, #15]
      break;
 8004b98:	e004      	b.n	8004ba4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004b9a:	bf00      	nop
 8004b9c:	e002      	b.n	8004ba4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004b9e:	bf00      	nop
 8004ba0:	e000      	b.n	8004ba4 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004ba2:	bf00      	nop
    }

    if(status == HAL_OK)
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d108      	bne.n	8004bbc <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004baa:	4b4c      	ldr	r3, [pc, #304]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	f023 0203 	bic.w	r2, r3, #3
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4949      	ldr	r1, [pc, #292]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f040 8086 	bne.w	8004cd0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004bc4:	4b45      	ldr	r3, [pc, #276]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	4a44      	ldr	r2, [pc, #272]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bd0:	f7fb fd58 	bl	8000684 <HAL_GetTick>
 8004bd4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bd6:	e009      	b.n	8004bec <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bd8:	f7fb fd54 	bl	8000684 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d902      	bls.n	8004bec <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004be6:	2303      	movs	r3, #3
 8004be8:	73fb      	strb	r3, [r7, #15]
        break;
 8004bea:	e005      	b.n	8004bf8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004bec:	4b3b      	ldr	r3, [pc, #236]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1ef      	bne.n	8004bd8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004bf8:	7bfb      	ldrb	r3, [r7, #15]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d168      	bne.n	8004cd0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d113      	bne.n	8004c2c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c04:	4b35      	ldr	r3, [pc, #212]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c06:	695a      	ldr	r2, [r3, #20]
 8004c08:	4b35      	ldr	r3, [pc, #212]	; (8004ce0 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	687a      	ldr	r2, [r7, #4]
 8004c0e:	6892      	ldr	r2, [r2, #8]
 8004c10:	0211      	lsls	r1, r2, #8
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	68d2      	ldr	r2, [r2, #12]
 8004c16:	06d2      	lsls	r2, r2, #27
 8004c18:	4311      	orrs	r1, r2
 8004c1a:	687a      	ldr	r2, [r7, #4]
 8004c1c:	6852      	ldr	r2, [r2, #4]
 8004c1e:	3a01      	subs	r2, #1
 8004c20:	0112      	lsls	r2, r2, #4
 8004c22:	430a      	orrs	r2, r1
 8004c24:	492d      	ldr	r1, [pc, #180]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	614b      	str	r3, [r1, #20]
 8004c2a:	e02d      	b.n	8004c88 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d115      	bne.n	8004c5e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c32:	4b2a      	ldr	r3, [pc, #168]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c34:	695a      	ldr	r2, [r3, #20]
 8004c36:	4b2b      	ldr	r3, [pc, #172]	; (8004ce4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004c38:	4013      	ands	r3, r2
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6892      	ldr	r2, [r2, #8]
 8004c3e:	0211      	lsls	r1, r2, #8
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	6912      	ldr	r2, [r2, #16]
 8004c44:	0852      	lsrs	r2, r2, #1
 8004c46:	3a01      	subs	r2, #1
 8004c48:	0552      	lsls	r2, r2, #21
 8004c4a:	4311      	orrs	r1, r2
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6852      	ldr	r2, [r2, #4]
 8004c50:	3a01      	subs	r2, #1
 8004c52:	0112      	lsls	r2, r2, #4
 8004c54:	430a      	orrs	r2, r1
 8004c56:	4921      	ldr	r1, [pc, #132]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c58:	4313      	orrs	r3, r2
 8004c5a:	614b      	str	r3, [r1, #20]
 8004c5c:	e014      	b.n	8004c88 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004c5e:	4b1f      	ldr	r3, [pc, #124]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c60:	695a      	ldr	r2, [r3, #20]
 8004c62:	4b21      	ldr	r3, [pc, #132]	; (8004ce8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004c64:	4013      	ands	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	6892      	ldr	r2, [r2, #8]
 8004c6a:	0211      	lsls	r1, r2, #8
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	6952      	ldr	r2, [r2, #20]
 8004c70:	0852      	lsrs	r2, r2, #1
 8004c72:	3a01      	subs	r2, #1
 8004c74:	0652      	lsls	r2, r2, #25
 8004c76:	4311      	orrs	r1, r2
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	6852      	ldr	r2, [r2, #4]
 8004c7c:	3a01      	subs	r2, #1
 8004c7e:	0112      	lsls	r2, r2, #4
 8004c80:	430a      	orrs	r2, r1
 8004c82:	4916      	ldr	r1, [pc, #88]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c84:	4313      	orrs	r3, r2
 8004c86:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004c88:	4b14      	ldr	r3, [pc, #80]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a13      	ldr	r2, [pc, #76]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004c8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c92:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c94:	f7fb fcf6 	bl	8000684 <HAL_GetTick>
 8004c98:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c9a:	e009      	b.n	8004cb0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004c9c:	f7fb fcf2 	bl	8000684 <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	2b02      	cmp	r3, #2
 8004ca8:	d902      	bls.n	8004cb0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	73fb      	strb	r3, [r7, #15]
          break;
 8004cae:	e005      	b.n	8004cbc <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004cb0:	4b0a      	ldr	r3, [pc, #40]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d0ef      	beq.n	8004c9c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004cbc:	7bfb      	ldrb	r3, [r7, #15]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004cc2:	4b06      	ldr	r3, [pc, #24]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cc4:	695a      	ldr	r2, [r3, #20]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	4904      	ldr	r1, [pc, #16]	; (8004cdc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004cd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3710      	adds	r7, #16
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	40021000 	.word	0x40021000
 8004ce0:	07ff800f 	.word	0x07ff800f
 8004ce4:	ff9f800f 	.word	0xff9f800f
 8004ce8:	f9ff800f 	.word	0xf9ff800f

08004cec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b082      	sub	sp, #8
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d101      	bne.n	8004cfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e049      	b.n	8004d92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d106      	bne.n	8004d18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d12:	6878      	ldr	r0, [r7, #4]
 8004d14:	f003 fc04 	bl	8008520 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2202      	movs	r2, #2
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	3304      	adds	r3, #4
 8004d28:	4619      	mov	r1, r3
 8004d2a:	4610      	mov	r0, r2
 8004d2c:	f000 fac0 	bl	80052b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2201      	movs	r2, #1
 8004d34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2201      	movs	r2, #1
 8004d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2201      	movs	r2, #1
 8004d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2201      	movs	r2, #1
 8004d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2201      	movs	r2, #1
 8004d64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
	...

08004d9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d001      	beq.n	8004db4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e04f      	b.n	8004e54 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2202      	movs	r2, #2
 8004db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	68da      	ldr	r2, [r3, #12]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a23      	ldr	r2, [pc, #140]	; (8004e60 <HAL_TIM_Base_Start_IT+0xc4>)
 8004dd2:	4293      	cmp	r3, r2
 8004dd4:	d01d      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x76>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dde:	d018      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x76>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	4a1f      	ldr	r2, [pc, #124]	; (8004e64 <HAL_TIM_Base_Start_IT+0xc8>)
 8004de6:	4293      	cmp	r3, r2
 8004de8:	d013      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x76>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	4a1e      	ldr	r2, [pc, #120]	; (8004e68 <HAL_TIM_Base_Start_IT+0xcc>)
 8004df0:	4293      	cmp	r3, r2
 8004df2:	d00e      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x76>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4a1c      	ldr	r2, [pc, #112]	; (8004e6c <HAL_TIM_Base_Start_IT+0xd0>)
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	d009      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x76>
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	4a1b      	ldr	r2, [pc, #108]	; (8004e70 <HAL_TIM_Base_Start_IT+0xd4>)
 8004e04:	4293      	cmp	r3, r2
 8004e06:	d004      	beq.n	8004e12 <HAL_TIM_Base_Start_IT+0x76>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a19      	ldr	r2, [pc, #100]	; (8004e74 <HAL_TIM_Base_Start_IT+0xd8>)
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d115      	bne.n	8004e3e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689a      	ldr	r2, [r3, #8]
 8004e18:	4b17      	ldr	r3, [pc, #92]	; (8004e78 <HAL_TIM_Base_Start_IT+0xdc>)
 8004e1a:	4013      	ands	r3, r2
 8004e1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2b06      	cmp	r3, #6
 8004e22:	d015      	beq.n	8004e50 <HAL_TIM_Base_Start_IT+0xb4>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2a:	d011      	beq.n	8004e50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0201 	orr.w	r2, r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e3c:	e008      	b.n	8004e50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f042 0201 	orr.w	r2, r2, #1
 8004e4c:	601a      	str	r2, [r3, #0]
 8004e4e:	e000      	b.n	8004e52 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e50:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	40012c00 	.word	0x40012c00
 8004e64:	40000400 	.word	0x40000400
 8004e68:	40000800 	.word	0x40000800
 8004e6c:	40000c00 	.word	0x40000c00
 8004e70:	40013400 	.word	0x40013400
 8004e74:	40014000 	.word	0x40014000
 8004e78:	00010007 	.word	0x00010007

08004e7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b082      	sub	sp, #8
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b02      	cmp	r3, #2
 8004e90:	d122      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	68db      	ldr	r3, [r3, #12]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b02      	cmp	r3, #2
 8004e9e:	d11b      	bne.n	8004ed8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f06f 0202 	mvn.w	r2, #2
 8004ea8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d003      	beq.n	8004ec6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f000 f9d8 	bl	8005274 <HAL_TIM_IC_CaptureCallback>
 8004ec4:	e005      	b.n	8004ed2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f9ca 	bl	8005260 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 f9db 	bl	8005288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2200      	movs	r2, #0
 8004ed6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	f003 0304 	and.w	r3, r3, #4
 8004ee2:	2b04      	cmp	r3, #4
 8004ee4:	d122      	bne.n	8004f2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	68db      	ldr	r3, [r3, #12]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b04      	cmp	r3, #4
 8004ef2:	d11b      	bne.n	8004f2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f06f 0204 	mvn.w	r2, #4
 8004efc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2202      	movs	r2, #2
 8004f02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d003      	beq.n	8004f1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f12:	6878      	ldr	r0, [r7, #4]
 8004f14:	f000 f9ae 	bl	8005274 <HAL_TIM_IC_CaptureCallback>
 8004f18:	e005      	b.n	8004f26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f000 f9a0 	bl	8005260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f20:	6878      	ldr	r0, [r7, #4]
 8004f22:	f000 f9b1 	bl	8005288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	691b      	ldr	r3, [r3, #16]
 8004f32:	f003 0308 	and.w	r3, r3, #8
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d122      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	68db      	ldr	r3, [r3, #12]
 8004f40:	f003 0308 	and.w	r3, r3, #8
 8004f44:	2b08      	cmp	r3, #8
 8004f46:	d11b      	bne.n	8004f80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f06f 0208 	mvn.w	r2, #8
 8004f50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2204      	movs	r2, #4
 8004f56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	69db      	ldr	r3, [r3, #28]
 8004f5e:	f003 0303 	and.w	r3, r3, #3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d003      	beq.n	8004f6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 f984 	bl	8005274 <HAL_TIM_IC_CaptureCallback>
 8004f6c:	e005      	b.n	8004f7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 f976 	bl	8005260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f000 f987 	bl	8005288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0310 	and.w	r3, r3, #16
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d122      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	f003 0310 	and.w	r3, r3, #16
 8004f98:	2b10      	cmp	r3, #16
 8004f9a:	d11b      	bne.n	8004fd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f06f 0210 	mvn.w	r2, #16
 8004fa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2208      	movs	r2, #8
 8004faa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d003      	beq.n	8004fc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f000 f95a 	bl	8005274 <HAL_TIM_IC_CaptureCallback>
 8004fc0:	e005      	b.n	8004fce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 f94c 	bl	8005260 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 f95d 	bl	8005288 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d10e      	bne.n	8005000 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f003 0301 	and.w	r3, r3, #1
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	d107      	bne.n	8005000 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f06f 0201 	mvn.w	r2, #1
 8004ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 f926 	bl	800524c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800500a:	2b80      	cmp	r3, #128	; 0x80
 800500c:	d10e      	bne.n	800502c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005018:	2b80      	cmp	r3, #128	; 0x80
 800501a:	d107      	bne.n	800502c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005024:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f000 fb08 	bl	800563c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800503a:	d10e      	bne.n	800505a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68db      	ldr	r3, [r3, #12]
 8005042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005046:	2b80      	cmp	r3, #128	; 0x80
 8005048:	d107      	bne.n	800505a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 fafb 	bl	8005650 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005064:	2b40      	cmp	r3, #64	; 0x40
 8005066:	d10e      	bne.n	8005086 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68db      	ldr	r3, [r3, #12]
 800506e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005072:	2b40      	cmp	r3, #64	; 0x40
 8005074:	d107      	bne.n	8005086 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800507e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005080:	6878      	ldr	r0, [r7, #4]
 8005082:	f000 f90b 	bl	800529c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b20      	cmp	r3, #32
 8005092:	d10e      	bne.n	80050b2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	f003 0320 	and.w	r3, r3, #32
 800509e:	2b20      	cmp	r3, #32
 80050a0:	d107      	bne.n	80050b2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f06f 0220 	mvn.w	r2, #32
 80050aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f000 fabb 	bl	8005628 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80050b2:	bf00      	nop
 80050b4:	3708      	adds	r7, #8
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}

080050ba <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80050ba:	b580      	push	{r7, lr}
 80050bc:	b084      	sub	sp, #16
 80050be:	af00      	add	r7, sp, #0
 80050c0:	6078      	str	r0, [r7, #4]
 80050c2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d101      	bne.n	80050d6 <HAL_TIM_ConfigClockSource+0x1c>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e0b6      	b.n	8005244 <HAL_TIM_ConfigClockSource+0x18a>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2202      	movs	r2, #2
 80050e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050ee:	68bb      	ldr	r3, [r7, #8]
 80050f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050f8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050fa:	68bb      	ldr	r3, [r7, #8]
 80050fc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005100:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	68ba      	ldr	r2, [r7, #8]
 8005108:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005112:	d03e      	beq.n	8005192 <HAL_TIM_ConfigClockSource+0xd8>
 8005114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005118:	f200 8087 	bhi.w	800522a <HAL_TIM_ConfigClockSource+0x170>
 800511c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005120:	f000 8086 	beq.w	8005230 <HAL_TIM_ConfigClockSource+0x176>
 8005124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005128:	d87f      	bhi.n	800522a <HAL_TIM_ConfigClockSource+0x170>
 800512a:	2b70      	cmp	r3, #112	; 0x70
 800512c:	d01a      	beq.n	8005164 <HAL_TIM_ConfigClockSource+0xaa>
 800512e:	2b70      	cmp	r3, #112	; 0x70
 8005130:	d87b      	bhi.n	800522a <HAL_TIM_ConfigClockSource+0x170>
 8005132:	2b60      	cmp	r3, #96	; 0x60
 8005134:	d050      	beq.n	80051d8 <HAL_TIM_ConfigClockSource+0x11e>
 8005136:	2b60      	cmp	r3, #96	; 0x60
 8005138:	d877      	bhi.n	800522a <HAL_TIM_ConfigClockSource+0x170>
 800513a:	2b50      	cmp	r3, #80	; 0x50
 800513c:	d03c      	beq.n	80051b8 <HAL_TIM_ConfigClockSource+0xfe>
 800513e:	2b50      	cmp	r3, #80	; 0x50
 8005140:	d873      	bhi.n	800522a <HAL_TIM_ConfigClockSource+0x170>
 8005142:	2b40      	cmp	r3, #64	; 0x40
 8005144:	d058      	beq.n	80051f8 <HAL_TIM_ConfigClockSource+0x13e>
 8005146:	2b40      	cmp	r3, #64	; 0x40
 8005148:	d86f      	bhi.n	800522a <HAL_TIM_ConfigClockSource+0x170>
 800514a:	2b30      	cmp	r3, #48	; 0x30
 800514c:	d064      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x15e>
 800514e:	2b30      	cmp	r3, #48	; 0x30
 8005150:	d86b      	bhi.n	800522a <HAL_TIM_ConfigClockSource+0x170>
 8005152:	2b20      	cmp	r3, #32
 8005154:	d060      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x15e>
 8005156:	2b20      	cmp	r3, #32
 8005158:	d867      	bhi.n	800522a <HAL_TIM_ConfigClockSource+0x170>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d05c      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x15e>
 800515e:	2b10      	cmp	r3, #16
 8005160:	d05a      	beq.n	8005218 <HAL_TIM_ConfigClockSource+0x15e>
 8005162:	e062      	b.n	800522a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6818      	ldr	r0, [r3, #0]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	6899      	ldr	r1, [r3, #8]
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	685a      	ldr	r2, [r3, #4]
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	f000 f9b0 	bl	80054d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005180:	68bb      	ldr	r3, [r7, #8]
 8005182:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005186:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68ba      	ldr	r2, [r7, #8]
 800518e:	609a      	str	r2, [r3, #8]
      break;
 8005190:	e04f      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6818      	ldr	r0, [r3, #0]
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	6899      	ldr	r1, [r3, #8]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	f000 f999 	bl	80054d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	689a      	ldr	r2, [r3, #8]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80051b4:	609a      	str	r2, [r3, #8]
      break;
 80051b6:	e03c      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	6818      	ldr	r0, [r3, #0]
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	6859      	ldr	r1, [r3, #4]
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	461a      	mov	r2, r3
 80051c6:	f000 f90d 	bl	80053e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2150      	movs	r1, #80	; 0x50
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 f966 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 80051d6:	e02c      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	6818      	ldr	r0, [r3, #0]
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	6859      	ldr	r1, [r3, #4]
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	461a      	mov	r2, r3
 80051e6:	f000 f92c 	bl	8005442 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2160      	movs	r1, #96	; 0x60
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 f956 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 80051f6:	e01c      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	683b      	ldr	r3, [r7, #0]
 80051fe:	6859      	ldr	r1, [r3, #4]
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	68db      	ldr	r3, [r3, #12]
 8005204:	461a      	mov	r2, r3
 8005206:	f000 f8ed 	bl	80053e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2140      	movs	r1, #64	; 0x40
 8005210:	4618      	mov	r0, r3
 8005212:	f000 f946 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8005216:	e00c      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681a      	ldr	r2, [r3, #0]
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4619      	mov	r1, r3
 8005222:	4610      	mov	r0, r2
 8005224:	f000 f93d 	bl	80054a2 <TIM_ITRx_SetConfig>
      break;
 8005228:	e003      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800522a:	2301      	movs	r3, #1
 800522c:	73fb      	strb	r3, [r7, #15]
      break;
 800522e:	e000      	b.n	8005232 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005230:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005242:	7bfb      	ldrb	r3, [r7, #15]
}
 8005244:	4618      	mov	r0, r3
 8005246:	3710      	adds	r7, #16
 8005248:	46bd      	mov	sp, r7
 800524a:	bd80      	pop	{r7, pc}

0800524c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800524c:	b480      	push	{r7}
 800524e:	b083      	sub	sp, #12
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005254:	bf00      	nop
 8005256:	370c      	adds	r7, #12
 8005258:	46bd      	mov	sp, r7
 800525a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525e:	4770      	bx	lr

08005260 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005260:	b480      	push	{r7}
 8005262:	b083      	sub	sp, #12
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005268:	bf00      	nop
 800526a:	370c      	adds	r7, #12
 800526c:	46bd      	mov	sp, r7
 800526e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005272:	4770      	bx	lr

08005274 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005274:	b480      	push	{r7}
 8005276:	b083      	sub	sp, #12
 8005278:	af00      	add	r7, sp, #0
 800527a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800527c:	bf00      	nop
 800527e:	370c      	adds	r7, #12
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr

08005288 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
 800528e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005290:	bf00      	nop
 8005292:	370c      	adds	r7, #12
 8005294:	46bd      	mov	sp, r7
 8005296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529a:	4770      	bx	lr

0800529c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800529c:	b480      	push	{r7}
 800529e:	b083      	sub	sp, #12
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052a4:	bf00      	nop
 80052a6:	370c      	adds	r7, #12
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr

080052b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b085      	sub	sp, #20
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a40      	ldr	r2, [pc, #256]	; (80053c4 <TIM_Base_SetConfig+0x114>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d013      	beq.n	80052f0 <TIM_Base_SetConfig+0x40>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ce:	d00f      	beq.n	80052f0 <TIM_Base_SetConfig+0x40>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	4a3d      	ldr	r2, [pc, #244]	; (80053c8 <TIM_Base_SetConfig+0x118>)
 80052d4:	4293      	cmp	r3, r2
 80052d6:	d00b      	beq.n	80052f0 <TIM_Base_SetConfig+0x40>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	4a3c      	ldr	r2, [pc, #240]	; (80053cc <TIM_Base_SetConfig+0x11c>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d007      	beq.n	80052f0 <TIM_Base_SetConfig+0x40>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	4a3b      	ldr	r2, [pc, #236]	; (80053d0 <TIM_Base_SetConfig+0x120>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d003      	beq.n	80052f0 <TIM_Base_SetConfig+0x40>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	4a3a      	ldr	r2, [pc, #232]	; (80053d4 <TIM_Base_SetConfig+0x124>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d108      	bne.n	8005302 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	68fa      	ldr	r2, [r7, #12]
 80052fe:	4313      	orrs	r3, r2
 8005300:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a2f      	ldr	r2, [pc, #188]	; (80053c4 <TIM_Base_SetConfig+0x114>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d01f      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005310:	d01b      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a2c      	ldr	r2, [pc, #176]	; (80053c8 <TIM_Base_SetConfig+0x118>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d017      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a2b      	ldr	r2, [pc, #172]	; (80053cc <TIM_Base_SetConfig+0x11c>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d013      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a2a      	ldr	r2, [pc, #168]	; (80053d0 <TIM_Base_SetConfig+0x120>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d00f      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a29      	ldr	r2, [pc, #164]	; (80053d4 <TIM_Base_SetConfig+0x124>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d00b      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a28      	ldr	r2, [pc, #160]	; (80053d8 <TIM_Base_SetConfig+0x128>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d007      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a27      	ldr	r2, [pc, #156]	; (80053dc <TIM_Base_SetConfig+0x12c>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d003      	beq.n	800534a <TIM_Base_SetConfig+0x9a>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a26      	ldr	r2, [pc, #152]	; (80053e0 <TIM_Base_SetConfig+0x130>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d108      	bne.n	800535c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005350:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4313      	orrs	r3, r2
 800535a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	695b      	ldr	r3, [r3, #20]
 8005366:	4313      	orrs	r3, r2
 8005368:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	689a      	ldr	r2, [r3, #8]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	4a10      	ldr	r2, [pc, #64]	; (80053c4 <TIM_Base_SetConfig+0x114>)
 8005384:	4293      	cmp	r3, r2
 8005386:	d00f      	beq.n	80053a8 <TIM_Base_SetConfig+0xf8>
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	4a12      	ldr	r2, [pc, #72]	; (80053d4 <TIM_Base_SetConfig+0x124>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d00b      	beq.n	80053a8 <TIM_Base_SetConfig+0xf8>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	4a11      	ldr	r2, [pc, #68]	; (80053d8 <TIM_Base_SetConfig+0x128>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d007      	beq.n	80053a8 <TIM_Base_SetConfig+0xf8>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	4a10      	ldr	r2, [pc, #64]	; (80053dc <TIM_Base_SetConfig+0x12c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d003      	beq.n	80053a8 <TIM_Base_SetConfig+0xf8>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	4a0f      	ldr	r2, [pc, #60]	; (80053e0 <TIM_Base_SetConfig+0x130>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d103      	bne.n	80053b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	691a      	ldr	r2, [r3, #16]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	615a      	str	r2, [r3, #20]
}
 80053b6:	bf00      	nop
 80053b8:	3714      	adds	r7, #20
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	40012c00 	.word	0x40012c00
 80053c8:	40000400 	.word	0x40000400
 80053cc:	40000800 	.word	0x40000800
 80053d0:	40000c00 	.word	0x40000c00
 80053d4:	40013400 	.word	0x40013400
 80053d8:	40014000 	.word	0x40014000
 80053dc:	40014400 	.word	0x40014400
 80053e0:	40014800 	.word	0x40014800

080053e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b087      	sub	sp, #28
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	60f8      	str	r0, [r7, #12]
 80053ec:	60b9      	str	r1, [r7, #8]
 80053ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a1b      	ldr	r3, [r3, #32]
 80053f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	6a1b      	ldr	r3, [r3, #32]
 80053fa:	f023 0201 	bic.w	r2, r3, #1
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	699b      	ldr	r3, [r3, #24]
 8005406:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800540e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	011b      	lsls	r3, r3, #4
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f023 030a 	bic.w	r3, r3, #10
 8005420:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	4313      	orrs	r3, r2
 8005428:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	621a      	str	r2, [r3, #32]
}
 8005436:	bf00      	nop
 8005438:	371c      	adds	r7, #28
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005442:	b480      	push	{r7}
 8005444:	b087      	sub	sp, #28
 8005446:	af00      	add	r7, sp, #0
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	f023 0210 	bic.w	r2, r3, #16
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800546c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	031b      	lsls	r3, r3, #12
 8005472:	697a      	ldr	r2, [r7, #20]
 8005474:	4313      	orrs	r3, r2
 8005476:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800547e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	697a      	ldr	r2, [r7, #20]
 800548e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	621a      	str	r2, [r3, #32]
}
 8005496:	bf00      	nop
 8005498:	371c      	adds	r7, #28
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr

080054a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80054a2:	b480      	push	{r7}
 80054a4:	b085      	sub	sp, #20
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
 80054aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	4313      	orrs	r3, r2
 80054c0:	f043 0307 	orr.w	r3, r3, #7
 80054c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	609a      	str	r2, [r3, #8]
}
 80054cc:	bf00      	nop
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr

080054d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	607a      	str	r2, [r7, #4]
 80054e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	021a      	lsls	r2, r3, #8
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	431a      	orrs	r2, r3
 80054fc:	68bb      	ldr	r3, [r7, #8]
 80054fe:	4313      	orrs	r3, r2
 8005500:	697a      	ldr	r2, [r7, #20]
 8005502:	4313      	orrs	r3, r2
 8005504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	697a      	ldr	r2, [r7, #20]
 800550a:	609a      	str	r2, [r3, #8]
}
 800550c:	bf00      	nop
 800550e:	371c      	adds	r7, #28
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr

08005518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005518:	b480      	push	{r7}
 800551a:	b085      	sub	sp, #20
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005528:	2b01      	cmp	r3, #1
 800552a:	d101      	bne.n	8005530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800552c:	2302      	movs	r3, #2
 800552e:	e068      	b.n	8005602 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2202      	movs	r2, #2
 800553c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a2e      	ldr	r2, [pc, #184]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d004      	beq.n	8005564 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a2d      	ldr	r2, [pc, #180]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d108      	bne.n	8005576 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800556a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	68fa      	ldr	r2, [r7, #12]
 8005572:	4313      	orrs	r3, r2
 8005574:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a1e      	ldr	r2, [pc, #120]	; (8005610 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d01d      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055a2:	d018      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1b      	ldr	r2, [pc, #108]	; (8005618 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d013      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a1a      	ldr	r2, [pc, #104]	; (800561c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d00e      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4a18      	ldr	r2, [pc, #96]	; (8005620 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d009      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	4a13      	ldr	r2, [pc, #76]	; (8005614 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d004      	beq.n	80055d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	4a14      	ldr	r2, [pc, #80]	; (8005624 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d10c      	bne.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80055dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	68ba      	ldr	r2, [r7, #8]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005600:	2300      	movs	r3, #0
}
 8005602:	4618      	mov	r0, r3
 8005604:	3714      	adds	r7, #20
 8005606:	46bd      	mov	sp, r7
 8005608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	40012c00 	.word	0x40012c00
 8005614:	40013400 	.word	0x40013400
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40014000 	.word	0x40014000

08005628 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005630:	bf00      	nop
 8005632:	370c      	adds	r7, #12
 8005634:	46bd      	mov	sp, r7
 8005636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563a:	4770      	bx	lr

0800563c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005644:	bf00      	nop
 8005646:	370c      	adds	r7, #12
 8005648:	46bd      	mov	sp, r7
 800564a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564e:	4770      	bx	lr

08005650 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e042      	b.n	80056fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800567c:	2b00      	cmp	r3, #0
 800567e:	d106      	bne.n	800568e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005688:	6878      	ldr	r0, [r7, #4]
 800568a:	f002 ff6d 	bl	8008568 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2224      	movs	r2, #36	; 0x24
 8005692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	681a      	ldr	r2, [r3, #0]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f022 0201 	bic.w	r2, r2, #1
 80056a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	f000 fcd0 	bl	800604c <UART_SetConfig>
 80056ac:	4603      	mov	r3, r0
 80056ae:	2b01      	cmp	r3, #1
 80056b0:	d101      	bne.n	80056b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e022      	b.n	80056fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d002      	beq.n	80056c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80056be:	6878      	ldr	r0, [r7, #4]
 80056c0:	f000 ffc0 	bl	8006644 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	685a      	ldr	r2, [r3, #4]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	689a      	ldr	r2, [r3, #8]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f042 0201 	orr.w	r2, r2, #1
 80056f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f001 f847 	bl	8006788 <UART_CheckIdleState>
 80056fa:	4603      	mov	r3, r0
}
 80056fc:	4618      	mov	r0, r3
 80056fe:	3708      	adds	r7, #8
 8005700:	46bd      	mov	sp, r7
 8005702:	bd80      	pop	{r7, pc}

08005704 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005704:	b580      	push	{r7, lr}
 8005706:	b08a      	sub	sp, #40	; 0x28
 8005708:	af02      	add	r7, sp, #8
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	603b      	str	r3, [r7, #0]
 8005710:	4613      	mov	r3, r2
 8005712:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800571a:	2b20      	cmp	r3, #32
 800571c:	f040 8084 	bne.w	8005828 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d002      	beq.n	800572c <HAL_UART_Transmit+0x28>
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800572c:	2301      	movs	r3, #1
 800572e:	e07c      	b.n	800582a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005736:	2b01      	cmp	r3, #1
 8005738:	d101      	bne.n	800573e <HAL_UART_Transmit+0x3a>
 800573a:	2302      	movs	r3, #2
 800573c:	e075      	b.n	800582a <HAL_UART_Transmit+0x126>
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	2201      	movs	r2, #1
 8005742:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	2221      	movs	r2, #33	; 0x21
 8005752:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005756:	f7fa ff95 	bl	8000684 <HAL_GetTick>
 800575a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	88fa      	ldrh	r2, [r7, #6]
 8005760:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	88fa      	ldrh	r2, [r7, #6]
 8005768:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005774:	d108      	bne.n	8005788 <HAL_UART_Transmit+0x84>
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	691b      	ldr	r3, [r3, #16]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d104      	bne.n	8005788 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800577e:	2300      	movs	r3, #0
 8005780:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	61bb      	str	r3, [r7, #24]
 8005786:	e003      	b.n	8005790 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800578c:	2300      	movs	r3, #0
 800578e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005798:	e02d      	b.n	80057f6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800579a:	683b      	ldr	r3, [r7, #0]
 800579c:	9300      	str	r3, [sp, #0]
 800579e:	697b      	ldr	r3, [r7, #20]
 80057a0:	2200      	movs	r2, #0
 80057a2:	2180      	movs	r1, #128	; 0x80
 80057a4:	68f8      	ldr	r0, [r7, #12]
 80057a6:	f001 f83a 	bl	800681e <UART_WaitOnFlagUntilTimeout>
 80057aa:	4603      	mov	r3, r0
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80057b0:	2303      	movs	r3, #3
 80057b2:	e03a      	b.n	800582a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10b      	bne.n	80057d2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	881a      	ldrh	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c6:	b292      	uxth	r2, r2
 80057c8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	3302      	adds	r3, #2
 80057ce:	61bb      	str	r3, [r7, #24]
 80057d0:	e008      	b.n	80057e4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	781a      	ldrb	r2, [r3, #0]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	b292      	uxth	r2, r2
 80057dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80057de:	69fb      	ldr	r3, [r7, #28]
 80057e0:	3301      	adds	r3, #1
 80057e2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80057fc:	b29b      	uxth	r3, r3
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1cb      	bne.n	800579a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	697b      	ldr	r3, [r7, #20]
 8005808:	2200      	movs	r2, #0
 800580a:	2140      	movs	r1, #64	; 0x40
 800580c:	68f8      	ldr	r0, [r7, #12]
 800580e:	f001 f806 	bl	800681e <UART_WaitOnFlagUntilTimeout>
 8005812:	4603      	mov	r3, r0
 8005814:	2b00      	cmp	r3, #0
 8005816:	d001      	beq.n	800581c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005818:	2303      	movs	r3, #3
 800581a:	e006      	b.n	800582a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2220      	movs	r2, #32
 8005820:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005824:	2300      	movs	r3, #0
 8005826:	e000      	b.n	800582a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005828:	2302      	movs	r3, #2
  }
}
 800582a:	4618      	mov	r0, r3
 800582c:	3720      	adds	r7, #32
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}

08005832 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b08a      	sub	sp, #40	; 0x28
 8005836:	af02      	add	r7, sp, #8
 8005838:	60f8      	str	r0, [r7, #12]
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	603b      	str	r3, [r7, #0]
 800583e:	4613      	mov	r3, r2
 8005840:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005848:	2b20      	cmp	r3, #32
 800584a:	f040 80c1 	bne.w	80059d0 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <HAL_UART_Receive+0x28>
 8005854:	88fb      	ldrh	r3, [r7, #6]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d101      	bne.n	800585e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e0b9      	b.n	80059d2 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005864:	2b01      	cmp	r3, #1
 8005866:	d101      	bne.n	800586c <HAL_UART_Receive+0x3a>
 8005868:	2302      	movs	r3, #2
 800586a:	e0b2      	b.n	80059d2 <HAL_UART_Receive+0x1a0>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	2201      	movs	r2, #1
 8005870:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2200      	movs	r2, #0
 8005878:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2222      	movs	r2, #34	; 0x22
 8005880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800588a:	f7fa fefb 	bl	8000684 <HAL_GetTick>
 800588e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	88fa      	ldrh	r2, [r7, #6]
 8005894:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	88fa      	ldrh	r2, [r7, #6]
 800589c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a8:	d10e      	bne.n	80058c8 <HAL_UART_Receive+0x96>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d105      	bne.n	80058be <HAL_UART_Receive+0x8c>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80058b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058bc:	e02d      	b.n	800591a <HAL_UART_Receive+0xe8>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	22ff      	movs	r2, #255	; 0xff
 80058c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058c6:	e028      	b.n	800591a <HAL_UART_Receive+0xe8>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d10d      	bne.n	80058ec <HAL_UART_Receive+0xba>
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d104      	bne.n	80058e2 <HAL_UART_Receive+0xb0>
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	22ff      	movs	r2, #255	; 0xff
 80058dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058e0:	e01b      	b.n	800591a <HAL_UART_Receive+0xe8>
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	227f      	movs	r2, #127	; 0x7f
 80058e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80058ea:	e016      	b.n	800591a <HAL_UART_Receive+0xe8>
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80058f4:	d10d      	bne.n	8005912 <HAL_UART_Receive+0xe0>
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d104      	bne.n	8005908 <HAL_UART_Receive+0xd6>
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	227f      	movs	r2, #127	; 0x7f
 8005902:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005906:	e008      	b.n	800591a <HAL_UART_Receive+0xe8>
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	223f      	movs	r2, #63	; 0x3f
 800590c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005910:	e003      	b.n	800591a <HAL_UART_Receive+0xe8>
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005920:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	689b      	ldr	r3, [r3, #8]
 8005926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800592a:	d108      	bne.n	800593e <HAL_UART_Receive+0x10c>
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d104      	bne.n	800593e <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8005934:	2300      	movs	r3, #0
 8005936:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005938:	68bb      	ldr	r3, [r7, #8]
 800593a:	61bb      	str	r3, [r7, #24]
 800593c:	e003      	b.n	8005946 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005942:	2300      	movs	r3, #0
 8005944:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	2200      	movs	r2, #0
 800594a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800594e:	e033      	b.n	80059b8 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	9300      	str	r3, [sp, #0]
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	2200      	movs	r2, #0
 8005958:	2120      	movs	r1, #32
 800595a:	68f8      	ldr	r0, [r7, #12]
 800595c:	f000 ff5f 	bl	800681e <UART_WaitOnFlagUntilTimeout>
 8005960:	4603      	mov	r3, r0
 8005962:	2b00      	cmp	r3, #0
 8005964:	d001      	beq.n	800596a <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005966:	2303      	movs	r3, #3
 8005968:	e033      	b.n	80059d2 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d10c      	bne.n	800598a <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005976:	b29a      	uxth	r2, r3
 8005978:	8a7b      	ldrh	r3, [r7, #18]
 800597a:	4013      	ands	r3, r2
 800597c:	b29a      	uxth	r2, r3
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	3302      	adds	r3, #2
 8005986:	61bb      	str	r3, [r7, #24]
 8005988:	e00d      	b.n	80059a6 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005990:	b29b      	uxth	r3, r3
 8005992:	b2da      	uxtb	r2, r3
 8005994:	8a7b      	ldrh	r3, [r7, #18]
 8005996:	b2db      	uxtb	r3, r3
 8005998:	4013      	ands	r3, r2
 800599a:	b2da      	uxtb	r2, r3
 800599c:	69fb      	ldr	r3, [r7, #28]
 800599e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	3301      	adds	r3, #1
 80059a4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059ac:	b29b      	uxth	r3, r3
 80059ae:	3b01      	subs	r3, #1
 80059b0:	b29a      	uxth	r2, r3
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1c5      	bne.n	8005950 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	e000      	b.n	80059d2 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 80059d0:	2302      	movs	r3, #2
  }
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
	...

080059dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b0ba      	sub	sp, #232	; 0xe8
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	69db      	ldr	r3, [r3, #28]
 80059ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005a02:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005a06:	f640 030f 	movw	r3, #2063	; 0x80f
 8005a0a:	4013      	ands	r3, r2
 8005a0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005a10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d11b      	bne.n	8005a50 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a1c:	f003 0320 	and.w	r3, r3, #32
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d015      	beq.n	8005a50 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a28:	f003 0320 	and.w	r3, r3, #32
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d105      	bne.n	8005a3c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d009      	beq.n	8005a50 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 82d6 	beq.w	8005ff2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a4a:	6878      	ldr	r0, [r7, #4]
 8005a4c:	4798      	blx	r3
      }
      return;
 8005a4e:	e2d0      	b.n	8005ff2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005a50:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 811f 	beq.w	8005c98 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005a5a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005a5e:	4b8b      	ldr	r3, [pc, #556]	; (8005c8c <HAL_UART_IRQHandler+0x2b0>)
 8005a60:	4013      	ands	r3, r2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d106      	bne.n	8005a74 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005a66:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005a6a:	4b89      	ldr	r3, [pc, #548]	; (8005c90 <HAL_UART_IRQHandler+0x2b4>)
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	f000 8112 	beq.w	8005c98 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a78:	f003 0301 	and.w	r3, r3, #1
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d011      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xc8>
 8005a80:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00b      	beq.n	8005aa4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2201      	movs	r2, #1
 8005a92:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a9a:	f043 0201 	orr.w	r2, r3, #1
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005aa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa8:	f003 0302 	and.w	r3, r3, #2
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d011      	beq.n	8005ad4 <HAL_UART_IRQHandler+0xf8>
 8005ab0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d00b      	beq.n	8005ad4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	2202      	movs	r2, #2
 8005ac2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005aca:	f043 0204 	orr.w	r2, r3, #4
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ad4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d011      	beq.n	8005b04 <HAL_UART_IRQHandler+0x128>
 8005ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ae4:	f003 0301 	and.w	r3, r3, #1
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00b      	beq.n	8005b04 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2204      	movs	r2, #4
 8005af2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005afa:	f043 0202 	orr.w	r2, r3, #2
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005b04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d017      	beq.n	8005b40 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b14:	f003 0320 	and.w	r3, r3, #32
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d105      	bne.n	8005b28 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005b1c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005b20:	4b5a      	ldr	r3, [pc, #360]	; (8005c8c <HAL_UART_IRQHandler+0x2b0>)
 8005b22:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00b      	beq.n	8005b40 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2208      	movs	r2, #8
 8005b2e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b36:	f043 0208 	orr.w	r2, r3, #8
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d012      	beq.n	8005b72 <HAL_UART_IRQHandler+0x196>
 8005b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b50:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d00c      	beq.n	8005b72 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005b60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b68:	f043 0220 	orr.w	r2, r3, #32
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 823c 	beq.w	8005ff6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005b7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b82:	f003 0320 	and.w	r3, r3, #32
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d013      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005b8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b8e:	f003 0320 	and.w	r3, r3, #32
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d105      	bne.n	8005ba2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005b96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d007      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bb8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	689b      	ldr	r3, [r3, #8]
 8005bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d005      	beq.n	8005bd6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005bca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005bce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d04f      	beq.n	8005c76 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f000 fee9 	bl	80069ae <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005be6:	2b40      	cmp	r3, #64	; 0x40
 8005be8:	d141      	bne.n	8005c6e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005bf8:	e853 3f00 	ldrex	r3, [r3]
 8005bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	3308      	adds	r3, #8
 8005c12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005c16:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005c22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d1d9      	bne.n	8005bea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d013      	beq.n	8005c66 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c42:	4a14      	ldr	r2, [pc, #80]	; (8005c94 <HAL_UART_IRQHandler+0x2b8>)
 8005c44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fb fea1 	bl	8001992 <HAL_DMA_Abort_IT>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d017      	beq.n	8005c86 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005c5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005c60:	4610      	mov	r0, r2
 8005c62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c64:	e00f      	b.n	8005c86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005c66:	6878      	ldr	r0, [r7, #4]
 8005c68:	f000 f9da 	bl	8006020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c6c:	e00b      	b.n	8005c86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f000 f9d6 	bl	8006020 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c74:	e007      	b.n	8005c86 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f000 f9d2 	bl	8006020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2200      	movs	r2, #0
 8005c80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005c84:	e1b7      	b.n	8005ff6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c86:	bf00      	nop
    return;
 8005c88:	e1b5      	b.n	8005ff6 <HAL_UART_IRQHandler+0x61a>
 8005c8a:	bf00      	nop
 8005c8c:	10000001 	.word	0x10000001
 8005c90:	04000120 	.word	0x04000120
 8005c94:	08006a7b 	.word	0x08006a7b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	f040 814a 	bne.w	8005f36 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ca2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ca6:	f003 0310 	and.w	r3, r3, #16
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	f000 8143 	beq.w	8005f36 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005cb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cb4:	f003 0310 	and.w	r3, r3, #16
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 813c 	beq.w	8005f36 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	2210      	movs	r2, #16
 8005cc4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cd0:	2b40      	cmp	r3, #64	; 0x40
 8005cd2:	f040 80b5 	bne.w	8005e40 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	685b      	ldr	r3, [r3, #4]
 8005cde:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ce2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 8187 	beq.w	8005ffa <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005cf2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005cf6:	429a      	cmp	r2, r3
 8005cf8:	f080 817f 	bcs.w	8005ffa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005d02:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f003 0320 	and.w	r3, r3, #32
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f040 8086 	bne.w	8005e24 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005d24:	e853 3f00 	ldrex	r3, [r3]
 8005d28:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d34:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	461a      	mov	r2, r3
 8005d3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005d42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005d46:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1da      	bne.n	8005d18 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3308      	adds	r3, #8
 8005d68:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005d72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005d74:	f023 0301 	bic.w	r3, r3, #1
 8005d78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	3308      	adds	r3, #8
 8005d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005d86:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005d8a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005d98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e1      	bne.n	8005d62 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	3308      	adds	r3, #8
 8005da4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005da8:	e853 3f00 	ldrex	r3, [r3]
 8005dac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005dae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005db4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	3308      	adds	r3, #8
 8005dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005dc2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005dc4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dc6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005dc8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005dca:	e841 2300 	strex	r3, r2, [r1]
 8005dce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d1e3      	bne.n	8005d9e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2220      	movs	r2, #32
 8005dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dec:	e853 3f00 	ldrex	r3, [r3]
 8005df0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005df4:	f023 0310 	bic.w	r3, r3, #16
 8005df8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	461a      	mov	r2, r3
 8005e02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e06:	65bb      	str	r3, [r7, #88]	; 0x58
 8005e08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005e0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005e14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e4      	bne.n	8005de4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f7fb fd5b 	bl	80018da <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	1ad3      	subs	r3, r2, r3
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	4619      	mov	r1, r3
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f8fb 	bl	8006034 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005e3e:	e0dc      	b.n	8005ffa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	1ad3      	subs	r3, r2, r3
 8005e50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	f000 80ce 	beq.w	8005ffe <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005e62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 80c9 	beq.w	8005ffe <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e74:	e853 3f00 	ldrex	r3, [r3]
 8005e78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005e80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	461a      	mov	r2, r3
 8005e8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005e8e:	647b      	str	r3, [r7, #68]	; 0x44
 8005e90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005e94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e96:	e841 2300 	strex	r3, r2, [r1]
 8005e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005e9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1e4      	bne.n	8005e6c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	3308      	adds	r3, #8
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	e853 3f00 	ldrex	r3, [r3]
 8005eb0:	623b      	str	r3, [r7, #32]
   return(result);
 8005eb2:	6a3b      	ldr	r3, [r7, #32]
 8005eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005eb8:	f023 0301 	bic.w	r3, r3, #1
 8005ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3308      	adds	r3, #8
 8005ec6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005eca:	633a      	str	r2, [r7, #48]	; 0x30
 8005ecc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ece:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ed2:	e841 2300 	strex	r3, r2, [r1]
 8005ed6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d1e1      	bne.n	8005ea2 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2220      	movs	r2, #32
 8005ee2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	e853 3f00 	ldrex	r3, [r3]
 8005efe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0310 	bic.w	r3, r3, #16
 8005f06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	461a      	mov	r2, r3
 8005f10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005f14:	61fb      	str	r3, [r7, #28]
 8005f16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f18:	69b9      	ldr	r1, [r7, #24]
 8005f1a:	69fa      	ldr	r2, [r7, #28]
 8005f1c:	e841 2300 	strex	r3, r2, [r1]
 8005f20:	617b      	str	r3, [r7, #20]
   return(result);
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d1e4      	bne.n	8005ef2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005f28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 f880 	bl	8006034 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005f34:	e063      	b.n	8005ffe <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00e      	beq.n	8005f60 <HAL_UART_IRQHandler+0x584>
 8005f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d008      	beq.n	8005f60 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005f56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 fdcf 	bl	8006afc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005f5e:	e051      	b.n	8006004 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005f60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d014      	beq.n	8005f96 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005f6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d105      	bne.n	8005f84 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005f78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d008      	beq.n	8005f96 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d03a      	beq.n	8006002 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005f90:	6878      	ldr	r0, [r7, #4]
 8005f92:	4798      	blx	r3
    }
    return;
 8005f94:	e035      	b.n	8006002 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d009      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x5da>
 8005fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fd79 	bl	8006aa6 <UART_EndTransmit_IT>
    return;
 8005fb4:	e026      	b.n	8006004 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d009      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x5fa>
 8005fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d003      	beq.n	8005fd6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fda8 	bl	8006b24 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005fd4:	e016      	b.n	8006004 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005fd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d010      	beq.n	8006004 <HAL_UART_IRQHandler+0x628>
 8005fe2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	da0c      	bge.n	8006004 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f000 fd90 	bl	8006b10 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ff0:	e008      	b.n	8006004 <HAL_UART_IRQHandler+0x628>
      return;
 8005ff2:	bf00      	nop
 8005ff4:	e006      	b.n	8006004 <HAL_UART_IRQHandler+0x628>
    return;
 8005ff6:	bf00      	nop
 8005ff8:	e004      	b.n	8006004 <HAL_UART_IRQHandler+0x628>
      return;
 8005ffa:	bf00      	nop
 8005ffc:	e002      	b.n	8006004 <HAL_UART_IRQHandler+0x628>
      return;
 8005ffe:	bf00      	nop
 8006000:	e000      	b.n	8006004 <HAL_UART_IRQHandler+0x628>
    return;
 8006002:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006004:	37e8      	adds	r7, #232	; 0xe8
 8006006:	46bd      	mov	sp, r7
 8006008:	bd80      	pop	{r7, pc}
 800600a:	bf00      	nop

0800600c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006014:	bf00      	nop
 8006016:	370c      	adds	r7, #12
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006028:	bf00      	nop
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr

08006034 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006034:	b480      	push	{r7}
 8006036:	b083      	sub	sp, #12
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	460b      	mov	r3, r1
 800603e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006040:	bf00      	nop
 8006042:	370c      	adds	r7, #12
 8006044:	46bd      	mov	sp, r7
 8006046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604a:	4770      	bx	lr

0800604c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800604c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006050:	b08c      	sub	sp, #48	; 0x30
 8006052:	af00      	add	r7, sp, #0
 8006054:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006056:	2300      	movs	r3, #0
 8006058:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	689a      	ldr	r2, [r3, #8]
 8006060:	697b      	ldr	r3, [r7, #20]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	431a      	orrs	r2, r3
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	695b      	ldr	r3, [r3, #20]
 800606a:	431a      	orrs	r2, r3
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	69db      	ldr	r3, [r3, #28]
 8006070:	4313      	orrs	r3, r2
 8006072:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006074:	697b      	ldr	r3, [r7, #20]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	4baa      	ldr	r3, [pc, #680]	; (8006324 <UART_SetConfig+0x2d8>)
 800607c:	4013      	ands	r3, r2
 800607e:	697a      	ldr	r2, [r7, #20]
 8006080:	6812      	ldr	r2, [r2, #0]
 8006082:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006084:	430b      	orrs	r3, r1
 8006086:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	68da      	ldr	r2, [r3, #12]
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	430a      	orrs	r2, r1
 800609c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	699b      	ldr	r3, [r3, #24]
 80060a2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80060a4:	697b      	ldr	r3, [r7, #20]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4a9f      	ldr	r2, [pc, #636]	; (8006328 <UART_SetConfig+0x2dc>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d004      	beq.n	80060b8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80060ae:	697b      	ldr	r3, [r7, #20]
 80060b0:	6a1b      	ldr	r3, [r3, #32]
 80060b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060b4:	4313      	orrs	r3, r2
 80060b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80060c2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	6812      	ldr	r2, [r2, #0]
 80060ca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060cc:	430b      	orrs	r3, r1
 80060ce:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060d6:	f023 010f 	bic.w	r1, r3, #15
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	430a      	orrs	r2, r1
 80060e4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	4a90      	ldr	r2, [pc, #576]	; (800632c <UART_SetConfig+0x2e0>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d125      	bne.n	800613c <UART_SetConfig+0xf0>
 80060f0:	4b8f      	ldr	r3, [pc, #572]	; (8006330 <UART_SetConfig+0x2e4>)
 80060f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060f6:	f003 0303 	and.w	r3, r3, #3
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d81a      	bhi.n	8006134 <UART_SetConfig+0xe8>
 80060fe:	a201      	add	r2, pc, #4	; (adr r2, 8006104 <UART_SetConfig+0xb8>)
 8006100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006104:	08006115 	.word	0x08006115
 8006108:	08006125 	.word	0x08006125
 800610c:	0800611d 	.word	0x0800611d
 8006110:	0800612d 	.word	0x0800612d
 8006114:	2301      	movs	r3, #1
 8006116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800611a:	e116      	b.n	800634a <UART_SetConfig+0x2fe>
 800611c:	2302      	movs	r3, #2
 800611e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006122:	e112      	b.n	800634a <UART_SetConfig+0x2fe>
 8006124:	2304      	movs	r3, #4
 8006126:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800612a:	e10e      	b.n	800634a <UART_SetConfig+0x2fe>
 800612c:	2308      	movs	r3, #8
 800612e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006132:	e10a      	b.n	800634a <UART_SetConfig+0x2fe>
 8006134:	2310      	movs	r3, #16
 8006136:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800613a:	e106      	b.n	800634a <UART_SetConfig+0x2fe>
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a7c      	ldr	r2, [pc, #496]	; (8006334 <UART_SetConfig+0x2e8>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d138      	bne.n	80061b8 <UART_SetConfig+0x16c>
 8006146:	4b7a      	ldr	r3, [pc, #488]	; (8006330 <UART_SetConfig+0x2e4>)
 8006148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614c:	f003 030c 	and.w	r3, r3, #12
 8006150:	2b0c      	cmp	r3, #12
 8006152:	d82d      	bhi.n	80061b0 <UART_SetConfig+0x164>
 8006154:	a201      	add	r2, pc, #4	; (adr r2, 800615c <UART_SetConfig+0x110>)
 8006156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800615a:	bf00      	nop
 800615c:	08006191 	.word	0x08006191
 8006160:	080061b1 	.word	0x080061b1
 8006164:	080061b1 	.word	0x080061b1
 8006168:	080061b1 	.word	0x080061b1
 800616c:	080061a1 	.word	0x080061a1
 8006170:	080061b1 	.word	0x080061b1
 8006174:	080061b1 	.word	0x080061b1
 8006178:	080061b1 	.word	0x080061b1
 800617c:	08006199 	.word	0x08006199
 8006180:	080061b1 	.word	0x080061b1
 8006184:	080061b1 	.word	0x080061b1
 8006188:	080061b1 	.word	0x080061b1
 800618c:	080061a9 	.word	0x080061a9
 8006190:	2300      	movs	r3, #0
 8006192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006196:	e0d8      	b.n	800634a <UART_SetConfig+0x2fe>
 8006198:	2302      	movs	r3, #2
 800619a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800619e:	e0d4      	b.n	800634a <UART_SetConfig+0x2fe>
 80061a0:	2304      	movs	r3, #4
 80061a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061a6:	e0d0      	b.n	800634a <UART_SetConfig+0x2fe>
 80061a8:	2308      	movs	r3, #8
 80061aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ae:	e0cc      	b.n	800634a <UART_SetConfig+0x2fe>
 80061b0:	2310      	movs	r3, #16
 80061b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061b6:	e0c8      	b.n	800634a <UART_SetConfig+0x2fe>
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a5e      	ldr	r2, [pc, #376]	; (8006338 <UART_SetConfig+0x2ec>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d125      	bne.n	800620e <UART_SetConfig+0x1c2>
 80061c2:	4b5b      	ldr	r3, [pc, #364]	; (8006330 <UART_SetConfig+0x2e4>)
 80061c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061c8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80061cc:	2b30      	cmp	r3, #48	; 0x30
 80061ce:	d016      	beq.n	80061fe <UART_SetConfig+0x1b2>
 80061d0:	2b30      	cmp	r3, #48	; 0x30
 80061d2:	d818      	bhi.n	8006206 <UART_SetConfig+0x1ba>
 80061d4:	2b20      	cmp	r3, #32
 80061d6:	d00a      	beq.n	80061ee <UART_SetConfig+0x1a2>
 80061d8:	2b20      	cmp	r3, #32
 80061da:	d814      	bhi.n	8006206 <UART_SetConfig+0x1ba>
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d002      	beq.n	80061e6 <UART_SetConfig+0x19a>
 80061e0:	2b10      	cmp	r3, #16
 80061e2:	d008      	beq.n	80061f6 <UART_SetConfig+0x1aa>
 80061e4:	e00f      	b.n	8006206 <UART_SetConfig+0x1ba>
 80061e6:	2300      	movs	r3, #0
 80061e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ec:	e0ad      	b.n	800634a <UART_SetConfig+0x2fe>
 80061ee:	2302      	movs	r3, #2
 80061f0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061f4:	e0a9      	b.n	800634a <UART_SetConfig+0x2fe>
 80061f6:	2304      	movs	r3, #4
 80061f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061fc:	e0a5      	b.n	800634a <UART_SetConfig+0x2fe>
 80061fe:	2308      	movs	r3, #8
 8006200:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006204:	e0a1      	b.n	800634a <UART_SetConfig+0x2fe>
 8006206:	2310      	movs	r3, #16
 8006208:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800620c:	e09d      	b.n	800634a <UART_SetConfig+0x2fe>
 800620e:	697b      	ldr	r3, [r7, #20]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a4a      	ldr	r2, [pc, #296]	; (800633c <UART_SetConfig+0x2f0>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d125      	bne.n	8006264 <UART_SetConfig+0x218>
 8006218:	4b45      	ldr	r3, [pc, #276]	; (8006330 <UART_SetConfig+0x2e4>)
 800621a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800621e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006222:	2bc0      	cmp	r3, #192	; 0xc0
 8006224:	d016      	beq.n	8006254 <UART_SetConfig+0x208>
 8006226:	2bc0      	cmp	r3, #192	; 0xc0
 8006228:	d818      	bhi.n	800625c <UART_SetConfig+0x210>
 800622a:	2b80      	cmp	r3, #128	; 0x80
 800622c:	d00a      	beq.n	8006244 <UART_SetConfig+0x1f8>
 800622e:	2b80      	cmp	r3, #128	; 0x80
 8006230:	d814      	bhi.n	800625c <UART_SetConfig+0x210>
 8006232:	2b00      	cmp	r3, #0
 8006234:	d002      	beq.n	800623c <UART_SetConfig+0x1f0>
 8006236:	2b40      	cmp	r3, #64	; 0x40
 8006238:	d008      	beq.n	800624c <UART_SetConfig+0x200>
 800623a:	e00f      	b.n	800625c <UART_SetConfig+0x210>
 800623c:	2300      	movs	r3, #0
 800623e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006242:	e082      	b.n	800634a <UART_SetConfig+0x2fe>
 8006244:	2302      	movs	r3, #2
 8006246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800624a:	e07e      	b.n	800634a <UART_SetConfig+0x2fe>
 800624c:	2304      	movs	r3, #4
 800624e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006252:	e07a      	b.n	800634a <UART_SetConfig+0x2fe>
 8006254:	2308      	movs	r3, #8
 8006256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800625a:	e076      	b.n	800634a <UART_SetConfig+0x2fe>
 800625c:	2310      	movs	r3, #16
 800625e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006262:	e072      	b.n	800634a <UART_SetConfig+0x2fe>
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a35      	ldr	r2, [pc, #212]	; (8006340 <UART_SetConfig+0x2f4>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d12a      	bne.n	80062c4 <UART_SetConfig+0x278>
 800626e:	4b30      	ldr	r3, [pc, #192]	; (8006330 <UART_SetConfig+0x2e4>)
 8006270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800627c:	d01a      	beq.n	80062b4 <UART_SetConfig+0x268>
 800627e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006282:	d81b      	bhi.n	80062bc <UART_SetConfig+0x270>
 8006284:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006288:	d00c      	beq.n	80062a4 <UART_SetConfig+0x258>
 800628a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800628e:	d815      	bhi.n	80062bc <UART_SetConfig+0x270>
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <UART_SetConfig+0x250>
 8006294:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006298:	d008      	beq.n	80062ac <UART_SetConfig+0x260>
 800629a:	e00f      	b.n	80062bc <UART_SetConfig+0x270>
 800629c:	2300      	movs	r3, #0
 800629e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062a2:	e052      	b.n	800634a <UART_SetConfig+0x2fe>
 80062a4:	2302      	movs	r3, #2
 80062a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062aa:	e04e      	b.n	800634a <UART_SetConfig+0x2fe>
 80062ac:	2304      	movs	r3, #4
 80062ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062b2:	e04a      	b.n	800634a <UART_SetConfig+0x2fe>
 80062b4:	2308      	movs	r3, #8
 80062b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062ba:	e046      	b.n	800634a <UART_SetConfig+0x2fe>
 80062bc:	2310      	movs	r3, #16
 80062be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80062c2:	e042      	b.n	800634a <UART_SetConfig+0x2fe>
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	4a17      	ldr	r2, [pc, #92]	; (8006328 <UART_SetConfig+0x2dc>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d13a      	bne.n	8006344 <UART_SetConfig+0x2f8>
 80062ce:	4b18      	ldr	r3, [pc, #96]	; (8006330 <UART_SetConfig+0x2e4>)
 80062d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062dc:	d01a      	beq.n	8006314 <UART_SetConfig+0x2c8>
 80062de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062e2:	d81b      	bhi.n	800631c <UART_SetConfig+0x2d0>
 80062e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062e8:	d00c      	beq.n	8006304 <UART_SetConfig+0x2b8>
 80062ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ee:	d815      	bhi.n	800631c <UART_SetConfig+0x2d0>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d003      	beq.n	80062fc <UART_SetConfig+0x2b0>
 80062f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062f8:	d008      	beq.n	800630c <UART_SetConfig+0x2c0>
 80062fa:	e00f      	b.n	800631c <UART_SetConfig+0x2d0>
 80062fc:	2300      	movs	r3, #0
 80062fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006302:	e022      	b.n	800634a <UART_SetConfig+0x2fe>
 8006304:	2302      	movs	r3, #2
 8006306:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800630a:	e01e      	b.n	800634a <UART_SetConfig+0x2fe>
 800630c:	2304      	movs	r3, #4
 800630e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006312:	e01a      	b.n	800634a <UART_SetConfig+0x2fe>
 8006314:	2308      	movs	r3, #8
 8006316:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800631a:	e016      	b.n	800634a <UART_SetConfig+0x2fe>
 800631c:	2310      	movs	r3, #16
 800631e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006322:	e012      	b.n	800634a <UART_SetConfig+0x2fe>
 8006324:	cfff69f3 	.word	0xcfff69f3
 8006328:	40008000 	.word	0x40008000
 800632c:	40013800 	.word	0x40013800
 8006330:	40021000 	.word	0x40021000
 8006334:	40004400 	.word	0x40004400
 8006338:	40004800 	.word	0x40004800
 800633c:	40004c00 	.word	0x40004c00
 8006340:	40005000 	.word	0x40005000
 8006344:	2310      	movs	r3, #16
 8006346:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800634a:	697b      	ldr	r3, [r7, #20]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	4aae      	ldr	r2, [pc, #696]	; (8006608 <UART_SetConfig+0x5bc>)
 8006350:	4293      	cmp	r3, r2
 8006352:	f040 8097 	bne.w	8006484 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006356:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800635a:	2b08      	cmp	r3, #8
 800635c:	d823      	bhi.n	80063a6 <UART_SetConfig+0x35a>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <UART_SetConfig+0x318>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	08006389 	.word	0x08006389
 8006368:	080063a7 	.word	0x080063a7
 800636c:	08006391 	.word	0x08006391
 8006370:	080063a7 	.word	0x080063a7
 8006374:	08006397 	.word	0x08006397
 8006378:	080063a7 	.word	0x080063a7
 800637c:	080063a7 	.word	0x080063a7
 8006380:	080063a7 	.word	0x080063a7
 8006384:	0800639f 	.word	0x0800639f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006388:	f7fd feac 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 800638c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800638e:	e010      	b.n	80063b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006390:	4b9e      	ldr	r3, [pc, #632]	; (800660c <UART_SetConfig+0x5c0>)
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006394:	e00d      	b.n	80063b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006396:	f7fd fe0d 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 800639a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800639c:	e009      	b.n	80063b2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800639e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063a4:	e005      	b.n	80063b2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80063b0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8130 	beq.w	800661a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	4a94      	ldr	r2, [pc, #592]	; (8006610 <UART_SetConfig+0x5c4>)
 80063c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063c4:	461a      	mov	r2, r3
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80063cc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	4613      	mov	r3, r2
 80063d4:	005b      	lsls	r3, r3, #1
 80063d6:	4413      	add	r3, r2
 80063d8:	69ba      	ldr	r2, [r7, #24]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d305      	bcc.n	80063ea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80063e4:	69ba      	ldr	r2, [r7, #24]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d903      	bls.n	80063f2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80063ea:	2301      	movs	r3, #1
 80063ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80063f0:	e113      	b.n	800661a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	2200      	movs	r2, #0
 80063f6:	60bb      	str	r3, [r7, #8]
 80063f8:	60fa      	str	r2, [r7, #12]
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fe:	4a84      	ldr	r2, [pc, #528]	; (8006610 <UART_SetConfig+0x5c4>)
 8006400:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006404:	b29b      	uxth	r3, r3
 8006406:	2200      	movs	r2, #0
 8006408:	603b      	str	r3, [r7, #0]
 800640a:	607a      	str	r2, [r7, #4]
 800640c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006410:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006414:	f7f9 ff4c 	bl	80002b0 <__aeabi_uldivmod>
 8006418:	4602      	mov	r2, r0
 800641a:	460b      	mov	r3, r1
 800641c:	4610      	mov	r0, r2
 800641e:	4619      	mov	r1, r3
 8006420:	f04f 0200 	mov.w	r2, #0
 8006424:	f04f 0300 	mov.w	r3, #0
 8006428:	020b      	lsls	r3, r1, #8
 800642a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800642e:	0202      	lsls	r2, r0, #8
 8006430:	6979      	ldr	r1, [r7, #20]
 8006432:	6849      	ldr	r1, [r1, #4]
 8006434:	0849      	lsrs	r1, r1, #1
 8006436:	2000      	movs	r0, #0
 8006438:	460c      	mov	r4, r1
 800643a:	4605      	mov	r5, r0
 800643c:	eb12 0804 	adds.w	r8, r2, r4
 8006440:	eb43 0905 	adc.w	r9, r3, r5
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	2200      	movs	r2, #0
 800644a:	469a      	mov	sl, r3
 800644c:	4693      	mov	fp, r2
 800644e:	4652      	mov	r2, sl
 8006450:	465b      	mov	r3, fp
 8006452:	4640      	mov	r0, r8
 8006454:	4649      	mov	r1, r9
 8006456:	f7f9 ff2b 	bl	80002b0 <__aeabi_uldivmod>
 800645a:	4602      	mov	r2, r0
 800645c:	460b      	mov	r3, r1
 800645e:	4613      	mov	r3, r2
 8006460:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006468:	d308      	bcc.n	800647c <UART_SetConfig+0x430>
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006470:	d204      	bcs.n	800647c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	6a3a      	ldr	r2, [r7, #32]
 8006478:	60da      	str	r2, [r3, #12]
 800647a:	e0ce      	b.n	800661a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006482:	e0ca      	b.n	800661a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800648c:	d166      	bne.n	800655c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800648e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006492:	2b08      	cmp	r3, #8
 8006494:	d827      	bhi.n	80064e6 <UART_SetConfig+0x49a>
 8006496:	a201      	add	r2, pc, #4	; (adr r2, 800649c <UART_SetConfig+0x450>)
 8006498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800649c:	080064c1 	.word	0x080064c1
 80064a0:	080064c9 	.word	0x080064c9
 80064a4:	080064d1 	.word	0x080064d1
 80064a8:	080064e7 	.word	0x080064e7
 80064ac:	080064d7 	.word	0x080064d7
 80064b0:	080064e7 	.word	0x080064e7
 80064b4:	080064e7 	.word	0x080064e7
 80064b8:	080064e7 	.word	0x080064e7
 80064bc:	080064df 	.word	0x080064df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064c0:	f7fd fe10 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 80064c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064c6:	e014      	b.n	80064f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064c8:	f7fd fe22 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 80064cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064ce:	e010      	b.n	80064f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064d0:	4b4e      	ldr	r3, [pc, #312]	; (800660c <UART_SetConfig+0x5c0>)
 80064d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064d4:	e00d      	b.n	80064f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064d6:	f7fd fd6d 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 80064da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80064dc:	e009      	b.n	80064f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80064e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80064e4:	e005      	b.n	80064f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80064e6:	2300      	movs	r3, #0
 80064e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80064ea:	2301      	movs	r3, #1
 80064ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80064f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80064f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f000 8090 	beq.w	800661a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064fe:	4a44      	ldr	r2, [pc, #272]	; (8006610 <UART_SetConfig+0x5c4>)
 8006500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006504:	461a      	mov	r2, r3
 8006506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006508:	fbb3 f3f2 	udiv	r3, r3, r2
 800650c:	005a      	lsls	r2, r3, #1
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	685b      	ldr	r3, [r3, #4]
 8006512:	085b      	lsrs	r3, r3, #1
 8006514:	441a      	add	r2, r3
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	fbb2 f3f3 	udiv	r3, r2, r3
 800651e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006520:	6a3b      	ldr	r3, [r7, #32]
 8006522:	2b0f      	cmp	r3, #15
 8006524:	d916      	bls.n	8006554 <UART_SetConfig+0x508>
 8006526:	6a3b      	ldr	r3, [r7, #32]
 8006528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800652c:	d212      	bcs.n	8006554 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800652e:	6a3b      	ldr	r3, [r7, #32]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f023 030f 	bic.w	r3, r3, #15
 8006536:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006538:	6a3b      	ldr	r3, [r7, #32]
 800653a:	085b      	lsrs	r3, r3, #1
 800653c:	b29b      	uxth	r3, r3
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	b29a      	uxth	r2, r3
 8006544:	8bfb      	ldrh	r3, [r7, #30]
 8006546:	4313      	orrs	r3, r2
 8006548:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	8bfa      	ldrh	r2, [r7, #30]
 8006550:	60da      	str	r2, [r3, #12]
 8006552:	e062      	b.n	800661a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800655a:	e05e      	b.n	800661a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800655c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006560:	2b08      	cmp	r3, #8
 8006562:	d828      	bhi.n	80065b6 <UART_SetConfig+0x56a>
 8006564:	a201      	add	r2, pc, #4	; (adr r2, 800656c <UART_SetConfig+0x520>)
 8006566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800656a:	bf00      	nop
 800656c:	08006591 	.word	0x08006591
 8006570:	08006599 	.word	0x08006599
 8006574:	080065a1 	.word	0x080065a1
 8006578:	080065b7 	.word	0x080065b7
 800657c:	080065a7 	.word	0x080065a7
 8006580:	080065b7 	.word	0x080065b7
 8006584:	080065b7 	.word	0x080065b7
 8006588:	080065b7 	.word	0x080065b7
 800658c:	080065af 	.word	0x080065af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006590:	f7fd fda8 	bl	80040e4 <HAL_RCC_GetPCLK1Freq>
 8006594:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006596:	e014      	b.n	80065c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006598:	f7fd fdba 	bl	8004110 <HAL_RCC_GetPCLK2Freq>
 800659c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800659e:	e010      	b.n	80065c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065a0:	4b1a      	ldr	r3, [pc, #104]	; (800660c <UART_SetConfig+0x5c0>)
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065a4:	e00d      	b.n	80065c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065a6:	f7fd fd05 	bl	8003fb4 <HAL_RCC_GetSysClockFreq>
 80065aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80065ac:	e009      	b.n	80065c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80065b4:	e005      	b.n	80065c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80065b6:	2300      	movs	r3, #0
 80065b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80065c0:	bf00      	nop
    }

    if (pclk != 0U)
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d028      	beq.n	800661a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065cc:	4a10      	ldr	r2, [pc, #64]	; (8006610 <UART_SetConfig+0x5c4>)
 80065ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80065d2:	461a      	mov	r2, r3
 80065d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	085b      	lsrs	r3, r3, #1
 80065e0:	441a      	add	r2, r3
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80065ea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80065ec:	6a3b      	ldr	r3, [r7, #32]
 80065ee:	2b0f      	cmp	r3, #15
 80065f0:	d910      	bls.n	8006614 <UART_SetConfig+0x5c8>
 80065f2:	6a3b      	ldr	r3, [r7, #32]
 80065f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80065f8:	d20c      	bcs.n	8006614 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80065fa:	6a3b      	ldr	r3, [r7, #32]
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	60da      	str	r2, [r3, #12]
 8006604:	e009      	b.n	800661a <UART_SetConfig+0x5ce>
 8006606:	bf00      	nop
 8006608:	40008000 	.word	0x40008000
 800660c:	00f42400 	.word	0x00f42400
 8006610:	08009190 	.word	0x08009190
      }
      else
      {
        ret = HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	2201      	movs	r2, #1
 800661e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	2201      	movs	r2, #1
 8006626:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2200      	movs	r2, #0
 800662e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	2200      	movs	r2, #0
 8006634:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006636:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800663a:	4618      	mov	r0, r3
 800663c:	3730      	adds	r7, #48	; 0x30
 800663e:	46bd      	mov	sp, r7
 8006640:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006644 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006650:	f003 0301 	and.w	r3, r3, #1
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00a      	beq.n	800666e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	685b      	ldr	r3, [r3, #4]
 800665e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	430a      	orrs	r2, r1
 800666c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006672:	f003 0302 	and.w	r3, r3, #2
 8006676:	2b00      	cmp	r3, #0
 8006678:	d00a      	beq.n	8006690 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	685b      	ldr	r3, [r3, #4]
 8006680:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	430a      	orrs	r2, r1
 800668e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00a      	beq.n	80066b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	430a      	orrs	r2, r1
 80066b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b6:	f003 0308 	and.w	r3, r3, #8
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d00a      	beq.n	80066d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	685b      	ldr	r3, [r3, #4]
 80066c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00a      	beq.n	80066f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	430a      	orrs	r2, r1
 80066f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066fa:	f003 0320 	and.w	r3, r3, #32
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	430a      	orrs	r2, r1
 8006716:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006720:	2b00      	cmp	r3, #0
 8006722:	d01a      	beq.n	800675a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	430a      	orrs	r2, r1
 8006738:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800673e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006742:	d10a      	bne.n	800675a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	685b      	ldr	r3, [r3, #4]
 800674a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	430a      	orrs	r2, r1
 8006758:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800675e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006762:	2b00      	cmp	r3, #0
 8006764:	d00a      	beq.n	800677c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	685b      	ldr	r3, [r3, #4]
 800676c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	430a      	orrs	r2, r1
 800677a:	605a      	str	r2, [r3, #4]
  }
}
 800677c:	bf00      	nop
 800677e:	370c      	adds	r7, #12
 8006780:	46bd      	mov	sp, r7
 8006782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006786:	4770      	bx	lr

08006788 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af02      	add	r7, sp, #8
 800678e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006798:	f7f9 ff74 	bl	8000684 <HAL_GetTick>
 800679c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b08      	cmp	r3, #8
 80067aa:	d10e      	bne.n	80067ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067b0:	9300      	str	r3, [sp, #0]
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2200      	movs	r2, #0
 80067b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 f82f 	bl	800681e <UART_WaitOnFlagUntilTimeout>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d001      	beq.n	80067ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067c6:	2303      	movs	r3, #3
 80067c8:	e025      	b.n	8006816 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	f003 0304 	and.w	r3, r3, #4
 80067d4:	2b04      	cmp	r3, #4
 80067d6:	d10e      	bne.n	80067f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80067d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80067dc:	9300      	str	r3, [sp, #0]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f819 	bl	800681e <UART_WaitOnFlagUntilTimeout>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d001      	beq.n	80067f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e00f      	b.n	8006816 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2220      	movs	r2, #32
 8006802:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	2200      	movs	r2, #0
 800680a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2200      	movs	r2, #0
 8006810:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}

0800681e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800681e:	b580      	push	{r7, lr}
 8006820:	b09c      	sub	sp, #112	; 0x70
 8006822:	af00      	add	r7, sp, #0
 8006824:	60f8      	str	r0, [r7, #12]
 8006826:	60b9      	str	r1, [r7, #8]
 8006828:	603b      	str	r3, [r7, #0]
 800682a:	4613      	mov	r3, r2
 800682c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800682e:	e0a9      	b.n	8006984 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006836:	f000 80a5 	beq.w	8006984 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800683a:	f7f9 ff23 	bl	8000684 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006846:	429a      	cmp	r2, r3
 8006848:	d302      	bcc.n	8006850 <UART_WaitOnFlagUntilTimeout+0x32>
 800684a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800684c:	2b00      	cmp	r3, #0
 800684e:	d140      	bne.n	80068d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006858:	e853 3f00 	ldrex	r3, [r3]
 800685c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800685e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006860:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006864:	667b      	str	r3, [r7, #100]	; 0x64
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	461a      	mov	r2, r3
 800686c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800686e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006870:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006872:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006874:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800687c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800687e:	2b00      	cmp	r3, #0
 8006880:	d1e6      	bne.n	8006850 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3308      	adds	r3, #8
 8006888:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800688c:	e853 3f00 	ldrex	r3, [r3]
 8006890:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006894:	f023 0301 	bic.w	r3, r3, #1
 8006898:	663b      	str	r3, [r7, #96]	; 0x60
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	3308      	adds	r3, #8
 80068a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80068a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80068a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80068a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068aa:	e841 2300 	strex	r3, r2, [r1]
 80068ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80068b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1e5      	bne.n	8006882 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2220      	movs	r2, #32
 80068ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2220      	movs	r2, #32
 80068c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e069      	b.n	80069a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0304 	and.w	r3, r3, #4
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d051      	beq.n	8006984 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80068ee:	d149      	bne.n	8006984 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80068f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006902:	e853 3f00 	ldrex	r3, [r3]
 8006906:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800690e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	461a      	mov	r2, r3
 8006916:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006918:	637b      	str	r3, [r7, #52]	; 0x34
 800691a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800691e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006920:	e841 2300 	strex	r3, r2, [r1]
 8006924:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e6      	bne.n	80068fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3308      	adds	r3, #8
 8006932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	e853 3f00 	ldrex	r3, [r3]
 800693a:	613b      	str	r3, [r7, #16]
   return(result);
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	f023 0301 	bic.w	r3, r3, #1
 8006942:	66bb      	str	r3, [r7, #104]	; 0x68
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	3308      	adds	r3, #8
 800694a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800694c:	623a      	str	r2, [r7, #32]
 800694e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006950:	69f9      	ldr	r1, [r7, #28]
 8006952:	6a3a      	ldr	r2, [r7, #32]
 8006954:	e841 2300 	strex	r3, r2, [r1]
 8006958:	61bb      	str	r3, [r7, #24]
   return(result);
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1e5      	bne.n	800692c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2220      	movs	r2, #32
 8006964:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2220      	movs	r2, #32
 800696c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	2220      	movs	r2, #32
 8006974:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2200      	movs	r2, #0
 800697c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006980:	2303      	movs	r3, #3
 8006982:	e010      	b.n	80069a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	69da      	ldr	r2, [r3, #28]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	4013      	ands	r3, r2
 800698e:	68ba      	ldr	r2, [r7, #8]
 8006990:	429a      	cmp	r2, r3
 8006992:	bf0c      	ite	eq
 8006994:	2301      	moveq	r3, #1
 8006996:	2300      	movne	r3, #0
 8006998:	b2db      	uxtb	r3, r3
 800699a:	461a      	mov	r2, r3
 800699c:	79fb      	ldrb	r3, [r7, #7]
 800699e:	429a      	cmp	r2, r3
 80069a0:	f43f af46 	beq.w	8006830 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3770      	adds	r7, #112	; 0x70
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}

080069ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80069ae:	b480      	push	{r7}
 80069b0:	b095      	sub	sp, #84	; 0x54
 80069b2:	af00      	add	r7, sp, #0
 80069b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069be:	e853 3f00 	ldrex	r3, [r3]
 80069c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	461a      	mov	r2, r3
 80069d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d4:	643b      	str	r3, [r7, #64]	; 0x40
 80069d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80069da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069dc:	e841 2300 	strex	r3, r2, [r1]
 80069e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d1e6      	bne.n	80069b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3308      	adds	r3, #8
 80069ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069f0:	6a3b      	ldr	r3, [r7, #32]
 80069f2:	e853 3f00 	ldrex	r3, [r3]
 80069f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80069fe:	f023 0301 	bic.w	r3, r3, #1
 8006a02:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	3308      	adds	r3, #8
 8006a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a14:	e841 2300 	strex	r3, r2, [r1]
 8006a18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d1e3      	bne.n	80069e8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a24:	2b01      	cmp	r3, #1
 8006a26:	d118      	bne.n	8006a5a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	60bb      	str	r3, [r7, #8]
   return(result);
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f023 0310 	bic.w	r3, r3, #16
 8006a3c:	647b      	str	r3, [r7, #68]	; 0x44
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a46:	61bb      	str	r3, [r7, #24]
 8006a48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4a:	6979      	ldr	r1, [r7, #20]
 8006a4c:	69ba      	ldr	r2, [r7, #24]
 8006a4e:	e841 2300 	strex	r3, r2, [r1]
 8006a52:	613b      	str	r3, [r7, #16]
   return(result);
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e6      	bne.n	8006a28 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2220      	movs	r2, #32
 8006a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006a6e:	bf00      	nop
 8006a70:	3754      	adds	r7, #84	; 0x54
 8006a72:	46bd      	mov	sp, r7
 8006a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a78:	4770      	bx	lr

08006a7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a7a:	b580      	push	{r7, lr}
 8006a7c:	b084      	sub	sp, #16
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	2200      	movs	r2, #0
 8006a94:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006a98:	68f8      	ldr	r0, [r7, #12]
 8006a9a:	f7ff fac1 	bl	8006020 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006a9e:	bf00      	nop
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}

08006aa6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006aa6:	b580      	push	{r7, lr}
 8006aa8:	b088      	sub	sp, #32
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	60bb      	str	r3, [r7, #8]
   return(result);
 8006abc:	68bb      	ldr	r3, [r7, #8]
 8006abe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ac2:	61fb      	str	r3, [r7, #28]
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	69fb      	ldr	r3, [r7, #28]
 8006acc:	61bb      	str	r3, [r7, #24]
 8006ace:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	6979      	ldr	r1, [r7, #20]
 8006ad2:	69ba      	ldr	r2, [r7, #24]
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	613b      	str	r3, [r7, #16]
   return(result);
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e6      	bne.n	8006aae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2220      	movs	r2, #32
 8006ae4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2200      	movs	r2, #0
 8006aec:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7ff fa8c 	bl	800600c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006af4:	bf00      	nop
 8006af6:	3720      	adds	r7, #32
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}

08006afc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b04:	bf00      	nop
 8006b06:	370c      	adds	r7, #12
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006b18:	bf00      	nop
 8006b1a:	370c      	adds	r7, #12
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b22:	4770      	bx	lr

08006b24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b083      	sub	sp, #12
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8006b2c:	bf00      	nop
 8006b2e:	370c      	adds	r7, #12
 8006b30:	46bd      	mov	sp, r7
 8006b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b36:	4770      	bx	lr

08006b38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <HAL_UARTEx_DisableFifoMode+0x16>
 8006b4a:	2302      	movs	r3, #2
 8006b4c:	e027      	b.n	8006b9e <HAL_UARTEx_DisableFifoMode+0x66>
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	2201      	movs	r2, #1
 8006b52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2224      	movs	r2, #36	; 0x24
 8006b5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f022 0201 	bic.w	r2, r2, #1
 8006b74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006b7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	68fa      	ldr	r2, [r7, #12]
 8006b8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b9c:	2300      	movs	r3, #0
}
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	3714      	adds	r7, #20
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr

08006baa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006baa:	b580      	push	{r7, lr}
 8006bac:	b084      	sub	sp, #16
 8006bae:	af00      	add	r7, sp, #0
 8006bb0:	6078      	str	r0, [r7, #4]
 8006bb2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006bba:	2b01      	cmp	r3, #1
 8006bbc:	d101      	bne.n	8006bc2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	e02d      	b.n	8006c1e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2224      	movs	r2, #36	; 0x24
 8006bce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	681a      	ldr	r2, [r3, #0]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f022 0201 	bic.w	r2, r2, #1
 8006be8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	689b      	ldr	r3, [r3, #8]
 8006bf0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	683a      	ldr	r2, [r7, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006bfe:	6878      	ldr	r0, [r7, #4]
 8006c00:	f000 f850 	bl	8006ca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	68fa      	ldr	r2, [r7, #12]
 8006c0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2220      	movs	r2, #32
 8006c10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2200      	movs	r2, #0
 8006c18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c1c:	2300      	movs	r3, #0
}
 8006c1e:	4618      	mov	r0, r3
 8006c20:	3710      	adds	r7, #16
 8006c22:	46bd      	mov	sp, r7
 8006c24:	bd80      	pop	{r7, pc}

08006c26 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006c26:	b580      	push	{r7, lr}
 8006c28:	b084      	sub	sp, #16
 8006c2a:	af00      	add	r7, sp, #0
 8006c2c:	6078      	str	r0, [r7, #4]
 8006c2e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d101      	bne.n	8006c3e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	e02d      	b.n	8006c9a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2201      	movs	r2, #1
 8006c42:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2224      	movs	r2, #36	; 0x24
 8006c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	681a      	ldr	r2, [r3, #0]
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	f022 0201 	bic.w	r2, r2, #1
 8006c64:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	689b      	ldr	r3, [r3, #8]
 8006c6c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	430a      	orrs	r2, r1
 8006c78:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f812 	bl	8006ca4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2220      	movs	r2, #32
 8006c8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c98:	2300      	movs	r3, #0
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b085      	sub	sp, #20
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d108      	bne.n	8006cc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2201      	movs	r2, #1
 8006cb8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006cc4:	e031      	b.n	8006d2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006cc6:	2308      	movs	r3, #8
 8006cc8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006cca:	2308      	movs	r3, #8
 8006ccc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	0e5b      	lsrs	r3, r3, #25
 8006cd6:	b2db      	uxtb	r3, r3
 8006cd8:	f003 0307 	and.w	r3, r3, #7
 8006cdc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	689b      	ldr	r3, [r3, #8]
 8006ce4:	0f5b      	lsrs	r3, r3, #29
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	f003 0307 	and.w	r3, r3, #7
 8006cec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006cee:	7bbb      	ldrb	r3, [r7, #14]
 8006cf0:	7b3a      	ldrb	r2, [r7, #12]
 8006cf2:	4911      	ldr	r1, [pc, #68]	; (8006d38 <UARTEx_SetNbDataToProcess+0x94>)
 8006cf4:	5c8a      	ldrb	r2, [r1, r2]
 8006cf6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006cfa:	7b3a      	ldrb	r2, [r7, #12]
 8006cfc:	490f      	ldr	r1, [pc, #60]	; (8006d3c <UARTEx_SetNbDataToProcess+0x98>)
 8006cfe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006d00:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d04:	b29a      	uxth	r2, r3
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d0c:	7bfb      	ldrb	r3, [r7, #15]
 8006d0e:	7b7a      	ldrb	r2, [r7, #13]
 8006d10:	4909      	ldr	r1, [pc, #36]	; (8006d38 <UARTEx_SetNbDataToProcess+0x94>)
 8006d12:	5c8a      	ldrb	r2, [r1, r2]
 8006d14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006d18:	7b7a      	ldrb	r2, [r7, #13]
 8006d1a:	4908      	ldr	r1, [pc, #32]	; (8006d3c <UARTEx_SetNbDataToProcess+0x98>)
 8006d1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006d1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006d2a:	bf00      	nop
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	080091a8 	.word	0x080091a8
 8006d3c:	080091b0 	.word	0x080091b0

08006d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b082      	sub	sp, #8
 8006d44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006d46:	f7f9 fc35 	bl	80005b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006d4a:	f000 f977 	bl	800703c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006d4e:	f000 fb8b 	bl	8007468 <MX_GPIO_Init>
  MX_DMA_Init();
 8006d52:	f000 fb4f 	bl	80073f4 <MX_DMA_Init>
  MX_DAC1_Init();
 8006d56:	f000 f9c3 	bl	80070e0 <MX_DAC1_Init>
  MX_TIM2_Init();
 8006d5a:	f000 fab1 	bl	80072c0 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8006d5e:	f000 f9f3 	bl	8007148 <MX_DFSDM1_Init>
  MX_OCTOSPI1_Init();
 8006d62:	f000 fa57 	bl	8007214 <MX_OCTOSPI1_Init>
  MX_USART1_UART_Init();
 8006d66:	f000 faf9 	bl	800735c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_QSPI_Init();
 8006d6a:	f000 fd51 	bl	8007810 <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8006d6e:	489d      	ldr	r0, [pc, #628]	; (8006fe4 <main+0x2a4>)
 8006d70:	f7fe f814 	bl	8004d9c <HAL_TIM_Base_Start_IT>

  HAL_UART_Transmit(&huart1, clearCommand, sizeof(clearCommand), 100);
 8006d74:	2364      	movs	r3, #100	; 0x64
 8006d76:	2264      	movs	r2, #100	; 0x64
 8006d78:	499b      	ldr	r1, [pc, #620]	; (8006fe8 <main+0x2a8>)
 8006d7a:	489c      	ldr	r0, [pc, #624]	; (8006fec <main+0x2ac>)
 8006d7c:	f7fe fcc2 	bl	8005704 <HAL_UART_Transmit>
  // Send start message of the game
  sprintf(msg_buffer,startMessage);
 8006d80:	499b      	ldr	r1, [pc, #620]	; (8006ff0 <main+0x2b0>)
 8006d82:	489c      	ldr	r0, [pc, #624]	; (8006ff4 <main+0x2b4>)
 8006d84:	f001 fd8a 	bl	800889c <siprintf>
  HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006d88:	489a      	ldr	r0, [pc, #616]	; (8006ff4 <main+0x2b4>)
 8006d8a:	f7f9 fa39 	bl	8000200 <strlen>
 8006d8e:	4603      	mov	r3, r0
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	2364      	movs	r3, #100	; 0x64
 8006d94:	4997      	ldr	r1, [pc, #604]	; (8006ff4 <main+0x2b4>)
 8006d96:	4895      	ldr	r0, [pc, #596]	; (8006fec <main+0x2ac>)
 8006d98:	f7fe fcb4 	bl	8005704 <HAL_UART_Transmit>

  //Choose the game mode
  //wait until user enters if they played before - polling manner (for this rendition)
  while(rxdata[0] == '\000')
 8006d9c:	e005      	b.n	8006daa <main+0x6a>
	  HAL_UART_Receive(&huart1, rxdata, sizeof(rxdata), 100);
 8006d9e:	2364      	movs	r3, #100	; 0x64
 8006da0:	221e      	movs	r2, #30
 8006da2:	4995      	ldr	r1, [pc, #596]	; (8006ff8 <main+0x2b8>)
 8006da4:	4891      	ldr	r0, [pc, #580]	; (8006fec <main+0x2ac>)
 8006da6:	f7fe fd44 	bl	8005832 <HAL_UART_Receive>
  while(rxdata[0] == '\000')
 8006daa:	4b93      	ldr	r3, [pc, #588]	; (8006ff8 <main+0x2b8>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d0f5      	beq.n	8006d9e <main+0x5e>

  if (rxdata[0] == '0'){
 8006db2:	4b91      	ldr	r3, [pc, #580]	; (8006ff8 <main+0x2b8>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2b30      	cmp	r3, #48	; 0x30
 8006db8:	d116      	bne.n	8006de8 <main+0xa8>
	 sprintf(msg_buffer,recorderMessage);
 8006dba:	4990      	ldr	r1, [pc, #576]	; (8006ffc <main+0x2bc>)
 8006dbc:	488d      	ldr	r0, [pc, #564]	; (8006ff4 <main+0x2b4>)
 8006dbe:	f001 fd6d 	bl	800889c <siprintf>
	 HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006dc2:	488c      	ldr	r0, [pc, #560]	; (8006ff4 <main+0x2b4>)
 8006dc4:	f7f9 fa1c 	bl	8000200 <strlen>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	b29a      	uxth	r2, r3
 8006dcc:	2364      	movs	r3, #100	; 0x64
 8006dce:	4989      	ldr	r1, [pc, #548]	; (8006ff4 <main+0x2b4>)
 8006dd0:	4886      	ldr	r0, [pc, #536]	; (8006fec <main+0x2ac>)
 8006dd2:	f7fe fc97 	bl	8005704 <HAL_UART_Transmit>
 	 recorder = 1;
 8006dd6:	4b8a      	ldr	r3, [pc, #552]	; (8007000 <main+0x2c0>)
 8006dd8:	2201      	movs	r2, #1
 8006dda:	701a      	strb	r2, [r3, #0]
 	 player = 0;
 8006ddc:	4b89      	ldr	r3, [pc, #548]	; (8007004 <main+0x2c4>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	701a      	strb	r2, [r3, #0]
 	rxdata[0] ='\000';
 8006de2:	4b85      	ldr	r3, [pc, #532]	; (8006ff8 <main+0x2b8>)
 8006de4:	2200      	movs	r2, #0
 8006de6:	701a      	strb	r2, [r3, #0]
   }
  if (rxdata[0] == '1'){
 8006de8:	4b83      	ldr	r3, [pc, #524]	; (8006ff8 <main+0x2b8>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b31      	cmp	r3, #49	; 0x31
 8006dee:	d116      	bne.n	8006e1e <main+0xde>
	 sprintf(msg_buffer,playerMessage);
 8006df0:	4985      	ldr	r1, [pc, #532]	; (8007008 <main+0x2c8>)
 8006df2:	4880      	ldr	r0, [pc, #512]	; (8006ff4 <main+0x2b4>)
 8006df4:	f001 fd52 	bl	800889c <siprintf>
	 HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006df8:	487e      	ldr	r0, [pc, #504]	; (8006ff4 <main+0x2b4>)
 8006dfa:	f7f9 fa01 	bl	8000200 <strlen>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	b29a      	uxth	r2, r3
 8006e02:	2364      	movs	r3, #100	; 0x64
 8006e04:	497b      	ldr	r1, [pc, #492]	; (8006ff4 <main+0x2b4>)
 8006e06:	4879      	ldr	r0, [pc, #484]	; (8006fec <main+0x2ac>)
 8006e08:	f7fe fc7c 	bl	8005704 <HAL_UART_Transmit>
 	 recorder = 0;
 8006e0c:	4b7c      	ldr	r3, [pc, #496]	; (8007000 <main+0x2c0>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	701a      	strb	r2, [r3, #0]
 	 player = 1;
 8006e12:	4b7c      	ldr	r3, [pc, #496]	; (8007004 <main+0x2c4>)
 8006e14:	2201      	movs	r2, #1
 8006e16:	701a      	strb	r2, [r3, #0]
 	 rxdata[0] ='\000';
 8006e18:	4b77      	ldr	r3, [pc, #476]	; (8006ff8 <main+0x2b8>)
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
   }

  if(recorder) {
 8006e1e:	4b78      	ldr	r3, [pc, #480]	; (8007000 <main+0x2c0>)
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d030      	beq.n	8006e88 <main+0x148>
 	  for(int i = 1; i < 30; i++) {
 8006e26:	2301      	movs	r3, #1
 8006e28:	607b      	str	r3, [r7, #4]
 8006e2a:	e011      	b.n	8006e50 <main+0x110>
 		  if(BSP_QSPI_Erase_Block((uint32_t) addr) != QSPI_OK)
 8006e2c:	4b77      	ldr	r3, [pc, #476]	; (800700c <main+0x2cc>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	4618      	mov	r0, r3
 8006e32:	f000 fe43 	bl	8007abc <BSP_QSPI_Erase_Block>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d001      	beq.n	8006e40 <main+0x100>
 		  	Error_Handler();
 8006e3c:	f000 fcdc 	bl	80077f8 <Error_Handler>
 		  addr = 0x010000*i;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	041b      	lsls	r3, r3, #16
 8006e44:	461a      	mov	r2, r3
 8006e46:	4b71      	ldr	r3, [pc, #452]	; (800700c <main+0x2cc>)
 8006e48:	601a      	str	r2, [r3, #0]
 	  for(int i = 1; i < 30; i++) {
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	3301      	adds	r3, #1
 8006e4e:	607b      	str	r3, [r7, #4]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b1d      	cmp	r3, #29
 8006e54:	ddea      	ble.n	8006e2c <main+0xec>
 	  }

 	  sprintf(msg_buffer,recordingMessage);
 8006e56:	496e      	ldr	r1, [pc, #440]	; (8007010 <main+0x2d0>)
 8006e58:	4866      	ldr	r0, [pc, #408]	; (8006ff4 <main+0x2b4>)
 8006e5a:	f001 fd1f 	bl	800889c <siprintf>
 	  HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006e5e:	4865      	ldr	r0, [pc, #404]	; (8006ff4 <main+0x2b4>)
 8006e60:	f7f9 f9ce 	bl	8000200 <strlen>
 8006e64:	4603      	mov	r3, r0
 8006e66:	b29a      	uxth	r2, r3
 8006e68:	2364      	movs	r3, #100	; 0x64
 8006e6a:	4962      	ldr	r1, [pc, #392]	; (8006ff4 <main+0x2b4>)
 8006e6c:	485f      	ldr	r0, [pc, #380]	; (8006fec <main+0x2ac>)
 8006e6e:	f7fe fc49 	bl	8005704 <HAL_UART_Transmit>
 	  while(rxdata[0] == '\000')
 8006e72:	e005      	b.n	8006e80 <main+0x140>
 	 	  HAL_UART_Receive(&huart1, rxdata, sizeof(rxdata), 100);
 8006e74:	2364      	movs	r3, #100	; 0x64
 8006e76:	221e      	movs	r2, #30
 8006e78:	495f      	ldr	r1, [pc, #380]	; (8006ff8 <main+0x2b8>)
 8006e7a:	485c      	ldr	r0, [pc, #368]	; (8006fec <main+0x2ac>)
 8006e7c:	f7fe fcd9 	bl	8005832 <HAL_UART_Receive>
 	  while(rxdata[0] == '\000')
 8006e80:	4b5d      	ldr	r3, [pc, #372]	; (8006ff8 <main+0x2b8>)
 8006e82:	781b      	ldrb	r3, [r3, #0]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d0f5      	beq.n	8006e74 <main+0x134>
   }

  sprintf(msg_buffer,chooseModeMessage);
 8006e88:	4962      	ldr	r1, [pc, #392]	; (8007014 <main+0x2d4>)
 8006e8a:	485a      	ldr	r0, [pc, #360]	; (8006ff4 <main+0x2b4>)
 8006e8c:	f001 fd06 	bl	800889c <siprintf>
  HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006e90:	4858      	ldr	r0, [pc, #352]	; (8006ff4 <main+0x2b4>)
 8006e92:	f7f9 f9b5 	bl	8000200 <strlen>
 8006e96:	4603      	mov	r3, r0
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	2364      	movs	r3, #100	; 0x64
 8006e9c:	4955      	ldr	r1, [pc, #340]	; (8006ff4 <main+0x2b4>)
 8006e9e:	4853      	ldr	r0, [pc, #332]	; (8006fec <main+0x2ac>)
 8006ea0:	f7fe fc30 	bl	8005704 <HAL_UART_Transmit>
  while(rxdata[0] == '\000')
 8006ea4:	e005      	b.n	8006eb2 <main+0x172>
 	  HAL_UART_Receive(&huart1, rxdata, sizeof(rxdata), 100);
 8006ea6:	2364      	movs	r3, #100	; 0x64
 8006ea8:	221e      	movs	r2, #30
 8006eaa:	4953      	ldr	r1, [pc, #332]	; (8006ff8 <main+0x2b8>)
 8006eac:	484f      	ldr	r0, [pc, #316]	; (8006fec <main+0x2ac>)
 8006eae:	f7fe fcc0 	bl	8005832 <HAL_UART_Receive>
  while(rxdata[0] == '\000')
 8006eb2:	4b51      	ldr	r3, [pc, #324]	; (8006ff8 <main+0x2b8>)
 8006eb4:	781b      	ldrb	r3, [r3, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d0f5      	beq.n	8006ea6 <main+0x166>

  //Print starting message of memory game
  if (rxdata[0] == '0'){
 8006eba:	4b4f      	ldr	r3, [pc, #316]	; (8006ff8 <main+0x2b8>)
 8006ebc:	781b      	ldrb	r3, [r3, #0]
 8006ebe:	2b30      	cmp	r3, #48	; 0x30
 8006ec0:	d113      	bne.n	8006eea <main+0x1aa>
	 HAL_UART_Transmit(&huart1, clearCommand, sizeof(clearCommand), 100);
 8006ec2:	2364      	movs	r3, #100	; 0x64
 8006ec4:	2264      	movs	r2, #100	; 0x64
 8006ec6:	4948      	ldr	r1, [pc, #288]	; (8006fe8 <main+0x2a8>)
 8006ec8:	4848      	ldr	r0, [pc, #288]	; (8006fec <main+0x2ac>)
 8006eca:	f7fe fc1b 	bl	8005704 <HAL_UART_Transmit>

	 sprintf(msg_buffer,gameChosenMessage[0]);
 8006ece:	4952      	ldr	r1, [pc, #328]	; (8007018 <main+0x2d8>)
 8006ed0:	4848      	ldr	r0, [pc, #288]	; (8006ff4 <main+0x2b4>)
 8006ed2:	f001 fce3 	bl	800889c <siprintf>
	 HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006ed6:	4847      	ldr	r0, [pc, #284]	; (8006ff4 <main+0x2b4>)
 8006ed8:	f7f9 f992 	bl	8000200 <strlen>
 8006edc:	4603      	mov	r3, r0
 8006ede:	b29a      	uxth	r2, r3
 8006ee0:	2364      	movs	r3, #100	; 0x64
 8006ee2:	4944      	ldr	r1, [pc, #272]	; (8006ff4 <main+0x2b4>)
 8006ee4:	4841      	ldr	r0, [pc, #260]	; (8006fec <main+0x2ac>)
 8006ee6:	f7fe fc0d 	bl	8005704 <HAL_UART_Transmit>
  }
  //Print starting message of direction game
  if (rxdata[0] == '1'){
 8006eea:	4b43      	ldr	r3, [pc, #268]	; (8006ff8 <main+0x2b8>)
 8006eec:	781b      	ldrb	r3, [r3, #0]
 8006eee:	2b31      	cmp	r3, #49	; 0x31
 8006ef0:	d113      	bne.n	8006f1a <main+0x1da>
	 HAL_UART_Transmit(&huart1, clearCommand, sizeof(clearCommand), 100);
 8006ef2:	2364      	movs	r3, #100	; 0x64
 8006ef4:	2264      	movs	r2, #100	; 0x64
 8006ef6:	493c      	ldr	r1, [pc, #240]	; (8006fe8 <main+0x2a8>)
 8006ef8:	483c      	ldr	r0, [pc, #240]	; (8006fec <main+0x2ac>)
 8006efa:	f7fe fc03 	bl	8005704 <HAL_UART_Transmit>

	 sprintf(msg_buffer,gameChosenMessage[1]);
 8006efe:	4947      	ldr	r1, [pc, #284]	; (800701c <main+0x2dc>)
 8006f00:	483c      	ldr	r0, [pc, #240]	; (8006ff4 <main+0x2b4>)
 8006f02:	f001 fccb 	bl	800889c <siprintf>
	 HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006f06:	483b      	ldr	r0, [pc, #236]	; (8006ff4 <main+0x2b4>)
 8006f08:	f7f9 f97a 	bl	8000200 <strlen>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	b29a      	uxth	r2, r3
 8006f10:	2364      	movs	r3, #100	; 0x64
 8006f12:	4938      	ldr	r1, [pc, #224]	; (8006ff4 <main+0x2b4>)
 8006f14:	4835      	ldr	r0, [pc, #212]	; (8006fec <main+0x2ac>)
 8006f16:	f7fe fbf5 	bl	8005704 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(digitLevelSelector == 0){
 8006f1a:	4b41      	ldr	r3, [pc, #260]	; (8007020 <main+0x2e0>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1fb      	bne.n	8006f1a <main+0x1da>

		  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
		  //we should loop until it returns from calback.?????
*/

		  while(answers[0] == '\000')
 8006f22:	e005      	b.n	8006f30 <main+0x1f0>
			  HAL_UART_Receive(&huart1, answers, sizeof(answers), 100);
 8006f24:	2364      	movs	r3, #100	; 0x64
 8006f26:	2205      	movs	r2, #5
 8006f28:	493e      	ldr	r1, [pc, #248]	; (8007024 <main+0x2e4>)
 8006f2a:	4830      	ldr	r0, [pc, #192]	; (8006fec <main+0x2ac>)
 8006f2c:	f7fe fc81 	bl	8005832 <HAL_UART_Receive>
		  while(answers[0] == '\000')
 8006f30:	4b3c      	ldr	r3, [pc, #240]	; (8007024 <main+0x2e4>)
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d0f5      	beq.n	8006f24 <main+0x1e4>
		  //HAL_Delay(timedelay); //this causes the answers array to be inaccurate


		  if(answers[0] != '\000'){
 8006f38:	4b3a      	ldr	r3, [pc, #232]	; (8007024 <main+0x2e4>)
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d0ec      	beq.n	8006f1a <main+0x1da>
			  for (int i = 0 ; i < 5; i++) {
 8006f40:	2300      	movs	r3, #0
 8006f42:	603b      	str	r3, [r7, #0]
 8006f44:	e013      	b.n	8006f6e <main+0x22e>
					  if (charseq[i] != (answers[i])) {
 8006f46:	4a38      	ldr	r2, [pc, #224]	; (8007028 <main+0x2e8>)
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	4413      	add	r3, r2
 8006f4c:	781a      	ldrb	r2, [r3, #0]
 8006f4e:	4935      	ldr	r1, [pc, #212]	; (8007024 <main+0x2e4>)
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	440b      	add	r3, r1
 8006f54:	781b      	ldrb	r3, [r3, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d006      	beq.n	8006f68 <main+0x228>
						  wrongAnswer++;
 8006f5a:	4b34      	ldr	r3, [pc, #208]	; (800702c <main+0x2ec>)
 8006f5c:	781b      	ldrb	r3, [r3, #0]
 8006f5e:	3301      	adds	r3, #1
 8006f60:	b2da      	uxtb	r2, r3
 8006f62:	4b32      	ldr	r3, [pc, #200]	; (800702c <main+0x2ec>)
 8006f64:	701a      	strb	r2, [r3, #0]
						  break;
 8006f66:	e005      	b.n	8006f74 <main+0x234>
			  for (int i = 0 ; i < 5; i++) {
 8006f68:	683b      	ldr	r3, [r7, #0]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	603b      	str	r3, [r7, #0]
 8006f6e:	683b      	ldr	r3, [r7, #0]
 8006f70:	2b04      	cmp	r3, #4
 8006f72:	dde8      	ble.n	8006f46 <main+0x206>
					  }
			  }
			 if (wrongAnswer == 0){
 8006f74:	4b2d      	ldr	r3, [pc, #180]	; (800702c <main+0x2ec>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d117      	bne.n	8006fac <main+0x26c>
				 sprintf(msg_buffer,roundWin);
 8006f7c:	492c      	ldr	r1, [pc, #176]	; (8007030 <main+0x2f0>)
 8006f7e:	481d      	ldr	r0, [pc, #116]	; (8006ff4 <main+0x2b4>)
 8006f80:	f001 fc8c 	bl	800889c <siprintf>
				 HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006f84:	481b      	ldr	r0, [pc, #108]	; (8006ff4 <main+0x2b4>)
 8006f86:	f7f9 f93b 	bl	8000200 <strlen>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	b29a      	uxth	r2, r3
 8006f8e:	2364      	movs	r3, #100	; 0x64
 8006f90:	4918      	ldr	r1, [pc, #96]	; (8006ff4 <main+0x2b4>)
 8006f92:	4816      	ldr	r0, [pc, #88]	; (8006fec <main+0x2ac>)
 8006f94:	f7fe fbb6 	bl	8005704 <HAL_UART_Transmit>

				 timedelay -= 2000;
 8006f98:	4b26      	ldr	r3, [pc, #152]	; (8007034 <main+0x2f4>)
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f5a3 63fa 	sub.w	r3, r3, #2000	; 0x7d0
 8006fa0:	4a24      	ldr	r2, [pc, #144]	; (8007034 <main+0x2f4>)
 8006fa2:	6013      	str	r3, [r2, #0]
				 answers[0] = '\000';
 8006fa4:	4b1f      	ldr	r3, [pc, #124]	; (8007024 <main+0x2e4>)
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	e013      	b.n	8006fd4 <main+0x294>
			 }

			 else{

				 sprintf(msg_buffer,roundLoss);
 8006fac:	4922      	ldr	r1, [pc, #136]	; (8007038 <main+0x2f8>)
 8006fae:	4811      	ldr	r0, [pc, #68]	; (8006ff4 <main+0x2b4>)
 8006fb0:	f001 fc74 	bl	800889c <siprintf>
				 HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006fb4:	480f      	ldr	r0, [pc, #60]	; (8006ff4 <main+0x2b4>)
 8006fb6:	f7f9 f923 	bl	8000200 <strlen>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	b29a      	uxth	r2, r3
 8006fbe:	2364      	movs	r3, #100	; 0x64
 8006fc0:	490c      	ldr	r1, [pc, #48]	; (8006ff4 <main+0x2b4>)
 8006fc2:	480a      	ldr	r0, [pc, #40]	; (8006fec <main+0x2ac>)
 8006fc4:	f7fe fb9e 	bl	8005704 <HAL_UART_Transmit>
				 wrongAnswer = 0;
 8006fc8:	4b18      	ldr	r3, [pc, #96]	; (800702c <main+0x2ec>)
 8006fca:	2200      	movs	r2, #0
 8006fcc:	701a      	strb	r2, [r3, #0]
				 answers[0] = '\000';
 8006fce:	4b15      	ldr	r3, [pc, #84]	; (8007024 <main+0x2e4>)
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	701a      	strb	r2, [r3, #0]
			 }

			 digitLevelSelector++;
 8006fd4:	4b12      	ldr	r3, [pc, #72]	; (8007020 <main+0x2e0>)
 8006fd6:	781b      	ldrb	r3, [r3, #0]
 8006fd8:	3301      	adds	r3, #1
 8006fda:	b2da      	uxtb	r2, r3
 8006fdc:	4b10      	ldr	r3, [pc, #64]	; (8007020 <main+0x2e0>)
 8006fde:	701a      	strb	r2, [r3, #0]
	  if(digitLevelSelector == 0){
 8006fe0:	e79b      	b.n	8006f1a <main+0x1da>
 8006fe2:	bf00      	nop
 8006fe4:	200006ec 	.word	0x200006ec
 8006fe8:	2000042c 	.word	0x2000042c
 8006fec:	20000738 	.word	0x20000738
 8006ff0:	20000170 	.word	0x20000170
 8006ff4:	2004ea44 	.word	0x2004ea44
 8006ff8:	2004eaa8 	.word	0x2004eaa8
 8006ffc:	20000238 	.word	0x20000238
 8007000:	2004ea2c 	.word	0x2004ea2c
 8007004:	2004ea2d 	.word	0x2004ea2d
 8007008:	200001d4 	.word	0x200001d4
 800700c:	2004ea34 	.word	0x2004ea34
 8007010:	20000044 	.word	0x20000044
 8007014:	2000029c 	.word	0x2000029c
 8007018:	20000364 	.word	0x20000364
 800701c:	200003c8 	.word	0x200003c8
 8007020:	2004eac6 	.word	0x2004eac6
 8007024:	2004ea3c 	.word	0x2004ea3c
 8007028:	2000003c 	.word	0x2000003c
 800702c:	2004ea41 	.word	0x2004ea41
 8007030:	200000a8 	.word	0x200000a8
 8007034:	20000038 	.word	0x20000038
 8007038:	2000010c 	.word	0x2000010c

0800703c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b096      	sub	sp, #88	; 0x58
 8007040:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007042:	f107 0314 	add.w	r3, r7, #20
 8007046:	2244      	movs	r2, #68	; 0x44
 8007048:	2100      	movs	r1, #0
 800704a:	4618      	mov	r0, r3
 800704c:	f001 fc1e 	bl	800888c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007050:	463b      	mov	r3, r7
 8007052:	2200      	movs	r2, #0
 8007054:	601a      	str	r2, [r3, #0]
 8007056:	605a      	str	r2, [r3, #4]
 8007058:	609a      	str	r2, [r3, #8]
 800705a:	60da      	str	r2, [r3, #12]
 800705c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800705e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007062:	f7fc f9af 	bl	80033c4 <HAL_PWREx_ControlVoltageScaling>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d001      	beq.n	8007070 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800706c:	f000 fbc4 	bl	80077f8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8007070:	2310      	movs	r3, #16
 8007072:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007074:	2301      	movs	r3, #1
 8007076:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007078:	2300      	movs	r3, #0
 800707a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800707c:	2360      	movs	r3, #96	; 0x60
 800707e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007080:	2302      	movs	r3, #2
 8007082:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007084:	2301      	movs	r3, #1
 8007086:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007088:	2301      	movs	r3, #1
 800708a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800708c:	2328      	movs	r3, #40	; 0x28
 800708e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007090:	2302      	movs	r3, #2
 8007092:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007094:	2302      	movs	r3, #2
 8007096:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007098:	2302      	movs	r3, #2
 800709a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800709c:	f107 0314 	add.w	r3, r7, #20
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fc fa33 	bl	800350c <HAL_RCC_OscConfig>
 80070a6:	4603      	mov	r3, r0
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	d001      	beq.n	80070b0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80070ac:	f000 fba4 	bl	80077f8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80070b0:	230f      	movs	r3, #15
 80070b2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80070b4:	2303      	movs	r3, #3
 80070b6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80070b8:	2300      	movs	r3, #0
 80070ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80070bc:	2300      	movs	r3, #0
 80070be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80070c0:	2300      	movs	r3, #0
 80070c2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80070c4:	463b      	mov	r3, r7
 80070c6:	2103      	movs	r1, #3
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fc fe39 	bl	8003d40 <HAL_RCC_ClockConfig>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d001      	beq.n	80070d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80070d4:	f000 fb90 	bl	80077f8 <Error_Handler>
  }
}
 80070d8:	bf00      	nop
 80070da:	3758      	adds	r7, #88	; 0x58
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}

080070e0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b08a      	sub	sp, #40	; 0x28
 80070e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80070e6:	463b      	mov	r3, r7
 80070e8:	2228      	movs	r2, #40	; 0x28
 80070ea:	2100      	movs	r1, #0
 80070ec:	4618      	mov	r0, r3
 80070ee:	f001 fbcd 	bl	800888c <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80070f2:	4b13      	ldr	r3, [pc, #76]	; (8007140 <MX_DAC1_Init+0x60>)
 80070f4:	4a13      	ldr	r2, [pc, #76]	; (8007144 <MX_DAC1_Init+0x64>)
 80070f6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80070f8:	4811      	ldr	r0, [pc, #68]	; (8007140 <MX_DAC1_Init+0x60>)
 80070fa:	f7f9 fc04 	bl	8000906 <HAL_DAC_Init>
 80070fe:	4603      	mov	r3, r0
 8007100:	2b00      	cmp	r3, #0
 8007102:	d001      	beq.n	8007108 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8007104:	f000 fb78 	bl	80077f8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8007108:	2300      	movs	r3, #0
 800710a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800710c:	230a      	movs	r3, #10
 800710e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007110:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007114:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007116:	2300      	movs	r3, #0
 8007118:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800711a:	2300      	movs	r3, #0
 800711c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007122:	463b      	mov	r3, r7
 8007124:	2200      	movs	r2, #0
 8007126:	4619      	mov	r1, r3
 8007128:	4805      	ldr	r0, [pc, #20]	; (8007140 <MX_DAC1_Init+0x60>)
 800712a:	f7f9 fd35 	bl	8000b98 <HAL_DAC_ConfigChannel>
 800712e:	4603      	mov	r3, r0
 8007130:	2b00      	cmp	r3, #0
 8007132:	d001      	beq.n	8007138 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8007134:	f000 fb60 	bl	80077f8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8007138:	bf00      	nop
 800713a:	3728      	adds	r7, #40	; 0x28
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}
 8007140:	2000053c 	.word	0x2000053c
 8007144:	40007400 	.word	0x40007400

08007148 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 800714c:	4b2c      	ldr	r3, [pc, #176]	; (8007200 <MX_DFSDM1_Init+0xb8>)
 800714e:	4a2d      	ldr	r2, [pc, #180]	; (8007204 <MX_DFSDM1_Init+0xbc>)
 8007150:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8007152:	4b2b      	ldr	r3, [pc, #172]	; (8007200 <MX_DFSDM1_Init+0xb8>)
 8007154:	2200      	movs	r2, #0
 8007156:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8007158:	4b29      	ldr	r3, [pc, #164]	; (8007200 <MX_DFSDM1_Init+0xb8>)
 800715a:	2201      	movs	r2, #1
 800715c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 800715e:	4b28      	ldr	r3, [pc, #160]	; (8007200 <MX_DFSDM1_Init+0xb8>)
 8007160:	2201      	movs	r2, #1
 8007162:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8007164:	4b26      	ldr	r3, [pc, #152]	; (8007200 <MX_DFSDM1_Init+0xb8>)
 8007166:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 800716a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 240;
 800716c:	4b24      	ldr	r3, [pc, #144]	; (8007200 <MX_DFSDM1_Init+0xb8>)
 800716e:	22f0      	movs	r2, #240	; 0xf0
 8007170:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8007172:	4b23      	ldr	r3, [pc, #140]	; (8007200 <MX_DFSDM1_Init+0xb8>)
 8007174:	2201      	movs	r2, #1
 8007176:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8007178:	4821      	ldr	r0, [pc, #132]	; (8007200 <MX_DFSDM1_Init+0xb8>)
 800717a:	f7f9 ff97 	bl	80010ac <HAL_DFSDM_FilterInit>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8007184:	f000 fb38 	bl	80077f8 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8007188:	4b1f      	ldr	r3, [pc, #124]	; (8007208 <MX_DFSDM1_Init+0xc0>)
 800718a:	4a20      	ldr	r2, [pc, #128]	; (800720c <MX_DFSDM1_Init+0xc4>)
 800718c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800718e:	4b1e      	ldr	r3, [pc, #120]	; (8007208 <MX_DFSDM1_Init+0xc0>)
 8007190:	2201      	movs	r2, #1
 8007192:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8007194:	4b1c      	ldr	r3, [pc, #112]	; (8007208 <MX_DFSDM1_Init+0xc0>)
 8007196:	2200      	movs	r2, #0
 8007198:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 800719a:	4b1b      	ldr	r3, [pc, #108]	; (8007208 <MX_DFSDM1_Init+0xc0>)
 800719c:	2222      	movs	r2, #34	; 0x22
 800719e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 80071a0:	4b19      	ldr	r3, [pc, #100]	; (8007208 <MX_DFSDM1_Init+0xc0>)
 80071a2:	2200      	movs	r2, #0
 80071a4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80071a6:	4b18      	ldr	r3, [pc, #96]	; (8007208 <MX_DFSDM1_Init+0xc0>)
 80071a8:	2200      	movs	r2, #0
 80071aa:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80071ac:	4b16      	ldr	r3, [pc, #88]	; (8007208 <MX_DFSDM1_Init+0xc0>)
 80071ae:	2200      	movs	r2, #0
 80071b0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 80071b2:	4b15      	ldr	r3, [pc, #84]	; (8007208 <MX_DFSDM1_Init+0xc0>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 80071b8:	4b13      	ldr	r3, [pc, #76]	; (8007208 <MX_DFSDM1_Init+0xc0>)
 80071ba:	2204      	movs	r2, #4
 80071bc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80071be:	4b12      	ldr	r3, [pc, #72]	; (8007208 <MX_DFSDM1_Init+0xc0>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 80071c4:	4b10      	ldr	r3, [pc, #64]	; (8007208 <MX_DFSDM1_Init+0xc0>)
 80071c6:	2201      	movs	r2, #1
 80071c8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 80071ca:	4b0f      	ldr	r3, [pc, #60]	; (8007208 <MX_DFSDM1_Init+0xc0>)
 80071cc:	2200      	movs	r2, #0
 80071ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 80071d0:	4b0d      	ldr	r3, [pc, #52]	; (8007208 <MX_DFSDM1_Init+0xc0>)
 80071d2:	2200      	movs	r2, #0
 80071d4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 80071d6:	480c      	ldr	r0, [pc, #48]	; (8007208 <MX_DFSDM1_Init+0xc0>)
 80071d8:	f7f9 fea8 	bl	8000f2c <HAL_DFSDM_ChannelInit>
 80071dc:	4603      	mov	r3, r0
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 80071e2:	f000 fb09 	bl	80077f8 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80071e6:	2201      	movs	r2, #1
 80071e8:	4909      	ldr	r1, [pc, #36]	; (8007210 <MX_DFSDM1_Init+0xc8>)
 80071ea:	4805      	ldr	r0, [pc, #20]	; (8007200 <MX_DFSDM1_Init+0xb8>)
 80071ec:	f7fa f838 	bl	8001260 <HAL_DFSDM_FilterConfigRegChannel>
 80071f0:	4603      	mov	r3, r0
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d001      	beq.n	80071fa <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 80071f6:	f000 faff 	bl	80077f8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80071fa:	bf00      	nop
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	200005b0 	.word	0x200005b0
 8007204:	40016100 	.word	0x40016100
 8007208:	20000604 	.word	0x20000604
 800720c:	40016040 	.word	0x40016040
 8007210:	00020004 	.word	0x00020004

08007214 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 800721a:	1d3b      	adds	r3, r7, #4
 800721c:	2200      	movs	r2, #0
 800721e:	601a      	str	r2, [r3, #0]
 8007220:	605a      	str	r2, [r3, #4]
 8007222:	609a      	str	r2, [r3, #8]
 8007224:	60da      	str	r2, [r3, #12]
 8007226:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8007228:	4b23      	ldr	r3, [pc, #140]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 800722a:	4a24      	ldr	r2, [pc, #144]	; (80072bc <MX_OCTOSPI1_Init+0xa8>)
 800722c:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 800722e:	4b22      	ldr	r3, [pc, #136]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 8007230:	2201      	movs	r2, #1
 8007232:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8007234:	4b20      	ldr	r3, [pc, #128]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 8007236:	2200      	movs	r2, #0
 8007238:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 800723a:	4b1f      	ldr	r3, [pc, #124]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 800723c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007240:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8007242:	4b1d      	ldr	r3, [pc, #116]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 8007244:	2220      	movs	r2, #32
 8007246:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8007248:	4b1b      	ldr	r3, [pc, #108]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 800724a:	2201      	movs	r2, #1
 800724c:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 800724e:	4b1a      	ldr	r3, [pc, #104]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 8007250:	2200      	movs	r2, #0
 8007252:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8007254:	4b18      	ldr	r3, [pc, #96]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 8007256:	2200      	movs	r2, #0
 8007258:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 800725a:	4b17      	ldr	r3, [pc, #92]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 800725c:	2201      	movs	r2, #1
 800725e:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8007260:	4b15      	ldr	r3, [pc, #84]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 8007262:	2200      	movs	r2, #0
 8007264:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8007266:	4b14      	ldr	r3, [pc, #80]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 8007268:	2200      	movs	r2, #0
 800726a:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 800726c:	4b12      	ldr	r3, [pc, #72]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 800726e:	2200      	movs	r2, #0
 8007270:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8007272:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 8007274:	2208      	movs	r2, #8
 8007276:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8007278:	480f      	ldr	r0, [pc, #60]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 800727a:	f7fb f807 	bl	800228c <HAL_OSPI_Init>
 800727e:	4603      	mov	r3, r0
 8007280:	2b00      	cmp	r3, #0
 8007282:	d001      	beq.n	8007288 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8007284:	f000 fab8 	bl	80077f8 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8007288:	2301      	movs	r3, #1
 800728a:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 800728c:	2301      	movs	r3, #1
 800728e:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8007290:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8007294:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007296:	1d3b      	adds	r3, r7, #4
 8007298:	f241 3288 	movw	r2, #5000	; 0x1388
 800729c:	4619      	mov	r1, r3
 800729e:	4806      	ldr	r0, [pc, #24]	; (80072b8 <MX_OCTOSPI1_Init+0xa4>)
 80072a0:	f7fb faf2 	bl	8002888 <HAL_OSPIM_Config>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d001      	beq.n	80072ae <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 80072aa:	f000 faa5 	bl	80077f8 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 80072ae:	bf00      	nop
 80072b0:	3718      	adds	r7, #24
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	bf00      	nop
 80072b8:	2000069c 	.word	0x2000069c
 80072bc:	a0001000 	.word	0xa0001000

080072c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b088      	sub	sp, #32
 80072c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80072c6:	f107 0310 	add.w	r3, r7, #16
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	605a      	str	r2, [r3, #4]
 80072d0:	609a      	str	r2, [r3, #8]
 80072d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80072d4:	1d3b      	adds	r3, r7, #4
 80072d6:	2200      	movs	r2, #0
 80072d8:	601a      	str	r2, [r3, #0]
 80072da:	605a      	str	r2, [r3, #4]
 80072dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80072de:	4b1e      	ldr	r3, [pc, #120]	; (8007358 <MX_TIM2_Init+0x98>)
 80072e0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80072e4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80072e6:	4b1c      	ldr	r3, [pc, #112]	; (8007358 <MX_TIM2_Init+0x98>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80072ec:	4b1a      	ldr	r3, [pc, #104]	; (8007358 <MX_TIM2_Init+0x98>)
 80072ee:	2200      	movs	r2, #0
 80072f0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 80072f2:	4b19      	ldr	r3, [pc, #100]	; (8007358 <MX_TIM2_Init+0x98>)
 80072f4:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80072f8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80072fa:	4b17      	ldr	r3, [pc, #92]	; (8007358 <MX_TIM2_Init+0x98>)
 80072fc:	2200      	movs	r2, #0
 80072fe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007300:	4b15      	ldr	r3, [pc, #84]	; (8007358 <MX_TIM2_Init+0x98>)
 8007302:	2200      	movs	r2, #0
 8007304:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007306:	4814      	ldr	r0, [pc, #80]	; (8007358 <MX_TIM2_Init+0x98>)
 8007308:	f7fd fcf0 	bl	8004cec <HAL_TIM_Base_Init>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d001      	beq.n	8007316 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007312:	f000 fa71 	bl	80077f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007316:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800731a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800731c:	f107 0310 	add.w	r3, r7, #16
 8007320:	4619      	mov	r1, r3
 8007322:	480d      	ldr	r0, [pc, #52]	; (8007358 <MX_TIM2_Init+0x98>)
 8007324:	f7fd fec9 	bl	80050ba <HAL_TIM_ConfigClockSource>
 8007328:	4603      	mov	r3, r0
 800732a:	2b00      	cmp	r3, #0
 800732c:	d001      	beq.n	8007332 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800732e:	f000 fa63 	bl	80077f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007332:	2320      	movs	r3, #32
 8007334:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007336:	2300      	movs	r3, #0
 8007338:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800733a:	1d3b      	adds	r3, r7, #4
 800733c:	4619      	mov	r1, r3
 800733e:	4806      	ldr	r0, [pc, #24]	; (8007358 <MX_TIM2_Init+0x98>)
 8007340:	f7fe f8ea 	bl	8005518 <HAL_TIMEx_MasterConfigSynchronization>
 8007344:	4603      	mov	r3, r0
 8007346:	2b00      	cmp	r3, #0
 8007348:	d001      	beq.n	800734e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800734a:	f000 fa55 	bl	80077f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800734e:	bf00      	nop
 8007350:	3720      	adds	r7, #32
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
 8007356:	bf00      	nop
 8007358:	200006ec 	.word	0x200006ec

0800735c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007360:	4b22      	ldr	r3, [pc, #136]	; (80073ec <MX_USART1_UART_Init+0x90>)
 8007362:	4a23      	ldr	r2, [pc, #140]	; (80073f0 <MX_USART1_UART_Init+0x94>)
 8007364:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007366:	4b21      	ldr	r3, [pc, #132]	; (80073ec <MX_USART1_UART_Init+0x90>)
 8007368:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800736c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800736e:	4b1f      	ldr	r3, [pc, #124]	; (80073ec <MX_USART1_UART_Init+0x90>)
 8007370:	2200      	movs	r2, #0
 8007372:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007374:	4b1d      	ldr	r3, [pc, #116]	; (80073ec <MX_USART1_UART_Init+0x90>)
 8007376:	2200      	movs	r2, #0
 8007378:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800737a:	4b1c      	ldr	r3, [pc, #112]	; (80073ec <MX_USART1_UART_Init+0x90>)
 800737c:	2200      	movs	r2, #0
 800737e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007380:	4b1a      	ldr	r3, [pc, #104]	; (80073ec <MX_USART1_UART_Init+0x90>)
 8007382:	220c      	movs	r2, #12
 8007384:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007386:	4b19      	ldr	r3, [pc, #100]	; (80073ec <MX_USART1_UART_Init+0x90>)
 8007388:	2200      	movs	r2, #0
 800738a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800738c:	4b17      	ldr	r3, [pc, #92]	; (80073ec <MX_USART1_UART_Init+0x90>)
 800738e:	2200      	movs	r2, #0
 8007390:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007392:	4b16      	ldr	r3, [pc, #88]	; (80073ec <MX_USART1_UART_Init+0x90>)
 8007394:	2200      	movs	r2, #0
 8007396:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007398:	4b14      	ldr	r3, [pc, #80]	; (80073ec <MX_USART1_UART_Init+0x90>)
 800739a:	2200      	movs	r2, #0
 800739c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800739e:	4b13      	ldr	r3, [pc, #76]	; (80073ec <MX_USART1_UART_Init+0x90>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80073a4:	4811      	ldr	r0, [pc, #68]	; (80073ec <MX_USART1_UART_Init+0x90>)
 80073a6:	f7fe f95d 	bl	8005664 <HAL_UART_Init>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d001      	beq.n	80073b4 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80073b0:	f000 fa22 	bl	80077f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80073b4:	2100      	movs	r1, #0
 80073b6:	480d      	ldr	r0, [pc, #52]	; (80073ec <MX_USART1_UART_Init+0x90>)
 80073b8:	f7ff fbf7 	bl	8006baa <HAL_UARTEx_SetTxFifoThreshold>
 80073bc:	4603      	mov	r3, r0
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d001      	beq.n	80073c6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80073c2:	f000 fa19 	bl	80077f8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80073c6:	2100      	movs	r1, #0
 80073c8:	4808      	ldr	r0, [pc, #32]	; (80073ec <MX_USART1_UART_Init+0x90>)
 80073ca:	f7ff fc2c 	bl	8006c26 <HAL_UARTEx_SetRxFifoThreshold>
 80073ce:	4603      	mov	r3, r0
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d001      	beq.n	80073d8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80073d4:	f000 fa10 	bl	80077f8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80073d8:	4804      	ldr	r0, [pc, #16]	; (80073ec <MX_USART1_UART_Init+0x90>)
 80073da:	f7ff fbad 	bl	8006b38 <HAL_UARTEx_DisableFifoMode>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d001      	beq.n	80073e8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80073e4:	f000 fa08 	bl	80077f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80073e8:	bf00      	nop
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20000738 	.word	0x20000738
 80073f0:	40013800 	.word	0x40013800

080073f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80073fa:	4b1a      	ldr	r3, [pc, #104]	; (8007464 <MX_DMA_Init+0x70>)
 80073fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80073fe:	4a19      	ldr	r2, [pc, #100]	; (8007464 <MX_DMA_Init+0x70>)
 8007400:	f043 0304 	orr.w	r3, r3, #4
 8007404:	6493      	str	r3, [r2, #72]	; 0x48
 8007406:	4b17      	ldr	r3, [pc, #92]	; (8007464 <MX_DMA_Init+0x70>)
 8007408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800740a:	f003 0304 	and.w	r3, r3, #4
 800740e:	607b      	str	r3, [r7, #4]
 8007410:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007412:	4b14      	ldr	r3, [pc, #80]	; (8007464 <MX_DMA_Init+0x70>)
 8007414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007416:	4a13      	ldr	r2, [pc, #76]	; (8007464 <MX_DMA_Init+0x70>)
 8007418:	f043 0301 	orr.w	r3, r3, #1
 800741c:	6493      	str	r3, [r2, #72]	; 0x48
 800741e:	4b11      	ldr	r3, [pc, #68]	; (8007464 <MX_DMA_Init+0x70>)
 8007420:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007422:	f003 0301 	and.w	r3, r3, #1
 8007426:	603b      	str	r3, [r7, #0]
 8007428:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800742a:	2200      	movs	r2, #0
 800742c:	2100      	movs	r1, #0
 800742e:	200b      	movs	r0, #11
 8007430:	f7f9 fa33 	bl	800089a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007434:	200b      	movs	r0, #11
 8007436:	f7f9 fa4c 	bl	80008d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800743a:	2200      	movs	r2, #0
 800743c:	2100      	movs	r1, #0
 800743e:	200c      	movs	r0, #12
 8007440:	f7f9 fa2b 	bl	800089a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007444:	200c      	movs	r0, #12
 8007446:	f7f9 fa44 	bl	80008d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800744a:	2200      	movs	r2, #0
 800744c:	2100      	movs	r1, #0
 800744e:	200d      	movs	r0, #13
 8007450:	f7f9 fa23 	bl	800089a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007454:	200d      	movs	r0, #13
 8007456:	f7f9 fa3c 	bl	80008d2 <HAL_NVIC_EnableIRQ>

}
 800745a:	bf00      	nop
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	40021000 	.word	0x40021000

08007468 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b08a      	sub	sp, #40	; 0x28
 800746c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800746e:	f107 0314 	add.w	r3, r7, #20
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
 8007476:	605a      	str	r2, [r3, #4]
 8007478:	609a      	str	r2, [r3, #8]
 800747a:	60da      	str	r2, [r3, #12]
 800747c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800747e:	4b39      	ldr	r3, [pc, #228]	; (8007564 <MX_GPIO_Init+0xfc>)
 8007480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007482:	4a38      	ldr	r2, [pc, #224]	; (8007564 <MX_GPIO_Init+0xfc>)
 8007484:	f043 0310 	orr.w	r3, r3, #16
 8007488:	64d3      	str	r3, [r2, #76]	; 0x4c
 800748a:	4b36      	ldr	r3, [pc, #216]	; (8007564 <MX_GPIO_Init+0xfc>)
 800748c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800748e:	f003 0310 	and.w	r3, r3, #16
 8007492:	613b      	str	r3, [r7, #16]
 8007494:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007496:	4b33      	ldr	r3, [pc, #204]	; (8007564 <MX_GPIO_Init+0xfc>)
 8007498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800749a:	4a32      	ldr	r2, [pc, #200]	; (8007564 <MX_GPIO_Init+0xfc>)
 800749c:	f043 0304 	orr.w	r3, r3, #4
 80074a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074a2:	4b30      	ldr	r3, [pc, #192]	; (8007564 <MX_GPIO_Init+0xfc>)
 80074a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074a6:	f003 0304 	and.w	r3, r3, #4
 80074aa:	60fb      	str	r3, [r7, #12]
 80074ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80074ae:	4b2d      	ldr	r3, [pc, #180]	; (8007564 <MX_GPIO_Init+0xfc>)
 80074b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074b2:	4a2c      	ldr	r2, [pc, #176]	; (8007564 <MX_GPIO_Init+0xfc>)
 80074b4:	f043 0301 	orr.w	r3, r3, #1
 80074b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074ba:	4b2a      	ldr	r3, [pc, #168]	; (8007564 <MX_GPIO_Init+0xfc>)
 80074bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	60bb      	str	r3, [r7, #8]
 80074c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80074c6:	4b27      	ldr	r3, [pc, #156]	; (8007564 <MX_GPIO_Init+0xfc>)
 80074c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ca:	4a26      	ldr	r2, [pc, #152]	; (8007564 <MX_GPIO_Init+0xfc>)
 80074cc:	f043 0302 	orr.w	r3, r3, #2
 80074d0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074d2:	4b24      	ldr	r3, [pc, #144]	; (8007564 <MX_GPIO_Init+0xfc>)
 80074d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	607b      	str	r3, [r7, #4]
 80074dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
 80074de:	2200      	movs	r2, #0
 80074e0:	2108      	movs	r1, #8
 80074e2:	4821      	ldr	r0, [pc, #132]	; (8007568 <MX_GPIO_Init+0x100>)
 80074e4:	f7fa fe88 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);
 80074e8:	2200      	movs	r2, #0
 80074ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80074ee:	481f      	ldr	r0, [pc, #124]	; (800756c <MX_GPIO_Init+0x104>)
 80074f0:	f7fa fe82 	bl	80021f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : redLED_Pin */
  GPIO_InitStruct.Pin = redLED_Pin;
 80074f4:	2308      	movs	r3, #8
 80074f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80074f8:	2301      	movs	r3, #1
 80074fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074fc:	2300      	movs	r3, #0
 80074fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007500:	2300      	movs	r3, #0
 8007502:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(redLED_GPIO_Port, &GPIO_InitStruct);
 8007504:	f107 0314 	add.w	r3, r7, #20
 8007508:	4619      	mov	r1, r3
 800750a:	4817      	ldr	r0, [pc, #92]	; (8007568 <MX_GPIO_Init+0x100>)
 800750c:	f7fa fbf0 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : pushButton_Pin */
  GPIO_InitStruct.Pin = pushButton_Pin;
 8007510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007514:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007516:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800751a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800751c:	2300      	movs	r3, #0
 800751e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pushButton_GPIO_Port, &GPIO_InitStruct);
 8007520:	f107 0314 	add.w	r3, r7, #20
 8007524:	4619      	mov	r1, r3
 8007526:	4812      	ldr	r0, [pc, #72]	; (8007570 <MX_GPIO_Init+0x108>)
 8007528:	f7fa fbe2 	bl	8001cf0 <HAL_GPIO_Init>

  /*Configure GPIO pin : greenLED_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin;
 800752c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007530:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007532:	2301      	movs	r3, #1
 8007534:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007536:	2300      	movs	r3, #0
 8007538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800753a:	2300      	movs	r3, #0
 800753c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(greenLED_GPIO_Port, &GPIO_InitStruct);
 800753e:	f107 0314 	add.w	r3, r7, #20
 8007542:	4619      	mov	r1, r3
 8007544:	4809      	ldr	r0, [pc, #36]	; (800756c <MX_GPIO_Init+0x104>)
 8007546:	f7fa fbd3 	bl	8001cf0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800754a:	2200      	movs	r2, #0
 800754c:	2100      	movs	r1, #0
 800754e:	2028      	movs	r0, #40	; 0x28
 8007550:	f7f9 f9a3 	bl	800089a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007554:	2028      	movs	r0, #40	; 0x28
 8007556:	f7f9 f9bc 	bl	80008d2 <HAL_NVIC_EnableIRQ>

}
 800755a:	bf00      	nop
 800755c:	3728      	adds	r7, #40	; 0x28
 800755e:	46bd      	mov	sp, r7
 8007560:	bd80      	pop	{r7, pc}
 8007562:	bf00      	nop
 8007564:	40021000 	.word	0x40021000
 8007568:	48001000 	.word	0x48001000
 800756c:	48000400 	.word	0x48000400
 8007570:	48000800 	.word	0x48000800

08007574 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007574:	b580      	push	{r7, lr}
 8007576:	b084      	sub	sp, #16
 8007578:	af02      	add	r7, sp, #8
 800757a:	4603      	mov	r3, r0
 800757c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == pushButton_Pin) {
 800757e:	88fb      	ldrh	r3, [r7, #6]
 8007580:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007584:	d145      	bne.n	8007612 <HAL_GPIO_EXTI_Callback+0x9e>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8007586:	2100      	movs	r1, #0
 8007588:	4824      	ldr	r0, [pc, #144]	; (800761c <HAL_GPIO_EXTI_Callback+0xa8>)
 800758a:	f7f9 faab 	bl	8000ae4 <HAL_DAC_Stop_DMA>
		HAL_GPIO_TogglePin(greenLED_GPIO_Port, greenLED_Pin);
 800758e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007592:	4823      	ldr	r0, [pc, #140]	; (8007620 <HAL_GPIO_EXTI_Callback+0xac>)
 8007594:	f7fa fe48 	bl	8002228 <HAL_GPIO_TogglePin>

		if(recorder)
 8007598:	4b22      	ldr	r3, [pc, #136]	; (8007624 <HAL_GPIO_EXTI_Callback+0xb0>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <HAL_GPIO_EXTI_Callback+0x38>
			HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, SEQUENCE, SEQUENCE_LENGTH);
 80075a0:	f649 4240 	movw	r2, #40000	; 0x9c40
 80075a4:	4920      	ldr	r1, [pc, #128]	; (8007628 <HAL_GPIO_EXTI_Callback+0xb4>)
 80075a6:	4821      	ldr	r0, [pc, #132]	; (800762c <HAL_GPIO_EXTI_Callback+0xb8>)
 80075a8:	f7f9 fea0 	bl	80012ec <HAL_DFSDM_FilterRegularStart_DMA>

		if(player) {
 80075ac:	4b20      	ldr	r3, [pc, #128]	; (8007630 <HAL_GPIO_EXTI_Callback+0xbc>)
 80075ae:	781b      	ldrb	r3, [r3, #0]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d020      	beq.n	80075f6 <HAL_GPIO_EXTI_Callback+0x82>
				test = address[seq[j]];
 80075b4:	4b1f      	ldr	r3, [pc, #124]	; (8007634 <HAL_GPIO_EXTI_Callback+0xc0>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	4b1f      	ldr	r3, [pc, #124]	; (8007638 <HAL_GPIO_EXTI_Callback+0xc4>)
 80075bc:	5c9b      	ldrb	r3, [r3, r2]
 80075be:	461a      	mov	r2, r3
 80075c0:	4b1e      	ldr	r3, [pc, #120]	; (800763c <HAL_GPIO_EXTI_Callback+0xc8>)
 80075c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075c6:	461a      	mov	r2, r3
 80075c8:	4b1d      	ldr	r3, [pc, #116]	; (8007640 <HAL_GPIO_EXTI_Callback+0xcc>)
 80075ca:	601a      	str	r2, [r3, #0]
				if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  test, sizeof(SEQUENCE)) != QSPI_OK)
 80075cc:	4b1c      	ldr	r3, [pc, #112]	; (8007640 <HAL_GPIO_EXTI_Callback+0xcc>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4a1c      	ldr	r2, [pc, #112]	; (8007644 <HAL_GPIO_EXTI_Callback+0xd0>)
 80075d2:	4619      	mov	r1, r3
 80075d4:	481c      	ldr	r0, [pc, #112]	; (8007648 <HAL_GPIO_EXTI_Callback+0xd4>)
 80075d6:	f000 f999 	bl	800790c <BSP_QSPI_Read>
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <HAL_GPIO_EXTI_Callback+0x70>
					Error_Handler();
 80075e0:	f000 f90a 	bl	80077f8 <Error_Handler>
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 80075e4:	2300      	movs	r3, #0
 80075e6:	9300      	str	r3, [sp, #0]
 80075e8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80075ec:	4a16      	ldr	r2, [pc, #88]	; (8007648 <HAL_GPIO_EXTI_Callback+0xd4>)
 80075ee:	2100      	movs	r1, #0
 80075f0:	480a      	ldr	r0, [pc, #40]	; (800761c <HAL_GPIO_EXTI_Callback+0xa8>)
 80075f2:	f7f9 f9ab 	bl	800094c <HAL_DAC_Start_DMA>

		}

	 	  sprintf(msg_buffer,startTypingMessage);
 80075f6:	4915      	ldr	r1, [pc, #84]	; (800764c <HAL_GPIO_EXTI_Callback+0xd8>)
 80075f8:	4815      	ldr	r0, [pc, #84]	; (8007650 <HAL_GPIO_EXTI_Callback+0xdc>)
 80075fa:	f001 f94f 	bl	800889c <siprintf>
	 	  HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 80075fe:	4814      	ldr	r0, [pc, #80]	; (8007650 <HAL_GPIO_EXTI_Callback+0xdc>)
 8007600:	f7f8 fdfe 	bl	8000200 <strlen>
 8007604:	4603      	mov	r3, r0
 8007606:	b29a      	uxth	r2, r3
 8007608:	2364      	movs	r3, #100	; 0x64
 800760a:	4911      	ldr	r1, [pc, #68]	; (8007650 <HAL_GPIO_EXTI_Callback+0xdc>)
 800760c:	4811      	ldr	r0, [pc, #68]	; (8007654 <HAL_GPIO_EXTI_Callback+0xe0>)
 800760e:	f7fe f879 	bl	8005704 <HAL_UART_Transmit>
	}
}
 8007612:	bf00      	nop
 8007614:	3708      	adds	r7, #8
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	bf00      	nop
 800761c:	2000053c 	.word	0x2000053c
 8007620:	48000400 	.word	0x48000400
 8007624:	2004ea2c 	.word	0x2004ea2c
 8007628:	20000828 	.word	0x20000828
 800762c:	200005b0 	.word	0x200005b0
 8007630:	2004ea2d 	.word	0x2004ea2d
 8007634:	2004ea38 	.word	0x2004ea38
 8007638:	20000030 	.word	0x20000030
 800763c:	20000008 	.word	0x20000008
 8007640:	2004ea30 	.word	0x2004ea30
 8007644:	00027100 	.word	0x00027100
 8007648:	20027928 	.word	0x20027928
 800764c:	20000300 	.word	0x20000300
 8007650:	2004ea44 	.word	0x2004ea44
 8007654:	20000738 	.word	0x20000738

08007658 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8007658:	b580      	push	{r7, lr}
 800765a:	b084      	sub	sp, #16
 800765c:	af02      	add	r7, sp, #8
 800765e:	6078      	str	r0, [r7, #4]

	if(player) {
 8007660:	4b1b      	ldr	r3, [pc, #108]	; (80076d0 <HAL_DAC_ConvCpltCallbackCh1+0x78>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d02e      	beq.n	80076c6 <HAL_DAC_ConvCpltCallbackCh1+0x6e>
	j = j + 1;
 8007668:	4b1a      	ldr	r3, [pc, #104]	; (80076d4 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	3301      	adds	r3, #1
 800766e:	b2da      	uxtb	r2, r3
 8007670:	4b18      	ldr	r3, [pc, #96]	; (80076d4 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 8007672:	701a      	strb	r2, [r3, #0]
	test = address[seq[j]];
 8007674:	4b17      	ldr	r3, [pc, #92]	; (80076d4 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	461a      	mov	r2, r3
 800767a:	4b17      	ldr	r3, [pc, #92]	; (80076d8 <HAL_DAC_ConvCpltCallbackCh1+0x80>)
 800767c:	5c9b      	ldrb	r3, [r3, r2]
 800767e:	461a      	mov	r2, r3
 8007680:	4b16      	ldr	r3, [pc, #88]	; (80076dc <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 8007682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007686:	461a      	mov	r2, r3
 8007688:	4b15      	ldr	r3, [pc, #84]	; (80076e0 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 800768a:	601a      	str	r2, [r3, #0]
	if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  test, sizeof(SEQUENCE)) != QSPI_OK)
 800768c:	4b14      	ldr	r3, [pc, #80]	; (80076e0 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a14      	ldr	r2, [pc, #80]	; (80076e4 <HAL_DAC_ConvCpltCallbackCh1+0x8c>)
 8007692:	4619      	mov	r1, r3
 8007694:	4814      	ldr	r0, [pc, #80]	; (80076e8 <HAL_DAC_ConvCpltCallbackCh1+0x90>)
 8007696:	f000 f939 	bl	800790c <BSP_QSPI_Read>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <HAL_DAC_ConvCpltCallbackCh1+0x4c>
		Error_Handler();
 80076a0:	f000 f8aa 	bl	80077f8 <Error_Handler>

	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 80076a4:	2300      	movs	r3, #0
 80076a6:	9300      	str	r3, [sp, #0]
 80076a8:	f649 4340 	movw	r3, #40000	; 0x9c40
 80076ac:	4a0e      	ldr	r2, [pc, #56]	; (80076e8 <HAL_DAC_ConvCpltCallbackCh1+0x90>)
 80076ae:	2100      	movs	r1, #0
 80076b0:	480e      	ldr	r0, [pc, #56]	; (80076ec <HAL_DAC_ConvCpltCallbackCh1+0x94>)
 80076b2:	f7f9 f94b 	bl	800094c <HAL_DAC_Start_DMA>

	if (j == 5) {
 80076b6:	4b07      	ldr	r3, [pc, #28]	; (80076d4 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 80076b8:	781b      	ldrb	r3, [r3, #0]
 80076ba:	2b05      	cmp	r3, #5
 80076bc:	d103      	bne.n	80076c6 <HAL_DAC_ConvCpltCallbackCh1+0x6e>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80076be:	2100      	movs	r1, #0
 80076c0:	480a      	ldr	r0, [pc, #40]	; (80076ec <HAL_DAC_ConvCpltCallbackCh1+0x94>)
 80076c2:	f7f9 fa0f 	bl	8000ae4 <HAL_DAC_Stop_DMA>
	}
	}

}
 80076c6:	bf00      	nop
 80076c8:	3708      	adds	r7, #8
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}
 80076ce:	bf00      	nop
 80076d0:	2004ea2d 	.word	0x2004ea2d
 80076d4:	2004ea38 	.word	0x2004ea38
 80076d8:	20000030 	.word	0x20000030
 80076dc:	20000008 	.word	0x20000008
 80076e0:	2004ea30 	.word	0x2004ea30
 80076e4:	00027100 	.word	0x00027100
 80076e8:	20027928 	.word	0x20027928
 80076ec:	2000053c 	.word	0x2000053c

080076f0 <HAL_DFSDM_FilterRegConvCpltCallback>:


void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter ) {
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	6078      	str	r0, [r7, #4]

	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 80076f8:	4837      	ldr	r0, [pc, #220]	; (80077d8 <HAL_DFSDM_FilterRegConvCpltCallback+0xe8>)
 80076fa:	f7f9 fe79 	bl	80013f0 <HAL_DFSDM_FilterRegularStop_DMA>
	for(uint32_t i = 0 ; i < SEQUENCE_LENGTH; i++ ){
 80076fe:	2300      	movs	r3, #0
 8007700:	60fb      	str	r3, [r7, #12]
 8007702:	e02b      	b.n	800775c <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>
		SEQUENCE[i] = SEQUENCE[i] >> 8; // 24 bit signed  :  −8,388,608 : 8,388,607
 8007704:	4a35      	ldr	r2, [pc, #212]	; (80077dc <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800770c:	121a      	asrs	r2, r3, #8
 800770e:	4933      	ldr	r1, [pc, #204]	; (80077dc <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(SEQUENCE[i] < 0 ) {
 8007716:	4a31      	ldr	r2, [pc, #196]	; (80077dc <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800771e:	2b00      	cmp	r3, #0
 8007720:	da09      	bge.n	8007736 <HAL_DFSDM_FilterRegConvCpltCallback+0x46>
			SEQUENCE[i]= SEQUENCE[i]+ (1<<24);
 8007722:	4a2e      	ldr	r2, [pc, #184]	; (80077dc <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800772a:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 800772e:	492b      	ldr	r1, [pc, #172]	; (80077dc <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if( SEQUENCE[i] >= 4096) {
 8007736:	4a29      	ldr	r2, [pc, #164]	; (80077dc <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800773e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007742:	db08      	blt.n	8007756 <HAL_DFSDM_FilterRegConvCpltCallback+0x66>
			SEQUENCE[i] = SEQUENCE[i] >> 12;
 8007744:	4a25      	ldr	r2, [pc, #148]	; (80077dc <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800774c:	131a      	asrs	r2, r3, #12
 800774e:	4923      	ldr	r1, [pc, #140]	; (80077dc <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint32_t i = 0 ; i < SEQUENCE_LENGTH; i++ ){
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	3301      	adds	r3, #1
 800775a:	60fb      	str	r3, [r7, #12]
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8007762:	4293      	cmp	r3, r2
 8007764:	d9ce      	bls.n	8007704 <HAL_DFSDM_FilterRegConvCpltCallback+0x14>
		}
	}
	if(BSP_QSPI_Write((uint8_t *) SEQUENCE, (uint32_t) address[pushButtonCounter], sizeof(SEQUENCE)) != QSPI_OK){
 8007766:	4b1e      	ldr	r3, [pc, #120]	; (80077e0 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a1e      	ldr	r2, [pc, #120]	; (80077e4 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 800776c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007770:	4a1d      	ldr	r2, [pc, #116]	; (80077e8 <HAL_DFSDM_FilterRegConvCpltCallback+0xf8>)
 8007772:	4619      	mov	r1, r3
 8007774:	4819      	ldr	r0, [pc, #100]	; (80077dc <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8007776:	f000 f91b 	bl	80079b0 <BSP_QSPI_Write>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>
		Error_Handler();
 8007780:	f000 f83a 	bl	80077f8 <Error_Handler>
	}
	if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t) address[pushButtonCounter], sizeof(SEQUENCE)) != QSPI_OK){
 8007784:	4b16      	ldr	r3, [pc, #88]	; (80077e0 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a16      	ldr	r2, [pc, #88]	; (80077e4 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 800778a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800778e:	4a16      	ldr	r2, [pc, #88]	; (80077e8 <HAL_DFSDM_FilterRegConvCpltCallback+0xf8>)
 8007790:	4619      	mov	r1, r3
 8007792:	4816      	ldr	r0, [pc, #88]	; (80077ec <HAL_DFSDM_FilterRegConvCpltCallback+0xfc>)
 8007794:	f000 f8ba 	bl	800790c <BSP_QSPI_Read>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d001      	beq.n	80077a2 <HAL_DFSDM_FilterRegConvCpltCallback+0xb2>
		Error_Handler();
 800779e:	f000 f82b 	bl	80077f8 <Error_Handler>
	}
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 80077a2:	2300      	movs	r3, #0
 80077a4:	9300      	str	r3, [sp, #0]
 80077a6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80077aa:	4a10      	ldr	r2, [pc, #64]	; (80077ec <HAL_DFSDM_FilterRegConvCpltCallback+0xfc>)
 80077ac:	2100      	movs	r1, #0
 80077ae:	4810      	ldr	r0, [pc, #64]	; (80077f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x100>)
 80077b0:	f7f9 f8cc 	bl	800094c <HAL_DAC_Start_DMA>
	pushButtonCounter = (pushButtonCounter + 1) % 10;
 80077b4:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	1c59      	adds	r1, r3, #1
 80077ba:	4b0e      	ldr	r3, [pc, #56]	; (80077f4 <HAL_DFSDM_FilterRegConvCpltCallback+0x104>)
 80077bc:	fba3 2301 	umull	r2, r3, r3, r1
 80077c0:	08da      	lsrs	r2, r3, #3
 80077c2:	4613      	mov	r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	005b      	lsls	r3, r3, #1
 80077ca:	1aca      	subs	r2, r1, r3
 80077cc:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 80077ce:	601a      	str	r2, [r3, #0]

}
 80077d0:	bf00      	nop
 80077d2:	3710      	adds	r7, #16
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	200005b0 	.word	0x200005b0
 80077dc:	20000828 	.word	0x20000828
 80077e0:	2004ea28 	.word	0x2004ea28
 80077e4:	20000008 	.word	0x20000008
 80077e8:	00027100 	.word	0x00027100
 80077ec:	20027928 	.word	0x20027928
 80077f0:	2000053c 	.word	0x2000053c
 80077f4:	cccccccd 	.word	0xcccccccd

080077f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
 80077fc:	2200      	movs	r2, #0
 80077fe:	2108      	movs	r1, #8
 8007800:	4802      	ldr	r0, [pc, #8]	; (800780c <Error_Handler+0x14>)
 8007802:	f7fa fcf9 	bl	80021f8 <HAL_GPIO_WritePin>
	__BKPT();
 8007806:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 8007808:	bf00      	nop
 800780a:	bd80      	pop	{r7, pc}
 800780c:	48001000 	.word	0x48001000

08007810 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 8007816:	4b3b      	ldr	r3, [pc, #236]	; (8007904 <BSP_QSPI_Init+0xf4>)
 8007818:	4a3b      	ldr	r2, [pc, #236]	; (8007908 <BSP_QSPI_Init+0xf8>)
 800781a:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 800781c:	4839      	ldr	r0, [pc, #228]	; (8007904 <BSP_QSPI_Init+0xf4>)
 800781e:	f7fa fddf 	bl	80023e0 <HAL_OSPI_DeInit>
 8007822:	4603      	mov	r3, r0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d001      	beq.n	800782c <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e067      	b.n	80078fc <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 800782c:	f000 f990 	bl	8007b50 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8007830:	4b34      	ldr	r3, [pc, #208]	; (8007904 <BSP_QSPI_Init+0xf4>)
 8007832:	2204      	movs	r2, #4
 8007834:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8007836:	4b33      	ldr	r3, [pc, #204]	; (8007904 <BSP_QSPI_Init+0xf4>)
 8007838:	2200      	movs	r2, #0
 800783a:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800783c:	4b31      	ldr	r3, [pc, #196]	; (8007904 <BSP_QSPI_Init+0xf4>)
 800783e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007842:	60da      	str	r2, [r3, #12]
 8007844:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007848:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800784a:	68bb      	ldr	r3, [r7, #8]
 800784c:	fa93 f3a3 	rbit	r3, r3
 8007850:	607b      	str	r3, [r7, #4]
  return result;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d101      	bne.n	8007860 <BSP_QSPI_Init+0x50>
    return 32U;
 800785c:	2320      	movs	r3, #32
 800785e:	e003      	b.n	8007868 <BSP_QSPI_Init+0x58>
  return __builtin_clz(value);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	fab3 f383 	clz	r3, r3
 8007866:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8007868:	461a      	mov	r2, r3
 800786a:	4b26      	ldr	r3, [pc, #152]	; (8007904 <BSP_QSPI_Init+0xf4>)
 800786c:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 800786e:	4b25      	ldr	r3, [pc, #148]	; (8007904 <BSP_QSPI_Init+0xf4>)
 8007870:	2201      	movs	r2, #1
 8007872:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8007874:	4b23      	ldr	r3, [pc, #140]	; (8007904 <BSP_QSPI_Init+0xf4>)
 8007876:	2200      	movs	r2, #0
 8007878:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 800787a:	4b22      	ldr	r3, [pc, #136]	; (8007904 <BSP_QSPI_Init+0xf4>)
 800787c:	2200      	movs	r2, #0
 800787e:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8007880:	4b20      	ldr	r3, [pc, #128]	; (8007904 <BSP_QSPI_Init+0xf4>)
 8007882:	2204      	movs	r2, #4
 8007884:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8007886:	4b1f      	ldr	r3, [pc, #124]	; (8007904 <BSP_QSPI_Init+0xf4>)
 8007888:	2200      	movs	r2, #0
 800788a:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800788c:	4b1d      	ldr	r3, [pc, #116]	; (8007904 <BSP_QSPI_Init+0xf4>)
 800788e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007892:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8007894:	4b1b      	ldr	r3, [pc, #108]	; (8007904 <BSP_QSPI_Init+0xf4>)
 8007896:	2200      	movs	r2, #0
 8007898:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 800789a:	4b1a      	ldr	r3, [pc, #104]	; (8007904 <BSP_QSPI_Init+0xf4>)
 800789c:	2200      	movs	r2, #0
 800789e:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80078a0:	4818      	ldr	r0, [pc, #96]	; (8007904 <BSP_QSPI_Init+0xf4>)
 80078a2:	f7fa fcf3 	bl	800228c <HAL_OSPI_Init>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d001      	beq.n	80078b0 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	e025      	b.n	80078fc <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 80078b0:	4814      	ldr	r0, [pc, #80]	; (8007904 <BSP_QSPI_Init+0xf4>)
 80078b2:	f000 f98d 	bl	8007bd0 <QSPI_ResetMemory>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d001      	beq.n	80078c0 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 80078bc:	2304      	movs	r3, #4
 80078be:	e01d      	b.n	80078fc <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 80078c0:	2101      	movs	r1, #1
 80078c2:	4810      	ldr	r0, [pc, #64]	; (8007904 <BSP_QSPI_Init+0xf4>)
 80078c4:	f000 fa72 	bl	8007dac <QSPI_QuadMode>
 80078c8:	4603      	mov	r3, r0
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d001      	beq.n	80078d2 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 80078ce:	2301      	movs	r3, #1
 80078d0:	e014      	b.n	80078fc <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80078d2:	2101      	movs	r1, #1
 80078d4:	480b      	ldr	r0, [pc, #44]	; (8007904 <BSP_QSPI_Init+0xf4>)
 80078d6:	f000 fb15 	bl	8007f04 <QSPI_HighPerfMode>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e00b      	b.n	80078fc <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 80078e4:	4b07      	ldr	r3, [pc, #28]	; (8007904 <BSP_QSPI_Init+0xf4>)
 80078e6:	2202      	movs	r2, #2
 80078e8:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80078ea:	4806      	ldr	r0, [pc, #24]	; (8007904 <BSP_QSPI_Init+0xf4>)
 80078ec:	f7fa fcce 	bl	800228c <HAL_OSPI_Init>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e000      	b.n	80078fc <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	2004eac8 	.word	0x2004eac8
 8007908:	a0001000 	.word	0xa0001000

0800790c <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b098      	sub	sp, #96	; 0x60
 8007910:	af00      	add	r7, sp, #0
 8007912:	60f8      	str	r0, [r7, #12]
 8007914:	60b9      	str	r1, [r7, #8]
 8007916:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007918:	2300      	movs	r3, #0
 800791a:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 800791c:	2300      	movs	r3, #0
 800791e:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 8007920:	23eb      	movs	r3, #235	; 0xeb
 8007922:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 8007924:	2301      	movs	r3, #1
 8007926:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8007928:	2300      	movs	r3, #0
 800792a:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800792c:	2300      	movs	r3, #0
 800792e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8007934:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007938:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 800793a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800793e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007940:	2300      	movs	r3, #0
 8007942:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8007944:	23aa      	movs	r3, #170	; 0xaa
 8007946:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8007948:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800794c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 800794e:	2300      	movs	r3, #0
 8007950:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 8007952:	2300      	movs	r3, #0
 8007954:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 8007956:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800795a:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8007960:	2300      	movs	r3, #0
 8007962:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8007964:	2304      	movs	r3, #4
 8007966:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8007968:	2300      	movs	r3, #0
 800796a:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800796c:	2300      	movs	r3, #0
 800796e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007970:	f107 0310 	add.w	r3, r7, #16
 8007974:	f241 3288 	movw	r2, #5000	; 0x1388
 8007978:	4619      	mov	r1, r3
 800797a:	480c      	ldr	r0, [pc, #48]	; (80079ac <BSP_QSPI_Read+0xa0>)
 800797c:	f7fa fd57 	bl	800242e <HAL_OSPI_Command>
 8007980:	4603      	mov	r3, r0
 8007982:	2b00      	cmp	r3, #0
 8007984:	d001      	beq.n	800798a <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e00b      	b.n	80079a2 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800798a:	f241 3288 	movw	r2, #5000	; 0x1388
 800798e:	68f9      	ldr	r1, [r7, #12]
 8007990:	4806      	ldr	r0, [pc, #24]	; (80079ac <BSP_QSPI_Read+0xa0>)
 8007992:	f7fa fe40 	bl	8002616 <HAL_OSPI_Receive>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d001      	beq.n	80079a0 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 800799c:	2301      	movs	r3, #1
 800799e:	e000      	b.n	80079a2 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 80079a0:	2300      	movs	r3, #0
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3760      	adds	r7, #96	; 0x60
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	2004eac8 	.word	0x2004eac8

080079b0 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b09c      	sub	sp, #112	; 0x70
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	60f8      	str	r0, [r7, #12]
 80079b8:	60b9      	str	r1, [r7, #8]
 80079ba:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80079c4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80079c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d901      	bls.n	80079d2 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 80079d6:	68ba      	ldr	r2, [r7, #8]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4413      	add	r3, r2
 80079dc:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80079de:	2300      	movs	r3, #0
 80079e0:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80079e2:	2300      	movs	r3, #0
 80079e4:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 80079e6:	2338      	movs	r3, #56	; 0x38
 80079e8:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80079ea:	2301      	movs	r3, #1
 80079ec:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80079ee:	2300      	movs	r3, #0
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80079f2:	2300      	movs	r3, #0
 80079f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 80079f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80079fa:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80079fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a00:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007a02:	2300      	movs	r3, #0
 8007a04:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007a06:	2300      	movs	r3, #0
 8007a08:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8007a0a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8007a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8007a10:	2300      	movs	r3, #0
 8007a12:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 8007a14:	2300      	movs	r3, #0
 8007a16:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8007a20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a22:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 8007a24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a26:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8007a28:	4823      	ldr	r0, [pc, #140]	; (8007ab8 <BSP_QSPI_Write+0x108>)
 8007a2a:	f000 f918 	bl	8007c5e <QSPI_WriteEnable>
 8007a2e:	4603      	mov	r3, r0
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d001      	beq.n	8007a38 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e03b      	b.n	8007ab0 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a38:	f107 0314 	add.w	r3, r7, #20
 8007a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a40:	4619      	mov	r1, r3
 8007a42:	481d      	ldr	r0, [pc, #116]	; (8007ab8 <BSP_QSPI_Write+0x108>)
 8007a44:	f7fa fcf3 	bl	800242e <HAL_OSPI_Command>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d001      	beq.n	8007a52 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 8007a4e:	2301      	movs	r3, #1
 8007a50:	e02e      	b.n	8007ab0 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a56:	68f9      	ldr	r1, [r7, #12]
 8007a58:	4817      	ldr	r0, [pc, #92]	; (8007ab8 <BSP_QSPI_Write+0x108>)
 8007a5a:	f7fa fd69 	bl	8002530 <HAL_OSPI_Transmit>
 8007a5e:	4603      	mov	r3, r0
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d001      	beq.n	8007a68 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8007a64:	2301      	movs	r3, #1
 8007a66:	e023      	b.n	8007ab0 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007a68:	f241 3188 	movw	r1, #5000	; 0x1388
 8007a6c:	4812      	ldr	r0, [pc, #72]	; (8007ab8 <BSP_QSPI_Write+0x108>)
 8007a6e:	f000 f952 	bl	8007d16 <QSPI_AutoPollingMemReady>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 8007a78:	2301      	movs	r3, #1
 8007a7a:	e019      	b.n	8007ab0 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8007a7c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a7e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a80:	4413      	add	r3, r2
 8007a82:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 8007a84:	68fa      	ldr	r2, [r7, #12]
 8007a86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a88:	4413      	add	r3, r2
 8007a8a:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8007a8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a8e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007a92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a94:	429a      	cmp	r2, r3
 8007a96:	d203      	bcs.n	8007aa0 <BSP_QSPI_Write+0xf0>
 8007a98:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007a9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a9c:	1ad3      	subs	r3, r2, r3
 8007a9e:	e001      	b.n	8007aa4 <BSP_QSPI_Write+0xf4>
 8007aa0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007aa4:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 8007aa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007aa8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007aaa:	429a      	cmp	r2, r3
 8007aac:	d3b8      	bcc.n	8007a20 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3770      	adds	r7, #112	; 0x70
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	bd80      	pop	{r7, pc}
 8007ab8:	2004eac8 	.word	0x2004eac8

08007abc <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b096      	sub	sp, #88	; 0x58
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007ac8:	2300      	movs	r3, #0
 8007aca:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 8007acc:	23d8      	movs	r3, #216	; 0xd8
 8007ace:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007ad0:	2301      	movs	r3, #1
 8007ad2:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8007ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ae4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8007ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007aea:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007aec:	2300      	movs	r3, #0
 8007aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007af0:	2300      	movs	r3, #0
 8007af2:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8007af4:	2300      	movs	r3, #0
 8007af6:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8007af8:	2300      	movs	r3, #0
 8007afa:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007afc:	2300      	movs	r3, #0
 8007afe:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007b00:	2300      	movs	r3, #0
 8007b02:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8007b04:	4811      	ldr	r0, [pc, #68]	; (8007b4c <BSP_QSPI_Erase_Block+0x90>)
 8007b06:	f000 f8aa 	bl	8007c5e <QSPI_WriteEnable>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e017      	b.n	8007b44 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007b14:	f107 0308 	add.w	r3, r7, #8
 8007b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	480b      	ldr	r0, [pc, #44]	; (8007b4c <BSP_QSPI_Erase_Block+0x90>)
 8007b20:	f7fa fc85 	bl	800242e <HAL_OSPI_Command>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e00a      	b.n	8007b44 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8007b2e:	f640 51ac 	movw	r1, #3500	; 0xdac
 8007b32:	4806      	ldr	r0, [pc, #24]	; (8007b4c <BSP_QSPI_Erase_Block+0x90>)
 8007b34:	f000 f8ef 	bl	8007d16 <QSPI_AutoPollingMemReady>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e000      	b.n	8007b44 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3758      	adds	r7, #88	; 0x58
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}
 8007b4c:	2004eac8 	.word	0x2004eac8

08007b50 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8007b50:	b580      	push	{r7, lr}
 8007b52:	b088      	sub	sp, #32
 8007b54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 8007b56:	4b1c      	ldr	r3, [pc, #112]	; (8007bc8 <BSP_QSPI_MspInit+0x78>)
 8007b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b5a:	4a1b      	ldr	r2, [pc, #108]	; (8007bc8 <BSP_QSPI_MspInit+0x78>)
 8007b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b60:	6513      	str	r3, [r2, #80]	; 0x50
 8007b62:	4b19      	ldr	r3, [pc, #100]	; (8007bc8 <BSP_QSPI_MspInit+0x78>)
 8007b64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b6a:	60bb      	str	r3, [r7, #8]
 8007b6c:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8007b6e:	4b16      	ldr	r3, [pc, #88]	; (8007bc8 <BSP_QSPI_MspInit+0x78>)
 8007b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b72:	4a15      	ldr	r2, [pc, #84]	; (8007bc8 <BSP_QSPI_MspInit+0x78>)
 8007b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b78:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 8007b7a:	4b13      	ldr	r3, [pc, #76]	; (8007bc8 <BSP_QSPI_MspInit+0x78>)
 8007b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b7e:	4a12      	ldr	r2, [pc, #72]	; (8007bc8 <BSP_QSPI_MspInit+0x78>)
 8007b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b84:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007b86:	4b10      	ldr	r3, [pc, #64]	; (8007bc8 <BSP_QSPI_MspInit+0x78>)
 8007b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b8a:	4a0f      	ldr	r2, [pc, #60]	; (8007bc8 <BSP_QSPI_MspInit+0x78>)
 8007b8c:	f043 0310 	orr.w	r3, r3, #16
 8007b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b92:	4b0d      	ldr	r3, [pc, #52]	; (8007bc8 <BSP_QSPI_MspInit+0x78>)
 8007b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b96:	f003 0310 	and.w	r3, r3, #16
 8007b9a:	607b      	str	r3, [r7, #4]
 8007b9c:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8007b9e:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8007ba2:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bac:	2303      	movs	r3, #3
 8007bae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8007bb0:	230a      	movs	r3, #10
 8007bb2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007bb4:	f107 030c 	add.w	r3, r7, #12
 8007bb8:	4619      	mov	r1, r3
 8007bba:	4804      	ldr	r0, [pc, #16]	; (8007bcc <BSP_QSPI_MspInit+0x7c>)
 8007bbc:	f7fa f898 	bl	8001cf0 <HAL_GPIO_Init>
}
 8007bc0:	bf00      	nop
 8007bc2:	3720      	adds	r7, #32
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}
 8007bc8:	40021000 	.word	0x40021000
 8007bcc:	48001000 	.word	0x48001000

08007bd0 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8007bd0:	b580      	push	{r7, lr}
 8007bd2:	b096      	sub	sp, #88	; 0x58
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007bdc:	2300      	movs	r3, #0
 8007bde:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8007be0:	2366      	movs	r3, #102	; 0x66
 8007be2:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007be4:	2301      	movs	r3, #1
 8007be6:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007be8:	2300      	movs	r3, #0
 8007bea:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007bec:	2300      	movs	r3, #0
 8007bee:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007c00:	2300      	movs	r3, #0
 8007c02:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007c04:	2300      	movs	r3, #0
 8007c06:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c08:	f107 0308 	add.w	r3, r7, #8
 8007c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7fa fc0b 	bl	800242e <HAL_OSPI_Command>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e019      	b.n	8007c56 <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8007c22:	2399      	movs	r3, #153	; 0x99
 8007c24:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c26:	f107 0308 	add.w	r3, r7, #8
 8007c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c2e:	4619      	mov	r1, r3
 8007c30:	6878      	ldr	r0, [r7, #4]
 8007c32:	f7fa fbfc 	bl	800242e <HAL_OSPI_Command>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d001      	beq.n	8007c40 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e00a      	b.n	8007c56 <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007c40:	f241 3188 	movw	r1, #5000	; 0x1388
 8007c44:	6878      	ldr	r0, [r7, #4]
 8007c46:	f000 f866 	bl	8007d16 <QSPI_AutoPollingMemReady>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d001      	beq.n	8007c54 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8007c50:	2301      	movs	r3, #1
 8007c52:	e000      	b.n	8007c56 <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 8007c54:	2300      	movs	r3, #0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3758      	adds	r7, #88	; 0x58
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b09c      	sub	sp, #112	; 0x70
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007c66:	2300      	movs	r3, #0
 8007c68:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007c6a:	2300      	movs	r3, #0
 8007c6c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8007c6e:	2306      	movs	r3, #6
 8007c70:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007c72:	2301      	movs	r3, #1
 8007c74:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007c76:	2300      	movs	r3, #0
 8007c78:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007c82:	2300      	movs	r3, #0
 8007c84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8007c86:	2300      	movs	r3, #0
 8007c88:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007c8e:	2300      	movs	r3, #0
 8007c90:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007c92:	2300      	movs	r3, #0
 8007c94:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c96:	f107 0320 	add.w	r3, r7, #32
 8007c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7fa fbc4 	bl	800242e <HAL_OSPI_Command>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d001      	beq.n	8007cb0 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e02e      	b.n	8007d0e <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8007cb0:	2302      	movs	r3, #2
 8007cb2:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8007cb8:	2300      	movs	r3, #0
 8007cba:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8007cbc:	2310      	movs	r3, #16
 8007cbe:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8007cc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007cc4:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 8007cc6:	2305      	movs	r3, #5
 8007cc8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 8007cca:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007cce:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007cd8:	f107 0320 	add.w	r3, r7, #32
 8007cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ce0:	4619      	mov	r1, r3
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7fa fba3 	bl	800242e <HAL_OSPI_Command>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d001      	beq.n	8007cf2 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 8007cee:	2301      	movs	r3, #1
 8007cf0:	e00d      	b.n	8007d0e <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007cf2:	f107 030c 	add.w	r3, r7, #12
 8007cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cfa:	4619      	mov	r1, r3
 8007cfc:	6878      	ldr	r0, [r7, #4]
 8007cfe:	f7fa fd2d 	bl	800275c <HAL_OSPI_AutoPolling>
 8007d02:	4603      	mov	r3, r0
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d001      	beq.n	8007d0c <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 8007d08:	2301      	movs	r3, #1
 8007d0a:	e000      	b.n	8007d0e <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 8007d0c:	2300      	movs	r3, #0
}
 8007d0e:	4618      	mov	r0, r3
 8007d10:	3770      	adds	r7, #112	; 0x70
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}

08007d16 <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8007d16:	b580      	push	{r7, lr}
 8007d18:	b09c      	sub	sp, #112	; 0x70
 8007d1a:	af00      	add	r7, sp, #0
 8007d1c:	6078      	str	r0, [r7, #4]
 8007d1e:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007d20:	2300      	movs	r3, #0
 8007d22:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007d24:	2300      	movs	r3, #0
 8007d26:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8007d28:	2305      	movs	r3, #5
 8007d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007d30:	2300      	movs	r3, #0
 8007d32:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007d34:	2300      	movs	r3, #0
 8007d36:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007d38:	2300      	movs	r3, #0
 8007d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8007d40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007d44:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 8007d46:	2301      	movs	r3, #1
 8007d48:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8007d4e:	2300      	movs	r3, #0
 8007d50:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007d52:	2300      	movs	r3, #0
 8007d54:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007d56:	2300      	movs	r3, #0
 8007d58:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8007d5e:	2301      	movs	r3, #1
 8007d60:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8007d62:	2300      	movs	r3, #0
 8007d64:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8007d66:	2310      	movs	r3, #16
 8007d68:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8007d6a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007d6e:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007d70:	f107 0320 	add.w	r3, r7, #32
 8007d74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d78:	4619      	mov	r1, r3
 8007d7a:	6878      	ldr	r0, [r7, #4]
 8007d7c:	f7fa fb57 	bl	800242e <HAL_OSPI_Command>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d001      	beq.n	8007d8a <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	e00c      	b.n	8007da4 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 8007d8a:	f107 030c 	add.w	r3, r7, #12
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	4619      	mov	r1, r3
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f7fa fce2 	bl	800275c <HAL_OSPI_AutoPolling>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e000      	b.n	8007da4 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8007da2:	2300      	movs	r3, #0
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3770      	adds	r7, #112	; 0x70
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b098      	sub	sp, #96	; 0x60
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
 8007db4:	460b      	mov	r3, r1
 8007db6:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007db8:	2300      	movs	r3, #0
 8007dba:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8007dc0:	2305      	movs	r3, #5
 8007dc2:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007dc8:	2300      	movs	r3, #0
 8007dca:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007dcc:	2300      	movs	r3, #0
 8007dce:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007dd4:	2300      	movs	r3, #0
 8007dd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8007dd8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ddc:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8007dde:	2300      	movs	r3, #0
 8007de0:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8007de2:	2300      	movs	r3, #0
 8007de4:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8007de6:	2301      	movs	r3, #1
 8007de8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007dea:	2300      	movs	r3, #0
 8007dec:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007dee:	2300      	movs	r3, #0
 8007df0:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007df2:	f107 0310 	add.w	r3, r7, #16
 8007df6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dfa:	4619      	mov	r1, r3
 8007dfc:	6878      	ldr	r0, [r7, #4]
 8007dfe:	f7fa fb16 	bl	800242e <HAL_OSPI_Command>
 8007e02:	4603      	mov	r3, r0
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d001      	beq.n	8007e0c <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8007e08:	2301      	movs	r3, #1
 8007e0a:	e077      	b.n	8007efc <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007e0c:	f107 030f 	add.w	r3, r7, #15
 8007e10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7fa fbfd 	bl	8002616 <HAL_OSPI_Receive>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e06a      	b.n	8007efc <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f7ff ff19 	bl	8007c5e <QSPI_WriteEnable>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d001      	beq.n	8007e36 <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8007e32:	2301      	movs	r3, #1
 8007e34:	e062      	b.n	8007efc <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8007e36:	78fb      	ldrb	r3, [r7, #3]
 8007e38:	2b01      	cmp	r3, #1
 8007e3a:	d105      	bne.n	8007e48 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e42:	b2db      	uxtb	r3, r3
 8007e44:	73fb      	strb	r3, [r7, #15]
 8007e46:	e004      	b.n	8007e52 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8007e52:	2301      	movs	r3, #1
 8007e54:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007e56:	f107 0310 	add.w	r3, r7, #16
 8007e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f7fa fae4 	bl	800242e <HAL_OSPI_Command>
 8007e66:	4603      	mov	r3, r0
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d001      	beq.n	8007e70 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e045      	b.n	8007efc <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007e70:	f107 030f 	add.w	r3, r7, #15
 8007e74:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e78:	4619      	mov	r1, r3
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7fa fb58 	bl	8002530 <HAL_OSPI_Transmit>
 8007e80:	4603      	mov	r3, r0
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d001      	beq.n	8007e8a <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e038      	b.n	8007efc <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007e8a:	f241 3188 	movw	r1, #5000	; 0x1388
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f7ff ff41 	bl	8007d16 <QSPI_AutoPollingMemReady>
 8007e94:	4603      	mov	r3, r0
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d001      	beq.n	8007e9e <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 8007e9a:	2301      	movs	r3, #1
 8007e9c:	e02e      	b.n	8007efc <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8007e9e:	2305      	movs	r3, #5
 8007ea0:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007ea2:	f107 0310 	add.w	r3, r7, #16
 8007ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7fa fabe 	bl	800242e <HAL_OSPI_Command>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d001      	beq.n	8007ebc <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e01f      	b.n	8007efc <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007ebc:	f107 030f 	add.w	r3, r7, #15
 8007ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7fa fba5 	bl	8002616 <HAL_OSPI_Receive>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d001      	beq.n	8007ed6 <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8007ed2:	2301      	movs	r3, #1
 8007ed4:	e012      	b.n	8007efc <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8007ed6:	7bfb      	ldrb	r3, [r7, #15]
 8007ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d102      	bne.n	8007ee6 <QSPI_QuadMode+0x13a>
 8007ee0:	78fb      	ldrb	r3, [r7, #3]
 8007ee2:	2b01      	cmp	r3, #1
 8007ee4:	d007      	beq.n	8007ef6 <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8007ee6:	7bfb      	ldrb	r3, [r7, #15]
 8007ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d004      	beq.n	8007efa <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8007ef0:	78fb      	ldrb	r3, [r7, #3]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d101      	bne.n	8007efa <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	e000      	b.n	8007efc <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8007efa:	2300      	movs	r3, #0
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3760      	adds	r7, #96	; 0x60
 8007f00:	46bd      	mov	sp, r7
 8007f02:	bd80      	pop	{r7, pc}

08007f04 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b098      	sub	sp, #96	; 0x60
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007f10:	2300      	movs	r3, #0
 8007f12:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007f14:	2300      	movs	r3, #0
 8007f16:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8007f18:	2305      	movs	r3, #5
 8007f1a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007f20:	2300      	movs	r3, #0
 8007f22:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007f24:	2300      	movs	r3, #0
 8007f26:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007f28:	2300      	movs	r3, #0
 8007f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8007f30:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007f34:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8007f36:	2300      	movs	r3, #0
 8007f38:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007f42:	2300      	movs	r3, #0
 8007f44:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007f46:	2300      	movs	r3, #0
 8007f48:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007f4a:	f107 0310 	add.w	r3, r7, #16
 8007f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f7fa fa6a 	bl	800242e <HAL_OSPI_Command>
 8007f5a:	4603      	mov	r3, r0
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d001      	beq.n	8007f64 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8007f60:	2301      	movs	r3, #1
 8007f62:	e09a      	b.n	800809a <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007f64:	f107 030c 	add.w	r3, r7, #12
 8007f68:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f6c:	4619      	mov	r1, r3
 8007f6e:	6878      	ldr	r0, [r7, #4]
 8007f70:	f7fa fb51 	bl	8002616 <HAL_OSPI_Receive>
 8007f74:	4603      	mov	r3, r0
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d001      	beq.n	8007f7e <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e08d      	b.n	800809a <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8007f7e:	2315      	movs	r3, #21
 8007f80:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8007f82:	2302      	movs	r3, #2
 8007f84:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007f86:	f107 0310 	add.w	r3, r7, #16
 8007f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f8e:	4619      	mov	r1, r3
 8007f90:	6878      	ldr	r0, [r7, #4]
 8007f92:	f7fa fa4c 	bl	800242e <HAL_OSPI_Command>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d001      	beq.n	8007fa0 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8007f9c:	2301      	movs	r3, #1
 8007f9e:	e07c      	b.n	800809a <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007fa0:	f107 030c 	add.w	r3, r7, #12
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007faa:	4619      	mov	r1, r3
 8007fac:	6878      	ldr	r0, [r7, #4]
 8007fae:	f7fa fb32 	bl	8002616 <HAL_OSPI_Receive>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d001      	beq.n	8007fbc <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8007fb8:	2301      	movs	r3, #1
 8007fba:	e06e      	b.n	800809a <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8007fbc:	6878      	ldr	r0, [r7, #4]
 8007fbe:	f7ff fe4e 	bl	8007c5e <QSPI_WriteEnable>
 8007fc2:	4603      	mov	r3, r0
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d001      	beq.n	8007fcc <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8007fc8:	2301      	movs	r3, #1
 8007fca:	e066      	b.n	800809a <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8007fcc:	78fb      	ldrb	r3, [r7, #3]
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d105      	bne.n	8007fde <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8007fd2:	7bbb      	ldrb	r3, [r7, #14]
 8007fd4:	f043 0302 	orr.w	r3, r3, #2
 8007fd8:	b2db      	uxtb	r3, r3
 8007fda:	73bb      	strb	r3, [r7, #14]
 8007fdc:	e004      	b.n	8007fe8 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8007fde:	7bbb      	ldrb	r3, [r7, #14]
 8007fe0:	f023 0302 	bic.w	r3, r3, #2
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8007fec:	2303      	movs	r3, #3
 8007fee:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007ff0:	f107 0310 	add.w	r3, r7, #16
 8007ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7fa fa17 	bl	800242e <HAL_OSPI_Command>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e047      	b.n	800809a <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800800a:	f107 030c 	add.w	r3, r7, #12
 800800e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008012:	4619      	mov	r1, r3
 8008014:	6878      	ldr	r0, [r7, #4]
 8008016:	f7fa fa8b 	bl	8002530 <HAL_OSPI_Transmit>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e03a      	b.n	800809a <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8008024:	f241 3188 	movw	r1, #5000	; 0x1388
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff fe74 	bl	8007d16 <QSPI_AutoPollingMemReady>
 800802e:	4603      	mov	r3, r0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d001      	beq.n	8008038 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e030      	b.n	800809a <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8008038:	2315      	movs	r3, #21
 800803a:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 800803c:	2302      	movs	r3, #2
 800803e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008040:	f107 0310 	add.w	r3, r7, #16
 8008044:	f241 3288 	movw	r2, #5000	; 0x1388
 8008048:	4619      	mov	r1, r3
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f7fa f9ef 	bl	800242e <HAL_OSPI_Command>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e01f      	b.n	800809a <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800805a:	f107 030c 	add.w	r3, r7, #12
 800805e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f7fa fad6 	bl	8002616 <HAL_OSPI_Receive>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d001      	beq.n	8008074 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8008070:	2301      	movs	r3, #1
 8008072:	e012      	b.n	800809a <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8008074:	7b7b      	ldrb	r3, [r7, #13]
 8008076:	f003 0302 	and.w	r3, r3, #2
 800807a:	2b00      	cmp	r3, #0
 800807c:	d102      	bne.n	8008084 <QSPI_HighPerfMode+0x180>
 800807e:	78fb      	ldrb	r3, [r7, #3]
 8008080:	2b01      	cmp	r3, #1
 8008082:	d007      	beq.n	8008094 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8008084:	7b7b      	ldrb	r3, [r7, #13]
 8008086:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800808a:	2b00      	cmp	r3, #0
 800808c:	d004      	beq.n	8008098 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800808e:	78fb      	ldrb	r3, [r7, #3]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d101      	bne.n	8008098 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8008094:	2301      	movs	r3, #1
 8008096:	e000      	b.n	800809a <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3760      	adds	r7, #96	; 0x60
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}
	...

080080a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80080a4:	b480      	push	{r7}
 80080a6:	b083      	sub	sp, #12
 80080a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80080aa:	4b0f      	ldr	r3, [pc, #60]	; (80080e8 <HAL_MspInit+0x44>)
 80080ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ae:	4a0e      	ldr	r2, [pc, #56]	; (80080e8 <HAL_MspInit+0x44>)
 80080b0:	f043 0301 	orr.w	r3, r3, #1
 80080b4:	6613      	str	r3, [r2, #96]	; 0x60
 80080b6:	4b0c      	ldr	r3, [pc, #48]	; (80080e8 <HAL_MspInit+0x44>)
 80080b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	607b      	str	r3, [r7, #4]
 80080c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80080c2:	4b09      	ldr	r3, [pc, #36]	; (80080e8 <HAL_MspInit+0x44>)
 80080c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080c6:	4a08      	ldr	r2, [pc, #32]	; (80080e8 <HAL_MspInit+0x44>)
 80080c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080cc:	6593      	str	r3, [r2, #88]	; 0x58
 80080ce:	4b06      	ldr	r3, [pc, #24]	; (80080e8 <HAL_MspInit+0x44>)
 80080d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080d6:	603b      	str	r3, [r7, #0]
 80080d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080da:	bf00      	nop
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr
 80080e6:	bf00      	nop
 80080e8:	40021000 	.word	0x40021000

080080ec <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b08a      	sub	sp, #40	; 0x28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080f4:	f107 0314 	add.w	r3, r7, #20
 80080f8:	2200      	movs	r2, #0
 80080fa:	601a      	str	r2, [r3, #0]
 80080fc:	605a      	str	r2, [r3, #4]
 80080fe:	609a      	str	r2, [r3, #8]
 8008100:	60da      	str	r2, [r3, #12]
 8008102:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a2b      	ldr	r2, [pc, #172]	; (80081b8 <HAL_DAC_MspInit+0xcc>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d14f      	bne.n	80081ae <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800810e:	4b2b      	ldr	r3, [pc, #172]	; (80081bc <HAL_DAC_MspInit+0xd0>)
 8008110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008112:	4a2a      	ldr	r2, [pc, #168]	; (80081bc <HAL_DAC_MspInit+0xd0>)
 8008114:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008118:	6593      	str	r3, [r2, #88]	; 0x58
 800811a:	4b28      	ldr	r3, [pc, #160]	; (80081bc <HAL_DAC_MspInit+0xd0>)
 800811c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800811e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008122:	613b      	str	r3, [r7, #16]
 8008124:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008126:	4b25      	ldr	r3, [pc, #148]	; (80081bc <HAL_DAC_MspInit+0xd0>)
 8008128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800812a:	4a24      	ldr	r2, [pc, #144]	; (80081bc <HAL_DAC_MspInit+0xd0>)
 800812c:	f043 0301 	orr.w	r3, r3, #1
 8008130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008132:	4b22      	ldr	r3, [pc, #136]	; (80081bc <HAL_DAC_MspInit+0xd0>)
 8008134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	60fb      	str	r3, [r7, #12]
 800813c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800813e:	2310      	movs	r3, #16
 8008140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008142:	2303      	movs	r3, #3
 8008144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008146:	2300      	movs	r3, #0
 8008148:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800814a:	f107 0314 	add.w	r3, r7, #20
 800814e:	4619      	mov	r1, r3
 8008150:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008154:	f7f9 fdcc 	bl	8001cf0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8008158:	4b19      	ldr	r3, [pc, #100]	; (80081c0 <HAL_DAC_MspInit+0xd4>)
 800815a:	4a1a      	ldr	r2, [pc, #104]	; (80081c4 <HAL_DAC_MspInit+0xd8>)
 800815c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800815e:	4b18      	ldr	r3, [pc, #96]	; (80081c0 <HAL_DAC_MspInit+0xd4>)
 8008160:	2206      	movs	r2, #6
 8008162:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008164:	4b16      	ldr	r3, [pc, #88]	; (80081c0 <HAL_DAC_MspInit+0xd4>)
 8008166:	2210      	movs	r2, #16
 8008168:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800816a:	4b15      	ldr	r3, [pc, #84]	; (80081c0 <HAL_DAC_MspInit+0xd4>)
 800816c:	2200      	movs	r2, #0
 800816e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008170:	4b13      	ldr	r3, [pc, #76]	; (80081c0 <HAL_DAC_MspInit+0xd4>)
 8008172:	2280      	movs	r2, #128	; 0x80
 8008174:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008176:	4b12      	ldr	r3, [pc, #72]	; (80081c0 <HAL_DAC_MspInit+0xd4>)
 8008178:	f44f 7200 	mov.w	r2, #512	; 0x200
 800817c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800817e:	4b10      	ldr	r3, [pc, #64]	; (80081c0 <HAL_DAC_MspInit+0xd4>)
 8008180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008184:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8008186:	4b0e      	ldr	r3, [pc, #56]	; (80081c0 <HAL_DAC_MspInit+0xd4>)
 8008188:	2200      	movs	r2, #0
 800818a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800818c:	4b0c      	ldr	r3, [pc, #48]	; (80081c0 <HAL_DAC_MspInit+0xd4>)
 800818e:	2200      	movs	r2, #0
 8008190:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8008192:	480b      	ldr	r0, [pc, #44]	; (80081c0 <HAL_DAC_MspInit+0xd4>)
 8008194:	f7f9 fa7e 	bl	8001694 <HAL_DMA_Init>
 8008198:	4603      	mov	r3, r0
 800819a:	2b00      	cmp	r3, #0
 800819c:	d001      	beq.n	80081a2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800819e:	f7ff fb2b 	bl	80077f8 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a06      	ldr	r2, [pc, #24]	; (80081c0 <HAL_DAC_MspInit+0xd4>)
 80081a6:	609a      	str	r2, [r3, #8]
 80081a8:	4a05      	ldr	r2, [pc, #20]	; (80081c0 <HAL_DAC_MspInit+0xd4>)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80081ae:	bf00      	nop
 80081b0:	3728      	adds	r7, #40	; 0x28
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}
 80081b6:	bf00      	nop
 80081b8:	40007400 	.word	0x40007400
 80081bc:	40021000 	.word	0x40021000
 80081c0:	20000550 	.word	0x20000550
 80081c4:	40020008 	.word	0x40020008

080081c8 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b0ae      	sub	sp, #184	; 0xb8
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80081d4:	2200      	movs	r2, #0
 80081d6:	601a      	str	r2, [r3, #0]
 80081d8:	605a      	str	r2, [r3, #4]
 80081da:	609a      	str	r2, [r3, #8]
 80081dc:	60da      	str	r2, [r3, #12]
 80081de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80081e0:	f107 0310 	add.w	r3, r7, #16
 80081e4:	2294      	movs	r2, #148	; 0x94
 80081e6:	2100      	movs	r1, #0
 80081e8:	4618      	mov	r0, r3
 80081ea:	f000 fb4f 	bl	800888c <memset>
  if(DFSDM1_Init == 0)
 80081ee:	4b45      	ldr	r3, [pc, #276]	; (8008304 <HAL_DFSDM_FilterMspInit+0x13c>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d14b      	bne.n	800828e <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80081f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80081fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008202:	f107 0310 	add.w	r3, r7, #16
 8008206:	4618      	mov	r0, r3
 8008208:	f7fc f858 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 800820c:	4603      	mov	r3, r0
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8008212:	f7ff faf1 	bl	80077f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8008216:	4b3c      	ldr	r3, [pc, #240]	; (8008308 <HAL_DFSDM_FilterMspInit+0x140>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	3301      	adds	r3, #1
 800821c:	4a3a      	ldr	r2, [pc, #232]	; (8008308 <HAL_DFSDM_FilterMspInit+0x140>)
 800821e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8008220:	4b39      	ldr	r3, [pc, #228]	; (8008308 <HAL_DFSDM_FilterMspInit+0x140>)
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d10b      	bne.n	8008240 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8008228:	4b38      	ldr	r3, [pc, #224]	; (800830c <HAL_DFSDM_FilterMspInit+0x144>)
 800822a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800822c:	4a37      	ldr	r2, [pc, #220]	; (800830c <HAL_DFSDM_FilterMspInit+0x144>)
 800822e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008232:	6613      	str	r3, [r2, #96]	; 0x60
 8008234:	4b35      	ldr	r3, [pc, #212]	; (800830c <HAL_DFSDM_FilterMspInit+0x144>)
 8008236:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008238:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800823c:	60fb      	str	r3, [r7, #12]
 800823e:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008240:	4b32      	ldr	r3, [pc, #200]	; (800830c <HAL_DFSDM_FilterMspInit+0x144>)
 8008242:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008244:	4a31      	ldr	r2, [pc, #196]	; (800830c <HAL_DFSDM_FilterMspInit+0x144>)
 8008246:	f043 0310 	orr.w	r3, r3, #16
 800824a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800824c:	4b2f      	ldr	r3, [pc, #188]	; (800830c <HAL_DFSDM_FilterMspInit+0x144>)
 800824e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008250:	f003 0310 	and.w	r3, r3, #16
 8008254:	60bb      	str	r3, [r7, #8]
 8008256:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8008258:	f44f 7320 	mov.w	r3, #640	; 0x280
 800825c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008260:	2302      	movs	r3, #2
 8008262:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008266:	2300      	movs	r3, #0
 8008268:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800826c:	2300      	movs	r3, #0
 800826e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8008272:	2306      	movs	r3, #6
 8008274:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008278:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800827c:	4619      	mov	r1, r3
 800827e:	4824      	ldr	r0, [pc, #144]	; (8008310 <HAL_DFSDM_FilterMspInit+0x148>)
 8008280:	f7f9 fd36 	bl	8001cf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8008284:	4b1f      	ldr	r3, [pc, #124]	; (8008304 <HAL_DFSDM_FilterMspInit+0x13c>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	3301      	adds	r3, #1
 800828a:	4a1e      	ldr	r2, [pc, #120]	; (8008304 <HAL_DFSDM_FilterMspInit+0x13c>)
 800828c:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a20      	ldr	r2, [pc, #128]	; (8008314 <HAL_DFSDM_FilterMspInit+0x14c>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d130      	bne.n	80082fa <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 8008298:	4b1f      	ldr	r3, [pc, #124]	; (8008318 <HAL_DFSDM_FilterMspInit+0x150>)
 800829a:	4a20      	ldr	r2, [pc, #128]	; (800831c <HAL_DFSDM_FilterMspInit+0x154>)
 800829c:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 800829e:	4b1e      	ldr	r3, [pc, #120]	; (8008318 <HAL_DFSDM_FilterMspInit+0x150>)
 80082a0:	2256      	movs	r2, #86	; 0x56
 80082a2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80082a4:	4b1c      	ldr	r3, [pc, #112]	; (8008318 <HAL_DFSDM_FilterMspInit+0x150>)
 80082a6:	2200      	movs	r2, #0
 80082a8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 80082aa:	4b1b      	ldr	r3, [pc, #108]	; (8008318 <HAL_DFSDM_FilterMspInit+0x150>)
 80082ac:	2200      	movs	r2, #0
 80082ae:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 80082b0:	4b19      	ldr	r3, [pc, #100]	; (8008318 <HAL_DFSDM_FilterMspInit+0x150>)
 80082b2:	2280      	movs	r2, #128	; 0x80
 80082b4:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80082b6:	4b18      	ldr	r3, [pc, #96]	; (8008318 <HAL_DFSDM_FilterMspInit+0x150>)
 80082b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80082bc:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80082be:	4b16      	ldr	r3, [pc, #88]	; (8008318 <HAL_DFSDM_FilterMspInit+0x150>)
 80082c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80082c4:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 80082c6:	4b14      	ldr	r3, [pc, #80]	; (8008318 <HAL_DFSDM_FilterMspInit+0x150>)
 80082c8:	2200      	movs	r2, #0
 80082ca:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80082cc:	4b12      	ldr	r3, [pc, #72]	; (8008318 <HAL_DFSDM_FilterMspInit+0x150>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80082d2:	4811      	ldr	r0, [pc, #68]	; (8008318 <HAL_DFSDM_FilterMspInit+0x150>)
 80082d4:	f7f9 f9de 	bl	8001694 <HAL_DMA_Init>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 80082de:	f7ff fa8b 	bl	80077f8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	4a0c      	ldr	r2, [pc, #48]	; (8008318 <HAL_DFSDM_FilterMspInit+0x150>)
 80082e6:	62da      	str	r2, [r3, #44]	; 0x2c
 80082e8:	4a0b      	ldr	r2, [pc, #44]	; (8008318 <HAL_DFSDM_FilterMspInit+0x150>)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a09      	ldr	r2, [pc, #36]	; (8008318 <HAL_DFSDM_FilterMspInit+0x150>)
 80082f2:	629a      	str	r2, [r3, #40]	; 0x28
 80082f4:	4a08      	ldr	r2, [pc, #32]	; (8008318 <HAL_DFSDM_FilterMspInit+0x150>)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80082fa:	bf00      	nop
 80082fc:	37b8      	adds	r7, #184	; 0xb8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}
 8008302:	bf00      	nop
 8008304:	2004eb1c 	.word	0x2004eb1c
 8008308:	2004eb18 	.word	0x2004eb18
 800830c:	40021000 	.word	0x40021000
 8008310:	48001000 	.word	0x48001000
 8008314:	40016100 	.word	0x40016100
 8008318:	2000063c 	.word	0x2000063c
 800831c:	4002001c 	.word	0x4002001c

08008320 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b0ae      	sub	sp, #184	; 0xb8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008328:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800832c:	2200      	movs	r2, #0
 800832e:	601a      	str	r2, [r3, #0]
 8008330:	605a      	str	r2, [r3, #4]
 8008332:	609a      	str	r2, [r3, #8]
 8008334:	60da      	str	r2, [r3, #12]
 8008336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008338:	f107 0310 	add.w	r3, r7, #16
 800833c:	2294      	movs	r2, #148	; 0x94
 800833e:	2100      	movs	r1, #0
 8008340:	4618      	mov	r0, r3
 8008342:	f000 faa3 	bl	800888c <memset>
  if(DFSDM1_Init == 0)
 8008346:	4b2a      	ldr	r3, [pc, #168]	; (80083f0 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d14b      	bne.n	80083e6 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800834e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008352:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8008354:	2300      	movs	r3, #0
 8008356:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800835a:	f107 0310 	add.w	r3, r7, #16
 800835e:	4618      	mov	r0, r3
 8008360:	f7fb ffac 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800836a:	f7ff fa45 	bl	80077f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800836e:	4b21      	ldr	r3, [pc, #132]	; (80083f4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	3301      	adds	r3, #1
 8008374:	4a1f      	ldr	r2, [pc, #124]	; (80083f4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8008376:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8008378:	4b1e      	ldr	r3, [pc, #120]	; (80083f4 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	2b01      	cmp	r3, #1
 800837e:	d10b      	bne.n	8008398 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8008380:	4b1d      	ldr	r3, [pc, #116]	; (80083f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8008382:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008384:	4a1c      	ldr	r2, [pc, #112]	; (80083f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8008386:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800838a:	6613      	str	r3, [r2, #96]	; 0x60
 800838c:	4b1a      	ldr	r3, [pc, #104]	; (80083f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800838e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008390:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008394:	60fb      	str	r3, [r7, #12]
 8008396:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008398:	4b17      	ldr	r3, [pc, #92]	; (80083f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800839a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800839c:	4a16      	ldr	r2, [pc, #88]	; (80083f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800839e:	f043 0310 	orr.w	r3, r3, #16
 80083a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80083a4:	4b14      	ldr	r3, [pc, #80]	; (80083f8 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80083a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a8:	f003 0310 	and.w	r3, r3, #16
 80083ac:	60bb      	str	r3, [r7, #8]
 80083ae:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80083b0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80083b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083b8:	2302      	movs	r3, #2
 80083ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083be:	2300      	movs	r3, #0
 80083c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80083c4:	2300      	movs	r3, #0
 80083c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80083ca:	2306      	movs	r3, #6
 80083cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80083d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80083d4:	4619      	mov	r1, r3
 80083d6:	4809      	ldr	r0, [pc, #36]	; (80083fc <HAL_DFSDM_ChannelMspInit+0xdc>)
 80083d8:	f7f9 fc8a 	bl	8001cf0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80083dc:	4b04      	ldr	r3, [pc, #16]	; (80083f0 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	3301      	adds	r3, #1
 80083e2:	4a03      	ldr	r2, [pc, #12]	; (80083f0 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80083e4:	6013      	str	r3, [r2, #0]
  }

}
 80083e6:	bf00      	nop
 80083e8:	37b8      	adds	r7, #184	; 0xb8
 80083ea:	46bd      	mov	sp, r7
 80083ec:	bd80      	pop	{r7, pc}
 80083ee:	bf00      	nop
 80083f0:	2004eb1c 	.word	0x2004eb1c
 80083f4:	2004eb18 	.word	0x2004eb18
 80083f8:	40021000 	.word	0x40021000
 80083fc:	48001000 	.word	0x48001000

08008400 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b0b0      	sub	sp, #192	; 0xc0
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008408:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800840c:	2200      	movs	r2, #0
 800840e:	601a      	str	r2, [r3, #0]
 8008410:	605a      	str	r2, [r3, #4]
 8008412:	609a      	str	r2, [r3, #8]
 8008414:	60da      	str	r2, [r3, #12]
 8008416:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008418:	f107 0318 	add.w	r3, r7, #24
 800841c:	2294      	movs	r2, #148	; 0x94
 800841e:	2100      	movs	r1, #0
 8008420:	4618      	mov	r0, r3
 8008422:	f000 fa33 	bl	800888c <memset>
  if(hospi->Instance==OCTOSPI1)
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a28      	ldr	r2, [pc, #160]	; (80084cc <HAL_OSPI_MspInit+0xcc>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d149      	bne.n	80084c4 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8008430:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008434:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8008436:	2300      	movs	r3, #0
 8008438:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800843c:	f107 0318 	add.w	r3, r7, #24
 8008440:	4618      	mov	r0, r3
 8008442:	f7fb ff3b 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 8008446:	4603      	mov	r3, r0
 8008448:	2b00      	cmp	r3, #0
 800844a:	d001      	beq.n	8008450 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 800844c:	f7ff f9d4 	bl	80077f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8008450:	4b1f      	ldr	r3, [pc, #124]	; (80084d0 <HAL_OSPI_MspInit+0xd0>)
 8008452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008454:	4a1e      	ldr	r2, [pc, #120]	; (80084d0 <HAL_OSPI_MspInit+0xd0>)
 8008456:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800845a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800845c:	4b1c      	ldr	r3, [pc, #112]	; (80084d0 <HAL_OSPI_MspInit+0xd0>)
 800845e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008464:	617b      	str	r3, [r7, #20]
 8008466:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8008468:	4b19      	ldr	r3, [pc, #100]	; (80084d0 <HAL_OSPI_MspInit+0xd0>)
 800846a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800846c:	4a18      	ldr	r2, [pc, #96]	; (80084d0 <HAL_OSPI_MspInit+0xd0>)
 800846e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008472:	6513      	str	r3, [r2, #80]	; 0x50
 8008474:	4b16      	ldr	r3, [pc, #88]	; (80084d0 <HAL_OSPI_MspInit+0xd0>)
 8008476:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800847c:	613b      	str	r3, [r7, #16]
 800847e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008480:	4b13      	ldr	r3, [pc, #76]	; (80084d0 <HAL_OSPI_MspInit+0xd0>)
 8008482:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008484:	4a12      	ldr	r2, [pc, #72]	; (80084d0 <HAL_OSPI_MspInit+0xd0>)
 8008486:	f043 0310 	orr.w	r3, r3, #16
 800848a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800848c:	4b10      	ldr	r3, [pc, #64]	; (80084d0 <HAL_OSPI_MspInit+0xd0>)
 800848e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008490:	f003 0310 	and.w	r3, r3, #16
 8008494:	60fb      	str	r3, [r7, #12]
 8008496:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8008498:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800849c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084a0:	2302      	movs	r3, #2
 80084a2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80084ac:	2303      	movs	r3, #3
 80084ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80084b2:	230a      	movs	r3, #10
 80084b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80084b8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80084bc:	4619      	mov	r1, r3
 80084be:	4805      	ldr	r0, [pc, #20]	; (80084d4 <HAL_OSPI_MspInit+0xd4>)
 80084c0:	f7f9 fc16 	bl	8001cf0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80084c4:	bf00      	nop
 80084c6:	37c0      	adds	r7, #192	; 0xc0
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}
 80084cc:	a0001000 	.word	0xa0001000
 80084d0:	40021000 	.word	0x40021000
 80084d4:	48001000 	.word	0x48001000

080084d8 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4a0b      	ldr	r2, [pc, #44]	; (8008514 <HAL_OSPI_MspDeInit+0x3c>)
 80084e6:	4293      	cmp	r3, r2
 80084e8:	d110      	bne.n	800850c <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 80084ea:	4b0b      	ldr	r3, [pc, #44]	; (8008518 <HAL_OSPI_MspDeInit+0x40>)
 80084ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ee:	4a0a      	ldr	r2, [pc, #40]	; (8008518 <HAL_OSPI_MspDeInit+0x40>)
 80084f0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80084f4:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 80084f6:	4b08      	ldr	r3, [pc, #32]	; (8008518 <HAL_OSPI_MspDeInit+0x40>)
 80084f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084fa:	4a07      	ldr	r2, [pc, #28]	; (8008518 <HAL_OSPI_MspDeInit+0x40>)
 80084fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008500:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8008502:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8008506:	4805      	ldr	r0, [pc, #20]	; (800851c <HAL_OSPI_MspDeInit+0x44>)
 8008508:	f7f9 fd84 	bl	8002014 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 800850c:	bf00      	nop
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}
 8008514:	a0001000 	.word	0xa0001000
 8008518:	40021000 	.word	0x40021000
 800851c:	48001000 	.word	0x48001000

08008520 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008530:	d113      	bne.n	800855a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008532:	4b0c      	ldr	r3, [pc, #48]	; (8008564 <HAL_TIM_Base_MspInit+0x44>)
 8008534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008536:	4a0b      	ldr	r2, [pc, #44]	; (8008564 <HAL_TIM_Base_MspInit+0x44>)
 8008538:	f043 0301 	orr.w	r3, r3, #1
 800853c:	6593      	str	r3, [r2, #88]	; 0x58
 800853e:	4b09      	ldr	r3, [pc, #36]	; (8008564 <HAL_TIM_Base_MspInit+0x44>)
 8008540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	60fb      	str	r3, [r7, #12]
 8008548:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800854a:	2200      	movs	r2, #0
 800854c:	2100      	movs	r1, #0
 800854e:	201c      	movs	r0, #28
 8008550:	f7f8 f9a3 	bl	800089a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008554:	201c      	movs	r0, #28
 8008556:	f7f8 f9bc 	bl	80008d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800855a:	bf00      	nop
 800855c:	3710      	adds	r7, #16
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	40021000 	.word	0x40021000

08008568 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b0ae      	sub	sp, #184	; 0xb8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008570:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008574:	2200      	movs	r2, #0
 8008576:	601a      	str	r2, [r3, #0]
 8008578:	605a      	str	r2, [r3, #4]
 800857a:	609a      	str	r2, [r3, #8]
 800857c:	60da      	str	r2, [r3, #12]
 800857e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008580:	f107 0310 	add.w	r3, r7, #16
 8008584:	2294      	movs	r2, #148	; 0x94
 8008586:	2100      	movs	r1, #0
 8008588:	4618      	mov	r0, r3
 800858a:	f000 f97f 	bl	800888c <memset>
  if(huart->Instance==USART1)
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a39      	ldr	r2, [pc, #228]	; (8008678 <HAL_UART_MspInit+0x110>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d16b      	bne.n	8008670 <HAL_UART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8008598:	2301      	movs	r3, #1
 800859a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800859c:	2300      	movs	r3, #0
 800859e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80085a0:	f107 0310 	add.w	r3, r7, #16
 80085a4:	4618      	mov	r0, r3
 80085a6:	f7fb fe89 	bl	80042bc <HAL_RCCEx_PeriphCLKConfig>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80085b0:	f7ff f922 	bl	80077f8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80085b4:	4b31      	ldr	r3, [pc, #196]	; (800867c <HAL_UART_MspInit+0x114>)
 80085b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085b8:	4a30      	ldr	r2, [pc, #192]	; (800867c <HAL_UART_MspInit+0x114>)
 80085ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80085be:	6613      	str	r3, [r2, #96]	; 0x60
 80085c0:	4b2e      	ldr	r3, [pc, #184]	; (800867c <HAL_UART_MspInit+0x114>)
 80085c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80085cc:	4b2b      	ldr	r3, [pc, #172]	; (800867c <HAL_UART_MspInit+0x114>)
 80085ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085d0:	4a2a      	ldr	r2, [pc, #168]	; (800867c <HAL_UART_MspInit+0x114>)
 80085d2:	f043 0302 	orr.w	r3, r3, #2
 80085d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085d8:	4b28      	ldr	r3, [pc, #160]	; (800867c <HAL_UART_MspInit+0x114>)
 80085da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085dc:	f003 0302 	and.w	r3, r3, #2
 80085e0:	60bb      	str	r3, [r7, #8]
 80085e2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80085e4:	23c0      	movs	r3, #192	; 0xc0
 80085e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085ea:	2302      	movs	r3, #2
 80085ec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f0:	2300      	movs	r3, #0
 80085f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085f6:	2303      	movs	r3, #3
 80085f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80085fc:	2307      	movs	r3, #7
 80085fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008602:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008606:	4619      	mov	r1, r3
 8008608:	481d      	ldr	r0, [pc, #116]	; (8008680 <HAL_UART_MspInit+0x118>)
 800860a:	f7f9 fb71 	bl	8001cf0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 800860e:	4b1d      	ldr	r3, [pc, #116]	; (8008684 <HAL_UART_MspInit+0x11c>)
 8008610:	4a1d      	ldr	r2, [pc, #116]	; (8008688 <HAL_UART_MspInit+0x120>)
 8008612:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8008614:	4b1b      	ldr	r3, [pc, #108]	; (8008684 <HAL_UART_MspInit+0x11c>)
 8008616:	2218      	movs	r2, #24
 8008618:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800861a:	4b1a      	ldr	r3, [pc, #104]	; (8008684 <HAL_UART_MspInit+0x11c>)
 800861c:	2200      	movs	r2, #0
 800861e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008620:	4b18      	ldr	r3, [pc, #96]	; (8008684 <HAL_UART_MspInit+0x11c>)
 8008622:	2200      	movs	r2, #0
 8008624:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008626:	4b17      	ldr	r3, [pc, #92]	; (8008684 <HAL_UART_MspInit+0x11c>)
 8008628:	2280      	movs	r2, #128	; 0x80
 800862a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800862c:	4b15      	ldr	r3, [pc, #84]	; (8008684 <HAL_UART_MspInit+0x11c>)
 800862e:	2200      	movs	r2, #0
 8008630:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008632:	4b14      	ldr	r3, [pc, #80]	; (8008684 <HAL_UART_MspInit+0x11c>)
 8008634:	2200      	movs	r2, #0
 8008636:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8008638:	4b12      	ldr	r3, [pc, #72]	; (8008684 <HAL_UART_MspInit+0x11c>)
 800863a:	2200      	movs	r2, #0
 800863c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800863e:	4b11      	ldr	r3, [pc, #68]	; (8008684 <HAL_UART_MspInit+0x11c>)
 8008640:	2200      	movs	r2, #0
 8008642:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008644:	480f      	ldr	r0, [pc, #60]	; (8008684 <HAL_UART_MspInit+0x11c>)
 8008646:	f7f9 f825 	bl	8001694 <HAL_DMA_Init>
 800864a:	4603      	mov	r3, r0
 800864c:	2b00      	cmp	r3, #0
 800864e:	d001      	beq.n	8008654 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8008650:	f7ff f8d2 	bl	80077f8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	4a0b      	ldr	r2, [pc, #44]	; (8008684 <HAL_UART_MspInit+0x11c>)
 8008658:	67da      	str	r2, [r3, #124]	; 0x7c
 800865a:	4a0a      	ldr	r2, [pc, #40]	; (8008684 <HAL_UART_MspInit+0x11c>)
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008660:	2200      	movs	r2, #0
 8008662:	2100      	movs	r1, #0
 8008664:	2025      	movs	r0, #37	; 0x25
 8008666:	f7f8 f918 	bl	800089a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800866a:	2025      	movs	r0, #37	; 0x25
 800866c:	f7f8 f931 	bl	80008d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008670:	bf00      	nop
 8008672:	37b8      	adds	r7, #184	; 0xb8
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}
 8008678:	40013800 	.word	0x40013800
 800867c:	40021000 	.word	0x40021000
 8008680:	48000400 	.word	0x48000400
 8008684:	200007c8 	.word	0x200007c8
 8008688:	40020030 	.word	0x40020030

0800868c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800868c:	b480      	push	{r7}
 800868e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008690:	e7fe      	b.n	8008690 <NMI_Handler+0x4>

08008692 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008692:	b480      	push	{r7}
 8008694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008696:	e7fe      	b.n	8008696 <HardFault_Handler+0x4>

08008698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008698:	b480      	push	{r7}
 800869a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800869c:	e7fe      	b.n	800869c <MemManage_Handler+0x4>

0800869e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800869e:	b480      	push	{r7}
 80086a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80086a2:	e7fe      	b.n	80086a2 <BusFault_Handler+0x4>

080086a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80086a4:	b480      	push	{r7}
 80086a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80086a8:	e7fe      	b.n	80086a8 <UsageFault_Handler+0x4>

080086aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80086aa:	b480      	push	{r7}
 80086ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80086ae:	bf00      	nop
 80086b0:	46bd      	mov	sp, r7
 80086b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b6:	4770      	bx	lr

080086b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80086b8:	b480      	push	{r7}
 80086ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80086bc:	bf00      	nop
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80086c6:	b480      	push	{r7}
 80086c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80086ca:	bf00      	nop
 80086cc:	46bd      	mov	sp, r7
 80086ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086d2:	4770      	bx	lr

080086d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80086d4:	b580      	push	{r7, lr}
 80086d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80086d8:	f7f7 ffc0 	bl	800065c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80086dc:	bf00      	nop
 80086de:	bd80      	pop	{r7, pc}

080086e0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80086e0:	b580      	push	{r7, lr}
 80086e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80086e4:	4802      	ldr	r0, [pc, #8]	; (80086f0 <DMA1_Channel1_IRQHandler+0x10>)
 80086e6:	f7f9 f9b3 	bl	8001a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80086ea:	bf00      	nop
 80086ec:	bd80      	pop	{r7, pc}
 80086ee:	bf00      	nop
 80086f0:	20000550 	.word	0x20000550

080086f4 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80086f8:	4802      	ldr	r0, [pc, #8]	; (8008704 <DMA1_Channel2_IRQHandler+0x10>)
 80086fa:	f7f9 f9a9 	bl	8001a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80086fe:	bf00      	nop
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	2000063c 	.word	0x2000063c

08008708 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 800870c:	4802      	ldr	r0, [pc, #8]	; (8008718 <DMA1_Channel3_IRQHandler+0x10>)
 800870e:	f7f9 f99f 	bl	8001a50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8008712:	bf00      	nop
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop
 8008718:	200007c8 	.word	0x200007c8

0800871c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008720:	4802      	ldr	r0, [pc, #8]	; (800872c <TIM2_IRQHandler+0x10>)
 8008722:	f7fc fbab 	bl	8004e7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008726:	bf00      	nop
 8008728:	bd80      	pop	{r7, pc}
 800872a:	bf00      	nop
 800872c:	200006ec 	.word	0x200006ec

08008730 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008730:	b580      	push	{r7, lr}
 8008732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008734:	4802      	ldr	r0, [pc, #8]	; (8008740 <USART1_IRQHandler+0x10>)
 8008736:	f7fd f951 	bl	80059dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800873a:	bf00      	nop
 800873c:	bd80      	pop	{r7, pc}
 800873e:	bf00      	nop
 8008740:	20000738 	.word	0x20000738

08008744 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pushButton_Pin);
 8008748:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800874c:	f7f9 fd86 	bl	800225c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008750:	bf00      	nop
 8008752:	bd80      	pop	{r7, pc}

08008754 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800875c:	4a14      	ldr	r2, [pc, #80]	; (80087b0 <_sbrk+0x5c>)
 800875e:	4b15      	ldr	r3, [pc, #84]	; (80087b4 <_sbrk+0x60>)
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008768:	4b13      	ldr	r3, [pc, #76]	; (80087b8 <_sbrk+0x64>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d102      	bne.n	8008776 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008770:	4b11      	ldr	r3, [pc, #68]	; (80087b8 <_sbrk+0x64>)
 8008772:	4a12      	ldr	r2, [pc, #72]	; (80087bc <_sbrk+0x68>)
 8008774:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008776:	4b10      	ldr	r3, [pc, #64]	; (80087b8 <_sbrk+0x64>)
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4413      	add	r3, r2
 800877e:	693a      	ldr	r2, [r7, #16]
 8008780:	429a      	cmp	r2, r3
 8008782:	d207      	bcs.n	8008794 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008784:	f000 f858 	bl	8008838 <__errno>
 8008788:	4603      	mov	r3, r0
 800878a:	220c      	movs	r2, #12
 800878c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800878e:	f04f 33ff 	mov.w	r3, #4294967295
 8008792:	e009      	b.n	80087a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008794:	4b08      	ldr	r3, [pc, #32]	; (80087b8 <_sbrk+0x64>)
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800879a:	4b07      	ldr	r3, [pc, #28]	; (80087b8 <_sbrk+0x64>)
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	4413      	add	r3, r2
 80087a2:	4a05      	ldr	r2, [pc, #20]	; (80087b8 <_sbrk+0x64>)
 80087a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80087a6:	68fb      	ldr	r3, [r7, #12]
}
 80087a8:	4618      	mov	r0, r3
 80087aa:	3718      	adds	r7, #24
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}
 80087b0:	200a0000 	.word	0x200a0000
 80087b4:	00000400 	.word	0x00000400
 80087b8:	2004eb20 	.word	0x2004eb20
 80087bc:	2004eb38 	.word	0x2004eb38

080087c0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80087c4:	4b06      	ldr	r3, [pc, #24]	; (80087e0 <SystemInit+0x20>)
 80087c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087ca:	4a05      	ldr	r2, [pc, #20]	; (80087e0 <SystemInit+0x20>)
 80087cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80087d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80087d4:	bf00      	nop
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr
 80087de:	bf00      	nop
 80087e0:	e000ed00 	.word	0xe000ed00

080087e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80087e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800881c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80087e8:	f7ff ffea 	bl	80087c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80087ec:	480c      	ldr	r0, [pc, #48]	; (8008820 <LoopForever+0x6>)
  ldr r1, =_edata
 80087ee:	490d      	ldr	r1, [pc, #52]	; (8008824 <LoopForever+0xa>)
  ldr r2, =_sidata
 80087f0:	4a0d      	ldr	r2, [pc, #52]	; (8008828 <LoopForever+0xe>)
  movs r3, #0
 80087f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80087f4:	e002      	b.n	80087fc <LoopCopyDataInit>

080087f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80087f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80087f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80087fa:	3304      	adds	r3, #4

080087fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80087fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80087fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008800:	d3f9      	bcc.n	80087f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008802:	4a0a      	ldr	r2, [pc, #40]	; (800882c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008804:	4c0a      	ldr	r4, [pc, #40]	; (8008830 <LoopForever+0x16>)
  movs r3, #0
 8008806:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008808:	e001      	b.n	800880e <LoopFillZerobss>

0800880a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800880a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800880c:	3204      	adds	r2, #4

0800880e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800880e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008810:	d3fb      	bcc.n	800880a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008812:	f000 f817 	bl	8008844 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008816:	f7fe fa93 	bl	8006d40 <main>

0800881a <LoopForever>:

LoopForever:
    b LoopForever
 800881a:	e7fe      	b.n	800881a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800881c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8008820:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008824:	200004f8 	.word	0x200004f8
  ldr r2, =_sidata
 8008828:	08009244 	.word	0x08009244
  ldr r2, =_sbss
 800882c:	200004f8 	.word	0x200004f8
  ldr r4, =_ebss
 8008830:	2004eb34 	.word	0x2004eb34

08008834 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008834:	e7fe      	b.n	8008834 <ADC1_IRQHandler>
	...

08008838 <__errno>:
 8008838:	4b01      	ldr	r3, [pc, #4]	; (8008840 <__errno+0x8>)
 800883a:	6818      	ldr	r0, [r3, #0]
 800883c:	4770      	bx	lr
 800883e:	bf00      	nop
 8008840:	20000494 	.word	0x20000494

08008844 <__libc_init_array>:
 8008844:	b570      	push	{r4, r5, r6, lr}
 8008846:	4d0d      	ldr	r5, [pc, #52]	; (800887c <__libc_init_array+0x38>)
 8008848:	4c0d      	ldr	r4, [pc, #52]	; (8008880 <__libc_init_array+0x3c>)
 800884a:	1b64      	subs	r4, r4, r5
 800884c:	10a4      	asrs	r4, r4, #2
 800884e:	2600      	movs	r6, #0
 8008850:	42a6      	cmp	r6, r4
 8008852:	d109      	bne.n	8008868 <__libc_init_array+0x24>
 8008854:	4d0b      	ldr	r5, [pc, #44]	; (8008884 <__libc_init_array+0x40>)
 8008856:	4c0c      	ldr	r4, [pc, #48]	; (8008888 <__libc_init_array+0x44>)
 8008858:	f000 fc8e 	bl	8009178 <_init>
 800885c:	1b64      	subs	r4, r4, r5
 800885e:	10a4      	asrs	r4, r4, #2
 8008860:	2600      	movs	r6, #0
 8008862:	42a6      	cmp	r6, r4
 8008864:	d105      	bne.n	8008872 <__libc_init_array+0x2e>
 8008866:	bd70      	pop	{r4, r5, r6, pc}
 8008868:	f855 3b04 	ldr.w	r3, [r5], #4
 800886c:	4798      	blx	r3
 800886e:	3601      	adds	r6, #1
 8008870:	e7ee      	b.n	8008850 <__libc_init_array+0xc>
 8008872:	f855 3b04 	ldr.w	r3, [r5], #4
 8008876:	4798      	blx	r3
 8008878:	3601      	adds	r6, #1
 800887a:	e7f2      	b.n	8008862 <__libc_init_array+0x1e>
 800887c:	0800923c 	.word	0x0800923c
 8008880:	0800923c 	.word	0x0800923c
 8008884:	0800923c 	.word	0x0800923c
 8008888:	08009240 	.word	0x08009240

0800888c <memset>:
 800888c:	4402      	add	r2, r0
 800888e:	4603      	mov	r3, r0
 8008890:	4293      	cmp	r3, r2
 8008892:	d100      	bne.n	8008896 <memset+0xa>
 8008894:	4770      	bx	lr
 8008896:	f803 1b01 	strb.w	r1, [r3], #1
 800889a:	e7f9      	b.n	8008890 <memset+0x4>

0800889c <siprintf>:
 800889c:	b40e      	push	{r1, r2, r3}
 800889e:	b500      	push	{lr}
 80088a0:	b09c      	sub	sp, #112	; 0x70
 80088a2:	ab1d      	add	r3, sp, #116	; 0x74
 80088a4:	9002      	str	r0, [sp, #8]
 80088a6:	9006      	str	r0, [sp, #24]
 80088a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088ac:	4809      	ldr	r0, [pc, #36]	; (80088d4 <siprintf+0x38>)
 80088ae:	9107      	str	r1, [sp, #28]
 80088b0:	9104      	str	r1, [sp, #16]
 80088b2:	4909      	ldr	r1, [pc, #36]	; (80088d8 <siprintf+0x3c>)
 80088b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088b8:	9105      	str	r1, [sp, #20]
 80088ba:	6800      	ldr	r0, [r0, #0]
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	a902      	add	r1, sp, #8
 80088c0:	f000 f868 	bl	8008994 <_svfiprintf_r>
 80088c4:	9b02      	ldr	r3, [sp, #8]
 80088c6:	2200      	movs	r2, #0
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	b01c      	add	sp, #112	; 0x70
 80088cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088d0:	b003      	add	sp, #12
 80088d2:	4770      	bx	lr
 80088d4:	20000494 	.word	0x20000494
 80088d8:	ffff0208 	.word	0xffff0208

080088dc <__ssputs_r>:
 80088dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088e0:	688e      	ldr	r6, [r1, #8]
 80088e2:	429e      	cmp	r6, r3
 80088e4:	4682      	mov	sl, r0
 80088e6:	460c      	mov	r4, r1
 80088e8:	4690      	mov	r8, r2
 80088ea:	461f      	mov	r7, r3
 80088ec:	d838      	bhi.n	8008960 <__ssputs_r+0x84>
 80088ee:	898a      	ldrh	r2, [r1, #12]
 80088f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088f4:	d032      	beq.n	800895c <__ssputs_r+0x80>
 80088f6:	6825      	ldr	r5, [r4, #0]
 80088f8:	6909      	ldr	r1, [r1, #16]
 80088fa:	eba5 0901 	sub.w	r9, r5, r1
 80088fe:	6965      	ldr	r5, [r4, #20]
 8008900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008904:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008908:	3301      	adds	r3, #1
 800890a:	444b      	add	r3, r9
 800890c:	106d      	asrs	r5, r5, #1
 800890e:	429d      	cmp	r5, r3
 8008910:	bf38      	it	cc
 8008912:	461d      	movcc	r5, r3
 8008914:	0553      	lsls	r3, r2, #21
 8008916:	d531      	bpl.n	800897c <__ssputs_r+0xa0>
 8008918:	4629      	mov	r1, r5
 800891a:	f000 fb63 	bl	8008fe4 <_malloc_r>
 800891e:	4606      	mov	r6, r0
 8008920:	b950      	cbnz	r0, 8008938 <__ssputs_r+0x5c>
 8008922:	230c      	movs	r3, #12
 8008924:	f8ca 3000 	str.w	r3, [sl]
 8008928:	89a3      	ldrh	r3, [r4, #12]
 800892a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800892e:	81a3      	strh	r3, [r4, #12]
 8008930:	f04f 30ff 	mov.w	r0, #4294967295
 8008934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008938:	6921      	ldr	r1, [r4, #16]
 800893a:	464a      	mov	r2, r9
 800893c:	f000 fabe 	bl	8008ebc <memcpy>
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800894a:	81a3      	strh	r3, [r4, #12]
 800894c:	6126      	str	r6, [r4, #16]
 800894e:	6165      	str	r5, [r4, #20]
 8008950:	444e      	add	r6, r9
 8008952:	eba5 0509 	sub.w	r5, r5, r9
 8008956:	6026      	str	r6, [r4, #0]
 8008958:	60a5      	str	r5, [r4, #8]
 800895a:	463e      	mov	r6, r7
 800895c:	42be      	cmp	r6, r7
 800895e:	d900      	bls.n	8008962 <__ssputs_r+0x86>
 8008960:	463e      	mov	r6, r7
 8008962:	6820      	ldr	r0, [r4, #0]
 8008964:	4632      	mov	r2, r6
 8008966:	4641      	mov	r1, r8
 8008968:	f000 fab6 	bl	8008ed8 <memmove>
 800896c:	68a3      	ldr	r3, [r4, #8]
 800896e:	1b9b      	subs	r3, r3, r6
 8008970:	60a3      	str	r3, [r4, #8]
 8008972:	6823      	ldr	r3, [r4, #0]
 8008974:	4433      	add	r3, r6
 8008976:	6023      	str	r3, [r4, #0]
 8008978:	2000      	movs	r0, #0
 800897a:	e7db      	b.n	8008934 <__ssputs_r+0x58>
 800897c:	462a      	mov	r2, r5
 800897e:	f000 fba5 	bl	80090cc <_realloc_r>
 8008982:	4606      	mov	r6, r0
 8008984:	2800      	cmp	r0, #0
 8008986:	d1e1      	bne.n	800894c <__ssputs_r+0x70>
 8008988:	6921      	ldr	r1, [r4, #16]
 800898a:	4650      	mov	r0, sl
 800898c:	f000 fabe 	bl	8008f0c <_free_r>
 8008990:	e7c7      	b.n	8008922 <__ssputs_r+0x46>
	...

08008994 <_svfiprintf_r>:
 8008994:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008998:	4698      	mov	r8, r3
 800899a:	898b      	ldrh	r3, [r1, #12]
 800899c:	061b      	lsls	r3, r3, #24
 800899e:	b09d      	sub	sp, #116	; 0x74
 80089a0:	4607      	mov	r7, r0
 80089a2:	460d      	mov	r5, r1
 80089a4:	4614      	mov	r4, r2
 80089a6:	d50e      	bpl.n	80089c6 <_svfiprintf_r+0x32>
 80089a8:	690b      	ldr	r3, [r1, #16]
 80089aa:	b963      	cbnz	r3, 80089c6 <_svfiprintf_r+0x32>
 80089ac:	2140      	movs	r1, #64	; 0x40
 80089ae:	f000 fb19 	bl	8008fe4 <_malloc_r>
 80089b2:	6028      	str	r0, [r5, #0]
 80089b4:	6128      	str	r0, [r5, #16]
 80089b6:	b920      	cbnz	r0, 80089c2 <_svfiprintf_r+0x2e>
 80089b8:	230c      	movs	r3, #12
 80089ba:	603b      	str	r3, [r7, #0]
 80089bc:	f04f 30ff 	mov.w	r0, #4294967295
 80089c0:	e0d1      	b.n	8008b66 <_svfiprintf_r+0x1d2>
 80089c2:	2340      	movs	r3, #64	; 0x40
 80089c4:	616b      	str	r3, [r5, #20]
 80089c6:	2300      	movs	r3, #0
 80089c8:	9309      	str	r3, [sp, #36]	; 0x24
 80089ca:	2320      	movs	r3, #32
 80089cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80089d4:	2330      	movs	r3, #48	; 0x30
 80089d6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b80 <_svfiprintf_r+0x1ec>
 80089da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089de:	f04f 0901 	mov.w	r9, #1
 80089e2:	4623      	mov	r3, r4
 80089e4:	469a      	mov	sl, r3
 80089e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089ea:	b10a      	cbz	r2, 80089f0 <_svfiprintf_r+0x5c>
 80089ec:	2a25      	cmp	r2, #37	; 0x25
 80089ee:	d1f9      	bne.n	80089e4 <_svfiprintf_r+0x50>
 80089f0:	ebba 0b04 	subs.w	fp, sl, r4
 80089f4:	d00b      	beq.n	8008a0e <_svfiprintf_r+0x7a>
 80089f6:	465b      	mov	r3, fp
 80089f8:	4622      	mov	r2, r4
 80089fa:	4629      	mov	r1, r5
 80089fc:	4638      	mov	r0, r7
 80089fe:	f7ff ff6d 	bl	80088dc <__ssputs_r>
 8008a02:	3001      	adds	r0, #1
 8008a04:	f000 80aa 	beq.w	8008b5c <_svfiprintf_r+0x1c8>
 8008a08:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a0a:	445a      	add	r2, fp
 8008a0c:	9209      	str	r2, [sp, #36]	; 0x24
 8008a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	f000 80a2 	beq.w	8008b5c <_svfiprintf_r+0x1c8>
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a22:	f10a 0a01 	add.w	sl, sl, #1
 8008a26:	9304      	str	r3, [sp, #16]
 8008a28:	9307      	str	r3, [sp, #28]
 8008a2a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a2e:	931a      	str	r3, [sp, #104]	; 0x68
 8008a30:	4654      	mov	r4, sl
 8008a32:	2205      	movs	r2, #5
 8008a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a38:	4851      	ldr	r0, [pc, #324]	; (8008b80 <_svfiprintf_r+0x1ec>)
 8008a3a:	f7f7 fbe9 	bl	8000210 <memchr>
 8008a3e:	9a04      	ldr	r2, [sp, #16]
 8008a40:	b9d8      	cbnz	r0, 8008a7a <_svfiprintf_r+0xe6>
 8008a42:	06d0      	lsls	r0, r2, #27
 8008a44:	bf44      	itt	mi
 8008a46:	2320      	movmi	r3, #32
 8008a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a4c:	0711      	lsls	r1, r2, #28
 8008a4e:	bf44      	itt	mi
 8008a50:	232b      	movmi	r3, #43	; 0x2b
 8008a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a56:	f89a 3000 	ldrb.w	r3, [sl]
 8008a5a:	2b2a      	cmp	r3, #42	; 0x2a
 8008a5c:	d015      	beq.n	8008a8a <_svfiprintf_r+0xf6>
 8008a5e:	9a07      	ldr	r2, [sp, #28]
 8008a60:	4654      	mov	r4, sl
 8008a62:	2000      	movs	r0, #0
 8008a64:	f04f 0c0a 	mov.w	ip, #10
 8008a68:	4621      	mov	r1, r4
 8008a6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a6e:	3b30      	subs	r3, #48	; 0x30
 8008a70:	2b09      	cmp	r3, #9
 8008a72:	d94e      	bls.n	8008b12 <_svfiprintf_r+0x17e>
 8008a74:	b1b0      	cbz	r0, 8008aa4 <_svfiprintf_r+0x110>
 8008a76:	9207      	str	r2, [sp, #28]
 8008a78:	e014      	b.n	8008aa4 <_svfiprintf_r+0x110>
 8008a7a:	eba0 0308 	sub.w	r3, r0, r8
 8008a7e:	fa09 f303 	lsl.w	r3, r9, r3
 8008a82:	4313      	orrs	r3, r2
 8008a84:	9304      	str	r3, [sp, #16]
 8008a86:	46a2      	mov	sl, r4
 8008a88:	e7d2      	b.n	8008a30 <_svfiprintf_r+0x9c>
 8008a8a:	9b03      	ldr	r3, [sp, #12]
 8008a8c:	1d19      	adds	r1, r3, #4
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	9103      	str	r1, [sp, #12]
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	bfbb      	ittet	lt
 8008a96:	425b      	neglt	r3, r3
 8008a98:	f042 0202 	orrlt.w	r2, r2, #2
 8008a9c:	9307      	strge	r3, [sp, #28]
 8008a9e:	9307      	strlt	r3, [sp, #28]
 8008aa0:	bfb8      	it	lt
 8008aa2:	9204      	strlt	r2, [sp, #16]
 8008aa4:	7823      	ldrb	r3, [r4, #0]
 8008aa6:	2b2e      	cmp	r3, #46	; 0x2e
 8008aa8:	d10c      	bne.n	8008ac4 <_svfiprintf_r+0x130>
 8008aaa:	7863      	ldrb	r3, [r4, #1]
 8008aac:	2b2a      	cmp	r3, #42	; 0x2a
 8008aae:	d135      	bne.n	8008b1c <_svfiprintf_r+0x188>
 8008ab0:	9b03      	ldr	r3, [sp, #12]
 8008ab2:	1d1a      	adds	r2, r3, #4
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	9203      	str	r2, [sp, #12]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	bfb8      	it	lt
 8008abc:	f04f 33ff 	movlt.w	r3, #4294967295
 8008ac0:	3402      	adds	r4, #2
 8008ac2:	9305      	str	r3, [sp, #20]
 8008ac4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b90 <_svfiprintf_r+0x1fc>
 8008ac8:	7821      	ldrb	r1, [r4, #0]
 8008aca:	2203      	movs	r2, #3
 8008acc:	4650      	mov	r0, sl
 8008ace:	f7f7 fb9f 	bl	8000210 <memchr>
 8008ad2:	b140      	cbz	r0, 8008ae6 <_svfiprintf_r+0x152>
 8008ad4:	2340      	movs	r3, #64	; 0x40
 8008ad6:	eba0 000a 	sub.w	r0, r0, sl
 8008ada:	fa03 f000 	lsl.w	r0, r3, r0
 8008ade:	9b04      	ldr	r3, [sp, #16]
 8008ae0:	4303      	orrs	r3, r0
 8008ae2:	3401      	adds	r4, #1
 8008ae4:	9304      	str	r3, [sp, #16]
 8008ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008aea:	4826      	ldr	r0, [pc, #152]	; (8008b84 <_svfiprintf_r+0x1f0>)
 8008aec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008af0:	2206      	movs	r2, #6
 8008af2:	f7f7 fb8d 	bl	8000210 <memchr>
 8008af6:	2800      	cmp	r0, #0
 8008af8:	d038      	beq.n	8008b6c <_svfiprintf_r+0x1d8>
 8008afa:	4b23      	ldr	r3, [pc, #140]	; (8008b88 <_svfiprintf_r+0x1f4>)
 8008afc:	bb1b      	cbnz	r3, 8008b46 <_svfiprintf_r+0x1b2>
 8008afe:	9b03      	ldr	r3, [sp, #12]
 8008b00:	3307      	adds	r3, #7
 8008b02:	f023 0307 	bic.w	r3, r3, #7
 8008b06:	3308      	adds	r3, #8
 8008b08:	9303      	str	r3, [sp, #12]
 8008b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b0c:	4433      	add	r3, r6
 8008b0e:	9309      	str	r3, [sp, #36]	; 0x24
 8008b10:	e767      	b.n	80089e2 <_svfiprintf_r+0x4e>
 8008b12:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b16:	460c      	mov	r4, r1
 8008b18:	2001      	movs	r0, #1
 8008b1a:	e7a5      	b.n	8008a68 <_svfiprintf_r+0xd4>
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	3401      	adds	r4, #1
 8008b20:	9305      	str	r3, [sp, #20]
 8008b22:	4619      	mov	r1, r3
 8008b24:	f04f 0c0a 	mov.w	ip, #10
 8008b28:	4620      	mov	r0, r4
 8008b2a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b2e:	3a30      	subs	r2, #48	; 0x30
 8008b30:	2a09      	cmp	r2, #9
 8008b32:	d903      	bls.n	8008b3c <_svfiprintf_r+0x1a8>
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d0c5      	beq.n	8008ac4 <_svfiprintf_r+0x130>
 8008b38:	9105      	str	r1, [sp, #20]
 8008b3a:	e7c3      	b.n	8008ac4 <_svfiprintf_r+0x130>
 8008b3c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b40:	4604      	mov	r4, r0
 8008b42:	2301      	movs	r3, #1
 8008b44:	e7f0      	b.n	8008b28 <_svfiprintf_r+0x194>
 8008b46:	ab03      	add	r3, sp, #12
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	462a      	mov	r2, r5
 8008b4c:	4b0f      	ldr	r3, [pc, #60]	; (8008b8c <_svfiprintf_r+0x1f8>)
 8008b4e:	a904      	add	r1, sp, #16
 8008b50:	4638      	mov	r0, r7
 8008b52:	f3af 8000 	nop.w
 8008b56:	1c42      	adds	r2, r0, #1
 8008b58:	4606      	mov	r6, r0
 8008b5a:	d1d6      	bne.n	8008b0a <_svfiprintf_r+0x176>
 8008b5c:	89ab      	ldrh	r3, [r5, #12]
 8008b5e:	065b      	lsls	r3, r3, #25
 8008b60:	f53f af2c 	bmi.w	80089bc <_svfiprintf_r+0x28>
 8008b64:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b66:	b01d      	add	sp, #116	; 0x74
 8008b68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b6c:	ab03      	add	r3, sp, #12
 8008b6e:	9300      	str	r3, [sp, #0]
 8008b70:	462a      	mov	r2, r5
 8008b72:	4b06      	ldr	r3, [pc, #24]	; (8008b8c <_svfiprintf_r+0x1f8>)
 8008b74:	a904      	add	r1, sp, #16
 8008b76:	4638      	mov	r0, r7
 8008b78:	f000 f87a 	bl	8008c70 <_printf_i>
 8008b7c:	e7eb      	b.n	8008b56 <_svfiprintf_r+0x1c2>
 8008b7e:	bf00      	nop
 8008b80:	08009200 	.word	0x08009200
 8008b84:	0800920a 	.word	0x0800920a
 8008b88:	00000000 	.word	0x00000000
 8008b8c:	080088dd 	.word	0x080088dd
 8008b90:	08009206 	.word	0x08009206

08008b94 <_printf_common>:
 8008b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b98:	4616      	mov	r6, r2
 8008b9a:	4699      	mov	r9, r3
 8008b9c:	688a      	ldr	r2, [r1, #8]
 8008b9e:	690b      	ldr	r3, [r1, #16]
 8008ba0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ba4:	4293      	cmp	r3, r2
 8008ba6:	bfb8      	it	lt
 8008ba8:	4613      	movlt	r3, r2
 8008baa:	6033      	str	r3, [r6, #0]
 8008bac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bb0:	4607      	mov	r7, r0
 8008bb2:	460c      	mov	r4, r1
 8008bb4:	b10a      	cbz	r2, 8008bba <_printf_common+0x26>
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	6033      	str	r3, [r6, #0]
 8008bba:	6823      	ldr	r3, [r4, #0]
 8008bbc:	0699      	lsls	r1, r3, #26
 8008bbe:	bf42      	ittt	mi
 8008bc0:	6833      	ldrmi	r3, [r6, #0]
 8008bc2:	3302      	addmi	r3, #2
 8008bc4:	6033      	strmi	r3, [r6, #0]
 8008bc6:	6825      	ldr	r5, [r4, #0]
 8008bc8:	f015 0506 	ands.w	r5, r5, #6
 8008bcc:	d106      	bne.n	8008bdc <_printf_common+0x48>
 8008bce:	f104 0a19 	add.w	sl, r4, #25
 8008bd2:	68e3      	ldr	r3, [r4, #12]
 8008bd4:	6832      	ldr	r2, [r6, #0]
 8008bd6:	1a9b      	subs	r3, r3, r2
 8008bd8:	42ab      	cmp	r3, r5
 8008bda:	dc26      	bgt.n	8008c2a <_printf_common+0x96>
 8008bdc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008be0:	1e13      	subs	r3, r2, #0
 8008be2:	6822      	ldr	r2, [r4, #0]
 8008be4:	bf18      	it	ne
 8008be6:	2301      	movne	r3, #1
 8008be8:	0692      	lsls	r2, r2, #26
 8008bea:	d42b      	bmi.n	8008c44 <_printf_common+0xb0>
 8008bec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bf0:	4649      	mov	r1, r9
 8008bf2:	4638      	mov	r0, r7
 8008bf4:	47c0      	blx	r8
 8008bf6:	3001      	adds	r0, #1
 8008bf8:	d01e      	beq.n	8008c38 <_printf_common+0xa4>
 8008bfa:	6823      	ldr	r3, [r4, #0]
 8008bfc:	68e5      	ldr	r5, [r4, #12]
 8008bfe:	6832      	ldr	r2, [r6, #0]
 8008c00:	f003 0306 	and.w	r3, r3, #6
 8008c04:	2b04      	cmp	r3, #4
 8008c06:	bf08      	it	eq
 8008c08:	1aad      	subeq	r5, r5, r2
 8008c0a:	68a3      	ldr	r3, [r4, #8]
 8008c0c:	6922      	ldr	r2, [r4, #16]
 8008c0e:	bf0c      	ite	eq
 8008c10:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c14:	2500      	movne	r5, #0
 8008c16:	4293      	cmp	r3, r2
 8008c18:	bfc4      	itt	gt
 8008c1a:	1a9b      	subgt	r3, r3, r2
 8008c1c:	18ed      	addgt	r5, r5, r3
 8008c1e:	2600      	movs	r6, #0
 8008c20:	341a      	adds	r4, #26
 8008c22:	42b5      	cmp	r5, r6
 8008c24:	d11a      	bne.n	8008c5c <_printf_common+0xc8>
 8008c26:	2000      	movs	r0, #0
 8008c28:	e008      	b.n	8008c3c <_printf_common+0xa8>
 8008c2a:	2301      	movs	r3, #1
 8008c2c:	4652      	mov	r2, sl
 8008c2e:	4649      	mov	r1, r9
 8008c30:	4638      	mov	r0, r7
 8008c32:	47c0      	blx	r8
 8008c34:	3001      	adds	r0, #1
 8008c36:	d103      	bne.n	8008c40 <_printf_common+0xac>
 8008c38:	f04f 30ff 	mov.w	r0, #4294967295
 8008c3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c40:	3501      	adds	r5, #1
 8008c42:	e7c6      	b.n	8008bd2 <_printf_common+0x3e>
 8008c44:	18e1      	adds	r1, r4, r3
 8008c46:	1c5a      	adds	r2, r3, #1
 8008c48:	2030      	movs	r0, #48	; 0x30
 8008c4a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c4e:	4422      	add	r2, r4
 8008c50:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c54:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c58:	3302      	adds	r3, #2
 8008c5a:	e7c7      	b.n	8008bec <_printf_common+0x58>
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	4622      	mov	r2, r4
 8008c60:	4649      	mov	r1, r9
 8008c62:	4638      	mov	r0, r7
 8008c64:	47c0      	blx	r8
 8008c66:	3001      	adds	r0, #1
 8008c68:	d0e6      	beq.n	8008c38 <_printf_common+0xa4>
 8008c6a:	3601      	adds	r6, #1
 8008c6c:	e7d9      	b.n	8008c22 <_printf_common+0x8e>
	...

08008c70 <_printf_i>:
 8008c70:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c74:	7e0f      	ldrb	r7, [r1, #24]
 8008c76:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c78:	2f78      	cmp	r7, #120	; 0x78
 8008c7a:	4691      	mov	r9, r2
 8008c7c:	4680      	mov	r8, r0
 8008c7e:	460c      	mov	r4, r1
 8008c80:	469a      	mov	sl, r3
 8008c82:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c86:	d807      	bhi.n	8008c98 <_printf_i+0x28>
 8008c88:	2f62      	cmp	r7, #98	; 0x62
 8008c8a:	d80a      	bhi.n	8008ca2 <_printf_i+0x32>
 8008c8c:	2f00      	cmp	r7, #0
 8008c8e:	f000 80d8 	beq.w	8008e42 <_printf_i+0x1d2>
 8008c92:	2f58      	cmp	r7, #88	; 0x58
 8008c94:	f000 80a3 	beq.w	8008dde <_printf_i+0x16e>
 8008c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c9c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008ca0:	e03a      	b.n	8008d18 <_printf_i+0xa8>
 8008ca2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ca6:	2b15      	cmp	r3, #21
 8008ca8:	d8f6      	bhi.n	8008c98 <_printf_i+0x28>
 8008caa:	a101      	add	r1, pc, #4	; (adr r1, 8008cb0 <_printf_i+0x40>)
 8008cac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cb0:	08008d09 	.word	0x08008d09
 8008cb4:	08008d1d 	.word	0x08008d1d
 8008cb8:	08008c99 	.word	0x08008c99
 8008cbc:	08008c99 	.word	0x08008c99
 8008cc0:	08008c99 	.word	0x08008c99
 8008cc4:	08008c99 	.word	0x08008c99
 8008cc8:	08008d1d 	.word	0x08008d1d
 8008ccc:	08008c99 	.word	0x08008c99
 8008cd0:	08008c99 	.word	0x08008c99
 8008cd4:	08008c99 	.word	0x08008c99
 8008cd8:	08008c99 	.word	0x08008c99
 8008cdc:	08008e29 	.word	0x08008e29
 8008ce0:	08008d4d 	.word	0x08008d4d
 8008ce4:	08008e0b 	.word	0x08008e0b
 8008ce8:	08008c99 	.word	0x08008c99
 8008cec:	08008c99 	.word	0x08008c99
 8008cf0:	08008e4b 	.word	0x08008e4b
 8008cf4:	08008c99 	.word	0x08008c99
 8008cf8:	08008d4d 	.word	0x08008d4d
 8008cfc:	08008c99 	.word	0x08008c99
 8008d00:	08008c99 	.word	0x08008c99
 8008d04:	08008e13 	.word	0x08008e13
 8008d08:	682b      	ldr	r3, [r5, #0]
 8008d0a:	1d1a      	adds	r2, r3, #4
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	602a      	str	r2, [r5, #0]
 8008d10:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d14:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d18:	2301      	movs	r3, #1
 8008d1a:	e0a3      	b.n	8008e64 <_printf_i+0x1f4>
 8008d1c:	6820      	ldr	r0, [r4, #0]
 8008d1e:	6829      	ldr	r1, [r5, #0]
 8008d20:	0606      	lsls	r6, r0, #24
 8008d22:	f101 0304 	add.w	r3, r1, #4
 8008d26:	d50a      	bpl.n	8008d3e <_printf_i+0xce>
 8008d28:	680e      	ldr	r6, [r1, #0]
 8008d2a:	602b      	str	r3, [r5, #0]
 8008d2c:	2e00      	cmp	r6, #0
 8008d2e:	da03      	bge.n	8008d38 <_printf_i+0xc8>
 8008d30:	232d      	movs	r3, #45	; 0x2d
 8008d32:	4276      	negs	r6, r6
 8008d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d38:	485e      	ldr	r0, [pc, #376]	; (8008eb4 <_printf_i+0x244>)
 8008d3a:	230a      	movs	r3, #10
 8008d3c:	e019      	b.n	8008d72 <_printf_i+0x102>
 8008d3e:	680e      	ldr	r6, [r1, #0]
 8008d40:	602b      	str	r3, [r5, #0]
 8008d42:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d46:	bf18      	it	ne
 8008d48:	b236      	sxthne	r6, r6
 8008d4a:	e7ef      	b.n	8008d2c <_printf_i+0xbc>
 8008d4c:	682b      	ldr	r3, [r5, #0]
 8008d4e:	6820      	ldr	r0, [r4, #0]
 8008d50:	1d19      	adds	r1, r3, #4
 8008d52:	6029      	str	r1, [r5, #0]
 8008d54:	0601      	lsls	r1, r0, #24
 8008d56:	d501      	bpl.n	8008d5c <_printf_i+0xec>
 8008d58:	681e      	ldr	r6, [r3, #0]
 8008d5a:	e002      	b.n	8008d62 <_printf_i+0xf2>
 8008d5c:	0646      	lsls	r6, r0, #25
 8008d5e:	d5fb      	bpl.n	8008d58 <_printf_i+0xe8>
 8008d60:	881e      	ldrh	r6, [r3, #0]
 8008d62:	4854      	ldr	r0, [pc, #336]	; (8008eb4 <_printf_i+0x244>)
 8008d64:	2f6f      	cmp	r7, #111	; 0x6f
 8008d66:	bf0c      	ite	eq
 8008d68:	2308      	moveq	r3, #8
 8008d6a:	230a      	movne	r3, #10
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d72:	6865      	ldr	r5, [r4, #4]
 8008d74:	60a5      	str	r5, [r4, #8]
 8008d76:	2d00      	cmp	r5, #0
 8008d78:	bfa2      	ittt	ge
 8008d7a:	6821      	ldrge	r1, [r4, #0]
 8008d7c:	f021 0104 	bicge.w	r1, r1, #4
 8008d80:	6021      	strge	r1, [r4, #0]
 8008d82:	b90e      	cbnz	r6, 8008d88 <_printf_i+0x118>
 8008d84:	2d00      	cmp	r5, #0
 8008d86:	d04d      	beq.n	8008e24 <_printf_i+0x1b4>
 8008d88:	4615      	mov	r5, r2
 8008d8a:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d8e:	fb03 6711 	mls	r7, r3, r1, r6
 8008d92:	5dc7      	ldrb	r7, [r0, r7]
 8008d94:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d98:	4637      	mov	r7, r6
 8008d9a:	42bb      	cmp	r3, r7
 8008d9c:	460e      	mov	r6, r1
 8008d9e:	d9f4      	bls.n	8008d8a <_printf_i+0x11a>
 8008da0:	2b08      	cmp	r3, #8
 8008da2:	d10b      	bne.n	8008dbc <_printf_i+0x14c>
 8008da4:	6823      	ldr	r3, [r4, #0]
 8008da6:	07de      	lsls	r6, r3, #31
 8008da8:	d508      	bpl.n	8008dbc <_printf_i+0x14c>
 8008daa:	6923      	ldr	r3, [r4, #16]
 8008dac:	6861      	ldr	r1, [r4, #4]
 8008dae:	4299      	cmp	r1, r3
 8008db0:	bfde      	ittt	le
 8008db2:	2330      	movle	r3, #48	; 0x30
 8008db4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008db8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008dbc:	1b52      	subs	r2, r2, r5
 8008dbe:	6122      	str	r2, [r4, #16]
 8008dc0:	f8cd a000 	str.w	sl, [sp]
 8008dc4:	464b      	mov	r3, r9
 8008dc6:	aa03      	add	r2, sp, #12
 8008dc8:	4621      	mov	r1, r4
 8008dca:	4640      	mov	r0, r8
 8008dcc:	f7ff fee2 	bl	8008b94 <_printf_common>
 8008dd0:	3001      	adds	r0, #1
 8008dd2:	d14c      	bne.n	8008e6e <_printf_i+0x1fe>
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	b004      	add	sp, #16
 8008dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dde:	4835      	ldr	r0, [pc, #212]	; (8008eb4 <_printf_i+0x244>)
 8008de0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008de4:	6829      	ldr	r1, [r5, #0]
 8008de6:	6823      	ldr	r3, [r4, #0]
 8008de8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008dec:	6029      	str	r1, [r5, #0]
 8008dee:	061d      	lsls	r5, r3, #24
 8008df0:	d514      	bpl.n	8008e1c <_printf_i+0x1ac>
 8008df2:	07df      	lsls	r7, r3, #31
 8008df4:	bf44      	itt	mi
 8008df6:	f043 0320 	orrmi.w	r3, r3, #32
 8008dfa:	6023      	strmi	r3, [r4, #0]
 8008dfc:	b91e      	cbnz	r6, 8008e06 <_printf_i+0x196>
 8008dfe:	6823      	ldr	r3, [r4, #0]
 8008e00:	f023 0320 	bic.w	r3, r3, #32
 8008e04:	6023      	str	r3, [r4, #0]
 8008e06:	2310      	movs	r3, #16
 8008e08:	e7b0      	b.n	8008d6c <_printf_i+0xfc>
 8008e0a:	6823      	ldr	r3, [r4, #0]
 8008e0c:	f043 0320 	orr.w	r3, r3, #32
 8008e10:	6023      	str	r3, [r4, #0]
 8008e12:	2378      	movs	r3, #120	; 0x78
 8008e14:	4828      	ldr	r0, [pc, #160]	; (8008eb8 <_printf_i+0x248>)
 8008e16:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e1a:	e7e3      	b.n	8008de4 <_printf_i+0x174>
 8008e1c:	0659      	lsls	r1, r3, #25
 8008e1e:	bf48      	it	mi
 8008e20:	b2b6      	uxthmi	r6, r6
 8008e22:	e7e6      	b.n	8008df2 <_printf_i+0x182>
 8008e24:	4615      	mov	r5, r2
 8008e26:	e7bb      	b.n	8008da0 <_printf_i+0x130>
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	6826      	ldr	r6, [r4, #0]
 8008e2c:	6961      	ldr	r1, [r4, #20]
 8008e2e:	1d18      	adds	r0, r3, #4
 8008e30:	6028      	str	r0, [r5, #0]
 8008e32:	0635      	lsls	r5, r6, #24
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	d501      	bpl.n	8008e3c <_printf_i+0x1cc>
 8008e38:	6019      	str	r1, [r3, #0]
 8008e3a:	e002      	b.n	8008e42 <_printf_i+0x1d2>
 8008e3c:	0670      	lsls	r0, r6, #25
 8008e3e:	d5fb      	bpl.n	8008e38 <_printf_i+0x1c8>
 8008e40:	8019      	strh	r1, [r3, #0]
 8008e42:	2300      	movs	r3, #0
 8008e44:	6123      	str	r3, [r4, #16]
 8008e46:	4615      	mov	r5, r2
 8008e48:	e7ba      	b.n	8008dc0 <_printf_i+0x150>
 8008e4a:	682b      	ldr	r3, [r5, #0]
 8008e4c:	1d1a      	adds	r2, r3, #4
 8008e4e:	602a      	str	r2, [r5, #0]
 8008e50:	681d      	ldr	r5, [r3, #0]
 8008e52:	6862      	ldr	r2, [r4, #4]
 8008e54:	2100      	movs	r1, #0
 8008e56:	4628      	mov	r0, r5
 8008e58:	f7f7 f9da 	bl	8000210 <memchr>
 8008e5c:	b108      	cbz	r0, 8008e62 <_printf_i+0x1f2>
 8008e5e:	1b40      	subs	r0, r0, r5
 8008e60:	6060      	str	r0, [r4, #4]
 8008e62:	6863      	ldr	r3, [r4, #4]
 8008e64:	6123      	str	r3, [r4, #16]
 8008e66:	2300      	movs	r3, #0
 8008e68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e6c:	e7a8      	b.n	8008dc0 <_printf_i+0x150>
 8008e6e:	6923      	ldr	r3, [r4, #16]
 8008e70:	462a      	mov	r2, r5
 8008e72:	4649      	mov	r1, r9
 8008e74:	4640      	mov	r0, r8
 8008e76:	47d0      	blx	sl
 8008e78:	3001      	adds	r0, #1
 8008e7a:	d0ab      	beq.n	8008dd4 <_printf_i+0x164>
 8008e7c:	6823      	ldr	r3, [r4, #0]
 8008e7e:	079b      	lsls	r3, r3, #30
 8008e80:	d413      	bmi.n	8008eaa <_printf_i+0x23a>
 8008e82:	68e0      	ldr	r0, [r4, #12]
 8008e84:	9b03      	ldr	r3, [sp, #12]
 8008e86:	4298      	cmp	r0, r3
 8008e88:	bfb8      	it	lt
 8008e8a:	4618      	movlt	r0, r3
 8008e8c:	e7a4      	b.n	8008dd8 <_printf_i+0x168>
 8008e8e:	2301      	movs	r3, #1
 8008e90:	4632      	mov	r2, r6
 8008e92:	4649      	mov	r1, r9
 8008e94:	4640      	mov	r0, r8
 8008e96:	47d0      	blx	sl
 8008e98:	3001      	adds	r0, #1
 8008e9a:	d09b      	beq.n	8008dd4 <_printf_i+0x164>
 8008e9c:	3501      	adds	r5, #1
 8008e9e:	68e3      	ldr	r3, [r4, #12]
 8008ea0:	9903      	ldr	r1, [sp, #12]
 8008ea2:	1a5b      	subs	r3, r3, r1
 8008ea4:	42ab      	cmp	r3, r5
 8008ea6:	dcf2      	bgt.n	8008e8e <_printf_i+0x21e>
 8008ea8:	e7eb      	b.n	8008e82 <_printf_i+0x212>
 8008eaa:	2500      	movs	r5, #0
 8008eac:	f104 0619 	add.w	r6, r4, #25
 8008eb0:	e7f5      	b.n	8008e9e <_printf_i+0x22e>
 8008eb2:	bf00      	nop
 8008eb4:	08009211 	.word	0x08009211
 8008eb8:	08009222 	.word	0x08009222

08008ebc <memcpy>:
 8008ebc:	440a      	add	r2, r1
 8008ebe:	4291      	cmp	r1, r2
 8008ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ec4:	d100      	bne.n	8008ec8 <memcpy+0xc>
 8008ec6:	4770      	bx	lr
 8008ec8:	b510      	push	{r4, lr}
 8008eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ed2:	4291      	cmp	r1, r2
 8008ed4:	d1f9      	bne.n	8008eca <memcpy+0xe>
 8008ed6:	bd10      	pop	{r4, pc}

08008ed8 <memmove>:
 8008ed8:	4288      	cmp	r0, r1
 8008eda:	b510      	push	{r4, lr}
 8008edc:	eb01 0402 	add.w	r4, r1, r2
 8008ee0:	d902      	bls.n	8008ee8 <memmove+0x10>
 8008ee2:	4284      	cmp	r4, r0
 8008ee4:	4623      	mov	r3, r4
 8008ee6:	d807      	bhi.n	8008ef8 <memmove+0x20>
 8008ee8:	1e43      	subs	r3, r0, #1
 8008eea:	42a1      	cmp	r1, r4
 8008eec:	d008      	beq.n	8008f00 <memmove+0x28>
 8008eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ef6:	e7f8      	b.n	8008eea <memmove+0x12>
 8008ef8:	4402      	add	r2, r0
 8008efa:	4601      	mov	r1, r0
 8008efc:	428a      	cmp	r2, r1
 8008efe:	d100      	bne.n	8008f02 <memmove+0x2a>
 8008f00:	bd10      	pop	{r4, pc}
 8008f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f0a:	e7f7      	b.n	8008efc <memmove+0x24>

08008f0c <_free_r>:
 8008f0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f0e:	2900      	cmp	r1, #0
 8008f10:	d044      	beq.n	8008f9c <_free_r+0x90>
 8008f12:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f16:	9001      	str	r0, [sp, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	f1a1 0404 	sub.w	r4, r1, #4
 8008f1e:	bfb8      	it	lt
 8008f20:	18e4      	addlt	r4, r4, r3
 8008f22:	f000 f913 	bl	800914c <__malloc_lock>
 8008f26:	4a1e      	ldr	r2, [pc, #120]	; (8008fa0 <_free_r+0x94>)
 8008f28:	9801      	ldr	r0, [sp, #4]
 8008f2a:	6813      	ldr	r3, [r2, #0]
 8008f2c:	b933      	cbnz	r3, 8008f3c <_free_r+0x30>
 8008f2e:	6063      	str	r3, [r4, #4]
 8008f30:	6014      	str	r4, [r2, #0]
 8008f32:	b003      	add	sp, #12
 8008f34:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f38:	f000 b90e 	b.w	8009158 <__malloc_unlock>
 8008f3c:	42a3      	cmp	r3, r4
 8008f3e:	d908      	bls.n	8008f52 <_free_r+0x46>
 8008f40:	6825      	ldr	r5, [r4, #0]
 8008f42:	1961      	adds	r1, r4, r5
 8008f44:	428b      	cmp	r3, r1
 8008f46:	bf01      	itttt	eq
 8008f48:	6819      	ldreq	r1, [r3, #0]
 8008f4a:	685b      	ldreq	r3, [r3, #4]
 8008f4c:	1949      	addeq	r1, r1, r5
 8008f4e:	6021      	streq	r1, [r4, #0]
 8008f50:	e7ed      	b.n	8008f2e <_free_r+0x22>
 8008f52:	461a      	mov	r2, r3
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	b10b      	cbz	r3, 8008f5c <_free_r+0x50>
 8008f58:	42a3      	cmp	r3, r4
 8008f5a:	d9fa      	bls.n	8008f52 <_free_r+0x46>
 8008f5c:	6811      	ldr	r1, [r2, #0]
 8008f5e:	1855      	adds	r5, r2, r1
 8008f60:	42a5      	cmp	r5, r4
 8008f62:	d10b      	bne.n	8008f7c <_free_r+0x70>
 8008f64:	6824      	ldr	r4, [r4, #0]
 8008f66:	4421      	add	r1, r4
 8008f68:	1854      	adds	r4, r2, r1
 8008f6a:	42a3      	cmp	r3, r4
 8008f6c:	6011      	str	r1, [r2, #0]
 8008f6e:	d1e0      	bne.n	8008f32 <_free_r+0x26>
 8008f70:	681c      	ldr	r4, [r3, #0]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	6053      	str	r3, [r2, #4]
 8008f76:	4421      	add	r1, r4
 8008f78:	6011      	str	r1, [r2, #0]
 8008f7a:	e7da      	b.n	8008f32 <_free_r+0x26>
 8008f7c:	d902      	bls.n	8008f84 <_free_r+0x78>
 8008f7e:	230c      	movs	r3, #12
 8008f80:	6003      	str	r3, [r0, #0]
 8008f82:	e7d6      	b.n	8008f32 <_free_r+0x26>
 8008f84:	6825      	ldr	r5, [r4, #0]
 8008f86:	1961      	adds	r1, r4, r5
 8008f88:	428b      	cmp	r3, r1
 8008f8a:	bf04      	itt	eq
 8008f8c:	6819      	ldreq	r1, [r3, #0]
 8008f8e:	685b      	ldreq	r3, [r3, #4]
 8008f90:	6063      	str	r3, [r4, #4]
 8008f92:	bf04      	itt	eq
 8008f94:	1949      	addeq	r1, r1, r5
 8008f96:	6021      	streq	r1, [r4, #0]
 8008f98:	6054      	str	r4, [r2, #4]
 8008f9a:	e7ca      	b.n	8008f32 <_free_r+0x26>
 8008f9c:	b003      	add	sp, #12
 8008f9e:	bd30      	pop	{r4, r5, pc}
 8008fa0:	2004eb24 	.word	0x2004eb24

08008fa4 <sbrk_aligned>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	4e0e      	ldr	r6, [pc, #56]	; (8008fe0 <sbrk_aligned+0x3c>)
 8008fa8:	460c      	mov	r4, r1
 8008faa:	6831      	ldr	r1, [r6, #0]
 8008fac:	4605      	mov	r5, r0
 8008fae:	b911      	cbnz	r1, 8008fb6 <sbrk_aligned+0x12>
 8008fb0:	f000 f8bc 	bl	800912c <_sbrk_r>
 8008fb4:	6030      	str	r0, [r6, #0]
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	4628      	mov	r0, r5
 8008fba:	f000 f8b7 	bl	800912c <_sbrk_r>
 8008fbe:	1c43      	adds	r3, r0, #1
 8008fc0:	d00a      	beq.n	8008fd8 <sbrk_aligned+0x34>
 8008fc2:	1cc4      	adds	r4, r0, #3
 8008fc4:	f024 0403 	bic.w	r4, r4, #3
 8008fc8:	42a0      	cmp	r0, r4
 8008fca:	d007      	beq.n	8008fdc <sbrk_aligned+0x38>
 8008fcc:	1a21      	subs	r1, r4, r0
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f000 f8ac 	bl	800912c <_sbrk_r>
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d101      	bne.n	8008fdc <sbrk_aligned+0x38>
 8008fd8:	f04f 34ff 	mov.w	r4, #4294967295
 8008fdc:	4620      	mov	r0, r4
 8008fde:	bd70      	pop	{r4, r5, r6, pc}
 8008fe0:	2004eb28 	.word	0x2004eb28

08008fe4 <_malloc_r>:
 8008fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fe8:	1ccd      	adds	r5, r1, #3
 8008fea:	f025 0503 	bic.w	r5, r5, #3
 8008fee:	3508      	adds	r5, #8
 8008ff0:	2d0c      	cmp	r5, #12
 8008ff2:	bf38      	it	cc
 8008ff4:	250c      	movcc	r5, #12
 8008ff6:	2d00      	cmp	r5, #0
 8008ff8:	4607      	mov	r7, r0
 8008ffa:	db01      	blt.n	8009000 <_malloc_r+0x1c>
 8008ffc:	42a9      	cmp	r1, r5
 8008ffe:	d905      	bls.n	800900c <_malloc_r+0x28>
 8009000:	230c      	movs	r3, #12
 8009002:	603b      	str	r3, [r7, #0]
 8009004:	2600      	movs	r6, #0
 8009006:	4630      	mov	r0, r6
 8009008:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800900c:	4e2e      	ldr	r6, [pc, #184]	; (80090c8 <_malloc_r+0xe4>)
 800900e:	f000 f89d 	bl	800914c <__malloc_lock>
 8009012:	6833      	ldr	r3, [r6, #0]
 8009014:	461c      	mov	r4, r3
 8009016:	bb34      	cbnz	r4, 8009066 <_malloc_r+0x82>
 8009018:	4629      	mov	r1, r5
 800901a:	4638      	mov	r0, r7
 800901c:	f7ff ffc2 	bl	8008fa4 <sbrk_aligned>
 8009020:	1c43      	adds	r3, r0, #1
 8009022:	4604      	mov	r4, r0
 8009024:	d14d      	bne.n	80090c2 <_malloc_r+0xde>
 8009026:	6834      	ldr	r4, [r6, #0]
 8009028:	4626      	mov	r6, r4
 800902a:	2e00      	cmp	r6, #0
 800902c:	d140      	bne.n	80090b0 <_malloc_r+0xcc>
 800902e:	6823      	ldr	r3, [r4, #0]
 8009030:	4631      	mov	r1, r6
 8009032:	4638      	mov	r0, r7
 8009034:	eb04 0803 	add.w	r8, r4, r3
 8009038:	f000 f878 	bl	800912c <_sbrk_r>
 800903c:	4580      	cmp	r8, r0
 800903e:	d13a      	bne.n	80090b6 <_malloc_r+0xd2>
 8009040:	6821      	ldr	r1, [r4, #0]
 8009042:	3503      	adds	r5, #3
 8009044:	1a6d      	subs	r5, r5, r1
 8009046:	f025 0503 	bic.w	r5, r5, #3
 800904a:	3508      	adds	r5, #8
 800904c:	2d0c      	cmp	r5, #12
 800904e:	bf38      	it	cc
 8009050:	250c      	movcc	r5, #12
 8009052:	4629      	mov	r1, r5
 8009054:	4638      	mov	r0, r7
 8009056:	f7ff ffa5 	bl	8008fa4 <sbrk_aligned>
 800905a:	3001      	adds	r0, #1
 800905c:	d02b      	beq.n	80090b6 <_malloc_r+0xd2>
 800905e:	6823      	ldr	r3, [r4, #0]
 8009060:	442b      	add	r3, r5
 8009062:	6023      	str	r3, [r4, #0]
 8009064:	e00e      	b.n	8009084 <_malloc_r+0xa0>
 8009066:	6822      	ldr	r2, [r4, #0]
 8009068:	1b52      	subs	r2, r2, r5
 800906a:	d41e      	bmi.n	80090aa <_malloc_r+0xc6>
 800906c:	2a0b      	cmp	r2, #11
 800906e:	d916      	bls.n	800909e <_malloc_r+0xba>
 8009070:	1961      	adds	r1, r4, r5
 8009072:	42a3      	cmp	r3, r4
 8009074:	6025      	str	r5, [r4, #0]
 8009076:	bf18      	it	ne
 8009078:	6059      	strne	r1, [r3, #4]
 800907a:	6863      	ldr	r3, [r4, #4]
 800907c:	bf08      	it	eq
 800907e:	6031      	streq	r1, [r6, #0]
 8009080:	5162      	str	r2, [r4, r5]
 8009082:	604b      	str	r3, [r1, #4]
 8009084:	4638      	mov	r0, r7
 8009086:	f104 060b 	add.w	r6, r4, #11
 800908a:	f000 f865 	bl	8009158 <__malloc_unlock>
 800908e:	f026 0607 	bic.w	r6, r6, #7
 8009092:	1d23      	adds	r3, r4, #4
 8009094:	1af2      	subs	r2, r6, r3
 8009096:	d0b6      	beq.n	8009006 <_malloc_r+0x22>
 8009098:	1b9b      	subs	r3, r3, r6
 800909a:	50a3      	str	r3, [r4, r2]
 800909c:	e7b3      	b.n	8009006 <_malloc_r+0x22>
 800909e:	6862      	ldr	r2, [r4, #4]
 80090a0:	42a3      	cmp	r3, r4
 80090a2:	bf0c      	ite	eq
 80090a4:	6032      	streq	r2, [r6, #0]
 80090a6:	605a      	strne	r2, [r3, #4]
 80090a8:	e7ec      	b.n	8009084 <_malloc_r+0xa0>
 80090aa:	4623      	mov	r3, r4
 80090ac:	6864      	ldr	r4, [r4, #4]
 80090ae:	e7b2      	b.n	8009016 <_malloc_r+0x32>
 80090b0:	4634      	mov	r4, r6
 80090b2:	6876      	ldr	r6, [r6, #4]
 80090b4:	e7b9      	b.n	800902a <_malloc_r+0x46>
 80090b6:	230c      	movs	r3, #12
 80090b8:	603b      	str	r3, [r7, #0]
 80090ba:	4638      	mov	r0, r7
 80090bc:	f000 f84c 	bl	8009158 <__malloc_unlock>
 80090c0:	e7a1      	b.n	8009006 <_malloc_r+0x22>
 80090c2:	6025      	str	r5, [r4, #0]
 80090c4:	e7de      	b.n	8009084 <_malloc_r+0xa0>
 80090c6:	bf00      	nop
 80090c8:	2004eb24 	.word	0x2004eb24

080090cc <_realloc_r>:
 80090cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d0:	4680      	mov	r8, r0
 80090d2:	4614      	mov	r4, r2
 80090d4:	460e      	mov	r6, r1
 80090d6:	b921      	cbnz	r1, 80090e2 <_realloc_r+0x16>
 80090d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090dc:	4611      	mov	r1, r2
 80090de:	f7ff bf81 	b.w	8008fe4 <_malloc_r>
 80090e2:	b92a      	cbnz	r2, 80090f0 <_realloc_r+0x24>
 80090e4:	f7ff ff12 	bl	8008f0c <_free_r>
 80090e8:	4625      	mov	r5, r4
 80090ea:	4628      	mov	r0, r5
 80090ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090f0:	f000 f838 	bl	8009164 <_malloc_usable_size_r>
 80090f4:	4284      	cmp	r4, r0
 80090f6:	4607      	mov	r7, r0
 80090f8:	d802      	bhi.n	8009100 <_realloc_r+0x34>
 80090fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80090fe:	d812      	bhi.n	8009126 <_realloc_r+0x5a>
 8009100:	4621      	mov	r1, r4
 8009102:	4640      	mov	r0, r8
 8009104:	f7ff ff6e 	bl	8008fe4 <_malloc_r>
 8009108:	4605      	mov	r5, r0
 800910a:	2800      	cmp	r0, #0
 800910c:	d0ed      	beq.n	80090ea <_realloc_r+0x1e>
 800910e:	42bc      	cmp	r4, r7
 8009110:	4622      	mov	r2, r4
 8009112:	4631      	mov	r1, r6
 8009114:	bf28      	it	cs
 8009116:	463a      	movcs	r2, r7
 8009118:	f7ff fed0 	bl	8008ebc <memcpy>
 800911c:	4631      	mov	r1, r6
 800911e:	4640      	mov	r0, r8
 8009120:	f7ff fef4 	bl	8008f0c <_free_r>
 8009124:	e7e1      	b.n	80090ea <_realloc_r+0x1e>
 8009126:	4635      	mov	r5, r6
 8009128:	e7df      	b.n	80090ea <_realloc_r+0x1e>
	...

0800912c <_sbrk_r>:
 800912c:	b538      	push	{r3, r4, r5, lr}
 800912e:	4d06      	ldr	r5, [pc, #24]	; (8009148 <_sbrk_r+0x1c>)
 8009130:	2300      	movs	r3, #0
 8009132:	4604      	mov	r4, r0
 8009134:	4608      	mov	r0, r1
 8009136:	602b      	str	r3, [r5, #0]
 8009138:	f7ff fb0c 	bl	8008754 <_sbrk>
 800913c:	1c43      	adds	r3, r0, #1
 800913e:	d102      	bne.n	8009146 <_sbrk_r+0x1a>
 8009140:	682b      	ldr	r3, [r5, #0]
 8009142:	b103      	cbz	r3, 8009146 <_sbrk_r+0x1a>
 8009144:	6023      	str	r3, [r4, #0]
 8009146:	bd38      	pop	{r3, r4, r5, pc}
 8009148:	2004eb2c 	.word	0x2004eb2c

0800914c <__malloc_lock>:
 800914c:	4801      	ldr	r0, [pc, #4]	; (8009154 <__malloc_lock+0x8>)
 800914e:	f000 b811 	b.w	8009174 <__retarget_lock_acquire_recursive>
 8009152:	bf00      	nop
 8009154:	2004eb30 	.word	0x2004eb30

08009158 <__malloc_unlock>:
 8009158:	4801      	ldr	r0, [pc, #4]	; (8009160 <__malloc_unlock+0x8>)
 800915a:	f000 b80c 	b.w	8009176 <__retarget_lock_release_recursive>
 800915e:	bf00      	nop
 8009160:	2004eb30 	.word	0x2004eb30

08009164 <_malloc_usable_size_r>:
 8009164:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009168:	1f18      	subs	r0, r3, #4
 800916a:	2b00      	cmp	r3, #0
 800916c:	bfbc      	itt	lt
 800916e:	580b      	ldrlt	r3, [r1, r0]
 8009170:	18c0      	addlt	r0, r0, r3
 8009172:	4770      	bx	lr

08009174 <__retarget_lock_acquire_recursive>:
 8009174:	4770      	bx	lr

08009176 <__retarget_lock_release_recursive>:
 8009176:	4770      	bx	lr

08009178 <_init>:
 8009178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800917a:	bf00      	nop
 800917c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800917e:	bc08      	pop	{r3}
 8009180:	469e      	mov	lr, r3
 8009182:	4770      	bx	lr

08009184 <_fini>:
 8009184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009186:	bf00      	nop
 8009188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800918a:	bc08      	pop	{r3}
 800918c:	469e      	mov	lr, r3
 800918e:	4770      	bx	lr
