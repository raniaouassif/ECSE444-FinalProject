
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009500  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080096bc  080096bc  000196bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800972c  0800972c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800972c  0800972c  0001972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009734  08009734  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009734  08009734  00019734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009738  08009738  00019738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800973c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00052490  20000074  080097b0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20052504  080097b0  00022504  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000222cb  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003c51  00000000  00000000  0004236f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001b18  00000000  00000000  00045fc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000019a0  00000000  00000000  00047ad8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e12e  00000000  00000000  00049478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f957  00000000  00000000  000775a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011a6ab  00000000  00000000  00096efd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001b15a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000073bc  00000000  00000000  001b1670  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000363  00000000  00000000  001b8a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000074 	.word	0x20000074
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080096a4 	.word	0x080096a4

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000078 	.word	0x20000078
 80001f8:	080096a4 	.word	0x080096a4

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050a:	2003      	movs	r0, #3
 800050c:	f000 f960 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000510:	2000      	movs	r0, #0
 8000512:	f000 f80d 	bl	8000530 <HAL_InitTick>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800051c:	2301      	movs	r3, #1
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	e001      	b.n	8000526 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000522:	f008 fc47 	bl	8008db4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000526:	79fb      	ldrb	r3, [r7, #7]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800053c:	4b17      	ldr	r3, [pc, #92]	; (800059c <HAL_InitTick+0x6c>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d023      	beq.n	800058c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <HAL_InitTick+0x70>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <HAL_InitTick+0x6c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	fbb3 f3f1 	udiv	r3, r3, r1
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f96d 	bl	800083a <HAL_SYSTICK_Config>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d10f      	bne.n	8000586 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b0f      	cmp	r3, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	2200      	movs	r2, #0
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000574:	f000 f937 	bl	80007e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <HAL_InitTick+0x74>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	e007      	b.n	8000590 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	e004      	b.n	8000590 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	e001      	b.n	8000590 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000590:	7bfb      	ldrb	r3, [r7, #15]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	20000070 	.word	0x20000070
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	20000090 	.word	0x20000090

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	20000090 	.word	0x20000090

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_Delay+0x44>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0b      	blt.n	80006be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <__NVIC_EnableIRQ+0x38>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db0a      	blt.n	80006fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	490c      	ldr	r1, [pc, #48]	; (800071c <__NVIC_SetPriority+0x4c>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f8:	e00a      	b.n	8000710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4908      	ldr	r1, [pc, #32]	; (8000720 <__NVIC_SetPriority+0x50>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	3b04      	subs	r3, #4
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	440b      	add	r3, r1
 800070e:	761a      	strb	r2, [r3, #24]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	; 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2b04      	cmp	r3, #4
 8000740:	bf28      	it	cs
 8000742:	2304      	movcs	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3304      	adds	r3, #4
 800074a:	2b06      	cmp	r3, #6
 800074c:	d902      	bls.n	8000754 <NVIC_EncodePriority+0x30>
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3b03      	subs	r3, #3
 8000752:	e000      	b.n	8000756 <NVIC_EncodePriority+0x32>
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	43da      	mvns	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	401a      	ands	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43d9      	mvns	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4313      	orrs	r3, r2
         );
}
 800077e:	4618      	mov	r0, r3
 8000780:	3724      	adds	r7, #36	; 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800079c:	d301      	bcc.n	80007a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079e:	2301      	movs	r3, #1
 80007a0:	e00f      	b.n	80007c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <SysTick_Config+0x40>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007aa:	210f      	movs	r1, #15
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b0:	f7ff ff8e 	bl	80006d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <SysTick_Config+0x40>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SysTick_Config+0x40>)
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff29 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007f8:	f7ff ff3e 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	6978      	ldr	r0, [r7, #20]
 8000804:	f7ff ff8e 	bl	8000724 <NVIC_EncodePriority>
 8000808:	4602      	mov	r2, r0
 800080a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff5d 	bl	80006d0 <__NVIC_SetPriority>
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff31 	bl	8000694 <__NVIC_EnableIRQ>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffa2 	bl	800078c <SysTick_Config>
 8000848:	4603      	mov	r3, r0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d101      	bne.n	8000864 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e014      	b.n	800088e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d105      	bne.n	800087a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f008 fac1 	bl	8008dfc <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2202      	movs	r2, #2
 800087e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2201      	movs	r2, #1
 800088a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	795b      	ldrb	r3, [r3, #5]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d101      	bne.n	80008b6 <HAL_DAC_Start_DMA+0x1e>
 80008b2:	2302      	movs	r3, #2
 80008b4:	e0ab      	b.n	8000a0e <HAL_DAC_Start_DMA+0x176>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2201      	movs	r2, #1
 80008ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2202      	movs	r2, #2
 80008c0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d12f      	bne.n	8000928 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	4a52      	ldr	r2, [pc, #328]	; (8000a18 <HAL_DAC_Start_DMA+0x180>)
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4a51      	ldr	r2, [pc, #324]	; (8000a1c <HAL_DAC_Start_DMA+0x184>)
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	4a50      	ldr	r2, [pc, #320]	; (8000a20 <HAL_DAC_Start_DMA+0x188>)
 80008de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008ee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	2b08      	cmp	r3, #8
 80008f4:	d013      	beq.n	800091e <HAL_DAC_Start_DMA+0x86>
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	2b08      	cmp	r3, #8
 80008fa:	d845      	bhi.n	8000988 <HAL_DAC_Start_DMA+0xf0>
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <HAL_DAC_Start_DMA+0x72>
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	2b04      	cmp	r3, #4
 8000906:	d005      	beq.n	8000914 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000908:	e03e      	b.n	8000988 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3308      	adds	r3, #8
 8000910:	613b      	str	r3, [r7, #16]
        break;
 8000912:	e03c      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	330c      	adds	r3, #12
 800091a:	613b      	str	r3, [r7, #16]
        break;
 800091c:	e037      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3310      	adds	r3, #16
 8000924:	613b      	str	r3, [r7, #16]
        break;
 8000926:	e032      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	4a3d      	ldr	r2, [pc, #244]	; (8000a24 <HAL_DAC_Start_DMA+0x18c>)
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4a3c      	ldr	r2, [pc, #240]	; (8000a28 <HAL_DAC_Start_DMA+0x190>)
 8000936:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	4a3b      	ldr	r2, [pc, #236]	; (8000a2c <HAL_DAC_Start_DMA+0x194>)
 800093e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800094e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	2b08      	cmp	r3, #8
 8000954:	d013      	beq.n	800097e <HAL_DAC_Start_DMA+0xe6>
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	2b08      	cmp	r3, #8
 800095a:	d817      	bhi.n	800098c <HAL_DAC_Start_DMA+0xf4>
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <HAL_DAC_Start_DMA+0xd2>
 8000962:	6a3b      	ldr	r3, [r7, #32]
 8000964:	2b04      	cmp	r3, #4
 8000966:	d005      	beq.n	8000974 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000968:	e010      	b.n	800098c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3314      	adds	r3, #20
 8000970:	613b      	str	r3, [r7, #16]
        break;
 8000972:	e00c      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3318      	adds	r3, #24
 800097a:	613b      	str	r3, [r7, #16]
        break;
 800097c:	e007      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	331c      	adds	r3, #28
 8000984:	613b      	str	r3, [r7, #16]
        break;
 8000986:	e002      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        break;
 8000988:	bf00      	nop
 800098a:	e000      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        break;
 800098c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d111      	bne.n	80009b8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	6898      	ldr	r0, [r3, #8]
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	f000 febf 	bl	8001730 <HAL_DMA_Start_IT>
 80009b2:	4603      	mov	r3, r0
 80009b4:	75fb      	strb	r3, [r7, #23]
 80009b6:	e010      	b.n	80009da <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80009c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	68d8      	ldr	r0, [r3, #12]
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	f000 fead 	bl	8001730 <HAL_DMA_Start_IT>
 80009d6:	4603      	mov	r3, r0
 80009d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2200      	movs	r2, #0
 80009de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10c      	bne.n	8000a00 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6819      	ldr	r1, [r3, #0]
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	2201      	movs	r2, #1
 80009f4:	409a      	lsls	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	430a      	orrs	r2, r1
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	e005      	b.n	8000a0c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	f043 0204 	orr.w	r2, r3, #4
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	08000d65 	.word	0x08000d65
 8000a1c:	08000d87 	.word	0x08000d87
 8000a20:	08000da3 	.word	0x08000da3
 8000a24:	08000e0d 	.word	0x08000e0d
 8000a28:	08000e2f 	.word	0x08000e2f
 8000a2c:	08000e4b 	.word	0x08000e4b

08000a30 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6819      	ldr	r1, [r3, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	f003 0310 	and.w	r3, r3, #16
 8000a46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	400a      	ands	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6819      	ldr	r1, [r3, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	2201      	movs	r2, #1
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	400a      	ands	r2, r1
 8000a72:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10d      	bne.n	8000a96 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 fed1 	bl	8001826 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	e00c      	b.n	8000ab0 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fec3 	bl	8001826 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000aae:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	795b      	ldrb	r3, [r3, #5]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d101      	bne.n	8000b00 <HAL_DAC_ConfigChannel+0x1c>
 8000afc:	2302      	movs	r3, #2
 8000afe:	e12a      	b.n	8000d56 <HAL_DAC_ConfigChannel+0x272>
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2201      	movs	r2, #1
 8000b04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2202      	movs	r2, #2
 8000b0a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d174      	bne.n	8000bfe <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000b14:	f7ff fd5c 	bl	80005d0 <HAL_GetTick>
 8000b18:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d134      	bne.n	8000b8a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b20:	e011      	b.n	8000b46 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b22:	f7ff fd55 	bl	80005d0 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d90a      	bls.n	8000b46 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	691b      	ldr	r3, [r3, #16]
 8000b34:	f043 0208 	orr.w	r2, r3, #8
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2203      	movs	r2, #3
 8000b40:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b42:	2303      	movs	r3, #3
 8000b44:	e107      	b.n	8000d56 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1e6      	bne.n	8000b22 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f7ff fd47 	bl	80005e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	69d2      	ldr	r2, [r2, #28]
 8000b62:	641a      	str	r2, [r3, #64]	; 0x40
 8000b64:	e01e      	b.n	8000ba4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b66:	f7ff fd33 	bl	80005d0 <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d90a      	bls.n	8000b8a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	f043 0208 	orr.w	r2, r3, #8
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2203      	movs	r2, #3
 8000b84:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b86:	2303      	movs	r3, #3
 8000b88:	e0e5      	b.n	8000d56 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	dbe8      	blt.n	8000b66 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f7ff fd27 	bl	80005e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	69d2      	ldr	r2, [r2, #28]
 8000ba2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	ea02 0103 	and.w	r1, r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	6a1a      	ldr	r2, [r3, #32]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	21ff      	movs	r1, #255	; 0xff
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	ea02 0103 	and.w	r1, r2, r3
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	409a      	lsls	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d11d      	bne.n	8000c42 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c0c:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	221f      	movs	r2, #31
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	69fa      	ldr	r2, [r7, #28]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69fa      	ldr	r2, [r7, #28]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	69fa      	ldr	r2, [r7, #28]
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c48:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	2207      	movs	r2, #7
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69fa      	ldr	r2, [r7, #28]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	431a      	orrs	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69fa      	ldr	r2, [r7, #28]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6819      	ldr	r1, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0310 	and.w	r3, r3, #16
 8000c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	400a      	ands	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69fa      	ldr	r2, [r7, #28]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69fa      	ldr	r2, [r7, #28]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ce6:	d104      	bne.n	8000cf2 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cee:	61fb      	str	r3, [r7, #28]
 8000cf0:	e018      	b.n	8000d24 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d104      	bne.n	8000d04 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d00:	61fb      	str	r3, [r7, #28]
 8000d02:	e00f      	b.n	8000d24 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000d04:	f003 ffb2 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8000d08:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <HAL_DAC_ConfigChannel+0x27c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d904      	bls.n	8000d1c <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e003      	b.n	8000d24 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d22:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	69fa      	ldr	r2, [r7, #28]
 8000d2a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6819      	ldr	r1, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f003 0310 	and.w	r3, r3, #16
 8000d38:	22c0      	movs	r2, #192	; 0xc0
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	400a      	ands	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2200      	movs	r2, #0
 8000d52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	04c4b400 	.word	0x04c4b400

08000d64 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f007 f92a 	bl	8007fcc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	711a      	strb	r2, [r3, #4]
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f7ff fe90 	bl	8000aba <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b084      	sub	sp, #16
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	f043 0204 	orr.w	r2, r3, #4
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f7ff fe86 	bl	8000ace <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	711a      	strb	r2, [r3, #4]
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f7ff ffd8 	bl	8000dd0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2201      	movs	r2, #1
 8000e24:	711a      	strb	r2, [r3, #4]
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f7ff ffd1 	bl	8000de4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e56:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	f043 0204 	orr.w	r2, r3, #4
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f7ff ffc7 	bl	8000df8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	711a      	strb	r2, [r3, #4]
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e0ac      	b.n	8000fe4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fab6 	bl	8001400 <DFSDM_GetChannelFromInstance>
 8000e94:	4603      	mov	r3, r0
 8000e96:	4a55      	ldr	r2, [pc, #340]	; (8000fec <HAL_DFSDM_ChannelInit+0x174>)
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e09f      	b.n	8000fe4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f008 f8c3 	bl	8009030 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000eaa:	4b51      	ldr	r3, [pc, #324]	; (8000ff0 <HAL_DFSDM_ChannelInit+0x178>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <HAL_DFSDM_ChannelInit+0x178>)
 8000eb2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000eb4:	4b4e      	ldr	r3, [pc, #312]	; (8000ff0 <HAL_DFSDM_ChannelInit+0x178>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d125      	bne.n	8000f08 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000ebc:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a4c      	ldr	r2, [pc, #304]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ec2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000ec6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000ec8:	4b4a      	ldr	r3, [pc, #296]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	4948      	ldr	r1, [pc, #288]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000ed6:	4b47      	ldr	r3, [pc, #284]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a46      	ldr	r2, [pc, #280]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000edc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000ee0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	791b      	ldrb	r3, [r3, #4]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d108      	bne.n	8000efc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000eea:	4b42      	ldr	r3, [pc, #264]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	041b      	lsls	r3, r3, #16
 8000ef6:	493f      	ldr	r1, [pc, #252]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000efc:	4b3d      	ldr	r3, [pc, #244]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a3c      	ldr	r2, [pc, #240]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f06:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000f16:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6819      	ldr	r1, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f26:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f2c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 020f 	bic.w	r2, r2, #15
 8000f44:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6819      	ldr	r1, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f54:	431a      	orrs	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000f6c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6899      	ldr	r1, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f002 0207 	and.w	r2, r2, #7
 8000f98:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6859      	ldr	r1, [r3, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fc4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fa14 	bl	8001400 <DFSDM_GetChannelFromInstance>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4904      	ldr	r1, [pc, #16]	; (8000fec <HAL_DFSDM_ChannelInit+0x174>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000098 	.word	0x20000098
 8000ff0:	20000094 	.word	0x20000094
 8000ff4:	40016000 	.word	0x40016000

08000ff8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e0ca      	b.n	80011a0 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a66      	ldr	r2, [pc, #408]	; (80011a8 <HAL_DFSDM_FilterInit+0x1b0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d109      	bne.n	8001028 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001018:	2b01      	cmp	r3, #1
 800101a:	d003      	beq.n	8001024 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001020:	2b01      	cmp	r3, #1
 8001022:	d101      	bne.n	8001028 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e0bb      	b.n	80011a0 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f007 ff49 	bl	8008ed8 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001054:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	7a1b      	ldrb	r3, [r3, #8]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d108      	bne.n	8001070 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e007      	b.n	8001080 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800107e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7a5b      	ldrb	r3, [r3, #9]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d108      	bne.n	800109a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e007      	b.n	80010aa <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80010b8:	f023 0308 	bic.w	r3, r3, #8
 80010bc:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d108      	bne.n	80010d8 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6819      	ldr	r1, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7c1b      	ldrb	r3, [r3, #16]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d108      	bne.n	80010f2 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0210 	orr.w	r2, r2, #16
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e007      	b.n	8001102 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0210 	bic.w	r2, r2, #16
 8001100:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7c5b      	ldrb	r3, [r3, #17]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d108      	bne.n	800111c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 0220 	orr.w	r2, r2, #32
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e007      	b.n	800112c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0220 	bic.w	r2, r2, #32
 800112a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800113a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800113e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6959      	ldr	r1, [r3, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	3b01      	subs	r3, #1
 8001150:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001152:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800115a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699a      	ldr	r2, [r3, #24]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7c1a      	ldrb	r2, [r3, #16]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0201 	orr.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40016100 	.word	0x40016100

080011ac <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d02e      	beq.n	8001224 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80011cc:	2bff      	cmp	r3, #255	; 0xff
 80011ce:	d029      	beq.n	8001224 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10d      	bne.n	8001206 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80011f8:	431a      	orrs	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e00a      	b.n	800121c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6819      	ldr	r1, [r3, #0]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
 8001222:	e001      	b.n	8001228 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001228:	7dfb      	ldrb	r3, [r7, #23]
}
 800122a:	4618      	mov	r0, r3
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	75fb      	strb	r3, [r7, #23]
 8001258:	e064      	b.n	8001324 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001264:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001268:	d002      	beq.n	8001270 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
 800126e:	e059      	b.n	8001324 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10e      	bne.n	8001296 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10a      	bne.n	8001296 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001286:	2b00      	cmp	r3, #0
 8001288:	d105      	bne.n	8001296 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d002      	beq.n	8001296 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	75fb      	strb	r3, [r7, #23]
 8001294:	e046      	b.n	8001324 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10b      	bne.n	80012b6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d107      	bne.n	80012b6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012ac:	2b20      	cmp	r3, #32
 80012ae:	d102      	bne.n	80012b6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	75fb      	strb	r3, [r7, #23]
 80012b4:	e036      	b.n	8001324 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d004      	beq.n	80012ca <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d12a      	bne.n	8001320 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80012e0:	2b20      	cmp	r3, #32
 80012e2:	d101      	bne.n	80012e8 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80012e6:	e000      	b.n	80012ea <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 80012e8:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	331c      	adds	r3, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f000 fa16 	bl	8001730 <HAL_DMA_Start_IT>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	22ff      	movs	r2, #255	; 0xff
 800130e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001316:	e005      	b.n	8001324 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f8bd 	bl	8001498 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800131e:	e001      	b.n	8001324 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001324:	7dfb      	ldrb	r3, [r7, #23]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	080013c1 	.word	0x080013c1
 8001334:	080013dd 	.word	0x080013dd
 8001338:	080013a5 	.word	0x080013a5

0800133c <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800134e:	2b02      	cmp	r3, #2
 8001350:	d007      	beq.n	8001362 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001358:	2b04      	cmp	r3, #4
 800135a:	d002      	beq.n	8001362 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e007      	b.n	8001372 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fa5d 	bl	8001826 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f8e9 	bl	8001544 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff ffe2 	bl	800137c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f006 fe74 	bl	80080bc <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2203      	movs	r2, #3
 80013ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f7ff ffcd 	bl	8001390 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a1c      	ldr	r2, [pc, #112]	; (800147c <DFSDM_GetChannelFromInstance+0x7c>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d102      	bne.n	8001416 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	e02b      	b.n	800146e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a19      	ldr	r2, [pc, #100]	; (8001480 <DFSDM_GetChannelFromInstance+0x80>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d102      	bne.n	8001424 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800141e:	2301      	movs	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	e024      	b.n	800146e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a17      	ldr	r2, [pc, #92]	; (8001484 <DFSDM_GetChannelFromInstance+0x84>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d102      	bne.n	8001432 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	e01d      	b.n	800146e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a14      	ldr	r2, [pc, #80]	; (8001488 <DFSDM_GetChannelFromInstance+0x88>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d102      	bne.n	8001440 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800143a:	2304      	movs	r3, #4
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	e016      	b.n	800146e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <DFSDM_GetChannelFromInstance+0x8c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d102      	bne.n	800144e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001448:	2305      	movs	r3, #5
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e00f      	b.n	800146e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <DFSDM_GetChannelFromInstance+0x90>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d102      	bne.n	800145c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001456:	2306      	movs	r3, #6
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	e008      	b.n	800146e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <DFSDM_GetChannelFromInstance+0x94>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d102      	bne.n	800146a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001464:	2307      	movs	r3, #7
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e001      	b.n	800146e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800146a:	2303      	movs	r3, #3
 800146c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40016000 	.word	0x40016000
 8001480:	40016020 	.word	0x40016020
 8001484:	40016040 	.word	0x40016040
 8001488:	40016080 	.word	0x40016080
 800148c:	400160a0 	.word	0x400160a0
 8001490:	400160c0 	.word	0x400160c0
 8001494:	400160e0 	.word	0x400160e0

08001498 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d108      	bne.n	80014ba <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	e033      	b.n	8001522 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014d8:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0201 	orr.w	r2, r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d116      	bne.n	8001522 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d107      	bne.n	800150c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0202 	orr.w	r2, r2, #2
 800150a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001512:	2b01      	cmp	r3, #1
 8001514:	d102      	bne.n	800151c <DFSDM_RegConvStart+0x84>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	e000      	b.n	800151e <DFSDM_RegConvStart+0x86>
 800151c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <DFSDM_RegConvStart+0x98>
 800152c:	2202      	movs	r2, #2
 800152e:	e000      	b.n	8001532 <DFSDM_RegConvStart+0x9a>
 8001530:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001560:	2b01      	cmp	r3, #1
 8001562:	d107      	bne.n	8001574 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001572:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0201 	orr.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800158a:	2b04      	cmp	r3, #4
 800158c:	d116      	bne.n	80015bc <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001592:	2b00      	cmp	r3, #0
 8001594:	d107      	bne.n	80015a6 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0202 	orr.w	r2, r2, #2
 80015a4:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d102      	bne.n	80015b6 <DFSDM_RegConvStop+0x72>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	e000      	b.n	80015b8 <DFSDM_RegConvStop+0x74>
 80015b6:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d101      	bne.n	80015ca <DFSDM_RegConvStop+0x86>
 80015c6:	2201      	movs	r2, #1
 80015c8:	e000      	b.n	80015cc <DFSDM_RegConvStop+0x88>
 80015ca:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e08d      	b.n	800170e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b47      	ldr	r3, [pc, #284]	; (8001718 <HAL_DMA_Init+0x138>)
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d80f      	bhi.n	800161e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	4b45      	ldr	r3, [pc, #276]	; (800171c <HAL_DMA_Init+0x13c>)
 8001606:	4413      	add	r3, r2
 8001608:	4a45      	ldr	r2, [pc, #276]	; (8001720 <HAL_DMA_Init+0x140>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	009a      	lsls	r2, r3, #2
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a42      	ldr	r2, [pc, #264]	; (8001724 <HAL_DMA_Init+0x144>)
 800161a:	641a      	str	r2, [r3, #64]	; 0x40
 800161c:	e00e      	b.n	800163c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	4b40      	ldr	r3, [pc, #256]	; (8001728 <HAL_DMA_Init+0x148>)
 8001626:	4413      	add	r3, r2
 8001628:	4a3d      	ldr	r2, [pc, #244]	; (8001720 <HAL_DMA_Init+0x140>)
 800162a:	fba2 2303 	umull	r2, r3, r2, r3
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	009a      	lsls	r2, r3, #2
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a3c      	ldr	r2, [pc, #240]	; (800172c <HAL_DMA_Init+0x14c>)
 800163a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001656:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001660:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800166c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001678:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4313      	orrs	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 fa72 	bl	8001b78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800169c:	d102      	bne.n	80016a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016b8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d010      	beq.n	80016e4 <HAL_DMA_Init+0x104>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d80c      	bhi.n	80016e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fa92 	bl	8001bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	e008      	b.n	80016f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40020407 	.word	0x40020407
 800171c:	bffdfff8 	.word	0xbffdfff8
 8001720:	cccccccd 	.word	0xcccccccd
 8001724:	40020000 	.word	0x40020000
 8001728:	bffdfbf8 	.word	0xbffdfbf8
 800172c:	40020400 	.word	0x40020400

08001730 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_DMA_Start_IT+0x20>
 800174c:	2302      	movs	r3, #2
 800174e:	e066      	b.n	800181e <HAL_DMA_Start_IT+0xee>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d155      	bne.n	8001810 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0201 	bic.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f9b6 	bl	8001afa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	2b00      	cmp	r3, #0
 8001794:	d008      	beq.n	80017a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 020e 	orr.w	r2, r2, #14
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e00f      	b.n	80017c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 020a 	orr.w	r2, r2, #10
 80017c6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017e4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017fc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 0201 	orr.w	r2, r2, #1
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e005      	b.n	800181c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001818:	2302      	movs	r3, #2
 800181a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800181c:	7dfb      	ldrb	r3, [r7, #23]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d008      	beq.n	8001850 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2204      	movs	r2, #4
 8001842:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e040      	b.n	80018d2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 020e 	bic.w	r2, r2, #14
 800185e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800186e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	f003 021c 	and.w	r2, r3, #28
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	2101      	movs	r1, #1
 800188e:	fa01 f202 	lsl.w	r2, r1, r2
 8001892:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800189c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00c      	beq.n	80018c0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018be:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d005      	beq.n	8001902 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2204      	movs	r2, #4
 80018fa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e047      	b.n	8001992 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 020e 	bic.w	r2, r2, #14
 8001910:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0201 	bic.w	r2, r2, #1
 8001920:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001930:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f003 021c 	and.w	r2, r3, #28
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800194e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00c      	beq.n	8001972 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001962:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001966:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001970:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	4798      	blx	r3
    }
  }
  return status;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	f003 031c 	and.w	r3, r3, #28
 80019bc:	2204      	movs	r2, #4
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d026      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x7a>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d021      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0204 	bic.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	f003 021c 	and.w	r2, r3, #28
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	2104      	movs	r1, #4
 80019fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001a02:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d071      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001a14:	e06c      	b.n	8001af0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f003 031c 	and.w	r3, r3, #28
 8001a1e:	2202      	movs	r2, #2
 8001a20:	409a      	lsls	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d02e      	beq.n	8001a88 <HAL_DMA_IRQHandler+0xec>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d029      	beq.n	8001a88 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10b      	bne.n	8001a5a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 020a 	bic.w	r2, r2, #10
 8001a50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f003 021c 	and.w	r2, r3, #28
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	2102      	movs	r1, #2
 8001a68:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d038      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a86:	e033      	b.n	8001af0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	f003 031c 	and.w	r3, r3, #28
 8001a90:	2208      	movs	r2, #8
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d02a      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x156>
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d025      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 020e 	bic.w	r2, r2, #14
 8001ab4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f003 021c 	and.w	r2, r3, #28
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d004      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
}
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b10:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b22:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	f003 021c 	and.w	r2, r3, #28
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	2101      	movs	r1, #1
 8001b32:	fa01 f202 	lsl.w	r2, r1, r2
 8001b36:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b10      	cmp	r3, #16
 8001b46:	d108      	bne.n	8001b5a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b58:	e007      	b.n	8001b6a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	60da      	str	r2, [r3, #12]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d80a      	bhi.n	8001ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b98:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6493      	str	r3, [r2, #72]	; 0x48
 8001ba0:	e007      	b.n	8001bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	009a      	lsls	r2, r3, #2
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bac:	4413      	add	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3b08      	subs	r3, #8
 8001bba:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001bc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40020407 	.word	0x40020407
 8001be8:	4002081c 	.word	0x4002081c
 8001bec:	cccccccd 	.word	0xcccccccd
 8001bf0:	40020880 	.word	0x40020880

08001bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c16:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2201      	movs	r2, #1
 8001c22:	409a      	lsls	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	1000823f 	.word	0x1000823f
 8001c38:	40020940 	.word	0x40020940

08001c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4a:	e166      	b.n	8001f1a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2101      	movs	r1, #1
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8158 	beq.w	8001f14 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d005      	beq.n	8001c7c <HAL_GPIO_Init+0x40>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d130      	bne.n	8001cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	f003 0201 	and.w	r2, r3, #1
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d017      	beq.n	8001d1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d123      	bne.n	8001d6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	6939      	ldr	r1, [r7, #16]
 8001d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0203 	and.w	r2, r3, #3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80b2 	beq.w	8001f14 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db0:	4b61      	ldr	r3, [pc, #388]	; (8001f38 <HAL_GPIO_Init+0x2fc>)
 8001db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db4:	4a60      	ldr	r2, [pc, #384]	; (8001f38 <HAL_GPIO_Init+0x2fc>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6613      	str	r3, [r2, #96]	; 0x60
 8001dbc:	4b5e      	ldr	r3, [pc, #376]	; (8001f38 <HAL_GPIO_Init+0x2fc>)
 8001dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dc8:	4a5c      	ldr	r2, [pc, #368]	; (8001f3c <HAL_GPIO_Init+0x300>)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001df2:	d02b      	beq.n	8001e4c <HAL_GPIO_Init+0x210>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a52      	ldr	r2, [pc, #328]	; (8001f40 <HAL_GPIO_Init+0x304>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d025      	beq.n	8001e48 <HAL_GPIO_Init+0x20c>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a51      	ldr	r2, [pc, #324]	; (8001f44 <HAL_GPIO_Init+0x308>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d01f      	beq.n	8001e44 <HAL_GPIO_Init+0x208>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a50      	ldr	r2, [pc, #320]	; (8001f48 <HAL_GPIO_Init+0x30c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d019      	beq.n	8001e40 <HAL_GPIO_Init+0x204>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a4f      	ldr	r2, [pc, #316]	; (8001f4c <HAL_GPIO_Init+0x310>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d013      	beq.n	8001e3c <HAL_GPIO_Init+0x200>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a4e      	ldr	r2, [pc, #312]	; (8001f50 <HAL_GPIO_Init+0x314>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d00d      	beq.n	8001e38 <HAL_GPIO_Init+0x1fc>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a4d      	ldr	r2, [pc, #308]	; (8001f54 <HAL_GPIO_Init+0x318>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d007      	beq.n	8001e34 <HAL_GPIO_Init+0x1f8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a4c      	ldr	r2, [pc, #304]	; (8001f58 <HAL_GPIO_Init+0x31c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d101      	bne.n	8001e30 <HAL_GPIO_Init+0x1f4>
 8001e2c:	2307      	movs	r3, #7
 8001e2e:	e00e      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e30:	2308      	movs	r3, #8
 8001e32:	e00c      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e34:	2306      	movs	r3, #6
 8001e36:	e00a      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e38:	2305      	movs	r3, #5
 8001e3a:	e008      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	e006      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e40:	2303      	movs	r3, #3
 8001e42:	e004      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e002      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	f002 0203 	and.w	r2, r2, #3
 8001e54:	0092      	lsls	r2, r2, #2
 8001e56:	4093      	lsls	r3, r2
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e5e:	4937      	ldr	r1, [pc, #220]	; (8001f3c <HAL_GPIO_Init+0x300>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3302      	adds	r3, #2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e6c:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e90:	4a32      	ldr	r2, [pc, #200]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e96:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eba:	4a28      	ldr	r2, [pc, #160]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ec0:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f0e:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	3301      	adds	r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f47f ae91 	bne.w	8001c4c <HAL_GPIO_Init+0x10>
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	bf00      	nop
 8001f2e:	371c      	adds	r7, #28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	48000400 	.word	0x48000400
 8001f44:	48000800 	.word	0x48000800
 8001f48:	48000c00 	.word	0x48000c00
 8001f4c:	48001000 	.word	0x48001000
 8001f50:	48001400 	.word	0x48001400
 8001f54:	48001800 	.word	0x48001800
 8001f58:	48001c00 	.word	0x48001c00
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001f6e:	e0c9      	b.n	8002104 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f70:	2201      	movs	r2, #1
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80bc 	beq.w	80020fe <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001f86:	4a66      	ldr	r2, [pc, #408]	; (8002120 <HAL_GPIO_DeInit+0x1c0>)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f92:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fae:	d02b      	beq.n	8002008 <HAL_GPIO_DeInit+0xa8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a5c      	ldr	r2, [pc, #368]	; (8002124 <HAL_GPIO_DeInit+0x1c4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d025      	beq.n	8002004 <HAL_GPIO_DeInit+0xa4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a5b      	ldr	r2, [pc, #364]	; (8002128 <HAL_GPIO_DeInit+0x1c8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d01f      	beq.n	8002000 <HAL_GPIO_DeInit+0xa0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a5a      	ldr	r2, [pc, #360]	; (800212c <HAL_GPIO_DeInit+0x1cc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d019      	beq.n	8001ffc <HAL_GPIO_DeInit+0x9c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a59      	ldr	r2, [pc, #356]	; (8002130 <HAL_GPIO_DeInit+0x1d0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <HAL_GPIO_DeInit+0x98>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a58      	ldr	r2, [pc, #352]	; (8002134 <HAL_GPIO_DeInit+0x1d4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_GPIO_DeInit+0x94>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a57      	ldr	r2, [pc, #348]	; (8002138 <HAL_GPIO_DeInit+0x1d8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <HAL_GPIO_DeInit+0x90>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a56      	ldr	r2, [pc, #344]	; (800213c <HAL_GPIO_DeInit+0x1dc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_GPIO_DeInit+0x8c>
 8001fe8:	2307      	movs	r3, #7
 8001fea:	e00e      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8001fec:	2308      	movs	r3, #8
 8001fee:	e00c      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8001ff0:	2306      	movs	r3, #6
 8001ff2:	e00a      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8001ff4:	2305      	movs	r3, #5
 8001ff6:	e008      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	e006      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e004      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8002000:	2302      	movs	r3, #2
 8002002:	e002      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8002008:	2300      	movs	r3, #0
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	f002 0203 	and.w	r2, r2, #3
 8002010:	0092      	lsls	r2, r2, #2
 8002012:	4093      	lsls	r3, r2
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	429a      	cmp	r2, r3
 8002018:	d132      	bne.n	8002080 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800201a:	4b49      	ldr	r3, [pc, #292]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	4947      	ldr	r1, [pc, #284]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 8002024:	4013      	ands	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002028:	4b45      	ldr	r3, [pc, #276]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	4943      	ldr	r1, [pc, #268]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 8002032:	4013      	ands	r3, r2
 8002034:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002036:	4b42      	ldr	r3, [pc, #264]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	43db      	mvns	r3, r3
 800203e:	4940      	ldr	r1, [pc, #256]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 8002040:	4013      	ands	r3, r2
 8002042:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002044:	4b3e      	ldr	r3, [pc, #248]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	43db      	mvns	r3, r3
 800204c:	493c      	ldr	r1, [pc, #240]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 800204e:	4013      	ands	r3, r2
 8002050:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002062:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <HAL_GPIO_DeInit+0x1c0>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	43da      	mvns	r2, r3
 8002072:	482b      	ldr	r0, [pc, #172]	; (8002120 <HAL_GPIO_DeInit+0x1c0>)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	400a      	ands	r2, r1
 800207a:	3302      	adds	r3, #2
 800207c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2103      	movs	r1, #3
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	08d2      	lsrs	r2, r2, #3
 80020b4:	4019      	ands	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2103      	movs	r1, #3
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	2101      	movs	r1, #1
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	401a      	ands	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2103      	movs	r1, #3
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	401a      	ands	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	f47f af2f 	bne.w	8001f70 <HAL_GPIO_DeInit+0x10>
  }
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40010000 	.word	0x40010000
 8002124:	48000400 	.word	0x48000400
 8002128:	48000800 	.word	0x48000800
 800212c:	48000c00 	.word	0x48000c00
 8002130:	48001000 	.word	0x48001000
 8002134:	48001400 	.word	0x48001400
 8002138:	48001800 	.word	0x48001800
 800213c:	48001c00 	.word	0x48001c00
 8002140:	40010400 	.word	0x40010400

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002160:	e002      	b.n	8002168 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4013      	ands	r3, r2
 800218c:	041a      	lsls	r2, r3, #16
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43d9      	mvns	r1, r3
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	400b      	ands	r3, r1
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	619a      	str	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f005 fed6 	bl	8007f78 <HAL_GPIO_EXTI_Callback>
  }
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40010400 	.word	0x40010400

080021d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e081      	b.n	80022ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f006 ff86 	bl	8009110 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2224      	movs	r2, #36	; 0x24
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002228:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002238:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	e006      	b.n	8002260 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800225e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d104      	bne.n	8002272 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002270:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002284:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002294:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69d9      	ldr	r1, [r3, #28]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e021      	b.n	800234c <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2224      	movs	r2, #36	; 0x24
 800230c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002320:	6878      	ldr	r0, [r7, #4]
 8002322:	f006 ff53 	bl	80091cc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2200      	movs	r2, #0
 8002346:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800234a:	2300      	movs	r3, #0
}
 800234c:	4618      	mov	r0, r3
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}

08002354 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b088      	sub	sp, #32
 8002358:	af02      	add	r7, sp, #8
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	4608      	mov	r0, r1
 800235e:	4611      	mov	r1, r2
 8002360:	461a      	mov	r2, r3
 8002362:	4603      	mov	r3, r0
 8002364:	817b      	strh	r3, [r7, #10]
 8002366:	460b      	mov	r3, r1
 8002368:	813b      	strh	r3, [r7, #8]
 800236a:	4613      	mov	r3, r2
 800236c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002374:	b2db      	uxtb	r3, r3
 8002376:	2b20      	cmp	r3, #32
 8002378:	f040 80f9 	bne.w	800256e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800237c:	6a3b      	ldr	r3, [r7, #32]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d002      	beq.n	8002388 <HAL_I2C_Mem_Write+0x34>
 8002382:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002384:	2b00      	cmp	r3, #0
 8002386:	d105      	bne.n	8002394 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800238e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	e0ed      	b.n	8002570 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800239a:	2b01      	cmp	r3, #1
 800239c:	d101      	bne.n	80023a2 <HAL_I2C_Mem_Write+0x4e>
 800239e:	2302      	movs	r3, #2
 80023a0:	e0e6      	b.n	8002570 <HAL_I2C_Mem_Write+0x21c>
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023aa:	f7fe f911 	bl	80005d0 <HAL_GetTick>
 80023ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	9300      	str	r3, [sp, #0]
 80023b4:	2319      	movs	r3, #25
 80023b6:	2201      	movs	r2, #1
 80023b8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023bc:	68f8      	ldr	r0, [r7, #12]
 80023be:	f000 fac3 	bl	8002948 <I2C_WaitOnFlagUntilTimeout>
 80023c2:	4603      	mov	r3, r0
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d001      	beq.n	80023cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023c8:	2301      	movs	r3, #1
 80023ca:	e0d1      	b.n	8002570 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2221      	movs	r2, #33	; 0x21
 80023d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	2240      	movs	r2, #64	; 0x40
 80023d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2200      	movs	r2, #0
 80023e0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	6a3a      	ldr	r2, [r7, #32]
 80023e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	2200      	movs	r2, #0
 80023f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023f4:	88f8      	ldrh	r0, [r7, #6]
 80023f6:	893a      	ldrh	r2, [r7, #8]
 80023f8:	8979      	ldrh	r1, [r7, #10]
 80023fa:	697b      	ldr	r3, [r7, #20]
 80023fc:	9301      	str	r3, [sp, #4]
 80023fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002400:	9300      	str	r3, [sp, #0]
 8002402:	4603      	mov	r3, r0
 8002404:	68f8      	ldr	r0, [r7, #12]
 8002406:	f000 f9d3 	bl	80027b0 <I2C_RequestMemoryWrite>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e0a9      	b.n	8002570 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002420:	b29b      	uxth	r3, r3
 8002422:	2bff      	cmp	r3, #255	; 0xff
 8002424:	d90e      	bls.n	8002444 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	22ff      	movs	r2, #255	; 0xff
 800242a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	b2da      	uxtb	r2, r3
 8002432:	8979      	ldrh	r1, [r7, #10]
 8002434:	2300      	movs	r3, #0
 8002436:	9300      	str	r3, [sp, #0]
 8002438:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800243c:	68f8      	ldr	r0, [r7, #12]
 800243e:	f000 fc2b 	bl	8002c98 <I2C_TransferConfig>
 8002442:	e00f      	b.n	8002464 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002452:	b2da      	uxtb	r2, r3
 8002454:	8979      	ldrh	r1, [r7, #10]
 8002456:	2300      	movs	r3, #0
 8002458:	9300      	str	r3, [sp, #0]
 800245a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 fc1a 	bl	8002c98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002464:	697a      	ldr	r2, [r7, #20]
 8002466:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 faad 	bl	80029c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d001      	beq.n	8002478 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e07b      	b.n	8002570 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247c:	781a      	ldrb	r2, [r3, #0]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002492:	b29b      	uxth	r3, r3
 8002494:	3b01      	subs	r3, #1
 8002496:	b29a      	uxth	r2, r3
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a0:	3b01      	subs	r3, #1
 80024a2:	b29a      	uxth	r2, r3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d034      	beq.n	800251c <HAL_I2C_Mem_Write+0x1c8>
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d130      	bne.n	800251c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	9300      	str	r3, [sp, #0]
 80024be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c0:	2200      	movs	r2, #0
 80024c2:	2180      	movs	r1, #128	; 0x80
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f000 fa3f 	bl	8002948 <I2C_WaitOnFlagUntilTimeout>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d001      	beq.n	80024d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e04d      	b.n	8002570 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d8:	b29b      	uxth	r3, r3
 80024da:	2bff      	cmp	r3, #255	; 0xff
 80024dc:	d90e      	bls.n	80024fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	22ff      	movs	r2, #255	; 0xff
 80024e2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e8:	b2da      	uxtb	r2, r3
 80024ea:	8979      	ldrh	r1, [r7, #10]
 80024ec:	2300      	movs	r3, #0
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 fbcf 	bl	8002c98 <I2C_TransferConfig>
 80024fa:	e00f      	b.n	800251c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002500:	b29a      	uxth	r2, r3
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250a:	b2da      	uxtb	r2, r3
 800250c:	8979      	ldrh	r1, [r7, #10]
 800250e:	2300      	movs	r3, #0
 8002510:	9300      	str	r3, [sp, #0]
 8002512:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002516:	68f8      	ldr	r0, [r7, #12]
 8002518:	f000 fbbe 	bl	8002c98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002520:	b29b      	uxth	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d19e      	bne.n	8002464 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002526:	697a      	ldr	r2, [r7, #20]
 8002528:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 fa8c 	bl	8002a48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e01a      	b.n	8002570 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2220      	movs	r2, #32
 8002540:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	6859      	ldr	r1, [r3, #4]
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	4b0a      	ldr	r3, [pc, #40]	; (8002578 <HAL_I2C_Mem_Write+0x224>)
 800254e:	400b      	ands	r3, r1
 8002550:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2220      	movs	r2, #32
 8002556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800256a:	2300      	movs	r3, #0
 800256c:	e000      	b.n	8002570 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800256e:	2302      	movs	r3, #2
  }
}
 8002570:	4618      	mov	r0, r3
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}
 8002578:	fe00e800 	.word	0xfe00e800

0800257c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b088      	sub	sp, #32
 8002580:	af02      	add	r7, sp, #8
 8002582:	60f8      	str	r0, [r7, #12]
 8002584:	4608      	mov	r0, r1
 8002586:	4611      	mov	r1, r2
 8002588:	461a      	mov	r2, r3
 800258a:	4603      	mov	r3, r0
 800258c:	817b      	strh	r3, [r7, #10]
 800258e:	460b      	mov	r3, r1
 8002590:	813b      	strh	r3, [r7, #8]
 8002592:	4613      	mov	r3, r2
 8002594:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b20      	cmp	r3, #32
 80025a0:	f040 80fd 	bne.w	800279e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d002      	beq.n	80025b0 <HAL_I2C_Mem_Read+0x34>
 80025aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d105      	bne.n	80025bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025b6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0f1      	b.n	80027a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d101      	bne.n	80025ca <HAL_I2C_Mem_Read+0x4e>
 80025c6:	2302      	movs	r3, #2
 80025c8:	e0ea      	b.n	80027a0 <HAL_I2C_Mem_Read+0x224>
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2201      	movs	r2, #1
 80025ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025d2:	f7fd fffd 	bl	80005d0 <HAL_GetTick>
 80025d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	2319      	movs	r3, #25
 80025de:	2201      	movs	r2, #1
 80025e0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e4:	68f8      	ldr	r0, [r7, #12]
 80025e6:	f000 f9af 	bl	8002948 <I2C_WaitOnFlagUntilTimeout>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d001      	beq.n	80025f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e0d5      	b.n	80027a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2222      	movs	r2, #34	; 0x22
 80025f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2240      	movs	r2, #64	; 0x40
 8002600:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2200      	movs	r2, #0
 8002608:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	6a3a      	ldr	r2, [r7, #32]
 800260e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002614:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2200      	movs	r2, #0
 800261a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800261c:	88f8      	ldrh	r0, [r7, #6]
 800261e:	893a      	ldrh	r2, [r7, #8]
 8002620:	8979      	ldrh	r1, [r7, #10]
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	4603      	mov	r3, r0
 800262c:	68f8      	ldr	r0, [r7, #12]
 800262e:	f000 f913 	bl	8002858 <I2C_RequestMemoryRead>
 8002632:	4603      	mov	r3, r0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d005      	beq.n	8002644 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0ad      	b.n	80027a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002648:	b29b      	uxth	r3, r3
 800264a:	2bff      	cmp	r3, #255	; 0xff
 800264c:	d90e      	bls.n	800266c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	22ff      	movs	r2, #255	; 0xff
 8002652:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002658:	b2da      	uxtb	r2, r3
 800265a:	8979      	ldrh	r1, [r7, #10]
 800265c:	4b52      	ldr	r3, [pc, #328]	; (80027a8 <HAL_I2C_Mem_Read+0x22c>)
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fb17 	bl	8002c98 <I2C_TransferConfig>
 800266a:	e00f      	b.n	800268c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002670:	b29a      	uxth	r2, r3
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267a:	b2da      	uxtb	r2, r3
 800267c:	8979      	ldrh	r1, [r7, #10]
 800267e:	4b4a      	ldr	r3, [pc, #296]	; (80027a8 <HAL_I2C_Mem_Read+0x22c>)
 8002680:	9300      	str	r3, [sp, #0]
 8002682:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002686:	68f8      	ldr	r0, [r7, #12]
 8002688:	f000 fb06 	bl	8002c98 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	9300      	str	r3, [sp, #0]
 8002690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002692:	2200      	movs	r2, #0
 8002694:	2104      	movs	r1, #4
 8002696:	68f8      	ldr	r0, [r7, #12]
 8002698:	f000 f956 	bl	8002948 <I2C_WaitOnFlagUntilTimeout>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e07c      	b.n	80027a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	b2d2      	uxtb	r2, r2
 80026b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b8:	1c5a      	adds	r2, r3, #1
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ce:	b29b      	uxth	r3, r3
 80026d0:	3b01      	subs	r3, #1
 80026d2:	b29a      	uxth	r2, r3
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026dc:	b29b      	uxth	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d034      	beq.n	800274c <HAL_I2C_Mem_Read+0x1d0>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d130      	bne.n	800274c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	9300      	str	r3, [sp, #0]
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	2200      	movs	r2, #0
 80026f2:	2180      	movs	r1, #128	; 0x80
 80026f4:	68f8      	ldr	r0, [r7, #12]
 80026f6:	f000 f927 	bl	8002948 <I2C_WaitOnFlagUntilTimeout>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002700:	2301      	movs	r3, #1
 8002702:	e04d      	b.n	80027a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002708:	b29b      	uxth	r3, r3
 800270a:	2bff      	cmp	r3, #255	; 0xff
 800270c:	d90e      	bls.n	800272c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	22ff      	movs	r2, #255	; 0xff
 8002712:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002718:	b2da      	uxtb	r2, r3
 800271a:	8979      	ldrh	r1, [r7, #10]
 800271c:	2300      	movs	r3, #0
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f000 fab7 	bl	8002c98 <I2C_TransferConfig>
 800272a:	e00f      	b.n	800274c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002730:	b29a      	uxth	r2, r3
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273a:	b2da      	uxtb	r2, r3
 800273c:	8979      	ldrh	r1, [r7, #10]
 800273e:	2300      	movs	r3, #0
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002746:	68f8      	ldr	r0, [r7, #12]
 8002748:	f000 faa6 	bl	8002c98 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002750:	b29b      	uxth	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d19a      	bne.n	800268c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002756:	697a      	ldr	r2, [r7, #20]
 8002758:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f000 f974 	bl	8002a48 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e01a      	b.n	80027a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2220      	movs	r2, #32
 8002770:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	6859      	ldr	r1, [r3, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	4b0b      	ldr	r3, [pc, #44]	; (80027ac <HAL_I2C_Mem_Read+0x230>)
 800277e:	400b      	ands	r3, r1
 8002780:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2220      	movs	r2, #32
 8002786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	2200      	movs	r2, #0
 800278e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800279a:	2300      	movs	r3, #0
 800279c:	e000      	b.n	80027a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800279e:	2302      	movs	r3, #2
  }
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3718      	adds	r7, #24
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	80002400 	.word	0x80002400
 80027ac:	fe00e800 	.word	0xfe00e800

080027b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	60f8      	str	r0, [r7, #12]
 80027b8:	4608      	mov	r0, r1
 80027ba:	4611      	mov	r1, r2
 80027bc:	461a      	mov	r2, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	817b      	strh	r3, [r7, #10]
 80027c2:	460b      	mov	r3, r1
 80027c4:	813b      	strh	r3, [r7, #8]
 80027c6:	4613      	mov	r3, r2
 80027c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027ca:	88fb      	ldrh	r3, [r7, #6]
 80027cc:	b2da      	uxtb	r2, r3
 80027ce:	8979      	ldrh	r1, [r7, #10]
 80027d0:	4b20      	ldr	r3, [pc, #128]	; (8002854 <I2C_RequestMemoryWrite+0xa4>)
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 fa5d 	bl	8002c98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027de:	69fa      	ldr	r2, [r7, #28]
 80027e0:	69b9      	ldr	r1, [r7, #24]
 80027e2:	68f8      	ldr	r0, [r7, #12]
 80027e4:	f000 f8f0 	bl	80029c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e02c      	b.n	800284c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027f2:	88fb      	ldrh	r3, [r7, #6]
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027f8:	893b      	ldrh	r3, [r7, #8]
 80027fa:	b2da      	uxtb	r2, r3
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	629a      	str	r2, [r3, #40]	; 0x28
 8002802:	e015      	b.n	8002830 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002804:	893b      	ldrh	r3, [r7, #8]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	b29b      	uxth	r3, r3
 800280a:	b2da      	uxtb	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002812:	69fa      	ldr	r2, [r7, #28]
 8002814:	69b9      	ldr	r1, [r7, #24]
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f8d6 	bl	80029c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d001      	beq.n	8002826 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e012      	b.n	800284c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002826:	893b      	ldrh	r3, [r7, #8]
 8002828:	b2da      	uxtb	r2, r3
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	9300      	str	r3, [sp, #0]
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2200      	movs	r2, #0
 8002838:	2180      	movs	r1, #128	; 0x80
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f000 f884 	bl	8002948 <I2C_WaitOnFlagUntilTimeout>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e000      	b.n	800284c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	80002000 	.word	0x80002000

08002858 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af02      	add	r7, sp, #8
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	4608      	mov	r0, r1
 8002862:	4611      	mov	r1, r2
 8002864:	461a      	mov	r2, r3
 8002866:	4603      	mov	r3, r0
 8002868:	817b      	strh	r3, [r7, #10]
 800286a:	460b      	mov	r3, r1
 800286c:	813b      	strh	r3, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002872:	88fb      	ldrh	r3, [r7, #6]
 8002874:	b2da      	uxtb	r2, r3
 8002876:	8979      	ldrh	r1, [r7, #10]
 8002878:	4b20      	ldr	r3, [pc, #128]	; (80028fc <I2C_RequestMemoryRead+0xa4>)
 800287a:	9300      	str	r3, [sp, #0]
 800287c:	2300      	movs	r3, #0
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 fa0a 	bl	8002c98 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002884:	69fa      	ldr	r2, [r7, #28]
 8002886:	69b9      	ldr	r1, [r7, #24]
 8002888:	68f8      	ldr	r0, [r7, #12]
 800288a:	f000 f89d 	bl	80029c8 <I2C_WaitOnTXISFlagUntilTimeout>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d001      	beq.n	8002898 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e02c      	b.n	80028f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002898:	88fb      	ldrh	r3, [r7, #6]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d105      	bne.n	80028aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800289e:	893b      	ldrh	r3, [r7, #8]
 80028a0:	b2da      	uxtb	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	629a      	str	r2, [r3, #40]	; 0x28
 80028a8:	e015      	b.n	80028d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028aa:	893b      	ldrh	r3, [r7, #8]
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	b29b      	uxth	r3, r3
 80028b0:	b2da      	uxtb	r2, r3
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	69b9      	ldr	r1, [r7, #24]
 80028bc:	68f8      	ldr	r0, [r7, #12]
 80028be:	f000 f883 	bl	80029c8 <I2C_WaitOnTXISFlagUntilTimeout>
 80028c2:	4603      	mov	r3, r0
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d001      	beq.n	80028cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	e012      	b.n	80028f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028cc:	893b      	ldrh	r3, [r7, #8]
 80028ce:	b2da      	uxtb	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	9300      	str	r3, [sp, #0]
 80028da:	69bb      	ldr	r3, [r7, #24]
 80028dc:	2200      	movs	r2, #0
 80028de:	2140      	movs	r1, #64	; 0x40
 80028e0:	68f8      	ldr	r0, [r7, #12]
 80028e2:	f000 f831 	bl	8002948 <I2C_WaitOnFlagUntilTimeout>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d001      	beq.n	80028f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e000      	b.n	80028f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	80002000 	.word	0x80002000

08002900 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b02      	cmp	r3, #2
 8002914:	d103      	bne.n	800291e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2200      	movs	r2, #0
 800291c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d007      	beq.n	800293c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	699a      	ldr	r2, [r3, #24]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f042 0201 	orr.w	r2, r2, #1
 800293a:	619a      	str	r2, [r3, #24]
  }
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b084      	sub	sp, #16
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	60b9      	str	r1, [r7, #8]
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	4613      	mov	r3, r2
 8002956:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002958:	e022      	b.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002960:	d01e      	beq.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002962:	f7fd fe35 	bl	80005d0 <HAL_GetTick>
 8002966:	4602      	mov	r2, r0
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	683a      	ldr	r2, [r7, #0]
 800296e:	429a      	cmp	r2, r3
 8002970:	d302      	bcc.n	8002978 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d113      	bne.n	80029a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297c:	f043 0220 	orr.w	r2, r3, #32
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	2220      	movs	r2, #32
 8002988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e00f      	b.n	80029c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699a      	ldr	r2, [r3, #24]
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	4013      	ands	r3, r2
 80029aa:	68ba      	ldr	r2, [r7, #8]
 80029ac:	429a      	cmp	r2, r3
 80029ae:	bf0c      	ite	eq
 80029b0:	2301      	moveq	r3, #1
 80029b2:	2300      	movne	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d0cd      	beq.n	800295a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b084      	sub	sp, #16
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	60f8      	str	r0, [r7, #12]
 80029d0:	60b9      	str	r1, [r7, #8]
 80029d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029d4:	e02c      	b.n	8002a30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	68b9      	ldr	r1, [r7, #8]
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f000 f870 	bl	8002ac0 <I2C_IsErrorOccurred>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e02a      	b.n	8002a40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f0:	d01e      	beq.n	8002a30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f2:	f7fd fded 	bl	80005d0 <HAL_GetTick>
 80029f6:	4602      	mov	r2, r0
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d302      	bcc.n	8002a08 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d113      	bne.n	8002a30 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a0c:	f043 0220 	orr.w	r2, r3, #32
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2220      	movs	r2, #32
 8002a18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	2200      	movs	r2, #0
 8002a20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e007      	b.n	8002a40 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d1cb      	bne.n	80029d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a3e:	2300      	movs	r3, #0
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	60b9      	str	r1, [r7, #8]
 8002a52:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a54:	e028      	b.n	8002aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	68b9      	ldr	r1, [r7, #8]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f830 	bl	8002ac0 <I2C_IsErrorOccurred>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e026      	b.n	8002ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6a:	f7fd fdb1 	bl	80005d0 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	429a      	cmp	r2, r3
 8002a78:	d302      	bcc.n	8002a80 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d113      	bne.n	8002aa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a84:	f043 0220 	orr.w	r2, r3, #32
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2220      	movs	r2, #32
 8002a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	2200      	movs	r2, #0
 8002a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e007      	b.n	8002ab8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	699b      	ldr	r3, [r3, #24]
 8002aae:	f003 0320 	and.w	r3, r3, #32
 8002ab2:	2b20      	cmp	r3, #32
 8002ab4:	d1cf      	bne.n	8002a56 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002ab6:	2300      	movs	r3, #0
}
 8002ab8:	4618      	mov	r0, r3
 8002aba:	3710      	adds	r7, #16
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}

08002ac0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b08a      	sub	sp, #40	; 0x28
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	60f8      	str	r0, [r7, #12]
 8002ac8:	60b9      	str	r1, [r7, #8]
 8002aca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002acc:	2300      	movs	r3, #0
 8002ace:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d075      	beq.n	8002bd8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	2210      	movs	r2, #16
 8002af2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002af4:	e056      	b.n	8002ba4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002af6:	68bb      	ldr	r3, [r7, #8]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002afc:	d052      	beq.n	8002ba4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002afe:	f7fd fd67 	bl	80005d0 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	68ba      	ldr	r2, [r7, #8]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d302      	bcc.n	8002b14 <I2C_IsErrorOccurred+0x54>
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d147      	bne.n	8002ba4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b1e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b26:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	699b      	ldr	r3, [r3, #24]
 8002b2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b36:	d12e      	bne.n	8002b96 <I2C_IsErrorOccurred+0xd6>
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b3e:	d02a      	beq.n	8002b96 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	2b20      	cmp	r3, #32
 8002b44:	d027      	beq.n	8002b96 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b54:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b56:	f7fd fd3b 	bl	80005d0 <HAL_GetTick>
 8002b5a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b5c:	e01b      	b.n	8002b96 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b5e:	f7fd fd37 	bl	80005d0 <HAL_GetTick>
 8002b62:	4602      	mov	r2, r0
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	1ad3      	subs	r3, r2, r3
 8002b68:	2b19      	cmp	r3, #25
 8002b6a:	d914      	bls.n	8002b96 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	f043 0220 	orr.w	r2, r3, #32
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b20      	cmp	r3, #32
 8002ba2:	d1dc      	bne.n	8002b5e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	699b      	ldr	r3, [r3, #24]
 8002baa:	f003 0320 	and.w	r3, r3, #32
 8002bae:	2b20      	cmp	r3, #32
 8002bb0:	d003      	beq.n	8002bba <I2C_IsErrorOccurred+0xfa>
 8002bb2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d09d      	beq.n	8002af6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d103      	bne.n	8002bca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	f043 0304 	orr.w	r3, r3, #4
 8002bd0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002be0:	69bb      	ldr	r3, [r7, #24]
 8002be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00b      	beq.n	8002c02 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bfa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c02:	69bb      	ldr	r3, [r7, #24]
 8002c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00b      	beq.n	8002c24 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c0c:	6a3b      	ldr	r3, [r7, #32]
 8002c0e:	f043 0308 	orr.w	r3, r3, #8
 8002c12:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c1c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	f043 0302 	orr.w	r3, r3, #2
 8002c34:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c46:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d01c      	beq.n	8002c88 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f7ff fe56 	bl	8002900 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	6859      	ldr	r1, [r3, #4]
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	4b0d      	ldr	r3, [pc, #52]	; (8002c94 <I2C_IsErrorOccurred+0x1d4>)
 8002c60:	400b      	ands	r3, r1
 8002c62:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c68:	6a3b      	ldr	r3, [r7, #32]
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	2220      	movs	r2, #32
 8002c74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c88:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	3728      	adds	r7, #40	; 0x28
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}
 8002c94:	fe00e800 	.word	0xfe00e800

08002c98 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b087      	sub	sp, #28
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	607b      	str	r3, [r7, #4]
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	817b      	strh	r3, [r7, #10]
 8002ca6:	4613      	mov	r3, r2
 8002ca8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002caa:	897b      	ldrh	r3, [r7, #10]
 8002cac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cb0:	7a7b      	ldrb	r3, [r7, #9]
 8002cb2:	041b      	lsls	r3, r3, #16
 8002cb4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cb8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cbe:	6a3b      	ldr	r3, [r7, #32]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cc6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	685a      	ldr	r2, [r3, #4]
 8002cce:	6a3b      	ldr	r3, [r7, #32]
 8002cd0:	0d5b      	lsrs	r3, r3, #21
 8002cd2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002cd6:	4b08      	ldr	r3, [pc, #32]	; (8002cf8 <I2C_TransferConfig+0x60>)
 8002cd8:	430b      	orrs	r3, r1
 8002cda:	43db      	mvns	r3, r3
 8002cdc:	ea02 0103 	and.w	r1, r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cea:	bf00      	nop
 8002cec:	371c      	adds	r7, #28
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	03ff63ff 	.word	0x03ff63ff

08002cfc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	b083      	sub	sp, #12
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d138      	bne.n	8002d84 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d1c:	2302      	movs	r3, #2
 8002d1e:	e032      	b.n	8002d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2224      	movs	r2, #36	; 0x24
 8002d2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 0201 	bic.w	r2, r2, #1
 8002d3e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d4e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6819      	ldr	r1, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	683a      	ldr	r2, [r7, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0201 	orr.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2220      	movs	r2, #32
 8002d74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d80:	2300      	movs	r3, #0
 8002d82:	e000      	b.n	8002d86 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d84:	2302      	movs	r3, #2
  }
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b085      	sub	sp, #20
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]
 8002d9a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d139      	bne.n	8002e1c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e033      	b.n	8002e1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2224      	movs	r2, #36	; 0x24
 8002dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f022 0201 	bic.w	r2, r2, #1
 8002dd4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002de4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	021b      	lsls	r3, r3, #8
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	4313      	orrs	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
  }
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
	...

08002e2c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b086      	sub	sp, #24
 8002e30:	af02      	add	r7, sp, #8
 8002e32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002e38:	f7fd fbca 	bl	80005d0 <HAL_GetTick>
 8002e3c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d102      	bne.n	8002e4a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
 8002e48:	e092      	b.n	8002f70 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f040 808b 	bne.w	8002f70 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f006 f9da 	bl	8009214 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002e60:	f241 3188 	movw	r1, #5000	; 0x1388
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 fad0 	bl	800340a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	689a      	ldr	r2, [r3, #8]
 8002e70:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <HAL_OSPI_Init+0x150>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	68d1      	ldr	r1, [r2, #12]
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	6912      	ldr	r2, [r2, #16]
 8002e7c:	3a01      	subs	r2, #1
 8002e7e:	0412      	lsls	r2, r2, #16
 8002e80:	4311      	orrs	r1, r2
 8002e82:	687a      	ldr	r2, [r7, #4]
 8002e84:	6952      	ldr	r2, [r2, #20]
 8002e86:	3a01      	subs	r2, #1
 8002e88:	0212      	lsls	r2, r2, #8
 8002e8a:	4311      	orrs	r1, r2
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e90:	4311      	orrs	r1, r2
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	69d2      	ldr	r2, [r2, #28]
 8002e96:	4311      	orrs	r1, r2
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6812      	ldr	r2, [r2, #0]
 8002e9c:	430b      	orrs	r3, r1
 8002e9e:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	0412      	lsls	r2, r2, #16
 8002eaa:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	021a      	lsls	r2, r3, #8
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2120      	movs	r1, #32
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f000 fddc 	bl	8003a90 <OSPI_WaitFlagStateUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002edc:	7bfb      	ldrb	r3, [r7, #15]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d146      	bne.n	8002f70 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a1b      	ldr	r3, [r3, #32]
 8002ef0:	1e5a      	subs	r2, r3, #1
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	430a      	orrs	r2, r1
 8002ef8:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	689a      	ldr	r2, [r3, #8]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f18:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	431a      	orrs	r2, r3
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	430a      	orrs	r2, r1
 8002f2c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f042 0201 	orr.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d107      	bne.n	8002f58 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	689a      	ldr	r2, [r3, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f042 0202 	orr.w	r2, r2, #2
 8002f56:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f60:	d103      	bne.n	8002f6a <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	645a      	str	r2, [r3, #68]	; 0x44
 8002f68:	e002      	b.n	8002f70 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2202      	movs	r2, #2
 8002f6e:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8002f70:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	f8e0f8f4 	.word	0xf8e0f8f4

08002f80 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d102      	bne.n	8002f98 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	73fb      	strb	r3, [r7, #15]
 8002f96:	e015      	b.n	8002fc4 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f022 0201 	bic.w	r2, r2, #1
 8002fa6:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	689a      	ldr	r2, [r3, #8]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 0202 	bic.w	r2, r2, #2
 8002fb6:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f006 f997 	bl	80092ec <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b08a      	sub	sp, #40	; 0x28
 8002fd2:	af02      	add	r7, sp, #8
 8002fd4:	60f8      	str	r0, [r7, #12]
 8002fd6:	60b9      	str	r1, [r7, #8]
 8002fd8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002fda:	f7fd faf9 	bl	80005d0 <HAL_GetTick>
 8002fde:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe4:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d104      	bne.n	8002ffc <HAL_OSPI_Command+0x2e>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ffa:	d10d      	bne.n	8003018 <HAL_OSPI_Command+0x4a>
 8002ffc:	697b      	ldr	r3, [r7, #20]
 8002ffe:	2b14      	cmp	r3, #20
 8003000:	d103      	bne.n	800300a <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2b02      	cmp	r3, #2
 8003008:	d006      	beq.n	8003018 <HAL_OSPI_Command+0x4a>
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	2b24      	cmp	r3, #36	; 0x24
 800300e:	d153      	bne.n	80030b8 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b01      	cmp	r3, #1
 8003016:	d14f      	bne.n	80030b8 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	9300      	str	r3, [sp, #0]
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	2200      	movs	r2, #0
 8003020:	2120      	movs	r1, #32
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fd34 	bl	8003a90 <OSPI_WaitFlagStateUntilTimeout>
 8003028:	4603      	mov	r3, r0
 800302a:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800302c:	7ffb      	ldrb	r3, [r7, #31]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d148      	bne.n	80030c4 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8003038:	68b9      	ldr	r1, [r7, #8]
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f000 fd60 	bl	8003b00 <OSPI_ConfigCmd>
 8003040:	4603      	mov	r3, r0
 8003042:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003044:	7ffb      	ldrb	r3, [r7, #31]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d13c      	bne.n	80030c4 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10e      	bne.n	8003070 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	2201      	movs	r2, #1
 800305a:	2102      	movs	r1, #2
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fd17 	bl	8003a90 <OSPI_WaitFlagStateUntilTimeout>
 8003062:	4603      	mov	r3, r0
 8003064:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	2202      	movs	r2, #2
 800306c:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 800306e:	e029      	b.n	80030c4 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d103      	bne.n	8003080 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2204      	movs	r2, #4
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800307e:	e021      	b.n	80030c4 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d10b      	bne.n	80030a0 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308c:	2b24      	cmp	r3, #36	; 0x24
 800308e:	d103      	bne.n	8003098 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2204      	movs	r2, #4
 8003094:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003096:	e015      	b.n	80030c4 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2214      	movs	r2, #20
 800309c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800309e:	e011      	b.n	80030c4 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a4:	2b14      	cmp	r3, #20
 80030a6:	d103      	bne.n	80030b0 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2204      	movs	r2, #4
 80030ac:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80030ae:	e009      	b.n	80030c4 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2224      	movs	r2, #36	; 0x24
 80030b4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80030b6:	e005      	b.n	80030c4 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2210      	movs	r2, #16
 80030c0:	649a      	str	r2, [r3, #72]	; 0x48
 80030c2:	e000      	b.n	80030c6 <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 80030c4:	bf00      	nop
  }

  /* Return function status */
  return status;
 80030c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3720      	adds	r7, #32
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	; 0x28
 80030d4:	af02      	add	r7, sp, #8
 80030d6:	60f8      	str	r0, [r7, #12]
 80030d8:	60b9      	str	r1, [r7, #8]
 80030da:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80030dc:	f7fd fa78 	bl	80005d0 <HAL_GetTick>
 80030e0:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	3350      	adds	r3, #80	; 0x50
 80030e8:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2208      	movs	r2, #8
 80030f8:	649a      	str	r2, [r3, #72]	; 0x48
 80030fa:	e057      	b.n	80031ac <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	2b04      	cmp	r3, #4
 8003102:	d14e      	bne.n	80031a2 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	1c5a      	adds	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	68ba      	ldr	r2, [r7, #8]
 800311c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800312c:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	9300      	str	r3, [sp, #0]
 8003132:	69bb      	ldr	r3, [r7, #24]
 8003134:	2201      	movs	r2, #1
 8003136:	2104      	movs	r1, #4
 8003138:	68f8      	ldr	r0, [r7, #12]
 800313a:	f000 fca9 	bl	8003a90 <OSPI_WaitFlagStateUntilTimeout>
 800313e:	4603      	mov	r3, r0
 8003140:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003142:	7ffb      	ldrb	r3, [r7, #31]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d113      	bne.n	8003170 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800314c:	781a      	ldrb	r2, [r3, #0]
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003156:	1c5a      	adds	r2, r3, #1
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003160:	1e5a      	subs	r2, r3, #1
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316a:	2b00      	cmp	r3, #0
 800316c:	d1df      	bne.n	800312e <HAL_OSPI_Transmit+0x5e>
 800316e:	e000      	b.n	8003172 <HAL_OSPI_Transmit+0xa2>
          break;
 8003170:	bf00      	nop

      if (status == HAL_OK)
 8003172:	7ffb      	ldrb	r3, [r7, #31]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d119      	bne.n	80031ac <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2201      	movs	r2, #1
 8003180:	2102      	movs	r1, #2
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	f000 fc84 	bl	8003a90 <OSPI_WaitFlagStateUntilTimeout>
 8003188:	4603      	mov	r3, r0
 800318a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 800318c:	7ffb      	ldrb	r3, [r7, #31]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10c      	bne.n	80031ac <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2202      	movs	r2, #2
 8003198:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	2202      	movs	r2, #2
 800319e:	645a      	str	r2, [r3, #68]	; 0x44
 80031a0:	e004      	b.n	80031ac <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	2210      	movs	r2, #16
 80031aa:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80031ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3720      	adds	r7, #32
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}

080031b6 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80031b6:	b580      	push	{r7, lr}
 80031b8:	b08c      	sub	sp, #48	; 0x30
 80031ba:	af02      	add	r7, sp, #8
 80031bc:	60f8      	str	r0, [r7, #12]
 80031be:	60b9      	str	r1, [r7, #8]
 80031c0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80031c2:	f7fd fa05 	bl	80005d0 <HAL_GetTick>
 80031c6:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	3350      	adds	r3, #80	; 0x50
 80031ce:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d6:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80031e0:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d106      	bne.n	80031f6 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2208      	movs	r2, #8
 80031f2:	649a      	str	r2, [r3, #72]	; 0x48
 80031f4:	e07c      	b.n	80032f0 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d172      	bne.n	80032e4 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	1c5a      	adds	r2, r3, #1
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800322a:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003234:	d104      	bne.n	8003240 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	649a      	str	r2, [r3, #72]	; 0x48
 800323e:	e011      	b.n	8003264 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800324c:	2b00      	cmp	r3, #0
 800324e:	d004      	beq.n	800325a <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	649a      	str	r2, [r3, #72]	; 0x48
 8003258:	e004      	b.n	8003264 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	697a      	ldr	r2, [r7, #20]
 8003260:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	2201      	movs	r2, #1
 800326c:	2106      	movs	r1, #6
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 fc0e 	bl	8003a90 <OSPI_WaitFlagStateUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800327a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800327e:	2b00      	cmp	r3, #0
 8003280:	d114      	bne.n	80032ac <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003286:	69fa      	ldr	r2, [r7, #28]
 8003288:	7812      	ldrb	r2, [r2, #0]
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800329c:	1e5a      	subs	r2, r3, #1
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1dc      	bne.n	8003264 <HAL_OSPI_Receive+0xae>
 80032aa:	e000      	b.n	80032ae <HAL_OSPI_Receive+0xf8>
          break;
 80032ac:	bf00      	nop

      if (status == HAL_OK)
 80032ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d11c      	bne.n	80032f0 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	9300      	str	r3, [sp, #0]
 80032ba:	6a3b      	ldr	r3, [r7, #32]
 80032bc:	2201      	movs	r2, #1
 80032be:	2102      	movs	r1, #2
 80032c0:	68f8      	ldr	r0, [r7, #12]
 80032c2:	f000 fbe5 	bl	8003a90 <OSPI_WaitFlagStateUntilTimeout>
 80032c6:	4603      	mov	r3, r0
 80032c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 80032cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d10d      	bne.n	80032f0 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2202      	movs	r2, #2
 80032da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2202      	movs	r2, #2
 80032e0:	645a      	str	r2, [r3, #68]	; 0x44
 80032e2:	e005      	b.n	80032f0 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2210      	movs	r2, #16
 80032ee:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80032f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3728      	adds	r7, #40	; 0x28
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}

080032fc <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80032fc:	b580      	push	{r7, lr}
 80032fe:	b08a      	sub	sp, #40	; 0x28
 8003300:	af02      	add	r7, sp, #8
 8003302:	60f8      	str	r0, [r7, #12]
 8003304:	60b9      	str	r1, [r7, #8]
 8003306:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003308:	f7fd f962 	bl	80005d0 <HAL_GetTick>
 800330c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003314:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800331e:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003324:	2b04      	cmp	r3, #4
 8003326:	d164      	bne.n	80033f2 <HAL_OSPI_AutoPolling+0xf6>
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	68db      	ldr	r3, [r3, #12]
 800332c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003330:	d15f      	bne.n	80033f2 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	9300      	str	r3, [sp, #0]
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	2200      	movs	r2, #0
 800333a:	2120      	movs	r1, #32
 800333c:	68f8      	ldr	r0, [r7, #12]
 800333e:	f000 fba7 	bl	8003a90 <OSPI_WaitFlagStateUntilTimeout>
 8003342:	4603      	mov	r3, r0
 8003344:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003346:	7ffb      	ldrb	r3, [r7, #31]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d158      	bne.n	80033fe <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68ba      	ldr	r2, [r7, #8]
 8003352:	6812      	ldr	r2, [r2, #0]
 8003354:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	6852      	ldr	r2, [r2, #4]
 8003360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68ba      	ldr	r2, [r7, #8]
 800336a:	6912      	ldr	r2, [r2, #16]
 800336c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 800337a:	68bb      	ldr	r3, [r7, #8]
 800337c:	6899      	ldr	r1, [r3, #8]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	430b      	orrs	r3, r1
 8003384:	431a      	orrs	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800338e:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003398:	d104      	bne.n	80033a4 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	649a      	str	r2, [r3, #72]	; 0x48
 80033a2:	e011      	b.n	80033c8 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80033ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d004      	beq.n	80033be <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	697a      	ldr	r2, [r7, #20]
 80033ba:	649a      	str	r2, [r3, #72]	; 0x48
 80033bc:	e004      	b.n	80033c8 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	693a      	ldr	r2, [r7, #16]
 80033c4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	9300      	str	r3, [sp, #0]
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2201      	movs	r2, #1
 80033d0:	2108      	movs	r1, #8
 80033d2:	68f8      	ldr	r0, [r7, #12]
 80033d4:	f000 fb5c 	bl	8003a90 <OSPI_WaitFlagStateUntilTimeout>
 80033d8:	4603      	mov	r3, r0
 80033da:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80033dc:	7ffb      	ldrb	r3, [r7, #31]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10d      	bne.n	80033fe <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2208      	movs	r2, #8
 80033e8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2202      	movs	r2, #2
 80033ee:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80033f0:	e005      	b.n	80033fe <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2210      	movs	r2, #16
 80033fa:	649a      	str	r2, [r3, #72]	; 0x48
 80033fc:	e000      	b.n	8003400 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 80033fe:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003400:	7ffb      	ldrb	r3, [r7, #31]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3720      	adds	r7, #32
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}

0800340a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800340a:	b480      	push	{r7}
 800340c:	b083      	sub	sp, #12
 800340e:	af00      	add	r7, sp, #0
 8003410:	6078      	str	r0, [r7, #4]
 8003412:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	683a      	ldr	r2, [r7, #0]
 8003418:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800341a:	2300      	movs	r3, #0
}
 800341c:	4618      	mov	r0, r3
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b092      	sub	sp, #72	; 0x48
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003434:	2300      	movs	r3, #0
 8003436:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a08      	ldr	r2, [pc, #32]	; (8003468 <HAL_OSPIM_Config+0x40>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d105      	bne.n	8003456 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800344e:	2301      	movs	r3, #1
 8003450:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003454:	e004      	b.n	8003460 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8003456:	2301      	movs	r3, #1
 8003458:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800345a:	2300      	movs	r3, #0
 800345c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003460:	2300      	movs	r3, #0
 8003462:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003466:	e01f      	b.n	80034a8 <HAL_OSPIM_Config+0x80>
 8003468:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 800346c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003470:	3301      	adds	r3, #1
 8003472:	b2d8      	uxtb	r0, r3
 8003474:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003478:	f107 0114 	add.w	r1, r7, #20
 800347c:	4613      	mov	r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	4413      	add	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	4619      	mov	r1, r3
 8003488:	f000 fc9c 	bl	8003dc4 <OSPIM_GetConfig>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d005      	beq.n	800349e <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	2208      	movs	r2, #8
 800349c:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 800349e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034a2:	3301      	adds	r3, #1
 80034a4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80034a8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d9dd      	bls.n	800346c <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80034b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f040 82de 	bne.w	8003a76 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80034ba:	4bc6      	ldr	r3, [pc, #792]	; (80037d4 <HAL_OSPIM_Config+0x3ac>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d00b      	beq.n	80034de <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80034c6:	4bc3      	ldr	r3, [pc, #780]	; (80037d4 <HAL_OSPIM_Config+0x3ac>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4ac2      	ldr	r2, [pc, #776]	; (80037d4 <HAL_OSPIM_Config+0x3ac>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80034d2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80034de:	4bbe      	ldr	r3, [pc, #760]	; (80037d8 <HAL_OSPIM_Config+0x3b0>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d00b      	beq.n	8003502 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80034ea:	4bbb      	ldr	r3, [pc, #748]	; (80037d8 <HAL_OSPIM_Config+0x3b0>)
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4aba      	ldr	r2, [pc, #744]	; (80037d8 <HAL_OSPIM_Config+0x3b0>)
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80034f6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034fa:	f043 0302 	orr.w	r3, r3, #2
 80034fe:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003502:	49b6      	ldr	r1, [pc, #728]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 8003504:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003506:	4613      	mov	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4413      	add	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	3348      	adds	r3, #72	; 0x48
 8003510:	443b      	add	r3, r7
 8003512:	3b2c      	subs	r3, #44	; 0x2c
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	3b01      	subs	r3, #1
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	6859      	ldr	r1, [r3, #4]
 800351e:	48af      	ldr	r0, [pc, #700]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 8003520:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	3348      	adds	r3, #72	; 0x48
 800352c:	443b      	add	r3, r7
 800352e:	3b2c      	subs	r3, #44	; 0x2c
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	3b01      	subs	r3, #1
 8003534:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4403      	add	r3, r0
 800353c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800353e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003540:	4613      	mov	r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	4413      	add	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	3348      	adds	r3, #72	; 0x48
 800354a:	443b      	add	r3, r7
 800354c:	3b34      	subs	r3, #52	; 0x34
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2b00      	cmp	r3, #0
 8003552:	f000 80a1 	beq.w	8003698 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003556:	49a1      	ldr	r1, [pc, #644]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 8003558:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800355a:	4613      	mov	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4413      	add	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	3348      	adds	r3, #72	; 0x48
 8003564:	443b      	add	r3, r7
 8003566:	3b34      	subs	r3, #52	; 0x34
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	3b01      	subs	r3, #1
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	6859      	ldr	r1, [r3, #4]
 8003572:	489a      	ldr	r0, [pc, #616]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 8003574:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003576:	4613      	mov	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	4413      	add	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	3348      	adds	r3, #72	; 0x48
 8003580:	443b      	add	r3, r7
 8003582:	3b34      	subs	r3, #52	; 0x34
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	3b01      	subs	r3, #1
 8003588:	f021 0201 	bic.w	r2, r1, #1
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	4403      	add	r3, r0
 8003590:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003592:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	3348      	adds	r3, #72	; 0x48
 800359e:	443b      	add	r3, r7
 80035a0:	3b30      	subs	r3, #48	; 0x30
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d01d      	beq.n	80035e4 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80035a8:	498c      	ldr	r1, [pc, #560]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 80035aa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	3348      	adds	r3, #72	; 0x48
 80035b6:	443b      	add	r3, r7
 80035b8:	3b30      	subs	r3, #48	; 0x30
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	3b01      	subs	r3, #1
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	440b      	add	r3, r1
 80035c2:	6859      	ldr	r1, [r3, #4]
 80035c4:	4885      	ldr	r0, [pc, #532]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 80035c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035c8:	4613      	mov	r3, r2
 80035ca:	009b      	lsls	r3, r3, #2
 80035cc:	4413      	add	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	3348      	adds	r3, #72	; 0x48
 80035d2:	443b      	add	r3, r7
 80035d4:	3b30      	subs	r3, #48	; 0x30
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	3b01      	subs	r3, #1
 80035da:	f021 0210 	bic.w	r2, r1, #16
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	4403      	add	r3, r0
 80035e2:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80035e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035e6:	4613      	mov	r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	4413      	add	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	3348      	adds	r3, #72	; 0x48
 80035f0:	443b      	add	r3, r7
 80035f2:	3b28      	subs	r3, #40	; 0x28
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d021      	beq.n	800363e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80035fa:	4978      	ldr	r1, [pc, #480]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 80035fc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035fe:	4613      	mov	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	4413      	add	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	3348      	adds	r3, #72	; 0x48
 8003608:	443b      	add	r3, r7
 800360a:	3b28      	subs	r3, #40	; 0x28
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3b01      	subs	r3, #1
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	440b      	add	r3, r1
 8003618:	6859      	ldr	r1, [r3, #4]
 800361a:	4870      	ldr	r0, [pc, #448]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 800361c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800361e:	4613      	mov	r3, r2
 8003620:	009b      	lsls	r3, r3, #2
 8003622:	4413      	add	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	3348      	adds	r3, #72	; 0x48
 8003628:	443b      	add	r3, r7
 800362a:	3b28      	subs	r3, #40	; 0x28
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3b01      	subs	r3, #1
 8003630:	f003 0301 	and.w	r3, r3, #1
 8003634:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	4403      	add	r3, r0
 800363c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800363e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003640:	4613      	mov	r3, r2
 8003642:	009b      	lsls	r3, r3, #2
 8003644:	4413      	add	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	3348      	adds	r3, #72	; 0x48
 800364a:	443b      	add	r3, r7
 800364c:	3b24      	subs	r3, #36	; 0x24
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d021      	beq.n	8003698 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003654:	4961      	ldr	r1, [pc, #388]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 8003656:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003658:	4613      	mov	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4413      	add	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	3348      	adds	r3, #72	; 0x48
 8003662:	443b      	add	r3, r7
 8003664:	3b24      	subs	r3, #36	; 0x24
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	3b01      	subs	r3, #1
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	4859      	ldr	r0, [pc, #356]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 8003676:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003678:	4613      	mov	r3, r2
 800367a:	009b      	lsls	r3, r3, #2
 800367c:	4413      	add	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	3348      	adds	r3, #72	; 0x48
 8003682:	443b      	add	r3, r7
 8003684:	3b24      	subs	r3, #36	; 0x24
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3b01      	subs	r3, #1
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	4403      	add	r3, r0
 8003696:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	3348      	adds	r3, #72	; 0x48
 80036aa:	443b      	add	r3, r7
 80036ac:	3b34      	subs	r3, #52	; 0x34
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4299      	cmp	r1, r3
 80036b2:	d038      	beq.n	8003726 <HAL_OSPIM_Config+0x2fe>
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	3348      	adds	r3, #72	; 0x48
 80036c6:	443b      	add	r3, r7
 80036c8:	3b30      	subs	r3, #48	; 0x30
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4299      	cmp	r1, r3
 80036ce:	d02a      	beq.n	8003726 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	6899      	ldr	r1, [r3, #8]
 80036d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036d8:	4613      	mov	r3, r2
 80036da:	009b      	lsls	r3, r3, #2
 80036dc:	4413      	add	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	3348      	adds	r3, #72	; 0x48
 80036e2:	443b      	add	r3, r7
 80036e4:	3b2c      	subs	r3, #44	; 0x2c
 80036e6:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80036e8:	4299      	cmp	r1, r3
 80036ea:	d01c      	beq.n	8003726 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80036ec:	68bb      	ldr	r3, [r7, #8]
 80036ee:	68d9      	ldr	r1, [r3, #12]
 80036f0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036f4:	4613      	mov	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	4413      	add	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	3348      	adds	r3, #72	; 0x48
 80036fe:	443b      	add	r3, r7
 8003700:	3b28      	subs	r3, #40	; 0x28
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4299      	cmp	r1, r3
 8003706:	d00e      	beq.n	8003726 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8003708:	68bb      	ldr	r3, [r7, #8]
 800370a:	6919      	ldr	r1, [r3, #16]
 800370c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003710:	4613      	mov	r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	4413      	add	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	3348      	adds	r3, #72	; 0x48
 800371a:	443b      	add	r3, r7
 800371c:	3b24      	subs	r3, #36	; 0x24
 800371e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003720:	4299      	cmp	r1, r3
 8003722:	f040 80d3 	bne.w	80038cc <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8003726:	492d      	ldr	r1, [pc, #180]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 8003728:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	3348      	adds	r3, #72	; 0x48
 8003736:	443b      	add	r3, r7
 8003738:	3b34      	subs	r3, #52	; 0x34
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	3b01      	subs	r3, #1
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	440b      	add	r3, r1
 8003742:	6859      	ldr	r1, [r3, #4]
 8003744:	4825      	ldr	r0, [pc, #148]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 8003746:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	3348      	adds	r3, #72	; 0x48
 8003754:	443b      	add	r3, r7
 8003756:	3b34      	subs	r3, #52	; 0x34
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	3b01      	subs	r3, #1
 800375c:	f021 0201 	bic.w	r2, r1, #1
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	4403      	add	r3, r0
 8003764:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8003766:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	3348      	adds	r3, #72	; 0x48
 8003774:	443b      	add	r3, r7
 8003776:	3b30      	subs	r3, #48	; 0x30
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d01f      	beq.n	80037be <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 800377e:	4917      	ldr	r1, [pc, #92]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 8003780:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	3348      	adds	r3, #72	; 0x48
 800378e:	443b      	add	r3, r7
 8003790:	3b30      	subs	r3, #48	; 0x30
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	3b01      	subs	r3, #1
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	6859      	ldr	r1, [r3, #4]
 800379c:	480f      	ldr	r0, [pc, #60]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 800379e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037a2:	4613      	mov	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	3348      	adds	r3, #72	; 0x48
 80037ac:	443b      	add	r3, r7
 80037ae:	3b30      	subs	r3, #48	; 0x30
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3b01      	subs	r3, #1
 80037b4:	f021 0210 	bic.w	r2, r1, #16
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4403      	add	r3, r0
 80037bc:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80037be:	4907      	ldr	r1, [pc, #28]	; (80037dc <HAL_OSPIM_Config+0x3b4>)
 80037c0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037c4:	4613      	mov	r3, r2
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	3348      	adds	r3, #72	; 0x48
 80037ce:	443b      	add	r3, r7
 80037d0:	3b2c      	subs	r3, #44	; 0x2c
 80037d2:	e005      	b.n	80037e0 <HAL_OSPIM_Config+0x3b8>
 80037d4:	a0001000 	.word	0xa0001000
 80037d8:	a0001400 	.word	0xa0001400
 80037dc:	50061c00 	.word	0x50061c00
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	3b01      	subs	r3, #1
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	440b      	add	r3, r1
 80037e8:	6859      	ldr	r1, [r3, #4]
 80037ea:	48a6      	ldr	r0, [pc, #664]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 80037ec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	3348      	adds	r3, #72	; 0x48
 80037fa:	443b      	add	r3, r7
 80037fc:	3b2c      	subs	r3, #44	; 0x2c
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3b01      	subs	r3, #1
 8003802:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	4403      	add	r3, r0
 800380a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800380c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	3348      	adds	r3, #72	; 0x48
 800381a:	443b      	add	r3, r7
 800381c:	3b28      	subs	r3, #40	; 0x28
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d023      	beq.n	800386c <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003824:	4997      	ldr	r1, [pc, #604]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 8003826:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800382a:	4613      	mov	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	4413      	add	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	3348      	adds	r3, #72	; 0x48
 8003834:	443b      	add	r3, r7
 8003836:	3b28      	subs	r3, #40	; 0x28
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3b01      	subs	r3, #1
 800383c:	f003 0301 	and.w	r3, r3, #1
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	6859      	ldr	r1, [r3, #4]
 8003846:	488f      	ldr	r0, [pc, #572]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 8003848:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800384c:	4613      	mov	r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	3348      	adds	r3, #72	; 0x48
 8003856:	443b      	add	r3, r7
 8003858:	3b28      	subs	r3, #40	; 0x28
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3b01      	subs	r3, #1
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4403      	add	r3, r0
 800386a:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800386c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003870:	4613      	mov	r3, r2
 8003872:	009b      	lsls	r3, r3, #2
 8003874:	4413      	add	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	3348      	adds	r3, #72	; 0x48
 800387a:	443b      	add	r3, r7
 800387c:	3b24      	subs	r3, #36	; 0x24
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d023      	beq.n	80038cc <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003884:	497f      	ldr	r1, [pc, #508]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 8003886:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	3348      	adds	r3, #72	; 0x48
 8003894:	443b      	add	r3, r7
 8003896:	3b24      	subs	r3, #36	; 0x24
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3b01      	subs	r3, #1
 800389c:	f003 0301 	and.w	r3, r3, #1
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	6859      	ldr	r1, [r3, #4]
 80038a6:	4877      	ldr	r0, [pc, #476]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 80038a8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038ac:	4613      	mov	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	3348      	adds	r3, #72	; 0x48
 80038b6:	443b      	add	r3, r7
 80038b8:	3b24      	subs	r3, #36	; 0x24
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	3b01      	subs	r3, #1
 80038be:	f003 0301 	and.w	r3, r3, #1
 80038c2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4403      	add	r3, r0
 80038ca:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80038cc:	4a6d      	ldr	r2, [pc, #436]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e0:	025b      	lsls	r3, r3, #9
 80038e2:	431a      	orrs	r2, r3
 80038e4:	4967      	ldr	r1, [pc, #412]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	3b01      	subs	r3, #1
 80038ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	440b      	add	r3, r1
 80038f4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80038f6:	4a63      	ldr	r2, [pc, #396]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	3b01      	subs	r3, #1
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f023 0203 	bic.w	r2, r3, #3
 8003908:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	431a      	orrs	r2, r3
 800390e:	495d      	ldr	r1, [pc, #372]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3b01      	subs	r3, #1
 8003916:	f042 0201 	orr.w	r2, r2, #1
 800391a:	009b      	lsls	r3, r3, #2
 800391c:	440b      	add	r3, r1
 800391e:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003920:	68bb      	ldr	r3, [r7, #8]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d014      	beq.n	8003952 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8003928:	4a56      	ldr	r2, [pc, #344]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	3b01      	subs	r3, #1
 8003930:	009b      	lsls	r3, r3, #2
 8003932:	4413      	add	r3, r2
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800393a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800393c:	015b      	lsls	r3, r3, #5
 800393e:	431a      	orrs	r2, r3
 8003940:	4950      	ldr	r1, [pc, #320]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	3b01      	subs	r3, #1
 8003948:	f042 0210 	orr.w	r2, r2, #16
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	68db      	ldr	r3, [r3, #12]
 8003956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d019      	beq.n	8003992 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800395e:	4a49      	ldr	r2, [pc, #292]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	3b01      	subs	r3, #1
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	4413      	add	r3, r2
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003974:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003976:	049b      	lsls	r3, r3, #18
 8003978:	431a      	orrs	r2, r3
 800397a:	4942      	ldr	r1, [pc, #264]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	68db      	ldr	r3, [r3, #12]
 8003980:	3b01      	subs	r3, #1
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	440b      	add	r3, r1
 800398e:	605a      	str	r2, [r3, #4]
 8003990:	e01c      	b.n	80039cc <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d018      	beq.n	80039cc <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800399a:	4a3a      	ldr	r2, [pc, #232]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	3b01      	subs	r3, #1
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80039b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b2:	069b      	lsls	r3, r3, #26
 80039b4:	431a      	orrs	r2, r3
 80039b6:	4933      	ldr	r1, [pc, #204]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	3b01      	subs	r3, #1
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80039c6:	009b      	lsls	r3, r3, #2
 80039c8:	440b      	add	r3, r1
 80039ca:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d019      	beq.n	8003a0c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80039d8:	4a2a      	ldr	r2, [pc, #168]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	3b01      	subs	r3, #1
 80039e0:	f003 0301 	and.w	r3, r3, #1
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f0:	049b      	lsls	r3, r3, #18
 80039f2:	431a      	orrs	r2, r3
 80039f4:	4923      	ldr	r1, [pc, #140]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	3b01      	subs	r3, #1
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003a04:	009b      	lsls	r3, r3, #2
 8003a06:	440b      	add	r3, r1
 8003a08:	605a      	str	r2, [r3, #4]
 8003a0a:	e01c      	b.n	8003a46 <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	691b      	ldr	r3, [r3, #16]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d018      	beq.n	8003a46 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003a14:	4a1b      	ldr	r2, [pc, #108]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	691b      	ldr	r3, [r3, #16]
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4413      	add	r3, r2
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a2c:	069b      	lsls	r3, r3, #26
 8003a2e:	431a      	orrs	r2, r3
 8003a30:	4914      	ldr	r1, [pc, #80]	; (8003a84 <HAL_OSPIM_Config+0x65c>)
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	3b01      	subs	r3, #1
 8003a38:	f003 0301 	and.w	r3, r3, #1
 8003a3c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003a46:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d005      	beq.n	8003a5e <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003a52:	4b0d      	ldr	r3, [pc, #52]	; (8003a88 <HAL_OSPIM_Config+0x660>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a0c      	ldr	r2, [pc, #48]	; (8003a88 <HAL_OSPIM_Config+0x660>)
 8003a58:	f043 0301 	orr.w	r3, r3, #1
 8003a5c:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003a5e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d005      	beq.n	8003a76 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003a6a:	4b08      	ldr	r3, [pc, #32]	; (8003a8c <HAL_OSPIM_Config+0x664>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a07      	ldr	r2, [pc, #28]	; (8003a8c <HAL_OSPIM_Config+0x664>)
 8003a70:	f043 0301 	orr.w	r3, r3, #1
 8003a74:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003a76:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	3748      	adds	r7, #72	; 0x48
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bd80      	pop	{r7, pc}
 8003a82:	bf00      	nop
 8003a84:	50061c00 	.word	0x50061c00
 8003a88:	a0001000 	.word	0xa0001000
 8003a8c:	a0001400 	.word	0xa0001400

08003a90 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	60f8      	str	r0, [r7, #12]
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	603b      	str	r3, [r7, #0]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003aa0:	e01a      	b.n	8003ad8 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aa8:	d016      	beq.n	8003ad8 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aaa:	f7fc fd91 	bl	80005d0 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d302      	bcc.n	8003ac0 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003aba:	69bb      	ldr	r3, [r7, #24]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10b      	bne.n	8003ad8 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ac6:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003acc:	f043 0201 	orr.w	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	e00e      	b.n	8003af6 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	6a1a      	ldr	r2, [r3, #32]
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	4013      	ands	r3, r2
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	bf14      	ite	ne
 8003ae6:	2301      	movne	r3, #1
 8003ae8:	2300      	moveq	r3, #0
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	461a      	mov	r2, r3
 8003aee:	79fb      	ldrb	r3, [r7, #7]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d1d6      	bne.n	8003aa2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003af4:	2300      	movs	r3, #0
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3710      	adds	r7, #16
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bd80      	pop	{r7, pc}
	...

08003b00 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b089      	sub	sp, #36	; 0x24
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b1c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d10a      	bne.n	8003b3c <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	430a      	orrs	r2, r1
 8003b3a:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b02      	cmp	r3, #2
 8003b42:	d114      	bne.n	8003b6e <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b4c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003b56:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003b60:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003b6a:	60fb      	str	r3, [r7, #12]
 8003b6c:	e013      	b.n	8003b96 <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b76:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003b80:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003b8a:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003b94:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d012      	beq.n	8003bd2 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc4:	4319      	orrs	r1, r3
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	430b      	orrs	r3, r1
 8003bcc:	431a      	orrs	r2, r3
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f023 021f 	bic.w	r2, r3, #31
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bde:	431a      	orrs	r2, r3
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003be4:	683b      	ldr	r3, [r7, #0]
 8003be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d009      	beq.n	8003c00 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d105      	bne.n	8003c00 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	3a01      	subs	r2, #1
 8003bfe:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 8099 	beq.w	8003d3c <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	69db      	ldr	r3, [r3, #28]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d055      	beq.n	8003cbe <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d01e      	beq.n	8003c58 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b68      	ldr	r3, [pc, #416]	; (8003dc0 <OSPI_ConfigCmd+0x2c0>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	683a      	ldr	r2, [r7, #0]
 8003c24:	68d1      	ldr	r1, [r2, #12]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	6952      	ldr	r2, [r2, #20]
 8003c2a:	4311      	orrs	r1, r2
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	6912      	ldr	r2, [r2, #16]
 8003c30:	4311      	orrs	r1, r2
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	69d2      	ldr	r2, [r2, #28]
 8003c36:	4311      	orrs	r1, r2
 8003c38:	683a      	ldr	r2, [r7, #0]
 8003c3a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c3c:	4311      	orrs	r1, r2
 8003c3e:	683a      	ldr	r2, [r7, #0]
 8003c40:	6a12      	ldr	r2, [r2, #32]
 8003c42:	4311      	orrs	r1, r2
 8003c44:	683a      	ldr	r2, [r7, #0]
 8003c46:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c48:	4311      	orrs	r1, r2
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	431a      	orrs	r2, r3
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	601a      	str	r2, [r3, #0]
 8003c56:	e028      	b.n	8003caa <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003c58:	69bb      	ldr	r3, [r7, #24]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c60:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c64:	683a      	ldr	r2, [r7, #0]
 8003c66:	68d1      	ldr	r1, [r2, #12]
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	6952      	ldr	r2, [r2, #20]
 8003c6c:	4311      	orrs	r1, r2
 8003c6e:	683a      	ldr	r2, [r7, #0]
 8003c70:	6912      	ldr	r2, [r2, #16]
 8003c72:	4311      	orrs	r1, r2
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	69d2      	ldr	r2, [r2, #28]
 8003c78:	4311      	orrs	r1, r2
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c7e:	4311      	orrs	r1, r2
 8003c80:	683a      	ldr	r2, [r7, #0]
 8003c82:	6a12      	ldr	r2, [r2, #32]
 8003c84:	430a      	orrs	r2, r1
 8003c86:	431a      	orrs	r2, r3
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c90:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c94:	d109      	bne.n	8003caa <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003c9a:	2b08      	cmp	r3, #8
 8003c9c:	d105      	bne.n	8003caa <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	689a      	ldr	r2, [r3, #8]
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	683a      	ldr	r2, [r7, #0]
 8003cb8:	6992      	ldr	r2, [r2, #24]
 8003cba:	649a      	str	r2, [r3, #72]	; 0x48
 8003cbc:	e078      	b.n	8003db0 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d017      	beq.n	8003cf6 <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003cce:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	68d1      	ldr	r1, [r2, #12]
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	6952      	ldr	r2, [r2, #20]
 8003cda:	4311      	orrs	r1, r2
 8003cdc:	683a      	ldr	r2, [r7, #0]
 8003cde:	6912      	ldr	r2, [r2, #16]
 8003ce0:	4311      	orrs	r1, r2
 8003ce2:	683a      	ldr	r2, [r7, #0]
 8003ce4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003ce6:	4311      	orrs	r1, r2
 8003ce8:	683a      	ldr	r2, [r7, #0]
 8003cea:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cec:	430a      	orrs	r2, r1
 8003cee:	431a      	orrs	r2, r3
 8003cf0:	69bb      	ldr	r3, [r7, #24]
 8003cf2:	601a      	str	r2, [r3, #0]
 8003cf4:	e01d      	b.n	8003d32 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	68d9      	ldr	r1, [r3, #12]
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	4319      	orrs	r1, r3
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d1c:	d109      	bne.n	8003d32 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003d22:	2b08      	cmp	r3, #8
 8003d24:	d105      	bne.n	8003d32 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d2e:	69bb      	ldr	r3, [r7, #24]
 8003d30:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	689a      	ldr	r2, [r3, #8]
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	601a      	str	r2, [r3, #0]
 8003d3a:	e039      	b.n	8003db0 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	69db      	ldr	r3, [r3, #28]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d030      	beq.n	8003da6 <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d017      	beq.n	8003d7c <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003d54:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d58:	683a      	ldr	r2, [r7, #0]
 8003d5a:	69d1      	ldr	r1, [r2, #28]
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d60:	4311      	orrs	r1, r2
 8003d62:	683a      	ldr	r2, [r7, #0]
 8003d64:	6a12      	ldr	r2, [r2, #32]
 8003d66:	4311      	orrs	r1, r2
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d6c:	4311      	orrs	r1, r2
 8003d6e:	683a      	ldr	r2, [r7, #0]
 8003d70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d72:	430a      	orrs	r2, r1
 8003d74:	431a      	orrs	r2, r3
 8003d76:	69bb      	ldr	r3, [r7, #24]
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e00e      	b.n	8003d9a <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8003d7c:	69bb      	ldr	r3, [r7, #24]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	69d9      	ldr	r1, [r3, #28]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	4319      	orrs	r1, r3
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	6a1b      	ldr	r3, [r3, #32]
 8003d92:	430b      	orrs	r3, r1
 8003d94:	431a      	orrs	r2, r3
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	683a      	ldr	r2, [r7, #0]
 8003da0:	6992      	ldr	r2, [r2, #24]
 8003da2:	649a      	str	r2, [r3, #72]	; 0x48
 8003da4:	e004      	b.n	8003db0 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2208      	movs	r2, #8
 8003dae:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003db0:	7ffb      	ldrb	r3, [r7, #31]
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3724      	adds	r7, #36	; 0x24
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	f0ffc0c0 	.word	0xf0ffc0c0

08003dc4 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b087      	sub	sp, #28
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	4603      	mov	r3, r0
 8003dcc:	6039      	str	r1, [r7, #0]
 8003dce:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <OSPIM_GetConfig+0x26>
 8003dde:	79fb      	ldrb	r3, [r7, #7]
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d802      	bhi.n	8003dea <OSPIM_GetConfig+0x26>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d102      	bne.n	8003df0 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	75fb      	strb	r3, [r7, #23]
 8003dee:	e08e      	b.n	8003f0e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	2200      	movs	r2, #0
 8003df4:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2200      	movs	r2, #0
 8003e06:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003e0e:	79fb      	ldrb	r3, [r7, #7]
 8003e10:	2b02      	cmp	r3, #2
 8003e12:	d101      	bne.n	8003e18 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003e14:	4b41      	ldr	r3, [pc, #260]	; (8003f1c <OSPIM_GetConfig+0x158>)
 8003e16:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003e18:	2300      	movs	r3, #0
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	e074      	b.n	8003f08 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003e1e:	4a40      	ldr	r2, [pc, #256]	; (8003f20 <OSPIM_GetConfig+0x15c>)
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	4413      	add	r3, r2
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d00a      	beq.n	8003e4a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4053      	eors	r3, r2
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d103      	bne.n	8003e4a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	1c5a      	adds	r2, r3, #1
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003e54:	68ba      	ldr	r2, [r7, #8]
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	4053      	eors	r3, r2
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d103      	bne.n	8003e6a <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	683b      	ldr	r3, [r7, #0]
 8003e68:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d00a      	beq.n	8003e8a <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4053      	eors	r3, r2
 8003e7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d103      	bne.n	8003e8a <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	1c5a      	adds	r2, r3, #1
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d018      	beq.n	8003ec6 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003e94:	68ba      	ldr	r2, [r7, #8]
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4053      	eors	r3, r2
 8003e9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d111      	bne.n	8003ec6 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d106      	bne.n	8003eba <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	3301      	adds	r3, #1
 8003eb0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	60da      	str	r2, [r3, #12]
 8003eb8:	e005      	b.n	8003ec6 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003ec2:	683b      	ldr	r3, [r7, #0]
 8003ec4:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d018      	beq.n	8003f02 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003ed0:	68ba      	ldr	r2, [r7, #8]
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	4053      	eors	r3, r2
 8003ed6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d111      	bne.n	8003f02 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d106      	bne.n	8003ef6 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	3301      	adds	r3, #1
 8003eec:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	611a      	str	r2, [r3, #16]
 8003ef4:	e005      	b.n	8003f02 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	3301      	adds	r3, #1
 8003efa:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003efe:	683b      	ldr	r3, [r7, #0]
 8003f00:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	3301      	adds	r3, #1
 8003f06:	60fb      	str	r3, [r7, #12]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d987      	bls.n	8003e1e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	371c      	adds	r7, #28
 8003f14:	46bd      	mov	sp, r7
 8003f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1a:	4770      	bx	lr
 8003f1c:	04040222 	.word	0x04040222
 8003f20:	50061c00 	.word	0x50061c00

08003f24 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f28:	4b0d      	ldr	r3, [pc, #52]	; (8003f60 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f34:	d102      	bne.n	8003f3c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003f36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f3a:	e00b      	b.n	8003f54 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003f3c:	4b08      	ldr	r3, [pc, #32]	; (8003f60 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003f3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f46:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4a:	d102      	bne.n	8003f52 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f50:	e000      	b.n	8003f54 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003f52:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40007000 	.word	0x40007000

08003f64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d141      	bne.n	8003ff6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f72:	4b4b      	ldr	r3, [pc, #300]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7e:	d131      	bne.n	8003fe4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f80:	4b47      	ldr	r3, [pc, #284]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f86:	4a46      	ldr	r2, [pc, #280]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f90:	4b43      	ldr	r3, [pc, #268]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f98:	4a41      	ldr	r2, [pc, #260]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003fa0:	4b40      	ldr	r3, [pc, #256]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2232      	movs	r2, #50	; 0x32
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	4a3f      	ldr	r2, [pc, #252]	; (80040a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	0c9b      	lsrs	r3, r3, #18
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fb6:	e002      	b.n	8003fbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fbe:	4b38      	ldr	r3, [pc, #224]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fca:	d102      	bne.n	8003fd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1f2      	bne.n	8003fb8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fd2:	4b33      	ldr	r3, [pc, #204]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fde:	d158      	bne.n	8004092 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e057      	b.n	8004094 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fe4:	4b2e      	ldr	r3, [pc, #184]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fe6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fea:	4a2d      	ldr	r2, [pc, #180]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ff4:	e04d      	b.n	8004092 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffc:	d141      	bne.n	8004082 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ffe:	4b28      	ldr	r3, [pc, #160]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400a:	d131      	bne.n	8004070 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800400c:	4b24      	ldr	r3, [pc, #144]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800400e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004012:	4a23      	ldr	r2, [pc, #140]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004014:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004018:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800401c:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004024:	4a1e      	ldr	r2, [pc, #120]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004026:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800402a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800402c:	4b1d      	ldr	r3, [pc, #116]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2232      	movs	r2, #50	; 0x32
 8004032:	fb02 f303 	mul.w	r3, r2, r3
 8004036:	4a1c      	ldr	r2, [pc, #112]	; (80040a8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004038:	fba2 2303 	umull	r2, r3, r2, r3
 800403c:	0c9b      	lsrs	r3, r3, #18
 800403e:	3301      	adds	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004042:	e002      	b.n	800404a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	3b01      	subs	r3, #1
 8004048:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404c:	695b      	ldr	r3, [r3, #20]
 800404e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004052:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004056:	d102      	bne.n	800405e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f2      	bne.n	8004044 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800405e:	4b10      	ldr	r3, [pc, #64]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406a:	d112      	bne.n	8004092 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800406c:	2303      	movs	r3, #3
 800406e:	e011      	b.n	8004094 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004070:	4b0b      	ldr	r3, [pc, #44]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004072:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004076:	4a0a      	ldr	r2, [pc, #40]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004078:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800407c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004080:	e007      	b.n	8004092 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004082:	4b07      	ldr	r3, [pc, #28]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800408a:	4a05      	ldr	r2, [pc, #20]	; (80040a0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004090:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	40007000 	.word	0x40007000
 80040a4:	20000070 	.word	0x20000070
 80040a8:	431bde83 	.word	0x431bde83

080040ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b088      	sub	sp, #32
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d102      	bne.n	80040c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	f000 bc08 	b.w	80048d0 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040c0:	4b96      	ldr	r3, [pc, #600]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f003 030c 	and.w	r3, r3, #12
 80040c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040ca:	4b94      	ldr	r3, [pc, #592]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80040cc:	68db      	ldr	r3, [r3, #12]
 80040ce:	f003 0303 	and.w	r3, r3, #3
 80040d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0310 	and.w	r3, r3, #16
 80040dc:	2b00      	cmp	r3, #0
 80040de:	f000 80e4 	beq.w	80042aa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d007      	beq.n	80040f8 <HAL_RCC_OscConfig+0x4c>
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	2b0c      	cmp	r3, #12
 80040ec:	f040 808b 	bne.w	8004206 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040f0:	697b      	ldr	r3, [r7, #20]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	f040 8087 	bne.w	8004206 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040f8:	4b88      	ldr	r3, [pc, #544]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b00      	cmp	r3, #0
 8004102:	d005      	beq.n	8004110 <HAL_RCC_OscConfig+0x64>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d101      	bne.n	8004110 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800410c:	2301      	movs	r3, #1
 800410e:	e3df      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a1a      	ldr	r2, [r3, #32]
 8004114:	4b81      	ldr	r3, [pc, #516]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 0308 	and.w	r3, r3, #8
 800411c:	2b00      	cmp	r3, #0
 800411e:	d004      	beq.n	800412a <HAL_RCC_OscConfig+0x7e>
 8004120:	4b7e      	ldr	r3, [pc, #504]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004128:	e005      	b.n	8004136 <HAL_RCC_OscConfig+0x8a>
 800412a:	4b7c      	ldr	r3, [pc, #496]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800412c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004130:	091b      	lsrs	r3, r3, #4
 8004132:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004136:	4293      	cmp	r3, r2
 8004138:	d223      	bcs.n	8004182 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fdcc 	bl	8004cdc <RCC_SetFlashLatencyFromMSIRange>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d001      	beq.n	800414e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e3c0      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800414e:	4b73      	ldr	r3, [pc, #460]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a72      	ldr	r2, [pc, #456]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004154:	f043 0308 	orr.w	r3, r3, #8
 8004158:	6013      	str	r3, [r2, #0]
 800415a:	4b70      	ldr	r3, [pc, #448]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	496d      	ldr	r1, [pc, #436]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004168:	4313      	orrs	r3, r2
 800416a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800416c:	4b6b      	ldr	r3, [pc, #428]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	69db      	ldr	r3, [r3, #28]
 8004178:	021b      	lsls	r3, r3, #8
 800417a:	4968      	ldr	r1, [pc, #416]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800417c:	4313      	orrs	r3, r2
 800417e:	604b      	str	r3, [r1, #4]
 8004180:	e025      	b.n	80041ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004182:	4b66      	ldr	r3, [pc, #408]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a65      	ldr	r2, [pc, #404]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004188:	f043 0308 	orr.w	r3, r3, #8
 800418c:	6013      	str	r3, [r2, #0]
 800418e:	4b63      	ldr	r3, [pc, #396]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	4960      	ldr	r1, [pc, #384]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800419c:	4313      	orrs	r3, r2
 800419e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041a0:	4b5e      	ldr	r3, [pc, #376]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	021b      	lsls	r3, r3, #8
 80041ae:	495b      	ldr	r1, [pc, #364]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80041b0:	4313      	orrs	r3, r2
 80041b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041b4:	69bb      	ldr	r3, [r7, #24]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d109      	bne.n	80041ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fd8c 	bl	8004cdc <RCC_SetFlashLatencyFromMSIRange>
 80041c4:	4603      	mov	r3, r0
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d001      	beq.n	80041ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80041ca:	2301      	movs	r3, #1
 80041cc:	e380      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041ce:	f000 fcc1 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 80041d2:	4602      	mov	r2, r0
 80041d4:	4b51      	ldr	r3, [pc, #324]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	091b      	lsrs	r3, r3, #4
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	4950      	ldr	r1, [pc, #320]	; (8004320 <HAL_RCC_OscConfig+0x274>)
 80041e0:	5ccb      	ldrb	r3, [r1, r3]
 80041e2:	f003 031f 	and.w	r3, r3, #31
 80041e6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ea:	4a4e      	ldr	r2, [pc, #312]	; (8004324 <HAL_RCC_OscConfig+0x278>)
 80041ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041ee:	4b4e      	ldr	r3, [pc, #312]	; (8004328 <HAL_RCC_OscConfig+0x27c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4618      	mov	r0, r3
 80041f4:	f7fc f99c 	bl	8000530 <HAL_InitTick>
 80041f8:	4603      	mov	r3, r0
 80041fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80041fc:	7bfb      	ldrb	r3, [r7, #15]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d052      	beq.n	80042a8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
 8004204:	e364      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	699b      	ldr	r3, [r3, #24]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d032      	beq.n	8004274 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800420e:	4b43      	ldr	r3, [pc, #268]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4a42      	ldr	r2, [pc, #264]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800421a:	f7fc f9d9 	bl	80005d0 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004222:	f7fc f9d5 	bl	80005d0 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e34d      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004234:	4b39      	ldr	r3, [pc, #228]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 0302 	and.w	r3, r3, #2
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004240:	4b36      	ldr	r3, [pc, #216]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a35      	ldr	r2, [pc, #212]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004246:	f043 0308 	orr.w	r3, r3, #8
 800424a:	6013      	str	r3, [r2, #0]
 800424c:	4b33      	ldr	r3, [pc, #204]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	4930      	ldr	r1, [pc, #192]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800425a:	4313      	orrs	r3, r2
 800425c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800425e:	4b2f      	ldr	r3, [pc, #188]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	021b      	lsls	r3, r3, #8
 800426c:	492b      	ldr	r1, [pc, #172]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800426e:	4313      	orrs	r3, r2
 8004270:	604b      	str	r3, [r1, #4]
 8004272:	e01a      	b.n	80042aa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004274:	4b29      	ldr	r3, [pc, #164]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	4a28      	ldr	r2, [pc, #160]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800427a:	f023 0301 	bic.w	r3, r3, #1
 800427e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004280:	f7fc f9a6 	bl	80005d0 <HAL_GetTick>
 8004284:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004286:	e008      	b.n	800429a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004288:	f7fc f9a2 	bl	80005d0 <HAL_GetTick>
 800428c:	4602      	mov	r2, r0
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	1ad3      	subs	r3, r2, r3
 8004292:	2b02      	cmp	r3, #2
 8004294:	d901      	bls.n	800429a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004296:	2303      	movs	r3, #3
 8004298:	e31a      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800429a:	4b20      	ldr	r3, [pc, #128]	; (800431c <HAL_RCC_OscConfig+0x270>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f003 0302 	and.w	r3, r3, #2
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d1f0      	bne.n	8004288 <HAL_RCC_OscConfig+0x1dc>
 80042a6:	e000      	b.n	80042aa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042a8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d073      	beq.n	800439e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d005      	beq.n	80042c8 <HAL_RCC_OscConfig+0x21c>
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	2b0c      	cmp	r3, #12
 80042c0:	d10e      	bne.n	80042e0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b03      	cmp	r3, #3
 80042c6:	d10b      	bne.n	80042e0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042c8:	4b14      	ldr	r3, [pc, #80]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d063      	beq.n	800439c <HAL_RCC_OscConfig+0x2f0>
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	685b      	ldr	r3, [r3, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d15f      	bne.n	800439c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e2f7      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	685b      	ldr	r3, [r3, #4]
 80042e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042e8:	d106      	bne.n	80042f8 <HAL_RCC_OscConfig+0x24c>
 80042ea:	4b0c      	ldr	r3, [pc, #48]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a0b      	ldr	r2, [pc, #44]	; (800431c <HAL_RCC_OscConfig+0x270>)
 80042f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f4:	6013      	str	r3, [r2, #0]
 80042f6:	e025      	b.n	8004344 <HAL_RCC_OscConfig+0x298>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004300:	d114      	bne.n	800432c <HAL_RCC_OscConfig+0x280>
 8004302:	4b06      	ldr	r3, [pc, #24]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a05      	ldr	r2, [pc, #20]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004308:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800430c:	6013      	str	r3, [r2, #0]
 800430e:	4b03      	ldr	r3, [pc, #12]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a02      	ldr	r2, [pc, #8]	; (800431c <HAL_RCC_OscConfig+0x270>)
 8004314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	e013      	b.n	8004344 <HAL_RCC_OscConfig+0x298>
 800431c:	40021000 	.word	0x40021000
 8004320:	080096e4 	.word	0x080096e4
 8004324:	20000070 	.word	0x20000070
 8004328:	20000000 	.word	0x20000000
 800432c:	4ba0      	ldr	r3, [pc, #640]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a9f      	ldr	r2, [pc, #636]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004332:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	4b9d      	ldr	r3, [pc, #628]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a9c      	ldr	r2, [pc, #624]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800433e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004342:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d013      	beq.n	8004374 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800434c:	f7fc f940 	bl	80005d0 <HAL_GetTick>
 8004350:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004352:	e008      	b.n	8004366 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004354:	f7fc f93c 	bl	80005d0 <HAL_GetTick>
 8004358:	4602      	mov	r2, r0
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	1ad3      	subs	r3, r2, r3
 800435e:	2b64      	cmp	r3, #100	; 0x64
 8004360:	d901      	bls.n	8004366 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e2b4      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004366:	4b92      	ldr	r3, [pc, #584]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0f0      	beq.n	8004354 <HAL_RCC_OscConfig+0x2a8>
 8004372:	e014      	b.n	800439e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004374:	f7fc f92c 	bl	80005d0 <HAL_GetTick>
 8004378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800437a:	e008      	b.n	800438e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800437c:	f7fc f928 	bl	80005d0 <HAL_GetTick>
 8004380:	4602      	mov	r2, r0
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	1ad3      	subs	r3, r2, r3
 8004386:	2b64      	cmp	r3, #100	; 0x64
 8004388:	d901      	bls.n	800438e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800438a:	2303      	movs	r3, #3
 800438c:	e2a0      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800438e:	4b88      	ldr	r3, [pc, #544]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d1f0      	bne.n	800437c <HAL_RCC_OscConfig+0x2d0>
 800439a:	e000      	b.n	800439e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800439c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0302 	and.w	r3, r3, #2
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d060      	beq.n	800446c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043aa:	69bb      	ldr	r3, [r7, #24]
 80043ac:	2b04      	cmp	r3, #4
 80043ae:	d005      	beq.n	80043bc <HAL_RCC_OscConfig+0x310>
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	2b0c      	cmp	r3, #12
 80043b4:	d119      	bne.n	80043ea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	2b02      	cmp	r3, #2
 80043ba:	d116      	bne.n	80043ea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043bc:	4b7c      	ldr	r3, [pc, #496]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_OscConfig+0x328>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d101      	bne.n	80043d4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e27d      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d4:	4b76      	ldr	r3, [pc, #472]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	061b      	lsls	r3, r3, #24
 80043e2:	4973      	ldr	r1, [pc, #460]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043e8:	e040      	b.n	800446c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	68db      	ldr	r3, [r3, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d023      	beq.n	800443a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f2:	4b6f      	ldr	r3, [pc, #444]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	4a6e      	ldr	r2, [pc, #440]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80043f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043fe:	f7fc f8e7 	bl	80005d0 <HAL_GetTick>
 8004402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004404:	e008      	b.n	8004418 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004406:	f7fc f8e3 	bl	80005d0 <HAL_GetTick>
 800440a:	4602      	mov	r2, r0
 800440c:	693b      	ldr	r3, [r7, #16]
 800440e:	1ad3      	subs	r3, r2, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d901      	bls.n	8004418 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004414:	2303      	movs	r3, #3
 8004416:	e25b      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004418:	4b65      	ldr	r3, [pc, #404]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004420:	2b00      	cmp	r3, #0
 8004422:	d0f0      	beq.n	8004406 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004424:	4b62      	ldr	r3, [pc, #392]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	691b      	ldr	r3, [r3, #16]
 8004430:	061b      	lsls	r3, r3, #24
 8004432:	495f      	ldr	r1, [pc, #380]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004434:	4313      	orrs	r3, r2
 8004436:	604b      	str	r3, [r1, #4]
 8004438:	e018      	b.n	800446c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443a:	4b5d      	ldr	r3, [pc, #372]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a5c      	ldr	r2, [pc, #368]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004446:	f7fc f8c3 	bl	80005d0 <HAL_GetTick>
 800444a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800444c:	e008      	b.n	8004460 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800444e:	f7fc f8bf 	bl	80005d0 <HAL_GetTick>
 8004452:	4602      	mov	r2, r0
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	2b02      	cmp	r3, #2
 800445a:	d901      	bls.n	8004460 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800445c:	2303      	movs	r3, #3
 800445e:	e237      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004460:	4b53      	ldr	r3, [pc, #332]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f0      	bne.n	800444e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d03c      	beq.n	80044f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	695b      	ldr	r3, [r3, #20]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d01c      	beq.n	80044ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004480:	4b4b      	ldr	r3, [pc, #300]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004482:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004486:	4a4a      	ldr	r2, [pc, #296]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004488:	f043 0301 	orr.w	r3, r3, #1
 800448c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004490:	f7fc f89e 	bl	80005d0 <HAL_GetTick>
 8004494:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004496:	e008      	b.n	80044aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004498:	f7fc f89a 	bl	80005d0 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d901      	bls.n	80044aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044a6:	2303      	movs	r3, #3
 80044a8:	e212      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044aa:	4b41      	ldr	r3, [pc, #260]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80044ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d0ef      	beq.n	8004498 <HAL_RCC_OscConfig+0x3ec>
 80044b8:	e01b      	b.n	80044f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044ba:	4b3d      	ldr	r3, [pc, #244]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80044bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c0:	4a3b      	ldr	r2, [pc, #236]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80044c2:	f023 0301 	bic.w	r3, r3, #1
 80044c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ca:	f7fc f881 	bl	80005d0 <HAL_GetTick>
 80044ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044d0:	e008      	b.n	80044e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d2:	f7fc f87d 	bl	80005d0 <HAL_GetTick>
 80044d6:	4602      	mov	r2, r0
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	1ad3      	subs	r3, r2, r3
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d901      	bls.n	80044e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044e0:	2303      	movs	r3, #3
 80044e2:	e1f5      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044e4:	4b32      	ldr	r3, [pc, #200]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80044e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d1ef      	bne.n	80044d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0304 	and.w	r3, r3, #4
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	f000 80a6 	beq.w	800464c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004500:	2300      	movs	r3, #0
 8004502:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004504:	4b2a      	ldr	r3, [pc, #168]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d10d      	bne.n	800452c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004510:	4b27      	ldr	r3, [pc, #156]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004514:	4a26      	ldr	r2, [pc, #152]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451a:	6593      	str	r3, [r2, #88]	; 0x58
 800451c:	4b24      	ldr	r3, [pc, #144]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800451e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004524:	60bb      	str	r3, [r7, #8]
 8004526:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004528:	2301      	movs	r3, #1
 800452a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800452c:	4b21      	ldr	r3, [pc, #132]	; (80045b4 <HAL_RCC_OscConfig+0x508>)
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004534:	2b00      	cmp	r3, #0
 8004536:	d118      	bne.n	800456a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004538:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <HAL_RCC_OscConfig+0x508>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a1d      	ldr	r2, [pc, #116]	; (80045b4 <HAL_RCC_OscConfig+0x508>)
 800453e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004542:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004544:	f7fc f844 	bl	80005d0 <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800454a:	e008      	b.n	800455e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800454c:	f7fc f840 	bl	80005d0 <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	2b02      	cmp	r3, #2
 8004558:	d901      	bls.n	800455e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800455a:	2303      	movs	r3, #3
 800455c:	e1b8      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800455e:	4b15      	ldr	r3, [pc, #84]	; (80045b4 <HAL_RCC_OscConfig+0x508>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004566:	2b00      	cmp	r3, #0
 8004568:	d0f0      	beq.n	800454c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	2b01      	cmp	r3, #1
 8004570:	d108      	bne.n	8004584 <HAL_RCC_OscConfig+0x4d8>
 8004572:	4b0f      	ldr	r3, [pc, #60]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004574:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004578:	4a0d      	ldr	r2, [pc, #52]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800457a:	f043 0301 	orr.w	r3, r3, #1
 800457e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004582:	e029      	b.n	80045d8 <HAL_RCC_OscConfig+0x52c>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	2b05      	cmp	r3, #5
 800458a:	d115      	bne.n	80045b8 <HAL_RCC_OscConfig+0x50c>
 800458c:	4b08      	ldr	r3, [pc, #32]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800458e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004592:	4a07      	ldr	r2, [pc, #28]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 8004594:	f043 0304 	orr.w	r3, r3, #4
 8004598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800459c:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 800459e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a2:	4a03      	ldr	r2, [pc, #12]	; (80045b0 <HAL_RCC_OscConfig+0x504>)
 80045a4:	f043 0301 	orr.w	r3, r3, #1
 80045a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045ac:	e014      	b.n	80045d8 <HAL_RCC_OscConfig+0x52c>
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000
 80045b4:	40007000 	.word	0x40007000
 80045b8:	4b9d      	ldr	r3, [pc, #628]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	4a9c      	ldr	r2, [pc, #624]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 80045c0:	f023 0301 	bic.w	r3, r3, #1
 80045c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045c8:	4b99      	ldr	r3, [pc, #612]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 80045ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ce:	4a98      	ldr	r2, [pc, #608]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 80045d0:	f023 0304 	bic.w	r3, r3, #4
 80045d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d016      	beq.n	800460e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e0:	f7fb fff6 	bl	80005d0 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045e6:	e00a      	b.n	80045fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045e8:	f7fb fff2 	bl	80005d0 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d901      	bls.n	80045fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e168      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045fe:	4b8c      	ldr	r3, [pc, #560]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 8004600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004604:	f003 0302 	and.w	r3, r3, #2
 8004608:	2b00      	cmp	r3, #0
 800460a:	d0ed      	beq.n	80045e8 <HAL_RCC_OscConfig+0x53c>
 800460c:	e015      	b.n	800463a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800460e:	f7fb ffdf 	bl	80005d0 <HAL_GetTick>
 8004612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004614:	e00a      	b.n	800462c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004616:	f7fb ffdb 	bl	80005d0 <HAL_GetTick>
 800461a:	4602      	mov	r2, r0
 800461c:	693b      	ldr	r3, [r7, #16]
 800461e:	1ad3      	subs	r3, r2, r3
 8004620:	f241 3288 	movw	r2, #5000	; 0x1388
 8004624:	4293      	cmp	r3, r2
 8004626:	d901      	bls.n	800462c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e151      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800462c:	4b80      	ldr	r3, [pc, #512]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 800462e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004632:	f003 0302 	and.w	r3, r3, #2
 8004636:	2b00      	cmp	r3, #0
 8004638:	d1ed      	bne.n	8004616 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463a:	7ffb      	ldrb	r3, [r7, #31]
 800463c:	2b01      	cmp	r3, #1
 800463e:	d105      	bne.n	800464c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004640:	4b7b      	ldr	r3, [pc, #492]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 8004642:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004644:	4a7a      	ldr	r2, [pc, #488]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 8004646:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0320 	and.w	r3, r3, #32
 8004654:	2b00      	cmp	r3, #0
 8004656:	d03c      	beq.n	80046d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d01c      	beq.n	800469a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004660:	4b73      	ldr	r3, [pc, #460]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 8004662:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004666:	4a72      	ldr	r2, [pc, #456]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 8004668:	f043 0301 	orr.w	r3, r3, #1
 800466c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004670:	f7fb ffae 	bl	80005d0 <HAL_GetTick>
 8004674:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004676:	e008      	b.n	800468a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004678:	f7fb ffaa 	bl	80005d0 <HAL_GetTick>
 800467c:	4602      	mov	r2, r0
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	1ad3      	subs	r3, r2, r3
 8004682:	2b02      	cmp	r3, #2
 8004684:	d901      	bls.n	800468a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8004686:	2303      	movs	r3, #3
 8004688:	e122      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800468a:	4b69      	ldr	r3, [pc, #420]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 800468c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004690:	f003 0302 	and.w	r3, r3, #2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d0ef      	beq.n	8004678 <HAL_RCC_OscConfig+0x5cc>
 8004698:	e01b      	b.n	80046d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800469a:	4b65      	ldr	r3, [pc, #404]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 800469c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046a0:	4a63      	ldr	r2, [pc, #396]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 80046a2:	f023 0301 	bic.w	r3, r3, #1
 80046a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046aa:	f7fb ff91 	bl	80005d0 <HAL_GetTick>
 80046ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046b2:	f7fb ff8d 	bl	80005d0 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e105      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046c4:	4b5a      	ldr	r3, [pc, #360]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 80046c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d1ef      	bne.n	80046b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	f000 80f9 	beq.w	80048ce <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e0:	2b02      	cmp	r3, #2
 80046e2:	f040 80cf 	bne.w	8004884 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046e6:	4b52      	ldr	r3, [pc, #328]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f003 0203 	and.w	r2, r3, #3
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d12c      	bne.n	8004754 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004704:	3b01      	subs	r3, #1
 8004706:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004708:	429a      	cmp	r2, r3
 800470a:	d123      	bne.n	8004754 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004716:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004718:	429a      	cmp	r2, r3
 800471a:	d11b      	bne.n	8004754 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004726:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004728:	429a      	cmp	r2, r3
 800472a:	d113      	bne.n	8004754 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004736:	085b      	lsrs	r3, r3, #1
 8004738:	3b01      	subs	r3, #1
 800473a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800473c:	429a      	cmp	r2, r3
 800473e:	d109      	bne.n	8004754 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474a:	085b      	lsrs	r3, r3, #1
 800474c:	3b01      	subs	r3, #1
 800474e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004750:	429a      	cmp	r2, r3
 8004752:	d071      	beq.n	8004838 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	2b0c      	cmp	r3, #12
 8004758:	d068      	beq.n	800482c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800475a:	4b35      	ldr	r3, [pc, #212]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d105      	bne.n	8004772 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004766:	4b32      	ldr	r3, [pc, #200]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e0ac      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004776:	4b2e      	ldr	r3, [pc, #184]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2d      	ldr	r2, [pc, #180]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 800477c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004780:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004782:	f7fb ff25 	bl	80005d0 <HAL_GetTick>
 8004786:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004788:	e008      	b.n	800479c <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478a:	f7fb ff21 	bl	80005d0 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	2b02      	cmp	r3, #2
 8004796:	d901      	bls.n	800479c <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e099      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800479c:	4b24      	ldr	r3, [pc, #144]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d1f0      	bne.n	800478a <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047a8:	4b21      	ldr	r3, [pc, #132]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 80047aa:	68da      	ldr	r2, [r3, #12]
 80047ac:	4b21      	ldr	r3, [pc, #132]	; (8004834 <HAL_RCC_OscConfig+0x788>)
 80047ae:	4013      	ands	r3, r2
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047b8:	3a01      	subs	r2, #1
 80047ba:	0112      	lsls	r2, r2, #4
 80047bc:	4311      	orrs	r1, r2
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047c2:	0212      	lsls	r2, r2, #8
 80047c4:	4311      	orrs	r1, r2
 80047c6:	687a      	ldr	r2, [r7, #4]
 80047c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047ca:	0852      	lsrs	r2, r2, #1
 80047cc:	3a01      	subs	r2, #1
 80047ce:	0552      	lsls	r2, r2, #21
 80047d0:	4311      	orrs	r1, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047d6:	0852      	lsrs	r2, r2, #1
 80047d8:	3a01      	subs	r2, #1
 80047da:	0652      	lsls	r2, r2, #25
 80047dc:	4311      	orrs	r1, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047e2:	06d2      	lsls	r2, r2, #27
 80047e4:	430a      	orrs	r2, r1
 80047e6:	4912      	ldr	r1, [pc, #72]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 80047e8:	4313      	orrs	r3, r2
 80047ea:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047ec:	4b10      	ldr	r3, [pc, #64]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a0f      	ldr	r2, [pc, #60]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 80047f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047f6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047f8:	4b0d      	ldr	r3, [pc, #52]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 80047fa:	68db      	ldr	r3, [r3, #12]
 80047fc:	4a0c      	ldr	r2, [pc, #48]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 80047fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004802:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004804:	f7fb fee4 	bl	80005d0 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800480c:	f7fb fee0 	bl	80005d0 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e058      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800481e:	4b04      	ldr	r3, [pc, #16]	; (8004830 <HAL_RCC_OscConfig+0x784>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d0f0      	beq.n	800480c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800482a:	e050      	b.n	80048ce <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800482c:	2301      	movs	r3, #1
 800482e:	e04f      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
 8004830:	40021000 	.word	0x40021000
 8004834:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004838:	4b27      	ldr	r3, [pc, #156]	; (80048d8 <HAL_RCC_OscConfig+0x82c>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d144      	bne.n	80048ce <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004844:	4b24      	ldr	r3, [pc, #144]	; (80048d8 <HAL_RCC_OscConfig+0x82c>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a23      	ldr	r2, [pc, #140]	; (80048d8 <HAL_RCC_OscConfig+0x82c>)
 800484a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800484e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004850:	4b21      	ldr	r3, [pc, #132]	; (80048d8 <HAL_RCC_OscConfig+0x82c>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a20      	ldr	r2, [pc, #128]	; (80048d8 <HAL_RCC_OscConfig+0x82c>)
 8004856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800485a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800485c:	f7fb feb8 	bl	80005d0 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004864:	f7fb feb4 	bl	80005d0 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e02c      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004876:	4b18      	ldr	r3, [pc, #96]	; (80048d8 <HAL_RCC_OscConfig+0x82c>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487e:	2b00      	cmp	r3, #0
 8004880:	d0f0      	beq.n	8004864 <HAL_RCC_OscConfig+0x7b8>
 8004882:	e024      	b.n	80048ce <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004884:	69bb      	ldr	r3, [r7, #24]
 8004886:	2b0c      	cmp	r3, #12
 8004888:	d01f      	beq.n	80048ca <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488a:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <HAL_RCC_OscConfig+0x82c>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a12      	ldr	r2, [pc, #72]	; (80048d8 <HAL_RCC_OscConfig+0x82c>)
 8004890:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004894:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004896:	f7fb fe9b 	bl	80005d0 <HAL_GetTick>
 800489a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800489c:	e008      	b.n	80048b0 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800489e:	f7fb fe97 	bl	80005d0 <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d901      	bls.n	80048b0 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	e00f      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <HAL_RCC_OscConfig+0x82c>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d1f0      	bne.n	800489e <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048bc:	4b06      	ldr	r3, [pc, #24]	; (80048d8 <HAL_RCC_OscConfig+0x82c>)
 80048be:	68da      	ldr	r2, [r3, #12]
 80048c0:	4905      	ldr	r1, [pc, #20]	; (80048d8 <HAL_RCC_OscConfig+0x82c>)
 80048c2:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCC_OscConfig+0x830>)
 80048c4:	4013      	ands	r3, r2
 80048c6:	60cb      	str	r3, [r1, #12]
 80048c8:	e001      	b.n	80048ce <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e000      	b.n	80048d0 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80048ce:	2300      	movs	r3, #0
}
 80048d0:	4618      	mov	r0, r3
 80048d2:	3720      	adds	r7, #32
 80048d4:	46bd      	mov	sp, r7
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40021000 	.word	0x40021000
 80048dc:	feeefffc 	.word	0xfeeefffc

080048e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b086      	sub	sp, #24
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048ea:	2300      	movs	r3, #0
 80048ec:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d101      	bne.n	80048f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048f4:	2301      	movs	r3, #1
 80048f6:	e11d      	b.n	8004b34 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048f8:	4b90      	ldr	r3, [pc, #576]	; (8004b3c <HAL_RCC_ClockConfig+0x25c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 030f 	and.w	r3, r3, #15
 8004900:	683a      	ldr	r2, [r7, #0]
 8004902:	429a      	cmp	r2, r3
 8004904:	d910      	bls.n	8004928 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004906:	4b8d      	ldr	r3, [pc, #564]	; (8004b3c <HAL_RCC_ClockConfig+0x25c>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f023 020f 	bic.w	r2, r3, #15
 800490e:	498b      	ldr	r1, [pc, #556]	; (8004b3c <HAL_RCC_ClockConfig+0x25c>)
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	4313      	orrs	r3, r2
 8004914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004916:	4b89      	ldr	r3, [pc, #548]	; (8004b3c <HAL_RCC_ClockConfig+0x25c>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 030f 	and.w	r3, r3, #15
 800491e:	683a      	ldr	r2, [r7, #0]
 8004920:	429a      	cmp	r2, r3
 8004922:	d001      	beq.n	8004928 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004924:	2301      	movs	r3, #1
 8004926:	e105      	b.n	8004b34 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 0302 	and.w	r3, r3, #2
 8004930:	2b00      	cmp	r3, #0
 8004932:	d010      	beq.n	8004956 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	4b81      	ldr	r3, [pc, #516]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 800493a:	689b      	ldr	r3, [r3, #8]
 800493c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004940:	429a      	cmp	r2, r3
 8004942:	d908      	bls.n	8004956 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004944:	4b7e      	ldr	r3, [pc, #504]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	497b      	ldr	r1, [pc, #492]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004952:	4313      	orrs	r3, r2
 8004954:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f003 0301 	and.w	r3, r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	d079      	beq.n	8004a56 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b03      	cmp	r3, #3
 8004968:	d11e      	bne.n	80049a8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800496a:	4b75      	ldr	r3, [pc, #468]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d101      	bne.n	800497a <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	e0dc      	b.n	8004b34 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800497a:	f000 fa09 	bl	8004d90 <RCC_GetSysClockFreqFromPLLSource>
 800497e:	4603      	mov	r3, r0
 8004980:	4a70      	ldr	r2, [pc, #448]	; (8004b44 <HAL_RCC_ClockConfig+0x264>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d946      	bls.n	8004a14 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004986:	4b6e      	ldr	r3, [pc, #440]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800498e:	2b00      	cmp	r3, #0
 8004990:	d140      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004992:	4b6b      	ldr	r3, [pc, #428]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800499a:	4a69      	ldr	r2, [pc, #420]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 800499c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049a2:	2380      	movs	r3, #128	; 0x80
 80049a4:	617b      	str	r3, [r7, #20]
 80049a6:	e035      	b.n	8004a14 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	d107      	bne.n	80049c0 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049b0:	4b63      	ldr	r3, [pc, #396]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d115      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e0b9      	b.n	8004b34 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d107      	bne.n	80049d8 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049c8:	4b5d      	ldr	r3, [pc, #372]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0302 	and.w	r3, r3, #2
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d109      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e0ad      	b.n	8004b34 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049d8:	4b59      	ldr	r3, [pc, #356]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	e0a5      	b.n	8004b34 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80049e8:	f000 f8b4 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 80049ec:	4603      	mov	r3, r0
 80049ee:	4a55      	ldr	r2, [pc, #340]	; (8004b44 <HAL_RCC_ClockConfig+0x264>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d90f      	bls.n	8004a14 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80049f4:	4b52      	ldr	r3, [pc, #328]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d109      	bne.n	8004a14 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a00:	4b4f      	ldr	r3, [pc, #316]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a08:	4a4d      	ldr	r2, [pc, #308]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004a0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a0e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a10:	2380      	movs	r3, #128	; 0x80
 8004a12:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a14:	4b4a      	ldr	r3, [pc, #296]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004a16:	689b      	ldr	r3, [r3, #8]
 8004a18:	f023 0203 	bic.w	r2, r3, #3
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	4947      	ldr	r1, [pc, #284]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a26:	f7fb fdd3 	bl	80005d0 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a2c:	e00a      	b.n	8004a44 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a2e:	f7fb fdcf 	bl	80005d0 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a3c:	4293      	cmp	r3, r2
 8004a3e:	d901      	bls.n	8004a44 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004a40:	2303      	movs	r3, #3
 8004a42:	e077      	b.n	8004b34 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a44:	4b3e      	ldr	r3, [pc, #248]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004a46:	689b      	ldr	r3, [r3, #8]
 8004a48:	f003 020c 	and.w	r2, r3, #12
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	685b      	ldr	r3, [r3, #4]
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d1eb      	bne.n	8004a2e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b80      	cmp	r3, #128	; 0x80
 8004a5a:	d105      	bne.n	8004a68 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a5c:	4b38      	ldr	r3, [pc, #224]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	4a37      	ldr	r2, [pc, #220]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004a62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a66:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0302 	and.w	r3, r3, #2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d010      	beq.n	8004a96 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689a      	ldr	r2, [r3, #8]
 8004a78:	4b31      	ldr	r3, [pc, #196]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004a7a:	689b      	ldr	r3, [r3, #8]
 8004a7c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a80:	429a      	cmp	r2, r3
 8004a82:	d208      	bcs.n	8004a96 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a84:	4b2e      	ldr	r3, [pc, #184]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	689b      	ldr	r3, [r3, #8]
 8004a90:	492b      	ldr	r1, [pc, #172]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004a92:	4313      	orrs	r3, r2
 8004a94:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a96:	4b29      	ldr	r3, [pc, #164]	; (8004b3c <HAL_RCC_ClockConfig+0x25c>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	683a      	ldr	r2, [r7, #0]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d210      	bcs.n	8004ac6 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa4:	4b25      	ldr	r3, [pc, #148]	; (8004b3c <HAL_RCC_ClockConfig+0x25c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f023 020f 	bic.w	r2, r3, #15
 8004aac:	4923      	ldr	r1, [pc, #140]	; (8004b3c <HAL_RCC_ClockConfig+0x25c>)
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab4:	4b21      	ldr	r3, [pc, #132]	; (8004b3c <HAL_RCC_ClockConfig+0x25c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f003 030f 	and.w	r3, r3, #15
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d001      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e036      	b.n	8004b34 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0304 	and.w	r3, r3, #4
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d008      	beq.n	8004ae4 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad2:	4b1b      	ldr	r3, [pc, #108]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004ad4:	689b      	ldr	r3, [r3, #8]
 8004ad6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68db      	ldr	r3, [r3, #12]
 8004ade:	4918      	ldr	r1, [pc, #96]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f003 0308 	and.w	r3, r3, #8
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d009      	beq.n	8004b04 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004af0:	4b13      	ldr	r3, [pc, #76]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691b      	ldr	r3, [r3, #16]
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	4910      	ldr	r1, [pc, #64]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004b00:	4313      	orrs	r3, r2
 8004b02:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b04:	f000 f826 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8004b08:	4602      	mov	r2, r0
 8004b0a:	4b0d      	ldr	r3, [pc, #52]	; (8004b40 <HAL_RCC_ClockConfig+0x260>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	091b      	lsrs	r3, r3, #4
 8004b10:	f003 030f 	and.w	r3, r3, #15
 8004b14:	490c      	ldr	r1, [pc, #48]	; (8004b48 <HAL_RCC_ClockConfig+0x268>)
 8004b16:	5ccb      	ldrb	r3, [r1, r3]
 8004b18:	f003 031f 	and.w	r3, r3, #31
 8004b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8004b20:	4a0a      	ldr	r2, [pc, #40]	; (8004b4c <HAL_RCC_ClockConfig+0x26c>)
 8004b22:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b24:	4b0a      	ldr	r3, [pc, #40]	; (8004b50 <HAL_RCC_ClockConfig+0x270>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4618      	mov	r0, r3
 8004b2a:	f7fb fd01 	bl	8000530 <HAL_InitTick>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	73fb      	strb	r3, [r7, #15]

  return status;
 8004b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3718      	adds	r7, #24
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}
 8004b3c:	40022000 	.word	0x40022000
 8004b40:	40021000 	.word	0x40021000
 8004b44:	04c4b400 	.word	0x04c4b400
 8004b48:	080096e4 	.word	0x080096e4
 8004b4c:	20000070 	.word	0x20000070
 8004b50:	20000000 	.word	0x20000000

08004b54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b089      	sub	sp, #36	; 0x24
 8004b58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	61fb      	str	r3, [r7, #28]
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b62:	4b3e      	ldr	r3, [pc, #248]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b64:	689b      	ldr	r3, [r3, #8]
 8004b66:	f003 030c 	and.w	r3, r3, #12
 8004b6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b6c:	4b3b      	ldr	r3, [pc, #236]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	f003 0303 	and.w	r3, r3, #3
 8004b74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_RCC_GetSysClockFreq+0x34>
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	2b0c      	cmp	r3, #12
 8004b80:	d121      	bne.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d11e      	bne.n	8004bc6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b88:	4b34      	ldr	r3, [pc, #208]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0308 	and.w	r3, r3, #8
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d107      	bne.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b94:	4b31      	ldr	r3, [pc, #196]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004b96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b9a:	0a1b      	lsrs	r3, r3, #8
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	61fb      	str	r3, [r7, #28]
 8004ba2:	e005      	b.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ba4:	4b2d      	ldr	r3, [pc, #180]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004bb0:	4a2b      	ldr	r2, [pc, #172]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10d      	bne.n	8004bdc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004bc0:	69fb      	ldr	r3, [r7, #28]
 8004bc2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bc4:	e00a      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	2b04      	cmp	r3, #4
 8004bca:	d102      	bne.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bcc:	4b25      	ldr	r3, [pc, #148]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	e004      	b.n	8004bdc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	2b08      	cmp	r3, #8
 8004bd6:	d101      	bne.n	8004bdc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bd8:	4b23      	ldr	r3, [pc, #140]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004bda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	2b0c      	cmp	r3, #12
 8004be0:	d134      	bne.n	8004c4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004be2:	4b1e      	ldr	r3, [pc, #120]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004be4:	68db      	ldr	r3, [r3, #12]
 8004be6:	f003 0303 	and.w	r3, r3, #3
 8004bea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d003      	beq.n	8004bfa <HAL_RCC_GetSysClockFreq+0xa6>
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	2b03      	cmp	r3, #3
 8004bf6:	d003      	beq.n	8004c00 <HAL_RCC_GetSysClockFreq+0xac>
 8004bf8:	e005      	b.n	8004c06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bfa:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bfc:	617b      	str	r3, [r7, #20]
      break;
 8004bfe:	e005      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c00:	4b19      	ldr	r3, [pc, #100]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c02:	617b      	str	r3, [r7, #20]
      break;
 8004c04:	e002      	b.n	8004c0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c06:	69fb      	ldr	r3, [r7, #28]
 8004c08:	617b      	str	r3, [r7, #20]
      break;
 8004c0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c0c:	4b13      	ldr	r3, [pc, #76]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	091b      	lsrs	r3, r3, #4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	3301      	adds	r3, #1
 8004c18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c1a:	4b10      	ldr	r3, [pc, #64]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	0a1b      	lsrs	r3, r3, #8
 8004c20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c24:	697a      	ldr	r2, [r7, #20]
 8004c26:	fb03 f202 	mul.w	r2, r3, r2
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c32:	4b0a      	ldr	r3, [pc, #40]	; (8004c5c <HAL_RCC_GetSysClockFreq+0x108>)
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	0e5b      	lsrs	r3, r3, #25
 8004c38:	f003 0303 	and.w	r3, r3, #3
 8004c3c:	3301      	adds	r3, #1
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c4c:	69bb      	ldr	r3, [r7, #24]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3724      	adds	r7, #36	; 0x24
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	40021000 	.word	0x40021000
 8004c60:	080096fc 	.word	0x080096fc
 8004c64:	00f42400 	.word	0x00f42400
 8004c68:	007a1200 	.word	0x007a1200

08004c6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c70:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c72:	681b      	ldr	r3, [r3, #0]
}
 8004c74:	4618      	mov	r0, r3
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	20000070 	.word	0x20000070

08004c84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c88:	f7ff fff0 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	4b06      	ldr	r3, [pc, #24]	; (8004ca8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	0a1b      	lsrs	r3, r3, #8
 8004c94:	f003 0307 	and.w	r3, r3, #7
 8004c98:	4904      	ldr	r1, [pc, #16]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c9a:	5ccb      	ldrb	r3, [r1, r3]
 8004c9c:	f003 031f 	and.w	r3, r3, #31
 8004ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	40021000 	.word	0x40021000
 8004cac:	080096f4 	.word	0x080096f4

08004cb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cb4:	f7ff ffda 	bl	8004c6c <HAL_RCC_GetHCLKFreq>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	4b06      	ldr	r3, [pc, #24]	; (8004cd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	0adb      	lsrs	r3, r3, #11
 8004cc0:	f003 0307 	and.w	r3, r3, #7
 8004cc4:	4904      	ldr	r1, [pc, #16]	; (8004cd8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cc6:	5ccb      	ldrb	r3, [r1, r3]
 8004cc8:	f003 031f 	and.w	r3, r3, #31
 8004ccc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40021000 	.word	0x40021000
 8004cd8:	080096f4 	.word	0x080096f4

08004cdc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b086      	sub	sp, #24
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004ce8:	4b27      	ldr	r3, [pc, #156]	; (8004d88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d003      	beq.n	8004cfc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cf4:	f7ff f916 	bl	8003f24 <HAL_PWREx_GetVoltageRange>
 8004cf8:	6178      	str	r0, [r7, #20]
 8004cfa:	e014      	b.n	8004d26 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004cfc:	4b22      	ldr	r3, [pc, #136]	; (8004d88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cfe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d00:	4a21      	ldr	r2, [pc, #132]	; (8004d88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d06:	6593      	str	r3, [r2, #88]	; 0x58
 8004d08:	4b1f      	ldr	r3, [pc, #124]	; (8004d88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d10:	60fb      	str	r3, [r7, #12]
 8004d12:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d14:	f7ff f906 	bl	8003f24 <HAL_PWREx_GetVoltageRange>
 8004d18:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d1a:	4b1b      	ldr	r3, [pc, #108]	; (8004d88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d1e:	4a1a      	ldr	r2, [pc, #104]	; (8004d88 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d24:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d2c:	d10b      	bne.n	8004d46 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2b80      	cmp	r3, #128	; 0x80
 8004d32:	d913      	bls.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2ba0      	cmp	r3, #160	; 0xa0
 8004d38:	d902      	bls.n	8004d40 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	613b      	str	r3, [r7, #16]
 8004d3e:	e00d      	b.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d40:	2301      	movs	r3, #1
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	e00a      	b.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2b7f      	cmp	r3, #127	; 0x7f
 8004d4a:	d902      	bls.n	8004d52 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	613b      	str	r3, [r7, #16]
 8004d50:	e004      	b.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b70      	cmp	r3, #112	; 0x70
 8004d56:	d101      	bne.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d58:	2301      	movs	r3, #1
 8004d5a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d5c:	4b0b      	ldr	r3, [pc, #44]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f023 020f 	bic.w	r2, r3, #15
 8004d64:	4909      	ldr	r1, [pc, #36]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d6c:	4b07      	ldr	r3, [pc, #28]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f003 030f 	and.w	r3, r3, #15
 8004d74:	693a      	ldr	r2, [r7, #16]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d001      	beq.n	8004d7e <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004d7a:	2301      	movs	r3, #1
 8004d7c:	e000      	b.n	8004d80 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004d7e:	2300      	movs	r3, #0
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	3718      	adds	r7, #24
 8004d84:	46bd      	mov	sp, r7
 8004d86:	bd80      	pop	{r7, pc}
 8004d88:	40021000 	.word	0x40021000
 8004d8c:	40022000 	.word	0x40022000

08004d90 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d96:	4b2d      	ldr	r3, [pc, #180]	; (8004e4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f003 0303 	and.w	r3, r3, #3
 8004d9e:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d00b      	beq.n	8004dbe <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	2b03      	cmp	r3, #3
 8004daa:	d825      	bhi.n	8004df8 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d008      	beq.n	8004dc4 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d11f      	bne.n	8004df8 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004db8:	4b25      	ldr	r3, [pc, #148]	; (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004dba:	613b      	str	r3, [r7, #16]
    break;
 8004dbc:	e01f      	b.n	8004dfe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004dbe:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004dc0:	613b      	str	r3, [r7, #16]
    break;
 8004dc2:	e01c      	b.n	8004dfe <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dc4:	4b21      	ldr	r3, [pc, #132]	; (8004e4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0308 	and.w	r3, r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d107      	bne.n	8004de0 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dd0:	4b1e      	ldr	r3, [pc, #120]	; (8004e4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dd6:	0a1b      	lsrs	r3, r3, #8
 8004dd8:	f003 030f 	and.w	r3, r3, #15
 8004ddc:	617b      	str	r3, [r7, #20]
 8004dde:	e005      	b.n	8004dec <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004de0:	4b1a      	ldr	r3, [pc, #104]	; (8004e4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004dec:	4a1a      	ldr	r2, [pc, #104]	; (8004e58 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df4:	613b      	str	r3, [r7, #16]
    break;
 8004df6:	e002      	b.n	8004dfe <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004df8:	2300      	movs	r3, #0
 8004dfa:	613b      	str	r3, [r7, #16]
    break;
 8004dfc:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004dfe:	4b13      	ldr	r3, [pc, #76]	; (8004e4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e00:	68db      	ldr	r3, [r3, #12]
 8004e02:	091b      	lsrs	r3, r3, #4
 8004e04:	f003 030f 	and.w	r3, r3, #15
 8004e08:	3301      	adds	r3, #1
 8004e0a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e0c:	4b0f      	ldr	r3, [pc, #60]	; (8004e4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e0e:	68db      	ldr	r3, [r3, #12]
 8004e10:	0a1b      	lsrs	r3, r3, #8
 8004e12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	fb03 f202 	mul.w	r2, r3, r2
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e22:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e24:	4b09      	ldr	r3, [pc, #36]	; (8004e4c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	0e5b      	lsrs	r3, r3, #25
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	3301      	adds	r3, #1
 8004e30:	005b      	lsls	r3, r3, #1
 8004e32:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e3c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004e3e:	683b      	ldr	r3, [r7, #0]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	371c      	adds	r7, #28
 8004e44:	46bd      	mov	sp, r7
 8004e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4a:	4770      	bx	lr
 8004e4c:	40021000 	.word	0x40021000
 8004e50:	00f42400 	.word	0x00f42400
 8004e54:	007a1200 	.word	0x007a1200
 8004e58:	080096fc 	.word	0x080096fc

08004e5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	b086      	sub	sp, #24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e64:	2300      	movs	r3, #0
 8004e66:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e68:	2300      	movs	r3, #0
 8004e6a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d040      	beq.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e7c:	2b80      	cmp	r3, #128	; 0x80
 8004e7e:	d02a      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e80:	2b80      	cmp	r3, #128	; 0x80
 8004e82:	d825      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e84:	2b60      	cmp	r3, #96	; 0x60
 8004e86:	d026      	beq.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e88:	2b60      	cmp	r3, #96	; 0x60
 8004e8a:	d821      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e8c:	2b40      	cmp	r3, #64	; 0x40
 8004e8e:	d006      	beq.n	8004e9e <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d81d      	bhi.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d009      	beq.n	8004eac <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004e98:	2b20      	cmp	r3, #32
 8004e9a:	d010      	beq.n	8004ebe <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004e9c:	e018      	b.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e9e:	4b89      	ldr	r3, [pc, #548]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ea0:	68db      	ldr	r3, [r3, #12]
 8004ea2:	4a88      	ldr	r2, [pc, #544]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ea4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ea8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eaa:	e015      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	2100      	movs	r1, #0
 8004eb2:	4618      	mov	r0, r3
 8004eb4:	f000 fb02 	bl	80054bc <RCCEx_PLLSAI1_Config>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ebc:	e00c      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3320      	adds	r3, #32
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f000 fbed 	bl	80056a4 <RCCEx_PLLSAI2_Config>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ece:	e003      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	74fb      	strb	r3, [r7, #19]
      break;
 8004ed4:	e000      	b.n	8004ed8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004ed8:	7cfb      	ldrb	r3, [r7, #19]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10b      	bne.n	8004ef6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ede:	4b79      	ldr	r3, [pc, #484]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ee0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ee4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004eec:	4975      	ldr	r1, [pc, #468]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ef4:	e001      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004ef6:	7cfb      	ldrb	r3, [r7, #19]
 8004ef8:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d047      	beq.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f0e:	d030      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f14:	d82a      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f1a:	d02a      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f20:	d824      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f26:	d008      	beq.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004f28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f2c:	d81e      	bhi.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00a      	beq.n	8004f48 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f36:	d010      	beq.n	8004f5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004f38:	e018      	b.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f3a:	4b62      	ldr	r3, [pc, #392]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f3c:	68db      	ldr	r3, [r3, #12]
 8004f3e:	4a61      	ldr	r2, [pc, #388]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f44:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f46:	e015      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	2100      	movs	r1, #0
 8004f4e:	4618      	mov	r0, r3
 8004f50:	f000 fab4 	bl	80054bc <RCCEx_PLLSAI1_Config>
 8004f54:	4603      	mov	r3, r0
 8004f56:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f58:	e00c      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	3320      	adds	r3, #32
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fb9f 	bl	80056a4 <RCCEx_PLLSAI2_Config>
 8004f66:	4603      	mov	r3, r0
 8004f68:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f6a:	e003      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	74fb      	strb	r3, [r7, #19]
      break;
 8004f70:	e000      	b.n	8004f74 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004f72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f74:	7cfb      	ldrb	r3, [r7, #19]
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10b      	bne.n	8004f92 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f7a:	4b52      	ldr	r3, [pc, #328]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f88:	494e      	ldr	r1, [pc, #312]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f90:	e001      	b.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f92:	7cfb      	ldrb	r3, [r7, #19]
 8004f94:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	f000 809f 	beq.w	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fa8:	4b46      	ldr	r3, [pc, #280]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004faa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d101      	bne.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	e000      	b.n	8004fba <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d00d      	beq.n	8004fda <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fbe:	4b41      	ldr	r3, [pc, #260]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc2:	4a40      	ldr	r2, [pc, #256]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fc8:	6593      	str	r3, [r2, #88]	; 0x58
 8004fca:	4b3e      	ldr	r3, [pc, #248]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd2:	60bb      	str	r3, [r7, #8]
 8004fd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fda:	4b3b      	ldr	r3, [pc, #236]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a3a      	ldr	r2, [pc, #232]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fe6:	f7fb faf3 	bl	80005d0 <HAL_GetTick>
 8004fea:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004fec:	e009      	b.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fee:	f7fb faef 	bl	80005d0 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d902      	bls.n	8005002 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	74fb      	strb	r3, [r7, #19]
        break;
 8005000:	e005      	b.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005002:	4b31      	ldr	r3, [pc, #196]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500a:	2b00      	cmp	r3, #0
 800500c:	d0ef      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800500e:	7cfb      	ldrb	r3, [r7, #19]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d15b      	bne.n	80050cc <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005014:	4b2b      	ldr	r3, [pc, #172]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800501e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d01f      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	429a      	cmp	r2, r3
 8005030:	d019      	beq.n	8005066 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005032:	4b24      	ldr	r3, [pc, #144]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005034:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005038:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800503c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800503e:	4b21      	ldr	r3, [pc, #132]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005044:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005046:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800504e:	4b1d      	ldr	r3, [pc, #116]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005054:	4a1b      	ldr	r2, [pc, #108]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800505e:	4a19      	ldr	r2, [pc, #100]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	f003 0301 	and.w	r3, r3, #1
 800506c:	2b00      	cmp	r3, #0
 800506e:	d016      	beq.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005070:	f7fb faae 	bl	80005d0 <HAL_GetTick>
 8005074:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005076:	e00b      	b.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005078:	f7fb faaa 	bl	80005d0 <HAL_GetTick>
 800507c:	4602      	mov	r2, r0
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	1ad3      	subs	r3, r2, r3
 8005082:	f241 3288 	movw	r2, #5000	; 0x1388
 8005086:	4293      	cmp	r3, r2
 8005088:	d902      	bls.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	74fb      	strb	r3, [r7, #19]
            break;
 800508e:	e006      	b.n	800509e <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005090:	4b0c      	ldr	r3, [pc, #48]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005096:	f003 0302 	and.w	r3, r3, #2
 800509a:	2b00      	cmp	r3, #0
 800509c:	d0ec      	beq.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800509e:	7cfb      	ldrb	r3, [r7, #19]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10c      	bne.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a4:	4b07      	ldr	r3, [pc, #28]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b4:	4903      	ldr	r1, [pc, #12]	; (80050c4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050bc:	e008      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050be:	7cfb      	ldrb	r3, [r7, #19]
 80050c0:	74bb      	strb	r3, [r7, #18]
 80050c2:	e005      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80050c4:	40021000 	.word	0x40021000
 80050c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050cc:	7cfb      	ldrb	r3, [r7, #19]
 80050ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050d0:	7c7b      	ldrb	r3, [r7, #17]
 80050d2:	2b01      	cmp	r3, #1
 80050d4:	d105      	bne.n	80050e2 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050d6:	4ba0      	ldr	r3, [pc, #640]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050da:	4a9f      	ldr	r2, [pc, #636]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0301 	and.w	r3, r3, #1
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d00a      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050ee:	4b9a      	ldr	r3, [pc, #616]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f4:	f023 0203 	bic.w	r2, r3, #3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050fc:	4996      	ldr	r1, [pc, #600]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005110:	4b91      	ldr	r3, [pc, #580]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005116:	f023 020c 	bic.w	r2, r3, #12
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800511e:	498e      	ldr	r1, [pc, #568]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005120:	4313      	orrs	r3, r2
 8005122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f003 0304 	and.w	r3, r3, #4
 800512e:	2b00      	cmp	r3, #0
 8005130:	d00a      	beq.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005132:	4b89      	ldr	r3, [pc, #548]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005134:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005138:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005140:	4985      	ldr	r1, [pc, #532]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005142:	4313      	orrs	r3, r2
 8005144:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f003 0308 	and.w	r3, r3, #8
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00a      	beq.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005154:	4b80      	ldr	r3, [pc, #512]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005162:	497d      	ldr	r1, [pc, #500]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005164:	4313      	orrs	r3, r2
 8005166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 0310 	and.w	r3, r3, #16
 8005172:	2b00      	cmp	r3, #0
 8005174:	d00a      	beq.n	800518c <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005176:	4b78      	ldr	r3, [pc, #480]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005178:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005184:	4974      	ldr	r1, [pc, #464]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005186:	4313      	orrs	r3, r2
 8005188:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0320 	and.w	r3, r3, #32
 8005194:	2b00      	cmp	r3, #0
 8005196:	d00a      	beq.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005198:	4b6f      	ldr	r3, [pc, #444]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a6:	496c      	ldr	r1, [pc, #432]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00a      	beq.n	80051d0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051ba:	4b67      	ldr	r3, [pc, #412]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051c8:	4963      	ldr	r1, [pc, #396]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ca:	4313      	orrs	r3, r2
 80051cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d00a      	beq.n	80051f2 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051dc:	4b5e      	ldr	r3, [pc, #376]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ea:	495b      	ldr	r1, [pc, #364]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ec:	4313      	orrs	r3, r2
 80051ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00a      	beq.n	8005214 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051fe:	4b56      	ldr	r3, [pc, #344]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005200:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005204:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800520c:	4952      	ldr	r1, [pc, #328]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800520e:	4313      	orrs	r3, r2
 8005210:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521c:	2b00      	cmp	r3, #0
 800521e:	d00a      	beq.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005220:	4b4d      	ldr	r3, [pc, #308]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005226:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800522e:	494a      	ldr	r1, [pc, #296]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005230:	4313      	orrs	r3, r2
 8005232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00a      	beq.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005242:	4b45      	ldr	r3, [pc, #276]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005248:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005250:	4941      	ldr	r1, [pc, #260]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005252:	4313      	orrs	r3, r2
 8005254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d00a      	beq.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005264:	4b3c      	ldr	r3, [pc, #240]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005266:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800526a:	f023 0203 	bic.w	r2, r3, #3
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005272:	4939      	ldr	r1, [pc, #228]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005274:	4313      	orrs	r3, r2
 8005276:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d028      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005286:	4b34      	ldr	r3, [pc, #208]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005288:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800528c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005294:	4930      	ldr	r1, [pc, #192]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005296:	4313      	orrs	r3, r2
 8005298:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052a4:	d106      	bne.n	80052b4 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052a6:	4b2c      	ldr	r3, [pc, #176]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	4a2b      	ldr	r2, [pc, #172]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052b0:	60d3      	str	r3, [r2, #12]
 80052b2:	e011      	b.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052bc:	d10c      	bne.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	3304      	adds	r3, #4
 80052c2:	2101      	movs	r1, #1
 80052c4:	4618      	mov	r0, r3
 80052c6:	f000 f8f9 	bl	80054bc <RCCEx_PLLSAI1_Config>
 80052ca:	4603      	mov	r3, r0
 80052cc:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052ce:	7cfb      	ldrb	r3, [r7, #19]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d001      	beq.n	80052d8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80052d4:	7cfb      	ldrb	r3, [r7, #19]
 80052d6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d04d      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052ec:	d108      	bne.n	8005300 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80052ee:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052f4:	4a18      	ldr	r2, [pc, #96]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80052fe:	e012      	b.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005300:	4b15      	ldr	r3, [pc, #84]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005302:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005306:	4a14      	ldr	r2, [pc, #80]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005308:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800530c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005310:	4b11      	ldr	r3, [pc, #68]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005316:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800531e:	490e      	ldr	r1, [pc, #56]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005320:	4313      	orrs	r3, r2
 8005322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800532a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800532e:	d106      	bne.n	800533e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005330:	4b09      	ldr	r3, [pc, #36]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	4a08      	ldr	r2, [pc, #32]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800533a:	60d3      	str	r3, [r2, #12]
 800533c:	e020      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005342:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005346:	d109      	bne.n	800535c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005348:	4b03      	ldr	r3, [pc, #12]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	4a02      	ldr	r2, [pc, #8]	; (8005358 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800534e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005352:	60d3      	str	r3, [r2, #12]
 8005354:	e014      	b.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005356:	bf00      	nop
 8005358:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005360:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005364:	d10c      	bne.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	3304      	adds	r3, #4
 800536a:	2101      	movs	r1, #1
 800536c:	4618      	mov	r0, r3
 800536e:	f000 f8a5 	bl	80054bc <RCCEx_PLLSAI1_Config>
 8005372:	4603      	mov	r3, r0
 8005374:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005376:	7cfb      	ldrb	r3, [r7, #19]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 800537c:	7cfb      	ldrb	r3, [r7, #19]
 800537e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005388:	2b00      	cmp	r3, #0
 800538a:	d028      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800538c:	4b4a      	ldr	r3, [pc, #296]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005392:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800539a:	4947      	ldr	r1, [pc, #284]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800539c:	4313      	orrs	r3, r2
 800539e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053aa:	d106      	bne.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053ac:	4b42      	ldr	r3, [pc, #264]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	4a41      	ldr	r2, [pc, #260]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053b6:	60d3      	str	r3, [r2, #12]
 80053b8:	e011      	b.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053c2:	d10c      	bne.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	3304      	adds	r3, #4
 80053c8:	2101      	movs	r1, #1
 80053ca:	4618      	mov	r0, r3
 80053cc:	f000 f876 	bl	80054bc <RCCEx_PLLSAI1_Config>
 80053d0:	4603      	mov	r3, r0
 80053d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053d4:	7cfb      	ldrb	r3, [r7, #19]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80053da:	7cfb      	ldrb	r3, [r7, #19]
 80053dc:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d01e      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053ea:	4b33      	ldr	r3, [pc, #204]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053fa:	492f      	ldr	r1, [pc, #188]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053fc:	4313      	orrs	r3, r2
 80053fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005408:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800540c:	d10c      	bne.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	3304      	adds	r3, #4
 8005412:	2102      	movs	r1, #2
 8005414:	4618      	mov	r0, r3
 8005416:	f000 f851 	bl	80054bc <RCCEx_PLLSAI1_Config>
 800541a:	4603      	mov	r3, r0
 800541c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800541e:	7cfb      	ldrb	r3, [r7, #19]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d001      	beq.n	8005428 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005424:	7cfb      	ldrb	r3, [r7, #19]
 8005426:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d00b      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005434:	4b20      	ldr	r3, [pc, #128]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005436:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800543a:	f023 0204 	bic.w	r2, r3, #4
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005444:	491c      	ldr	r1, [pc, #112]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005446:	4313      	orrs	r3, r2
 8005448:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00b      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005458:	4b17      	ldr	r3, [pc, #92]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800545a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800545e:	f023 0218 	bic.w	r2, r3, #24
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005468:	4913      	ldr	r1, [pc, #76]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d017      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800547c:	4b0e      	ldr	r3, [pc, #56]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800547e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005482:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800548c:	490a      	ldr	r1, [pc, #40]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800548e:	4313      	orrs	r3, r2
 8005490:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800549a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800549e:	d105      	bne.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054a0:	4b05      	ldr	r3, [pc, #20]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	4a04      	ldr	r2, [pc, #16]	; (80054b8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3718      	adds	r7, #24
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}
 80054b6:	bf00      	nop
 80054b8:	40021000 	.word	0x40021000

080054bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b084      	sub	sp, #16
 80054c0:	af00      	add	r7, sp, #0
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054c6:	2300      	movs	r3, #0
 80054c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ca:	4b72      	ldr	r3, [pc, #456]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d00e      	beq.n	80054f4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054d6:	4b6f      	ldr	r3, [pc, #444]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f003 0203 	and.w	r2, r3, #3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	429a      	cmp	r2, r3
 80054e4:	d103      	bne.n	80054ee <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
       ||
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d142      	bne.n	8005574 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	73fb      	strb	r3, [r7, #15]
 80054f2:	e03f      	b.n	8005574 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	2b03      	cmp	r3, #3
 80054fa:	d018      	beq.n	800552e <RCCEx_PLLSAI1_Config+0x72>
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d825      	bhi.n	800554c <RCCEx_PLLSAI1_Config+0x90>
 8005500:	2b01      	cmp	r3, #1
 8005502:	d002      	beq.n	800550a <RCCEx_PLLSAI1_Config+0x4e>
 8005504:	2b02      	cmp	r3, #2
 8005506:	d009      	beq.n	800551c <RCCEx_PLLSAI1_Config+0x60>
 8005508:	e020      	b.n	800554c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800550a:	4b62      	ldr	r3, [pc, #392]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0302 	and.w	r3, r3, #2
 8005512:	2b00      	cmp	r3, #0
 8005514:	d11d      	bne.n	8005552 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800551a:	e01a      	b.n	8005552 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800551c:	4b5d      	ldr	r3, [pc, #372]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005524:	2b00      	cmp	r3, #0
 8005526:	d116      	bne.n	8005556 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800552c:	e013      	b.n	8005556 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800552e:	4b59      	ldr	r3, [pc, #356]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10f      	bne.n	800555a <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800553a:	4b56      	ldr	r3, [pc, #344]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d109      	bne.n	800555a <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800554a:	e006      	b.n	800555a <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800554c:	2301      	movs	r3, #1
 800554e:	73fb      	strb	r3, [r7, #15]
      break;
 8005550:	e004      	b.n	800555c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005552:	bf00      	nop
 8005554:	e002      	b.n	800555c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005556:	bf00      	nop
 8005558:	e000      	b.n	800555c <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800555a:	bf00      	nop
    }

    if(status == HAL_OK)
 800555c:	7bfb      	ldrb	r3, [r7, #15]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d108      	bne.n	8005574 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005562:	4b4c      	ldr	r3, [pc, #304]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f023 0203 	bic.w	r2, r3, #3
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4949      	ldr	r1, [pc, #292]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005570:	4313      	orrs	r3, r2
 8005572:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	2b00      	cmp	r3, #0
 8005578:	f040 8086 	bne.w	8005688 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800557c:	4b45      	ldr	r3, [pc, #276]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a44      	ldr	r2, [pc, #272]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005582:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005586:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005588:	f7fb f822 	bl	80005d0 <HAL_GetTick>
 800558c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800558e:	e009      	b.n	80055a4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005590:	f7fb f81e 	bl	80005d0 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d902      	bls.n	80055a4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	73fb      	strb	r3, [r7, #15]
        break;
 80055a2:	e005      	b.n	80055b0 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055a4:	4b3b      	ldr	r3, [pc, #236]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d1ef      	bne.n	8005590 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d168      	bne.n	8005688 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d113      	bne.n	80055e4 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055bc:	4b35      	ldr	r3, [pc, #212]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055be:	691a      	ldr	r2, [r3, #16]
 80055c0:	4b35      	ldr	r3, [pc, #212]	; (8005698 <RCCEx_PLLSAI1_Config+0x1dc>)
 80055c2:	4013      	ands	r3, r2
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	6892      	ldr	r2, [r2, #8]
 80055c8:	0211      	lsls	r1, r2, #8
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	68d2      	ldr	r2, [r2, #12]
 80055ce:	06d2      	lsls	r2, r2, #27
 80055d0:	4311      	orrs	r1, r2
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	6852      	ldr	r2, [r2, #4]
 80055d6:	3a01      	subs	r2, #1
 80055d8:	0112      	lsls	r2, r2, #4
 80055da:	430a      	orrs	r2, r1
 80055dc:	492d      	ldr	r1, [pc, #180]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	610b      	str	r3, [r1, #16]
 80055e2:	e02d      	b.n	8005640 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d115      	bne.n	8005616 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ea:	4b2a      	ldr	r3, [pc, #168]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055ec:	691a      	ldr	r2, [r3, #16]
 80055ee:	4b2b      	ldr	r3, [pc, #172]	; (800569c <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f0:	4013      	ands	r3, r2
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	6892      	ldr	r2, [r2, #8]
 80055f6:	0211      	lsls	r1, r2, #8
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	6912      	ldr	r2, [r2, #16]
 80055fc:	0852      	lsrs	r2, r2, #1
 80055fe:	3a01      	subs	r2, #1
 8005600:	0552      	lsls	r2, r2, #21
 8005602:	4311      	orrs	r1, r2
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	6852      	ldr	r2, [r2, #4]
 8005608:	3a01      	subs	r2, #1
 800560a:	0112      	lsls	r2, r2, #4
 800560c:	430a      	orrs	r2, r1
 800560e:	4921      	ldr	r1, [pc, #132]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005610:	4313      	orrs	r3, r2
 8005612:	610b      	str	r3, [r1, #16]
 8005614:	e014      	b.n	8005640 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005616:	4b1f      	ldr	r3, [pc, #124]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005618:	691a      	ldr	r2, [r3, #16]
 800561a:	4b21      	ldr	r3, [pc, #132]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800561c:	4013      	ands	r3, r2
 800561e:	687a      	ldr	r2, [r7, #4]
 8005620:	6892      	ldr	r2, [r2, #8]
 8005622:	0211      	lsls	r1, r2, #8
 8005624:	687a      	ldr	r2, [r7, #4]
 8005626:	6952      	ldr	r2, [r2, #20]
 8005628:	0852      	lsrs	r2, r2, #1
 800562a:	3a01      	subs	r2, #1
 800562c:	0652      	lsls	r2, r2, #25
 800562e:	4311      	orrs	r1, r2
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6852      	ldr	r2, [r2, #4]
 8005634:	3a01      	subs	r2, #1
 8005636:	0112      	lsls	r2, r2, #4
 8005638:	430a      	orrs	r2, r1
 800563a:	4916      	ldr	r1, [pc, #88]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 800563c:	4313      	orrs	r3, r2
 800563e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005640:	4b14      	ldr	r3, [pc, #80]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a13      	ldr	r2, [pc, #76]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005646:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800564a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564c:	f7fa ffc0 	bl	80005d0 <HAL_GetTick>
 8005650:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005652:	e009      	b.n	8005668 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005654:	f7fa ffbc 	bl	80005d0 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b02      	cmp	r3, #2
 8005660:	d902      	bls.n	8005668 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	73fb      	strb	r3, [r7, #15]
          break;
 8005666:	e005      	b.n	8005674 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0ef      	beq.n	8005654 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005674:	7bfb      	ldrb	r3, [r7, #15]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d106      	bne.n	8005688 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800567a:	4b06      	ldr	r3, [pc, #24]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 800567c:	691a      	ldr	r2, [r3, #16]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	4904      	ldr	r1, [pc, #16]	; (8005694 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005684:	4313      	orrs	r3, r2
 8005686:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005688:	7bfb      	ldrb	r3, [r7, #15]
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	40021000 	.word	0x40021000
 8005698:	07ff800f 	.word	0x07ff800f
 800569c:	ff9f800f 	.word	0xff9f800f
 80056a0:	f9ff800f 	.word	0xf9ff800f

080056a4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056ae:	2300      	movs	r3, #0
 80056b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056b2:	4b72      	ldr	r3, [pc, #456]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f003 0303 	and.w	r3, r3, #3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d00e      	beq.n	80056dc <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056be:	4b6f      	ldr	r3, [pc, #444]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f003 0203 	and.w	r2, r3, #3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d103      	bne.n	80056d6 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
       ||
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d142      	bne.n	800575c <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	73fb      	strb	r3, [r7, #15]
 80056da:	e03f      	b.n	800575c <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	2b03      	cmp	r3, #3
 80056e2:	d018      	beq.n	8005716 <RCCEx_PLLSAI2_Config+0x72>
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d825      	bhi.n	8005734 <RCCEx_PLLSAI2_Config+0x90>
 80056e8:	2b01      	cmp	r3, #1
 80056ea:	d002      	beq.n	80056f2 <RCCEx_PLLSAI2_Config+0x4e>
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d009      	beq.n	8005704 <RCCEx_PLLSAI2_Config+0x60>
 80056f0:	e020      	b.n	8005734 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056f2:	4b62      	ldr	r3, [pc, #392]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f003 0302 	and.w	r3, r3, #2
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d11d      	bne.n	800573a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005702:	e01a      	b.n	800573a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005704:	4b5d      	ldr	r3, [pc, #372]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800570c:	2b00      	cmp	r3, #0
 800570e:	d116      	bne.n	800573e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005710:	2301      	movs	r3, #1
 8005712:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005714:	e013      	b.n	800573e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005716:	4b59      	ldr	r3, [pc, #356]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10f      	bne.n	8005742 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005722:	4b56      	ldr	r3, [pc, #344]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800572a:	2b00      	cmp	r3, #0
 800572c:	d109      	bne.n	8005742 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800572e:	2301      	movs	r3, #1
 8005730:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005732:	e006      	b.n	8005742 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005734:	2301      	movs	r3, #1
 8005736:	73fb      	strb	r3, [r7, #15]
      break;
 8005738:	e004      	b.n	8005744 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800573a:	bf00      	nop
 800573c:	e002      	b.n	8005744 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800573e:	bf00      	nop
 8005740:	e000      	b.n	8005744 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005742:	bf00      	nop
    }

    if(status == HAL_OK)
 8005744:	7bfb      	ldrb	r3, [r7, #15]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d108      	bne.n	800575c <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800574a:	4b4c      	ldr	r3, [pc, #304]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	f023 0203 	bic.w	r2, r3, #3
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4949      	ldr	r1, [pc, #292]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005758:	4313      	orrs	r3, r2
 800575a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b00      	cmp	r3, #0
 8005760:	f040 8086 	bne.w	8005870 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005764:	4b45      	ldr	r3, [pc, #276]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a44      	ldr	r2, [pc, #272]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 800576a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800576e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005770:	f7fa ff2e 	bl	80005d0 <HAL_GetTick>
 8005774:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005776:	e009      	b.n	800578c <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005778:	f7fa ff2a 	bl	80005d0 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	68bb      	ldr	r3, [r7, #8]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d902      	bls.n	800578c <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	73fb      	strb	r3, [r7, #15]
        break;
 800578a:	e005      	b.n	8005798 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800578c:	4b3b      	ldr	r3, [pc, #236]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d1ef      	bne.n	8005778 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8005798:	7bfb      	ldrb	r3, [r7, #15]
 800579a:	2b00      	cmp	r3, #0
 800579c:	d168      	bne.n	8005870 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d113      	bne.n	80057cc <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057a4:	4b35      	ldr	r3, [pc, #212]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057a6:	695a      	ldr	r2, [r3, #20]
 80057a8:	4b35      	ldr	r3, [pc, #212]	; (8005880 <RCCEx_PLLSAI2_Config+0x1dc>)
 80057aa:	4013      	ands	r3, r2
 80057ac:	687a      	ldr	r2, [r7, #4]
 80057ae:	6892      	ldr	r2, [r2, #8]
 80057b0:	0211      	lsls	r1, r2, #8
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	68d2      	ldr	r2, [r2, #12]
 80057b6:	06d2      	lsls	r2, r2, #27
 80057b8:	4311      	orrs	r1, r2
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6852      	ldr	r2, [r2, #4]
 80057be:	3a01      	subs	r2, #1
 80057c0:	0112      	lsls	r2, r2, #4
 80057c2:	430a      	orrs	r2, r1
 80057c4:	492d      	ldr	r1, [pc, #180]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	614b      	str	r3, [r1, #20]
 80057ca:	e02d      	b.n	8005828 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d115      	bne.n	80057fe <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057d2:	4b2a      	ldr	r3, [pc, #168]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057d4:	695a      	ldr	r2, [r3, #20]
 80057d6:	4b2b      	ldr	r3, [pc, #172]	; (8005884 <RCCEx_PLLSAI2_Config+0x1e0>)
 80057d8:	4013      	ands	r3, r2
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	6892      	ldr	r2, [r2, #8]
 80057de:	0211      	lsls	r1, r2, #8
 80057e0:	687a      	ldr	r2, [r7, #4]
 80057e2:	6912      	ldr	r2, [r2, #16]
 80057e4:	0852      	lsrs	r2, r2, #1
 80057e6:	3a01      	subs	r2, #1
 80057e8:	0552      	lsls	r2, r2, #21
 80057ea:	4311      	orrs	r1, r2
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	6852      	ldr	r2, [r2, #4]
 80057f0:	3a01      	subs	r2, #1
 80057f2:	0112      	lsls	r2, r2, #4
 80057f4:	430a      	orrs	r2, r1
 80057f6:	4921      	ldr	r1, [pc, #132]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 80057f8:	4313      	orrs	r3, r2
 80057fa:	614b      	str	r3, [r1, #20]
 80057fc:	e014      	b.n	8005828 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057fe:	4b1f      	ldr	r3, [pc, #124]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005800:	695a      	ldr	r2, [r3, #20]
 8005802:	4b21      	ldr	r3, [pc, #132]	; (8005888 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005804:	4013      	ands	r3, r2
 8005806:	687a      	ldr	r2, [r7, #4]
 8005808:	6892      	ldr	r2, [r2, #8]
 800580a:	0211      	lsls	r1, r2, #8
 800580c:	687a      	ldr	r2, [r7, #4]
 800580e:	6952      	ldr	r2, [r2, #20]
 8005810:	0852      	lsrs	r2, r2, #1
 8005812:	3a01      	subs	r2, #1
 8005814:	0652      	lsls	r2, r2, #25
 8005816:	4311      	orrs	r1, r2
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	6852      	ldr	r2, [r2, #4]
 800581c:	3a01      	subs	r2, #1
 800581e:	0112      	lsls	r2, r2, #4
 8005820:	430a      	orrs	r2, r1
 8005822:	4916      	ldr	r1, [pc, #88]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005824:	4313      	orrs	r3, r2
 8005826:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005828:	4b14      	ldr	r3, [pc, #80]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a13      	ldr	r2, [pc, #76]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 800582e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005832:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005834:	f7fa fecc 	bl	80005d0 <HAL_GetTick>
 8005838:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800583a:	e009      	b.n	8005850 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800583c:	f7fa fec8 	bl	80005d0 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	68bb      	ldr	r3, [r7, #8]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	2b02      	cmp	r3, #2
 8005848:	d902      	bls.n	8005850 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	73fb      	strb	r3, [r7, #15]
          break;
 800584e:	e005      	b.n	800585c <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005850:	4b0a      	ldr	r3, [pc, #40]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005858:	2b00      	cmp	r3, #0
 800585a:	d0ef      	beq.n	800583c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 800585c:	7bfb      	ldrb	r3, [r7, #15]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d106      	bne.n	8005870 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005862:	4b06      	ldr	r3, [pc, #24]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 8005864:	695a      	ldr	r2, [r3, #20]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	4904      	ldr	r1, [pc, #16]	; (800587c <RCCEx_PLLSAI2_Config+0x1d8>)
 800586c:	4313      	orrs	r3, r2
 800586e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005870:	7bfb      	ldrb	r3, [r7, #15]
}
 8005872:	4618      	mov	r0, r3
 8005874:	3710      	adds	r7, #16
 8005876:	46bd      	mov	sp, r7
 8005878:	bd80      	pop	{r7, pc}
 800587a:	bf00      	nop
 800587c:	40021000 	.word	0x40021000
 8005880:	07ff800f 	.word	0x07ff800f
 8005884:	ff9f800f 	.word	0xff9f800f
 8005888:	f9ff800f 	.word	0xf9ff800f

0800588c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b082      	sub	sp, #8
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d101      	bne.n	800589e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800589a:	2301      	movs	r3, #1
 800589c:	e049      	b.n	8005932 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d106      	bne.n	80058b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2200      	movs	r2, #0
 80058ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058b2:	6878      	ldr	r0, [r7, #4]
 80058b4:	f003 fd3e 	bl	8009334 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2202      	movs	r2, #2
 80058bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681a      	ldr	r2, [r3, #0]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	3304      	adds	r3, #4
 80058c8:	4619      	mov	r1, r3
 80058ca:	4610      	mov	r0, r2
 80058cc:	f000 fac0 	bl	8005e50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	2201      	movs	r2, #1
 80058dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	2201      	movs	r2, #1
 8005904:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2201      	movs	r2, #1
 8005914:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2201      	movs	r2, #1
 800591c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
	...

0800593c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800593c:	b480      	push	{r7}
 800593e:	b085      	sub	sp, #20
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b01      	cmp	r3, #1
 800594e:	d001      	beq.n	8005954 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e04f      	b.n	80059f4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2202      	movs	r2, #2
 8005958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	68da      	ldr	r2, [r3, #12]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0201 	orr.w	r2, r2, #1
 800596a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a23      	ldr	r2, [pc, #140]	; (8005a00 <HAL_TIM_Base_Start_IT+0xc4>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d01d      	beq.n	80059b2 <HAL_TIM_Base_Start_IT+0x76>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800597e:	d018      	beq.n	80059b2 <HAL_TIM_Base_Start_IT+0x76>
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a1f      	ldr	r2, [pc, #124]	; (8005a04 <HAL_TIM_Base_Start_IT+0xc8>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d013      	beq.n	80059b2 <HAL_TIM_Base_Start_IT+0x76>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	4a1e      	ldr	r2, [pc, #120]	; (8005a08 <HAL_TIM_Base_Start_IT+0xcc>)
 8005990:	4293      	cmp	r3, r2
 8005992:	d00e      	beq.n	80059b2 <HAL_TIM_Base_Start_IT+0x76>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4a1c      	ldr	r2, [pc, #112]	; (8005a0c <HAL_TIM_Base_Start_IT+0xd0>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d009      	beq.n	80059b2 <HAL_TIM_Base_Start_IT+0x76>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	4a1b      	ldr	r2, [pc, #108]	; (8005a10 <HAL_TIM_Base_Start_IT+0xd4>)
 80059a4:	4293      	cmp	r3, r2
 80059a6:	d004      	beq.n	80059b2 <HAL_TIM_Base_Start_IT+0x76>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a19      	ldr	r2, [pc, #100]	; (8005a14 <HAL_TIM_Base_Start_IT+0xd8>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d115      	bne.n	80059de <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	689a      	ldr	r2, [r3, #8]
 80059b8:	4b17      	ldr	r3, [pc, #92]	; (8005a18 <HAL_TIM_Base_Start_IT+0xdc>)
 80059ba:	4013      	ands	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2b06      	cmp	r3, #6
 80059c2:	d015      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0xb4>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ca:	d011      	beq.n	80059f0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	681a      	ldr	r2, [r3, #0]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	f042 0201 	orr.w	r2, r2, #1
 80059da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059dc:	e008      	b.n	80059f0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f042 0201 	orr.w	r2, r2, #1
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	e000      	b.n	80059f2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr
 8005a00:	40012c00 	.word	0x40012c00
 8005a04:	40000400 	.word	0x40000400
 8005a08:	40000800 	.word	0x40000800
 8005a0c:	40000c00 	.word	0x40000c00
 8005a10:	40013400 	.word	0x40013400
 8005a14:	40014000 	.word	0x40014000
 8005a18:	00010007 	.word	0x00010007

08005a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b082      	sub	sp, #8
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d122      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0302 	and.w	r3, r3, #2
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d11b      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0202 	mvn.w	r2, #2
 8005a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	f003 0303 	and.w	r3, r3, #3
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 f9d8 	bl	8005e14 <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f9ca 	bl	8005e00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 f9db 	bl	8005e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0304 	and.w	r3, r3, #4
 8005a82:	2b04      	cmp	r3, #4
 8005a84:	d122      	bne.n	8005acc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b04      	cmp	r3, #4
 8005a92:	d11b      	bne.n	8005acc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0204 	mvn.w	r2, #4
 8005a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2202      	movs	r2, #2
 8005aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d003      	beq.n	8005aba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 f9ae 	bl	8005e14 <HAL_TIM_IC_CaptureCallback>
 8005ab8:	e005      	b.n	8005ac6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 f9a0 	bl	8005e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f000 f9b1 	bl	8005e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2200      	movs	r2, #0
 8005aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	691b      	ldr	r3, [r3, #16]
 8005ad2:	f003 0308 	and.w	r3, r3, #8
 8005ad6:	2b08      	cmp	r3, #8
 8005ad8:	d122      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	f003 0308 	and.w	r3, r3, #8
 8005ae4:	2b08      	cmp	r3, #8
 8005ae6:	d11b      	bne.n	8005b20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f06f 0208 	mvn.w	r2, #8
 8005af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2204      	movs	r2, #4
 8005af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	69db      	ldr	r3, [r3, #28]
 8005afe:	f003 0303 	and.w	r3, r3, #3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d003      	beq.n	8005b0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b06:	6878      	ldr	r0, [r7, #4]
 8005b08:	f000 f984 	bl	8005e14 <HAL_TIM_IC_CaptureCallback>
 8005b0c:	e005      	b.n	8005b1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b0e:	6878      	ldr	r0, [r7, #4]
 8005b10:	f000 f976 	bl	8005e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b14:	6878      	ldr	r0, [r7, #4]
 8005b16:	f000 f987 	bl	8005e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	691b      	ldr	r3, [r3, #16]
 8005b26:	f003 0310 	and.w	r3, r3, #16
 8005b2a:	2b10      	cmp	r3, #16
 8005b2c:	d122      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	68db      	ldr	r3, [r3, #12]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d11b      	bne.n	8005b74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f06f 0210 	mvn.w	r2, #16
 8005b44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	2208      	movs	r2, #8
 8005b4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	69db      	ldr	r3, [r3, #28]
 8005b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f95a 	bl	8005e14 <HAL_TIM_IC_CaptureCallback>
 8005b60:	e005      	b.n	8005b6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f000 f94c 	bl	8005e00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f000 f95d 	bl	8005e28 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	691b      	ldr	r3, [r3, #16]
 8005b7a:	f003 0301 	and.w	r3, r3, #1
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d10e      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d107      	bne.n	8005ba0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f06f 0201 	mvn.w	r2, #1
 8005b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 f926 	bl	8005dec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	691b      	ldr	r3, [r3, #16]
 8005ba6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005baa:	2b80      	cmp	r3, #128	; 0x80
 8005bac:	d10e      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb8:	2b80      	cmp	r3, #128	; 0x80
 8005bba:	d107      	bne.n	8005bcc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 fb08 	bl	80061dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bda:	d10e      	bne.n	8005bfa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be6:	2b80      	cmp	r3, #128	; 0x80
 8005be8:	d107      	bne.n	8005bfa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bf2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fafb 	bl	80061f0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c04:	2b40      	cmp	r3, #64	; 0x40
 8005c06:	d10e      	bne.n	8005c26 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c12:	2b40      	cmp	r3, #64	; 0x40
 8005c14:	d107      	bne.n	8005c26 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 f90b 	bl	8005e3c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b20      	cmp	r3, #32
 8005c32:	d10e      	bne.n	8005c52 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	f003 0320 	and.w	r3, r3, #32
 8005c3e:	2b20      	cmp	r3, #32
 8005c40:	d107      	bne.n	8005c52 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f06f 0220 	mvn.w	r2, #32
 8005c4a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f000 fabb 	bl	80061c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c52:	bf00      	nop
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c5a:	b580      	push	{r7, lr}
 8005c5c:	b084      	sub	sp, #16
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
 8005c62:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c64:	2300      	movs	r3, #0
 8005c66:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d101      	bne.n	8005c76 <HAL_TIM_ConfigClockSource+0x1c>
 8005c72:	2302      	movs	r3, #2
 8005c74:	e0b6      	b.n	8005de4 <HAL_TIM_ConfigClockSource+0x18a>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2202      	movs	r2, #2
 8005c82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c94:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c98:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ca0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	68ba      	ldr	r2, [r7, #8]
 8005ca8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb2:	d03e      	beq.n	8005d32 <HAL_TIM_ConfigClockSource+0xd8>
 8005cb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb8:	f200 8087 	bhi.w	8005dca <HAL_TIM_ConfigClockSource+0x170>
 8005cbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc0:	f000 8086 	beq.w	8005dd0 <HAL_TIM_ConfigClockSource+0x176>
 8005cc4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc8:	d87f      	bhi.n	8005dca <HAL_TIM_ConfigClockSource+0x170>
 8005cca:	2b70      	cmp	r3, #112	; 0x70
 8005ccc:	d01a      	beq.n	8005d04 <HAL_TIM_ConfigClockSource+0xaa>
 8005cce:	2b70      	cmp	r3, #112	; 0x70
 8005cd0:	d87b      	bhi.n	8005dca <HAL_TIM_ConfigClockSource+0x170>
 8005cd2:	2b60      	cmp	r3, #96	; 0x60
 8005cd4:	d050      	beq.n	8005d78 <HAL_TIM_ConfigClockSource+0x11e>
 8005cd6:	2b60      	cmp	r3, #96	; 0x60
 8005cd8:	d877      	bhi.n	8005dca <HAL_TIM_ConfigClockSource+0x170>
 8005cda:	2b50      	cmp	r3, #80	; 0x50
 8005cdc:	d03c      	beq.n	8005d58 <HAL_TIM_ConfigClockSource+0xfe>
 8005cde:	2b50      	cmp	r3, #80	; 0x50
 8005ce0:	d873      	bhi.n	8005dca <HAL_TIM_ConfigClockSource+0x170>
 8005ce2:	2b40      	cmp	r3, #64	; 0x40
 8005ce4:	d058      	beq.n	8005d98 <HAL_TIM_ConfigClockSource+0x13e>
 8005ce6:	2b40      	cmp	r3, #64	; 0x40
 8005ce8:	d86f      	bhi.n	8005dca <HAL_TIM_ConfigClockSource+0x170>
 8005cea:	2b30      	cmp	r3, #48	; 0x30
 8005cec:	d064      	beq.n	8005db8 <HAL_TIM_ConfigClockSource+0x15e>
 8005cee:	2b30      	cmp	r3, #48	; 0x30
 8005cf0:	d86b      	bhi.n	8005dca <HAL_TIM_ConfigClockSource+0x170>
 8005cf2:	2b20      	cmp	r3, #32
 8005cf4:	d060      	beq.n	8005db8 <HAL_TIM_ConfigClockSource+0x15e>
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d867      	bhi.n	8005dca <HAL_TIM_ConfigClockSource+0x170>
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d05c      	beq.n	8005db8 <HAL_TIM_ConfigClockSource+0x15e>
 8005cfe:	2b10      	cmp	r3, #16
 8005d00:	d05a      	beq.n	8005db8 <HAL_TIM_ConfigClockSource+0x15e>
 8005d02:	e062      	b.n	8005dca <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6818      	ldr	r0, [r3, #0]
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	6899      	ldr	r1, [r3, #8]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685a      	ldr	r2, [r3, #4]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	68db      	ldr	r3, [r3, #12]
 8005d14:	f000 f9b0 	bl	8006078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d26:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	609a      	str	r2, [r3, #8]
      break;
 8005d30:	e04f      	b.n	8005dd2 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6818      	ldr	r0, [r3, #0]
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	6899      	ldr	r1, [r3, #8]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	68db      	ldr	r3, [r3, #12]
 8005d42:	f000 f999 	bl	8006078 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	689a      	ldr	r2, [r3, #8]
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d54:	609a      	str	r2, [r3, #8]
      break;
 8005d56:	e03c      	b.n	8005dd2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6818      	ldr	r0, [r3, #0]
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	6859      	ldr	r1, [r3, #4]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	461a      	mov	r2, r3
 8005d66:	f000 f90d 	bl	8005f84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2150      	movs	r1, #80	; 0x50
 8005d70:	4618      	mov	r0, r3
 8005d72:	f000 f966 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 8005d76:	e02c      	b.n	8005dd2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6818      	ldr	r0, [r3, #0]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	6859      	ldr	r1, [r3, #4]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	461a      	mov	r2, r3
 8005d86:	f000 f92c 	bl	8005fe2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2160      	movs	r1, #96	; 0x60
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 f956 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 8005d96:	e01c      	b.n	8005dd2 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	6859      	ldr	r1, [r3, #4]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	68db      	ldr	r3, [r3, #12]
 8005da4:	461a      	mov	r2, r3
 8005da6:	f000 f8ed 	bl	8005f84 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	2140      	movs	r1, #64	; 0x40
 8005db0:	4618      	mov	r0, r3
 8005db2:	f000 f946 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 8005db6:	e00c      	b.n	8005dd2 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681a      	ldr	r2, [r3, #0]
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	f000 f93d 	bl	8006042 <TIM_ITRx_SetConfig>
      break;
 8005dc8:	e003      	b.n	8005dd2 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	73fb      	strb	r3, [r7, #15]
      break;
 8005dce:	e000      	b.n	8005dd2 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005dd0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3710      	adds	r7, #16
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	4a40      	ldr	r2, [pc, #256]	; (8005f64 <TIM_Base_SetConfig+0x114>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d013      	beq.n	8005e90 <TIM_Base_SetConfig+0x40>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e6e:	d00f      	beq.n	8005e90 <TIM_Base_SetConfig+0x40>
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	4a3d      	ldr	r2, [pc, #244]	; (8005f68 <TIM_Base_SetConfig+0x118>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d00b      	beq.n	8005e90 <TIM_Base_SetConfig+0x40>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	4a3c      	ldr	r2, [pc, #240]	; (8005f6c <TIM_Base_SetConfig+0x11c>)
 8005e7c:	4293      	cmp	r3, r2
 8005e7e:	d007      	beq.n	8005e90 <TIM_Base_SetConfig+0x40>
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4a3b      	ldr	r2, [pc, #236]	; (8005f70 <TIM_Base_SetConfig+0x120>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d003      	beq.n	8005e90 <TIM_Base_SetConfig+0x40>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4a3a      	ldr	r2, [pc, #232]	; (8005f74 <TIM_Base_SetConfig+0x124>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d108      	bne.n	8005ea2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	685b      	ldr	r3, [r3, #4]
 8005e9c:	68fa      	ldr	r2, [r7, #12]
 8005e9e:	4313      	orrs	r3, r2
 8005ea0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	4a2f      	ldr	r2, [pc, #188]	; (8005f64 <TIM_Base_SetConfig+0x114>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d01f      	beq.n	8005eea <TIM_Base_SetConfig+0x9a>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb0:	d01b      	beq.n	8005eea <TIM_Base_SetConfig+0x9a>
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	4a2c      	ldr	r2, [pc, #176]	; (8005f68 <TIM_Base_SetConfig+0x118>)
 8005eb6:	4293      	cmp	r3, r2
 8005eb8:	d017      	beq.n	8005eea <TIM_Base_SetConfig+0x9a>
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	4a2b      	ldr	r2, [pc, #172]	; (8005f6c <TIM_Base_SetConfig+0x11c>)
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d013      	beq.n	8005eea <TIM_Base_SetConfig+0x9a>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	4a2a      	ldr	r2, [pc, #168]	; (8005f70 <TIM_Base_SetConfig+0x120>)
 8005ec6:	4293      	cmp	r3, r2
 8005ec8:	d00f      	beq.n	8005eea <TIM_Base_SetConfig+0x9a>
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	4a29      	ldr	r2, [pc, #164]	; (8005f74 <TIM_Base_SetConfig+0x124>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00b      	beq.n	8005eea <TIM_Base_SetConfig+0x9a>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a28      	ldr	r2, [pc, #160]	; (8005f78 <TIM_Base_SetConfig+0x128>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d007      	beq.n	8005eea <TIM_Base_SetConfig+0x9a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	4a27      	ldr	r2, [pc, #156]	; (8005f7c <TIM_Base_SetConfig+0x12c>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d003      	beq.n	8005eea <TIM_Base_SetConfig+0x9a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a26      	ldr	r2, [pc, #152]	; (8005f80 <TIM_Base_SetConfig+0x130>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d108      	bne.n	8005efc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	68db      	ldr	r3, [r3, #12]
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	4313      	orrs	r3, r2
 8005f08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68fa      	ldr	r2, [r7, #12]
 8005f0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	689a      	ldr	r2, [r3, #8]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a10      	ldr	r2, [pc, #64]	; (8005f64 <TIM_Base_SetConfig+0x114>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d00f      	beq.n	8005f48 <TIM_Base_SetConfig+0xf8>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	4a12      	ldr	r2, [pc, #72]	; (8005f74 <TIM_Base_SetConfig+0x124>)
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	d00b      	beq.n	8005f48 <TIM_Base_SetConfig+0xf8>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a11      	ldr	r2, [pc, #68]	; (8005f78 <TIM_Base_SetConfig+0x128>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d007      	beq.n	8005f48 <TIM_Base_SetConfig+0xf8>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a10      	ldr	r2, [pc, #64]	; (8005f7c <TIM_Base_SetConfig+0x12c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d003      	beq.n	8005f48 <TIM_Base_SetConfig+0xf8>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a0f      	ldr	r2, [pc, #60]	; (8005f80 <TIM_Base_SetConfig+0x130>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d103      	bne.n	8005f50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	691a      	ldr	r2, [r3, #16]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	615a      	str	r2, [r3, #20]
}
 8005f56:	bf00      	nop
 8005f58:	3714      	adds	r7, #20
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr
 8005f62:	bf00      	nop
 8005f64:	40012c00 	.word	0x40012c00
 8005f68:	40000400 	.word	0x40000400
 8005f6c:	40000800 	.word	0x40000800
 8005f70:	40000c00 	.word	0x40000c00
 8005f74:	40013400 	.word	0x40013400
 8005f78:	40014000 	.word	0x40014000
 8005f7c:	40014400 	.word	0x40014400
 8005f80:	40014800 	.word	0x40014800

08005f84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b087      	sub	sp, #28
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	60f8      	str	r0, [r7, #12]
 8005f8c:	60b9      	str	r1, [r7, #8]
 8005f8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	6a1b      	ldr	r3, [r3, #32]
 8005f94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	6a1b      	ldr	r3, [r3, #32]
 8005f9a:	f023 0201 	bic.w	r2, r3, #1
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fa8:	693b      	ldr	r3, [r7, #16]
 8005faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	011b      	lsls	r3, r3, #4
 8005fb4:	693a      	ldr	r2, [r7, #16]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	f023 030a 	bic.w	r3, r3, #10
 8005fc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	693a      	ldr	r2, [r7, #16]
 8005fce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	621a      	str	r2, [r3, #32]
}
 8005fd6:	bf00      	nop
 8005fd8:	371c      	adds	r7, #28
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe0:	4770      	bx	lr

08005fe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe2:	b480      	push	{r7}
 8005fe4:	b087      	sub	sp, #28
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	60f8      	str	r0, [r7, #12]
 8005fea:	60b9      	str	r1, [r7, #8]
 8005fec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	f023 0210 	bic.w	r2, r3, #16
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	699b      	ldr	r3, [r3, #24]
 8005ffe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800600c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	031b      	lsls	r3, r3, #12
 8006012:	697a      	ldr	r2, [r7, #20]
 8006014:	4313      	orrs	r3, r2
 8006016:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800601e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	011b      	lsls	r3, r3, #4
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	697a      	ldr	r2, [r7, #20]
 800602e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	621a      	str	r2, [r3, #32]
}
 8006036:	bf00      	nop
 8006038:	371c      	adds	r7, #28
 800603a:	46bd      	mov	sp, r7
 800603c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006040:	4770      	bx	lr

08006042 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006042:	b480      	push	{r7}
 8006044:	b085      	sub	sp, #20
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
 800604a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006058:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800605a:	683a      	ldr	r2, [r7, #0]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4313      	orrs	r3, r2
 8006060:	f043 0307 	orr.w	r3, r3, #7
 8006064:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	609a      	str	r2, [r3, #8]
}
 800606c:	bf00      	nop
 800606e:	3714      	adds	r7, #20
 8006070:	46bd      	mov	sp, r7
 8006072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006076:	4770      	bx	lr

08006078 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006078:	b480      	push	{r7}
 800607a:	b087      	sub	sp, #28
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	607a      	str	r2, [r7, #4]
 8006084:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	689b      	ldr	r3, [r3, #8]
 800608a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800608c:	697b      	ldr	r3, [r7, #20]
 800608e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006092:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	021a      	lsls	r2, r3, #8
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	431a      	orrs	r2, r3
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	4313      	orrs	r3, r2
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	697a      	ldr	r2, [r7, #20]
 80060aa:	609a      	str	r2, [r3, #8]
}
 80060ac:	bf00      	nop
 80060ae:	371c      	adds	r7, #28
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr

080060b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b085      	sub	sp, #20
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d101      	bne.n	80060d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060cc:	2302      	movs	r3, #2
 80060ce:	e068      	b.n	80061a2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2201      	movs	r2, #1
 80060d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2202      	movs	r2, #2
 80060dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	4a2e      	ldr	r2, [pc, #184]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d004      	beq.n	8006104 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	4a2d      	ldr	r2, [pc, #180]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d108      	bne.n	8006116 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800610a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	68fa      	ldr	r2, [r7, #12]
 8006112:	4313      	orrs	r3, r2
 8006114:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800611c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4313      	orrs	r3, r2
 8006126:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4a1e      	ldr	r2, [pc, #120]	; (80061b0 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01d      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006142:	d018      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	4a1b      	ldr	r2, [pc, #108]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d013      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1a      	ldr	r2, [pc, #104]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d00e      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a18      	ldr	r2, [pc, #96]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d009      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a13      	ldr	r2, [pc, #76]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d004      	beq.n	8006176 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a14      	ldr	r2, [pc, #80]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d10c      	bne.n	8006190 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800617c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	4313      	orrs	r3, r2
 8006186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2200      	movs	r2, #0
 800619c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3714      	adds	r7, #20
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	40012c00 	.word	0x40012c00
 80061b4:	40013400 	.word	0x40013400
 80061b8:	40000400 	.word	0x40000400
 80061bc:	40000800 	.word	0x40000800
 80061c0:	40000c00 	.word	0x40000c00
 80061c4:	40014000 	.word	0x40014000

080061c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061dc:	b480      	push	{r7}
 80061de:	b083      	sub	sp, #12
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061e4:	bf00      	nop
 80061e6:	370c      	adds	r7, #12
 80061e8:	46bd      	mov	sp, r7
 80061ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ee:	4770      	bx	lr

080061f0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061f8:	bf00      	nop
 80061fa:	370c      	adds	r7, #12
 80061fc:	46bd      	mov	sp, r7
 80061fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006202:	4770      	bx	lr

08006204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
 800620a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d101      	bne.n	8006216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006212:	2301      	movs	r3, #1
 8006214:	e042      	b.n	800629c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800621c:	2b00      	cmp	r3, #0
 800621e:	d106      	bne.n	800622e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f003 f8a7 	bl	800937c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2224      	movs	r2, #36	; 0x24
 8006232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f022 0201 	bic.w	r2, r2, #1
 8006244:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fb64 	bl	8006914 <UART_SetConfig>
 800624c:	4603      	mov	r3, r0
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e022      	b.n	800629c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625a:	2b00      	cmp	r3, #0
 800625c:	d002      	beq.n	8006264 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fe54 	bl	8006f0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	685a      	ldr	r2, [r3, #4]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	689a      	ldr	r2, [r3, #8]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	f042 0201 	orr.w	r2, r2, #1
 8006292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fedb 	bl	8007050 <UART_CheckIdleState>
 800629a:	4603      	mov	r3, r0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3708      	adds	r7, #8
 80062a0:	46bd      	mov	sp, r7
 80062a2:	bd80      	pop	{r7, pc}

080062a4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b0ba      	sub	sp, #232	; 0xe8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	69db      	ldr	r3, [r3, #28]
 80062b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80062ce:	f640 030f 	movw	r3, #2063	; 0x80f
 80062d2:	4013      	ands	r3, r2
 80062d4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80062d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d11b      	bne.n	8006318 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d015      	beq.n	8006318 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f0:	f003 0320 	and.w	r3, r3, #32
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d105      	bne.n	8006304 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006300:	2b00      	cmp	r3, #0
 8006302:	d009      	beq.n	8006318 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006308:	2b00      	cmp	r3, #0
 800630a:	f000 82d6 	beq.w	80068ba <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	4798      	blx	r3
      }
      return;
 8006316:	e2d0      	b.n	80068ba <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8006318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800631c:	2b00      	cmp	r3, #0
 800631e:	f000 811f 	beq.w	8006560 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006322:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006326:	4b8b      	ldr	r3, [pc, #556]	; (8006554 <HAL_UART_IRQHandler+0x2b0>)
 8006328:	4013      	ands	r3, r2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d106      	bne.n	800633c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800632e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006332:	4b89      	ldr	r3, [pc, #548]	; (8006558 <HAL_UART_IRQHandler+0x2b4>)
 8006334:	4013      	ands	r3, r2
 8006336:	2b00      	cmp	r3, #0
 8006338:	f000 8112 	beq.w	8006560 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800633c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d011      	beq.n	800636c <HAL_UART_IRQHandler+0xc8>
 8006348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800634c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00b      	beq.n	800636c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2201      	movs	r2, #1
 800635a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006362:	f043 0201 	orr.w	r2, r3, #1
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800636c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006370:	f003 0302 	and.w	r3, r3, #2
 8006374:	2b00      	cmp	r3, #0
 8006376:	d011      	beq.n	800639c <HAL_UART_IRQHandler+0xf8>
 8006378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b00      	cmp	r3, #0
 8006382:	d00b      	beq.n	800639c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	2202      	movs	r2, #2
 800638a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006392:	f043 0204 	orr.w	r2, r3, #4
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800639c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a0:	f003 0304 	and.w	r3, r3, #4
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d011      	beq.n	80063cc <HAL_UART_IRQHandler+0x128>
 80063a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ac:	f003 0301 	and.w	r3, r3, #1
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d00b      	beq.n	80063cc <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	2204      	movs	r2, #4
 80063ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063c2:	f043 0202 	orr.w	r2, r3, #2
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d0:	f003 0308 	and.w	r3, r3, #8
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d017      	beq.n	8006408 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063dc:	f003 0320 	and.w	r3, r3, #32
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d105      	bne.n	80063f0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80063e4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80063e8:	4b5a      	ldr	r3, [pc, #360]	; (8006554 <HAL_UART_IRQHandler+0x2b0>)
 80063ea:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00b      	beq.n	8006408 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2208      	movs	r2, #8
 80063f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063fe:	f043 0208 	orr.w	r2, r3, #8
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800640c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006410:	2b00      	cmp	r3, #0
 8006412:	d012      	beq.n	800643a <HAL_UART_IRQHandler+0x196>
 8006414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006418:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800641c:	2b00      	cmp	r3, #0
 800641e:	d00c      	beq.n	800643a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006430:	f043 0220 	orr.w	r2, r3, #32
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006440:	2b00      	cmp	r3, #0
 8006442:	f000 823c 	beq.w	80068be <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644a:	f003 0320 	and.w	r3, r3, #32
 800644e:	2b00      	cmp	r3, #0
 8006450:	d013      	beq.n	800647a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006456:	f003 0320 	and.w	r3, r3, #32
 800645a:	2b00      	cmp	r3, #0
 800645c:	d105      	bne.n	800646a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800645e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006466:	2b00      	cmp	r3, #0
 8006468:	d007      	beq.n	800647a <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006480:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	689b      	ldr	r3, [r3, #8]
 800648a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800648e:	2b40      	cmp	r3, #64	; 0x40
 8006490:	d005      	beq.n	800649e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006492:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006496:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800649a:	2b00      	cmp	r3, #0
 800649c:	d04f      	beq.n	800653e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 fee9 	bl	8007276 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ae:	2b40      	cmp	r3, #64	; 0x40
 80064b0:	d141      	bne.n	8006536 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	3308      	adds	r3, #8
 80064b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064c0:	e853 3f00 	ldrex	r3, [r3]
 80064c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	3308      	adds	r3, #8
 80064da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064ee:	e841 2300 	strex	r3, r2, [r1]
 80064f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1d9      	bne.n	80064b2 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006502:	2b00      	cmp	r3, #0
 8006504:	d013      	beq.n	800652e <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800650a:	4a14      	ldr	r2, [pc, #80]	; (800655c <HAL_UART_IRQHandler+0x2b8>)
 800650c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006512:	4618      	mov	r0, r3
 8006514:	f7fb f9e3 	bl	80018de <HAL_DMA_Abort_IT>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d017      	beq.n	800654e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006524:	687a      	ldr	r2, [r7, #4]
 8006526:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006528:	4610      	mov	r0, r2
 800652a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800652c:	e00f      	b.n	800654e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f9da 	bl	80068e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006534:	e00b      	b.n	800654e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f9d6 	bl	80068e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800653c:	e007      	b.n	800654e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f9d2 	bl	80068e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800654c:	e1b7      	b.n	80068be <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654e:	bf00      	nop
    return;
 8006550:	e1b5      	b.n	80068be <HAL_UART_IRQHandler+0x61a>
 8006552:	bf00      	nop
 8006554:	10000001 	.word	0x10000001
 8006558:	04000120 	.word	0x04000120
 800655c:	08007343 	.word	0x08007343

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006564:	2b01      	cmp	r3, #1
 8006566:	f040 814a 	bne.w	80067fe <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800656a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800656e:	f003 0310 	and.w	r3, r3, #16
 8006572:	2b00      	cmp	r3, #0
 8006574:	f000 8143 	beq.w	80067fe <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 813c 	beq.w	80067fe <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2210      	movs	r2, #16
 800658c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	689b      	ldr	r3, [r3, #8]
 8006594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006598:	2b40      	cmp	r3, #64	; 0x40
 800659a:	f040 80b5 	bne.w	8006708 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685b      	ldr	r3, [r3, #4]
 80065a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	f000 8187 	beq.w	80068c2 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065ba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065be:	429a      	cmp	r2, r3
 80065c0:	f080 817f 	bcs.w	80068c2 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065ca:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f003 0320 	and.w	r3, r3, #32
 80065da:	2b00      	cmp	r3, #0
 80065dc:	f040 8086 	bne.w	80066ec <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065ec:	e853 3f00 	ldrex	r3, [r3]
 80065f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	461a      	mov	r2, r3
 8006606:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800660a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800660e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006612:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006616:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800661a:	e841 2300 	strex	r3, r2, [r1]
 800661e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006622:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1da      	bne.n	80065e0 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3308      	adds	r3, #8
 8006630:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006634:	e853 3f00 	ldrex	r3, [r3]
 8006638:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800663a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800663c:	f023 0301 	bic.w	r3, r3, #1
 8006640:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	3308      	adds	r3, #8
 800664a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800664e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006652:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006654:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006656:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800665a:	e841 2300 	strex	r3, r2, [r1]
 800665e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006660:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1e1      	bne.n	800662a <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	3308      	adds	r3, #8
 800666c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800666e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006670:	e853 3f00 	ldrex	r3, [r3]
 8006674:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006678:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800667c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	3308      	adds	r3, #8
 8006686:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800668a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800668c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800668e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006690:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006692:	e841 2300 	strex	r3, r2, [r1]
 8006696:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006698:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800669a:	2b00      	cmp	r3, #0
 800669c:	d1e3      	bne.n	8006666 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	2220      	movs	r2, #32
 80066a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b4:	e853 3f00 	ldrex	r3, [r3]
 80066b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066bc:	f023 0310 	bic.w	r3, r3, #16
 80066c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	461a      	mov	r2, r3
 80066ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80066d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066d6:	e841 2300 	strex	r3, r2, [r1]
 80066da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d1e4      	bne.n	80066ac <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066e6:	4618      	mov	r0, r3
 80066e8:	f7fb f89d 	bl	8001826 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066f8:	b29b      	uxth	r3, r3
 80066fa:	1ad3      	subs	r3, r2, r3
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	4619      	mov	r1, r3
 8006700:	6878      	ldr	r0, [r7, #4]
 8006702:	f000 f8fb 	bl	80068fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006706:	e0dc      	b.n	80068c2 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006714:	b29b      	uxth	r3, r3
 8006716:	1ad3      	subs	r3, r2, r3
 8006718:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006722:	b29b      	uxth	r3, r3
 8006724:	2b00      	cmp	r3, #0
 8006726:	f000 80ce 	beq.w	80068c6 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800672a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800672e:	2b00      	cmp	r3, #0
 8006730:	f000 80c9 	beq.w	80068c6 <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800673c:	e853 3f00 	ldrex	r3, [r3]
 8006740:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006744:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006748:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	461a      	mov	r2, r3
 8006752:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006756:	647b      	str	r3, [r7, #68]	; 0x44
 8006758:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800675c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800675e:	e841 2300 	strex	r3, r2, [r1]
 8006762:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006764:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006766:	2b00      	cmp	r3, #0
 8006768:	d1e4      	bne.n	8006734 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	3308      	adds	r3, #8
 8006770:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006774:	e853 3f00 	ldrex	r3, [r3]
 8006778:	623b      	str	r3, [r7, #32]
   return(result);
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006780:	f023 0301 	bic.w	r3, r3, #1
 8006784:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3308      	adds	r3, #8
 800678e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006792:	633a      	str	r2, [r7, #48]	; 0x30
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679a:	e841 2300 	strex	r3, r2, [r1]
 800679e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1e1      	bne.n	800676a <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2220      	movs	r2, #32
 80067aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2200      	movs	r2, #0
 80067b2:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0310 	bic.w	r3, r3, #16
 80067ce:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	461a      	mov	r2, r3
 80067d8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067dc:	61fb      	str	r3, [r7, #28]
 80067de:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e0:	69b9      	ldr	r1, [r7, #24]
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	e841 2300 	strex	r3, r2, [r1]
 80067e8:	617b      	str	r3, [r7, #20]
   return(result);
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e4      	bne.n	80067ba <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067f0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f880 	bl	80068fc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80067fc:	e063      	b.n	80068c6 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80067fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d00e      	beq.n	8006828 <HAL_UART_IRQHandler+0x584>
 800680a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800680e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006812:	2b00      	cmp	r3, #0
 8006814:	d008      	beq.n	8006828 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800681e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006820:	6878      	ldr	r0, [r7, #4]
 8006822:	f000 fdcf 	bl	80073c4 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006826:	e051      	b.n	80068cc <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006830:	2b00      	cmp	r3, #0
 8006832:	d014      	beq.n	800685e <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800683c:	2b00      	cmp	r3, #0
 800683e:	d105      	bne.n	800684c <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006840:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006850:	2b00      	cmp	r3, #0
 8006852:	d03a      	beq.n	80068ca <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	4798      	blx	r3
    }
    return;
 800685c:	e035      	b.n	80068ca <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800685e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006862:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <HAL_UART_IRQHandler+0x5da>
 800686a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800686e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006872:	2b00      	cmp	r3, #0
 8006874:	d003      	beq.n	800687e <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 fd79 	bl	800736e <UART_EndTransmit_IT>
    return;
 800687c:	e026      	b.n	80068cc <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800687e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006882:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006886:	2b00      	cmp	r3, #0
 8006888:	d009      	beq.n	800689e <HAL_UART_IRQHandler+0x5fa>
 800688a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800688e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006892:	2b00      	cmp	r3, #0
 8006894:	d003      	beq.n	800689e <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fda8 	bl	80073ec <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800689c:	e016      	b.n	80068cc <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800689e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d010      	beq.n	80068cc <HAL_UART_IRQHandler+0x628>
 80068aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	da0c      	bge.n	80068cc <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fd90 	bl	80073d8 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068b8:	e008      	b.n	80068cc <HAL_UART_IRQHandler+0x628>
      return;
 80068ba:	bf00      	nop
 80068bc:	e006      	b.n	80068cc <HAL_UART_IRQHandler+0x628>
    return;
 80068be:	bf00      	nop
 80068c0:	e004      	b.n	80068cc <HAL_UART_IRQHandler+0x628>
      return;
 80068c2:	bf00      	nop
 80068c4:	e002      	b.n	80068cc <HAL_UART_IRQHandler+0x628>
      return;
 80068c6:	bf00      	nop
 80068c8:	e000      	b.n	80068cc <HAL_UART_IRQHandler+0x628>
    return;
 80068ca:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80068cc:	37e8      	adds	r7, #232	; 0xe8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop

080068d4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b083      	sub	sp, #12
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068dc:	bf00      	nop
 80068de:	370c      	adds	r7, #12
 80068e0:	46bd      	mov	sp, r7
 80068e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e6:	4770      	bx	lr

080068e8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b083      	sub	sp, #12
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068f0:	bf00      	nop
 80068f2:	370c      	adds	r7, #12
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr

080068fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	460b      	mov	r3, r1
 8006906:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006908:	bf00      	nop
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006918:	b08c      	sub	sp, #48	; 0x30
 800691a:	af00      	add	r7, sp, #0
 800691c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	689a      	ldr	r2, [r3, #8]
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	691b      	ldr	r3, [r3, #16]
 800692c:	431a      	orrs	r2, r3
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	431a      	orrs	r2, r3
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	69db      	ldr	r3, [r3, #28]
 8006938:	4313      	orrs	r3, r2
 800693a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4baa      	ldr	r3, [pc, #680]	; (8006bec <UART_SetConfig+0x2d8>)
 8006944:	4013      	ands	r3, r2
 8006946:	697a      	ldr	r2, [r7, #20]
 8006948:	6812      	ldr	r2, [r2, #0]
 800694a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800694c:	430b      	orrs	r3, r1
 800694e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006950:	697b      	ldr	r3, [r7, #20]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	685b      	ldr	r3, [r3, #4]
 8006956:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	430a      	orrs	r2, r1
 8006964:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800696c:	697b      	ldr	r3, [r7, #20]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	4a9f      	ldr	r2, [pc, #636]	; (8006bf0 <UART_SetConfig+0x2dc>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d004      	beq.n	8006980 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	6a1b      	ldr	r3, [r3, #32]
 800697a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800697c:	4313      	orrs	r3, r2
 800697e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800698a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800698e:	697a      	ldr	r2, [r7, #20]
 8006990:	6812      	ldr	r2, [r2, #0]
 8006992:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006994:	430b      	orrs	r3, r1
 8006996:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699e:	f023 010f 	bic.w	r1, r3, #15
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	4a90      	ldr	r2, [pc, #576]	; (8006bf4 <UART_SetConfig+0x2e0>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d125      	bne.n	8006a04 <UART_SetConfig+0xf0>
 80069b8:	4b8f      	ldr	r3, [pc, #572]	; (8006bf8 <UART_SetConfig+0x2e4>)
 80069ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069be:	f003 0303 	and.w	r3, r3, #3
 80069c2:	2b03      	cmp	r3, #3
 80069c4:	d81a      	bhi.n	80069fc <UART_SetConfig+0xe8>
 80069c6:	a201      	add	r2, pc, #4	; (adr r2, 80069cc <UART_SetConfig+0xb8>)
 80069c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069cc:	080069dd 	.word	0x080069dd
 80069d0:	080069ed 	.word	0x080069ed
 80069d4:	080069e5 	.word	0x080069e5
 80069d8:	080069f5 	.word	0x080069f5
 80069dc:	2301      	movs	r3, #1
 80069de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069e2:	e116      	b.n	8006c12 <UART_SetConfig+0x2fe>
 80069e4:	2302      	movs	r3, #2
 80069e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ea:	e112      	b.n	8006c12 <UART_SetConfig+0x2fe>
 80069ec:	2304      	movs	r3, #4
 80069ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069f2:	e10e      	b.n	8006c12 <UART_SetConfig+0x2fe>
 80069f4:	2308      	movs	r3, #8
 80069f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069fa:	e10a      	b.n	8006c12 <UART_SetConfig+0x2fe>
 80069fc:	2310      	movs	r3, #16
 80069fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a02:	e106      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006a04:	697b      	ldr	r3, [r7, #20]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a7c      	ldr	r2, [pc, #496]	; (8006bfc <UART_SetConfig+0x2e8>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d138      	bne.n	8006a80 <UART_SetConfig+0x16c>
 8006a0e:	4b7a      	ldr	r3, [pc, #488]	; (8006bf8 <UART_SetConfig+0x2e4>)
 8006a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a14:	f003 030c 	and.w	r3, r3, #12
 8006a18:	2b0c      	cmp	r3, #12
 8006a1a:	d82d      	bhi.n	8006a78 <UART_SetConfig+0x164>
 8006a1c:	a201      	add	r2, pc, #4	; (adr r2, 8006a24 <UART_SetConfig+0x110>)
 8006a1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a22:	bf00      	nop
 8006a24:	08006a59 	.word	0x08006a59
 8006a28:	08006a79 	.word	0x08006a79
 8006a2c:	08006a79 	.word	0x08006a79
 8006a30:	08006a79 	.word	0x08006a79
 8006a34:	08006a69 	.word	0x08006a69
 8006a38:	08006a79 	.word	0x08006a79
 8006a3c:	08006a79 	.word	0x08006a79
 8006a40:	08006a79 	.word	0x08006a79
 8006a44:	08006a61 	.word	0x08006a61
 8006a48:	08006a79 	.word	0x08006a79
 8006a4c:	08006a79 	.word	0x08006a79
 8006a50:	08006a79 	.word	0x08006a79
 8006a54:	08006a71 	.word	0x08006a71
 8006a58:	2300      	movs	r3, #0
 8006a5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a5e:	e0d8      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006a60:	2302      	movs	r3, #2
 8006a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a66:	e0d4      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006a68:	2304      	movs	r3, #4
 8006a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a6e:	e0d0      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006a70:	2308      	movs	r3, #8
 8006a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a76:	e0cc      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006a78:	2310      	movs	r3, #16
 8006a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a7e:	e0c8      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4a5e      	ldr	r2, [pc, #376]	; (8006c00 <UART_SetConfig+0x2ec>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d125      	bne.n	8006ad6 <UART_SetConfig+0x1c2>
 8006a8a:	4b5b      	ldr	r3, [pc, #364]	; (8006bf8 <UART_SetConfig+0x2e4>)
 8006a8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a90:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a94:	2b30      	cmp	r3, #48	; 0x30
 8006a96:	d016      	beq.n	8006ac6 <UART_SetConfig+0x1b2>
 8006a98:	2b30      	cmp	r3, #48	; 0x30
 8006a9a:	d818      	bhi.n	8006ace <UART_SetConfig+0x1ba>
 8006a9c:	2b20      	cmp	r3, #32
 8006a9e:	d00a      	beq.n	8006ab6 <UART_SetConfig+0x1a2>
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	d814      	bhi.n	8006ace <UART_SetConfig+0x1ba>
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d002      	beq.n	8006aae <UART_SetConfig+0x19a>
 8006aa8:	2b10      	cmp	r3, #16
 8006aaa:	d008      	beq.n	8006abe <UART_SetConfig+0x1aa>
 8006aac:	e00f      	b.n	8006ace <UART_SetConfig+0x1ba>
 8006aae:	2300      	movs	r3, #0
 8006ab0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ab4:	e0ad      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006ab6:	2302      	movs	r3, #2
 8006ab8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006abc:	e0a9      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006abe:	2304      	movs	r3, #4
 8006ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ac4:	e0a5      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006ac6:	2308      	movs	r3, #8
 8006ac8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006acc:	e0a1      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006ace:	2310      	movs	r3, #16
 8006ad0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ad4:	e09d      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4a4a      	ldr	r2, [pc, #296]	; (8006c04 <UART_SetConfig+0x2f0>)
 8006adc:	4293      	cmp	r3, r2
 8006ade:	d125      	bne.n	8006b2c <UART_SetConfig+0x218>
 8006ae0:	4b45      	ldr	r3, [pc, #276]	; (8006bf8 <UART_SetConfig+0x2e4>)
 8006ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ae6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006aea:	2bc0      	cmp	r3, #192	; 0xc0
 8006aec:	d016      	beq.n	8006b1c <UART_SetConfig+0x208>
 8006aee:	2bc0      	cmp	r3, #192	; 0xc0
 8006af0:	d818      	bhi.n	8006b24 <UART_SetConfig+0x210>
 8006af2:	2b80      	cmp	r3, #128	; 0x80
 8006af4:	d00a      	beq.n	8006b0c <UART_SetConfig+0x1f8>
 8006af6:	2b80      	cmp	r3, #128	; 0x80
 8006af8:	d814      	bhi.n	8006b24 <UART_SetConfig+0x210>
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d002      	beq.n	8006b04 <UART_SetConfig+0x1f0>
 8006afe:	2b40      	cmp	r3, #64	; 0x40
 8006b00:	d008      	beq.n	8006b14 <UART_SetConfig+0x200>
 8006b02:	e00f      	b.n	8006b24 <UART_SetConfig+0x210>
 8006b04:	2300      	movs	r3, #0
 8006b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b0a:	e082      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006b0c:	2302      	movs	r3, #2
 8006b0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b12:	e07e      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006b14:	2304      	movs	r3, #4
 8006b16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b1a:	e07a      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006b1c:	2308      	movs	r3, #8
 8006b1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b22:	e076      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006b24:	2310      	movs	r3, #16
 8006b26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b2a:	e072      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	4a35      	ldr	r2, [pc, #212]	; (8006c08 <UART_SetConfig+0x2f4>)
 8006b32:	4293      	cmp	r3, r2
 8006b34:	d12a      	bne.n	8006b8c <UART_SetConfig+0x278>
 8006b36:	4b30      	ldr	r3, [pc, #192]	; (8006bf8 <UART_SetConfig+0x2e4>)
 8006b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b44:	d01a      	beq.n	8006b7c <UART_SetConfig+0x268>
 8006b46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b4a:	d81b      	bhi.n	8006b84 <UART_SetConfig+0x270>
 8006b4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b50:	d00c      	beq.n	8006b6c <UART_SetConfig+0x258>
 8006b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b56:	d815      	bhi.n	8006b84 <UART_SetConfig+0x270>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d003      	beq.n	8006b64 <UART_SetConfig+0x250>
 8006b5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b60:	d008      	beq.n	8006b74 <UART_SetConfig+0x260>
 8006b62:	e00f      	b.n	8006b84 <UART_SetConfig+0x270>
 8006b64:	2300      	movs	r3, #0
 8006b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b6a:	e052      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006b6c:	2302      	movs	r3, #2
 8006b6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b72:	e04e      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006b74:	2304      	movs	r3, #4
 8006b76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b7a:	e04a      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006b7c:	2308      	movs	r3, #8
 8006b7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b82:	e046      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006b84:	2310      	movs	r3, #16
 8006b86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b8a:	e042      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	4a17      	ldr	r2, [pc, #92]	; (8006bf0 <UART_SetConfig+0x2dc>)
 8006b92:	4293      	cmp	r3, r2
 8006b94:	d13a      	bne.n	8006c0c <UART_SetConfig+0x2f8>
 8006b96:	4b18      	ldr	r3, [pc, #96]	; (8006bf8 <UART_SetConfig+0x2e4>)
 8006b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ba0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ba4:	d01a      	beq.n	8006bdc <UART_SetConfig+0x2c8>
 8006ba6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006baa:	d81b      	bhi.n	8006be4 <UART_SetConfig+0x2d0>
 8006bac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb0:	d00c      	beq.n	8006bcc <UART_SetConfig+0x2b8>
 8006bb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb6:	d815      	bhi.n	8006be4 <UART_SetConfig+0x2d0>
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <UART_SetConfig+0x2b0>
 8006bbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc0:	d008      	beq.n	8006bd4 <UART_SetConfig+0x2c0>
 8006bc2:	e00f      	b.n	8006be4 <UART_SetConfig+0x2d0>
 8006bc4:	2300      	movs	r3, #0
 8006bc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bca:	e022      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006bcc:	2302      	movs	r3, #2
 8006bce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd2:	e01e      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006bd4:	2304      	movs	r3, #4
 8006bd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bda:	e01a      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006bdc:	2308      	movs	r3, #8
 8006bde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be2:	e016      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006be4:	2310      	movs	r3, #16
 8006be6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bea:	e012      	b.n	8006c12 <UART_SetConfig+0x2fe>
 8006bec:	cfff69f3 	.word	0xcfff69f3
 8006bf0:	40008000 	.word	0x40008000
 8006bf4:	40013800 	.word	0x40013800
 8006bf8:	40021000 	.word	0x40021000
 8006bfc:	40004400 	.word	0x40004400
 8006c00:	40004800 	.word	0x40004800
 8006c04:	40004c00 	.word	0x40004c00
 8006c08:	40005000 	.word	0x40005000
 8006c0c:	2310      	movs	r3, #16
 8006c0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	4aae      	ldr	r2, [pc, #696]	; (8006ed0 <UART_SetConfig+0x5bc>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	f040 8097 	bne.w	8006d4c <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c1e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c22:	2b08      	cmp	r3, #8
 8006c24:	d823      	bhi.n	8006c6e <UART_SetConfig+0x35a>
 8006c26:	a201      	add	r2, pc, #4	; (adr r2, 8006c2c <UART_SetConfig+0x318>)
 8006c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c6f 	.word	0x08006c6f
 8006c34:	08006c59 	.word	0x08006c59
 8006c38:	08006c6f 	.word	0x08006c6f
 8006c3c:	08006c5f 	.word	0x08006c5f
 8006c40:	08006c6f 	.word	0x08006c6f
 8006c44:	08006c6f 	.word	0x08006c6f
 8006c48:	08006c6f 	.word	0x08006c6f
 8006c4c:	08006c67 	.word	0x08006c67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c50:	f7fe f818 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8006c54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c56:	e010      	b.n	8006c7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c58:	4b9e      	ldr	r3, [pc, #632]	; (8006ed4 <UART_SetConfig+0x5c0>)
 8006c5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c5c:	e00d      	b.n	8006c7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c5e:	f7fd ff79 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8006c62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c64:	e009      	b.n	8006c7a <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c6c:	e005      	b.n	8006c7a <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006c6e:	2300      	movs	r3, #0
 8006c70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8130 	beq.w	8006ee2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c86:	4a94      	ldr	r2, [pc, #592]	; (8006ed8 <UART_SetConfig+0x5c4>)
 8006c88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	4613      	mov	r3, r2
 8006c9c:	005b      	lsls	r3, r3, #1
 8006c9e:	4413      	add	r3, r2
 8006ca0:	69ba      	ldr	r2, [r7, #24]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d305      	bcc.n	8006cb2 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	685b      	ldr	r3, [r3, #4]
 8006caa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cac:	69ba      	ldr	r2, [r7, #24]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d903      	bls.n	8006cba <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006cb8:	e113      	b.n	8006ee2 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	60bb      	str	r3, [r7, #8]
 8006cc0:	60fa      	str	r2, [r7, #12]
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cc6:	4a84      	ldr	r2, [pc, #528]	; (8006ed8 <UART_SetConfig+0x5c4>)
 8006cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006ccc:	b29b      	uxth	r3, r3
 8006cce:	2200      	movs	r2, #0
 8006cd0:	603b      	str	r3, [r7, #0]
 8006cd2:	607a      	str	r2, [r7, #4]
 8006cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006cdc:	f7f9 fa8e 	bl	80001fc <__aeabi_uldivmod>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4610      	mov	r0, r2
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	f04f 0200 	mov.w	r2, #0
 8006cec:	f04f 0300 	mov.w	r3, #0
 8006cf0:	020b      	lsls	r3, r1, #8
 8006cf2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cf6:	0202      	lsls	r2, r0, #8
 8006cf8:	6979      	ldr	r1, [r7, #20]
 8006cfa:	6849      	ldr	r1, [r1, #4]
 8006cfc:	0849      	lsrs	r1, r1, #1
 8006cfe:	2000      	movs	r0, #0
 8006d00:	460c      	mov	r4, r1
 8006d02:	4605      	mov	r5, r0
 8006d04:	eb12 0804 	adds.w	r8, r2, r4
 8006d08:	eb43 0905 	adc.w	r9, r3, r5
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	685b      	ldr	r3, [r3, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	469a      	mov	sl, r3
 8006d14:	4693      	mov	fp, r2
 8006d16:	4652      	mov	r2, sl
 8006d18:	465b      	mov	r3, fp
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	4649      	mov	r1, r9
 8006d1e:	f7f9 fa6d 	bl	80001fc <__aeabi_uldivmod>
 8006d22:	4602      	mov	r2, r0
 8006d24:	460b      	mov	r3, r1
 8006d26:	4613      	mov	r3, r2
 8006d28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d2a:	6a3b      	ldr	r3, [r7, #32]
 8006d2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d30:	d308      	bcc.n	8006d44 <UART_SetConfig+0x430>
 8006d32:	6a3b      	ldr	r3, [r7, #32]
 8006d34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d38:	d204      	bcs.n	8006d44 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6a3a      	ldr	r2, [r7, #32]
 8006d40:	60da      	str	r2, [r3, #12]
 8006d42:	e0ce      	b.n	8006ee2 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006d44:	2301      	movs	r3, #1
 8006d46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d4a:	e0ca      	b.n	8006ee2 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d54:	d166      	bne.n	8006e24 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006d56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d5a:	2b08      	cmp	r3, #8
 8006d5c:	d827      	bhi.n	8006dae <UART_SetConfig+0x49a>
 8006d5e:	a201      	add	r2, pc, #4	; (adr r2, 8006d64 <UART_SetConfig+0x450>)
 8006d60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d64:	08006d89 	.word	0x08006d89
 8006d68:	08006d91 	.word	0x08006d91
 8006d6c:	08006d99 	.word	0x08006d99
 8006d70:	08006daf 	.word	0x08006daf
 8006d74:	08006d9f 	.word	0x08006d9f
 8006d78:	08006daf 	.word	0x08006daf
 8006d7c:	08006daf 	.word	0x08006daf
 8006d80:	08006daf 	.word	0x08006daf
 8006d84:	08006da7 	.word	0x08006da7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d88:	f7fd ff7c 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8006d8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d8e:	e014      	b.n	8006dba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d90:	f7fd ff8e 	bl	8004cb0 <HAL_RCC_GetPCLK2Freq>
 8006d94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d96:	e010      	b.n	8006dba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d98:	4b4e      	ldr	r3, [pc, #312]	; (8006ed4 <UART_SetConfig+0x5c0>)
 8006d9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006d9c:	e00d      	b.n	8006dba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006d9e:	f7fd fed9 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8006da2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006da4:	e009      	b.n	8006dba <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006da6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006dac:	e005      	b.n	8006dba <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006db2:	2301      	movs	r3, #1
 8006db4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006db8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	f000 8090 	beq.w	8006ee2 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc6:	4a44      	ldr	r2, [pc, #272]	; (8006ed8 <UART_SetConfig+0x5c4>)
 8006dc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dcc:	461a      	mov	r2, r3
 8006dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd0:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dd4:	005a      	lsls	r2, r3, #1
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	085b      	lsrs	r3, r3, #1
 8006ddc:	441a      	add	r2, r3
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006de6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	2b0f      	cmp	r3, #15
 8006dec:	d916      	bls.n	8006e1c <UART_SetConfig+0x508>
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df4:	d212      	bcs.n	8006e1c <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006df6:	6a3b      	ldr	r3, [r7, #32]
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	f023 030f 	bic.w	r3, r3, #15
 8006dfe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	085b      	lsrs	r3, r3, #1
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f003 0307 	and.w	r3, r3, #7
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	8bfb      	ldrh	r3, [r7, #30]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e12:	697b      	ldr	r3, [r7, #20]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	8bfa      	ldrh	r2, [r7, #30]
 8006e18:	60da      	str	r2, [r3, #12]
 8006e1a:	e062      	b.n	8006ee2 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e22:	e05e      	b.n	8006ee2 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e28:	2b08      	cmp	r3, #8
 8006e2a:	d828      	bhi.n	8006e7e <UART_SetConfig+0x56a>
 8006e2c:	a201      	add	r2, pc, #4	; (adr r2, 8006e34 <UART_SetConfig+0x520>)
 8006e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e32:	bf00      	nop
 8006e34:	08006e59 	.word	0x08006e59
 8006e38:	08006e61 	.word	0x08006e61
 8006e3c:	08006e69 	.word	0x08006e69
 8006e40:	08006e7f 	.word	0x08006e7f
 8006e44:	08006e6f 	.word	0x08006e6f
 8006e48:	08006e7f 	.word	0x08006e7f
 8006e4c:	08006e7f 	.word	0x08006e7f
 8006e50:	08006e7f 	.word	0x08006e7f
 8006e54:	08006e77 	.word	0x08006e77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e58:	f7fd ff14 	bl	8004c84 <HAL_RCC_GetPCLK1Freq>
 8006e5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e5e:	e014      	b.n	8006e8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e60:	f7fd ff26 	bl	8004cb0 <HAL_RCC_GetPCLK2Freq>
 8006e64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e66:	e010      	b.n	8006e8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e68:	4b1a      	ldr	r3, [pc, #104]	; (8006ed4 <UART_SetConfig+0x5c0>)
 8006e6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e6c:	e00d      	b.n	8006e8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e6e:	f7fd fe71 	bl	8004b54 <HAL_RCC_GetSysClockFreq>
 8006e72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e74:	e009      	b.n	8006e8a <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e7c:	e005      	b.n	8006e8a <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006e7e:	2300      	movs	r3, #0
 8006e80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e82:	2301      	movs	r3, #1
 8006e84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e88:	bf00      	nop
    }

    if (pclk != 0U)
 8006e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d028      	beq.n	8006ee2 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e94:	4a10      	ldr	r2, [pc, #64]	; (8006ed8 <UART_SetConfig+0x5c4>)
 8006e96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	685b      	ldr	r3, [r3, #4]
 8006ea6:	085b      	lsrs	r3, r3, #1
 8006ea8:	441a      	add	r2, r3
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb2:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb4:	6a3b      	ldr	r3, [r7, #32]
 8006eb6:	2b0f      	cmp	r3, #15
 8006eb8:	d910      	bls.n	8006edc <UART_SetConfig+0x5c8>
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec0:	d20c      	bcs.n	8006edc <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ec2:	6a3b      	ldr	r3, [r7, #32]
 8006ec4:	b29a      	uxth	r2, r3
 8006ec6:	697b      	ldr	r3, [r7, #20]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	60da      	str	r2, [r3, #12]
 8006ecc:	e009      	b.n	8006ee2 <UART_SetConfig+0x5ce>
 8006ece:	bf00      	nop
 8006ed0:	40008000 	.word	0x40008000
 8006ed4:	00f42400 	.word	0x00f42400
 8006ed8:	080096bc 	.word	0x080096bc
      }
      else
      {
        ret = HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ee2:	697b      	ldr	r3, [r7, #20]
 8006ee4:	2201      	movs	r2, #1
 8006ee6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	2201      	movs	r2, #1
 8006eee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ef2:	697b      	ldr	r3, [r7, #20]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006ef8:	697b      	ldr	r3, [r7, #20]
 8006efa:	2200      	movs	r2, #0
 8006efc:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006efe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	3730      	adds	r7, #48	; 0x30
 8006f06:	46bd      	mov	sp, r7
 8006f08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b083      	sub	sp, #12
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d00a      	beq.n	8006f36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	430a      	orrs	r2, r1
 8006f34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3a:	f003 0302 	and.w	r3, r3, #2
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00a      	beq.n	8006f58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f5c:	f003 0304 	and.w	r3, r3, #4
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d00a      	beq.n	8006f7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	430a      	orrs	r2, r1
 8006f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f7e:	f003 0308 	and.w	r3, r3, #8
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00a      	beq.n	8006f9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	685b      	ldr	r3, [r3, #4]
 8006f8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d00a      	beq.n	8006fbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc2:	f003 0320 	and.w	r3, r3, #32
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d00a      	beq.n	8006fe0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689b      	ldr	r3, [r3, #8]
 8006fd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	430a      	orrs	r2, r1
 8006fde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d01a      	beq.n	8007022 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	685b      	ldr	r3, [r3, #4]
 8006ff2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	430a      	orrs	r2, r1
 8007000:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007006:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800700a:	d10a      	bne.n	8007022 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	605a      	str	r2, [r3, #4]
  }
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr

08007050 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af02      	add	r7, sp, #8
 8007056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007060:	f7f9 fab6 	bl	80005d0 <HAL_GetTick>
 8007064:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b08      	cmp	r3, #8
 8007072:	d10e      	bne.n	8007092 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007074:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007078:	9300      	str	r3, [sp, #0]
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	2200      	movs	r2, #0
 800707e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007082:	6878      	ldr	r0, [r7, #4]
 8007084:	f000 f82f 	bl	80070e6 <UART_WaitOnFlagUntilTimeout>
 8007088:	4603      	mov	r3, r0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d001      	beq.n	8007092 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800708e:	2303      	movs	r3, #3
 8007090:	e025      	b.n	80070de <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f003 0304 	and.w	r3, r3, #4
 800709c:	2b04      	cmp	r3, #4
 800709e:	d10e      	bne.n	80070be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070a4:	9300      	str	r3, [sp, #0]
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f000 f819 	bl	80070e6 <UART_WaitOnFlagUntilTimeout>
 80070b4:	4603      	mov	r3, r0
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d001      	beq.n	80070be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070ba:	2303      	movs	r3, #3
 80070bc:	e00f      	b.n	80070de <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2220      	movs	r2, #32
 80070c2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	2220      	movs	r2, #32
 80070ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}

080070e6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070e6:	b580      	push	{r7, lr}
 80070e8:	b09c      	sub	sp, #112	; 0x70
 80070ea:	af00      	add	r7, sp, #0
 80070ec:	60f8      	str	r0, [r7, #12]
 80070ee:	60b9      	str	r1, [r7, #8]
 80070f0:	603b      	str	r3, [r7, #0]
 80070f2:	4613      	mov	r3, r2
 80070f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070f6:	e0a9      	b.n	800724c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80070fe:	f000 80a5 	beq.w	800724c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007102:	f7f9 fa65 	bl	80005d0 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800710e:	429a      	cmp	r2, r3
 8007110:	d302      	bcc.n	8007118 <UART_WaitOnFlagUntilTimeout+0x32>
 8007112:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007114:	2b00      	cmp	r3, #0
 8007116:	d140      	bne.n	800719a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800711e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007120:	e853 3f00 	ldrex	r3, [r3]
 8007124:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007126:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007128:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800712c:	667b      	str	r3, [r7, #100]	; 0x64
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	461a      	mov	r2, r3
 8007134:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007136:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007138:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800713c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800713e:	e841 2300 	strex	r3, r2, [r1]
 8007142:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007144:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1e6      	bne.n	8007118 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3308      	adds	r3, #8
 8007150:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	f023 0301 	bic.w	r3, r3, #1
 8007160:	663b      	str	r3, [r7, #96]	; 0x60
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	3308      	adds	r3, #8
 8007168:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800716a:	64ba      	str	r2, [r7, #72]	; 0x48
 800716c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007170:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007172:	e841 2300 	strex	r3, r2, [r1]
 8007176:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1e5      	bne.n	800714a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2220      	movs	r2, #32
 8007182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2220      	movs	r2, #32
 800718a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8007196:	2303      	movs	r3, #3
 8007198:	e069      	b.n	800726e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0304 	and.w	r3, r3, #4
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d051      	beq.n	800724c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071b6:	d149      	bne.n	800724c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071c0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	e853 3f00 	ldrex	r3, [r3]
 80071ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	461a      	mov	r2, r3
 80071de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e0:	637b      	str	r3, [r7, #52]	; 0x34
 80071e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071e8:	e841 2300 	strex	r3, r2, [r1]
 80071ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d1e6      	bne.n	80071c2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	3308      	adds	r3, #8
 80071fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	e853 3f00 	ldrex	r3, [r3]
 8007202:	613b      	str	r3, [r7, #16]
   return(result);
 8007204:	693b      	ldr	r3, [r7, #16]
 8007206:	f023 0301 	bic.w	r3, r3, #1
 800720a:	66bb      	str	r3, [r7, #104]	; 0x68
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3308      	adds	r3, #8
 8007212:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007214:	623a      	str	r2, [r7, #32]
 8007216:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007218:	69f9      	ldr	r1, [r7, #28]
 800721a:	6a3a      	ldr	r2, [r7, #32]
 800721c:	e841 2300 	strex	r3, r2, [r1]
 8007220:	61bb      	str	r3, [r7, #24]
   return(result);
 8007222:	69bb      	ldr	r3, [r7, #24]
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1e5      	bne.n	80071f4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	2220      	movs	r2, #32
 800722c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2220      	movs	r2, #32
 8007234:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2220      	movs	r2, #32
 800723c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007248:	2303      	movs	r3, #3
 800724a:	e010      	b.n	800726e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	69da      	ldr	r2, [r3, #28]
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	4013      	ands	r3, r2
 8007256:	68ba      	ldr	r2, [r7, #8]
 8007258:	429a      	cmp	r2, r3
 800725a:	bf0c      	ite	eq
 800725c:	2301      	moveq	r3, #1
 800725e:	2300      	movne	r3, #0
 8007260:	b2db      	uxtb	r3, r3
 8007262:	461a      	mov	r2, r3
 8007264:	79fb      	ldrb	r3, [r7, #7]
 8007266:	429a      	cmp	r2, r3
 8007268:	f43f af46 	beq.w	80070f8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800726c:	2300      	movs	r3, #0
}
 800726e:	4618      	mov	r0, r3
 8007270:	3770      	adds	r7, #112	; 0x70
 8007272:	46bd      	mov	sp, r7
 8007274:	bd80      	pop	{r7, pc}

08007276 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007276:	b480      	push	{r7}
 8007278:	b095      	sub	sp, #84	; 0x54
 800727a:	af00      	add	r7, sp, #0
 800727c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007286:	e853 3f00 	ldrex	r3, [r3]
 800728a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800728c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800728e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800729c:	643b      	str	r3, [r7, #64]	; 0x40
 800729e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072a4:	e841 2300 	strex	r3, r2, [r1]
 80072a8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d1e6      	bne.n	800727e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	3308      	adds	r3, #8
 80072b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	6a3b      	ldr	r3, [r7, #32]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	61fb      	str	r3, [r7, #28]
   return(result);
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072c6:	f023 0301 	bic.w	r3, r3, #1
 80072ca:	64bb      	str	r3, [r7, #72]	; 0x48
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	3308      	adds	r3, #8
 80072d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072d6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072dc:	e841 2300 	strex	r3, r2, [r1]
 80072e0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d1e3      	bne.n	80072b0 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072ec:	2b01      	cmp	r3, #1
 80072ee:	d118      	bne.n	8007322 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	e853 3f00 	ldrex	r3, [r3]
 80072fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	f023 0310 	bic.w	r3, r3, #16
 8007304:	647b      	str	r3, [r7, #68]	; 0x44
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	461a      	mov	r2, r3
 800730c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800730e:	61bb      	str	r3, [r7, #24]
 8007310:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007312:	6979      	ldr	r1, [r7, #20]
 8007314:	69ba      	ldr	r2, [r7, #24]
 8007316:	e841 2300 	strex	r3, r2, [r1]
 800731a:	613b      	str	r3, [r7, #16]
   return(result);
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	2b00      	cmp	r3, #0
 8007320:	d1e6      	bne.n	80072f0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2220      	movs	r2, #32
 8007326:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2200      	movs	r2, #0
 8007334:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007336:	bf00      	nop
 8007338:	3754      	adds	r7, #84	; 0x54
 800733a:	46bd      	mov	sp, r7
 800733c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007340:	4770      	bx	lr

08007342 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800734e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2200      	movs	r2, #0
 8007354:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2200      	movs	r2, #0
 800735c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007360:	68f8      	ldr	r0, [r7, #12]
 8007362:	f7ff fac1 	bl	80068e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007366:	bf00      	nop
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800736e:	b580      	push	{r7, lr}
 8007370:	b088      	sub	sp, #32
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	60bb      	str	r3, [r7, #8]
   return(result);
 8007384:	68bb      	ldr	r3, [r7, #8]
 8007386:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800738a:	61fb      	str	r3, [r7, #28]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	461a      	mov	r2, r3
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	61bb      	str	r3, [r7, #24]
 8007396:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	6979      	ldr	r1, [r7, #20]
 800739a:	69ba      	ldr	r2, [r7, #24]
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	613b      	str	r3, [r7, #16]
   return(result);
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e6      	bne.n	8007376 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2220      	movs	r2, #32
 80073ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073b6:	6878      	ldr	r0, [r7, #4]
 80073b8:	f7ff fa8c 	bl	80068d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073bc:	bf00      	nop
 80073be:	3720      	adds	r7, #32
 80073c0:	46bd      	mov	sp, r7
 80073c2:	bd80      	pop	{r7, pc}

080073c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073cc:	bf00      	nop
 80073ce:	370c      	adds	r7, #12
 80073d0:	46bd      	mov	sp, r7
 80073d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d6:	4770      	bx	lr

080073d8 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80073d8:	b480      	push	{r7}
 80073da:	b083      	sub	sp, #12
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80073e0:	bf00      	nop
 80073e2:	370c      	adds	r7, #12
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80073f4:	bf00      	nop
 80073f6:	370c      	adds	r7, #12
 80073f8:	46bd      	mov	sp, r7
 80073fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073fe:	4770      	bx	lr

08007400 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007400:	b480      	push	{r7}
 8007402:	b085      	sub	sp, #20
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800740e:	2b01      	cmp	r3, #1
 8007410:	d101      	bne.n	8007416 <HAL_UARTEx_DisableFifoMode+0x16>
 8007412:	2302      	movs	r3, #2
 8007414:	e027      	b.n	8007466 <HAL_UARTEx_DisableFifoMode+0x66>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2201      	movs	r2, #1
 800741a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2224      	movs	r2, #36	; 0x24
 8007422:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f022 0201 	bic.w	r2, r2, #1
 800743c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007444:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	68fa      	ldr	r2, [r7, #12]
 8007452:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2220      	movs	r2, #32
 8007458:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3714      	adds	r7, #20
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr

08007472 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007472:	b580      	push	{r7, lr}
 8007474:	b084      	sub	sp, #16
 8007476:	af00      	add	r7, sp, #0
 8007478:	6078      	str	r0, [r7, #4]
 800747a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007482:	2b01      	cmp	r3, #1
 8007484:	d101      	bne.n	800748a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007486:	2302      	movs	r3, #2
 8007488:	e02d      	b.n	80074e6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2201      	movs	r2, #1
 800748e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2224      	movs	r2, #36	; 0x24
 8007496:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	f022 0201 	bic.w	r2, r2, #1
 80074b0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	689b      	ldr	r3, [r3, #8]
 80074b8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	430a      	orrs	r2, r1
 80074c4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f850 	bl	800756c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	68fa      	ldr	r2, [r7, #12]
 80074d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2220      	movs	r2, #32
 80074d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b084      	sub	sp, #16
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	6078      	str	r0, [r7, #4]
 80074f6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007502:	2302      	movs	r3, #2
 8007504:	e02d      	b.n	8007562 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2224      	movs	r2, #36	; 0x24
 8007512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f022 0201 	bic.w	r2, r2, #1
 800752c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	689b      	ldr	r3, [r3, #8]
 8007534:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	683a      	ldr	r2, [r7, #0]
 800753e:	430a      	orrs	r2, r1
 8007540:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f812 	bl	800756c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	68fa      	ldr	r2, [r7, #12]
 800754e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2220      	movs	r2, #32
 8007554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007560:	2300      	movs	r3, #0
}
 8007562:	4618      	mov	r0, r3
 8007564:	3710      	adds	r7, #16
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
	...

0800756c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007578:	2b00      	cmp	r3, #0
 800757a:	d108      	bne.n	800758e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2201      	movs	r2, #1
 8007580:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800758c:	e031      	b.n	80075f2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800758e:	2308      	movs	r3, #8
 8007590:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007592:	2308      	movs	r3, #8
 8007594:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	0e5b      	lsrs	r3, r3, #25
 800759e:	b2db      	uxtb	r3, r3
 80075a0:	f003 0307 	and.w	r3, r3, #7
 80075a4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	689b      	ldr	r3, [r3, #8]
 80075ac:	0f5b      	lsrs	r3, r3, #29
 80075ae:	b2db      	uxtb	r3, r3
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075b6:	7bbb      	ldrb	r3, [r7, #14]
 80075b8:	7b3a      	ldrb	r2, [r7, #12]
 80075ba:	4911      	ldr	r1, [pc, #68]	; (8007600 <UARTEx_SetNbDataToProcess+0x94>)
 80075bc:	5c8a      	ldrb	r2, [r1, r2]
 80075be:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075c2:	7b3a      	ldrb	r2, [r7, #12]
 80075c4:	490f      	ldr	r1, [pc, #60]	; (8007604 <UARTEx_SetNbDataToProcess+0x98>)
 80075c6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075c8:	fb93 f3f2 	sdiv	r3, r3, r2
 80075cc:	b29a      	uxth	r2, r3
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075d4:	7bfb      	ldrb	r3, [r7, #15]
 80075d6:	7b7a      	ldrb	r2, [r7, #13]
 80075d8:	4909      	ldr	r1, [pc, #36]	; (8007600 <UARTEx_SetNbDataToProcess+0x94>)
 80075da:	5c8a      	ldrb	r2, [r1, r2]
 80075dc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075e0:	7b7a      	ldrb	r2, [r7, #13]
 80075e2:	4908      	ldr	r1, [pc, #32]	; (8007604 <UARTEx_SetNbDataToProcess+0x98>)
 80075e4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075e6:	fb93 f3f2 	sdiv	r3, r3, r2
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80075f2:	bf00      	nop
 80075f4:	3714      	adds	r7, #20
 80075f6:	46bd      	mov	sp, r7
 80075f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fc:	4770      	bx	lr
 80075fe:	bf00      	nop
 8007600:	080096d4 	.word	0x080096d4
 8007604:	080096dc 	.word	0x080096dc

08007608 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	4603      	mov	r3, r0
 8007610:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8007612:	2300      	movs	r3, #0
 8007614:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8007616:	2110      	movs	r1, #16
 8007618:	20d4      	movs	r0, #212	; 0xd4
 800761a:	f000 feef 	bl	80083fc <SENSOR_IO_Read>
 800761e:	4603      	mov	r3, r0
 8007620:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8007622:	88fb      	ldrh	r3, [r7, #6]
 8007624:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8007626:	7bbb      	ldrb	r3, [r7, #14]
 8007628:	f003 0303 	and.w	r3, r3, #3
 800762c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 800762e:	7bba      	ldrb	r2, [r7, #14]
 8007630:	7bfb      	ldrb	r3, [r7, #15]
 8007632:	4313      	orrs	r3, r2
 8007634:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8007636:	7bbb      	ldrb	r3, [r7, #14]
 8007638:	461a      	mov	r2, r3
 800763a:	2110      	movs	r1, #16
 800763c:	20d4      	movs	r0, #212	; 0xd4
 800763e:	f000 fec3 	bl	80083c8 <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8007642:	2112      	movs	r1, #18
 8007644:	20d4      	movs	r0, #212	; 0xd4
 8007646:	f000 fed9 	bl	80083fc <SENSOR_IO_Read>
 800764a:	4603      	mov	r3, r0
 800764c:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 800764e:	88fb      	ldrh	r3, [r7, #6]
 8007650:	0a1b      	lsrs	r3, r3, #8
 8007652:	b29b      	uxth	r3, r3
 8007654:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8007656:	7bbb      	ldrb	r3, [r7, #14]
 8007658:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 800765c:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 800765e:	7bba      	ldrb	r2, [r7, #14]
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	4313      	orrs	r3, r2
 8007664:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8007666:	7bbb      	ldrb	r3, [r7, #14]
 8007668:	461a      	mov	r2, r3
 800766a:	2112      	movs	r1, #18
 800766c:	20d4      	movs	r0, #212	; 0xd4
 800766e:	f000 feab 	bl	80083c8 <SENSOR_IO_Write>
}
 8007672:	bf00      	nop
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b082      	sub	sp, #8
 800767e:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8007680:	2300      	movs	r3, #0
 8007682:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8007684:	2110      	movs	r1, #16
 8007686:	20d4      	movs	r0, #212	; 0xd4
 8007688:	f000 feb8 	bl	80083fc <SENSOR_IO_Read>
 800768c:	4603      	mov	r3, r0
 800768e:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8007690:	79fb      	ldrb	r3, [r7, #7]
 8007692:	f003 030f 	and.w	r3, r3, #15
 8007696:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8007698:	79fb      	ldrb	r3, [r7, #7]
 800769a:	461a      	mov	r2, r3
 800769c:	2110      	movs	r1, #16
 800769e:	20d4      	movs	r0, #212	; 0xd4
 80076a0:	f000 fe92 	bl	80083c8 <SENSOR_IO_Write>
}
 80076a4:	bf00      	nop
 80076a6:	3708      	adds	r7, #8
 80076a8:	46bd      	mov	sp, r7
 80076aa:	bd80      	pop	{r7, pc}

080076ac <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 80076b0:	f000 fe80 	bl	80083b4 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 80076b4:	210f      	movs	r1, #15
 80076b6:	20d4      	movs	r0, #212	; 0xd4
 80076b8:	f000 fea0 	bl	80083fc <SENSOR_IO_Read>
 80076bc:	4603      	mov	r3, r0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	bd80      	pop	{r7, pc}

080076c2 <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 80076c2:	b580      	push	{r7, lr}
 80076c4:	b084      	sub	sp, #16
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	4603      	mov	r3, r0
 80076ca:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 80076cc:	2300      	movs	r3, #0
 80076ce:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 80076d0:	2115      	movs	r1, #21
 80076d2:	20d4      	movs	r0, #212	; 0xd4
 80076d4:	f000 fe92 	bl	80083fc <SENSOR_IO_Read>
 80076d8:	4603      	mov	r3, r0
 80076da:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
 80076de:	f023 0310 	bic.w	r3, r3, #16
 80076e2:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 80076e4:	88fb      	ldrh	r3, [r7, #6]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d003      	beq.n	80076f2 <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 80076ea:	7bfb      	ldrb	r3, [r7, #15]
 80076ec:	f043 0310 	orr.w	r3, r3, #16
 80076f0:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 80076f2:	7bfb      	ldrb	r3, [r7, #15]
 80076f4:	461a      	mov	r2, r3
 80076f6:	2115      	movs	r1, #21
 80076f8:	20d4      	movs	r0, #212	; 0xd4
 80076fa:	f000 fe65 	bl	80083c8 <SENSOR_IO_Write>
}
 80076fe:	bf00      	nop
 8007700:	3710      	adds	r7, #16
 8007702:	46bd      	mov	sp, r7
 8007704:	bd80      	pop	{r7, pc}
	...

08007708 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b088      	sub	sp, #32
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8007710:	2300      	movs	r3, #0
 8007712:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8007714:	2300      	movs	r3, #0
 8007716:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8007718:	f04f 0300 	mov.w	r3, #0
 800771c:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800771e:	2110      	movs	r1, #16
 8007720:	20d4      	movs	r0, #212	; 0xd4
 8007722:	f000 fe6b 	bl	80083fc <SENSOR_IO_Read>
 8007726:	4603      	mov	r3, r0
 8007728:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 800772a:	f107 0208 	add.w	r2, r7, #8
 800772e:	2306      	movs	r3, #6
 8007730:	2128      	movs	r1, #40	; 0x28
 8007732:	20d4      	movs	r0, #212	; 0xd4
 8007734:	f000 fe80 	bl	8008438 <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8007738:	2300      	movs	r3, #0
 800773a:	77fb      	strb	r3, [r7, #31]
 800773c:	e01c      	b.n	8007778 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 800773e:	7ffb      	ldrb	r3, [r7, #31]
 8007740:	005b      	lsls	r3, r3, #1
 8007742:	3301      	adds	r3, #1
 8007744:	3320      	adds	r3, #32
 8007746:	443b      	add	r3, r7
 8007748:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800774c:	b29b      	uxth	r3, r3
 800774e:	021b      	lsls	r3, r3, #8
 8007750:	b29a      	uxth	r2, r3
 8007752:	7ffb      	ldrb	r3, [r7, #31]
 8007754:	005b      	lsls	r3, r3, #1
 8007756:	3320      	adds	r3, #32
 8007758:	443b      	add	r3, r7
 800775a:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800775e:	b29b      	uxth	r3, r3
 8007760:	4413      	add	r3, r2
 8007762:	b29a      	uxth	r2, r3
 8007764:	7ffb      	ldrb	r3, [r7, #31]
 8007766:	b212      	sxth	r2, r2
 8007768:	005b      	lsls	r3, r3, #1
 800776a:	3320      	adds	r3, #32
 800776c:	443b      	add	r3, r7
 800776e:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8007772:	7ffb      	ldrb	r3, [r7, #31]
 8007774:	3301      	adds	r3, #1
 8007776:	77fb      	strb	r3, [r7, #31]
 8007778:	7ffb      	ldrb	r3, [r7, #31]
 800777a:	2b02      	cmp	r3, #2
 800777c:	d9df      	bls.n	800773e <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 800777e:	7dfb      	ldrb	r3, [r7, #23]
 8007780:	f003 030c 	and.w	r3, r3, #12
 8007784:	2b0c      	cmp	r3, #12
 8007786:	d829      	bhi.n	80077dc <LSM6DSL_AccReadXYZ+0xd4>
 8007788:	a201      	add	r2, pc, #4	; (adr r2, 8007790 <LSM6DSL_AccReadXYZ+0x88>)
 800778a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800778e:	bf00      	nop
 8007790:	080077c5 	.word	0x080077c5
 8007794:	080077dd 	.word	0x080077dd
 8007798:	080077dd 	.word	0x080077dd
 800779c:	080077dd 	.word	0x080077dd
 80077a0:	080077d7 	.word	0x080077d7
 80077a4:	080077dd 	.word	0x080077dd
 80077a8:	080077dd 	.word	0x080077dd
 80077ac:	080077dd 	.word	0x080077dd
 80077b0:	080077cb 	.word	0x080077cb
 80077b4:	080077dd 	.word	0x080077dd
 80077b8:	080077dd 	.word	0x080077dd
 80077bc:	080077dd 	.word	0x080077dd
 80077c0:	080077d1 	.word	0x080077d1
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 80077c4:	4b18      	ldr	r3, [pc, #96]	; (8007828 <LSM6DSL_AccReadXYZ+0x120>)
 80077c6:	61bb      	str	r3, [r7, #24]
    break;
 80077c8:	e008      	b.n	80077dc <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 80077ca:	4b18      	ldr	r3, [pc, #96]	; (800782c <LSM6DSL_AccReadXYZ+0x124>)
 80077cc:	61bb      	str	r3, [r7, #24]
    break;
 80077ce:	e005      	b.n	80077dc <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 80077d0:	4b17      	ldr	r3, [pc, #92]	; (8007830 <LSM6DSL_AccReadXYZ+0x128>)
 80077d2:	61bb      	str	r3, [r7, #24]
    break;
 80077d4:	e002      	b.n	80077dc <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 80077d6:	4b17      	ldr	r3, [pc, #92]	; (8007834 <LSM6DSL_AccReadXYZ+0x12c>)
 80077d8:	61bb      	str	r3, [r7, #24]
    break;    
 80077da:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 80077dc:	2300      	movs	r3, #0
 80077de:	77fb      	strb	r3, [r7, #31]
 80077e0:	e01a      	b.n	8007818 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 80077e2:	7ffb      	ldrb	r3, [r7, #31]
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	3320      	adds	r3, #32
 80077e8:	443b      	add	r3, r7
 80077ea:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80077f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80077fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077fe:	7ffb      	ldrb	r3, [r7, #31]
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	687a      	ldr	r2, [r7, #4]
 8007804:	4413      	add	r3, r2
 8007806:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800780a:	ee17 2a90 	vmov	r2, s15
 800780e:	b212      	sxth	r2, r2
 8007810:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8007812:	7ffb      	ldrb	r3, [r7, #31]
 8007814:	3301      	adds	r3, #1
 8007816:	77fb      	strb	r3, [r7, #31]
 8007818:	7ffb      	ldrb	r3, [r7, #31]
 800781a:	2b02      	cmp	r3, #2
 800781c:	d9e1      	bls.n	80077e2 <LSM6DSL_AccReadXYZ+0xda>
  }
}
 800781e:	bf00      	nop
 8007820:	bf00      	nop
 8007822:	3720      	adds	r7, #32
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}
 8007828:	3d79db23 	.word	0x3d79db23
 800782c:	3df9db23 	.word	0x3df9db23
 8007830:	3e79db23 	.word	0x3e79db23
 8007834:	3ef9db23 	.word	0x3ef9db23

08007838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b082      	sub	sp, #8
 800783c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800783e:	f7f8 fe5f 	bl	8000500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007842:	f000 f8c5 	bl	80079d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007846:	f000 fb11 	bl	8007e6c <MX_GPIO_Init>
  MX_DMA_Init();
 800784a:	f000 fadd 	bl	8007e08 <MX_DMA_Init>
  MX_DAC1_Init();
 800784e:	f000 f911 	bl	8007a74 <MX_DAC1_Init>
  MX_TIM2_Init();
 8007852:	f000 fa3f 	bl	8007cd4 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8007856:	f000 f941 	bl	8007adc <MX_DFSDM1_Init>
  MX_OCTOSPI1_Init();
 800785a:	f000 f9e5 	bl	8007c28 <MX_OCTOSPI1_Init>
  MX_I2C2_Init();
 800785e:	f000 f9a3 	bl	8007ba8 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8007862:	f000 fa85 	bl	8007d70 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8007866:	f000 fe05 	bl	8008474 <BSP_ACCELERO_Init>
  BSP_QSPI_Init();
 800786a:	f000 fe59 	bl	8008520 <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 800786e:	4846      	ldr	r0, [pc, #280]	; (8007988 <main+0x150>)
 8007870:	f7fe f864 	bl	800593c <HAL_TIM_Base_Start_IT>

  if(recorder) {
 8007874:	4b45      	ldr	r3, [pc, #276]	; (800798c <main+0x154>)
 8007876:	781b      	ldrb	r3, [r3, #0]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d017      	beq.n	80078ac <main+0x74>
	  for(int i = 1; i < 34; i++) {
 800787c:	2301      	movs	r3, #1
 800787e:	607b      	str	r3, [r7, #4]
 8007880:	e011      	b.n	80078a6 <main+0x6e>
		  if(BSP_QSPI_Erase_Block((uint32_t) addr) != QSPI_OK)
 8007882:	4b43      	ldr	r3, [pc, #268]	; (8007990 <main+0x158>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 ffa0 	bl	80087cc <BSP_QSPI_Erase_Block>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d001      	beq.n	8007896 <main+0x5e>
		  	Error_Handler();
 8007892:	f000 fc97 	bl	80081c4 <Error_Handler>
		  addr = 0x010000*i;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	041b      	lsls	r3, r3, #16
 800789a:	461a      	mov	r2, r3
 800789c:	4b3c      	ldr	r3, [pc, #240]	; (8007990 <main+0x158>)
 800789e:	601a      	str	r2, [r3, #0]
	  for(int i = 1; i < 34; i++) {
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3301      	adds	r3, #1
 80078a4:	607b      	str	r3, [r7, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2b21      	cmp	r3, #33	; 0x21
 80078aa:	ddea      	ble.n	8007882 <main+0x4a>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(player && directionGame && !counterInitial) {
 80078ac:	4b39      	ldr	r3, [pc, #228]	; (8007994 <main+0x15c>)
 80078ae:	781b      	ldrb	r3, [r3, #0]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d00a      	beq.n	80078ca <main+0x92>
 80078b4:	4b38      	ldr	r3, [pc, #224]	; (8007998 <main+0x160>)
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d006      	beq.n	80078ca <main+0x92>
 80078bc:	4b37      	ldr	r3, [pc, #220]	; (800799c <main+0x164>)
 80078be:	f993 3000 	ldrsb.w	r3, [r3]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d101      	bne.n	80078ca <main+0x92>
		  get_ACC_XY_InitialPosition();
 80078c6:	f000 fbd3 	bl	8008070 <get_ACC_XY_InitialPosition>
	  }

	  if(player && directionGame) {
 80078ca:	4b32      	ldr	r3, [pc, #200]	; (8007994 <main+0x15c>)
 80078cc:	781b      	ldrb	r3, [r3, #0]
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d0ec      	beq.n	80078ac <main+0x74>
 80078d2:	4b31      	ldr	r3, [pc, #196]	; (8007998 <main+0x160>)
 80078d4:	781b      	ldrb	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d0e8      	beq.n	80078ac <main+0x74>
		  BSP_ACCELERO_AccGetXYZ(accelerometer);
 80078da:	4831      	ldr	r0, [pc, #196]	; (80079a0 <main+0x168>)
 80078dc:	f000 fe08 	bl	80084f0 <BSP_ACCELERO_AccGetXYZ>
		  if(accelerometer[0]- acc_x1  > 100 || accelerometer[1] -  acc_y1 > 100) {
 80078e0:	4b2f      	ldr	r3, [pc, #188]	; (80079a0 <main+0x168>)
 80078e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078e6:	461a      	mov	r2, r3
 80078e8:	4b2e      	ldr	r3, [pc, #184]	; (80079a4 <main+0x16c>)
 80078ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80078ee:	1ad3      	subs	r3, r2, r3
 80078f0:	2b64      	cmp	r3, #100	; 0x64
 80078f2:	dc09      	bgt.n	8007908 <main+0xd0>
 80078f4:	4b2a      	ldr	r3, [pc, #168]	; (80079a0 <main+0x168>)
 80078f6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80078fa:	461a      	mov	r2, r3
 80078fc:	4b2a      	ldr	r3, [pc, #168]	; (80079a8 <main+0x170>)
 80078fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007902:	1ad3      	subs	r3, r2, r3
 8007904:	2b64      	cmp	r3, #100	; 0x64
 8007906:	ddd1      	ble.n	80078ac <main+0x74>

		  	  acc_x2 = accelerometer[0];
 8007908:	4b25      	ldr	r3, [pc, #148]	; (80079a0 <main+0x168>)
 800790a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800790e:	4b27      	ldr	r3, [pc, #156]	; (80079ac <main+0x174>)
 8007910:	801a      	strh	r2, [r3, #0]
		  	  acc_y2 = accelerometer[1];
 8007912:	4b23      	ldr	r3, [pc, #140]	; (80079a0 <main+0x168>)
 8007914:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8007918:	4b25      	ldr	r3, [pc, #148]	; (80079b0 <main+0x178>)
 800791a:	801a      	strh	r2, [r3, #0]
		  	  arrayX[arrayIndex] = (float32_t) acc_x2;
 800791c:	4b23      	ldr	r3, [pc, #140]	; (80079ac <main+0x174>)
 800791e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007922:	4b24      	ldr	r3, [pc, #144]	; (80079b4 <main+0x17c>)
 8007924:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007928:	ee07 2a90 	vmov	s15, r2
 800792c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8007930:	4a21      	ldr	r2, [pc, #132]	; (80079b8 <main+0x180>)
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	edc3 7a00 	vstr	s15, [r3]
		  	  arrayY[arrayIndex] = (float32_t) acc_y2;
 800793a:	4b1d      	ldr	r3, [pc, #116]	; (80079b0 <main+0x178>)
 800793c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8007940:	4b1c      	ldr	r3, [pc, #112]	; (80079b4 <main+0x17c>)
 8007942:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007946:	ee07 2a90 	vmov	s15, r2
 800794a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800794e:	4a1b      	ldr	r2, [pc, #108]	; (80079bc <main+0x184>)
 8007950:	009b      	lsls	r3, r3, #2
 8007952:	4413      	add	r3, r2
 8007954:	edc3 7a00 	vstr	s15, [r3]
		  	  arrayIndex++;
 8007958:	4b16      	ldr	r3, [pc, #88]	; (80079b4 <main+0x17c>)
 800795a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800795e:	b29b      	uxth	r3, r3
 8007960:	3301      	adds	r3, #1
 8007962:	b29b      	uxth	r3, r3
 8007964:	b21a      	sxth	r2, r3
 8007966:	4b13      	ldr	r3, [pc, #76]	; (80079b4 <main+0x17c>)
 8007968:	801a      	strh	r2, [r3, #0]
		  	  arm_max_f32(&arrayX, (uint32_t) 2000,  &maxX2,  &maxIndexX);
 800796a:	4b15      	ldr	r3, [pc, #84]	; (80079c0 <main+0x188>)
 800796c:	4a15      	ldr	r2, [pc, #84]	; (80079c4 <main+0x18c>)
 800796e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007972:	4811      	ldr	r0, [pc, #68]	; (80079b8 <main+0x180>)
 8007974:	f001 fdfe 	bl	8009574 <arm_max_f32>
		  	  arm_max_f32(&arrayY, (uint32_t) 2000,  &maxY2,  &maxIndexY);
 8007978:	4b13      	ldr	r3, [pc, #76]	; (80079c8 <main+0x190>)
 800797a:	4a14      	ldr	r2, [pc, #80]	; (80079cc <main+0x194>)
 800797c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8007980:	480e      	ldr	r0, [pc, #56]	; (80079bc <main+0x184>)
 8007982:	f001 fdf7 	bl	8009574 <arm_max_f32>
	  if(player && directionGame && !counterInitial) {
 8007986:	e791      	b.n	80078ac <main+0x74>
 8007988:	200002bc 	.word	0x200002bc
 800798c:	2004e59c 	.word	0x2004e59c
 8007990:	2004e5a4 	.word	0x2004e5a4
 8007994:	20000064 	.word	0x20000064
 8007998:	2000006d 	.word	0x2000006d
 800799c:	20052450 	.word	0x20052450
 80079a0:	2004e5ac 	.word	0x2004e5ac
 80079a4:	2004e5b2 	.word	0x2004e5b2
 80079a8:	2004e5b6 	.word	0x2004e5b6
 80079ac:	2004e5b4 	.word	0x2004e5b4
 80079b0:	2004e5b8 	.word	0x2004e5b8
 80079b4:	20052444 	.word	0x20052444
 80079b8:	2004e5c4 	.word	0x2004e5c4
 80079bc:	20050504 	.word	0x20050504
 80079c0:	20052448 	.word	0x20052448
 80079c4:	2004e5bc 	.word	0x2004e5bc
 80079c8:	2005244c 	.word	0x2005244c
 80079cc:	2004e5c0 	.word	0x2004e5c0

080079d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b096      	sub	sp, #88	; 0x58
 80079d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80079d6:	f107 0314 	add.w	r3, r7, #20
 80079da:	2244      	movs	r2, #68	; 0x44
 80079dc:	2100      	movs	r1, #0
 80079de:	4618      	mov	r0, r3
 80079e0:	f001 fe58 	bl	8009694 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80079e4:	463b      	mov	r3, r7
 80079e6:	2200      	movs	r2, #0
 80079e8:	601a      	str	r2, [r3, #0]
 80079ea:	605a      	str	r2, [r3, #4]
 80079ec:	609a      	str	r2, [r3, #8]
 80079ee:	60da      	str	r2, [r3, #12]
 80079f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80079f2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80079f6:	f7fc fab5 	bl	8003f64 <HAL_PWREx_ControlVoltageScaling>
 80079fa:	4603      	mov	r3, r0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d001      	beq.n	8007a04 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8007a00:	f000 fbe0 	bl	80081c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8007a04:	2310      	movs	r3, #16
 8007a06:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007a10:	2360      	movs	r3, #96	; 0x60
 8007a12:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007a14:	2302      	movs	r3, #2
 8007a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8007a20:	2328      	movs	r3, #40	; 0x28
 8007a22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007a24:	2302      	movs	r3, #2
 8007a26:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8007a28:	2302      	movs	r3, #2
 8007a2a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007a2c:	2302      	movs	r3, #2
 8007a2e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a30:	f107 0314 	add.w	r3, r7, #20
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fc fb39 	bl	80040ac <HAL_RCC_OscConfig>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8007a40:	f000 fbc0 	bl	80081c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a44:	230f      	movs	r3, #15
 8007a46:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a48:	2303      	movs	r3, #3
 8007a4a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007a50:	2300      	movs	r3, #0
 8007a52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007a54:	2300      	movs	r3, #0
 8007a56:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8007a58:	463b      	mov	r3, r7
 8007a5a:	2103      	movs	r1, #3
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fc ff3f 	bl	80048e0 <HAL_RCC_ClockConfig>
 8007a62:	4603      	mov	r3, r0
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d001      	beq.n	8007a6c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8007a68:	f000 fbac 	bl	80081c4 <Error_Handler>
  }
}
 8007a6c:	bf00      	nop
 8007a6e:	3758      	adds	r7, #88	; 0x58
 8007a70:	46bd      	mov	sp, r7
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b08a      	sub	sp, #40	; 0x28
 8007a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8007a7a:	463b      	mov	r3, r7
 8007a7c:	2228      	movs	r2, #40	; 0x28
 8007a7e:	2100      	movs	r1, #0
 8007a80:	4618      	mov	r0, r3
 8007a82:	f001 fe07 	bl	8009694 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8007a86:	4b13      	ldr	r3, [pc, #76]	; (8007ad4 <MX_DAC1_Init+0x60>)
 8007a88:	4a13      	ldr	r2, [pc, #76]	; (8007ad8 <MX_DAC1_Init+0x64>)
 8007a8a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8007a8c:	4811      	ldr	r0, [pc, #68]	; (8007ad4 <MX_DAC1_Init+0x60>)
 8007a8e:	f7f8 fee0 	bl	8000852 <HAL_DAC_Init>
 8007a92:	4603      	mov	r3, r0
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d001      	beq.n	8007a9c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8007a98:	f000 fb94 	bl	80081c4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8007aa0:	230a      	movs	r3, #10
 8007aa2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007aa4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007aa8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007ab6:	463b      	mov	r3, r7
 8007ab8:	2200      	movs	r2, #0
 8007aba:	4619      	mov	r1, r3
 8007abc:	4805      	ldr	r0, [pc, #20]	; (8007ad4 <MX_DAC1_Init+0x60>)
 8007abe:	f7f9 f811 	bl	8000ae4 <HAL_DAC_ConfigChannel>
 8007ac2:	4603      	mov	r3, r0
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d001      	beq.n	8007acc <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8007ac8:	f000 fb7c 	bl	80081c4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8007acc:	bf00      	nop
 8007ace:	3728      	adds	r7, #40	; 0x28
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}
 8007ad4:	200000b8 	.word	0x200000b8
 8007ad8:	40007400 	.word	0x40007400

08007adc <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8007ae0:	4b2c      	ldr	r3, [pc, #176]	; (8007b94 <MX_DFSDM1_Init+0xb8>)
 8007ae2:	4a2d      	ldr	r2, [pc, #180]	; (8007b98 <MX_DFSDM1_Init+0xbc>)
 8007ae4:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8007ae6:	4b2b      	ldr	r3, [pc, #172]	; (8007b94 <MX_DFSDM1_Init+0xb8>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8007aec:	4b29      	ldr	r3, [pc, #164]	; (8007b94 <MX_DFSDM1_Init+0xb8>)
 8007aee:	2201      	movs	r2, #1
 8007af0:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8007af2:	4b28      	ldr	r3, [pc, #160]	; (8007b94 <MX_DFSDM1_Init+0xb8>)
 8007af4:	2201      	movs	r2, #1
 8007af6:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8007af8:	4b26      	ldr	r3, [pc, #152]	; (8007b94 <MX_DFSDM1_Init+0xb8>)
 8007afa:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8007afe:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 118;
 8007b00:	4b24      	ldr	r3, [pc, #144]	; (8007b94 <MX_DFSDM1_Init+0xb8>)
 8007b02:	2276      	movs	r2, #118	; 0x76
 8007b04:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8007b06:	4b23      	ldr	r3, [pc, #140]	; (8007b94 <MX_DFSDM1_Init+0xb8>)
 8007b08:	2201      	movs	r2, #1
 8007b0a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8007b0c:	4821      	ldr	r0, [pc, #132]	; (8007b94 <MX_DFSDM1_Init+0xb8>)
 8007b0e:	f7f9 fa73 	bl	8000ff8 <HAL_DFSDM_FilterInit>
 8007b12:	4603      	mov	r3, r0
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d001      	beq.n	8007b1c <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8007b18:	f000 fb54 	bl	80081c4 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8007b1c:	4b1f      	ldr	r3, [pc, #124]	; (8007b9c <MX_DFSDM1_Init+0xc0>)
 8007b1e:	4a20      	ldr	r2, [pc, #128]	; (8007ba0 <MX_DFSDM1_Init+0xc4>)
 8007b20:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8007b22:	4b1e      	ldr	r3, [pc, #120]	; (8007b9c <MX_DFSDM1_Init+0xc0>)
 8007b24:	2201      	movs	r2, #1
 8007b26:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8007b28:	4b1c      	ldr	r3, [pc, #112]	; (8007b9c <MX_DFSDM1_Init+0xc0>)
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 8007b2e:	4b1b      	ldr	r3, [pc, #108]	; (8007b9c <MX_DFSDM1_Init+0xc0>)
 8007b30:	2222      	movs	r2, #34	; 0x22
 8007b32:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8007b34:	4b19      	ldr	r3, [pc, #100]	; (8007b9c <MX_DFSDM1_Init+0xc0>)
 8007b36:	2200      	movs	r2, #0
 8007b38:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8007b3a:	4b18      	ldr	r3, [pc, #96]	; (8007b9c <MX_DFSDM1_Init+0xc0>)
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8007b40:	4b16      	ldr	r3, [pc, #88]	; (8007b9c <MX_DFSDM1_Init+0xc0>)
 8007b42:	2200      	movs	r2, #0
 8007b44:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8007b46:	4b15      	ldr	r3, [pc, #84]	; (8007b9c <MX_DFSDM1_Init+0xc0>)
 8007b48:	2200      	movs	r2, #0
 8007b4a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8007b4c:	4b13      	ldr	r3, [pc, #76]	; (8007b9c <MX_DFSDM1_Init+0xc0>)
 8007b4e:	2204      	movs	r2, #4
 8007b50:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8007b52:	4b12      	ldr	r3, [pc, #72]	; (8007b9c <MX_DFSDM1_Init+0xc0>)
 8007b54:	2200      	movs	r2, #0
 8007b56:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8007b58:	4b10      	ldr	r3, [pc, #64]	; (8007b9c <MX_DFSDM1_Init+0xc0>)
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8007b5e:	4b0f      	ldr	r3, [pc, #60]	; (8007b9c <MX_DFSDM1_Init+0xc0>)
 8007b60:	2200      	movs	r2, #0
 8007b62:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8007b64:	4b0d      	ldr	r3, [pc, #52]	; (8007b9c <MX_DFSDM1_Init+0xc0>)
 8007b66:	2200      	movs	r2, #0
 8007b68:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8007b6a:	480c      	ldr	r0, [pc, #48]	; (8007b9c <MX_DFSDM1_Init+0xc0>)
 8007b6c:	f7f9 f984 	bl	8000e78 <HAL_DFSDM_ChannelInit>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8007b76:	f000 fb25 	bl	80081c4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8007b7a:	2201      	movs	r2, #1
 8007b7c:	4909      	ldr	r1, [pc, #36]	; (8007ba4 <MX_DFSDM1_Init+0xc8>)
 8007b7e:	4805      	ldr	r0, [pc, #20]	; (8007b94 <MX_DFSDM1_Init+0xb8>)
 8007b80:	f7f9 fb14 	bl	80011ac <HAL_DFSDM_FilterConfigRegChannel>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d001      	beq.n	8007b8e <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8007b8a:	f000 fb1b 	bl	80081c4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8007b8e:	bf00      	nop
 8007b90:	bd80      	pop	{r7, pc}
 8007b92:	bf00      	nop
 8007b94:	2000012c 	.word	0x2000012c
 8007b98:	40016100 	.word	0x40016100
 8007b9c:	20000180 	.word	0x20000180
 8007ba0:	40016040 	.word	0x40016040
 8007ba4:	00020004 	.word	0x00020004

08007ba8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8007bac:	4b1b      	ldr	r3, [pc, #108]	; (8007c1c <MX_I2C2_Init+0x74>)
 8007bae:	4a1c      	ldr	r2, [pc, #112]	; (8007c20 <MX_I2C2_Init+0x78>)
 8007bb0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8007bb2:	4b1a      	ldr	r3, [pc, #104]	; (8007c1c <MX_I2C2_Init+0x74>)
 8007bb4:	4a1b      	ldr	r2, [pc, #108]	; (8007c24 <MX_I2C2_Init+0x7c>)
 8007bb6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8007bb8:	4b18      	ldr	r3, [pc, #96]	; (8007c1c <MX_I2C2_Init+0x74>)
 8007bba:	2200      	movs	r2, #0
 8007bbc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007bbe:	4b17      	ldr	r3, [pc, #92]	; (8007c1c <MX_I2C2_Init+0x74>)
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007bc4:	4b15      	ldr	r3, [pc, #84]	; (8007c1c <MX_I2C2_Init+0x74>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8007bca:	4b14      	ldr	r3, [pc, #80]	; (8007c1c <MX_I2C2_Init+0x74>)
 8007bcc:	2200      	movs	r2, #0
 8007bce:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8007bd0:	4b12      	ldr	r3, [pc, #72]	; (8007c1c <MX_I2C2_Init+0x74>)
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007bd6:	4b11      	ldr	r3, [pc, #68]	; (8007c1c <MX_I2C2_Init+0x74>)
 8007bd8:	2200      	movs	r2, #0
 8007bda:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007bdc:	4b0f      	ldr	r3, [pc, #60]	; (8007c1c <MX_I2C2_Init+0x74>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8007be2:	480e      	ldr	r0, [pc, #56]	; (8007c1c <MX_I2C2_Init+0x74>)
 8007be4:	f7fa faf8 	bl	80021d8 <HAL_I2C_Init>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d001      	beq.n	8007bf2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8007bee:	f000 fae9 	bl	80081c4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007bf2:	2100      	movs	r1, #0
 8007bf4:	4809      	ldr	r0, [pc, #36]	; (8007c1c <MX_I2C2_Init+0x74>)
 8007bf6:	f7fb f881 	bl	8002cfc <HAL_I2CEx_ConfigAnalogFilter>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d001      	beq.n	8007c04 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8007c00:	f000 fae0 	bl	80081c4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8007c04:	2100      	movs	r1, #0
 8007c06:	4805      	ldr	r0, [pc, #20]	; (8007c1c <MX_I2C2_Init+0x74>)
 8007c08:	f7fb f8c3 	bl	8002d92 <HAL_I2CEx_ConfigDigitalFilter>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8007c12:	f000 fad7 	bl	80081c4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8007c16:	bf00      	nop
 8007c18:	bd80      	pop	{r7, pc}
 8007c1a:	bf00      	nop
 8007c1c:	20000218 	.word	0x20000218
 8007c20:	40005800 	.word	0x40005800
 8007c24:	10909cec 	.word	0x10909cec

08007c28 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b086      	sub	sp, #24
 8007c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8007c2e:	1d3b      	adds	r3, r7, #4
 8007c30:	2200      	movs	r2, #0
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	605a      	str	r2, [r3, #4]
 8007c36:	609a      	str	r2, [r3, #8]
 8007c38:	60da      	str	r2, [r3, #12]
 8007c3a:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8007c3c:	4b23      	ldr	r3, [pc, #140]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007c3e:	4a24      	ldr	r2, [pc, #144]	; (8007cd0 <MX_OCTOSPI1_Init+0xa8>)
 8007c40:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8007c42:	4b22      	ldr	r3, [pc, #136]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007c44:	2201      	movs	r2, #1
 8007c46:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8007c48:	4b20      	ldr	r3, [pc, #128]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8007c4e:	4b1f      	ldr	r3, [pc, #124]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007c50:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007c54:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8007c56:	4b1d      	ldr	r3, [pc, #116]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007c58:	2220      	movs	r2, #32
 8007c5a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8007c5c:	4b1b      	ldr	r3, [pc, #108]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007c5e:	2201      	movs	r2, #1
 8007c60:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8007c62:	4b1a      	ldr	r3, [pc, #104]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8007c68:	4b18      	ldr	r3, [pc, #96]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8007c6e:	4b17      	ldr	r3, [pc, #92]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007c70:	2201      	movs	r2, #1
 8007c72:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8007c74:	4b15      	ldr	r3, [pc, #84]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8007c7a:	4b14      	ldr	r3, [pc, #80]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8007c80:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007c82:	2200      	movs	r2, #0
 8007c84:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8007c86:	4b11      	ldr	r3, [pc, #68]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007c88:	2208      	movs	r2, #8
 8007c8a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8007c8c:	480f      	ldr	r0, [pc, #60]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007c8e:	f7fb f8cd 	bl	8002e2c <HAL_OSPI_Init>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8007c98:	f000 fa94 	bl	80081c4 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8007ca4:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8007ca8:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007caa:	1d3b      	adds	r3, r7, #4
 8007cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cb0:	4619      	mov	r1, r3
 8007cb2:	4806      	ldr	r0, [pc, #24]	; (8007ccc <MX_OCTOSPI1_Init+0xa4>)
 8007cb4:	f7fb fbb8 	bl	8003428 <HAL_OSPIM_Config>
 8007cb8:	4603      	mov	r3, r0
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	d001      	beq.n	8007cc2 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8007cbe:	f000 fa81 	bl	80081c4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8007cc2:	bf00      	nop
 8007cc4:	3718      	adds	r7, #24
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	2000026c 	.word	0x2000026c
 8007cd0:	a0001000 	.word	0xa0001000

08007cd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b088      	sub	sp, #32
 8007cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007cda:	f107 0310 	add.w	r3, r7, #16
 8007cde:	2200      	movs	r2, #0
 8007ce0:	601a      	str	r2, [r3, #0]
 8007ce2:	605a      	str	r2, [r3, #4]
 8007ce4:	609a      	str	r2, [r3, #8]
 8007ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007ce8:	1d3b      	adds	r3, r7, #4
 8007cea:	2200      	movs	r2, #0
 8007cec:	601a      	str	r2, [r3, #0]
 8007cee:	605a      	str	r2, [r3, #4]
 8007cf0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007cf2:	4b1e      	ldr	r3, [pc, #120]	; (8007d6c <MX_TIM2_Init+0x98>)
 8007cf4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007cf8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007cfa:	4b1c      	ldr	r3, [pc, #112]	; (8007d6c <MX_TIM2_Init+0x98>)
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007d00:	4b1a      	ldr	r3, [pc, #104]	; (8007d6c <MX_TIM2_Init+0x98>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8007d06:	4b19      	ldr	r3, [pc, #100]	; (8007d6c <MX_TIM2_Init+0x98>)
 8007d08:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8007d0c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d0e:	4b17      	ldr	r3, [pc, #92]	; (8007d6c <MX_TIM2_Init+0x98>)
 8007d10:	2200      	movs	r2, #0
 8007d12:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007d14:	4b15      	ldr	r3, [pc, #84]	; (8007d6c <MX_TIM2_Init+0x98>)
 8007d16:	2200      	movs	r2, #0
 8007d18:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007d1a:	4814      	ldr	r0, [pc, #80]	; (8007d6c <MX_TIM2_Init+0x98>)
 8007d1c:	f7fd fdb6 	bl	800588c <HAL_TIM_Base_Init>
 8007d20:	4603      	mov	r3, r0
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d001      	beq.n	8007d2a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8007d26:	f000 fa4d 	bl	80081c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007d2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007d2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007d30:	f107 0310 	add.w	r3, r7, #16
 8007d34:	4619      	mov	r1, r3
 8007d36:	480d      	ldr	r0, [pc, #52]	; (8007d6c <MX_TIM2_Init+0x98>)
 8007d38:	f7fd ff8f 	bl	8005c5a <HAL_TIM_ConfigClockSource>
 8007d3c:	4603      	mov	r3, r0
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d001      	beq.n	8007d46 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8007d42:	f000 fa3f 	bl	80081c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007d46:	2320      	movs	r3, #32
 8007d48:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007d4e:	1d3b      	adds	r3, r7, #4
 8007d50:	4619      	mov	r1, r3
 8007d52:	4806      	ldr	r0, [pc, #24]	; (8007d6c <MX_TIM2_Init+0x98>)
 8007d54:	f7fe f9b0 	bl	80060b8 <HAL_TIMEx_MasterConfigSynchronization>
 8007d58:	4603      	mov	r3, r0
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d001      	beq.n	8007d62 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007d5e:	f000 fa31 	bl	80081c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007d62:	bf00      	nop
 8007d64:	3720      	adds	r7, #32
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
 8007d6a:	bf00      	nop
 8007d6c:	200002bc 	.word	0x200002bc

08007d70 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007d74:	4b22      	ldr	r3, [pc, #136]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007d76:	4a23      	ldr	r2, [pc, #140]	; (8007e04 <MX_USART1_UART_Init+0x94>)
 8007d78:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007d7a:	4b21      	ldr	r3, [pc, #132]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007d80:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007d82:	4b1f      	ldr	r3, [pc, #124]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007d88:	4b1d      	ldr	r3, [pc, #116]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007d8e:	4b1c      	ldr	r3, [pc, #112]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007d94:	4b1a      	ldr	r3, [pc, #104]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007d96:	220c      	movs	r2, #12
 8007d98:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007d9a:	4b19      	ldr	r3, [pc, #100]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007da0:	4b17      	ldr	r3, [pc, #92]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007da2:	2200      	movs	r2, #0
 8007da4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007da6:	4b16      	ldr	r3, [pc, #88]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007da8:	2200      	movs	r2, #0
 8007daa:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007dac:	4b14      	ldr	r3, [pc, #80]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007dae:	2200      	movs	r2, #0
 8007db0:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007db2:	4b13      	ldr	r3, [pc, #76]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007db4:	2200      	movs	r2, #0
 8007db6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007db8:	4811      	ldr	r0, [pc, #68]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007dba:	f7fe fa23 	bl	8006204 <HAL_UART_Init>
 8007dbe:	4603      	mov	r3, r0
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d001      	beq.n	8007dc8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007dc4:	f000 f9fe 	bl	80081c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007dc8:	2100      	movs	r1, #0
 8007dca:	480d      	ldr	r0, [pc, #52]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007dcc:	f7ff fb51 	bl	8007472 <HAL_UARTEx_SetTxFifoThreshold>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d001      	beq.n	8007dda <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007dd6:	f000 f9f5 	bl	80081c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007dda:	2100      	movs	r1, #0
 8007ddc:	4808      	ldr	r0, [pc, #32]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007dde:	f7ff fb86 	bl	80074ee <HAL_UARTEx_SetRxFifoThreshold>
 8007de2:	4603      	mov	r3, r0
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d001      	beq.n	8007dec <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007de8:	f000 f9ec 	bl	80081c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007dec:	4804      	ldr	r0, [pc, #16]	; (8007e00 <MX_USART1_UART_Init+0x90>)
 8007dee:	f7ff fb07 	bl	8007400 <HAL_UARTEx_DisableFifoMode>
 8007df2:	4603      	mov	r3, r0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d001      	beq.n	8007dfc <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007df8:	f000 f9e4 	bl	80081c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007dfc:	bf00      	nop
 8007dfe:	bd80      	pop	{r7, pc}
 8007e00:	20000308 	.word	0x20000308
 8007e04:	40013800 	.word	0x40013800

08007e08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b082      	sub	sp, #8
 8007e0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007e0e:	4b16      	ldr	r3, [pc, #88]	; (8007e68 <MX_DMA_Init+0x60>)
 8007e10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e12:	4a15      	ldr	r2, [pc, #84]	; (8007e68 <MX_DMA_Init+0x60>)
 8007e14:	f043 0304 	orr.w	r3, r3, #4
 8007e18:	6493      	str	r3, [r2, #72]	; 0x48
 8007e1a:	4b13      	ldr	r3, [pc, #76]	; (8007e68 <MX_DMA_Init+0x60>)
 8007e1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e1e:	f003 0304 	and.w	r3, r3, #4
 8007e22:	607b      	str	r3, [r7, #4]
 8007e24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007e26:	4b10      	ldr	r3, [pc, #64]	; (8007e68 <MX_DMA_Init+0x60>)
 8007e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e2a:	4a0f      	ldr	r2, [pc, #60]	; (8007e68 <MX_DMA_Init+0x60>)
 8007e2c:	f043 0301 	orr.w	r3, r3, #1
 8007e30:	6493      	str	r3, [r2, #72]	; 0x48
 8007e32:	4b0d      	ldr	r3, [pc, #52]	; (8007e68 <MX_DMA_Init+0x60>)
 8007e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e36:	f003 0301 	and.w	r3, r3, #1
 8007e3a:	603b      	str	r3, [r7, #0]
 8007e3c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007e3e:	2200      	movs	r2, #0
 8007e40:	2100      	movs	r1, #0
 8007e42:	200b      	movs	r0, #11
 8007e44:	f7f8 fccf 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007e48:	200b      	movs	r0, #11
 8007e4a:	f7f8 fce8 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007e4e:	2200      	movs	r2, #0
 8007e50:	2100      	movs	r1, #0
 8007e52:	200c      	movs	r0, #12
 8007e54:	f7f8 fcc7 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007e58:	200c      	movs	r0, #12
 8007e5a:	f7f8 fce0 	bl	800081e <HAL_NVIC_EnableIRQ>

}
 8007e5e:	bf00      	nop
 8007e60:	3708      	adds	r7, #8
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	40021000 	.word	0x40021000

08007e6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b08a      	sub	sp, #40	; 0x28
 8007e70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e72:	f107 0314 	add.w	r3, r7, #20
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	605a      	str	r2, [r3, #4]
 8007e7c:	609a      	str	r2, [r3, #8]
 8007e7e:	60da      	str	r2, [r3, #12]
 8007e80:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007e82:	4b39      	ldr	r3, [pc, #228]	; (8007f68 <MX_GPIO_Init+0xfc>)
 8007e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e86:	4a38      	ldr	r2, [pc, #224]	; (8007f68 <MX_GPIO_Init+0xfc>)
 8007e88:	f043 0310 	orr.w	r3, r3, #16
 8007e8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e8e:	4b36      	ldr	r3, [pc, #216]	; (8007f68 <MX_GPIO_Init+0xfc>)
 8007e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e92:	f003 0310 	and.w	r3, r3, #16
 8007e96:	613b      	str	r3, [r7, #16]
 8007e98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007e9a:	4b33      	ldr	r3, [pc, #204]	; (8007f68 <MX_GPIO_Init+0xfc>)
 8007e9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9e:	4a32      	ldr	r2, [pc, #200]	; (8007f68 <MX_GPIO_Init+0xfc>)
 8007ea0:	f043 0304 	orr.w	r3, r3, #4
 8007ea4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ea6:	4b30      	ldr	r3, [pc, #192]	; (8007f68 <MX_GPIO_Init+0xfc>)
 8007ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eaa:	f003 0304 	and.w	r3, r3, #4
 8007eae:	60fb      	str	r3, [r7, #12]
 8007eb0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eb2:	4b2d      	ldr	r3, [pc, #180]	; (8007f68 <MX_GPIO_Init+0xfc>)
 8007eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eb6:	4a2c      	ldr	r2, [pc, #176]	; (8007f68 <MX_GPIO_Init+0xfc>)
 8007eb8:	f043 0301 	orr.w	r3, r3, #1
 8007ebc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ebe:	4b2a      	ldr	r3, [pc, #168]	; (8007f68 <MX_GPIO_Init+0xfc>)
 8007ec0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	60bb      	str	r3, [r7, #8]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007eca:	4b27      	ldr	r3, [pc, #156]	; (8007f68 <MX_GPIO_Init+0xfc>)
 8007ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ece:	4a26      	ldr	r2, [pc, #152]	; (8007f68 <MX_GPIO_Init+0xfc>)
 8007ed0:	f043 0302 	orr.w	r3, r3, #2
 8007ed4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ed6:	4b24      	ldr	r3, [pc, #144]	; (8007f68 <MX_GPIO_Init+0xfc>)
 8007ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eda:	f003 0302 	and.w	r3, r3, #2
 8007ede:	607b      	str	r3, [r7, #4]
 8007ee0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	2108      	movs	r1, #8
 8007ee6:	4821      	ldr	r0, [pc, #132]	; (8007f6c <MX_GPIO_Init+0x100>)
 8007ee8:	f7fa f92c 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);
 8007eec:	2200      	movs	r2, #0
 8007eee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007ef2:	481f      	ldr	r0, [pc, #124]	; (8007f70 <MX_GPIO_Init+0x104>)
 8007ef4:	f7fa f926 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : redLED_Pin */
  GPIO_InitStruct.Pin = redLED_Pin;
 8007ef8:	2308      	movs	r3, #8
 8007efa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007efc:	2301      	movs	r3, #1
 8007efe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f00:	2300      	movs	r3, #0
 8007f02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f04:	2300      	movs	r3, #0
 8007f06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(redLED_GPIO_Port, &GPIO_InitStruct);
 8007f08:	f107 0314 	add.w	r3, r7, #20
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	4817      	ldr	r0, [pc, #92]	; (8007f6c <MX_GPIO_Init+0x100>)
 8007f10:	f7f9 fe94 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : pushButton_Pin */
  GPIO_InitStruct.Pin = pushButton_Pin;
 8007f14:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007f18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007f1a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007f1e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f20:	2300      	movs	r3, #0
 8007f22:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pushButton_GPIO_Port, &GPIO_InitStruct);
 8007f24:	f107 0314 	add.w	r3, r7, #20
 8007f28:	4619      	mov	r1, r3
 8007f2a:	4812      	ldr	r0, [pc, #72]	; (8007f74 <MX_GPIO_Init+0x108>)
 8007f2c:	f7f9 fe86 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : greenLED_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin;
 8007f30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007f34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007f36:	2301      	movs	r3, #1
 8007f38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(greenLED_GPIO_Port, &GPIO_InitStruct);
 8007f42:	f107 0314 	add.w	r3, r7, #20
 8007f46:	4619      	mov	r1, r3
 8007f48:	4809      	ldr	r0, [pc, #36]	; (8007f70 <MX_GPIO_Init+0x104>)
 8007f4a:	f7f9 fe77 	bl	8001c3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007f4e:	2200      	movs	r2, #0
 8007f50:	2100      	movs	r1, #0
 8007f52:	2028      	movs	r0, #40	; 0x28
 8007f54:	f7f8 fc47 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007f58:	2028      	movs	r0, #40	; 0x28
 8007f5a:	f7f8 fc60 	bl	800081e <HAL_NVIC_EnableIRQ>

}
 8007f5e:	bf00      	nop
 8007f60:	3728      	adds	r7, #40	; 0x28
 8007f62:	46bd      	mov	sp, r7
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	40021000 	.word	0x40021000
 8007f6c:	48001000 	.word	0x48001000
 8007f70:	48000400 	.word	0x48000400
 8007f74:	48000800 	.word	0x48000800

08007f78 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	4603      	mov	r3, r0
 8007f80:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == pushButton_Pin) {
 8007f82:	88fb      	ldrh	r3, [r7, #6]
 8007f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f88:	d112      	bne.n	8007fb0 <HAL_GPIO_EXTI_Callback+0x38>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8007f8a:	2100      	movs	r1, #0
 8007f8c:	480a      	ldr	r0, [pc, #40]	; (8007fb8 <HAL_GPIO_EXTI_Callback+0x40>)
 8007f8e:	f7f8 fd4f 	bl	8000a30 <HAL_DAC_Stop_DMA>
		HAL_GPIO_TogglePin(greenLED_GPIO_Port, greenLED_Pin);
 8007f92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007f96:	4809      	ldr	r0, [pc, #36]	; (8007fbc <HAL_GPIO_EXTI_Callback+0x44>)
 8007f98:	f7fa f8ec 	bl	8002174 <HAL_GPIO_TogglePin>

		if(recorder)
 8007f9c:	4b08      	ldr	r3, [pc, #32]	; (8007fc0 <HAL_GPIO_EXTI_Callback+0x48>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d005      	beq.n	8007fb0 <HAL_GPIO_EXTI_Callback+0x38>
			HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, SEQUENCE, SEQUENCE_LENGTH);
 8007fa4:	f649 4240 	movw	r2, #40000	; 0x9c40
 8007fa8:	4906      	ldr	r1, [pc, #24]	; (8007fc4 <HAL_GPIO_EXTI_Callback+0x4c>)
 8007faa:	4807      	ldr	r0, [pc, #28]	; (8007fc8 <HAL_GPIO_EXTI_Callback+0x50>)
 8007fac:	f7f9 f944 	bl	8001238 <HAL_DFSDM_FilterRegularStart_DMA>
//			if (UART_status != HAL_OK)
//				HAL_GPIO_TogglePin(redLED_GPIO_Port, redLED_Pin);
//			}
//		}
	}
}
 8007fb0:	bf00      	nop
 8007fb2:	3708      	adds	r7, #8
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	200000b8 	.word	0x200000b8
 8007fbc:	48000400 	.word	0x48000400
 8007fc0:	2004e59c 	.word	0x2004e59c
 8007fc4:	20000398 	.word	0x20000398
 8007fc8:	2000012c 	.word	0x2000012c

08007fcc <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b084      	sub	sp, #16
 8007fd0:	af02      	add	r7, sp, #8
 8007fd2:	6078      	str	r0, [r7, #4]

	if(player) {
 8007fd4:	4b1e      	ldr	r3, [pc, #120]	; (8008050 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 8007fd6:	781b      	ldrb	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d035      	beq.n	8008048 <HAL_DAC_ConvCpltCallbackCh1+0x7c>
	j = j + 1;
 8007fdc:	4b1d      	ldr	r3, [pc, #116]	; (8008054 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 8007fde:	781b      	ldrb	r3, [r3, #0]
 8007fe0:	3301      	adds	r3, #1
 8007fe2:	b2da      	uxtb	r2, r3
 8007fe4:	4b1b      	ldr	r3, [pc, #108]	; (8008054 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 8007fe6:	701a      	strb	r2, [r3, #0]
	test = address[seq[j]];
 8007fe8:	4b1a      	ldr	r3, [pc, #104]	; (8008054 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	461a      	mov	r2, r3
 8007fee:	4b1a      	ldr	r3, [pc, #104]	; (8008058 <HAL_DAC_ConvCpltCallbackCh1+0x8c>)
 8007ff0:	5c9b      	ldrb	r3, [r3, r2]
 8007ff2:	461a      	mov	r2, r3
 8007ff4:	4b19      	ldr	r3, [pc, #100]	; (800805c <HAL_DAC_ConvCpltCallbackCh1+0x90>)
 8007ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ffa:	461a      	mov	r2, r3
 8007ffc:	4b18      	ldr	r3, [pc, #96]	; (8008060 <HAL_DAC_ConvCpltCallbackCh1+0x94>)
 8007ffe:	601a      	str	r2, [r3, #0]
	if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  address[seq[j]], sizeof(SEQUENCE)) != QSPI_OK)
 8008000:	4b14      	ldr	r3, [pc, #80]	; (8008054 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	461a      	mov	r2, r3
 8008006:	4b14      	ldr	r3, [pc, #80]	; (8008058 <HAL_DAC_ConvCpltCallbackCh1+0x8c>)
 8008008:	5c9b      	ldrb	r3, [r3, r2]
 800800a:	461a      	mov	r2, r3
 800800c:	4b13      	ldr	r3, [pc, #76]	; (800805c <HAL_DAC_ConvCpltCallbackCh1+0x90>)
 800800e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008012:	4a14      	ldr	r2, [pc, #80]	; (8008064 <HAL_DAC_ConvCpltCallbackCh1+0x98>)
 8008014:	4619      	mov	r1, r3
 8008016:	4814      	ldr	r0, [pc, #80]	; (8008068 <HAL_DAC_ConvCpltCallbackCh1+0x9c>)
 8008018:	f000 fb00 	bl	800861c <BSP_QSPI_Read>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <HAL_DAC_ConvCpltCallbackCh1+0x5a>
		Error_Handler();
 8008022:	f000 f8cf 	bl	80081c4 <Error_Handler>

	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 8008026:	2300      	movs	r3, #0
 8008028:	9300      	str	r3, [sp, #0]
 800802a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800802e:	4a0e      	ldr	r2, [pc, #56]	; (8008068 <HAL_DAC_ConvCpltCallbackCh1+0x9c>)
 8008030:	2100      	movs	r1, #0
 8008032:	480e      	ldr	r0, [pc, #56]	; (800806c <HAL_DAC_ConvCpltCallbackCh1+0xa0>)
 8008034:	f7f8 fc30 	bl	8000898 <HAL_DAC_Start_DMA>

	if (j == 5) {
 8008038:	4b06      	ldr	r3, [pc, #24]	; (8008054 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	2b05      	cmp	r3, #5
 800803e:	d103      	bne.n	8008048 <HAL_DAC_ConvCpltCallbackCh1+0x7c>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8008040:	2100      	movs	r1, #0
 8008042:	480a      	ldr	r0, [pc, #40]	; (800806c <HAL_DAC_ConvCpltCallbackCh1+0xa0>)
 8008044:	f7f8 fcf4 	bl	8000a30 <HAL_DAC_Stop_DMA>
	}
	}

}
 8008048:	bf00      	nop
 800804a:	3708      	adds	r7, #8
 800804c:	46bd      	mov	sp, r7
 800804e:	bd80      	pop	{r7, pc}
 8008050:	20000064 	.word	0x20000064
 8008054:	2004e5a8 	.word	0x2004e5a8
 8008058:	20000068 	.word	0x20000068
 800805c:	2000003c 	.word	0x2000003c
 8008060:	2004e5a0 	.word	0x2004e5a0
 8008064:	00027100 	.word	0x00027100
 8008068:	20027498 	.word	0x20027498
 800806c:	200000b8 	.word	0x200000b8

08008070 <get_ACC_XY_InitialPosition>:

void get_ACC_XY_InitialPosition(){
 8008070:	b580      	push	{r7, lr}
 8008072:	af00      	add	r7, sp, #0
	 BSP_ACCELERO_AccGetXYZ(accelerometer);
 8008074:	480d      	ldr	r0, [pc, #52]	; (80080ac <get_ACC_XY_InitialPosition+0x3c>)
 8008076:	f000 fa3b 	bl	80084f0 <BSP_ACCELERO_AccGetXYZ>
	 HAL_Delay(100);
 800807a:	2064      	movs	r0, #100	; 0x64
 800807c:	f7f8 fab4 	bl	80005e8 <HAL_Delay>
	 acc_x1 = accelerometer[0];
 8008080:	4b0a      	ldr	r3, [pc, #40]	; (80080ac <get_ACC_XY_InitialPosition+0x3c>)
 8008082:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008086:	4b0a      	ldr	r3, [pc, #40]	; (80080b0 <get_ACC_XY_InitialPosition+0x40>)
 8008088:	801a      	strh	r2, [r3, #0]
	 acc_y1 = accelerometer[1];
 800808a:	4b08      	ldr	r3, [pc, #32]	; (80080ac <get_ACC_XY_InitialPosition+0x3c>)
 800808c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8008090:	4b08      	ldr	r3, [pc, #32]	; (80080b4 <get_ACC_XY_InitialPosition+0x44>)
 8008092:	801a      	strh	r2, [r3, #0]

	 counterInitial++;
 8008094:	4b08      	ldr	r3, [pc, #32]	; (80080b8 <get_ACC_XY_InitialPosition+0x48>)
 8008096:	f993 3000 	ldrsb.w	r3, [r3]
 800809a:	b2db      	uxtb	r3, r3
 800809c:	3301      	adds	r3, #1
 800809e:	b2db      	uxtb	r3, r3
 80080a0:	b25a      	sxtb	r2, r3
 80080a2:	4b05      	ldr	r3, [pc, #20]	; (80080b8 <get_ACC_XY_InitialPosition+0x48>)
 80080a4:	701a      	strb	r2, [r3, #0]
}
 80080a6:	bf00      	nop
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	2004e5ac 	.word	0x2004e5ac
 80080b0:	2004e5b2 	.word	0x2004e5b2
 80080b4:	2004e5b6 	.word	0x2004e5b6
 80080b8:	20052450 	.word	0x20052450

080080bc <HAL_DFSDM_FilterRegConvCpltCallback>:
        }
    }
    return max;
}

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter ) {
 80080bc:	b580      	push	{r7, lr}
 80080be:	b086      	sub	sp, #24
 80080c0:	af02      	add	r7, sp, #8
 80080c2:	6078      	str	r0, [r7, #4]

	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 80080c4:	4837      	ldr	r0, [pc, #220]	; (80081a4 <HAL_DFSDM_FilterRegConvCpltCallback+0xe8>)
 80080c6:	f7f9 f939 	bl	800133c <HAL_DFSDM_FilterRegularStop_DMA>
	for(uint32_t i = 0 ; i < SEQUENCE_LENGTH; i++ ){
 80080ca:	2300      	movs	r3, #0
 80080cc:	60fb      	str	r3, [r7, #12]
 80080ce:	e02b      	b.n	8008128 <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>
		SEQUENCE[i] = SEQUENCE[i] >> 8; // 24 bit signed  :  −8,388,608 : 8,388,607
 80080d0:	4a35      	ldr	r2, [pc, #212]	; (80081a8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080d8:	121a      	asrs	r2, r3, #8
 80080da:	4933      	ldr	r1, [pc, #204]	; (80081a8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(SEQUENCE[i] < 0 ) {
 80080e2:	4a31      	ldr	r2, [pc, #196]	; (80081a8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	da09      	bge.n	8008102 <HAL_DFSDM_FilterRegConvCpltCallback+0x46>
			SEQUENCE[i]= SEQUENCE[i]+ (1<<24);
 80080ee:	4a2e      	ldr	r2, [pc, #184]	; (80081a8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80080f6:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 80080fa:	492b      	ldr	r1, [pc, #172]	; (80081a8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if( SEQUENCE[i] >= 4096) {
 8008102:	4a29      	ldr	r2, [pc, #164]	; (80081a8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800810a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800810e:	db08      	blt.n	8008122 <HAL_DFSDM_FilterRegConvCpltCallback+0x66>
			SEQUENCE[i] = SEQUENCE[i] >> 12;
 8008110:	4a25      	ldr	r2, [pc, #148]	; (80081a8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008118:	131a      	asrs	r2, r3, #12
 800811a:	4923      	ldr	r1, [pc, #140]	; (80081a8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint32_t i = 0 ; i < SEQUENCE_LENGTH; i++ ){
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	3301      	adds	r3, #1
 8008126:	60fb      	str	r3, [r7, #12]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800812e:	4293      	cmp	r3, r2
 8008130:	d9ce      	bls.n	80080d0 <HAL_DFSDM_FilterRegConvCpltCallback+0x14>
		}
	}
	if(BSP_QSPI_Write((uint8_t *) SEQUENCE, (uint32_t) address[pushButtonCounter], sizeof(SEQUENCE)) != QSPI_OK){
 8008132:	4b1e      	ldr	r3, [pc, #120]	; (80081ac <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a1e      	ldr	r2, [pc, #120]	; (80081b0 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 8008138:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800813c:	4a1d      	ldr	r2, [pc, #116]	; (80081b4 <HAL_DFSDM_FilterRegConvCpltCallback+0xf8>)
 800813e:	4619      	mov	r1, r3
 8008140:	4819      	ldr	r0, [pc, #100]	; (80081a8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8008142:	f000 fabd 	bl	80086c0 <BSP_QSPI_Write>
 8008146:	4603      	mov	r3, r0
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>
		Error_Handler();
 800814c:	f000 f83a 	bl	80081c4 <Error_Handler>
	}
	if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t) address[pushButtonCounter], sizeof(SEQUENCE)) != QSPI_OK){
 8008150:	4b16      	ldr	r3, [pc, #88]	; (80081ac <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a16      	ldr	r2, [pc, #88]	; (80081b0 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 8008156:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800815a:	4a16      	ldr	r2, [pc, #88]	; (80081b4 <HAL_DFSDM_FilterRegConvCpltCallback+0xf8>)
 800815c:	4619      	mov	r1, r3
 800815e:	4816      	ldr	r0, [pc, #88]	; (80081b8 <HAL_DFSDM_FilterRegConvCpltCallback+0xfc>)
 8008160:	f000 fa5c 	bl	800861c <BSP_QSPI_Read>
 8008164:	4603      	mov	r3, r0
 8008166:	2b00      	cmp	r3, #0
 8008168:	d001      	beq.n	800816e <HAL_DFSDM_FilterRegConvCpltCallback+0xb2>
		Error_Handler();
 800816a:	f000 f82b 	bl	80081c4 <Error_Handler>
	}
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800816e:	2300      	movs	r3, #0
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	f649 4340 	movw	r3, #40000	; 0x9c40
 8008176:	4a10      	ldr	r2, [pc, #64]	; (80081b8 <HAL_DFSDM_FilterRegConvCpltCallback+0xfc>)
 8008178:	2100      	movs	r1, #0
 800817a:	4810      	ldr	r0, [pc, #64]	; (80081bc <HAL_DFSDM_FilterRegConvCpltCallback+0x100>)
 800817c:	f7f8 fb8c 	bl	8000898 <HAL_DAC_Start_DMA>
	pushButtonCounter = (pushButtonCounter + 1) % 10;
 8008180:	4b0a      	ldr	r3, [pc, #40]	; (80081ac <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	1c59      	adds	r1, r3, #1
 8008186:	4b0e      	ldr	r3, [pc, #56]	; (80081c0 <HAL_DFSDM_FilterRegConvCpltCallback+0x104>)
 8008188:	fba3 2301 	umull	r2, r3, r3, r1
 800818c:	08da      	lsrs	r2, r3, #3
 800818e:	4613      	mov	r3, r2
 8008190:	009b      	lsls	r3, r3, #2
 8008192:	4413      	add	r3, r2
 8008194:	005b      	lsls	r3, r3, #1
 8008196:	1aca      	subs	r2, r1, r3
 8008198:	4b04      	ldr	r3, [pc, #16]	; (80081ac <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 800819a:	601a      	str	r2, [r3, #0]

}
 800819c:	bf00      	nop
 800819e:	3710      	adds	r7, #16
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	2000012c 	.word	0x2000012c
 80081a8:	20000398 	.word	0x20000398
 80081ac:	2004e598 	.word	0x2004e598
 80081b0:	2000003c 	.word	0x2000003c
 80081b4:	00027100 	.word	0x00027100
 80081b8:	20027498 	.word	0x20027498
 80081bc:	200000b8 	.word	0x200000b8
 80081c0:	cccccccd 	.word	0xcccccccd

080081c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80081c4:	b480      	push	{r7}
 80081c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//	HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
	__BKPT();
 80081c8:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 80081ca:	bf00      	nop
 80081cc:	46bd      	mov	sp, r7
 80081ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d2:	4770      	bx	lr

080081d4 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80081d4:	b580      	push	{r7, lr}
 80081d6:	b08a      	sub	sp, #40	; 0x28
 80081d8:	af00      	add	r7, sp, #0
 80081da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80081dc:	4b27      	ldr	r3, [pc, #156]	; (800827c <I2Cx_MspInit+0xa8>)
 80081de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081e0:	4a26      	ldr	r2, [pc, #152]	; (800827c <I2Cx_MspInit+0xa8>)
 80081e2:	f043 0302 	orr.w	r3, r3, #2
 80081e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081e8:	4b24      	ldr	r3, [pc, #144]	; (800827c <I2Cx_MspInit+0xa8>)
 80081ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ec:	f003 0302 	and.w	r3, r3, #2
 80081f0:	613b      	str	r3, [r7, #16]
 80081f2:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80081f4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80081f8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80081fa:	2312      	movs	r3, #18
 80081fc:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80081fe:	2301      	movs	r3, #1
 8008200:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008202:	2303      	movs	r3, #3
 8008204:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8008206:	2304      	movs	r3, #4
 8008208:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800820a:	f107 0314 	add.w	r3, r7, #20
 800820e:	4619      	mov	r1, r3
 8008210:	481b      	ldr	r0, [pc, #108]	; (8008280 <I2Cx_MspInit+0xac>)
 8008212:	f7f9 fd13 	bl	8001c3c <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8008216:	f107 0314 	add.w	r3, r7, #20
 800821a:	4619      	mov	r1, r3
 800821c:	4818      	ldr	r0, [pc, #96]	; (8008280 <I2Cx_MspInit+0xac>)
 800821e:	f7f9 fd0d 	bl	8001c3c <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 8008222:	4b16      	ldr	r3, [pc, #88]	; (800827c <I2Cx_MspInit+0xa8>)
 8008224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008226:	4a15      	ldr	r2, [pc, #84]	; (800827c <I2Cx_MspInit+0xa8>)
 8008228:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800822c:	6593      	str	r3, [r2, #88]	; 0x58
 800822e:	4b13      	ldr	r3, [pc, #76]	; (800827c <I2Cx_MspInit+0xa8>)
 8008230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008232:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008236:	60fb      	str	r3, [r7, #12]
 8008238:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800823a:	4b10      	ldr	r3, [pc, #64]	; (800827c <I2Cx_MspInit+0xa8>)
 800823c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800823e:	4a0f      	ldr	r2, [pc, #60]	; (800827c <I2Cx_MspInit+0xa8>)
 8008240:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008244:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 8008246:	4b0d      	ldr	r3, [pc, #52]	; (800827c <I2Cx_MspInit+0xa8>)
 8008248:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800824a:	4a0c      	ldr	r2, [pc, #48]	; (800827c <I2Cx_MspInit+0xa8>)
 800824c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8008250:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8008252:	2200      	movs	r2, #0
 8008254:	210f      	movs	r1, #15
 8008256:	2021      	movs	r0, #33	; 0x21
 8008258:	f7f8 fac5 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800825c:	2021      	movs	r0, #33	; 0x21
 800825e:	f7f8 fade 	bl	800081e <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8008262:	2200      	movs	r2, #0
 8008264:	210f      	movs	r1, #15
 8008266:	2022      	movs	r0, #34	; 0x22
 8008268:	f7f8 fabd 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800826c:	2022      	movs	r0, #34	; 0x22
 800826e:	f7f8 fad6 	bl	800081e <HAL_NVIC_EnableIRQ>
}
 8008272:	bf00      	nop
 8008274:	3728      	adds	r7, #40	; 0x28
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	40021000 	.word	0x40021000
 8008280:	48000400 	.word	0x48000400

08008284 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b082      	sub	sp, #8
 8008288:	af00      	add	r7, sp, #0
 800828a:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	4a12      	ldr	r2, [pc, #72]	; (80082d8 <I2Cx_Init+0x54>)
 8008290:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	4a11      	ldr	r2, [pc, #68]	; (80082dc <I2Cx_Init+0x58>)
 8008296:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2201      	movs	r2, #1
 80082a2:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2200      	movs	r2, #0
 80082a8:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2200      	movs	r2, #0
 80082ae:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2200      	movs	r2, #0
 80082b4:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2200      	movs	r2, #0
 80082ba:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 80082bc:	6878      	ldr	r0, [r7, #4]
 80082be:	f7ff ff89 	bl	80081d4 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 80082c2:	6878      	ldr	r0, [r7, #4]
 80082c4:	f7f9 ff88 	bl	80021d8 <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 80082c8:	2100      	movs	r1, #0
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f7fa fd16 	bl	8002cfc <HAL_I2CEx_ConfigAnalogFilter>
}
 80082d0:	bf00      	nop
 80082d2:	3708      	adds	r7, #8
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}
 80082d8:	40005800 	.word	0x40005800
 80082dc:	00702681 	.word	0x00702681

080082e0 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80082e0:	b580      	push	{r7, lr}
 80082e2:	b08a      	sub	sp, #40	; 0x28
 80082e4:	af04      	add	r7, sp, #16
 80082e6:	60f8      	str	r0, [r7, #12]
 80082e8:	4608      	mov	r0, r1
 80082ea:	4611      	mov	r1, r2
 80082ec:	461a      	mov	r2, r3
 80082ee:	4603      	mov	r3, r0
 80082f0:	72fb      	strb	r3, [r7, #11]
 80082f2:	460b      	mov	r3, r1
 80082f4:	813b      	strh	r3, [r7, #8]
 80082f6:	4613      	mov	r3, r2
 80082f8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80082fe:	7afb      	ldrb	r3, [r7, #11]
 8008300:	b299      	uxth	r1, r3
 8008302:	88f8      	ldrh	r0, [r7, #6]
 8008304:	893a      	ldrh	r2, [r7, #8]
 8008306:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800830a:	9302      	str	r3, [sp, #8]
 800830c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800830e:	9301      	str	r3, [sp, #4]
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	9300      	str	r3, [sp, #0]
 8008314:	4603      	mov	r3, r0
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f7fa f930 	bl	800257c <HAL_I2C_Mem_Read>
 800831c:	4603      	mov	r3, r0
 800831e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8008320:	7dfb      	ldrb	r3, [r7, #23]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d004      	beq.n	8008330 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8008326:	7afb      	ldrb	r3, [r7, #11]
 8008328:	4619      	mov	r1, r3
 800832a:	68f8      	ldr	r0, [r7, #12]
 800832c:	f000 f832 	bl	8008394 <I2Cx_Error>
  }
  return status;
 8008330:	7dfb      	ldrb	r3, [r7, #23]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3718      	adds	r7, #24
 8008336:	46bd      	mov	sp, r7
 8008338:	bd80      	pop	{r7, pc}

0800833a <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b08a      	sub	sp, #40	; 0x28
 800833e:	af04      	add	r7, sp, #16
 8008340:	60f8      	str	r0, [r7, #12]
 8008342:	4608      	mov	r0, r1
 8008344:	4611      	mov	r1, r2
 8008346:	461a      	mov	r2, r3
 8008348:	4603      	mov	r3, r0
 800834a:	72fb      	strb	r3, [r7, #11]
 800834c:	460b      	mov	r3, r1
 800834e:	813b      	strh	r3, [r7, #8]
 8008350:	4613      	mov	r3, r2
 8008352:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8008354:	2300      	movs	r3, #0
 8008356:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8008358:	7afb      	ldrb	r3, [r7, #11]
 800835a:	b299      	uxth	r1, r3
 800835c:	88f8      	ldrh	r0, [r7, #6]
 800835e:	893a      	ldrh	r2, [r7, #8]
 8008360:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008364:	9302      	str	r3, [sp, #8]
 8008366:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8008368:	9301      	str	r3, [sp, #4]
 800836a:	6a3b      	ldr	r3, [r7, #32]
 800836c:	9300      	str	r3, [sp, #0]
 800836e:	4603      	mov	r3, r0
 8008370:	68f8      	ldr	r0, [r7, #12]
 8008372:	f7f9 ffef 	bl	8002354 <HAL_I2C_Mem_Write>
 8008376:	4603      	mov	r3, r0
 8008378:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800837a:	7dfb      	ldrb	r3, [r7, #23]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d004      	beq.n	800838a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8008380:	7afb      	ldrb	r3, [r7, #11]
 8008382:	4619      	mov	r1, r3
 8008384:	68f8      	ldr	r0, [r7, #12]
 8008386:	f000 f805 	bl	8008394 <I2Cx_Error>
  }
  return status;
 800838a:	7dfb      	ldrb	r3, [r7, #23]
}
 800838c:	4618      	mov	r0, r3
 800838e:	3718      	adds	r7, #24
 8008390:	46bd      	mov	sp, r7
 8008392:	bd80      	pop	{r7, pc}

08008394 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	460b      	mov	r3, r1
 800839e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80083a0:	6878      	ldr	r0, [r7, #4]
 80083a2:	f7f9 ffa8 	bl	80022f6 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7ff ff6c 	bl	8008284 <I2Cx_Init>
}
 80083ac:	bf00      	nop
 80083ae:	3708      	adds	r7, #8
 80083b0:	46bd      	mov	sp, r7
 80083b2:	bd80      	pop	{r7, pc}

080083b4 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 80083b4:	b580      	push	{r7, lr}
 80083b6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 80083b8:	4802      	ldr	r0, [pc, #8]	; (80083c4 <SENSOR_IO_Init+0x10>)
 80083ba:	f7ff ff63 	bl	8008284 <I2Cx_Init>
}
 80083be:	bf00      	nop
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	20052454 	.word	0x20052454

080083c8 <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af02      	add	r7, sp, #8
 80083ce:	4603      	mov	r3, r0
 80083d0:	71fb      	strb	r3, [r7, #7]
 80083d2:	460b      	mov	r3, r1
 80083d4:	71bb      	strb	r3, [r7, #6]
 80083d6:	4613      	mov	r3, r2
 80083d8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80083da:	79bb      	ldrb	r3, [r7, #6]
 80083dc:	b29a      	uxth	r2, r3
 80083de:	79f9      	ldrb	r1, [r7, #7]
 80083e0:	2301      	movs	r3, #1
 80083e2:	9301      	str	r3, [sp, #4]
 80083e4:	1d7b      	adds	r3, r7, #5
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	2301      	movs	r3, #1
 80083ea:	4803      	ldr	r0, [pc, #12]	; (80083f8 <SENSOR_IO_Write+0x30>)
 80083ec:	f7ff ffa5 	bl	800833a <I2Cx_WriteMultiple>
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	20052454 	.word	0x20052454

080083fc <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b086      	sub	sp, #24
 8008400:	af02      	add	r7, sp, #8
 8008402:	4603      	mov	r3, r0
 8008404:	460a      	mov	r2, r1
 8008406:	71fb      	strb	r3, [r7, #7]
 8008408:	4613      	mov	r3, r2
 800840a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800840c:	2300      	movs	r3, #0
 800840e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8008410:	79bb      	ldrb	r3, [r7, #6]
 8008412:	b29a      	uxth	r2, r3
 8008414:	79f9      	ldrb	r1, [r7, #7]
 8008416:	2301      	movs	r3, #1
 8008418:	9301      	str	r3, [sp, #4]
 800841a:	f107 030f 	add.w	r3, r7, #15
 800841e:	9300      	str	r3, [sp, #0]
 8008420:	2301      	movs	r3, #1
 8008422:	4804      	ldr	r0, [pc, #16]	; (8008434 <SENSOR_IO_Read+0x38>)
 8008424:	f7ff ff5c 	bl	80082e0 <I2Cx_ReadMultiple>

  return read_value;
 8008428:	7bfb      	ldrb	r3, [r7, #15]
}
 800842a:	4618      	mov	r0, r3
 800842c:	3710      	adds	r7, #16
 800842e:	46bd      	mov	sp, r7
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	20052454 	.word	0x20052454

08008438 <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	b084      	sub	sp, #16
 800843c:	af02      	add	r7, sp, #8
 800843e:	603a      	str	r2, [r7, #0]
 8008440:	461a      	mov	r2, r3
 8008442:	4603      	mov	r3, r0
 8008444:	71fb      	strb	r3, [r7, #7]
 8008446:	460b      	mov	r3, r1
 8008448:	71bb      	strb	r3, [r7, #6]
 800844a:	4613      	mov	r3, r2
 800844c:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800844e:	79bb      	ldrb	r3, [r7, #6]
 8008450:	b29a      	uxth	r2, r3
 8008452:	79f9      	ldrb	r1, [r7, #7]
 8008454:	88bb      	ldrh	r3, [r7, #4]
 8008456:	9301      	str	r3, [sp, #4]
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	9300      	str	r3, [sp, #0]
 800845c:	2301      	movs	r3, #1
 800845e:	4804      	ldr	r0, [pc, #16]	; (8008470 <SENSOR_IO_ReadMultiple+0x38>)
 8008460:	f7ff ff3e 	bl	80082e0 <I2Cx_ReadMultiple>
 8008464:	4603      	mov	r3, r0
 8008466:	b29b      	uxth	r3, r3
}
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	20052454 	.word	0x20052454

08008474 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800847a:	2300      	movs	r3, #0
 800847c:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800847e:	2300      	movs	r3, #0
 8008480:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8008482:	4b19      	ldr	r3, [pc, #100]	; (80084e8 <BSP_ACCELERO_Init+0x74>)
 8008484:	689b      	ldr	r3, [r3, #8]
 8008486:	4798      	blx	r3
 8008488:	4603      	mov	r3, r0
 800848a:	2b6a      	cmp	r3, #106	; 0x6a
 800848c:	d002      	beq.n	8008494 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800848e:	2301      	movs	r3, #1
 8008490:	73fb      	strb	r3, [r7, #15]
 8008492:	e024      	b.n	80084de <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8008494:	4b15      	ldr	r3, [pc, #84]	; (80084ec <BSP_ACCELERO_Init+0x78>)
 8008496:	4a14      	ldr	r2, [pc, #80]	; (80084e8 <BSP_ACCELERO_Init+0x74>)
 8008498:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800849a:	2330      	movs	r3, #48	; 0x30
 800849c:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800849e:	2300      	movs	r3, #0
 80084a0:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_16G;
 80084a2:	2304      	movs	r3, #4
 80084a4:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 80084a6:	2340      	movs	r3, #64	; 0x40
 80084a8:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 80084aa:	2300      	movs	r3, #0
 80084ac:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 80084ae:	2300      	movs	r3, #0
 80084b0:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 80084b2:	797a      	ldrb	r2, [r7, #5]
 80084b4:	7abb      	ldrb	r3, [r7, #10]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	b2db      	uxtb	r3, r3
 80084ba:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 80084bc:	7a3b      	ldrb	r3, [r7, #8]
 80084be:	f043 0304 	orr.w	r3, r3, #4
 80084c2:	b2db      	uxtb	r3, r3
 80084c4:	021b      	lsls	r3, r3, #8
 80084c6:	b21a      	sxth	r2, r3
 80084c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	b21b      	sxth	r3, r3
 80084d0:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 80084d2:	4b06      	ldr	r3, [pc, #24]	; (80084ec <BSP_ACCELERO_Init+0x78>)
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	89ba      	ldrh	r2, [r7, #12]
 80084da:	4610      	mov	r0, r2
 80084dc:	4798      	blx	r3
  }  

  return ret;
 80084de:	7bfb      	ldrb	r3, [r7, #15]
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}
 80084e8:	20000008 	.word	0x20000008
 80084ec:	200524a8 	.word	0x200524a8

080084f0 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 80084f8:	4b08      	ldr	r3, [pc, #32]	; (800851c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d009      	beq.n	8008514 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8008500:	4b06      	ldr	r3, [pc, #24]	; (800851c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008506:	2b00      	cmp	r3, #0
 8008508:	d004      	beq.n	8008514 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800850a:	4b04      	ldr	r3, [pc, #16]	; (800851c <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	4798      	blx	r3
    }
  }
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	200524a8 	.word	0x200524a8

08008520 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 8008526:	4b3b      	ldr	r3, [pc, #236]	; (8008614 <BSP_QSPI_Init+0xf4>)
 8008528:	4a3b      	ldr	r2, [pc, #236]	; (8008618 <BSP_QSPI_Init+0xf8>)
 800852a:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 800852c:	4839      	ldr	r0, [pc, #228]	; (8008614 <BSP_QSPI_Init+0xf4>)
 800852e:	f7fa fd27 	bl	8002f80 <HAL_OSPI_DeInit>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	d001      	beq.n	800853c <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8008538:	2301      	movs	r3, #1
 800853a:	e067      	b.n	800860c <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 800853c:	f000 f990 	bl	8008860 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8008540:	4b34      	ldr	r3, [pc, #208]	; (8008614 <BSP_QSPI_Init+0xf4>)
 8008542:	2204      	movs	r2, #4
 8008544:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8008546:	4b33      	ldr	r3, [pc, #204]	; (8008614 <BSP_QSPI_Init+0xf4>)
 8008548:	2200      	movs	r2, #0
 800854a:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800854c:	4b31      	ldr	r3, [pc, #196]	; (8008614 <BSP_QSPI_Init+0xf4>)
 800854e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008552:	60da      	str	r2, [r3, #12]
 8008554:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8008558:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	fa93 f3a3 	rbit	r3, r3
 8008560:	607b      	str	r3, [r7, #4]
  return result;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <BSP_QSPI_Init+0x50>
    return 32U;
 800856c:	2320      	movs	r3, #32
 800856e:	e003      	b.n	8008578 <BSP_QSPI_Init+0x58>
  return __builtin_clz(value);
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	fab3 f383 	clz	r3, r3
 8008576:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8008578:	461a      	mov	r2, r3
 800857a:	4b26      	ldr	r3, [pc, #152]	; (8008614 <BSP_QSPI_Init+0xf4>)
 800857c:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 800857e:	4b25      	ldr	r3, [pc, #148]	; (8008614 <BSP_QSPI_Init+0xf4>)
 8008580:	2201      	movs	r2, #1
 8008582:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8008584:	4b23      	ldr	r3, [pc, #140]	; (8008614 <BSP_QSPI_Init+0xf4>)
 8008586:	2200      	movs	r2, #0
 8008588:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 800858a:	4b22      	ldr	r3, [pc, #136]	; (8008614 <BSP_QSPI_Init+0xf4>)
 800858c:	2200      	movs	r2, #0
 800858e:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8008590:	4b20      	ldr	r3, [pc, #128]	; (8008614 <BSP_QSPI_Init+0xf4>)
 8008592:	2204      	movs	r2, #4
 8008594:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8008596:	4b1f      	ldr	r3, [pc, #124]	; (8008614 <BSP_QSPI_Init+0xf4>)
 8008598:	2200      	movs	r2, #0
 800859a:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800859c:	4b1d      	ldr	r3, [pc, #116]	; (8008614 <BSP_QSPI_Init+0xf4>)
 800859e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80085a2:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 80085a4:	4b1b      	ldr	r3, [pc, #108]	; (8008614 <BSP_QSPI_Init+0xf4>)
 80085a6:	2200      	movs	r2, #0
 80085a8:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 80085aa:	4b1a      	ldr	r3, [pc, #104]	; (8008614 <BSP_QSPI_Init+0xf4>)
 80085ac:	2200      	movs	r2, #0
 80085ae:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80085b0:	4818      	ldr	r0, [pc, #96]	; (8008614 <BSP_QSPI_Init+0xf4>)
 80085b2:	f7fa fc3b 	bl	8002e2c <HAL_OSPI_Init>
 80085b6:	4603      	mov	r3, r0
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d001      	beq.n	80085c0 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 80085bc:	2301      	movs	r3, #1
 80085be:	e025      	b.n	800860c <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 80085c0:	4814      	ldr	r0, [pc, #80]	; (8008614 <BSP_QSPI_Init+0xf4>)
 80085c2:	f000 f98d 	bl	80088e0 <QSPI_ResetMemory>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d001      	beq.n	80085d0 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 80085cc:	2304      	movs	r3, #4
 80085ce:	e01d      	b.n	800860c <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 80085d0:	2101      	movs	r1, #1
 80085d2:	4810      	ldr	r0, [pc, #64]	; (8008614 <BSP_QSPI_Init+0xf4>)
 80085d4:	f000 fa72 	bl	8008abc <QSPI_QuadMode>
 80085d8:	4603      	mov	r3, r0
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d001      	beq.n	80085e2 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 80085de:	2301      	movs	r3, #1
 80085e0:	e014      	b.n	800860c <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80085e2:	2101      	movs	r1, #1
 80085e4:	480b      	ldr	r0, [pc, #44]	; (8008614 <BSP_QSPI_Init+0xf4>)
 80085e6:	f000 fb15 	bl	8008c14 <QSPI_HighPerfMode>
 80085ea:	4603      	mov	r3, r0
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d001      	beq.n	80085f4 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 80085f0:	2301      	movs	r3, #1
 80085f2:	e00b      	b.n	800860c <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 80085f4:	4b07      	ldr	r3, [pc, #28]	; (8008614 <BSP_QSPI_Init+0xf4>)
 80085f6:	2202      	movs	r2, #2
 80085f8:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80085fa:	4806      	ldr	r0, [pc, #24]	; (8008614 <BSP_QSPI_Init+0xf4>)
 80085fc:	f7fa fc16 	bl	8002e2c <HAL_OSPI_Init>
 8008600:	4603      	mov	r3, r0
 8008602:	2b00      	cmp	r3, #0
 8008604:	d001      	beq.n	800860a <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 8008606:	2301      	movs	r3, #1
 8008608:	e000      	b.n	800860c <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 800860a:	2300      	movs	r3, #0
}
 800860c:	4618      	mov	r0, r3
 800860e:	3710      	adds	r7, #16
 8008610:	46bd      	mov	sp, r7
 8008612:	bd80      	pop	{r7, pc}
 8008614:	200524ac 	.word	0x200524ac
 8008618:	a0001000 	.word	0xa0001000

0800861c <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b098      	sub	sp, #96	; 0x60
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008628:	2300      	movs	r3, #0
 800862a:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 800862c:	2300      	movs	r3, #0
 800862e:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 8008630:	23eb      	movs	r3, #235	; 0xeb
 8008632:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 8008634:	2301      	movs	r3, #1
 8008636:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8008638:	2300      	movs	r3, #0
 800863a:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800863c:	2300      	movs	r3, #0
 800863e:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 8008640:	68bb      	ldr	r3, [r7, #8]
 8008642:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8008644:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008648:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 800864a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800864e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008650:	2300      	movs	r3, #0
 8008652:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8008654:	23aa      	movs	r3, #170	; 0xaa
 8008656:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8008658:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800865c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 800865e:	2300      	movs	r3, #0
 8008660:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 8008662:	2300      	movs	r3, #0
 8008664:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 8008666:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800866a:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8008670:	2300      	movs	r3, #0
 8008672:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8008674:	2304      	movs	r3, #4
 8008676:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8008678:	2300      	movs	r3, #0
 800867a:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800867c:	2300      	movs	r3, #0
 800867e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008680:	f107 0310 	add.w	r3, r7, #16
 8008684:	f241 3288 	movw	r2, #5000	; 0x1388
 8008688:	4619      	mov	r1, r3
 800868a:	480c      	ldr	r0, [pc, #48]	; (80086bc <BSP_QSPI_Read+0xa0>)
 800868c:	f7fa fc9f 	bl	8002fce <HAL_OSPI_Command>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d001      	beq.n	800869a <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	e00b      	b.n	80086b2 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800869a:	f241 3288 	movw	r2, #5000	; 0x1388
 800869e:	68f9      	ldr	r1, [r7, #12]
 80086a0:	4806      	ldr	r0, [pc, #24]	; (80086bc <BSP_QSPI_Read+0xa0>)
 80086a2:	f7fa fd88 	bl	80031b6 <HAL_OSPI_Receive>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d001      	beq.n	80086b0 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 80086ac:	2301      	movs	r3, #1
 80086ae:	e000      	b.n	80086b2 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 80086b0:	2300      	movs	r3, #0
}
 80086b2:	4618      	mov	r0, r3
 80086b4:	3760      	adds	r7, #96	; 0x60
 80086b6:	46bd      	mov	sp, r7
 80086b8:	bd80      	pop	{r7, pc}
 80086ba:	bf00      	nop
 80086bc:	200524ac 	.word	0x200524ac

080086c0 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b09c      	sub	sp, #112	; 0x70
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	b2db      	uxtb	r3, r3
 80086d0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 80086d4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 80086d6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d901      	bls.n	80086e2 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 80086e2:	68bb      	ldr	r3, [r7, #8]
 80086e4:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 80086e6:	68ba      	ldr	r2, [r7, #8]
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	4413      	add	r3, r2
 80086ec:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80086ee:	2300      	movs	r3, #0
 80086f0:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80086f2:	2300      	movs	r3, #0
 80086f4:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 80086f6:	2338      	movs	r3, #56	; 0x38
 80086f8:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80086fa:	2301      	movs	r3, #1
 80086fc:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80086fe:	2300      	movs	r3, #0
 8008700:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008702:	2300      	movs	r3, #0
 8008704:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 8008706:	f44f 7340 	mov.w	r3, #768	; 0x300
 800870a:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 800870c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008710:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8008712:	2300      	movs	r3, #0
 8008714:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008716:	2300      	movs	r3, #0
 8008718:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 800871a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800871e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8008720:	2300      	movs	r3, #0
 8008722:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 8008724:	2300      	movs	r3, #0
 8008726:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8008728:	2300      	movs	r3, #0
 800872a:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800872c:	2300      	movs	r3, #0
 800872e:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8008730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008732:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 8008734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008736:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8008738:	4823      	ldr	r0, [pc, #140]	; (80087c8 <BSP_QSPI_Write+0x108>)
 800873a:	f000 f918 	bl	800896e <QSPI_WriteEnable>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d001      	beq.n	8008748 <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8008744:	2301      	movs	r3, #1
 8008746:	e03b      	b.n	80087c0 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008748:	f107 0314 	add.w	r3, r7, #20
 800874c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008750:	4619      	mov	r1, r3
 8008752:	481d      	ldr	r0, [pc, #116]	; (80087c8 <BSP_QSPI_Write+0x108>)
 8008754:	f7fa fc3b 	bl	8002fce <HAL_OSPI_Command>
 8008758:	4603      	mov	r3, r0
 800875a:	2b00      	cmp	r3, #0
 800875c:	d001      	beq.n	8008762 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e02e      	b.n	80087c0 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008762:	f241 3288 	movw	r2, #5000	; 0x1388
 8008766:	68f9      	ldr	r1, [r7, #12]
 8008768:	4817      	ldr	r0, [pc, #92]	; (80087c8 <BSP_QSPI_Write+0x108>)
 800876a:	f7fa fcb1 	bl	80030d0 <HAL_OSPI_Transmit>
 800876e:	4603      	mov	r3, r0
 8008770:	2b00      	cmp	r3, #0
 8008772:	d001      	beq.n	8008778 <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8008774:	2301      	movs	r3, #1
 8008776:	e023      	b.n	80087c0 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8008778:	f241 3188 	movw	r1, #5000	; 0x1388
 800877c:	4812      	ldr	r0, [pc, #72]	; (80087c8 <BSP_QSPI_Write+0x108>)
 800877e:	f000 f952 	bl	8008a26 <QSPI_AutoPollingMemReady>
 8008782:	4603      	mov	r3, r0
 8008784:	2b00      	cmp	r3, #0
 8008786:	d001      	beq.n	800878c <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 8008788:	2301      	movs	r3, #1
 800878a:	e019      	b.n	80087c0 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800878c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800878e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008790:	4413      	add	r3, r2
 8008792:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 8008794:	68fa      	ldr	r2, [r7, #12]
 8008796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008798:	4413      	add	r3, r2
 800879a:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 800879c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800879e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80087a2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087a4:	429a      	cmp	r2, r3
 80087a6:	d203      	bcs.n	80087b0 <BSP_QSPI_Write+0xf0>
 80087a8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80087aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80087ac:	1ad3      	subs	r3, r2, r3
 80087ae:	e001      	b.n	80087b4 <BSP_QSPI_Write+0xf4>
 80087b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087b4:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 80087b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80087b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80087ba:	429a      	cmp	r2, r3
 80087bc:	d3b8      	bcc.n	8008730 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 80087be:	2300      	movs	r3, #0
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3770      	adds	r7, #112	; 0x70
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}
 80087c8:	200524ac 	.word	0x200524ac

080087cc <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b096      	sub	sp, #88	; 0x58
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80087d4:	2300      	movs	r3, #0
 80087d6:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80087d8:	2300      	movs	r3, #0
 80087da:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 80087dc:	23d8      	movs	r3, #216	; 0xd8
 80087de:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80087e0:	2301      	movs	r3, #1
 80087e2:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80087e4:	2300      	movs	r3, #0
 80087e6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 80087f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80087f4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80087f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80087fa:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80087fc:	2300      	movs	r3, #0
 80087fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008800:	2300      	movs	r3, #0
 8008802:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8008804:	2300      	movs	r3, #0
 8008806:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8008808:	2300      	movs	r3, #0
 800880a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800880c:	2300      	movs	r3, #0
 800880e:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008810:	2300      	movs	r3, #0
 8008812:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8008814:	4811      	ldr	r0, [pc, #68]	; (800885c <BSP_QSPI_Erase_Block+0x90>)
 8008816:	f000 f8aa 	bl	800896e <QSPI_WriteEnable>
 800881a:	4603      	mov	r3, r0
 800881c:	2b00      	cmp	r3, #0
 800881e:	d001      	beq.n	8008824 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 8008820:	2301      	movs	r3, #1
 8008822:	e017      	b.n	8008854 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008824:	f107 0308 	add.w	r3, r7, #8
 8008828:	f241 3288 	movw	r2, #5000	; 0x1388
 800882c:	4619      	mov	r1, r3
 800882e:	480b      	ldr	r0, [pc, #44]	; (800885c <BSP_QSPI_Erase_Block+0x90>)
 8008830:	f7fa fbcd 	bl	8002fce <HAL_OSPI_Command>
 8008834:	4603      	mov	r3, r0
 8008836:	2b00      	cmp	r3, #0
 8008838:	d001      	beq.n	800883e <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e00a      	b.n	8008854 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 800883e:	f640 51ac 	movw	r1, #3500	; 0xdac
 8008842:	4806      	ldr	r0, [pc, #24]	; (800885c <BSP_QSPI_Erase_Block+0x90>)
 8008844:	f000 f8ef 	bl	8008a26 <QSPI_AutoPollingMemReady>
 8008848:	4603      	mov	r3, r0
 800884a:	2b00      	cmp	r3, #0
 800884c:	d001      	beq.n	8008852 <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e000      	b.n	8008854 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 8008852:	2300      	movs	r3, #0
}
 8008854:	4618      	mov	r0, r3
 8008856:	3758      	adds	r7, #88	; 0x58
 8008858:	46bd      	mov	sp, r7
 800885a:	bd80      	pop	{r7, pc}
 800885c:	200524ac 	.word	0x200524ac

08008860 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b088      	sub	sp, #32
 8008864:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 8008866:	4b1c      	ldr	r3, [pc, #112]	; (80088d8 <BSP_QSPI_MspInit+0x78>)
 8008868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800886a:	4a1b      	ldr	r2, [pc, #108]	; (80088d8 <BSP_QSPI_MspInit+0x78>)
 800886c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008870:	6513      	str	r3, [r2, #80]	; 0x50
 8008872:	4b19      	ldr	r3, [pc, #100]	; (80088d8 <BSP_QSPI_MspInit+0x78>)
 8008874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800887a:	60bb      	str	r3, [r7, #8]
 800887c:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 800887e:	4b16      	ldr	r3, [pc, #88]	; (80088d8 <BSP_QSPI_MspInit+0x78>)
 8008880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008882:	4a15      	ldr	r2, [pc, #84]	; (80088d8 <BSP_QSPI_MspInit+0x78>)
 8008884:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008888:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 800888a:	4b13      	ldr	r3, [pc, #76]	; (80088d8 <BSP_QSPI_MspInit+0x78>)
 800888c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800888e:	4a12      	ldr	r2, [pc, #72]	; (80088d8 <BSP_QSPI_MspInit+0x78>)
 8008890:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008894:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008896:	4b10      	ldr	r3, [pc, #64]	; (80088d8 <BSP_QSPI_MspInit+0x78>)
 8008898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800889a:	4a0f      	ldr	r2, [pc, #60]	; (80088d8 <BSP_QSPI_MspInit+0x78>)
 800889c:	f043 0310 	orr.w	r3, r3, #16
 80088a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80088a2:	4b0d      	ldr	r3, [pc, #52]	; (80088d8 <BSP_QSPI_MspInit+0x78>)
 80088a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088a6:	f003 0310 	and.w	r3, r3, #16
 80088aa:	607b      	str	r3, [r7, #4]
 80088ac:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 80088ae:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80088b2:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80088b4:	2302      	movs	r3, #2
 80088b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80088b8:	2300      	movs	r3, #0
 80088ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80088bc:	2303      	movs	r3, #3
 80088be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80088c0:	230a      	movs	r3, #10
 80088c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80088c4:	f107 030c 	add.w	r3, r7, #12
 80088c8:	4619      	mov	r1, r3
 80088ca:	4804      	ldr	r0, [pc, #16]	; (80088dc <BSP_QSPI_MspInit+0x7c>)
 80088cc:	f7f9 f9b6 	bl	8001c3c <HAL_GPIO_Init>
}
 80088d0:	bf00      	nop
 80088d2:	3720      	adds	r7, #32
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}
 80088d8:	40021000 	.word	0x40021000
 80088dc:	48001000 	.word	0x48001000

080088e0 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b096      	sub	sp, #88	; 0x58
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80088e8:	2300      	movs	r3, #0
 80088ea:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80088ec:	2300      	movs	r3, #0
 80088ee:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 80088f0:	2366      	movs	r3, #102	; 0x66
 80088f2:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80088f4:	2301      	movs	r3, #1
 80088f6:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80088f8:	2300      	movs	r3, #0
 80088fa:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80088fc:	2300      	movs	r3, #0
 80088fe:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8008900:	2300      	movs	r3, #0
 8008902:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008904:	2300      	movs	r3, #0
 8008906:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8008908:	2300      	movs	r3, #0
 800890a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 800890c:	2300      	movs	r3, #0
 800890e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8008910:	2300      	movs	r3, #0
 8008912:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008914:	2300      	movs	r3, #0
 8008916:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008918:	f107 0308 	add.w	r3, r7, #8
 800891c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008920:	4619      	mov	r1, r3
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7fa fb53 	bl	8002fce <HAL_OSPI_Command>
 8008928:	4603      	mov	r3, r0
 800892a:	2b00      	cmp	r3, #0
 800892c:	d001      	beq.n	8008932 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 800892e:	2301      	movs	r3, #1
 8008930:	e019      	b.n	8008966 <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8008932:	2399      	movs	r3, #153	; 0x99
 8008934:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008936:	f107 0308 	add.w	r3, r7, #8
 800893a:	f241 3288 	movw	r2, #5000	; 0x1388
 800893e:	4619      	mov	r1, r3
 8008940:	6878      	ldr	r0, [r7, #4]
 8008942:	f7fa fb44 	bl	8002fce <HAL_OSPI_Command>
 8008946:	4603      	mov	r3, r0
 8008948:	2b00      	cmp	r3, #0
 800894a:	d001      	beq.n	8008950 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e00a      	b.n	8008966 <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8008950:	f241 3188 	movw	r1, #5000	; 0x1388
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f000 f866 	bl	8008a26 <QSPI_AutoPollingMemReady>
 800895a:	4603      	mov	r3, r0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d001      	beq.n	8008964 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8008960:	2301      	movs	r3, #1
 8008962:	e000      	b.n	8008966 <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3758      	adds	r7, #88	; 0x58
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 800896e:	b580      	push	{r7, lr}
 8008970:	b09c      	sub	sp, #112	; 0x70
 8008972:	af00      	add	r7, sp, #0
 8008974:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008976:	2300      	movs	r3, #0
 8008978:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800897a:	2300      	movs	r3, #0
 800897c:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 800897e:	2306      	movs	r3, #6
 8008980:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8008982:	2301      	movs	r3, #1
 8008984:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8008986:	2300      	movs	r3, #0
 8008988:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800898a:	2300      	movs	r3, #0
 800898c:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800898e:	2300      	movs	r3, #0
 8008990:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008992:	2300      	movs	r3, #0
 8008994:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8008996:	2300      	movs	r3, #0
 8008998:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 800899a:	2300      	movs	r3, #0
 800899c:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800899e:	2300      	movs	r3, #0
 80089a0:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80089a2:	2300      	movs	r3, #0
 80089a4:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80089a6:	f107 0320 	add.w	r3, r7, #32
 80089aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80089ae:	4619      	mov	r1, r3
 80089b0:	6878      	ldr	r0, [r7, #4]
 80089b2:	f7fa fb0c 	bl	8002fce <HAL_OSPI_Command>
 80089b6:	4603      	mov	r3, r0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d001      	beq.n	80089c0 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e02e      	b.n	8008a1e <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 80089c0:	2302      	movs	r3, #2
 80089c2:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 80089c4:	2302      	movs	r3, #2
 80089c6:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80089c8:	2300      	movs	r3, #0
 80089ca:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 80089cc:	2310      	movs	r3, #16
 80089ce:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80089d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80089d4:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 80089d6:	2305      	movs	r3, #5
 80089d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 80089da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80089de:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 80089e0:	2301      	movs	r3, #1
 80089e2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 80089e4:	2300      	movs	r3, #0
 80089e6:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80089e8:	f107 0320 	add.w	r3, r7, #32
 80089ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80089f0:	4619      	mov	r1, r3
 80089f2:	6878      	ldr	r0, [r7, #4]
 80089f4:	f7fa faeb 	bl	8002fce <HAL_OSPI_Command>
 80089f8:	4603      	mov	r3, r0
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d001      	beq.n	8008a02 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 80089fe:	2301      	movs	r3, #1
 8008a00:	e00d      	b.n	8008a1e <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008a02:	f107 030c 	add.w	r3, r7, #12
 8008a06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a0a:	4619      	mov	r1, r3
 8008a0c:	6878      	ldr	r0, [r7, #4]
 8008a0e:	f7fa fc75 	bl	80032fc <HAL_OSPI_AutoPolling>
 8008a12:	4603      	mov	r3, r0
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d001      	beq.n	8008a1c <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e000      	b.n	8008a1e <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 8008a1c:	2300      	movs	r3, #0
}
 8008a1e:	4618      	mov	r0, r3
 8008a20:	3770      	adds	r7, #112	; 0x70
 8008a22:	46bd      	mov	sp, r7
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b09c      	sub	sp, #112	; 0x70
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]
 8008a2e:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008a30:	2300      	movs	r3, #0
 8008a32:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008a34:	2300      	movs	r3, #0
 8008a36:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8008a38:	2305      	movs	r3, #5
 8008a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8008a40:	2300      	movs	r3, #0
 8008a42:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008a44:	2300      	movs	r3, #0
 8008a46:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008a4c:	2300      	movs	r3, #0
 8008a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8008a50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008a54:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 8008a56:	2301      	movs	r3, #1
 8008a58:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8008a62:	2300      	movs	r3, #0
 8008a64:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008a66:	2300      	movs	r3, #0
 8008a68:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8008a72:	2300      	movs	r3, #0
 8008a74:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8008a76:	2310      	movs	r3, #16
 8008a78:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8008a7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008a7e:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008a80:	f107 0320 	add.w	r3, r7, #32
 8008a84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f7fa fa9f 	bl	8002fce <HAL_OSPI_Command>
 8008a90:	4603      	mov	r3, r0
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d001      	beq.n	8008a9a <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	e00c      	b.n	8008ab4 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 8008a9a:	f107 030c 	add.w	r3, r7, #12
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	4619      	mov	r1, r3
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f7fa fc2a 	bl	80032fc <HAL_OSPI_AutoPolling>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d001      	beq.n	8008ab2 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8008aae:	2301      	movs	r3, #1
 8008ab0:	e000      	b.n	8008ab4 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8008ab2:	2300      	movs	r3, #0
}
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	3770      	adds	r7, #112	; 0x70
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	bd80      	pop	{r7, pc}

08008abc <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b098      	sub	sp, #96	; 0x60
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	460b      	mov	r3, r1
 8008ac6:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008acc:	2300      	movs	r3, #0
 8008ace:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8008ad0:	2305      	movs	r3, #5
 8008ad2:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008adc:	2300      	movs	r3, #0
 8008ade:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8008ae0:	2300      	movs	r3, #0
 8008ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8008ae8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008aec:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8008aee:	2300      	movs	r3, #0
 8008af0:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8008af2:	2300      	movs	r3, #0
 8008af4:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8008af6:	2301      	movs	r3, #1
 8008af8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8008afa:	2300      	movs	r3, #0
 8008afc:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008afe:	2300      	movs	r3, #0
 8008b00:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008b02:	f107 0310 	add.w	r3, r7, #16
 8008b06:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	6878      	ldr	r0, [r7, #4]
 8008b0e:	f7fa fa5e 	bl	8002fce <HAL_OSPI_Command>
 8008b12:	4603      	mov	r3, r0
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d001      	beq.n	8008b1c <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8008b18:	2301      	movs	r3, #1
 8008b1a:	e077      	b.n	8008c0c <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008b1c:	f107 030f 	add.w	r3, r7, #15
 8008b20:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b24:	4619      	mov	r1, r3
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f7fa fb45 	bl	80031b6 <HAL_OSPI_Receive>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d001      	beq.n	8008b36 <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e06a      	b.n	8008c0c <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f7ff ff19 	bl	800896e <QSPI_WriteEnable>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d001      	beq.n	8008b46 <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	e062      	b.n	8008c0c <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8008b46:	78fb      	ldrb	r3, [r7, #3]
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	d105      	bne.n	8008b58 <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8008b4c:	7bfb      	ldrb	r3, [r7, #15]
 8008b4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	73fb      	strb	r3, [r7, #15]
 8008b56:	e004      	b.n	8008b62 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8008b58:	7bfb      	ldrb	r3, [r7, #15]
 8008b5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8008b62:	2301      	movs	r3, #1
 8008b64:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008b66:	f107 0310 	add.w	r3, r7, #16
 8008b6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b6e:	4619      	mov	r1, r3
 8008b70:	6878      	ldr	r0, [r7, #4]
 8008b72:	f7fa fa2c 	bl	8002fce <HAL_OSPI_Command>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d001      	beq.n	8008b80 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8008b7c:	2301      	movs	r3, #1
 8008b7e:	e045      	b.n	8008c0c <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008b80:	f107 030f 	add.w	r3, r7, #15
 8008b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b88:	4619      	mov	r1, r3
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f7fa faa0 	bl	80030d0 <HAL_OSPI_Transmit>
 8008b90:	4603      	mov	r3, r0
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d001      	beq.n	8008b9a <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e038      	b.n	8008c0c <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8008b9a:	f241 3188 	movw	r1, #5000	; 0x1388
 8008b9e:	6878      	ldr	r0, [r7, #4]
 8008ba0:	f7ff ff41 	bl	8008a26 <QSPI_AutoPollingMemReady>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d001      	beq.n	8008bae <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 8008baa:	2301      	movs	r3, #1
 8008bac:	e02e      	b.n	8008c0c <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8008bae:	2305      	movs	r3, #5
 8008bb0:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008bb2:	f107 0310 	add.w	r3, r7, #16
 8008bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bba:	4619      	mov	r1, r3
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7fa fa06 	bl	8002fce <HAL_OSPI_Command>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d001      	beq.n	8008bcc <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	e01f      	b.n	8008c0c <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008bcc:	f107 030f 	add.w	r3, r7, #15
 8008bd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f7fa faed 	bl	80031b6 <HAL_OSPI_Receive>
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d001      	beq.n	8008be6 <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8008be2:	2301      	movs	r3, #1
 8008be4:	e012      	b.n	8008c0c <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8008be6:	7bfb      	ldrb	r3, [r7, #15]
 8008be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d102      	bne.n	8008bf6 <QSPI_QuadMode+0x13a>
 8008bf0:	78fb      	ldrb	r3, [r7, #3]
 8008bf2:	2b01      	cmp	r3, #1
 8008bf4:	d007      	beq.n	8008c06 <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8008bf6:	7bfb      	ldrb	r3, [r7, #15]
 8008bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d004      	beq.n	8008c0a <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8008c00:	78fb      	ldrb	r3, [r7, #3]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d101      	bne.n	8008c0a <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8008c06:	2301      	movs	r3, #1
 8008c08:	e000      	b.n	8008c0c <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8008c0a:	2300      	movs	r3, #0
}
 8008c0c:	4618      	mov	r0, r3
 8008c0e:	3760      	adds	r7, #96	; 0x60
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b098      	sub	sp, #96	; 0x60
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008c20:	2300      	movs	r3, #0
 8008c22:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008c24:	2300      	movs	r3, #0
 8008c26:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8008c28:	2305      	movs	r3, #5
 8008c2a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8008c2c:	2301      	movs	r3, #1
 8008c2e:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8008c30:	2300      	movs	r3, #0
 8008c32:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008c34:	2300      	movs	r3, #0
 8008c36:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8008c38:	2300      	movs	r3, #0
 8008c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8008c40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008c44:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8008c46:	2300      	movs	r3, #0
 8008c48:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8008c4e:	2301      	movs	r3, #1
 8008c50:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8008c52:	2300      	movs	r3, #0
 8008c54:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008c56:	2300      	movs	r3, #0
 8008c58:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008c5a:	f107 0310 	add.w	r3, r7, #16
 8008c5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f7fa f9b2 	bl	8002fce <HAL_OSPI_Command>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d001      	beq.n	8008c74 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8008c70:	2301      	movs	r3, #1
 8008c72:	e09a      	b.n	8008daa <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008c74:	f107 030c 	add.w	r3, r7, #12
 8008c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f7fa fa99 	bl	80031b6 <HAL_OSPI_Receive>
 8008c84:	4603      	mov	r3, r0
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d001      	beq.n	8008c8e <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8008c8a:	2301      	movs	r3, #1
 8008c8c:	e08d      	b.n	8008daa <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8008c8e:	2315      	movs	r3, #21
 8008c90:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8008c92:	2302      	movs	r3, #2
 8008c94:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008c96:	f107 0310 	add.w	r3, r7, #16
 8008c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c9e:	4619      	mov	r1, r3
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f7fa f994 	bl	8002fce <HAL_OSPI_Command>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d001      	beq.n	8008cb0 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8008cac:	2301      	movs	r3, #1
 8008cae:	e07c      	b.n	8008daa <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008cb0:	f107 030c 	add.w	r3, r7, #12
 8008cb4:	3301      	adds	r3, #1
 8008cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cba:	4619      	mov	r1, r3
 8008cbc:	6878      	ldr	r0, [r7, #4]
 8008cbe:	f7fa fa7a 	bl	80031b6 <HAL_OSPI_Receive>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d001      	beq.n	8008ccc <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8008cc8:	2301      	movs	r3, #1
 8008cca:	e06e      	b.n	8008daa <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f7ff fe4e 	bl	800896e <QSPI_WriteEnable>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d001      	beq.n	8008cdc <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8008cd8:	2301      	movs	r3, #1
 8008cda:	e066      	b.n	8008daa <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8008cdc:	78fb      	ldrb	r3, [r7, #3]
 8008cde:	2b01      	cmp	r3, #1
 8008ce0:	d105      	bne.n	8008cee <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8008ce2:	7bbb      	ldrb	r3, [r7, #14]
 8008ce4:	f043 0302 	orr.w	r3, r3, #2
 8008ce8:	b2db      	uxtb	r3, r3
 8008cea:	73bb      	strb	r3, [r7, #14]
 8008cec:	e004      	b.n	8008cf8 <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8008cee:	7bbb      	ldrb	r3, [r7, #14]
 8008cf0:	f023 0302 	bic.w	r3, r3, #2
 8008cf4:	b2db      	uxtb	r3, r3
 8008cf6:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8008cfc:	2303      	movs	r3, #3
 8008cfe:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d00:	f107 0310 	add.w	r3, r7, #16
 8008d04:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d08:	4619      	mov	r1, r3
 8008d0a:	6878      	ldr	r0, [r7, #4]
 8008d0c:	f7fa f95f 	bl	8002fce <HAL_OSPI_Command>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e047      	b.n	8008daa <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d1a:	f107 030c 	add.w	r3, r7, #12
 8008d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d22:	4619      	mov	r1, r3
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7fa f9d3 	bl	80030d0 <HAL_OSPI_Transmit>
 8008d2a:	4603      	mov	r3, r0
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d001      	beq.n	8008d34 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8008d30:	2301      	movs	r3, #1
 8008d32:	e03a      	b.n	8008daa <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8008d34:	f241 3188 	movw	r1, #5000	; 0x1388
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f7ff fe74 	bl	8008a26 <QSPI_AutoPollingMemReady>
 8008d3e:	4603      	mov	r3, r0
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d001      	beq.n	8008d48 <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e030      	b.n	8008daa <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8008d48:	2315      	movs	r3, #21
 8008d4a:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8008d4c:	2302      	movs	r3, #2
 8008d4e:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d50:	f107 0310 	add.w	r3, r7, #16
 8008d54:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d58:	4619      	mov	r1, r3
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f7fa f937 	bl	8002fce <HAL_OSPI_Command>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d001      	beq.n	8008d6a <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	e01f      	b.n	8008daa <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008d6a:	f107 030c 	add.w	r3, r7, #12
 8008d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d72:	4619      	mov	r1, r3
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f7fa fa1e 	bl	80031b6 <HAL_OSPI_Receive>
 8008d7a:	4603      	mov	r3, r0
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d001      	beq.n	8008d84 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8008d80:	2301      	movs	r3, #1
 8008d82:	e012      	b.n	8008daa <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8008d84:	7b7b      	ldrb	r3, [r7, #13]
 8008d86:	f003 0302 	and.w	r3, r3, #2
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d102      	bne.n	8008d94 <QSPI_HighPerfMode+0x180>
 8008d8e:	78fb      	ldrb	r3, [r7, #3]
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d007      	beq.n	8008da4 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8008d94:	7b7b      	ldrb	r3, [r7, #13]
 8008d96:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d004      	beq.n	8008da8 <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8008d9e:	78fb      	ldrb	r3, [r7, #3]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d101      	bne.n	8008da8 <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8008da4:	2301      	movs	r3, #1
 8008da6:	e000      	b.n	8008daa <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3760      	adds	r7, #96	; 0x60
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}
	...

08008db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008db4:	b480      	push	{r7}
 8008db6:	b083      	sub	sp, #12
 8008db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008dba:	4b0f      	ldr	r3, [pc, #60]	; (8008df8 <HAL_MspInit+0x44>)
 8008dbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dbe:	4a0e      	ldr	r2, [pc, #56]	; (8008df8 <HAL_MspInit+0x44>)
 8008dc0:	f043 0301 	orr.w	r3, r3, #1
 8008dc4:	6613      	str	r3, [r2, #96]	; 0x60
 8008dc6:	4b0c      	ldr	r3, [pc, #48]	; (8008df8 <HAL_MspInit+0x44>)
 8008dc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008dca:	f003 0301 	and.w	r3, r3, #1
 8008dce:	607b      	str	r3, [r7, #4]
 8008dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008dd2:	4b09      	ldr	r3, [pc, #36]	; (8008df8 <HAL_MspInit+0x44>)
 8008dd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dd6:	4a08      	ldr	r2, [pc, #32]	; (8008df8 <HAL_MspInit+0x44>)
 8008dd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ddc:	6593      	str	r3, [r2, #88]	; 0x58
 8008dde:	4b06      	ldr	r3, [pc, #24]	; (8008df8 <HAL_MspInit+0x44>)
 8008de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008de6:	603b      	str	r3, [r7, #0]
 8008de8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008dea:	bf00      	nop
 8008dec:	370c      	adds	r7, #12
 8008dee:	46bd      	mov	sp, r7
 8008df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df4:	4770      	bx	lr
 8008df6:	bf00      	nop
 8008df8:	40021000 	.word	0x40021000

08008dfc <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b08a      	sub	sp, #40	; 0x28
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e04:	f107 0314 	add.w	r3, r7, #20
 8008e08:	2200      	movs	r2, #0
 8008e0a:	601a      	str	r2, [r3, #0]
 8008e0c:	605a      	str	r2, [r3, #4]
 8008e0e:	609a      	str	r2, [r3, #8]
 8008e10:	60da      	str	r2, [r3, #12]
 8008e12:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a2b      	ldr	r2, [pc, #172]	; (8008ec8 <HAL_DAC_MspInit+0xcc>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d14f      	bne.n	8008ebe <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8008e1e:	4b2b      	ldr	r3, [pc, #172]	; (8008ecc <HAL_DAC_MspInit+0xd0>)
 8008e20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e22:	4a2a      	ldr	r2, [pc, #168]	; (8008ecc <HAL_DAC_MspInit+0xd0>)
 8008e24:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008e28:	6593      	str	r3, [r2, #88]	; 0x58
 8008e2a:	4b28      	ldr	r3, [pc, #160]	; (8008ecc <HAL_DAC_MspInit+0xd0>)
 8008e2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008e32:	613b      	str	r3, [r7, #16]
 8008e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e36:	4b25      	ldr	r3, [pc, #148]	; (8008ecc <HAL_DAC_MspInit+0xd0>)
 8008e38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e3a:	4a24      	ldr	r2, [pc, #144]	; (8008ecc <HAL_DAC_MspInit+0xd0>)
 8008e3c:	f043 0301 	orr.w	r3, r3, #1
 8008e40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008e42:	4b22      	ldr	r3, [pc, #136]	; (8008ecc <HAL_DAC_MspInit+0xd0>)
 8008e44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8008e4e:	2310      	movs	r3, #16
 8008e50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008e52:	2303      	movs	r3, #3
 8008e54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e56:	2300      	movs	r3, #0
 8008e58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e5a:	f107 0314 	add.w	r3, r7, #20
 8008e5e:	4619      	mov	r1, r3
 8008e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008e64:	f7f8 feea 	bl	8001c3c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8008e68:	4b19      	ldr	r3, [pc, #100]	; (8008ed0 <HAL_DAC_MspInit+0xd4>)
 8008e6a:	4a1a      	ldr	r2, [pc, #104]	; (8008ed4 <HAL_DAC_MspInit+0xd8>)
 8008e6c:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8008e6e:	4b18      	ldr	r3, [pc, #96]	; (8008ed0 <HAL_DAC_MspInit+0xd4>)
 8008e70:	2206      	movs	r2, #6
 8008e72:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8008e74:	4b16      	ldr	r3, [pc, #88]	; (8008ed0 <HAL_DAC_MspInit+0xd4>)
 8008e76:	2210      	movs	r2, #16
 8008e78:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008e7a:	4b15      	ldr	r3, [pc, #84]	; (8008ed0 <HAL_DAC_MspInit+0xd4>)
 8008e7c:	2200      	movs	r2, #0
 8008e7e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008e80:	4b13      	ldr	r3, [pc, #76]	; (8008ed0 <HAL_DAC_MspInit+0xd4>)
 8008e82:	2280      	movs	r2, #128	; 0x80
 8008e84:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008e86:	4b12      	ldr	r3, [pc, #72]	; (8008ed0 <HAL_DAC_MspInit+0xd4>)
 8008e88:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008e8c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008e8e:	4b10      	ldr	r3, [pc, #64]	; (8008ed0 <HAL_DAC_MspInit+0xd4>)
 8008e90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e94:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8008e96:	4b0e      	ldr	r3, [pc, #56]	; (8008ed0 <HAL_DAC_MspInit+0xd4>)
 8008e98:	2200      	movs	r2, #0
 8008e9a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8008e9c:	4b0c      	ldr	r3, [pc, #48]	; (8008ed0 <HAL_DAC_MspInit+0xd4>)
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8008ea2:	480b      	ldr	r0, [pc, #44]	; (8008ed0 <HAL_DAC_MspInit+0xd4>)
 8008ea4:	f7f8 fb9c 	bl	80015e0 <HAL_DMA_Init>
 8008ea8:	4603      	mov	r3, r0
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d001      	beq.n	8008eb2 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8008eae:	f7ff f989 	bl	80081c4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	4a06      	ldr	r2, [pc, #24]	; (8008ed0 <HAL_DAC_MspInit+0xd4>)
 8008eb6:	609a      	str	r2, [r3, #8]
 8008eb8:	4a05      	ldr	r2, [pc, #20]	; (8008ed0 <HAL_DAC_MspInit+0xd4>)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8008ebe:	bf00      	nop
 8008ec0:	3728      	adds	r7, #40	; 0x28
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	bd80      	pop	{r7, pc}
 8008ec6:	bf00      	nop
 8008ec8:	40007400 	.word	0x40007400
 8008ecc:	40021000 	.word	0x40021000
 8008ed0:	200000cc 	.word	0x200000cc
 8008ed4:	40020008 	.word	0x40020008

08008ed8 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b0ae      	sub	sp, #184	; 0xb8
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ee0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	601a      	str	r2, [r3, #0]
 8008ee8:	605a      	str	r2, [r3, #4]
 8008eea:	609a      	str	r2, [r3, #8]
 8008eec:	60da      	str	r2, [r3, #12]
 8008eee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008ef0:	f107 0310 	add.w	r3, r7, #16
 8008ef4:	2294      	movs	r2, #148	; 0x94
 8008ef6:	2100      	movs	r1, #0
 8008ef8:	4618      	mov	r0, r3
 8008efa:	f000 fbcb 	bl	8009694 <memset>
  if(DFSDM1_Init == 0)
 8008efe:	4b45      	ldr	r3, [pc, #276]	; (8009014 <HAL_DFSDM_FilterMspInit+0x13c>)
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d14b      	bne.n	8008f9e <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8008f06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008f0a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008f12:	f107 0310 	add.w	r3, r7, #16
 8008f16:	4618      	mov	r0, r3
 8008f18:	f7fb ffa0 	bl	8004e5c <HAL_RCCEx_PeriphCLKConfig>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d001      	beq.n	8008f26 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8008f22:	f7ff f94f 	bl	80081c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8008f26:	4b3c      	ldr	r3, [pc, #240]	; (8009018 <HAL_DFSDM_FilterMspInit+0x140>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3301      	adds	r3, #1
 8008f2c:	4a3a      	ldr	r2, [pc, #232]	; (8009018 <HAL_DFSDM_FilterMspInit+0x140>)
 8008f2e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8008f30:	4b39      	ldr	r3, [pc, #228]	; (8009018 <HAL_DFSDM_FilterMspInit+0x140>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d10b      	bne.n	8008f50 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8008f38:	4b38      	ldr	r3, [pc, #224]	; (800901c <HAL_DFSDM_FilterMspInit+0x144>)
 8008f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f3c:	4a37      	ldr	r2, [pc, #220]	; (800901c <HAL_DFSDM_FilterMspInit+0x144>)
 8008f3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f42:	6613      	str	r3, [r2, #96]	; 0x60
 8008f44:	4b35      	ldr	r3, [pc, #212]	; (800901c <HAL_DFSDM_FilterMspInit+0x144>)
 8008f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008f48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008f4c:	60fb      	str	r3, [r7, #12]
 8008f4e:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8008f50:	4b32      	ldr	r3, [pc, #200]	; (800901c <HAL_DFSDM_FilterMspInit+0x144>)
 8008f52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f54:	4a31      	ldr	r2, [pc, #196]	; (800901c <HAL_DFSDM_FilterMspInit+0x144>)
 8008f56:	f043 0310 	orr.w	r3, r3, #16
 8008f5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008f5c:	4b2f      	ldr	r3, [pc, #188]	; (800901c <HAL_DFSDM_FilterMspInit+0x144>)
 8008f5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008f60:	f003 0310 	and.w	r3, r3, #16
 8008f64:	60bb      	str	r3, [r7, #8]
 8008f66:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8008f68:	f44f 7320 	mov.w	r3, #640	; 0x280
 8008f6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008f70:	2302      	movs	r3, #2
 8008f72:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f76:	2300      	movs	r3, #0
 8008f78:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8008f82:	2306      	movs	r3, #6
 8008f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008f88:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	4824      	ldr	r0, [pc, #144]	; (8009020 <HAL_DFSDM_FilterMspInit+0x148>)
 8008f90:	f7f8 fe54 	bl	8001c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8008f94:	4b1f      	ldr	r3, [pc, #124]	; (8009014 <HAL_DFSDM_FilterMspInit+0x13c>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	4a1e      	ldr	r2, [pc, #120]	; (8009014 <HAL_DFSDM_FilterMspInit+0x13c>)
 8008f9c:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a20      	ldr	r2, [pc, #128]	; (8009024 <HAL_DFSDM_FilterMspInit+0x14c>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d130      	bne.n	800900a <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 8008fa8:	4b1f      	ldr	r3, [pc, #124]	; (8009028 <HAL_DFSDM_FilterMspInit+0x150>)
 8008faa:	4a20      	ldr	r2, [pc, #128]	; (800902c <HAL_DFSDM_FilterMspInit+0x154>)
 8008fac:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8008fae:	4b1e      	ldr	r3, [pc, #120]	; (8009028 <HAL_DFSDM_FilterMspInit+0x150>)
 8008fb0:	2256      	movs	r2, #86	; 0x56
 8008fb2:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008fb4:	4b1c      	ldr	r3, [pc, #112]	; (8009028 <HAL_DFSDM_FilterMspInit+0x150>)
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8008fba:	4b1b      	ldr	r3, [pc, #108]	; (8009028 <HAL_DFSDM_FilterMspInit+0x150>)
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8008fc0:	4b19      	ldr	r3, [pc, #100]	; (8009028 <HAL_DFSDM_FilterMspInit+0x150>)
 8008fc2:	2280      	movs	r2, #128	; 0x80
 8008fc4:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008fc6:	4b18      	ldr	r3, [pc, #96]	; (8009028 <HAL_DFSDM_FilterMspInit+0x150>)
 8008fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008fcc:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008fce:	4b16      	ldr	r3, [pc, #88]	; (8009028 <HAL_DFSDM_FilterMspInit+0x150>)
 8008fd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008fd4:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8008fd6:	4b14      	ldr	r3, [pc, #80]	; (8009028 <HAL_DFSDM_FilterMspInit+0x150>)
 8008fd8:	2200      	movs	r2, #0
 8008fda:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8008fdc:	4b12      	ldr	r3, [pc, #72]	; (8009028 <HAL_DFSDM_FilterMspInit+0x150>)
 8008fde:	2200      	movs	r2, #0
 8008fe0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8008fe2:	4811      	ldr	r0, [pc, #68]	; (8009028 <HAL_DFSDM_FilterMspInit+0x150>)
 8008fe4:	f7f8 fafc 	bl	80015e0 <HAL_DMA_Init>
 8008fe8:	4603      	mov	r3, r0
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d001      	beq.n	8008ff2 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8008fee:	f7ff f8e9 	bl	80081c4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	4a0c      	ldr	r2, [pc, #48]	; (8009028 <HAL_DFSDM_FilterMspInit+0x150>)
 8008ff6:	62da      	str	r2, [r3, #44]	; 0x2c
 8008ff8:	4a0b      	ldr	r2, [pc, #44]	; (8009028 <HAL_DFSDM_FilterMspInit+0x150>)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	4a09      	ldr	r2, [pc, #36]	; (8009028 <HAL_DFSDM_FilterMspInit+0x150>)
 8009002:	629a      	str	r2, [r3, #40]	; 0x28
 8009004:	4a08      	ldr	r2, [pc, #32]	; (8009028 <HAL_DFSDM_FilterMspInit+0x150>)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800900a:	bf00      	nop
 800900c:	37b8      	adds	r7, #184	; 0xb8
 800900e:	46bd      	mov	sp, r7
 8009010:	bd80      	pop	{r7, pc}
 8009012:	bf00      	nop
 8009014:	20052500 	.word	0x20052500
 8009018:	200524fc 	.word	0x200524fc
 800901c:	40021000 	.word	0x40021000
 8009020:	48001000 	.word	0x48001000
 8009024:	40016100 	.word	0x40016100
 8009028:	200001b8 	.word	0x200001b8
 800902c:	4002001c 	.word	0x4002001c

08009030 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b0ae      	sub	sp, #184	; 0xb8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009038:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800903c:	2200      	movs	r2, #0
 800903e:	601a      	str	r2, [r3, #0]
 8009040:	605a      	str	r2, [r3, #4]
 8009042:	609a      	str	r2, [r3, #8]
 8009044:	60da      	str	r2, [r3, #12]
 8009046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009048:	f107 0310 	add.w	r3, r7, #16
 800904c:	2294      	movs	r2, #148	; 0x94
 800904e:	2100      	movs	r1, #0
 8009050:	4618      	mov	r0, r3
 8009052:	f000 fb1f 	bl	8009694 <memset>
  if(DFSDM1_Init == 0)
 8009056:	4b2a      	ldr	r3, [pc, #168]	; (8009100 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d14b      	bne.n	80090f6 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800905e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009062:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8009064:	2300      	movs	r3, #0
 8009066:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800906a:	f107 0310 	add.w	r3, r7, #16
 800906e:	4618      	mov	r0, r3
 8009070:	f7fb fef4 	bl	8004e5c <HAL_RCCEx_PeriphCLKConfig>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d001      	beq.n	800907e <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800907a:	f7ff f8a3 	bl	80081c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800907e:	4b21      	ldr	r3, [pc, #132]	; (8009104 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	3301      	adds	r3, #1
 8009084:	4a1f      	ldr	r2, [pc, #124]	; (8009104 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8009086:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8009088:	4b1e      	ldr	r3, [pc, #120]	; (8009104 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2b01      	cmp	r3, #1
 800908e:	d10b      	bne.n	80090a8 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8009090:	4b1d      	ldr	r3, [pc, #116]	; (8009108 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8009092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009094:	4a1c      	ldr	r2, [pc, #112]	; (8009108 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8009096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800909a:	6613      	str	r3, [r2, #96]	; 0x60
 800909c:	4b1a      	ldr	r3, [pc, #104]	; (8009108 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800909e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80090a4:	60fb      	str	r3, [r7, #12]
 80090a6:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80090a8:	4b17      	ldr	r3, [pc, #92]	; (8009108 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80090aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090ac:	4a16      	ldr	r2, [pc, #88]	; (8009108 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80090ae:	f043 0310 	orr.w	r3, r3, #16
 80090b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80090b4:	4b14      	ldr	r3, [pc, #80]	; (8009108 <HAL_DFSDM_ChannelMspInit+0xd8>)
 80090b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80090b8:	f003 0310 	and.w	r3, r3, #16
 80090bc:	60bb      	str	r3, [r7, #8]
 80090be:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80090c0:	f44f 7320 	mov.w	r3, #640	; 0x280
 80090c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090c8:	2302      	movs	r3, #2
 80090ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090ce:	2300      	movs	r3, #0
 80090d0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090d4:	2300      	movs	r3, #0
 80090d6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80090da:	2306      	movs	r3, #6
 80090dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80090e0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80090e4:	4619      	mov	r1, r3
 80090e6:	4809      	ldr	r0, [pc, #36]	; (800910c <HAL_DFSDM_ChannelMspInit+0xdc>)
 80090e8:	f7f8 fda8 	bl	8001c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80090ec:	4b04      	ldr	r3, [pc, #16]	; (8009100 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3301      	adds	r3, #1
 80090f2:	4a03      	ldr	r2, [pc, #12]	; (8009100 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80090f4:	6013      	str	r3, [r2, #0]
  }

}
 80090f6:	bf00      	nop
 80090f8:	37b8      	adds	r7, #184	; 0xb8
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	20052500 	.word	0x20052500
 8009104:	200524fc 	.word	0x200524fc
 8009108:	40021000 	.word	0x40021000
 800910c:	48001000 	.word	0x48001000

08009110 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b0ae      	sub	sp, #184	; 0xb8
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009118:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800911c:	2200      	movs	r2, #0
 800911e:	601a      	str	r2, [r3, #0]
 8009120:	605a      	str	r2, [r3, #4]
 8009122:	609a      	str	r2, [r3, #8]
 8009124:	60da      	str	r2, [r3, #12]
 8009126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009128:	f107 0310 	add.w	r3, r7, #16
 800912c:	2294      	movs	r2, #148	; 0x94
 800912e:	2100      	movs	r1, #0
 8009130:	4618      	mov	r0, r3
 8009132:	f000 faaf 	bl	8009694 <memset>
  if(hi2c->Instance==I2C2)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	4a21      	ldr	r2, [pc, #132]	; (80091c0 <HAL_I2C_MspInit+0xb0>)
 800913c:	4293      	cmp	r3, r2
 800913e:	d13b      	bne.n	80091b8 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8009140:	2380      	movs	r3, #128	; 0x80
 8009142:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8009144:	2300      	movs	r3, #0
 8009146:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009148:	f107 0310 	add.w	r3, r7, #16
 800914c:	4618      	mov	r0, r3
 800914e:	f7fb fe85 	bl	8004e5c <HAL_RCCEx_PeriphCLKConfig>
 8009152:	4603      	mov	r3, r0
 8009154:	2b00      	cmp	r3, #0
 8009156:	d001      	beq.n	800915c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8009158:	f7ff f834 	bl	80081c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800915c:	4b19      	ldr	r3, [pc, #100]	; (80091c4 <HAL_I2C_MspInit+0xb4>)
 800915e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009160:	4a18      	ldr	r2, [pc, #96]	; (80091c4 <HAL_I2C_MspInit+0xb4>)
 8009162:	f043 0302 	orr.w	r3, r3, #2
 8009166:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009168:	4b16      	ldr	r3, [pc, #88]	; (80091c4 <HAL_I2C_MspInit+0xb4>)
 800916a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800916c:	f003 0302 	and.w	r3, r3, #2
 8009170:	60fb      	str	r3, [r7, #12]
 8009172:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8009174:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8009178:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800917c:	2312      	movs	r3, #18
 800917e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009182:	2300      	movs	r3, #0
 8009184:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009188:	2303      	movs	r3, #3
 800918a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800918e:	2304      	movs	r3, #4
 8009190:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009194:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009198:	4619      	mov	r1, r3
 800919a:	480b      	ldr	r0, [pc, #44]	; (80091c8 <HAL_I2C_MspInit+0xb8>)
 800919c:	f7f8 fd4e 	bl	8001c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80091a0:	4b08      	ldr	r3, [pc, #32]	; (80091c4 <HAL_I2C_MspInit+0xb4>)
 80091a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091a4:	4a07      	ldr	r2, [pc, #28]	; (80091c4 <HAL_I2C_MspInit+0xb4>)
 80091a6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80091aa:	6593      	str	r3, [r2, #88]	; 0x58
 80091ac:	4b05      	ldr	r3, [pc, #20]	; (80091c4 <HAL_I2C_MspInit+0xb4>)
 80091ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80091b4:	60bb      	str	r3, [r7, #8]
 80091b6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80091b8:	bf00      	nop
 80091ba:	37b8      	adds	r7, #184	; 0xb8
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	40005800 	.word	0x40005800
 80091c4:	40021000 	.word	0x40021000
 80091c8:	48000400 	.word	0x48000400

080091cc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b082      	sub	sp, #8
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a0b      	ldr	r2, [pc, #44]	; (8009208 <HAL_I2C_MspDeInit+0x3c>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d10f      	bne.n	80091fe <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80091de:	4b0b      	ldr	r3, [pc, #44]	; (800920c <HAL_I2C_MspDeInit+0x40>)
 80091e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091e2:	4a0a      	ldr	r2, [pc, #40]	; (800920c <HAL_I2C_MspDeInit+0x40>)
 80091e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80091e8:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 80091ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80091ee:	4808      	ldr	r0, [pc, #32]	; (8009210 <HAL_I2C_MspDeInit+0x44>)
 80091f0:	f7f8 feb6 	bl	8001f60 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 80091f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80091f8:	4805      	ldr	r0, [pc, #20]	; (8009210 <HAL_I2C_MspDeInit+0x44>)
 80091fa:	f7f8 feb1 	bl	8001f60 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 80091fe:	bf00      	nop
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	40005800 	.word	0x40005800
 800920c:	40021000 	.word	0x40021000
 8009210:	48000400 	.word	0x48000400

08009214 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8009214:	b580      	push	{r7, lr}
 8009216:	b0b0      	sub	sp, #192	; 0xc0
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800921c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8009220:	2200      	movs	r2, #0
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	605a      	str	r2, [r3, #4]
 8009226:	609a      	str	r2, [r3, #8]
 8009228:	60da      	str	r2, [r3, #12]
 800922a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800922c:	f107 0318 	add.w	r3, r7, #24
 8009230:	2294      	movs	r2, #148	; 0x94
 8009232:	2100      	movs	r1, #0
 8009234:	4618      	mov	r0, r3
 8009236:	f000 fa2d 	bl	8009694 <memset>
  if(hospi->Instance==OCTOSPI1)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a28      	ldr	r2, [pc, #160]	; (80092e0 <HAL_OSPI_MspInit+0xcc>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d149      	bne.n	80092d8 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8009244:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009248:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800924a:	2300      	movs	r3, #0
 800924c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009250:	f107 0318 	add.w	r3, r7, #24
 8009254:	4618      	mov	r0, r3
 8009256:	f7fb fe01 	bl	8004e5c <HAL_RCCEx_PeriphCLKConfig>
 800925a:	4603      	mov	r3, r0
 800925c:	2b00      	cmp	r3, #0
 800925e:	d001      	beq.n	8009264 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8009260:	f7fe ffb0 	bl	80081c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8009264:	4b1f      	ldr	r3, [pc, #124]	; (80092e4 <HAL_OSPI_MspInit+0xd0>)
 8009266:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009268:	4a1e      	ldr	r2, [pc, #120]	; (80092e4 <HAL_OSPI_MspInit+0xd0>)
 800926a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800926e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009270:	4b1c      	ldr	r3, [pc, #112]	; (80092e4 <HAL_OSPI_MspInit+0xd0>)
 8009272:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009274:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009278:	617b      	str	r3, [r7, #20]
 800927a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800927c:	4b19      	ldr	r3, [pc, #100]	; (80092e4 <HAL_OSPI_MspInit+0xd0>)
 800927e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009280:	4a18      	ldr	r2, [pc, #96]	; (80092e4 <HAL_OSPI_MspInit+0xd0>)
 8009282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009286:	6513      	str	r3, [r2, #80]	; 0x50
 8009288:	4b16      	ldr	r3, [pc, #88]	; (80092e4 <HAL_OSPI_MspInit+0xd0>)
 800928a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800928c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009290:	613b      	str	r3, [r7, #16]
 8009292:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8009294:	4b13      	ldr	r3, [pc, #76]	; (80092e4 <HAL_OSPI_MspInit+0xd0>)
 8009296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009298:	4a12      	ldr	r2, [pc, #72]	; (80092e4 <HAL_OSPI_MspInit+0xd0>)
 800929a:	f043 0310 	orr.w	r3, r3, #16
 800929e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80092a0:	4b10      	ldr	r3, [pc, #64]	; (80092e4 <HAL_OSPI_MspInit+0xd0>)
 80092a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80092a4:	f003 0310 	and.w	r3, r3, #16
 80092a8:	60fb      	str	r3, [r7, #12]
 80092aa:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80092ac:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80092b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80092b4:	2302      	movs	r3, #2
 80092b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80092ba:	2300      	movs	r3, #0
 80092bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092c0:	2303      	movs	r3, #3
 80092c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80092c6:	230a      	movs	r3, #10
 80092c8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80092cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80092d0:	4619      	mov	r1, r3
 80092d2:	4805      	ldr	r0, [pc, #20]	; (80092e8 <HAL_OSPI_MspInit+0xd4>)
 80092d4:	f7f8 fcb2 	bl	8001c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80092d8:	bf00      	nop
 80092da:	37c0      	adds	r7, #192	; 0xc0
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}
 80092e0:	a0001000 	.word	0xa0001000
 80092e4:	40021000 	.word	0x40021000
 80092e8:	48001000 	.word	0x48001000

080092ec <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b082      	sub	sp, #8
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	4a0b      	ldr	r2, [pc, #44]	; (8009328 <HAL_OSPI_MspDeInit+0x3c>)
 80092fa:	4293      	cmp	r3, r2
 80092fc:	d110      	bne.n	8009320 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 80092fe:	4b0b      	ldr	r3, [pc, #44]	; (800932c <HAL_OSPI_MspDeInit+0x40>)
 8009300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009302:	4a0a      	ldr	r2, [pc, #40]	; (800932c <HAL_OSPI_MspDeInit+0x40>)
 8009304:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009308:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800930a:	4b08      	ldr	r3, [pc, #32]	; (800932c <HAL_OSPI_MspDeInit+0x40>)
 800930c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800930e:	4a07      	ldr	r2, [pc, #28]	; (800932c <HAL_OSPI_MspDeInit+0x40>)
 8009310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009314:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8009316:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800931a:	4805      	ldr	r0, [pc, #20]	; (8009330 <HAL_OSPI_MspDeInit+0x44>)
 800931c:	f7f8 fe20 	bl	8001f60 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8009320:	bf00      	nop
 8009322:	3708      	adds	r7, #8
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}
 8009328:	a0001000 	.word	0xa0001000
 800932c:	40021000 	.word	0x40021000
 8009330:	48001000 	.word	0x48001000

08009334 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009344:	d113      	bne.n	800936e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8009346:	4b0c      	ldr	r3, [pc, #48]	; (8009378 <HAL_TIM_Base_MspInit+0x44>)
 8009348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800934a:	4a0b      	ldr	r2, [pc, #44]	; (8009378 <HAL_TIM_Base_MspInit+0x44>)
 800934c:	f043 0301 	orr.w	r3, r3, #1
 8009350:	6593      	str	r3, [r2, #88]	; 0x58
 8009352:	4b09      	ldr	r3, [pc, #36]	; (8009378 <HAL_TIM_Base_MspInit+0x44>)
 8009354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009356:	f003 0301 	and.w	r3, r3, #1
 800935a:	60fb      	str	r3, [r7, #12]
 800935c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800935e:	2200      	movs	r2, #0
 8009360:	2100      	movs	r1, #0
 8009362:	201c      	movs	r0, #28
 8009364:	f7f7 fa3f 	bl	80007e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8009368:	201c      	movs	r0, #28
 800936a:	f7f7 fa58 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800936e:	bf00      	nop
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop
 8009378:	40021000 	.word	0x40021000

0800937c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800937c:	b580      	push	{r7, lr}
 800937e:	b0ae      	sub	sp, #184	; 0xb8
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009384:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8009388:	2200      	movs	r2, #0
 800938a:	601a      	str	r2, [r3, #0]
 800938c:	605a      	str	r2, [r3, #4]
 800938e:	609a      	str	r2, [r3, #8]
 8009390:	60da      	str	r2, [r3, #12]
 8009392:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009394:	f107 0310 	add.w	r3, r7, #16
 8009398:	2294      	movs	r2, #148	; 0x94
 800939a:	2100      	movs	r1, #0
 800939c:	4618      	mov	r0, r3
 800939e:	f000 f979 	bl	8009694 <memset>
  if(huart->Instance==USART1)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	4a25      	ldr	r2, [pc, #148]	; (800943c <HAL_UART_MspInit+0xc0>)
 80093a8:	4293      	cmp	r3, r2
 80093aa:	d142      	bne.n	8009432 <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80093ac:	2301      	movs	r3, #1
 80093ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80093b0:	2300      	movs	r3, #0
 80093b2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80093b4:	f107 0310 	add.w	r3, r7, #16
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7fb fd4f 	bl	8004e5c <HAL_RCCEx_PeriphCLKConfig>
 80093be:	4603      	mov	r3, r0
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d001      	beq.n	80093c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80093c4:	f7fe fefe 	bl	80081c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80093c8:	4b1d      	ldr	r3, [pc, #116]	; (8009440 <HAL_UART_MspInit+0xc4>)
 80093ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093cc:	4a1c      	ldr	r2, [pc, #112]	; (8009440 <HAL_UART_MspInit+0xc4>)
 80093ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093d2:	6613      	str	r3, [r2, #96]	; 0x60
 80093d4:	4b1a      	ldr	r3, [pc, #104]	; (8009440 <HAL_UART_MspInit+0xc4>)
 80093d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093dc:	60fb      	str	r3, [r7, #12]
 80093de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80093e0:	4b17      	ldr	r3, [pc, #92]	; (8009440 <HAL_UART_MspInit+0xc4>)
 80093e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093e4:	4a16      	ldr	r2, [pc, #88]	; (8009440 <HAL_UART_MspInit+0xc4>)
 80093e6:	f043 0302 	orr.w	r3, r3, #2
 80093ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80093ec:	4b14      	ldr	r3, [pc, #80]	; (8009440 <HAL_UART_MspInit+0xc4>)
 80093ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093f0:	f003 0302 	and.w	r3, r3, #2
 80093f4:	60bb      	str	r3, [r7, #8]
 80093f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80093f8:	23c0      	movs	r3, #192	; 0xc0
 80093fa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80093fe:	2302      	movs	r3, #2
 8009400:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009404:	2300      	movs	r3, #0
 8009406:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800940a:	2303      	movs	r3, #3
 800940c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8009410:	2307      	movs	r3, #7
 8009412:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009416:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800941a:	4619      	mov	r1, r3
 800941c:	4809      	ldr	r0, [pc, #36]	; (8009444 <HAL_UART_MspInit+0xc8>)
 800941e:	f7f8 fc0d 	bl	8001c3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009422:	2200      	movs	r2, #0
 8009424:	2100      	movs	r1, #0
 8009426:	2025      	movs	r0, #37	; 0x25
 8009428:	f7f7 f9dd 	bl	80007e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800942c:	2025      	movs	r0, #37	; 0x25
 800942e:	f7f7 f9f6 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009432:	bf00      	nop
 8009434:	37b8      	adds	r7, #184	; 0xb8
 8009436:	46bd      	mov	sp, r7
 8009438:	bd80      	pop	{r7, pc}
 800943a:	bf00      	nop
 800943c:	40013800 	.word	0x40013800
 8009440:	40021000 	.word	0x40021000
 8009444:	48000400 	.word	0x48000400

08009448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009448:	b480      	push	{r7}
 800944a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800944c:	e7fe      	b.n	800944c <NMI_Handler+0x4>

0800944e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800944e:	b480      	push	{r7}
 8009450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009452:	e7fe      	b.n	8009452 <HardFault_Handler+0x4>

08009454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009454:	b480      	push	{r7}
 8009456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009458:	e7fe      	b.n	8009458 <MemManage_Handler+0x4>

0800945a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800945a:	b480      	push	{r7}
 800945c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800945e:	e7fe      	b.n	800945e <BusFault_Handler+0x4>

08009460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009460:	b480      	push	{r7}
 8009462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8009464:	e7fe      	b.n	8009464 <UsageFault_Handler+0x4>

08009466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8009466:	b480      	push	{r7}
 8009468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800946a:	bf00      	nop
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr

08009474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8009474:	b480      	push	{r7}
 8009476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8009478:	bf00      	nop
 800947a:	46bd      	mov	sp, r7
 800947c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009480:	4770      	bx	lr

08009482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8009482:	b480      	push	{r7}
 8009484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8009486:	bf00      	nop
 8009488:	46bd      	mov	sp, r7
 800948a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800948e:	4770      	bx	lr

08009490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8009494:	f7f7 f888 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8009498:	bf00      	nop
 800949a:	bd80      	pop	{r7, pc}

0800949c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80094a0:	4802      	ldr	r0, [pc, #8]	; (80094ac <DMA1_Channel1_IRQHandler+0x10>)
 80094a2:	f7f8 fa7b 	bl	800199c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80094a6:	bf00      	nop
 80094a8:	bd80      	pop	{r7, pc}
 80094aa:	bf00      	nop
 80094ac:	200000cc 	.word	0x200000cc

080094b0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80094b0:	b580      	push	{r7, lr}
 80094b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 80094b4:	4802      	ldr	r0, [pc, #8]	; (80094c0 <DMA1_Channel2_IRQHandler+0x10>)
 80094b6:	f7f8 fa71 	bl	800199c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80094ba:	bf00      	nop
 80094bc:	bd80      	pop	{r7, pc}
 80094be:	bf00      	nop
 80094c0:	200001b8 	.word	0x200001b8

080094c4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80094c8:	4802      	ldr	r0, [pc, #8]	; (80094d4 <TIM2_IRQHandler+0x10>)
 80094ca:	f7fc faa7 	bl	8005a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80094ce:	bf00      	nop
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop
 80094d4:	200002bc 	.word	0x200002bc

080094d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80094d8:	b580      	push	{r7, lr}
 80094da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80094dc:	4802      	ldr	r0, [pc, #8]	; (80094e8 <USART1_IRQHandler+0x10>)
 80094de:	f7fc fee1 	bl	80062a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80094e2:	bf00      	nop
 80094e4:	bd80      	pop	{r7, pc}
 80094e6:	bf00      	nop
 80094e8:	20000308 	.word	0x20000308

080094ec <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pushButton_Pin);
 80094f0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80094f4:	f7f8 fe58 	bl	80021a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80094f8:	bf00      	nop
 80094fa:	bd80      	pop	{r7, pc}

080094fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80094fc:	b480      	push	{r7}
 80094fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8009500:	4b06      	ldr	r3, [pc, #24]	; (800951c <SystemInit+0x20>)
 8009502:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009506:	4a05      	ldr	r2, [pc, #20]	; (800951c <SystemInit+0x20>)
 8009508:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800950c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8009510:	bf00      	nop
 8009512:	46bd      	mov	sp, r7
 8009514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009518:	4770      	bx	lr
 800951a:	bf00      	nop
 800951c:	e000ed00 	.word	0xe000ed00

08009520 <Reset_Handler>:
 8009520:	f8df d034 	ldr.w	sp, [pc, #52]	; 8009558 <LoopForever+0x2>
 8009524:	f7ff ffea 	bl	80094fc <SystemInit>
 8009528:	480c      	ldr	r0, [pc, #48]	; (800955c <LoopForever+0x6>)
 800952a:	490d      	ldr	r1, [pc, #52]	; (8009560 <LoopForever+0xa>)
 800952c:	4a0d      	ldr	r2, [pc, #52]	; (8009564 <LoopForever+0xe>)
 800952e:	2300      	movs	r3, #0
 8009530:	e002      	b.n	8009538 <LoopCopyDataInit>

08009532 <CopyDataInit>:
 8009532:	58d4      	ldr	r4, [r2, r3]
 8009534:	50c4      	str	r4, [r0, r3]
 8009536:	3304      	adds	r3, #4

08009538 <LoopCopyDataInit>:
 8009538:	18c4      	adds	r4, r0, r3
 800953a:	428c      	cmp	r4, r1
 800953c:	d3f9      	bcc.n	8009532 <CopyDataInit>
 800953e:	4a0a      	ldr	r2, [pc, #40]	; (8009568 <LoopForever+0x12>)
 8009540:	4c0a      	ldr	r4, [pc, #40]	; (800956c <LoopForever+0x16>)
 8009542:	2300      	movs	r3, #0
 8009544:	e001      	b.n	800954a <LoopFillZerobss>

08009546 <FillZerobss>:
 8009546:	6013      	str	r3, [r2, #0]
 8009548:	3204      	adds	r2, #4

0800954a <LoopFillZerobss>:
 800954a:	42a2      	cmp	r2, r4
 800954c:	d3fb      	bcc.n	8009546 <FillZerobss>
 800954e:	f000 f87d 	bl	800964c <__libc_init_array>
 8009552:	f7fe f971 	bl	8007838 <main>

08009556 <LoopForever>:
 8009556:	e7fe      	b.n	8009556 <LoopForever>
 8009558:	200a0000 	.word	0x200a0000
 800955c:	20000000 	.word	0x20000000
 8009560:	20000074 	.word	0x20000074
 8009564:	0800973c 	.word	0x0800973c
 8009568:	20000074 	.word	0x20000074
 800956c:	20052504 	.word	0x20052504

08009570 <ADC1_IRQHandler>:
 8009570:	e7fe      	b.n	8009570 <ADC1_IRQHandler>
	...

08009574 <arm_max_f32>:
 8009574:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 8009578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800957a:	4607      	mov	r7, r0
 800957c:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 8009580:	ecf7 7a01 	vldmia	r7!, {s15}
 8009584:	d060      	beq.n	8009648 <arm_max_f32+0xd4>
 8009586:	2400      	movs	r4, #0
 8009588:	3014      	adds	r0, #20
 800958a:	4625      	mov	r5, r4
 800958c:	ea4f 068e 	mov.w	r6, lr, lsl #2
 8009590:	ed10 7a04 	vldr	s14, [r0, #-16]
 8009594:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009598:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800959c:	bf48      	it	mi
 800959e:	eef0 7a47 	vmovmi.f32	s15, s14
 80095a2:	ed10 7a03 	vldr	s14, [r0, #-12]
 80095a6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095aa:	bf48      	it	mi
 80095ac:	1c65      	addmi	r5, r4, #1
 80095ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095b2:	bf48      	it	mi
 80095b4:	eef0 7a47 	vmovmi.f32	s15, s14
 80095b8:	ed10 7a02 	vldr	s14, [r0, #-8]
 80095bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095c0:	bf48      	it	mi
 80095c2:	1ca5      	addmi	r5, r4, #2
 80095c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095c8:	bf48      	it	mi
 80095ca:	eef0 7a47 	vmovmi.f32	s15, s14
 80095ce:	ed10 7a01 	vldr	s14, [r0, #-4]
 80095d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80095d6:	bf48      	it	mi
 80095d8:	1ce5      	addmi	r5, r4, #3
 80095da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095de:	f104 0404 	add.w	r4, r4, #4
 80095e2:	bf44      	itt	mi
 80095e4:	eef0 7a47 	vmovmi.f32	s15, s14
 80095e8:	4625      	movmi	r5, r4
 80095ea:	42a6      	cmp	r6, r4
 80095ec:	f100 0010 	add.w	r0, r0, #16
 80095f0:	d1ce      	bne.n	8009590 <arm_max_f32+0x1c>
 80095f2:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 80095f6:	f01c 0003 	ands.w	r0, ip, #3
 80095fa:	d021      	beq.n	8009640 <arm_max_f32+0xcc>
 80095fc:	ed97 7a00 	vldr	s14, [r7]
 8009600:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009604:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009608:	bfc4      	itt	gt
 800960a:	eef0 7a47 	vmovgt.f32	s15, s14
 800960e:	1a0d      	subgt	r5, r1, r0
 8009610:	3801      	subs	r0, #1
 8009612:	d015      	beq.n	8009640 <arm_max_f32+0xcc>
 8009614:	ed97 7a01 	vldr	s14, [r7, #4]
 8009618:	eef4 7ac7 	vcmpe.f32	s15, s14
 800961c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009620:	bf44      	itt	mi
 8009622:	eef0 7a47 	vmovmi.f32	s15, s14
 8009626:	1a0d      	submi	r5, r1, r0
 8009628:	2801      	cmp	r0, #1
 800962a:	d009      	beq.n	8009640 <arm_max_f32+0xcc>
 800962c:	ed97 7a02 	vldr	s14, [r7, #8]
 8009630:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009634:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009638:	bfc4      	itt	gt
 800963a:	eef0 7a47 	vmovgt.f32	s15, s14
 800963e:	4665      	movgt	r5, ip
 8009640:	edc2 7a00 	vstr	s15, [r2]
 8009644:	601d      	str	r5, [r3, #0]
 8009646:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009648:	4675      	mov	r5, lr
 800964a:	e7d4      	b.n	80095f6 <arm_max_f32+0x82>

0800964c <__libc_init_array>:
 800964c:	b570      	push	{r4, r5, r6, lr}
 800964e:	4d0d      	ldr	r5, [pc, #52]	; (8009684 <__libc_init_array+0x38>)
 8009650:	4c0d      	ldr	r4, [pc, #52]	; (8009688 <__libc_init_array+0x3c>)
 8009652:	1b64      	subs	r4, r4, r5
 8009654:	10a4      	asrs	r4, r4, #2
 8009656:	2600      	movs	r6, #0
 8009658:	42a6      	cmp	r6, r4
 800965a:	d109      	bne.n	8009670 <__libc_init_array+0x24>
 800965c:	4d0b      	ldr	r5, [pc, #44]	; (800968c <__libc_init_array+0x40>)
 800965e:	4c0c      	ldr	r4, [pc, #48]	; (8009690 <__libc_init_array+0x44>)
 8009660:	f000 f820 	bl	80096a4 <_init>
 8009664:	1b64      	subs	r4, r4, r5
 8009666:	10a4      	asrs	r4, r4, #2
 8009668:	2600      	movs	r6, #0
 800966a:	42a6      	cmp	r6, r4
 800966c:	d105      	bne.n	800967a <__libc_init_array+0x2e>
 800966e:	bd70      	pop	{r4, r5, r6, pc}
 8009670:	f855 3b04 	ldr.w	r3, [r5], #4
 8009674:	4798      	blx	r3
 8009676:	3601      	adds	r6, #1
 8009678:	e7ee      	b.n	8009658 <__libc_init_array+0xc>
 800967a:	f855 3b04 	ldr.w	r3, [r5], #4
 800967e:	4798      	blx	r3
 8009680:	3601      	adds	r6, #1
 8009682:	e7f2      	b.n	800966a <__libc_init_array+0x1e>
 8009684:	08009734 	.word	0x08009734
 8009688:	08009734 	.word	0x08009734
 800968c:	08009734 	.word	0x08009734
 8009690:	08009738 	.word	0x08009738

08009694 <memset>:
 8009694:	4402      	add	r2, r0
 8009696:	4603      	mov	r3, r0
 8009698:	4293      	cmp	r3, r2
 800969a:	d100      	bne.n	800969e <memset+0xa>
 800969c:	4770      	bx	lr
 800969e:	f803 1b01 	strb.w	r1, [r3], #1
 80096a2:	e7f9      	b.n	8009698 <memset+0x4>

080096a4 <_init>:
 80096a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096a6:	bf00      	nop
 80096a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096aa:	bc08      	pop	{r3}
 80096ac:	469e      	mov	lr, r3
 80096ae:	4770      	bx	lr

080096b0 <_fini>:
 80096b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096b2:	bf00      	nop
 80096b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096b6:	bc08      	pop	{r3}
 80096b8:	469e      	mov	lr, r3
 80096ba:	4770      	bx	lr
