
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000abcc  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800ad8c  0800ad8c  0001ad8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ae88  0800ae88  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800ae88  0800ae88  0001ae88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ae90  0800ae90  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ae90  0800ae90  0001ae90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ae94  0800ae94  0001ae94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800ae98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00053400  20000078  0800af10  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20053478  0800af10  00023478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026fcb  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000494a  00000000  00000000  00047073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001fd8  00000000  00000000  0004b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e00  00000000  00000000  0004d998  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fd4a  00000000  00000000  0004f798  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024861  00000000  00000000  0007f4e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0012326d  00000000  00000000  000a3d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001c6fb0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008704  00000000  00000000  001c7078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000363  00000000  00000000  001cf77c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000078 	.word	0x20000078
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800ad74 	.word	0x0800ad74

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	2000007c 	.word	0x2000007c
 80001fc:	0800ad74 	.word	0x0800ad74

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000210:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050e:	2003      	movs	r0, #3
 8000510:	f000 f960 	bl	80007d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000514:	200f      	movs	r0, #15
 8000516:	f000 f80d 	bl	8000534 <HAL_InitTick>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d002      	beq.n	8000526 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000520:	2301      	movs	r3, #1
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	e001      	b.n	800052a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000526:	f009 ffaf 	bl	800a488 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800052a:	79fb      	ldrb	r3, [r7, #7]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800053c:	2300      	movs	r3, #0
 800053e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000540:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <HAL_InitTick+0x6c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d023      	beq.n	8000590 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <HAL_InitTick+0x70>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <HAL_InitTick+0x6c>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f96d 	bl	800083e <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d10f      	bne.n	800058a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b0f      	cmp	r3, #15
 800056e:	d809      	bhi.n	8000584 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000570:	2200      	movs	r2, #0
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000578:	f000 f937 	bl	80007ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800057c:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <HAL_InitTick+0x74>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6013      	str	r3, [r2, #0]
 8000582:	e007      	b.n	8000594 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000584:	2301      	movs	r3, #1
 8000586:	73fb      	strb	r3, [r7, #15]
 8000588:	e004      	b.n	8000594 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800058a:	2301      	movs	r3, #1
 800058c:	73fb      	strb	r3, [r7, #15]
 800058e:	e001      	b.n	8000594 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000590:	2301      	movs	r3, #1
 8000592:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000594:	7bfb      	ldrb	r3, [r7, #15]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000004 	.word	0x20000004
 80005a4:	20000074 	.word	0x20000074
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x20>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_IncTick+0x24>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4413      	add	r3, r2
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <HAL_IncTick+0x24>)
 80005be:	6013      	str	r3, [r2, #0]
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000004 	.word	0x20000004
 80005d0:	20000094 	.word	0x20000094

080005d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return uwTick;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <HAL_GetTick+0x14>)
 80005da:	681b      	ldr	r3, [r3, #0]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	20000094 	.word	0x20000094

080005ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f4:	f7ff ffee 	bl	80005d4 <HAL_GetTick>
 80005f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000604:	d005      	beq.n	8000612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_Delay+0x44>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4413      	add	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000612:	bf00      	nop
 8000614:	f7ff ffde 	bl	80005d4 <HAL_GetTick>
 8000618:	4602      	mov	r2, r0
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	429a      	cmp	r2, r3
 8000622:	d8f7      	bhi.n	8000614 <HAL_Delay+0x28>
  {
  }
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000004 	.word	0x20000004

08000634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000634:	b480      	push	{r7}
 8000636:	b085      	sub	sp, #20
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	f003 0307 	and.w	r3, r3, #7
 8000642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <__NVIC_SetPriorityGrouping+0x44>)
 8000646:	68db      	ldr	r3, [r3, #12]
 8000648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000650:	4013      	ands	r3, r2
 8000652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000658:	68bb      	ldr	r3, [r7, #8]
 800065a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800065c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000666:	4a04      	ldr	r2, [pc, #16]	; (8000678 <__NVIC_SetPriorityGrouping+0x44>)
 8000668:	68bb      	ldr	r3, [r7, #8]
 800066a:	60d3      	str	r3, [r2, #12]
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	e000ed00 	.word	0xe000ed00

0800067c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000680:	4b04      	ldr	r3, [pc, #16]	; (8000694 <__NVIC_GetPriorityGrouping+0x18>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	0a1b      	lsrs	r3, r3, #8
 8000686:	f003 0307 	and.w	r3, r3, #7
}
 800068a:	4618      	mov	r0, r3
 800068c:	46bd      	mov	sp, r7
 800068e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000692:	4770      	bx	lr
 8000694:	e000ed00 	.word	0xe000ed00

08000698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	db0b      	blt.n	80006c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	f003 021f 	and.w	r2, r3, #31
 80006b0:	4907      	ldr	r1, [pc, #28]	; (80006d0 <__NVIC_EnableIRQ+0x38>)
 80006b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b6:	095b      	lsrs	r3, r3, #5
 80006b8:	2001      	movs	r0, #1
 80006ba:	fa00 f202 	lsl.w	r2, r0, r2
 80006be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	e000e100 	.word	0xe000e100

080006d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	6039      	str	r1, [r7, #0]
 80006de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	db0a      	blt.n	80006fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	b2da      	uxtb	r2, r3
 80006ec:	490c      	ldr	r1, [pc, #48]	; (8000720 <__NVIC_SetPriority+0x4c>)
 80006ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f2:	0112      	lsls	r2, r2, #4
 80006f4:	b2d2      	uxtb	r2, r2
 80006f6:	440b      	add	r3, r1
 80006f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006fc:	e00a      	b.n	8000714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fe:	683b      	ldr	r3, [r7, #0]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4908      	ldr	r1, [pc, #32]	; (8000724 <__NVIC_SetPriority+0x50>)
 8000704:	79fb      	ldrb	r3, [r7, #7]
 8000706:	f003 030f 	and.w	r3, r3, #15
 800070a:	3b04      	subs	r3, #4
 800070c:	0112      	lsls	r2, r2, #4
 800070e:	b2d2      	uxtb	r2, r2
 8000710:	440b      	add	r3, r1
 8000712:	761a      	strb	r2, [r3, #24]
}
 8000714:	bf00      	nop
 8000716:	370c      	adds	r7, #12
 8000718:	46bd      	mov	sp, r7
 800071a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071e:	4770      	bx	lr
 8000720:	e000e100 	.word	0xe000e100
 8000724:	e000ed00 	.word	0xe000ed00

08000728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000728:	b480      	push	{r7}
 800072a:	b089      	sub	sp, #36	; 0x24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	f003 0307 	and.w	r3, r3, #7
 800073a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	f1c3 0307 	rsb	r3, r3, #7
 8000742:	2b04      	cmp	r3, #4
 8000744:	bf28      	it	cs
 8000746:	2304      	movcs	r3, #4
 8000748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3304      	adds	r3, #4
 800074e:	2b06      	cmp	r3, #6
 8000750:	d902      	bls.n	8000758 <NVIC_EncodePriority+0x30>
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	3b03      	subs	r3, #3
 8000756:	e000      	b.n	800075a <NVIC_EncodePriority+0x32>
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800075c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000760:	69bb      	ldr	r3, [r7, #24]
 8000762:	fa02 f303 	lsl.w	r3, r2, r3
 8000766:	43da      	mvns	r2, r3
 8000768:	68bb      	ldr	r3, [r7, #8]
 800076a:	401a      	ands	r2, r3
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000770:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000774:	697b      	ldr	r3, [r7, #20]
 8000776:	fa01 f303 	lsl.w	r3, r1, r3
 800077a:	43d9      	mvns	r1, r3
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000780:	4313      	orrs	r3, r2
         );
}
 8000782:	4618      	mov	r0, r3
 8000784:	3724      	adds	r7, #36	; 0x24
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
	...

08000790 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	3b01      	subs	r3, #1
 800079c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007a0:	d301      	bcc.n	80007a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007a2:	2301      	movs	r3, #1
 80007a4:	e00f      	b.n	80007c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a6:	4a0a      	ldr	r2, [pc, #40]	; (80007d0 <SysTick_Config+0x40>)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	3b01      	subs	r3, #1
 80007ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ae:	210f      	movs	r1, #15
 80007b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b4:	f7ff ff8e 	bl	80006d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b8:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <SysTick_Config+0x40>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007be:	4b04      	ldr	r3, [pc, #16]	; (80007d0 <SysTick_Config+0x40>)
 80007c0:	2207      	movs	r2, #7
 80007c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c4:	2300      	movs	r3, #0
}
 80007c6:	4618      	mov	r0, r3
 80007c8:	3708      	adds	r7, #8
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	e000e010 	.word	0xe000e010

080007d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff29 	bl	8000634 <__NVIC_SetPriorityGrouping>
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007ea:	b580      	push	{r7, lr}
 80007ec:	b086      	sub	sp, #24
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	4603      	mov	r3, r0
 80007f2:	60b9      	str	r1, [r7, #8]
 80007f4:	607a      	str	r2, [r7, #4]
 80007f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007f8:	2300      	movs	r3, #0
 80007fa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007fc:	f7ff ff3e 	bl	800067c <__NVIC_GetPriorityGrouping>
 8000800:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000802:	687a      	ldr	r2, [r7, #4]
 8000804:	68b9      	ldr	r1, [r7, #8]
 8000806:	6978      	ldr	r0, [r7, #20]
 8000808:	f7ff ff8e 	bl	8000728 <NVIC_EncodePriority>
 800080c:	4602      	mov	r2, r0
 800080e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000812:	4611      	mov	r1, r2
 8000814:	4618      	mov	r0, r3
 8000816:	f7ff ff5d 	bl	80006d4 <__NVIC_SetPriority>
}
 800081a:	bf00      	nop
 800081c:	3718      	adds	r7, #24
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}

08000822 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000822:	b580      	push	{r7, lr}
 8000824:	b082      	sub	sp, #8
 8000826:	af00      	add	r7, sp, #0
 8000828:	4603      	mov	r3, r0
 800082a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800082c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000830:	4618      	mov	r0, r3
 8000832:	f7ff ff31 	bl	8000698 <__NVIC_EnableIRQ>
}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b082      	sub	sp, #8
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff ffa2 	bl	8000790 <SysTick_Config>
 800084c:	4603      	mov	r3, r0
}
 800084e:	4618      	mov	r0, r3
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2b00      	cmp	r3, #0
 8000862:	d101      	bne.n	8000868 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000864:	2301      	movs	r3, #1
 8000866:	e014      	b.n	8000892 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	791b      	ldrb	r3, [r3, #4]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	2b00      	cmp	r3, #0
 8000870:	d105      	bne.n	800087e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	2200      	movs	r2, #0
 8000876:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000878:	6878      	ldr	r0, [r7, #4]
 800087a:	f009 fe2d 	bl	800a4d8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2202      	movs	r2, #2
 8000882:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2201      	movs	r2, #1
 800088e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000890:	2300      	movs	r3, #0
}
 8000892:	4618      	mov	r0, r3
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}
	...

0800089c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b086      	sub	sp, #24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	60f8      	str	r0, [r7, #12]
 80008a4:	60b9      	str	r1, [r7, #8]
 80008a6:	607a      	str	r2, [r7, #4]
 80008a8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80008ae:	68fb      	ldr	r3, [r7, #12]
 80008b0:	795b      	ldrb	r3, [r3, #5]
 80008b2:	2b01      	cmp	r3, #1
 80008b4:	d101      	bne.n	80008ba <HAL_DAC_Start_DMA+0x1e>
 80008b6:	2302      	movs	r3, #2
 80008b8:	e0ab      	b.n	8000a12 <HAL_DAC_Start_DMA+0x176>
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	2201      	movs	r2, #1
 80008be:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80008c0:	68fb      	ldr	r3, [r7, #12]
 80008c2:	2202      	movs	r2, #2
 80008c4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80008c6:	68bb      	ldr	r3, [r7, #8]
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d12f      	bne.n	800092c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	689b      	ldr	r3, [r3, #8]
 80008d0:	4a52      	ldr	r2, [pc, #328]	; (8000a1c <HAL_DAC_Start_DMA+0x180>)
 80008d2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	4a51      	ldr	r2, [pc, #324]	; (8000a20 <HAL_DAC_Start_DMA+0x184>)
 80008da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80008dc:	68fb      	ldr	r3, [r7, #12]
 80008de:	689b      	ldr	r3, [r3, #8]
 80008e0:	4a50      	ldr	r2, [pc, #320]	; (8000a24 <HAL_DAC_Start_DMA+0x188>)
 80008e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	681a      	ldr	r2, [r3, #0]
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008f2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80008f4:	6a3b      	ldr	r3, [r7, #32]
 80008f6:	2b08      	cmp	r3, #8
 80008f8:	d013      	beq.n	8000922 <HAL_DAC_Start_DMA+0x86>
 80008fa:	6a3b      	ldr	r3, [r7, #32]
 80008fc:	2b08      	cmp	r3, #8
 80008fe:	d845      	bhi.n	800098c <HAL_DAC_Start_DMA+0xf0>
 8000900:	6a3b      	ldr	r3, [r7, #32]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d003      	beq.n	800090e <HAL_DAC_Start_DMA+0x72>
 8000906:	6a3b      	ldr	r3, [r7, #32]
 8000908:	2b04      	cmp	r3, #4
 800090a:	d005      	beq.n	8000918 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800090c:	e03e      	b.n	800098c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	681b      	ldr	r3, [r3, #0]
 8000912:	3308      	adds	r3, #8
 8000914:	613b      	str	r3, [r7, #16]
        break;
 8000916:	e03c      	b.n	8000992 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000918:	68fb      	ldr	r3, [r7, #12]
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	330c      	adds	r3, #12
 800091e:	613b      	str	r3, [r7, #16]
        break;
 8000920:	e037      	b.n	8000992 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	3310      	adds	r3, #16
 8000928:	613b      	str	r3, [r7, #16]
        break;
 800092a:	e032      	b.n	8000992 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	68db      	ldr	r3, [r3, #12]
 8000930:	4a3d      	ldr	r2, [pc, #244]	; (8000a28 <HAL_DAC_Start_DMA+0x18c>)
 8000932:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	4a3c      	ldr	r2, [pc, #240]	; (8000a2c <HAL_DAC_Start_DMA+0x190>)
 800093a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	68db      	ldr	r3, [r3, #12]
 8000940:	4a3b      	ldr	r2, [pc, #236]	; (8000a30 <HAL_DAC_Start_DMA+0x194>)
 8000942:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	681a      	ldr	r2, [r3, #0]
 800094a:	68fb      	ldr	r3, [r7, #12]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000952:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	2b08      	cmp	r3, #8
 8000958:	d013      	beq.n	8000982 <HAL_DAC_Start_DMA+0xe6>
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	2b08      	cmp	r3, #8
 800095e:	d817      	bhi.n	8000990 <HAL_DAC_Start_DMA+0xf4>
 8000960:	6a3b      	ldr	r3, [r7, #32]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d003      	beq.n	800096e <HAL_DAC_Start_DMA+0xd2>
 8000966:	6a3b      	ldr	r3, [r7, #32]
 8000968:	2b04      	cmp	r3, #4
 800096a:	d005      	beq.n	8000978 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800096c:	e010      	b.n	8000990 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	681b      	ldr	r3, [r3, #0]
 8000972:	3314      	adds	r3, #20
 8000974:	613b      	str	r3, [r7, #16]
        break;
 8000976:	e00c      	b.n	8000992 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	3318      	adds	r3, #24
 800097e:	613b      	str	r3, [r7, #16]
        break;
 8000980:	e007      	b.n	8000992 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	331c      	adds	r3, #28
 8000988:	613b      	str	r3, [r7, #16]
        break;
 800098a:	e002      	b.n	8000992 <HAL_DAC_Start_DMA+0xf6>
        break;
 800098c:	bf00      	nop
 800098e:	e000      	b.n	8000992 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000990:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000992:	68bb      	ldr	r3, [r7, #8]
 8000994:	2b00      	cmp	r3, #0
 8000996:	d111      	bne.n	80009bc <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	681a      	ldr	r2, [r3, #0]
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	6898      	ldr	r0, [r3, #8]
 80009ac:	6879      	ldr	r1, [r7, #4]
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	693a      	ldr	r2, [r7, #16]
 80009b2:	f000 febf 	bl	8001734 <HAL_DMA_Start_IT>
 80009b6:	4603      	mov	r3, r0
 80009b8:	75fb      	strb	r3, [r7, #23]
 80009ba:	e010      	b.n	80009de <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	681a      	ldr	r2, [r3, #0]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80009ca:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	68d8      	ldr	r0, [r3, #12]
 80009d0:	6879      	ldr	r1, [r7, #4]
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	693a      	ldr	r2, [r7, #16]
 80009d6:	f000 fead 	bl	8001734 <HAL_DMA_Start_IT>
 80009da:	4603      	mov	r3, r0
 80009dc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2200      	movs	r2, #0
 80009e2:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80009e4:	7dfb      	ldrb	r3, [r7, #23]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d10c      	bne.n	8000a04 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6819      	ldr	r1, [r3, #0]
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	f003 0310 	and.w	r3, r3, #16
 80009f6:	2201      	movs	r2, #1
 80009f8:	409a      	lsls	r2, r3
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	430a      	orrs	r2, r1
 8000a00:	601a      	str	r2, [r3, #0]
 8000a02:	e005      	b.n	8000a10 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	f043 0204 	orr.w	r2, r3, #4
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000a10:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	3718      	adds	r7, #24
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	08000d69 	.word	0x08000d69
 8000a20:	08000d8b 	.word	0x08000d8b
 8000a24:	08000da7 	.word	0x08000da7
 8000a28:	08000e11 	.word	0x08000e11
 8000a2c:	08000e33 	.word	0x08000e33
 8000a30:	08000e4f 	.word	0x08000e4f

08000a34 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	6078      	str	r0, [r7, #4]
 8000a3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6819      	ldr	r1, [r3, #0]
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	f003 0310 	and.w	r3, r3, #16
 8000a4a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a52:	43da      	mvns	r2, r3
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	400a      	ands	r2, r1
 8000a5a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	6819      	ldr	r1, [r3, #0]
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	f003 0310 	and.w	r3, r3, #16
 8000a68:	2201      	movs	r2, #1
 8000a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6e:	43da      	mvns	r2, r3
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	400a      	ands	r2, r1
 8000a76:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d10d      	bne.n	8000a9a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	689b      	ldr	r3, [r3, #8]
 8000a82:	4618      	mov	r0, r3
 8000a84:	f000 fed1 	bl	800182a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a96:	601a      	str	r2, [r3, #0]
 8000a98:	e00c      	b.n	8000ab4 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	68db      	ldr	r3, [r3, #12]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 fec3 	bl	800182a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000ab2:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}

08000abe <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	b083      	sub	sp, #12
 8000ac2:	af00      	add	r7, sp, #0
 8000ac4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	b083      	sub	sp, #12
 8000ad6:	af00      	add	r7, sp, #0
 8000ad8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000ada:	bf00      	nop
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
	...

08000ae8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b088      	sub	sp, #32
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000af8:	68fb      	ldr	r3, [r7, #12]
 8000afa:	795b      	ldrb	r3, [r3, #5]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d101      	bne.n	8000b04 <HAL_DAC_ConfigChannel+0x1c>
 8000b00:	2302      	movs	r3, #2
 8000b02:	e12a      	b.n	8000d5a <HAL_DAC_ConfigChannel+0x272>
 8000b04:	68fb      	ldr	r3, [r7, #12]
 8000b06:	2201      	movs	r2, #1
 8000b08:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	2202      	movs	r2, #2
 8000b0e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b04      	cmp	r3, #4
 8000b16:	d174      	bne.n	8000c02 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000b18:	f7ff fd5c 	bl	80005d4 <HAL_GetTick>
 8000b1c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d134      	bne.n	8000b8e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b24:	e011      	b.n	8000b4a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b26:	f7ff fd55 	bl	80005d4 <HAL_GetTick>
 8000b2a:	4602      	mov	r2, r0
 8000b2c:	69bb      	ldr	r3, [r7, #24]
 8000b2e:	1ad3      	subs	r3, r2, r3
 8000b30:	2b01      	cmp	r3, #1
 8000b32:	d90a      	bls.n	8000b4a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	691b      	ldr	r3, [r3, #16]
 8000b38:	f043 0208 	orr.w	r2, r3, #8
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b40:	68fb      	ldr	r3, [r7, #12]
 8000b42:	2203      	movs	r2, #3
 8000b44:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b46:	2303      	movs	r3, #3
 8000b48:	e107      	b.n	8000d5a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1e6      	bne.n	8000b26 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000b58:	2001      	movs	r0, #1
 8000b5a:	f7ff fd47 	bl	80005ec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	69d2      	ldr	r2, [r2, #28]
 8000b66:	641a      	str	r2, [r3, #64]	; 0x40
 8000b68:	e01e      	b.n	8000ba8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b6a:	f7ff fd33 	bl	80005d4 <HAL_GetTick>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	69bb      	ldr	r3, [r7, #24]
 8000b72:	1ad3      	subs	r3, r2, r3
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d90a      	bls.n	8000b8e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	691b      	ldr	r3, [r3, #16]
 8000b7c:	f043 0208 	orr.w	r2, r3, #8
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	2203      	movs	r2, #3
 8000b88:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	e0e5      	b.n	8000d5a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	dbe8      	blt.n	8000b6a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f7ff fd27 	bl	80005ec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	69d2      	ldr	r2, [r2, #28]
 8000ba6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f003 0310 	and.w	r3, r3, #16
 8000bb4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000bb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bbc:	43db      	mvns	r3, r3
 8000bbe:	ea02 0103 	and.w	r1, r2, r3
 8000bc2:	68bb      	ldr	r3, [r7, #8]
 8000bc4:	6a1a      	ldr	r2, [r3, #32]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	f003 0310 	and.w	r3, r3, #16
 8000bcc:	409a      	lsls	r2, r3
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	430a      	orrs	r2, r1
 8000bd4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	f003 0310 	and.w	r3, r3, #16
 8000be2:	21ff      	movs	r1, #255	; 0xff
 8000be4:	fa01 f303 	lsl.w	r3, r1, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	ea02 0103 	and.w	r1, r2, r3
 8000bee:	68bb      	ldr	r3, [r7, #8]
 8000bf0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f003 0310 	and.w	r3, r3, #16
 8000bf8:	409a      	lsls	r2, r3
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	430a      	orrs	r2, r1
 8000c00:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	695b      	ldr	r3, [r3, #20]
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d11d      	bne.n	8000c46 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000c0a:	68fb      	ldr	r3, [r7, #12]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c10:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	f003 0310 	and.w	r3, r3, #16
 8000c18:	221f      	movs	r2, #31
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	43db      	mvns	r3, r3
 8000c20:	69fa      	ldr	r2, [r7, #28]
 8000c22:	4013      	ands	r3, r2
 8000c24:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	699b      	ldr	r3, [r3, #24]
 8000c2a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	f003 0310 	and.w	r3, r3, #16
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	69fa      	ldr	r2, [r7, #28]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	69fa      	ldr	r2, [r7, #28]
 8000c44:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c4c:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	f003 0310 	and.w	r3, r3, #16
 8000c54:	2207      	movs	r2, #7
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	43db      	mvns	r3, r3
 8000c5c:	69fa      	ldr	r2, [r7, #28]
 8000c5e:	4013      	ands	r3, r2
 8000c60:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	685a      	ldr	r2, [r3, #4]
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	68db      	ldr	r3, [r3, #12]
 8000c6a:	431a      	orrs	r2, r3
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	691b      	ldr	r3, [r3, #16]
 8000c70:	4313      	orrs	r3, r2
 8000c72:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	f003 0310 	and.w	r3, r3, #16
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c80:	69fa      	ldr	r2, [r7, #28]
 8000c82:	4313      	orrs	r3, r2
 8000c84:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	69fa      	ldr	r2, [r7, #28]
 8000c8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	6819      	ldr	r1, [r3, #0]
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	f003 0310 	and.w	r3, r3, #16
 8000c9a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	43da      	mvns	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	400a      	ands	r2, r1
 8000caa:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	69fa      	ldr	r2, [r7, #28]
 8000cc6:	4013      	ands	r3, r2
 8000cc8:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000cca:	68bb      	ldr	r3, [r7, #8]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	f003 0310 	and.w	r3, r3, #16
 8000cd6:	697a      	ldr	r2, [r7, #20]
 8000cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cdc:	69fa      	ldr	r2, [r7, #28]
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000ce2:	68bb      	ldr	r3, [r7, #8]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000cea:	d104      	bne.n	8000cf6 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000cec:	69fb      	ldr	r3, [r7, #28]
 8000cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cf2:	61fb      	str	r3, [r7, #28]
 8000cf4:	e018      	b.n	8000d28 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d104      	bne.n	8000d08 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	e00f      	b.n	8000d28 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000d08:	f003 ffb2 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8000d0c:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	4a14      	ldr	r2, [pc, #80]	; (8000d64 <HAL_DAC_ConfigChannel+0x27c>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d904      	bls.n	8000d20 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000d16:	69fb      	ldr	r3, [r7, #28]
 8000d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e003      	b.n	8000d28 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d26:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	69fa      	ldr	r2, [r7, #28]
 8000d2e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	6819      	ldr	r1, [r3, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	f003 0310 	and.w	r3, r3, #16
 8000d3c:	22c0      	movs	r2, #192	; 0xc0
 8000d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d42:	43da      	mvns	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	400a      	ands	r2, r1
 8000d4a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2201      	movs	r2, #1
 8000d50:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	2200      	movs	r2, #0
 8000d56:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3720      	adds	r7, #32
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	04c4b400 	.word	0x04c4b400

08000d68 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d74:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000d76:	68f8      	ldr	r0, [r7, #12]
 8000d78:	f008 fb66 	bl	8009448 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	2201      	movs	r2, #1
 8000d80:	711a      	strb	r2, [r3, #4]
}
 8000d82:	bf00      	nop
 8000d84:	3710      	adds	r7, #16
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}

08000d8a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000d8a:	b580      	push	{r7, lr}
 8000d8c:	b084      	sub	sp, #16
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d96:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000d98:	68f8      	ldr	r0, [r7, #12]
 8000d9a:	f7ff fe90 	bl	8000abe <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000d9e:	bf00      	nop
 8000da0:	3710      	adds	r7, #16
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b084      	sub	sp, #16
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	691b      	ldr	r3, [r3, #16]
 8000db8:	f043 0204 	orr.w	r2, r3, #4
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000dc0:	68f8      	ldr	r0, [r7, #12]
 8000dc2:	f7ff fe86 	bl	8000ad2 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	711a      	strb	r2, [r3, #4]
}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000ddc:	bf00      	nop
 8000dde:	370c      	adds	r7, #12
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr

08000de8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000de8:	b480      	push	{r7}
 8000dea:	b083      	sub	sp, #12
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000df0:	bf00      	nop
 8000df2:	370c      	adds	r7, #12
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr

08000dfc <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e1c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000e1e:	68f8      	ldr	r0, [r7, #12]
 8000e20:	f7ff ffd8 	bl	8000dd4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	2201      	movs	r2, #1
 8000e28:	711a      	strb	r2, [r3, #4]
}
 8000e2a:	bf00      	nop
 8000e2c:	3710      	adds	r7, #16
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b084      	sub	sp, #16
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000e40:	68f8      	ldr	r0, [r7, #12]
 8000e42:	f7ff ffd1 	bl	8000de8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	691b      	ldr	r3, [r3, #16]
 8000e60:	f043 0204 	orr.w	r2, r3, #4
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000e68:	68f8      	ldr	r0, [r7, #12]
 8000e6a:	f7ff ffc7 	bl	8000dfc <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2201      	movs	r2, #1
 8000e72:	711a      	strb	r2, [r3, #4]
}
 8000e74:	bf00      	nop
 8000e76:	3710      	adds	r7, #16
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	e0ac      	b.n	8000fe8 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4618      	mov	r0, r3
 8000e94:	f000 fab6 	bl	8001404 <DFSDM_GetChannelFromInstance>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	4a55      	ldr	r2, [pc, #340]	; (8000ff0 <HAL_DFSDM_ChannelInit+0x174>)
 8000e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	e09f      	b.n	8000fe8 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000ea8:	6878      	ldr	r0, [r7, #4]
 8000eaa:	f009 fc2f 	bl	800a70c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000eae:	4b51      	ldr	r3, [pc, #324]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x178>)
 8000eb0:	681b      	ldr	r3, [r3, #0]
 8000eb2:	3301      	adds	r3, #1
 8000eb4:	4a4f      	ldr	r2, [pc, #316]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x178>)
 8000eb6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000eb8:	4b4e      	ldr	r3, [pc, #312]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x178>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b01      	cmp	r3, #1
 8000ebe:	d125      	bne.n	8000f0c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000ec0:	4b4d      	ldr	r3, [pc, #308]	; (8000ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a4c      	ldr	r2, [pc, #304]	; (8000ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ec6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000eca:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000ecc:	4b4a      	ldr	r3, [pc, #296]	; (8000ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ece:	681a      	ldr	r2, [r3, #0]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	689b      	ldr	r3, [r3, #8]
 8000ed4:	4948      	ldr	r1, [pc, #288]	; (8000ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000eda:	4b47      	ldr	r3, [pc, #284]	; (8000ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a46      	ldr	r2, [pc, #280]	; (8000ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ee0:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000ee4:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	791b      	ldrb	r3, [r3, #4]
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d108      	bne.n	8000f00 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000eee:	4b42      	ldr	r3, [pc, #264]	; (8000ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	68db      	ldr	r3, [r3, #12]
 8000ef6:	3b01      	subs	r3, #1
 8000ef8:	041b      	lsls	r3, r3, #16
 8000efa:	493f      	ldr	r1, [pc, #252]	; (8000ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000efc:	4313      	orrs	r3, r2
 8000efe:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000f00:	4b3d      	ldr	r3, [pc, #244]	; (8000ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a3c      	ldr	r2, [pc, #240]	; (8000ff8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f0a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000f1a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	6819      	ldr	r1, [r3, #0]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f2a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f30:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	430a      	orrs	r2, r1
 8000f38:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	f022 020f 	bic.w	r2, r2, #15
 8000f48:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	6819      	ldr	r1, [r3, #0]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	430a      	orrs	r2, r1
 8000f60:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	689a      	ldr	r2, [r3, #8]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000f70:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	6899      	ldr	r1, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f80:	3b01      	subs	r3, #1
 8000f82:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f84:	431a      	orrs	r2, r3
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	430a      	orrs	r2, r1
 8000f8c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	685a      	ldr	r2, [r3, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	f002 0207 	and.w	r2, r2, #7
 8000f9c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	6859      	ldr	r1, [r3, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fae:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000fb0:	431a      	orrs	r2, r3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	430a      	orrs	r2, r1
 8000fb8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fc8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 fa14 	bl	8001404 <DFSDM_GetChannelFromInstance>
 8000fdc:	4602      	mov	r2, r0
 8000fde:	4904      	ldr	r1, [pc, #16]	; (8000ff0 <HAL_DFSDM_ChannelInit+0x174>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
}
 8000fe8:	4618      	mov	r0, r3
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	2000009c 	.word	0x2000009c
 8000ff4:	20000098 	.word	0x20000098
 8000ff8:	40016000 	.word	0x40016000

08000ffc <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2b00      	cmp	r3, #0
 8001008:	d101      	bne.n	800100e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800100a:	2301      	movs	r3, #1
 800100c:	e0ca      	b.n	80011a4 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a66      	ldr	r2, [pc, #408]	; (80011ac <HAL_DFSDM_FilterInit+0x1b0>)
 8001014:	4293      	cmp	r3, r2
 8001016:	d109      	bne.n	800102c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800101c:	2b01      	cmp	r3, #1
 800101e:	d003      	beq.n	8001028 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001024:	2b01      	cmp	r3, #1
 8001026:	d101      	bne.n	800102c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e0bb      	b.n	80011a4 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	2200      	movs	r2, #0
 8001030:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2201      	movs	r2, #1
 8001036:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2201      	movs	r2, #1
 800103c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001044:	6878      	ldr	r0, [r7, #4]
 8001046:	f009 fab5 	bl	800a5b4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001058:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	7a1b      	ldrb	r3, [r3, #8]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d108      	bne.n	8001074 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681a      	ldr	r2, [r3, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	e007      	b.n	8001084 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001082:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	7a5b      	ldrb	r3, [r3, #9]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d108      	bne.n	800109e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	e007      	b.n	80010ae <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	681a      	ldr	r2, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80010ac:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	687a      	ldr	r2, [r7, #4]
 80010b6:	6812      	ldr	r2, [r2, #0]
 80010b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80010bc:	f023 0308 	bic.w	r3, r3, #8
 80010c0:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b02      	cmp	r3, #2
 80010c8:	d108      	bne.n	80010dc <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6819      	ldr	r1, [r3, #0]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	695a      	ldr	r2, [r3, #20]
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	430a      	orrs	r2, r1
 80010da:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	7c1b      	ldrb	r3, [r3, #16]
 80010e0:	2b01      	cmp	r3, #1
 80010e2:	d108      	bne.n	80010f6 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0210 	orr.w	r2, r2, #16
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	e007      	b.n	8001106 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f022 0210 	bic.w	r2, r2, #16
 8001104:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	7c5b      	ldrb	r3, [r3, #17]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d108      	bne.n	8001120 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f042 0220 	orr.w	r2, r2, #32
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e007      	b.n	8001130 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f022 0220 	bic.w	r2, r2, #32
 800112e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	695b      	ldr	r3, [r3, #20]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	6812      	ldr	r2, [r2, #0]
 800113a:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800113e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001142:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	6959      	ldr	r1, [r3, #20]
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	3b01      	subs	r3, #1
 8001154:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001156:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800115e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	430a      	orrs	r2, r1
 8001166:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	685a      	ldr	r2, [r3, #4]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	68da      	ldr	r2, [r3, #12]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	699a      	ldr	r2, [r3, #24]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	7c1a      	ldrb	r2, [r3, #16]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f042 0201 	orr.w	r2, r2, #1
 8001198:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80011a2:	2300      	movs	r3, #0
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40016100 	.word	0x40016100

080011b0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011bc:	2300      	movs	r3, #0
 80011be:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d02e      	beq.n	8001228 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80011ca:	68fb      	ldr	r3, [r7, #12]
 80011cc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80011d0:	2bff      	cmp	r3, #255	; 0xff
 80011d2:	d029      	beq.n	8001228 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	68fa      	ldr	r2, [r7, #12]
 80011dc:	6812      	ldr	r2, [r2, #0]
 80011de:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e6:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d10d      	bne.n	800120a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	021b      	lsls	r3, r3, #8
 80011f8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80011fc:	431a      	orrs	r2, r3
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	e00a      	b.n	8001220 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6819      	ldr	r1, [r3, #0]
 8001210:	68bb      	ldr	r3, [r7, #8]
 8001212:	021b      	lsls	r3, r3, #8
 8001214:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	430a      	orrs	r2, r1
 800121e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	631a      	str	r2, [r3, #48]	; 0x30
 8001226:	e001      	b.n	800122c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800122c:	7dfb      	ldrb	r3, [r7, #23]
}
 800122e:	4618      	mov	r0, r3
 8001230:	371c      	adds	r7, #28
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
	...

0800123c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b086      	sub	sp, #24
 8001240:	af00      	add	r7, sp, #0
 8001242:	60f8      	str	r0, [r7, #12]
 8001244:	60b9      	str	r1, [r7, #8]
 8001246:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001248:	2300      	movs	r3, #0
 800124a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d002      	beq.n	8001258 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d102      	bne.n	800125e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	75fb      	strb	r3, [r7, #23]
 800125c:	e064      	b.n	8001328 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001268:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800126c:	d002      	beq.n	8001274 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	75fb      	strb	r3, [r7, #23]
 8001272:	e059      	b.n	8001328 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10e      	bne.n	800129a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001280:	2b00      	cmp	r3, #0
 8001282:	d10a      	bne.n	800129a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001288:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800128a:	2b00      	cmp	r3, #0
 800128c:	d105      	bne.n	800129a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d002      	beq.n	800129a <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	75fb      	strb	r3, [r7, #23]
 8001298:	e046      	b.n	8001328 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d10b      	bne.n	80012ba <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012a2:	68fb      	ldr	r3, [r7, #12]
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d107      	bne.n	80012ba <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ae:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012b0:	2b20      	cmp	r3, #32
 80012b2:	d102      	bne.n	80012ba <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	75fb      	strb	r3, [r7, #23]
 80012b8:	e036      	b.n	8001328 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d004      	beq.n	80012ce <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d12a      	bne.n	8001324 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d2:	4a18      	ldr	r2, [pc, #96]	; (8001334 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 80012d4:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012da:	4a17      	ldr	r2, [pc, #92]	; (8001338 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80012dc:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012e2:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80012e4:	2b20      	cmp	r3, #32
 80012e6:	d101      	bne.n	80012ec <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 80012e8:	4a14      	ldr	r2, [pc, #80]	; (800133c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80012ea:	e000      	b.n	80012ee <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 80012ec:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012f2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	331c      	adds	r3, #28
 80012fe:	4619      	mov	r1, r3
 8001300:	68ba      	ldr	r2, [r7, #8]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	f000 fa16 	bl	8001734 <HAL_DMA_Start_IT>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d006      	beq.n	800131c <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	22ff      	movs	r2, #255	; 0xff
 8001312:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800131a:	e005      	b.n	8001328 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 800131c:	68f8      	ldr	r0, [r7, #12]
 800131e:	f000 f8bd 	bl	800149c <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001322:	e001      	b.n	8001328 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001324:	2301      	movs	r3, #1
 8001326:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001328:	7dfb      	ldrb	r3, [r7, #23]
}
 800132a:	4618      	mov	r0, r3
 800132c:	3718      	adds	r7, #24
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	080013c5 	.word	0x080013c5
 8001338:	080013e1 	.word	0x080013e1
 800133c:	080013a9 	.word	0x080013a9

08001340 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b084      	sub	sp, #16
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001352:	2b02      	cmp	r3, #2
 8001354:	d007      	beq.n	8001366 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800135c:	2b04      	cmp	r3, #4
 800135e:	d002      	beq.n	8001366 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	73fb      	strb	r3, [r7, #15]
 8001364:	e007      	b.n	8001376 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800136a:	4618      	mov	r0, r3
 800136c:	f000 fa5d 	bl	800182a <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f000 f8e9 	bl	8001548 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8001376:	7bfb      	ldrb	r3, [r7, #15]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3710      	adds	r7, #16
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}

08001380 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001380:	b480      	push	{r7}
 8001382:	b083      	sub	sp, #12
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8001388:	bf00      	nop
 800138a:	370c      	adds	r7, #12
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 800139c:	bf00      	nop
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f7ff ffe2 	bl	8001380 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80013bc:	bf00      	nop
 80013be:	3710      	adds	r7, #16
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b084      	sub	sp, #16
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d0:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f008 f88a 	bl	80094ec <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80013d8:	bf00      	nop
 80013da:	3710      	adds	r7, #16
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b084      	sub	sp, #16
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ec:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	2203      	movs	r2, #3
 80013f2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80013f4:	68f8      	ldr	r0, [r7, #12]
 80013f6:	f7ff ffcd 	bl	8001394 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80013fa:	bf00      	nop
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
	...

08001404 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	4a1c      	ldr	r2, [pc, #112]	; (8001480 <DFSDM_GetChannelFromInstance+0x7c>)
 8001410:	4293      	cmp	r3, r2
 8001412:	d102      	bne.n	800141a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	e02b      	b.n	8001472 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a19      	ldr	r2, [pc, #100]	; (8001484 <DFSDM_GetChannelFromInstance+0x80>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d102      	bne.n	8001428 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001422:	2301      	movs	r3, #1
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	e024      	b.n	8001472 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a17      	ldr	r2, [pc, #92]	; (8001488 <DFSDM_GetChannelFromInstance+0x84>)
 800142c:	4293      	cmp	r3, r2
 800142e:	d102      	bne.n	8001436 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001430:	2302      	movs	r3, #2
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	e01d      	b.n	8001472 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a14      	ldr	r2, [pc, #80]	; (800148c <DFSDM_GetChannelFromInstance+0x88>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d102      	bne.n	8001444 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800143e:	2304      	movs	r3, #4
 8001440:	60fb      	str	r3, [r7, #12]
 8001442:	e016      	b.n	8001472 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	4a12      	ldr	r2, [pc, #72]	; (8001490 <DFSDM_GetChannelFromInstance+0x8c>)
 8001448:	4293      	cmp	r3, r2
 800144a:	d102      	bne.n	8001452 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800144c:	2305      	movs	r3, #5
 800144e:	60fb      	str	r3, [r7, #12]
 8001450:	e00f      	b.n	8001472 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a0f      	ldr	r2, [pc, #60]	; (8001494 <DFSDM_GetChannelFromInstance+0x90>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d102      	bne.n	8001460 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800145a:	2306      	movs	r3, #6
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	e008      	b.n	8001472 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	4a0d      	ldr	r2, [pc, #52]	; (8001498 <DFSDM_GetChannelFromInstance+0x94>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d102      	bne.n	800146e <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001468:	2307      	movs	r3, #7
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	e001      	b.n	8001472 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800146e:	2303      	movs	r3, #3
 8001470:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8001472:	68fb      	ldr	r3, [r7, #12]
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	40016000 	.word	0x40016000
 8001484:	40016020 	.word	0x40016020
 8001488:	40016040 	.word	0x40016040
 800148c:	40016080 	.word	0x40016080
 8001490:	400160a0 	.word	0x400160a0
 8001494:	400160c0 	.word	0x400160c0
 8001498:	400160e0 	.word	0x400160e0

0800149c <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d108      	bne.n	80014be <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014ba:	601a      	str	r2, [r3, #0]
 80014bc:	e033      	b.n	8001526 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f022 0201 	bic.w	r2, r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014dc:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f042 0201 	orr.w	r2, r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80014f4:	2b03      	cmp	r3, #3
 80014f6:	d116      	bne.n	8001526 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d107      	bne.n	8001510 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f042 0202 	orr.w	r2, r2, #2
 800150e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001516:	2b01      	cmp	r3, #1
 8001518:	d102      	bne.n	8001520 <DFSDM_RegConvStart+0x84>
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151e:	e000      	b.n	8001522 <DFSDM_RegConvStart+0x86>
 8001520:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001522:	687a      	ldr	r2, [r7, #4]
 8001524:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800152c:	2b01      	cmp	r3, #1
 800152e:	d101      	bne.n	8001534 <DFSDM_RegConvStart+0x98>
 8001530:	2202      	movs	r2, #2
 8001532:	e000      	b.n	8001536 <DFSDM_RegConvStart+0x9a>
 8001534:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f022 0201 	bic.w	r2, r2, #1
 800155e:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001564:	2b01      	cmp	r3, #1
 8001566:	d107      	bne.n	8001578 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001576:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 0201 	orr.w	r2, r2, #1
 8001586:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800158e:	2b04      	cmp	r3, #4
 8001590:	d116      	bne.n	80015c0 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001596:	2b00      	cmp	r3, #0
 8001598:	d107      	bne.n	80015aa <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f042 0202 	orr.w	r2, r2, #2
 80015a8:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d102      	bne.n	80015ba <DFSDM_RegConvStop+0x72>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b8:	e000      	b.n	80015bc <DFSDM_RegConvStop+0x74>
 80015ba:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d101      	bne.n	80015ce <DFSDM_RegConvStop+0x86>
 80015ca:	2201      	movs	r2, #1
 80015cc:	e000      	b.n	80015d0 <DFSDM_RegConvStop+0x88>
 80015ce:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
	...

080015e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d101      	bne.n	80015f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e08d      	b.n	8001712 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_DMA_Init+0x138>)
 80015fe:	429a      	cmp	r2, r3
 8001600:	d80f      	bhi.n	8001622 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	461a      	mov	r2, r3
 8001608:	4b45      	ldr	r3, [pc, #276]	; (8001720 <HAL_DMA_Init+0x13c>)
 800160a:	4413      	add	r3, r2
 800160c:	4a45      	ldr	r2, [pc, #276]	; (8001724 <HAL_DMA_Init+0x140>)
 800160e:	fba2 2303 	umull	r2, r3, r2, r3
 8001612:	091b      	lsrs	r3, r3, #4
 8001614:	009a      	lsls	r2, r3, #2
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a42      	ldr	r2, [pc, #264]	; (8001728 <HAL_DMA_Init+0x144>)
 800161e:	641a      	str	r2, [r3, #64]	; 0x40
 8001620:	e00e      	b.n	8001640 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	461a      	mov	r2, r3
 8001628:	4b40      	ldr	r3, [pc, #256]	; (800172c <HAL_DMA_Init+0x148>)
 800162a:	4413      	add	r3, r2
 800162c:	4a3d      	ldr	r2, [pc, #244]	; (8001724 <HAL_DMA_Init+0x140>)
 800162e:	fba2 2303 	umull	r2, r3, r2, r3
 8001632:	091b      	lsrs	r3, r3, #4
 8001634:	009a      	lsls	r2, r3, #2
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a3c      	ldr	r2, [pc, #240]	; (8001730 <HAL_DMA_Init+0x14c>)
 800163e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2202      	movs	r2, #2
 8001644:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800165a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001664:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	691b      	ldr	r3, [r3, #16]
 800166a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001670:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a1b      	ldr	r3, [r3, #32]
 8001682:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001684:	68fa      	ldr	r2, [r7, #12]
 8001686:	4313      	orrs	r3, r2
 8001688:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68fa      	ldr	r2, [r7, #12]
 8001690:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fa72 	bl	8001b7c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016a0:	d102      	bne.n	80016a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685a      	ldr	r2, [r3, #4]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016b0:	b2d2      	uxtb	r2, r2
 80016b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b8:	687a      	ldr	r2, [r7, #4]
 80016ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016bc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d010      	beq.n	80016e8 <HAL_DMA_Init+0x104>
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	685b      	ldr	r3, [r3, #4]
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	d80c      	bhi.n	80016e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016ce:	6878      	ldr	r0, [r7, #4]
 80016d0:	f000 fa92 	bl	8001bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d8:	2200      	movs	r2, #0
 80016da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e0:	687a      	ldr	r2, [r7, #4]
 80016e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	e008      	b.n	80016fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2200      	movs	r2, #0
 80016ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2200      	movs	r2, #0
 80016f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2200      	movs	r2, #0
 80016fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3710      	adds	r7, #16
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	40020407 	.word	0x40020407
 8001720:	bffdfff8 	.word	0xbffdfff8
 8001724:	cccccccd 	.word	0xcccccccd
 8001728:	40020000 	.word	0x40020000
 800172c:	bffdfbf8 	.word	0xbffdfbf8
 8001730:	40020400 	.word	0x40020400

08001734 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b086      	sub	sp, #24
 8001738:	af00      	add	r7, sp, #0
 800173a:	60f8      	str	r0, [r7, #12]
 800173c:	60b9      	str	r1, [r7, #8]
 800173e:	607a      	str	r2, [r7, #4]
 8001740:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001742:	2300      	movs	r3, #0
 8001744:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800174c:	2b01      	cmp	r3, #1
 800174e:	d101      	bne.n	8001754 <HAL_DMA_Start_IT+0x20>
 8001750:	2302      	movs	r3, #2
 8001752:	e066      	b.n	8001822 <HAL_DMA_Start_IT+0xee>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2201      	movs	r2, #1
 8001758:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b01      	cmp	r3, #1
 8001766:	d155      	bne.n	8001814 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	2202      	movs	r2, #2
 800176c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2200      	movs	r2, #0
 8001774:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 0201 	bic.w	r2, r2, #1
 8001784:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	687a      	ldr	r2, [r7, #4]
 800178a:	68b9      	ldr	r1, [r7, #8]
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f000 f9b6 	bl	8001afe <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	2b00      	cmp	r3, #0
 8001798:	d008      	beq.n	80017ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f042 020e 	orr.w	r2, r2, #14
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e00f      	b.n	80017cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f022 0204 	bic.w	r2, r2, #4
 80017ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f042 020a 	orr.w	r2, r2, #10
 80017ca:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d007      	beq.n	80017ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017e8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d007      	beq.n	8001802 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001800:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f042 0201 	orr.w	r2, r2, #1
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	e005      	b.n	8001820 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2200      	movs	r2, #0
 8001818:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800181c:	2302      	movs	r3, #2
 800181e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001820:	7dfb      	ldrb	r3, [r7, #23]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800182a:	b480      	push	{r7}
 800182c:	b085      	sub	sp, #20
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001832:	2300      	movs	r3, #0
 8001834:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800183c:	b2db      	uxtb	r3, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d008      	beq.n	8001854 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2204      	movs	r2, #4
 8001846:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001850:	2301      	movs	r3, #1
 8001852:	e040      	b.n	80018d6 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681a      	ldr	r2, [r3, #0]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f022 020e 	bic.w	r2, r2, #14
 8001862:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001872:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001888:	f003 021c 	and.w	r2, r3, #28
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001890:	2101      	movs	r1, #1
 8001892:	fa01 f202 	lsl.w	r2, r1, r2
 8001896:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018a0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d00c      	beq.n	80018c4 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018c2:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2201      	movs	r2, #1
 80018c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2200      	movs	r2, #0
 80018d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80018d4:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3714      	adds	r7, #20
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr

080018e2 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018e2:	b580      	push	{r7, lr}
 80018e4:	b084      	sub	sp, #16
 80018e6:	af00      	add	r7, sp, #0
 80018e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018ea:	2300      	movs	r3, #0
 80018ec:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	d005      	beq.n	8001906 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2204      	movs	r2, #4
 80018fe:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001900:	2301      	movs	r3, #1
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e047      	b.n	8001996 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f022 020e 	bic.w	r2, r2, #14
 8001914:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0201 	bic.w	r2, r2, #1
 8001924:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001930:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001934:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f003 021c 	and.w	r2, r3, #28
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	2101      	movs	r1, #1
 8001944:	fa01 f202 	lsl.w	r2, r1, r2
 8001948:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001952:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001958:	2b00      	cmp	r3, #0
 800195a:	d00c      	beq.n	8001976 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001966:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800196a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001970:	687a      	ldr	r2, [r7, #4]
 8001972:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001974:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	2201      	movs	r2, #1
 800197a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2200      	movs	r2, #0
 8001982:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198a:	2b00      	cmp	r3, #0
 800198c:	d003      	beq.n	8001996 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	4798      	blx	r3
    }
  }
  return status;
 8001996:	7bfb      	ldrb	r3, [r7, #15]
}
 8001998:	4618      	mov	r0, r3
 800199a:	3710      	adds	r7, #16
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019bc:	f003 031c 	and.w	r3, r3, #28
 80019c0:	2204      	movs	r2, #4
 80019c2:	409a      	lsls	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4013      	ands	r3, r2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d026      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x7a>
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	f003 0304 	and.w	r3, r3, #4
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d021      	beq.n	8001a1a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0320 	and.w	r3, r3, #32
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d107      	bne.n	80019f4 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0204 	bic.w	r2, r2, #4
 80019f2:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f8:	f003 021c 	and.w	r2, r3, #28
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a00:	2104      	movs	r1, #4
 8001a02:	fa01 f202 	lsl.w	r2, r1, r2
 8001a06:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d071      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a14:	6878      	ldr	r0, [r7, #4]
 8001a16:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001a18:	e06c      	b.n	8001af4 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	f003 031c 	and.w	r3, r3, #28
 8001a22:	2202      	movs	r2, #2
 8001a24:	409a      	lsls	r2, r3
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d02e      	beq.n	8001a8c <HAL_DMA_IRQHandler+0xec>
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d029      	beq.n	8001a8c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f003 0320 	and.w	r3, r3, #32
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d10b      	bne.n	8001a5e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 020a 	bic.w	r2, r2, #10
 8001a54:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2201      	movs	r2, #1
 8001a5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a62:	f003 021c 	and.w	r2, r3, #28
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6a:	2102      	movs	r1, #2
 8001a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8001a70:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d038      	beq.n	8001af4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a8a:	e033      	b.n	8001af4 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a90:	f003 031c 	and.w	r3, r3, #28
 8001a94:	2208      	movs	r2, #8
 8001a96:	409a      	lsls	r2, r3
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d02a      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x156>
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d025      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	681a      	ldr	r2, [r3, #0]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f022 020e 	bic.w	r2, r2, #14
 8001ab8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001abe:	f003 021c 	and.w	r2, r3, #28
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	2101      	movs	r1, #1
 8001ac8:	fa01 f202 	lsl.w	r2, r1, r2
 8001acc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2201      	movs	r2, #1
 8001ad8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2200      	movs	r2, #0
 8001ae0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d004      	beq.n	8001af6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001af4:	bf00      	nop
 8001af6:	bf00      	nop
}
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b085      	sub	sp, #20
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	60f8      	str	r0, [r7, #12]
 8001b06:	60b9      	str	r1, [r7, #8]
 8001b08:	607a      	str	r2, [r7, #4]
 8001b0a:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b14:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d004      	beq.n	8001b28 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b22:	68fa      	ldr	r2, [r7, #12]
 8001b24:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b26:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2c:	f003 021c 	and.w	r2, r3, #28
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b34:	2101      	movs	r1, #1
 8001b36:	fa01 f202 	lsl.w	r2, r1, r2
 8001b3a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	683a      	ldr	r2, [r7, #0]
 8001b42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b10      	cmp	r3, #16
 8001b4a:	d108      	bne.n	8001b5e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	687a      	ldr	r2, [r7, #4]
 8001b52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	68ba      	ldr	r2, [r7, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b5c:	e007      	b.n	8001b6e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	68ba      	ldr	r2, [r7, #8]
 8001b64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	60da      	str	r2, [r3, #12]
}
 8001b6e:	bf00      	nop
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d80a      	bhi.n	8001ba6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b94:	089b      	lsrs	r3, r3, #2
 8001b96:	009b      	lsls	r3, r3, #2
 8001b98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b9c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	6493      	str	r3, [r2, #72]	; 0x48
 8001ba4:	e007      	b.n	8001bb6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	089b      	lsrs	r3, r3, #2
 8001bac:	009a      	lsls	r2, r3, #2
 8001bae:	4b0f      	ldr	r3, [pc, #60]	; (8001bec <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bb0:	4413      	add	r3, r2
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	3b08      	subs	r3, #8
 8001bbe:	4a0c      	ldr	r2, [pc, #48]	; (8001bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001bc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc4:	091b      	lsrs	r3, r3, #4
 8001bc6:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a0a      	ldr	r2, [pc, #40]	; (8001bf4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001bcc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	f003 031f 	and.w	r3, r3, #31
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	409a      	lsls	r2, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40020407 	.word	0x40020407
 8001bec:	4002081c 	.word	0x4002081c
 8001bf0:	cccccccd 	.word	0xcccccccd
 8001bf4:	40020880 	.word	0x40020880

08001bf8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c08:	68fa      	ldr	r2, [r7, #12]
 8001c0a:	4b0b      	ldr	r3, [pc, #44]	; (8001c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	461a      	mov	r2, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a08      	ldr	r2, [pc, #32]	; (8001c3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c1a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	3b01      	subs	r3, #1
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2201      	movs	r2, #1
 8001c26:	409a      	lsls	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c2c:	bf00      	nop
 8001c2e:	3714      	adds	r7, #20
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr
 8001c38:	1000823f 	.word	0x1000823f
 8001c3c:	40020940 	.word	0x40020940

08001c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4e:	e166      	b.n	8001f1e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	2101      	movs	r1, #1
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	fa01 f303 	lsl.w	r3, r1, r3
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	f000 8158 	beq.w	8001f18 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f003 0303 	and.w	r3, r3, #3
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d005      	beq.n	8001c80 <HAL_GPIO_Init+0x40>
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b02      	cmp	r3, #2
 8001c7e:	d130      	bne.n	8001ce2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	68da      	ldr	r2, [r3, #12]
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	693a      	ldr	r2, [r7, #16]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	f003 0201 	and.w	r2, r3, #1
 8001cd0:	697b      	ldr	r3, [r7, #20]
 8001cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd6:	693a      	ldr	r2, [r7, #16]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f003 0303 	and.w	r3, r3, #3
 8001cea:	2b03      	cmp	r3, #3
 8001cec:	d017      	beq.n	8001d1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	005b      	lsls	r3, r3, #1
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	689a      	ldr	r2, [r3, #8]
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d12:	693a      	ldr	r2, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	693a      	ldr	r2, [r7, #16]
 8001d1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	f003 0303 	and.w	r3, r3, #3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d123      	bne.n	8001d72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	08da      	lsrs	r2, r3, #3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	3208      	adds	r2, #8
 8001d32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 0307 	and.w	r3, r3, #7
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	220f      	movs	r2, #15
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	693a      	ldr	r2, [r7, #16]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	691a      	ldr	r2, [r3, #16]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	08da      	lsrs	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	3208      	adds	r2, #8
 8001d6c:	6939      	ldr	r1, [r7, #16]
 8001d6e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	005b      	lsls	r3, r3, #1
 8001d7c:	2203      	movs	r2, #3
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	693a      	ldr	r2, [r7, #16]
 8001d86:	4013      	ands	r3, r2
 8001d88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0203 	and.w	r2, r3, #3
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	693a      	ldr	r2, [r7, #16]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	693a      	ldr	r2, [r7, #16]
 8001da4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 80b2 	beq.w	8001f18 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db4:	4b61      	ldr	r3, [pc, #388]	; (8001f3c <HAL_GPIO_Init+0x2fc>)
 8001db6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db8:	4a60      	ldr	r2, [pc, #384]	; (8001f3c <HAL_GPIO_Init+0x2fc>)
 8001dba:	f043 0301 	orr.w	r3, r3, #1
 8001dbe:	6613      	str	r3, [r2, #96]	; 0x60
 8001dc0:	4b5e      	ldr	r3, [pc, #376]	; (8001f3c <HAL_GPIO_Init+0x2fc>)
 8001dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	60bb      	str	r3, [r7, #8]
 8001dca:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dcc:	4a5c      	ldr	r2, [pc, #368]	; (8001f40 <HAL_GPIO_Init+0x300>)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	089b      	lsrs	r3, r3, #2
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	f003 0303 	and.w	r3, r3, #3
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	220f      	movs	r2, #15
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	43db      	mvns	r3, r3
 8001dea:	693a      	ldr	r2, [r7, #16]
 8001dec:	4013      	ands	r3, r2
 8001dee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001df6:	d02b      	beq.n	8001e50 <HAL_GPIO_Init+0x210>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a52      	ldr	r2, [pc, #328]	; (8001f44 <HAL_GPIO_Init+0x304>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d025      	beq.n	8001e4c <HAL_GPIO_Init+0x20c>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	4a51      	ldr	r2, [pc, #324]	; (8001f48 <HAL_GPIO_Init+0x308>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d01f      	beq.n	8001e48 <HAL_GPIO_Init+0x208>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	4a50      	ldr	r2, [pc, #320]	; (8001f4c <HAL_GPIO_Init+0x30c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d019      	beq.n	8001e44 <HAL_GPIO_Init+0x204>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	4a4f      	ldr	r2, [pc, #316]	; (8001f50 <HAL_GPIO_Init+0x310>)
 8001e14:	4293      	cmp	r3, r2
 8001e16:	d013      	beq.n	8001e40 <HAL_GPIO_Init+0x200>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	4a4e      	ldr	r2, [pc, #312]	; (8001f54 <HAL_GPIO_Init+0x314>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d00d      	beq.n	8001e3c <HAL_GPIO_Init+0x1fc>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a4d      	ldr	r2, [pc, #308]	; (8001f58 <HAL_GPIO_Init+0x318>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d007      	beq.n	8001e38 <HAL_GPIO_Init+0x1f8>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a4c      	ldr	r2, [pc, #304]	; (8001f5c <HAL_GPIO_Init+0x31c>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d101      	bne.n	8001e34 <HAL_GPIO_Init+0x1f4>
 8001e30:	2307      	movs	r3, #7
 8001e32:	e00e      	b.n	8001e52 <HAL_GPIO_Init+0x212>
 8001e34:	2308      	movs	r3, #8
 8001e36:	e00c      	b.n	8001e52 <HAL_GPIO_Init+0x212>
 8001e38:	2306      	movs	r3, #6
 8001e3a:	e00a      	b.n	8001e52 <HAL_GPIO_Init+0x212>
 8001e3c:	2305      	movs	r3, #5
 8001e3e:	e008      	b.n	8001e52 <HAL_GPIO_Init+0x212>
 8001e40:	2304      	movs	r3, #4
 8001e42:	e006      	b.n	8001e52 <HAL_GPIO_Init+0x212>
 8001e44:	2303      	movs	r3, #3
 8001e46:	e004      	b.n	8001e52 <HAL_GPIO_Init+0x212>
 8001e48:	2302      	movs	r3, #2
 8001e4a:	e002      	b.n	8001e52 <HAL_GPIO_Init+0x212>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	e000      	b.n	8001e52 <HAL_GPIO_Init+0x212>
 8001e50:	2300      	movs	r3, #0
 8001e52:	697a      	ldr	r2, [r7, #20]
 8001e54:	f002 0203 	and.w	r2, r2, #3
 8001e58:	0092      	lsls	r2, r2, #2
 8001e5a:	4093      	lsls	r3, r2
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e62:	4937      	ldr	r1, [pc, #220]	; (8001f40 <HAL_GPIO_Init+0x300>)
 8001e64:	697b      	ldr	r3, [r7, #20]
 8001e66:	089b      	lsrs	r3, r3, #2
 8001e68:	3302      	adds	r3, #2
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e70:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_GPIO_Init+0x320>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d003      	beq.n	8001e94 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e94:	4a32      	ldr	r2, [pc, #200]	; (8001f60 <HAL_GPIO_Init+0x320>)
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e9a:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_GPIO_Init+0x320>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	43db      	mvns	r3, r3
 8001ea4:	693a      	ldr	r2, [r7, #16]
 8001ea6:	4013      	ands	r3, r2
 8001ea8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eaa:	683b      	ldr	r3, [r7, #0]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001eb6:	693a      	ldr	r2, [r7, #16]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ebe:	4a28      	ldr	r2, [pc, #160]	; (8001f60 <HAL_GPIO_Init+0x320>)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <HAL_GPIO_Init+0x320>)
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	693a      	ldr	r2, [r7, #16]
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d003      	beq.n	8001ee8 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001ee0:	693a      	ldr	r2, [r7, #16]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ee8:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <HAL_GPIO_Init+0x320>)
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001eee:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <HAL_GPIO_Init+0x320>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	43db      	mvns	r3, r3
 8001ef8:	693a      	ldr	r2, [r7, #16]
 8001efa:	4013      	ands	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d003      	beq.n	8001f12 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f12:	4a13      	ldr	r2, [pc, #76]	; (8001f60 <HAL_GPIO_Init+0x320>)
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	fa22 f303 	lsr.w	r3, r2, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f47f ae91 	bne.w	8001c50 <HAL_GPIO_Init+0x10>
  }
}
 8001f2e:	bf00      	nop
 8001f30:	bf00      	nop
 8001f32:	371c      	adds	r7, #28
 8001f34:	46bd      	mov	sp, r7
 8001f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3a:	4770      	bx	lr
 8001f3c:	40021000 	.word	0x40021000
 8001f40:	40010000 	.word	0x40010000
 8001f44:	48000400 	.word	0x48000400
 8001f48:	48000800 	.word	0x48000800
 8001f4c:	48000c00 	.word	0x48000c00
 8001f50:	48001000 	.word	0x48001000
 8001f54:	48001400 	.word	0x48001400
 8001f58:	48001800 	.word	0x48001800
 8001f5c:	48001c00 	.word	0x48001c00
 8001f60:	40010400 	.word	0x40010400

08001f64 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b087      	sub	sp, #28
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001f72:	e0c9      	b.n	8002108 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f74:	2201      	movs	r2, #1
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	683a      	ldr	r2, [r7, #0]
 8001f7e:	4013      	ands	r3, r2
 8001f80:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	f000 80bc 	beq.w	8002102 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001f8a:	4a66      	ldr	r2, [pc, #408]	; (8002124 <HAL_GPIO_DeInit+0x1c0>)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	089b      	lsrs	r3, r3, #2
 8001f90:	3302      	adds	r3, #2
 8001f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f96:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	f003 0303 	and.w	r3, r3, #3
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	220f      	movs	r2, #15
 8001fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa6:	68fa      	ldr	r2, [r7, #12]
 8001fa8:	4013      	ands	r3, r2
 8001faa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fb2:	d02b      	beq.n	800200c <HAL_GPIO_DeInit+0xa8>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a5c      	ldr	r2, [pc, #368]	; (8002128 <HAL_GPIO_DeInit+0x1c4>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d025      	beq.n	8002008 <HAL_GPIO_DeInit+0xa4>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	4a5b      	ldr	r2, [pc, #364]	; (800212c <HAL_GPIO_DeInit+0x1c8>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d01f      	beq.n	8002004 <HAL_GPIO_DeInit+0xa0>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	4a5a      	ldr	r2, [pc, #360]	; (8002130 <HAL_GPIO_DeInit+0x1cc>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d019      	beq.n	8002000 <HAL_GPIO_DeInit+0x9c>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a59      	ldr	r2, [pc, #356]	; (8002134 <HAL_GPIO_DeInit+0x1d0>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d013      	beq.n	8001ffc <HAL_GPIO_DeInit+0x98>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a58      	ldr	r2, [pc, #352]	; (8002138 <HAL_GPIO_DeInit+0x1d4>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d00d      	beq.n	8001ff8 <HAL_GPIO_DeInit+0x94>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a57      	ldr	r2, [pc, #348]	; (800213c <HAL_GPIO_DeInit+0x1d8>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d007      	beq.n	8001ff4 <HAL_GPIO_DeInit+0x90>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a56      	ldr	r2, [pc, #344]	; (8002140 <HAL_GPIO_DeInit+0x1dc>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d101      	bne.n	8001ff0 <HAL_GPIO_DeInit+0x8c>
 8001fec:	2307      	movs	r3, #7
 8001fee:	e00e      	b.n	800200e <HAL_GPIO_DeInit+0xaa>
 8001ff0:	2308      	movs	r3, #8
 8001ff2:	e00c      	b.n	800200e <HAL_GPIO_DeInit+0xaa>
 8001ff4:	2306      	movs	r3, #6
 8001ff6:	e00a      	b.n	800200e <HAL_GPIO_DeInit+0xaa>
 8001ff8:	2305      	movs	r3, #5
 8001ffa:	e008      	b.n	800200e <HAL_GPIO_DeInit+0xaa>
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	e006      	b.n	800200e <HAL_GPIO_DeInit+0xaa>
 8002000:	2303      	movs	r3, #3
 8002002:	e004      	b.n	800200e <HAL_GPIO_DeInit+0xaa>
 8002004:	2302      	movs	r3, #2
 8002006:	e002      	b.n	800200e <HAL_GPIO_DeInit+0xaa>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_GPIO_DeInit+0xaa>
 800200c:	2300      	movs	r3, #0
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	f002 0203 	and.w	r2, r2, #3
 8002014:	0092      	lsls	r2, r2, #2
 8002016:	4093      	lsls	r3, r2
 8002018:	68fa      	ldr	r2, [r7, #12]
 800201a:	429a      	cmp	r2, r3
 800201c:	d132      	bne.n	8002084 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800201e:	4b49      	ldr	r3, [pc, #292]	; (8002144 <HAL_GPIO_DeInit+0x1e0>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	43db      	mvns	r3, r3
 8002026:	4947      	ldr	r1, [pc, #284]	; (8002144 <HAL_GPIO_DeInit+0x1e0>)
 8002028:	4013      	ands	r3, r2
 800202a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800202c:	4b45      	ldr	r3, [pc, #276]	; (8002144 <HAL_GPIO_DeInit+0x1e0>)
 800202e:	685a      	ldr	r2, [r3, #4]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	43db      	mvns	r3, r3
 8002034:	4943      	ldr	r1, [pc, #268]	; (8002144 <HAL_GPIO_DeInit+0x1e0>)
 8002036:	4013      	ands	r3, r2
 8002038:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800203a:	4b42      	ldr	r3, [pc, #264]	; (8002144 <HAL_GPIO_DeInit+0x1e0>)
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	43db      	mvns	r3, r3
 8002042:	4940      	ldr	r1, [pc, #256]	; (8002144 <HAL_GPIO_DeInit+0x1e0>)
 8002044:	4013      	ands	r3, r2
 8002046:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002048:	4b3e      	ldr	r3, [pc, #248]	; (8002144 <HAL_GPIO_DeInit+0x1e0>)
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	43db      	mvns	r3, r3
 8002050:	493c      	ldr	r1, [pc, #240]	; (8002144 <HAL_GPIO_DeInit+0x1e0>)
 8002052:	4013      	ands	r3, r2
 8002054:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	220f      	movs	r2, #15
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002066:	4a2f      	ldr	r2, [pc, #188]	; (8002124 <HAL_GPIO_DeInit+0x1c0>)
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	089b      	lsrs	r3, r3, #2
 800206c:	3302      	adds	r3, #2
 800206e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	43da      	mvns	r2, r3
 8002076:	482b      	ldr	r0, [pc, #172]	; (8002124 <HAL_GPIO_DeInit+0x1c0>)
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	089b      	lsrs	r3, r3, #2
 800207c:	400a      	ands	r2, r1
 800207e:	3302      	adds	r3, #2
 8002080:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	697b      	ldr	r3, [r7, #20]
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2103      	movs	r1, #3
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	431a      	orrs	r2, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	08da      	lsrs	r2, r3, #3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	3208      	adds	r2, #8
 80020a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	220f      	movs	r2, #15
 80020ae:	fa02 f303 	lsl.w	r3, r2, r3
 80020b2:	43db      	mvns	r3, r3
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	08d2      	lsrs	r2, r2, #3
 80020b8:	4019      	ands	r1, r3
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	3208      	adds	r2, #8
 80020be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	697b      	ldr	r3, [r7, #20]
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	2103      	movs	r1, #3
 80020cc:	fa01 f303 	lsl.w	r3, r1, r3
 80020d0:	43db      	mvns	r3, r3
 80020d2:	401a      	ands	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	2101      	movs	r1, #1
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	fa01 f303 	lsl.w	r3, r1, r3
 80020e4:	43db      	mvns	r3, r3
 80020e6:	401a      	ands	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	68da      	ldr	r2, [r3, #12]
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	2103      	movs	r1, #3
 80020f6:	fa01 f303 	lsl.w	r3, r1, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	401a      	ands	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	3301      	adds	r3, #1
 8002106:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
 8002110:	2b00      	cmp	r3, #0
 8002112:	f47f af2f 	bne.w	8001f74 <HAL_GPIO_DeInit+0x10>
  }
}
 8002116:	bf00      	nop
 8002118:	bf00      	nop
 800211a:	371c      	adds	r7, #28
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr
 8002124:	40010000 	.word	0x40010000
 8002128:	48000400 	.word	0x48000400
 800212c:	48000800 	.word	0x48000800
 8002130:	48000c00 	.word	0x48000c00
 8002134:	48001000 	.word	0x48001000
 8002138:	48001400 	.word	0x48001400
 800213c:	48001800 	.word	0x48001800
 8002140:	48001c00 	.word	0x48001c00
 8002144:	40010400 	.word	0x40010400

08002148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	460b      	mov	r3, r1
 8002152:	807b      	strh	r3, [r7, #2]
 8002154:	4613      	mov	r3, r2
 8002156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002158:	787b      	ldrb	r3, [r7, #1]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d003      	beq.n	8002166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800215e:	887a      	ldrh	r2, [r7, #2]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002164:	e002      	b.n	800216c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800216c:	bf00      	nop
 800216e:	370c      	adds	r7, #12
 8002170:	46bd      	mov	sp, r7
 8002172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002176:	4770      	bx	lr

08002178 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002178:	b480      	push	{r7}
 800217a:	b085      	sub	sp, #20
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
 8002180:	460b      	mov	r3, r1
 8002182:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	695b      	ldr	r3, [r3, #20]
 8002188:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800218a:	887a      	ldrh	r2, [r7, #2]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4013      	ands	r3, r2
 8002190:	041a      	lsls	r2, r3, #16
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	43d9      	mvns	r1, r3
 8002196:	887b      	ldrh	r3, [r7, #2]
 8002198:	400b      	ands	r3, r1
 800219a:	431a      	orrs	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	619a      	str	r2, [r3, #24]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021b6:	4b08      	ldr	r3, [pc, #32]	; (80021d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b8:	695a      	ldr	r2, [r3, #20]
 80021ba:	88fb      	ldrh	r3, [r7, #6]
 80021bc:	4013      	ands	r3, r2
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d006      	beq.n	80021d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021c2:	4a05      	ldr	r2, [pc, #20]	; (80021d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	4618      	mov	r0, r3
 80021cc:	f007 f912 	bl	80093f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80021d0:	bf00      	nop
 80021d2:	3708      	adds	r7, #8
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40010400 	.word	0x40010400

080021dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b082      	sub	sp, #8
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021ea:	2301      	movs	r3, #1
 80021ec:	e081      	b.n	80022f2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d106      	bne.n	8002208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f008 faf2 	bl	800a7ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2224      	movs	r2, #36	; 0x24
 800220c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	681a      	ldr	r2, [r3, #0]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f022 0201 	bic.w	r2, r2, #1
 800221e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800222c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800223c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	2b01      	cmp	r3, #1
 8002244:	d107      	bne.n	8002256 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	689a      	ldr	r2, [r3, #8]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002252:	609a      	str	r2, [r3, #8]
 8002254:	e006      	b.n	8002264 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	689a      	ldr	r2, [r3, #8]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002262:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	2b02      	cmp	r3, #2
 800226a:	d104      	bne.n	8002276 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002274:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	687a      	ldr	r2, [r7, #4]
 800227e:	6812      	ldr	r2, [r2, #0]
 8002280:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002284:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002288:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	68da      	ldr	r2, [r3, #12]
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002298:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691a      	ldr	r2, [r3, #16]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	69d9      	ldr	r1, [r3, #28]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1a      	ldr	r2, [r3, #32]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	430a      	orrs	r2, r1
 80022c2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 0201 	orr.w	r2, r2, #1
 80022d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2220      	movs	r2, #32
 80022de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2200      	movs	r2, #0
 80022ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}

080022fa <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 80022fa:	b580      	push	{r7, lr}
 80022fc:	b082      	sub	sp, #8
 80022fe:	af00      	add	r7, sp, #0
 8002300:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e021      	b.n	8002350 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2224      	movs	r2, #36	; 0x24
 8002310:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002324:	6878      	ldr	r0, [r7, #4]
 8002326:	f008 fabf 	bl	800a8a8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af02      	add	r7, sp, #8
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	4608      	mov	r0, r1
 8002362:	4611      	mov	r1, r2
 8002364:	461a      	mov	r2, r3
 8002366:	4603      	mov	r3, r0
 8002368:	817b      	strh	r3, [r7, #10]
 800236a:	460b      	mov	r3, r1
 800236c:	813b      	strh	r3, [r7, #8]
 800236e:	4613      	mov	r3, r2
 8002370:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002378:	b2db      	uxtb	r3, r3
 800237a:	2b20      	cmp	r3, #32
 800237c:	f040 80f9 	bne.w	8002572 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d002      	beq.n	800238c <HAL_I2C_Mem_Write+0x34>
 8002386:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002392:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e0ed      	b.n	8002574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_I2C_Mem_Write+0x4e>
 80023a2:	2302      	movs	r3, #2
 80023a4:	e0e6      	b.n	8002574 <HAL_I2C_Mem_Write+0x21c>
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2201      	movs	r2, #1
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023ae:	f7fe f911 	bl	80005d4 <HAL_GetTick>
 80023b2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	2319      	movs	r3, #25
 80023ba:	2201      	movs	r2, #1
 80023bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80023c0:	68f8      	ldr	r0, [r7, #12]
 80023c2:	f000 fac3 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80023cc:	2301      	movs	r3, #1
 80023ce:	e0d1      	b.n	8002574 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2221      	movs	r2, #33	; 0x21
 80023d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2240      	movs	r2, #64	; 0x40
 80023dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2200      	movs	r2, #0
 80023e4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a3a      	ldr	r2, [r7, #32]
 80023ea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80023f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80023f8:	88f8      	ldrh	r0, [r7, #6]
 80023fa:	893a      	ldrh	r2, [r7, #8]
 80023fc:	8979      	ldrh	r1, [r7, #10]
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	9301      	str	r3, [sp, #4]
 8002402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002404:	9300      	str	r3, [sp, #0]
 8002406:	4603      	mov	r3, r0
 8002408:	68f8      	ldr	r0, [r7, #12]
 800240a:	f000 f9d3 	bl	80027b4 <I2C_RequestMemoryWrite>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d005      	beq.n	8002420 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2200      	movs	r2, #0
 8002418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	e0a9      	b.n	8002574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002424:	b29b      	uxth	r3, r3
 8002426:	2bff      	cmp	r3, #255	; 0xff
 8002428:	d90e      	bls.n	8002448 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	22ff      	movs	r2, #255	; 0xff
 800242e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002434:	b2da      	uxtb	r2, r3
 8002436:	8979      	ldrh	r1, [r7, #10]
 8002438:	2300      	movs	r3, #0
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f000 fc2b 	bl	8002c9c <I2C_TransferConfig>
 8002446:	e00f      	b.n	8002468 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800244c:	b29a      	uxth	r2, r3
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002456:	b2da      	uxtb	r2, r3
 8002458:	8979      	ldrh	r1, [r7, #10]
 800245a:	2300      	movs	r3, #0
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002462:	68f8      	ldr	r0, [r7, #12]
 8002464:	f000 fc1a 	bl	8002c9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f000 faad 	bl	80029cc <I2C_WaitOnTXISFlagUntilTimeout>
 8002472:	4603      	mov	r3, r0
 8002474:	2b00      	cmp	r3, #0
 8002476:	d001      	beq.n	800247c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e07b      	b.n	8002574 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	781a      	ldrb	r2, [r3, #0]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248c:	1c5a      	adds	r2, r3, #1
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002496:	b29b      	uxth	r3, r3
 8002498:	3b01      	subs	r3, #1
 800249a:	b29a      	uxth	r2, r3
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024a4:	3b01      	subs	r3, #1
 80024a6:	b29a      	uxth	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d034      	beq.n	8002520 <HAL_I2C_Mem_Write+0x1c8>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d130      	bne.n	8002520 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024be:	697b      	ldr	r3, [r7, #20]
 80024c0:	9300      	str	r3, [sp, #0]
 80024c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024c4:	2200      	movs	r2, #0
 80024c6:	2180      	movs	r1, #128	; 0x80
 80024c8:	68f8      	ldr	r0, [r7, #12]
 80024ca:	f000 fa3f 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 80024ce:	4603      	mov	r3, r0
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d001      	beq.n	80024d8 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e04d      	b.n	8002574 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2bff      	cmp	r3, #255	; 0xff
 80024e0:	d90e      	bls.n	8002500 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	22ff      	movs	r2, #255	; 0xff
 80024e6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024ec:	b2da      	uxtb	r2, r3
 80024ee:	8979      	ldrh	r1, [r7, #10]
 80024f0:	2300      	movs	r3, #0
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80024f8:	68f8      	ldr	r0, [r7, #12]
 80024fa:	f000 fbcf 	bl	8002c9c <I2C_TransferConfig>
 80024fe:	e00f      	b.n	8002520 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002504:	b29a      	uxth	r2, r3
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800250e:	b2da      	uxtb	r2, r3
 8002510:	8979      	ldrh	r1, [r7, #10]
 8002512:	2300      	movs	r3, #0
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 fbbe 	bl	8002c9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002524:	b29b      	uxth	r3, r3
 8002526:	2b00      	cmp	r3, #0
 8002528:	d19e      	bne.n	8002468 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800252a:	697a      	ldr	r2, [r7, #20]
 800252c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f000 fa8c 	bl	8002a4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e01a      	b.n	8002574 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	2220      	movs	r2, #32
 8002544:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6859      	ldr	r1, [r3, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	4b0a      	ldr	r3, [pc, #40]	; (800257c <HAL_I2C_Mem_Write+0x224>)
 8002552:	400b      	ands	r3, r1
 8002554:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	2220      	movs	r2, #32
 800255a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800256e:	2300      	movs	r3, #0
 8002570:	e000      	b.n	8002574 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8002572:	2302      	movs	r3, #2
  }
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	fe00e800 	.word	0xfe00e800

08002580 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b088      	sub	sp, #32
 8002584:	af02      	add	r7, sp, #8
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	4608      	mov	r0, r1
 800258a:	4611      	mov	r1, r2
 800258c:	461a      	mov	r2, r3
 800258e:	4603      	mov	r3, r0
 8002590:	817b      	strh	r3, [r7, #10]
 8002592:	460b      	mov	r3, r1
 8002594:	813b      	strh	r3, [r7, #8]
 8002596:	4613      	mov	r3, r2
 8002598:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	f040 80fd 	bne.w	80027a2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025a8:	6a3b      	ldr	r3, [r7, #32]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d002      	beq.n	80025b4 <HAL_I2C_Mem_Read+0x34>
 80025ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d105      	bne.n	80025c0 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e0f1      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d101      	bne.n	80025ce <HAL_I2C_Mem_Read+0x4e>
 80025ca:	2302      	movs	r3, #2
 80025cc:	e0ea      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	2201      	movs	r2, #1
 80025d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80025d6:	f7fd fffd 	bl	80005d4 <HAL_GetTick>
 80025da:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2319      	movs	r3, #25
 80025e2:	2201      	movs	r2, #1
 80025e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f000 f9af 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80025f4:	2301      	movs	r3, #1
 80025f6:	e0d5      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	2222      	movs	r2, #34	; 0x22
 80025fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	6a3a      	ldr	r2, [r7, #32]
 8002612:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002618:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002620:	88f8      	ldrh	r0, [r7, #6]
 8002622:	893a      	ldrh	r2, [r7, #8]
 8002624:	8979      	ldrh	r1, [r7, #10]
 8002626:	697b      	ldr	r3, [r7, #20]
 8002628:	9301      	str	r3, [sp, #4]
 800262a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800262c:	9300      	str	r3, [sp, #0]
 800262e:	4603      	mov	r3, r0
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f000 f913 	bl	800285c <I2C_RequestMemoryRead>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d005      	beq.n	8002648 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e0ad      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800264c:	b29b      	uxth	r3, r3
 800264e:	2bff      	cmp	r3, #255	; 0xff
 8002650:	d90e      	bls.n	8002670 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	22ff      	movs	r2, #255	; 0xff
 8002656:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800265c:	b2da      	uxtb	r2, r3
 800265e:	8979      	ldrh	r1, [r7, #10]
 8002660:	4b52      	ldr	r3, [pc, #328]	; (80027ac <HAL_I2C_Mem_Read+0x22c>)
 8002662:	9300      	str	r3, [sp, #0]
 8002664:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002668:	68f8      	ldr	r0, [r7, #12]
 800266a:	f000 fb17 	bl	8002c9c <I2C_TransferConfig>
 800266e:	e00f      	b.n	8002690 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002674:	b29a      	uxth	r2, r3
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800267e:	b2da      	uxtb	r2, r3
 8002680:	8979      	ldrh	r1, [r7, #10]
 8002682:	4b4a      	ldr	r3, [pc, #296]	; (80027ac <HAL_I2C_Mem_Read+0x22c>)
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800268a:	68f8      	ldr	r0, [r7, #12]
 800268c:	f000 fb06 	bl	8002c9c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	9300      	str	r3, [sp, #0]
 8002694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002696:	2200      	movs	r2, #0
 8002698:	2104      	movs	r1, #4
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f000 f956 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d001      	beq.n	80026aa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80026a6:	2301      	movs	r3, #1
 80026a8:	e07c      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b4:	b2d2      	uxtb	r2, r2
 80026b6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026c6:	3b01      	subs	r3, #1
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	3b01      	subs	r3, #1
 80026d6:	b29a      	uxth	r2, r3
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e0:	b29b      	uxth	r3, r3
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d034      	beq.n	8002750 <HAL_I2C_Mem_Read+0x1d0>
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d130      	bne.n	8002750 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f4:	2200      	movs	r2, #0
 80026f6:	2180      	movs	r1, #128	; 0x80
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f000 f927 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e04d      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800270c:	b29b      	uxth	r3, r3
 800270e:	2bff      	cmp	r3, #255	; 0xff
 8002710:	d90e      	bls.n	8002730 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	22ff      	movs	r2, #255	; 0xff
 8002716:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800271c:	b2da      	uxtb	r2, r3
 800271e:	8979      	ldrh	r1, [r7, #10]
 8002720:	2300      	movs	r3, #0
 8002722:	9300      	str	r3, [sp, #0]
 8002724:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 fab7 	bl	8002c9c <I2C_TransferConfig>
 800272e:	e00f      	b.n	8002750 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29a      	uxth	r2, r3
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800273e:	b2da      	uxtb	r2, r3
 8002740:	8979      	ldrh	r1, [r7, #10]
 8002742:	2300      	movs	r3, #0
 8002744:	9300      	str	r3, [sp, #0]
 8002746:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800274a:	68f8      	ldr	r0, [r7, #12]
 800274c:	f000 faa6 	bl	8002c9c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002754:	b29b      	uxth	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d19a      	bne.n	8002690 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800275a:	697a      	ldr	r2, [r7, #20]
 800275c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f974 	bl	8002a4c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e01a      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	2220      	movs	r2, #32
 8002774:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b0b      	ldr	r3, [pc, #44]	; (80027b0 <HAL_I2C_Mem_Read+0x230>)
 8002782:	400b      	ands	r3, r1
 8002784:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	2220      	movs	r2, #32
 800278a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	2200      	movs	r2, #0
 8002792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800279e:	2300      	movs	r3, #0
 80027a0:	e000      	b.n	80027a4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80027a2:	2302      	movs	r3, #2
  }
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	3718      	adds	r7, #24
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	80002400 	.word	0x80002400
 80027b0:	fe00e800 	.word	0xfe00e800

080027b4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b086      	sub	sp, #24
 80027b8:	af02      	add	r7, sp, #8
 80027ba:	60f8      	str	r0, [r7, #12]
 80027bc:	4608      	mov	r0, r1
 80027be:	4611      	mov	r1, r2
 80027c0:	461a      	mov	r2, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	817b      	strh	r3, [r7, #10]
 80027c6:	460b      	mov	r3, r1
 80027c8:	813b      	strh	r3, [r7, #8]
 80027ca:	4613      	mov	r3, r2
 80027cc:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	b2da      	uxtb	r2, r3
 80027d2:	8979      	ldrh	r1, [r7, #10]
 80027d4:	4b20      	ldr	r3, [pc, #128]	; (8002858 <I2C_RequestMemoryWrite+0xa4>)
 80027d6:	9300      	str	r3, [sp, #0]
 80027d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	f000 fa5d 	bl	8002c9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80027e2:	69fa      	ldr	r2, [r7, #28]
 80027e4:	69b9      	ldr	r1, [r7, #24]
 80027e6:	68f8      	ldr	r0, [r7, #12]
 80027e8:	f000 f8f0 	bl	80029cc <I2C_WaitOnTXISFlagUntilTimeout>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d001      	beq.n	80027f6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e02c      	b.n	8002850 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80027f6:	88fb      	ldrh	r3, [r7, #6]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80027fc:	893b      	ldrh	r3, [r7, #8]
 80027fe:	b2da      	uxtb	r2, r3
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	629a      	str	r2, [r3, #40]	; 0x28
 8002806:	e015      	b.n	8002834 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002808:	893b      	ldrh	r3, [r7, #8]
 800280a:	0a1b      	lsrs	r3, r3, #8
 800280c:	b29b      	uxth	r3, r3
 800280e:	b2da      	uxtb	r2, r3
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002816:	69fa      	ldr	r2, [r7, #28]
 8002818:	69b9      	ldr	r1, [r7, #24]
 800281a:	68f8      	ldr	r0, [r7, #12]
 800281c:	f000 f8d6 	bl	80029cc <I2C_WaitOnTXISFlagUntilTimeout>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d001      	beq.n	800282a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002826:	2301      	movs	r3, #1
 8002828:	e012      	b.n	8002850 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800282a:	893b      	ldrh	r3, [r7, #8]
 800282c:	b2da      	uxtb	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	9300      	str	r3, [sp, #0]
 8002838:	69bb      	ldr	r3, [r7, #24]
 800283a:	2200      	movs	r2, #0
 800283c:	2180      	movs	r1, #128	; 0x80
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f000 f884 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 8002844:	4603      	mov	r3, r0
 8002846:	2b00      	cmp	r3, #0
 8002848:	d001      	beq.n	800284e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	80002000 	.word	0x80002000

0800285c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af02      	add	r7, sp, #8
 8002862:	60f8      	str	r0, [r7, #12]
 8002864:	4608      	mov	r0, r1
 8002866:	4611      	mov	r1, r2
 8002868:	461a      	mov	r2, r3
 800286a:	4603      	mov	r3, r0
 800286c:	817b      	strh	r3, [r7, #10]
 800286e:	460b      	mov	r3, r1
 8002870:	813b      	strh	r3, [r7, #8]
 8002872:	4613      	mov	r3, r2
 8002874:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002876:	88fb      	ldrh	r3, [r7, #6]
 8002878:	b2da      	uxtb	r2, r3
 800287a:	8979      	ldrh	r1, [r7, #10]
 800287c:	4b20      	ldr	r3, [pc, #128]	; (8002900 <I2C_RequestMemoryRead+0xa4>)
 800287e:	9300      	str	r3, [sp, #0]
 8002880:	2300      	movs	r3, #0
 8002882:	68f8      	ldr	r0, [r7, #12]
 8002884:	f000 fa0a 	bl	8002c9c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002888:	69fa      	ldr	r2, [r7, #28]
 800288a:	69b9      	ldr	r1, [r7, #24]
 800288c:	68f8      	ldr	r0, [r7, #12]
 800288e:	f000 f89d 	bl	80029cc <I2C_WaitOnTXISFlagUntilTimeout>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e02c      	b.n	80028f6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800289c:	88fb      	ldrh	r3, [r7, #6]
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d105      	bne.n	80028ae <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028a2:	893b      	ldrh	r3, [r7, #8]
 80028a4:	b2da      	uxtb	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	629a      	str	r2, [r3, #40]	; 0x28
 80028ac:	e015      	b.n	80028da <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028ae:	893b      	ldrh	r3, [r7, #8]
 80028b0:	0a1b      	lsrs	r3, r3, #8
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028bc:	69fa      	ldr	r2, [r7, #28]
 80028be:	69b9      	ldr	r1, [r7, #24]
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f000 f883 	bl	80029cc <I2C_WaitOnTXISFlagUntilTimeout>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e012      	b.n	80028f6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028d0:	893b      	ldrh	r3, [r7, #8]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	69bb      	ldr	r3, [r7, #24]
 80028e0:	2200      	movs	r2, #0
 80028e2:	2140      	movs	r1, #64	; 0x40
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 f831 	bl	800294c <I2C_WaitOnFlagUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	80002000 	.word	0x80002000

08002904 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b02      	cmp	r3, #2
 8002918:	d103      	bne.n	8002922 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	2200      	movs	r2, #0
 8002920:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b01      	cmp	r3, #1
 800292e:	d007      	beq.n	8002940 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699a      	ldr	r2, [r3, #24]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	619a      	str	r2, [r3, #24]
  }
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b084      	sub	sp, #16
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	603b      	str	r3, [r7, #0]
 8002958:	4613      	mov	r3, r2
 800295a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800295c:	e022      	b.n	80029a4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002964:	d01e      	beq.n	80029a4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002966:	f7fd fe35 	bl	80005d4 <HAL_GetTick>
 800296a:	4602      	mov	r2, r0
 800296c:	69bb      	ldr	r3, [r7, #24]
 800296e:	1ad3      	subs	r3, r2, r3
 8002970:	683a      	ldr	r2, [r7, #0]
 8002972:	429a      	cmp	r2, r3
 8002974:	d302      	bcc.n	800297c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d113      	bne.n	80029a4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002980:	f043 0220 	orr.w	r2, r3, #32
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2200      	movs	r2, #0
 800299c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	e00f      	b.n	80029c4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	699a      	ldr	r2, [r3, #24]
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	4013      	ands	r3, r2
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	429a      	cmp	r2, r3
 80029b2:	bf0c      	ite	eq
 80029b4:	2301      	moveq	r3, #1
 80029b6:	2300      	movne	r3, #0
 80029b8:	b2db      	uxtb	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	79fb      	ldrb	r3, [r7, #7]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d0cd      	beq.n	800295e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80029c2:	2300      	movs	r3, #0
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	3710      	adds	r7, #16
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	60f8      	str	r0, [r7, #12]
 80029d4:	60b9      	str	r1, [r7, #8]
 80029d6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80029d8:	e02c      	b.n	8002a34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	68b9      	ldr	r1, [r7, #8]
 80029de:	68f8      	ldr	r0, [r7, #12]
 80029e0:	f000 f870 	bl	8002ac4 <I2C_IsErrorOccurred>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d001      	beq.n	80029ee <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e02a      	b.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f4:	d01e      	beq.n	8002a34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029f6:	f7fd fded 	bl	80005d4 <HAL_GetTick>
 80029fa:	4602      	mov	r2, r0
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	1ad3      	subs	r3, r2, r3
 8002a00:	68ba      	ldr	r2, [r7, #8]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d302      	bcc.n	8002a0c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d113      	bne.n	8002a34 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a10:	f043 0220 	orr.w	r2, r3, #32
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	2220      	movs	r2, #32
 8002a1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2200      	movs	r2, #0
 8002a24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e007      	b.n	8002a44 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	f003 0302 	and.w	r3, r3, #2
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d1cb      	bne.n	80029da <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b084      	sub	sp, #16
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a58:	e028      	b.n	8002aac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	68f8      	ldr	r0, [r7, #12]
 8002a60:	f000 f830 	bl	8002ac4 <I2C_IsErrorOccurred>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e026      	b.n	8002abc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a6e:	f7fd fdb1 	bl	80005d4 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	68ba      	ldr	r2, [r7, #8]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d302      	bcc.n	8002a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d113      	bne.n	8002aac <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a88:	f043 0220 	orr.w	r2, r3, #32
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2220      	movs	r2, #32
 8002a94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e007      	b.n	8002abc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	f003 0320 	and.w	r3, r3, #32
 8002ab6:	2b20      	cmp	r3, #32
 8002ab8:	d1cf      	bne.n	8002a5a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002aba:	2300      	movs	r3, #0
}
 8002abc:	4618      	mov	r0, r3
 8002abe:	3710      	adds	r7, #16
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd80      	pop	{r7, pc}

08002ac4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b08a      	sub	sp, #40	; 0x28
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	699b      	ldr	r3, [r3, #24]
 8002adc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	f003 0310 	and.w	r3, r3, #16
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d075      	beq.n	8002bdc <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2210      	movs	r2, #16
 8002af6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002af8:	e056      	b.n	8002ba8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b00:	d052      	beq.n	8002ba8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b02:	f7fd fd67 	bl	80005d4 <HAL_GetTick>
 8002b06:	4602      	mov	r2, r0
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	1ad3      	subs	r3, r2, r3
 8002b0c:	68ba      	ldr	r2, [r7, #8]
 8002b0e:	429a      	cmp	r2, r3
 8002b10:	d302      	bcc.n	8002b18 <I2C_IsErrorOccurred+0x54>
 8002b12:	68bb      	ldr	r3, [r7, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d147      	bne.n	8002ba8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b22:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b2a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	699b      	ldr	r3, [r3, #24]
 8002b32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b3a:	d12e      	bne.n	8002b9a <I2C_IsErrorOccurred+0xd6>
 8002b3c:	697b      	ldr	r3, [r7, #20]
 8002b3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b42:	d02a      	beq.n	8002b9a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002b44:	7cfb      	ldrb	r3, [r7, #19]
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d027      	beq.n	8002b9a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b58:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b5a:	f7fd fd3b 	bl	80005d4 <HAL_GetTick>
 8002b5e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b60:	e01b      	b.n	8002b9a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002b62:	f7fd fd37 	bl	80005d4 <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b19      	cmp	r3, #25
 8002b6e:	d914      	bls.n	8002b9a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b74:	f043 0220 	orr.w	r2, r3, #32
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2220      	movs	r2, #32
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	699b      	ldr	r3, [r3, #24]
 8002ba0:	f003 0320 	and.w	r3, r3, #32
 8002ba4:	2b20      	cmp	r3, #32
 8002ba6:	d1dc      	bne.n	8002b62 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	f003 0320 	and.w	r3, r3, #32
 8002bb2:	2b20      	cmp	r3, #32
 8002bb4:	d003      	beq.n	8002bbe <I2C_IsErrorOccurred+0xfa>
 8002bb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d09d      	beq.n	8002afa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d103      	bne.n	8002bce <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2220      	movs	r2, #32
 8002bcc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	f043 0304 	orr.w	r3, r3, #4
 8002bd4:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002be4:	69bb      	ldr	r3, [r7, #24]
 8002be6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d00b      	beq.n	8002c06 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c06:	69bb      	ldr	r3, [r7, #24]
 8002c08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d00b      	beq.n	8002c28 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c10:	6a3b      	ldr	r3, [r7, #32]
 8002c12:	f043 0308 	orr.w	r3, r3, #8
 8002c16:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c28:	69bb      	ldr	r3, [r7, #24]
 8002c2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d00b      	beq.n	8002c4a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c32:	6a3b      	ldr	r3, [r7, #32]
 8002c34:	f043 0302 	orr.w	r3, r3, #2
 8002c38:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c4a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d01c      	beq.n	8002c8c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff fe56 	bl	8002904 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	6859      	ldr	r1, [r3, #4]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	4b0d      	ldr	r3, [pc, #52]	; (8002c98 <I2C_IsErrorOccurred+0x1d4>)
 8002c64:	400b      	ands	r3, r1
 8002c66:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c6c:	6a3b      	ldr	r3, [r7, #32]
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2220      	movs	r2, #32
 8002c78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	2200      	movs	r2, #0
 8002c88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3728      	adds	r7, #40	; 0x28
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}
 8002c98:	fe00e800 	.word	0xfe00e800

08002c9c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	60f8      	str	r0, [r7, #12]
 8002ca4:	607b      	str	r3, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	817b      	strh	r3, [r7, #10]
 8002caa:	4613      	mov	r3, r2
 8002cac:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cae:	897b      	ldrh	r3, [r7, #10]
 8002cb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cb4:	7a7b      	ldrb	r3, [r7, #9]
 8002cb6:	041b      	lsls	r3, r3, #16
 8002cb8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cbc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cca:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	0d5b      	lsrs	r3, r3, #21
 8002cd6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002cda:	4b08      	ldr	r3, [pc, #32]	; (8002cfc <I2C_TransferConfig+0x60>)
 8002cdc:	430b      	orrs	r3, r1
 8002cde:	43db      	mvns	r3, r3
 8002ce0:	ea02 0103 	and.w	r1, r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002cee:	bf00      	nop
 8002cf0:	371c      	adds	r7, #28
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
 8002cfa:	bf00      	nop
 8002cfc:	03ff63ff 	.word	0x03ff63ff

08002d00 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
 8002d08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b20      	cmp	r3, #32
 8002d14:	d138      	bne.n	8002d88 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d101      	bne.n	8002d24 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e032      	b.n	8002d8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2201      	movs	r2, #1
 8002d28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2224      	movs	r2, #36	; 0x24
 8002d30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f022 0201 	bic.w	r2, r2, #1
 8002d42:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d52:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	6819      	ldr	r1, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	683a      	ldr	r2, [r7, #0]
 8002d60:	430a      	orrs	r2, r1
 8002d62:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f042 0201 	orr.w	r2, r2, #1
 8002d72:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2220      	movs	r2, #32
 8002d78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002d84:	2300      	movs	r3, #0
 8002d86:	e000      	b.n	8002d8a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002d88:	2302      	movs	r3, #2
  }
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	370c      	adds	r7, #12
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr

08002d96 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002d96:	b480      	push	{r7}
 8002d98:	b085      	sub	sp, #20
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
 8002d9e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b20      	cmp	r3, #32
 8002daa:	d139      	bne.n	8002e20 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d101      	bne.n	8002dba <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002db6:	2302      	movs	r3, #2
 8002db8:	e033      	b.n	8002e22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2224      	movs	r2, #36	; 0x24
 8002dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f022 0201 	bic.w	r2, r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002de8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	021b      	lsls	r3, r3, #8
 8002dee:	68fa      	ldr	r2, [r7, #12]
 8002df0:	4313      	orrs	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68fa      	ldr	r2, [r7, #12]
 8002dfa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f042 0201 	orr.w	r2, r2, #1
 8002e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	e000      	b.n	8002e22 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e20:	2302      	movs	r3, #2
  }
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3714      	adds	r7, #20
 8002e26:	46bd      	mov	sp, r7
 8002e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2c:	4770      	bx	lr
	...

08002e30 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002e3c:	f7fd fbca 	bl	80005d4 <HAL_GetTick>
 8002e40:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d102      	bne.n	8002e4e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	73fb      	strb	r3, [r7, #15]
 8002e4c:	e092      	b.n	8002f74 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f040 808b 	bne.w	8002f74 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f007 fd46 	bl	800a8f0 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002e64:	f241 3188 	movw	r1, #5000	; 0x1388
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	f000 fad0 	bl	800340e <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689a      	ldr	r2, [r3, #8]
 8002e74:	4b42      	ldr	r3, [pc, #264]	; (8002f80 <HAL_OSPI_Init+0x150>)
 8002e76:	4013      	ands	r3, r2
 8002e78:	687a      	ldr	r2, [r7, #4]
 8002e7a:	68d1      	ldr	r1, [r2, #12]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	6912      	ldr	r2, [r2, #16]
 8002e80:	3a01      	subs	r2, #1
 8002e82:	0412      	lsls	r2, r2, #16
 8002e84:	4311      	orrs	r1, r2
 8002e86:	687a      	ldr	r2, [r7, #4]
 8002e88:	6952      	ldr	r2, [r2, #20]
 8002e8a:	3a01      	subs	r2, #1
 8002e8c:	0212      	lsls	r2, r2, #8
 8002e8e:	4311      	orrs	r1, r2
 8002e90:	687a      	ldr	r2, [r7, #4]
 8002e92:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002e94:	4311      	orrs	r1, r2
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	69d2      	ldr	r2, [r2, #28]
 8002e9a:	4311      	orrs	r1, r2
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	0412      	lsls	r2, r2, #16
 8002eae:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	3b01      	subs	r3, #1
 8002ec0:	021a      	lsls	r2, r3, #8
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	2120      	movs	r1, #32
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fddc 	bl	8003a94 <OSPI_WaitFlagStateUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d146      	bne.n	8002f74 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6a1b      	ldr	r3, [r3, #32]
 8002ef4:	1e5a      	subs	r2, r3, #1
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	430a      	orrs	r2, r1
 8002efc:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	689a      	ldr	r2, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f1c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681a      	ldr	r2, [r3, #0]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f042 0201 	orr.w	r2, r2, #1
 8002f42:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d107      	bne.n	8002f5c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689a      	ldr	r2, [r3, #8]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f042 0202 	orr.w	r2, r2, #2
 8002f5a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	68db      	ldr	r3, [r3, #12]
 8002f60:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002f64:	d103      	bne.n	8002f6e <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	645a      	str	r2, [r3, #68]	; 0x44
 8002f6c:	e002      	b.n	8002f74 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8002f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	f8e0f8f4 	.word	0xf8e0f8f4

08002f84 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b084      	sub	sp, #16
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d102      	bne.n	8002f9c <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
 8002f9a:	e015      	b.n	8002fc8 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f022 0201 	bic.w	r2, r2, #1
 8002faa:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	689a      	ldr	r2, [r3, #8]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0202 	bic.w	r2, r2, #2
 8002fba:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	f007 fd03 	bl	800a9c8 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8002fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}

08002fd2 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8002fd2:	b580      	push	{r7, lr}
 8002fd4:	b08a      	sub	sp, #40	; 0x28
 8002fd6:	af02      	add	r7, sp, #8
 8002fd8:	60f8      	str	r0, [r7, #12]
 8002fda:	60b9      	str	r1, [r7, #8]
 8002fdc:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002fde:	f7fd faf9 	bl	80005d4 <HAL_GetTick>
 8002fe2:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002fe4:	68bb      	ldr	r3, [r7, #8]
 8002fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe8:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fee:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	2b02      	cmp	r3, #2
 8002ff4:	d104      	bne.n	8003000 <HAL_OSPI_Command+0x2e>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ffe:	d10d      	bne.n	800301c <HAL_OSPI_Command+0x4a>
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	2b14      	cmp	r3, #20
 8003004:	d103      	bne.n	800300e <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b02      	cmp	r3, #2
 800300c:	d006      	beq.n	800301c <HAL_OSPI_Command+0x4a>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	2b24      	cmp	r3, #36	; 0x24
 8003012:	d153      	bne.n	80030bc <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d14f      	bne.n	80030bc <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	2200      	movs	r2, #0
 8003024:	2120      	movs	r1, #32
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 fd34 	bl	8003a94 <OSPI_WaitFlagStateUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003030:	7ffb      	ldrb	r3, [r7, #31]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d148      	bne.n	80030c8 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2200      	movs	r2, #0
 800303a:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	68f8      	ldr	r0, [r7, #12]
 8003040:	f000 fd60 	bl	8003b04 <OSPI_ConfigCmd>
 8003044:	4603      	mov	r3, r0
 8003046:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003048:	7ffb      	ldrb	r3, [r7, #31]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d13c      	bne.n	80030c8 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800304e:	68bb      	ldr	r3, [r7, #8]
 8003050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003052:	2b00      	cmp	r3, #0
 8003054:	d10e      	bne.n	8003074 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	9300      	str	r3, [sp, #0]
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	2201      	movs	r2, #1
 800305e:	2102      	movs	r1, #2
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fd17 	bl	8003a94 <OSPI_WaitFlagStateUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2202      	movs	r2, #2
 8003070:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8003072:	e029      	b.n	80030c8 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d103      	bne.n	8003084 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2204      	movs	r2, #4
 8003080:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003082:	e021      	b.n	80030c8 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d10b      	bne.n	80030a4 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	2b24      	cmp	r3, #36	; 0x24
 8003092:	d103      	bne.n	800309c <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2204      	movs	r2, #4
 8003098:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800309a:	e015      	b.n	80030c8 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2214      	movs	r2, #20
 80030a0:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80030a2:	e011      	b.n	80030c8 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030a8:	2b14      	cmp	r3, #20
 80030aa:	d103      	bne.n	80030b4 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2204      	movs	r2, #4
 80030b0:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80030b2:	e009      	b.n	80030c8 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2224      	movs	r2, #36	; 0x24
 80030b8:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80030ba:	e005      	b.n	80030c8 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2210      	movs	r2, #16
 80030c4:	649a      	str	r2, [r3, #72]	; 0x48
 80030c6:	e000      	b.n	80030ca <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 80030c8:	bf00      	nop
  }

  /* Return function status */
  return status;
 80030ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3720      	adds	r7, #32
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	; 0x28
 80030d8:	af02      	add	r7, sp, #8
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80030e0:	f7fd fa78 	bl	80005d4 <HAL_GetTick>
 80030e4:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	3350      	adds	r3, #80	; 0x50
 80030ec:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d105      	bne.n	8003100 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2208      	movs	r2, #8
 80030fc:	649a      	str	r2, [r3, #72]	; 0x48
 80030fe:	e057      	b.n	80031b0 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	2b04      	cmp	r3, #4
 8003106:	d14e      	bne.n	80031a6 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310e:	1c5a      	adds	r2, r3, #1
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	68ba      	ldr	r2, [r7, #8]
 8003120:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003130:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2201      	movs	r2, #1
 800313a:	2104      	movs	r1, #4
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 fca9 	bl	8003a94 <OSPI_WaitFlagStateUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003146:	7ffb      	ldrb	r3, [r7, #31]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d113      	bne.n	8003174 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003150:	781a      	ldrb	r2, [r3, #0]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800315a:	1c5a      	adds	r2, r3, #1
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003164:	1e5a      	subs	r2, r3, #1
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1df      	bne.n	8003132 <HAL_OSPI_Transmit+0x5e>
 8003172:	e000      	b.n	8003176 <HAL_OSPI_Transmit+0xa2>
          break;
 8003174:	bf00      	nop

      if (status == HAL_OK)
 8003176:	7ffb      	ldrb	r3, [r7, #31]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d119      	bne.n	80031b0 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	2201      	movs	r2, #1
 8003184:	2102      	movs	r1, #2
 8003186:	68f8      	ldr	r0, [r7, #12]
 8003188:	f000 fc84 	bl	8003a94 <OSPI_WaitFlagStateUntilTimeout>
 800318c:	4603      	mov	r3, r0
 800318e:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8003190:	7ffb      	ldrb	r3, [r7, #31]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d10c      	bne.n	80031b0 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2202      	movs	r2, #2
 800319c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	2202      	movs	r2, #2
 80031a2:	645a      	str	r2, [r3, #68]	; 0x44
 80031a4:	e004      	b.n	80031b0 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2210      	movs	r2, #16
 80031ae:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80031b0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	3720      	adds	r7, #32
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}

080031ba <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80031ba:	b580      	push	{r7, lr}
 80031bc:	b08c      	sub	sp, #48	; 0x30
 80031be:	af02      	add	r7, sp, #8
 80031c0:	60f8      	str	r0, [r7, #12]
 80031c2:	60b9      	str	r1, [r7, #8]
 80031c4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80031c6:	f7fd fa05 	bl	80005d4 <HAL_GetTick>
 80031ca:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	3350      	adds	r3, #80	; 0x50
 80031d2:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031da:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80031e4:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d106      	bne.n	80031fa <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	2208      	movs	r2, #8
 80031f6:	649a      	str	r2, [r3, #72]	; 0x48
 80031f8:	e07c      	b.n	80032f4 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031fe:	2b04      	cmp	r3, #4
 8003200:	d172      	bne.n	80032e8 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003208:	1c5a      	adds	r2, r3, #1
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	68ba      	ldr	r2, [r7, #8]
 800321a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800322e:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	68db      	ldr	r3, [r3, #12]
 8003234:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003238:	d104      	bne.n	8003244 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	649a      	str	r2, [r3, #72]	; 0x48
 8003242:	e011      	b.n	8003268 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800324c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003250:	2b00      	cmp	r3, #0
 8003252:	d004      	beq.n	800325e <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	69ba      	ldr	r2, [r7, #24]
 800325a:	649a      	str	r2, [r3, #72]	; 0x48
 800325c:	e004      	b.n	8003268 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	697a      	ldr	r2, [r7, #20]
 8003264:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	9300      	str	r3, [sp, #0]
 800326c:	6a3b      	ldr	r3, [r7, #32]
 800326e:	2201      	movs	r2, #1
 8003270:	2106      	movs	r1, #6
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 fc0e 	bl	8003a94 <OSPI_WaitFlagStateUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 800327e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003282:	2b00      	cmp	r3, #0
 8003284:	d114      	bne.n	80032b0 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	7812      	ldrb	r2, [r2, #0]
 800328e:	b2d2      	uxtb	r2, r2
 8003290:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003296:	1c5a      	adds	r2, r3, #1
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a0:	1e5a      	subs	r2, r3, #1
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1dc      	bne.n	8003268 <HAL_OSPI_Receive+0xae>
 80032ae:	e000      	b.n	80032b2 <HAL_OSPI_Receive+0xf8>
          break;
 80032b0:	bf00      	nop

      if (status == HAL_OK)
 80032b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d11c      	bne.n	80032f4 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	9300      	str	r3, [sp, #0]
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	2201      	movs	r2, #1
 80032c2:	2102      	movs	r1, #2
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 fbe5 	bl	8003a94 <OSPI_WaitFlagStateUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 80032d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d10d      	bne.n	80032f4 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2202      	movs	r2, #2
 80032de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2202      	movs	r2, #2
 80032e4:	645a      	str	r2, [r3, #68]	; 0x44
 80032e6:	e005      	b.n	80032f4 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	2210      	movs	r2, #16
 80032f2:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80032f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3728      	adds	r7, #40	; 0x28
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800330c:	f7fd f962 	bl	80005d4 <HAL_GetTick>
 8003310:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003318:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003322:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003328:	2b04      	cmp	r3, #4
 800332a:	d164      	bne.n	80033f6 <HAL_OSPI_AutoPolling+0xf6>
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003334:	d15f      	bne.n	80033f6 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	69bb      	ldr	r3, [r7, #24]
 800333c:	2200      	movs	r2, #0
 800333e:	2120      	movs	r1, #32
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f000 fba7 	bl	8003a94 <OSPI_WaitFlagStateUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800334a:	7ffb      	ldrb	r3, [r7, #31]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d158      	bne.n	8003402 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	6812      	ldr	r2, [r2, #0]
 8003358:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	68ba      	ldr	r2, [r7, #8]
 8003362:	6852      	ldr	r2, [r2, #4]
 8003364:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	6912      	ldr	r2, [r2, #16]
 8003370:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	6899      	ldr	r1, [r3, #8]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	430b      	orrs	r3, r1
 8003388:	431a      	orrs	r2, r3
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8003392:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	68db      	ldr	r3, [r3, #12]
 8003398:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800339c:	d104      	bne.n	80033a8 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	649a      	str	r2, [r3, #72]	; 0x48
 80033a6:	e011      	b.n	80033cc <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80033b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d004      	beq.n	80033c2 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	649a      	str	r2, [r3, #72]	; 0x48
 80033c0:	e004      	b.n	80033cc <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	693a      	ldr	r2, [r7, #16]
 80033c8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	9300      	str	r3, [sp, #0]
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	2201      	movs	r2, #1
 80033d4:	2108      	movs	r1, #8
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 fb5c 	bl	8003a94 <OSPI_WaitFlagStateUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80033e0:	7ffb      	ldrb	r3, [r7, #31]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d10d      	bne.n	8003402 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2208      	movs	r2, #8
 80033ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2202      	movs	r2, #2
 80033f2:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80033f4:	e005      	b.n	8003402 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2210      	movs	r2, #16
 80033fe:	649a      	str	r2, [r3, #72]	; 0x48
 8003400:	e000      	b.n	8003404 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8003402:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003404:	7ffb      	ldrb	r3, [r7, #31]
}
 8003406:	4618      	mov	r0, r3
 8003408:	3720      	adds	r7, #32
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
 8003416:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800341e:	2300      	movs	r3, #0
}
 8003420:	4618      	mov	r0, r3
 8003422:	370c      	adds	r7, #12
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b092      	sub	sp, #72	; 0x48
 8003430:	af00      	add	r7, sp, #0
 8003432:	60f8      	str	r0, [r7, #12]
 8003434:	60b9      	str	r1, [r7, #8]
 8003436:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800343e:	2300      	movs	r3, #0
 8003440:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a08      	ldr	r2, [pc, #32]	; (800346c <HAL_OSPIM_Config+0x40>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d105      	bne.n	800345a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800344e:	2300      	movs	r3, #0
 8003450:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003452:	2301      	movs	r3, #1
 8003454:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003458:	e004      	b.n	8003464 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800345a:	2301      	movs	r3, #1
 800345c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800345e:	2300      	movs	r3, #0
 8003460:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8003464:	2300      	movs	r3, #0
 8003466:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800346a:	e01f      	b.n	80034ac <HAL_OSPIM_Config+0x80>
 800346c:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8003470:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003474:	3301      	adds	r3, #1
 8003476:	b2d8      	uxtb	r0, r3
 8003478:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800347c:	f107 0114 	add.w	r1, r7, #20
 8003480:	4613      	mov	r3, r2
 8003482:	009b      	lsls	r3, r3, #2
 8003484:	4413      	add	r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	4619      	mov	r1, r3
 800348c:	f000 fc9c 	bl	8003dc8 <OSPIM_GetConfig>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d005      	beq.n	80034a2 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2208      	movs	r2, #8
 80034a0:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80034a2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034a6:	3301      	adds	r3, #1
 80034a8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80034ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d9dd      	bls.n	8003470 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80034b4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f040 82de 	bne.w	8003a7a <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80034be:	4bc6      	ldr	r3, [pc, #792]	; (80037d8 <HAL_OSPIM_Config+0x3ac>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00b      	beq.n	80034e2 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 80034ca:	4bc3      	ldr	r3, [pc, #780]	; (80037d8 <HAL_OSPIM_Config+0x3ac>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4ac2      	ldr	r2, [pc, #776]	; (80037d8 <HAL_OSPIM_Config+0x3ac>)
 80034d0:	f023 0301 	bic.w	r3, r3, #1
 80034d4:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 80034d6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034da:	f043 0301 	orr.w	r3, r3, #1
 80034de:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80034e2:	4bbe      	ldr	r3, [pc, #760]	; (80037dc <HAL_OSPIM_Config+0x3b0>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00b      	beq.n	8003506 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80034ee:	4bbb      	ldr	r3, [pc, #748]	; (80037dc <HAL_OSPIM_Config+0x3b0>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	4aba      	ldr	r2, [pc, #744]	; (80037dc <HAL_OSPIM_Config+0x3b0>)
 80034f4:	f023 0301 	bic.w	r3, r3, #1
 80034f8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80034fa:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80034fe:	f043 0302 	orr.w	r3, r3, #2
 8003502:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003506:	49b6      	ldr	r1, [pc, #728]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 8003508:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	3348      	adds	r3, #72	; 0x48
 8003514:	443b      	add	r3, r7
 8003516:	3b2c      	subs	r3, #44	; 0x2c
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	3b01      	subs	r3, #1
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	6859      	ldr	r1, [r3, #4]
 8003522:	48af      	ldr	r0, [pc, #700]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 8003524:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003526:	4613      	mov	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	4413      	add	r3, r2
 800352c:	009b      	lsls	r3, r3, #2
 800352e:	3348      	adds	r3, #72	; 0x48
 8003530:	443b      	add	r3, r7
 8003532:	3b2c      	subs	r3, #44	; 0x2c
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	3b01      	subs	r3, #1
 8003538:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4403      	add	r3, r0
 8003540:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003542:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	3348      	adds	r3, #72	; 0x48
 800354e:	443b      	add	r3, r7
 8003550:	3b34      	subs	r3, #52	; 0x34
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80a1 	beq.w	800369c <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800355a:	49a1      	ldr	r1, [pc, #644]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 800355c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	3348      	adds	r3, #72	; 0x48
 8003568:	443b      	add	r3, r7
 800356a:	3b34      	subs	r3, #52	; 0x34
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	3b01      	subs	r3, #1
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	440b      	add	r3, r1
 8003574:	6859      	ldr	r1, [r3, #4]
 8003576:	489a      	ldr	r0, [pc, #616]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 8003578:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800357a:	4613      	mov	r3, r2
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4413      	add	r3, r2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	3348      	adds	r3, #72	; 0x48
 8003584:	443b      	add	r3, r7
 8003586:	3b34      	subs	r3, #52	; 0x34
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	3b01      	subs	r3, #1
 800358c:	f021 0201 	bic.w	r2, r1, #1
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	4403      	add	r3, r0
 8003594:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8003596:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003598:	4613      	mov	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	4413      	add	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	3348      	adds	r3, #72	; 0x48
 80035a2:	443b      	add	r3, r7
 80035a4:	3b30      	subs	r3, #48	; 0x30
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d01d      	beq.n	80035e8 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80035ac:	498c      	ldr	r1, [pc, #560]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 80035ae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035b0:	4613      	mov	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4413      	add	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	3348      	adds	r3, #72	; 0x48
 80035ba:	443b      	add	r3, r7
 80035bc:	3b30      	subs	r3, #48	; 0x30
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	3b01      	subs	r3, #1
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	6859      	ldr	r1, [r3, #4]
 80035c8:	4885      	ldr	r0, [pc, #532]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 80035ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035cc:	4613      	mov	r3, r2
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	4413      	add	r3, r2
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	3348      	adds	r3, #72	; 0x48
 80035d6:	443b      	add	r3, r7
 80035d8:	3b30      	subs	r3, #48	; 0x30
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	3b01      	subs	r3, #1
 80035de:	f021 0210 	bic.w	r2, r1, #16
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4403      	add	r3, r0
 80035e6:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80035e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035ea:	4613      	mov	r3, r2
 80035ec:	009b      	lsls	r3, r3, #2
 80035ee:	4413      	add	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	3348      	adds	r3, #72	; 0x48
 80035f4:	443b      	add	r3, r7
 80035f6:	3b28      	subs	r3, #40	; 0x28
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d021      	beq.n	8003642 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80035fe:	4978      	ldr	r1, [pc, #480]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 8003600:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003602:	4613      	mov	r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	4413      	add	r3, r2
 8003608:	009b      	lsls	r3, r3, #2
 800360a:	3348      	adds	r3, #72	; 0x48
 800360c:	443b      	add	r3, r7
 800360e:	3b28      	subs	r3, #40	; 0x28
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	3b01      	subs	r3, #1
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	6859      	ldr	r1, [r3, #4]
 800361e:	4870      	ldr	r0, [pc, #448]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 8003620:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003622:	4613      	mov	r3, r2
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	4413      	add	r3, r2
 8003628:	009b      	lsls	r3, r3, #2
 800362a:	3348      	adds	r3, #72	; 0x48
 800362c:	443b      	add	r3, r7
 800362e:	3b28      	subs	r3, #40	; 0x28
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	3b01      	subs	r3, #1
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	4403      	add	r3, r0
 8003640:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003642:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003644:	4613      	mov	r3, r2
 8003646:	009b      	lsls	r3, r3, #2
 8003648:	4413      	add	r3, r2
 800364a:	009b      	lsls	r3, r3, #2
 800364c:	3348      	adds	r3, #72	; 0x48
 800364e:	443b      	add	r3, r7
 8003650:	3b24      	subs	r3, #36	; 0x24
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d021      	beq.n	800369c <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003658:	4961      	ldr	r1, [pc, #388]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 800365a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	3348      	adds	r3, #72	; 0x48
 8003666:	443b      	add	r3, r7
 8003668:	3b24      	subs	r3, #36	; 0x24
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	3b01      	subs	r3, #1
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	6859      	ldr	r1, [r3, #4]
 8003678:	4859      	ldr	r0, [pc, #356]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 800367a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800367c:	4613      	mov	r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	4413      	add	r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	3348      	adds	r3, #72	; 0x48
 8003686:	443b      	add	r3, r7
 8003688:	3b24      	subs	r3, #36	; 0x24
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	3b01      	subs	r3, #1
 800368e:	f003 0301 	and.w	r3, r3, #1
 8003692:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	4403      	add	r3, r0
 800369a:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800369c:	68bb      	ldr	r3, [r7, #8]
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036a4:	4613      	mov	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4413      	add	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	3348      	adds	r3, #72	; 0x48
 80036ae:	443b      	add	r3, r7
 80036b0:	3b34      	subs	r3, #52	; 0x34
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4299      	cmp	r1, r3
 80036b6:	d038      	beq.n	800372a <HAL_OSPIM_Config+0x2fe>
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	6859      	ldr	r1, [r3, #4]
 80036bc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036c0:	4613      	mov	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	4413      	add	r3, r2
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	3348      	adds	r3, #72	; 0x48
 80036ca:	443b      	add	r3, r7
 80036cc:	3b30      	subs	r3, #48	; 0x30
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4299      	cmp	r1, r3
 80036d2:	d02a      	beq.n	800372a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80036d4:	68bb      	ldr	r3, [r7, #8]
 80036d6:	6899      	ldr	r1, [r3, #8]
 80036d8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036dc:	4613      	mov	r3, r2
 80036de:	009b      	lsls	r3, r3, #2
 80036e0:	4413      	add	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	3348      	adds	r3, #72	; 0x48
 80036e6:	443b      	add	r3, r7
 80036e8:	3b2c      	subs	r3, #44	; 0x2c
 80036ea:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80036ec:	4299      	cmp	r1, r3
 80036ee:	d01c      	beq.n	800372a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	68d9      	ldr	r1, [r3, #12]
 80036f4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036f8:	4613      	mov	r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	4413      	add	r3, r2
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	3348      	adds	r3, #72	; 0x48
 8003702:	443b      	add	r3, r7
 8003704:	3b28      	subs	r3, #40	; 0x28
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4299      	cmp	r1, r3
 800370a:	d00e      	beq.n	800372a <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	6919      	ldr	r1, [r3, #16]
 8003710:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003714:	4613      	mov	r3, r2
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	3348      	adds	r3, #72	; 0x48
 800371e:	443b      	add	r3, r7
 8003720:	3b24      	subs	r3, #36	; 0x24
 8003722:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003724:	4299      	cmp	r1, r3
 8003726:	f040 80d3 	bne.w	80038d0 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800372a:	492d      	ldr	r1, [pc, #180]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 800372c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003730:	4613      	mov	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	009b      	lsls	r3, r3, #2
 8003738:	3348      	adds	r3, #72	; 0x48
 800373a:	443b      	add	r3, r7
 800373c:	3b34      	subs	r3, #52	; 0x34
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	3b01      	subs	r3, #1
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	4825      	ldr	r0, [pc, #148]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 800374a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800374e:	4613      	mov	r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	3348      	adds	r3, #72	; 0x48
 8003758:	443b      	add	r3, r7
 800375a:	3b34      	subs	r3, #52	; 0x34
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	3b01      	subs	r3, #1
 8003760:	f021 0201 	bic.w	r2, r1, #1
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	4403      	add	r3, r0
 8003768:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 800376a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800376e:	4613      	mov	r3, r2
 8003770:	009b      	lsls	r3, r3, #2
 8003772:	4413      	add	r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	3348      	adds	r3, #72	; 0x48
 8003778:	443b      	add	r3, r7
 800377a:	3b30      	subs	r3, #48	; 0x30
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d01f      	beq.n	80037c2 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8003782:	4917      	ldr	r1, [pc, #92]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 8003784:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003788:	4613      	mov	r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	4413      	add	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	3348      	adds	r3, #72	; 0x48
 8003792:	443b      	add	r3, r7
 8003794:	3b30      	subs	r3, #48	; 0x30
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	3b01      	subs	r3, #1
 800379a:	009b      	lsls	r3, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	6859      	ldr	r1, [r3, #4]
 80037a0:	480f      	ldr	r0, [pc, #60]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 80037a2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	3348      	adds	r3, #72	; 0x48
 80037b0:	443b      	add	r3, r7
 80037b2:	3b30      	subs	r3, #48	; 0x30
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	3b01      	subs	r3, #1
 80037b8:	f021 0210 	bic.w	r2, r1, #16
 80037bc:	009b      	lsls	r3, r3, #2
 80037be:	4403      	add	r3, r0
 80037c0:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80037c2:	4907      	ldr	r1, [pc, #28]	; (80037e0 <HAL_OSPIM_Config+0x3b4>)
 80037c4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	3348      	adds	r3, #72	; 0x48
 80037d2:	443b      	add	r3, r7
 80037d4:	3b2c      	subs	r3, #44	; 0x2c
 80037d6:	e005      	b.n	80037e4 <HAL_OSPIM_Config+0x3b8>
 80037d8:	a0001000 	.word	0xa0001000
 80037dc:	a0001400 	.word	0xa0001400
 80037e0:	50061c00 	.word	0x50061c00
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3b01      	subs	r3, #1
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	6859      	ldr	r1, [r3, #4]
 80037ee:	48a6      	ldr	r0, [pc, #664]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 80037f0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037f4:	4613      	mov	r3, r2
 80037f6:	009b      	lsls	r3, r3, #2
 80037f8:	4413      	add	r3, r2
 80037fa:	009b      	lsls	r3, r3, #2
 80037fc:	3348      	adds	r3, #72	; 0x48
 80037fe:	443b      	add	r3, r7
 8003800:	3b2c      	subs	r3, #44	; 0x2c
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	3b01      	subs	r3, #1
 8003806:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4403      	add	r3, r0
 800380e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003810:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003814:	4613      	mov	r3, r2
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	4413      	add	r3, r2
 800381a:	009b      	lsls	r3, r3, #2
 800381c:	3348      	adds	r3, #72	; 0x48
 800381e:	443b      	add	r3, r7
 8003820:	3b28      	subs	r3, #40	; 0x28
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d023      	beq.n	8003870 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003828:	4997      	ldr	r1, [pc, #604]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 800382a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800382e:	4613      	mov	r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4413      	add	r3, r2
 8003834:	009b      	lsls	r3, r3, #2
 8003836:	3348      	adds	r3, #72	; 0x48
 8003838:	443b      	add	r3, r7
 800383a:	3b28      	subs	r3, #40	; 0x28
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	3b01      	subs	r3, #1
 8003840:	f003 0301 	and.w	r3, r3, #1
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	6859      	ldr	r1, [r3, #4]
 800384a:	488f      	ldr	r0, [pc, #572]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 800384c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003850:	4613      	mov	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	4413      	add	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	3348      	adds	r3, #72	; 0x48
 800385a:	443b      	add	r3, r7
 800385c:	3b28      	subs	r3, #40	; 0x28
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	3b01      	subs	r3, #1
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800386a:	009b      	lsls	r3, r3, #2
 800386c:	4403      	add	r3, r0
 800386e:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003870:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003874:	4613      	mov	r3, r2
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	4413      	add	r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	3348      	adds	r3, #72	; 0x48
 800387e:	443b      	add	r3, r7
 8003880:	3b24      	subs	r3, #36	; 0x24
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d023      	beq.n	80038d0 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003888:	497f      	ldr	r1, [pc, #508]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 800388a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800388e:	4613      	mov	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4413      	add	r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	3348      	adds	r3, #72	; 0x48
 8003898:	443b      	add	r3, r7
 800389a:	3b24      	subs	r3, #36	; 0x24
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	3b01      	subs	r3, #1
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	440b      	add	r3, r1
 80038a8:	6859      	ldr	r1, [r3, #4]
 80038aa:	4877      	ldr	r0, [pc, #476]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 80038ac:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038b0:	4613      	mov	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	4413      	add	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	3348      	adds	r3, #72	; 0x48
 80038ba:	443b      	add	r3, r7
 80038bc:	3b24      	subs	r3, #36	; 0x24
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	3b01      	subs	r3, #1
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	4403      	add	r3, r0
 80038ce:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 80038d0:	4a6d      	ldr	r2, [pc, #436]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	3b01      	subs	r3, #1
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	4413      	add	r3, r2
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80038e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038e4:	025b      	lsls	r3, r3, #9
 80038e6:	431a      	orrs	r2, r3
 80038e8:	4967      	ldr	r1, [pc, #412]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	3b01      	subs	r3, #1
 80038f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 80038fa:	4a63      	ldr	r2, [pc, #396]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3b01      	subs	r3, #1
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	4413      	add	r3, r2
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f023 0203 	bic.w	r2, r3, #3
 800390c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800390e:	005b      	lsls	r3, r3, #1
 8003910:	431a      	orrs	r2, r3
 8003912:	495d      	ldr	r1, [pc, #372]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	3b01      	subs	r3, #1
 800391a:	f042 0201 	orr.w	r2, r2, #1
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d014      	beq.n	8003956 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800392c:	4a56      	ldr	r2, [pc, #344]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	3b01      	subs	r3, #1
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	4413      	add	r3, r2
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800393e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003940:	015b      	lsls	r3, r3, #5
 8003942:	431a      	orrs	r2, r3
 8003944:	4950      	ldr	r1, [pc, #320]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	3b01      	subs	r3, #1
 800394c:	f042 0210 	orr.w	r2, r2, #16
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	440b      	add	r3, r1
 8003954:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d019      	beq.n	8003996 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003962:	4a49      	ldr	r2, [pc, #292]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	68db      	ldr	r3, [r3, #12]
 8003968:	3b01      	subs	r3, #1
 800396a:	f003 0301 	and.w	r3, r3, #1
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	4413      	add	r3, r2
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003978:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800397a:	049b      	lsls	r3, r3, #18
 800397c:	431a      	orrs	r2, r3
 800397e:	4942      	ldr	r1, [pc, #264]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	3b01      	subs	r3, #1
 8003986:	f003 0301 	and.w	r3, r3, #1
 800398a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	440b      	add	r3, r1
 8003992:	605a      	str	r2, [r3, #4]
 8003994:	e01c      	b.n	80039d0 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d018      	beq.n	80039d0 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800399e:	4a3a      	ldr	r2, [pc, #232]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	4413      	add	r3, r2
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80039b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039b6:	069b      	lsls	r3, r3, #26
 80039b8:	431a      	orrs	r2, r3
 80039ba:	4933      	ldr	r1, [pc, #204]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	3b01      	subs	r3, #1
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	440b      	add	r3, r1
 80039ce:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d019      	beq.n	8003a10 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80039dc:	4a2a      	ldr	r2, [pc, #168]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	691b      	ldr	r3, [r3, #16]
 80039e2:	3b01      	subs	r3, #1
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f4:	049b      	lsls	r3, r3, #18
 80039f6:	431a      	orrs	r2, r3
 80039f8:	4923      	ldr	r1, [pc, #140]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	691b      	ldr	r3, [r3, #16]
 80039fe:	3b01      	subs	r3, #1
 8003a00:	f003 0301 	and.w	r3, r3, #1
 8003a04:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003a08:	009b      	lsls	r3, r3, #2
 8003a0a:	440b      	add	r3, r1
 8003a0c:	605a      	str	r2, [r3, #4]
 8003a0e:	e01c      	b.n	8003a4a <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d018      	beq.n	8003a4a <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003a18:	4a1b      	ldr	r2, [pc, #108]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	3b01      	subs	r3, #1
 8003a20:	f003 0301 	and.w	r3, r3, #1
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	4413      	add	r3, r2
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a30:	069b      	lsls	r3, r3, #26
 8003a32:	431a      	orrs	r2, r3
 8003a34:	4914      	ldr	r1, [pc, #80]	; (8003a88 <HAL_OSPIM_Config+0x65c>)
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	691b      	ldr	r3, [r3, #16]
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	f003 0301 	and.w	r3, r3, #1
 8003a40:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003a44:	009b      	lsls	r3, r3, #2
 8003a46:	440b      	add	r3, r1
 8003a48:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003a4a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a4e:	f003 0301 	and.w	r3, r3, #1
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d005      	beq.n	8003a62 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003a56:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <HAL_OSPIM_Config+0x660>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a0c      	ldr	r2, [pc, #48]	; (8003a8c <HAL_OSPIM_Config+0x660>)
 8003a5c:	f043 0301 	orr.w	r3, r3, #1
 8003a60:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003a62:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a66:	f003 0302 	and.w	r3, r3, #2
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d005      	beq.n	8003a7a <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003a6e:	4b08      	ldr	r3, [pc, #32]	; (8003a90 <HAL_OSPIM_Config+0x664>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	4a07      	ldr	r2, [pc, #28]	; (8003a90 <HAL_OSPIM_Config+0x664>)
 8003a74:	f043 0301 	orr.w	r3, r3, #1
 8003a78:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003a7a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3748      	adds	r7, #72	; 0x48
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	50061c00 	.word	0x50061c00
 8003a8c:	a0001000 	.word	0xa0001000
 8003a90:	a0001400 	.word	0xa0001400

08003a94 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003aa4:	e01a      	b.n	8003adc <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa6:	69bb      	ldr	r3, [r7, #24]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aac:	d016      	beq.n	8003adc <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aae:	f7fc fd91 	bl	80005d4 <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d302      	bcc.n	8003ac4 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10b      	bne.n	8003adc <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003aca:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ad0:	f043 0201 	orr.w	r2, r3, #1
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003ad8:	2301      	movs	r3, #1
 8003ada:	e00e      	b.n	8003afa <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6a1a      	ldr	r2, [r3, #32]
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bf14      	ite	ne
 8003aea:	2301      	movne	r3, #1
 8003aec:	2300      	moveq	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	461a      	mov	r2, r3
 8003af2:	79fb      	ldrb	r3, [r7, #7]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d1d6      	bne.n	8003aa6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003af8:	2300      	movs	r3, #0
}
 8003afa:	4618      	mov	r0, r3
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}
	...

08003b04 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b089      	sub	sp, #36	; 0x24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
 8003b0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b20:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d10a      	bne.n	8003b40 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	430a      	orrs	r2, r1
 8003b3e:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d114      	bne.n	8003b72 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b50:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003b5a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003b64:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003b6e:	60fb      	str	r3, [r7, #12]
 8003b70:	e013      	b.n	8003b9a <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003b7a:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003b84:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003b8e:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003b98:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b9e:	683b      	ldr	r3, [r7, #0]
 8003ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ba2:	431a      	orrs	r2, r3
 8003ba4:	69bb      	ldr	r3, [r7, #24]
 8003ba6:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d012      	beq.n	8003bd6 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8003bb8:	69bb      	ldr	r3, [r7, #24]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bc8:	4319      	orrs	r1, r3
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bce:	430b      	orrs	r3, r1
 8003bd0:	431a      	orrs	r2, r3
 8003bd2:	69bb      	ldr	r3, [r7, #24]
 8003bd4:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f023 021f 	bic.w	r2, r3, #31
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	431a      	orrs	r2, r3
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d009      	beq.n	8003c04 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d105      	bne.n	8003c04 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	3a01      	subs	r2, #1
 8003c02:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68db      	ldr	r3, [r3, #12]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8099 	beq.w	8003d40 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d055      	beq.n	8003cc2 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d01e      	beq.n	8003c5c <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003c1e:	69bb      	ldr	r3, [r7, #24]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	4b68      	ldr	r3, [pc, #416]	; (8003dc4 <OSPI_ConfigCmd+0x2c0>)
 8003c24:	4013      	ands	r3, r2
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	68d1      	ldr	r1, [r2, #12]
 8003c2a:	683a      	ldr	r2, [r7, #0]
 8003c2c:	6952      	ldr	r2, [r2, #20]
 8003c2e:	4311      	orrs	r1, r2
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	6912      	ldr	r2, [r2, #16]
 8003c34:	4311      	orrs	r1, r2
 8003c36:	683a      	ldr	r2, [r7, #0]
 8003c38:	69d2      	ldr	r2, [r2, #28]
 8003c3a:	4311      	orrs	r1, r2
 8003c3c:	683a      	ldr	r2, [r7, #0]
 8003c3e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c40:	4311      	orrs	r1, r2
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	6a12      	ldr	r2, [r2, #32]
 8003c46:	4311      	orrs	r1, r2
 8003c48:	683a      	ldr	r2, [r7, #0]
 8003c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c4c:	4311      	orrs	r1, r2
 8003c4e:	683a      	ldr	r2, [r7, #0]
 8003c50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c52:	430a      	orrs	r2, r1
 8003c54:	431a      	orrs	r2, r3
 8003c56:	69bb      	ldr	r3, [r7, #24]
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e028      	b.n	8003cae <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003c64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c68:	683a      	ldr	r2, [r7, #0]
 8003c6a:	68d1      	ldr	r1, [r2, #12]
 8003c6c:	683a      	ldr	r2, [r7, #0]
 8003c6e:	6952      	ldr	r2, [r2, #20]
 8003c70:	4311      	orrs	r1, r2
 8003c72:	683a      	ldr	r2, [r7, #0]
 8003c74:	6912      	ldr	r2, [r2, #16]
 8003c76:	4311      	orrs	r1, r2
 8003c78:	683a      	ldr	r2, [r7, #0]
 8003c7a:	69d2      	ldr	r2, [r2, #28]
 8003c7c:	4311      	orrs	r1, r2
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c82:	4311      	orrs	r1, r2
 8003c84:	683a      	ldr	r2, [r7, #0]
 8003c86:	6a12      	ldr	r2, [r2, #32]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	431a      	orrs	r2, r3
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c98:	d109      	bne.n	8003cae <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d105      	bne.n	8003cae <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003ca2:	69bb      	ldr	r3, [r7, #24]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003caa:	69bb      	ldr	r3, [r7, #24]
 8003cac:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	689a      	ldr	r2, [r3, #8]
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	6992      	ldr	r2, [r2, #24]
 8003cbe:	649a      	str	r2, [r3, #72]	; 0x48
 8003cc0:	e078      	b.n	8003db4 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d017      	beq.n	8003cfa <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003cd2:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003cd6:	683a      	ldr	r2, [r7, #0]
 8003cd8:	68d1      	ldr	r1, [r2, #12]
 8003cda:	683a      	ldr	r2, [r7, #0]
 8003cdc:	6952      	ldr	r2, [r2, #20]
 8003cde:	4311      	orrs	r1, r2
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	6912      	ldr	r2, [r2, #16]
 8003ce4:	4311      	orrs	r1, r2
 8003ce6:	683a      	ldr	r2, [r7, #0]
 8003ce8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003cea:	4311      	orrs	r1, r2
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003cf0:	430a      	orrs	r2, r1
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	601a      	str	r2, [r3, #0]
 8003cf8:	e01d      	b.n	8003d36 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8003cfa:	69bb      	ldr	r3, [r7, #24]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68d9      	ldr	r1, [r3, #12]
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	4319      	orrs	r1, r3
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	430b      	orrs	r3, r1
 8003d12:	431a      	orrs	r2, r3
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d1c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d20:	d109      	bne.n	8003d36 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003d26:	2b08      	cmp	r3, #8
 8003d28:	d105      	bne.n	8003d36 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	601a      	str	r2, [r3, #0]
 8003d3e:	e039      	b.n	8003db4 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d030      	beq.n	8003daa <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d017      	beq.n	8003d80 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003d58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d5c:	683a      	ldr	r2, [r7, #0]
 8003d5e:	69d1      	ldr	r1, [r2, #28]
 8003d60:	683a      	ldr	r2, [r7, #0]
 8003d62:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003d64:	4311      	orrs	r1, r2
 8003d66:	683a      	ldr	r2, [r7, #0]
 8003d68:	6a12      	ldr	r2, [r2, #32]
 8003d6a:	4311      	orrs	r1, r2
 8003d6c:	683a      	ldr	r2, [r7, #0]
 8003d6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d70:	4311      	orrs	r1, r2
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d76:	430a      	orrs	r2, r1
 8003d78:	431a      	orrs	r2, r3
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e00e      	b.n	8003d9e <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8003d80:	69bb      	ldr	r3, [r7, #24]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	69d9      	ldr	r1, [r3, #28]
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	4319      	orrs	r1, r3
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	430b      	orrs	r3, r1
 8003d98:	431a      	orrs	r2, r3
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	683a      	ldr	r2, [r7, #0]
 8003da4:	6992      	ldr	r2, [r2, #24]
 8003da6:	649a      	str	r2, [r3, #72]	; 0x48
 8003da8:	e004      	b.n	8003db4 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2208      	movs	r2, #8
 8003db2:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003db4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3724      	adds	r7, #36	; 0x24
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	f0ffc0c0 	.word	0xf0ffc0c0

08003dc8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003dc8:	b480      	push	{r7}
 8003dca:	b087      	sub	sp, #28
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	4603      	mov	r3, r0
 8003dd0:	6039      	str	r1, [r7, #0]
 8003dd2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003ddc:	79fb      	ldrb	r3, [r7, #7]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d005      	beq.n	8003dee <OSPIM_GetConfig+0x26>
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d802      	bhi.n	8003dee <OSPIM_GetConfig+0x26>
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d102      	bne.n	8003df4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003dee:	2301      	movs	r3, #1
 8003df0:	75fb      	strb	r3, [r7, #23]
 8003df2:	e08e      	b.n	8003f12 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2200      	movs	r2, #0
 8003df8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	2200      	movs	r2, #0
 8003e04:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003e12:	79fb      	ldrb	r3, [r7, #7]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d101      	bne.n	8003e1c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003e18:	4b41      	ldr	r3, [pc, #260]	; (8003f20 <OSPIM_GetConfig+0x158>)
 8003e1a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	e074      	b.n	8003f0c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003e22:	4a40      	ldr	r2, [pc, #256]	; (8003f24 <OSPIM_GetConfig+0x15c>)
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4413      	add	r3, r2
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003e2e:	68bb      	ldr	r3, [r7, #8]
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d00a      	beq.n	8003e4e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4053      	eors	r3, r2
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d103      	bne.n	8003e4e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	f003 0310 	and.w	r3, r3, #16
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	4053      	eors	r3, r2
 8003e5e:	f003 0320 	and.w	r3, r3, #32
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d103      	bne.n	8003e6e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	1c5a      	adds	r2, r3, #1
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4053      	eors	r3, r2
 8003e7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d018      	beq.n	8003eca <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4053      	eors	r3, r2
 8003e9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d111      	bne.n	8003eca <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d106      	bne.n	8003ebe <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	60da      	str	r2, [r3, #12]
 8003ebc:	e005      	b.n	8003eca <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	3301      	adds	r3, #1
 8003ec2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d018      	beq.n	8003f06 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	4053      	eors	r3, r2
 8003eda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d111      	bne.n	8003f06 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d106      	bne.n	8003efa <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	3301      	adds	r3, #1
 8003ef0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	611a      	str	r2, [r3, #16]
 8003ef8:	e005      	b.n	8003f06 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	3301      	adds	r3, #1
 8003efe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	60fb      	str	r3, [r7, #12]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d987      	bls.n	8003e22 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f14:	4618      	mov	r0, r3
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr
 8003f20:	04040222 	.word	0x04040222
 8003f24:	50061c00 	.word	0x50061c00

08003f28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003f28:	b480      	push	{r7}
 8003f2a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f2c:	4b0d      	ldr	r3, [pc, #52]	; (8003f64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f38:	d102      	bne.n	8003f40 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003f3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f3e:	e00b      	b.n	8003f58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003f40:	4b08      	ldr	r3, [pc, #32]	; (8003f64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003f42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4e:	d102      	bne.n	8003f56 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003f50:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003f54:	e000      	b.n	8003f58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8003f56:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8003f58:	4618      	mov	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	40007000 	.word	0x40007000

08003f68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d141      	bne.n	8003ffa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003f76:	4b4b      	ldr	r3, [pc, #300]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003f7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f82:	d131      	bne.n	8003fe8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003f84:	4b47      	ldr	r3, [pc, #284]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f8a:	4a46      	ldr	r2, [pc, #280]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003f94:	4b43      	ldr	r3, [pc, #268]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003f9c:	4a41      	ldr	r2, [pc, #260]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003f9e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fa2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003fa4:	4b40      	ldr	r3, [pc, #256]	; (80040a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2232      	movs	r2, #50	; 0x32
 8003faa:	fb02 f303 	mul.w	r3, r2, r3
 8003fae:	4a3f      	ldr	r2, [pc, #252]	; (80040ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb4:	0c9b      	lsrs	r3, r3, #18
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fba:	e002      	b.n	8003fc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003fc2:	4b38      	ldr	r3, [pc, #224]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fce:	d102      	bne.n	8003fd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1f2      	bne.n	8003fbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003fd6:	4b33      	ldr	r3, [pc, #204]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fe2:	d158      	bne.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e057      	b.n	8004098 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003fe8:	4b2e      	ldr	r3, [pc, #184]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fee:	4a2d      	ldr	r2, [pc, #180]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003ff8:	e04d      	b.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004000:	d141      	bne.n	8004086 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004002:	4b28      	ldr	r3, [pc, #160]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800400a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800400e:	d131      	bne.n	8004074 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004010:	4b24      	ldr	r3, [pc, #144]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004012:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004016:	4a23      	ldr	r2, [pc, #140]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004018:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800401c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004020:	4b20      	ldr	r3, [pc, #128]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004028:	4a1e      	ldr	r2, [pc, #120]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800402a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800402e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004030:	4b1d      	ldr	r3, [pc, #116]	; (80040a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	2232      	movs	r2, #50	; 0x32
 8004036:	fb02 f303 	mul.w	r3, r2, r3
 800403a:	4a1c      	ldr	r2, [pc, #112]	; (80040ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800403c:	fba2 2303 	umull	r2, r3, r2, r3
 8004040:	0c9b      	lsrs	r3, r3, #18
 8004042:	3301      	adds	r3, #1
 8004044:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004046:	e002      	b.n	800404e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	3b01      	subs	r3, #1
 800404c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800404e:	4b15      	ldr	r3, [pc, #84]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405a:	d102      	bne.n	8004062 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d1f2      	bne.n	8004048 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004062:	4b10      	ldr	r3, [pc, #64]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800406e:	d112      	bne.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004070:	2303      	movs	r3, #3
 8004072:	e011      	b.n	8004098 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004074:	4b0b      	ldr	r3, [pc, #44]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800407a:	4a0a      	ldr	r2, [pc, #40]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800407c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004084:	e007      	b.n	8004096 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004086:	4b07      	ldr	r3, [pc, #28]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800408e:	4a05      	ldr	r2, [pc, #20]	; (80040a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004090:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004094:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	40007000 	.word	0x40007000
 80040a8:	20000074 	.word	0x20000074
 80040ac:	431bde83 	.word	0x431bde83

080040b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b088      	sub	sp, #32
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d102      	bne.n	80040c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80040be:	2301      	movs	r3, #1
 80040c0:	f000 bc08 	b.w	80048d4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80040c4:	4b96      	ldr	r3, [pc, #600]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 030c 	and.w	r3, r3, #12
 80040cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80040ce:	4b94      	ldr	r3, [pc, #592]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	f003 0303 	and.w	r3, r3, #3
 80040d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0310 	and.w	r3, r3, #16
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	f000 80e4 	beq.w	80042ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d007      	beq.n	80040fc <HAL_RCC_OscConfig+0x4c>
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	2b0c      	cmp	r3, #12
 80040f0:	f040 808b 	bne.w	800420a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	2b01      	cmp	r3, #1
 80040f8:	f040 8087 	bne.w	800420a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80040fc:	4b88      	ldr	r3, [pc, #544]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f003 0302 	and.w	r3, r3, #2
 8004104:	2b00      	cmp	r3, #0
 8004106:	d005      	beq.n	8004114 <HAL_RCC_OscConfig+0x64>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004110:	2301      	movs	r3, #1
 8004112:	e3df      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	6a1a      	ldr	r2, [r3, #32]
 8004118:	4b81      	ldr	r3, [pc, #516]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d004      	beq.n	800412e <HAL_RCC_OscConfig+0x7e>
 8004124:	4b7e      	ldr	r3, [pc, #504]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800412c:	e005      	b.n	800413a <HAL_RCC_OscConfig+0x8a>
 800412e:	4b7c      	ldr	r3, [pc, #496]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004130:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004134:	091b      	lsrs	r3, r3, #4
 8004136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800413a:	4293      	cmp	r3, r2
 800413c:	d223      	bcs.n	8004186 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fdcc 	bl	8004ce0 <RCC_SetFlashLatencyFromMSIRange>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e3c0      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004152:	4b73      	ldr	r3, [pc, #460]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a72      	ldr	r2, [pc, #456]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004158:	f043 0308 	orr.w	r3, r3, #8
 800415c:	6013      	str	r3, [r2, #0]
 800415e:	4b70      	ldr	r3, [pc, #448]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6a1b      	ldr	r3, [r3, #32]
 800416a:	496d      	ldr	r1, [pc, #436]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 800416c:	4313      	orrs	r3, r2
 800416e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004170:	4b6b      	ldr	r3, [pc, #428]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	021b      	lsls	r3, r3, #8
 800417e:	4968      	ldr	r1, [pc, #416]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004180:	4313      	orrs	r3, r2
 8004182:	604b      	str	r3, [r1, #4]
 8004184:	e025      	b.n	80041d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004186:	4b66      	ldr	r3, [pc, #408]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a65      	ldr	r2, [pc, #404]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 800418c:	f043 0308 	orr.w	r3, r3, #8
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	4b63      	ldr	r3, [pc, #396]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a1b      	ldr	r3, [r3, #32]
 800419e:	4960      	ldr	r1, [pc, #384]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 80041a0:	4313      	orrs	r3, r2
 80041a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80041a4:	4b5e      	ldr	r3, [pc, #376]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 80041a6:	685b      	ldr	r3, [r3, #4]
 80041a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	495b      	ldr	r1, [pc, #364]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 80041b4:	4313      	orrs	r3, r2
 80041b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d109      	bne.n	80041d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a1b      	ldr	r3, [r3, #32]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f000 fd8c 	bl	8004ce0 <RCC_SetFlashLatencyFromMSIRange>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d001      	beq.n	80041d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e380      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80041d2:	f000 fcc1 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 80041d6:	4602      	mov	r2, r0
 80041d8:	4b51      	ldr	r3, [pc, #324]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 80041da:	689b      	ldr	r3, [r3, #8]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f003 030f 	and.w	r3, r3, #15
 80041e2:	4950      	ldr	r1, [pc, #320]	; (8004324 <HAL_RCC_OscConfig+0x274>)
 80041e4:	5ccb      	ldrb	r3, [r1, r3]
 80041e6:	f003 031f 	and.w	r3, r3, #31
 80041ea:	fa22 f303 	lsr.w	r3, r2, r3
 80041ee:	4a4e      	ldr	r2, [pc, #312]	; (8004328 <HAL_RCC_OscConfig+0x278>)
 80041f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80041f2:	4b4e      	ldr	r3, [pc, #312]	; (800432c <HAL_RCC_OscConfig+0x27c>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f7fc f99c 	bl	8000534 <HAL_InitTick>
 80041fc:	4603      	mov	r3, r0
 80041fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004200:	7bfb      	ldrb	r3, [r7, #15]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d052      	beq.n	80042ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004206:	7bfb      	ldrb	r3, [r7, #15]
 8004208:	e364      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d032      	beq.n	8004278 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004212:	4b43      	ldr	r3, [pc, #268]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a42      	ldr	r2, [pc, #264]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004218:	f043 0301 	orr.w	r3, r3, #1
 800421c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800421e:	f7fc f9d9 	bl	80005d4 <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004224:	e008      	b.n	8004238 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004226:	f7fc f9d5 	bl	80005d4 <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d901      	bls.n	8004238 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e34d      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004238:	4b39      	ldr	r3, [pc, #228]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f003 0302 	and.w	r3, r3, #2
 8004240:	2b00      	cmp	r3, #0
 8004242:	d0f0      	beq.n	8004226 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004244:	4b36      	ldr	r3, [pc, #216]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a35      	ldr	r2, [pc, #212]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 800424a:	f043 0308 	orr.w	r3, r3, #8
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b33      	ldr	r3, [pc, #204]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a1b      	ldr	r3, [r3, #32]
 800425c:	4930      	ldr	r1, [pc, #192]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004262:	4b2f      	ldr	r3, [pc, #188]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	021b      	lsls	r3, r3, #8
 8004270:	492b      	ldr	r1, [pc, #172]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004272:	4313      	orrs	r3, r2
 8004274:	604b      	str	r3, [r1, #4]
 8004276:	e01a      	b.n	80042ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004278:	4b29      	ldr	r3, [pc, #164]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a28      	ldr	r2, [pc, #160]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 800427e:	f023 0301 	bic.w	r3, r3, #1
 8004282:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004284:	f7fc f9a6 	bl	80005d4 <HAL_GetTick>
 8004288:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800428a:	e008      	b.n	800429e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800428c:	f7fc f9a2 	bl	80005d4 <HAL_GetTick>
 8004290:	4602      	mov	r2, r0
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	1ad3      	subs	r3, r2, r3
 8004296:	2b02      	cmp	r3, #2
 8004298:	d901      	bls.n	800429e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	e31a      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800429e:	4b20      	ldr	r3, [pc, #128]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1f0      	bne.n	800428c <HAL_RCC_OscConfig+0x1dc>
 80042aa:	e000      	b.n	80042ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80042ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d073      	beq.n	80043a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80042ba:	69bb      	ldr	r3, [r7, #24]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d005      	beq.n	80042cc <HAL_RCC_OscConfig+0x21c>
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	2b0c      	cmp	r3, #12
 80042c4:	d10e      	bne.n	80042e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	2b03      	cmp	r3, #3
 80042ca:	d10b      	bne.n	80042e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042cc:	4b14      	ldr	r3, [pc, #80]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d063      	beq.n	80043a0 <HAL_RCC_OscConfig+0x2f0>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d15f      	bne.n	80043a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e2f7      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ec:	d106      	bne.n	80042fc <HAL_RCC_OscConfig+0x24c>
 80042ee:	4b0c      	ldr	r3, [pc, #48]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	4a0b      	ldr	r2, [pc, #44]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 80042f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042f8:	6013      	str	r3, [r2, #0]
 80042fa:	e025      	b.n	8004348 <HAL_RCC_OscConfig+0x298>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004304:	d114      	bne.n	8004330 <HAL_RCC_OscConfig+0x280>
 8004306:	4b06      	ldr	r3, [pc, #24]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a05      	ldr	r2, [pc, #20]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 800430c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004310:	6013      	str	r3, [r2, #0]
 8004312:	4b03      	ldr	r3, [pc, #12]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	4a02      	ldr	r2, [pc, #8]	; (8004320 <HAL_RCC_OscConfig+0x270>)
 8004318:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800431c:	6013      	str	r3, [r2, #0]
 800431e:	e013      	b.n	8004348 <HAL_RCC_OscConfig+0x298>
 8004320:	40021000 	.word	0x40021000
 8004324:	0800ae40 	.word	0x0800ae40
 8004328:	20000074 	.word	0x20000074
 800432c:	20000000 	.word	0x20000000
 8004330:	4ba0      	ldr	r3, [pc, #640]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a9f      	ldr	r2, [pc, #636]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 8004336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800433a:	6013      	str	r3, [r2, #0]
 800433c:	4b9d      	ldr	r3, [pc, #628]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a9c      	ldr	r2, [pc, #624]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 8004342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004346:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	685b      	ldr	r3, [r3, #4]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d013      	beq.n	8004378 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004350:	f7fc f940 	bl	80005d4 <HAL_GetTick>
 8004354:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004356:	e008      	b.n	800436a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004358:	f7fc f93c 	bl	80005d4 <HAL_GetTick>
 800435c:	4602      	mov	r2, r0
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	1ad3      	subs	r3, r2, r3
 8004362:	2b64      	cmp	r3, #100	; 0x64
 8004364:	d901      	bls.n	800436a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e2b4      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800436a:	4b92      	ldr	r3, [pc, #584]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d0f0      	beq.n	8004358 <HAL_RCC_OscConfig+0x2a8>
 8004376:	e014      	b.n	80043a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004378:	f7fc f92c 	bl	80005d4 <HAL_GetTick>
 800437c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800437e:	e008      	b.n	8004392 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004380:	f7fc f928 	bl	80005d4 <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	2b64      	cmp	r3, #100	; 0x64
 800438c:	d901      	bls.n	8004392 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800438e:	2303      	movs	r3, #3
 8004390:	e2a0      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004392:	4b88      	ldr	r3, [pc, #544]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d1f0      	bne.n	8004380 <HAL_RCC_OscConfig+0x2d0>
 800439e:	e000      	b.n	80043a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 0302 	and.w	r3, r3, #2
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d060      	beq.n	8004470 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	2b04      	cmp	r3, #4
 80043b2:	d005      	beq.n	80043c0 <HAL_RCC_OscConfig+0x310>
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2b0c      	cmp	r3, #12
 80043b8:	d119      	bne.n	80043ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80043ba:	697b      	ldr	r3, [r7, #20]
 80043bc:	2b02      	cmp	r3, #2
 80043be:	d116      	bne.n	80043ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043c0:	4b7c      	ldr	r3, [pc, #496]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d005      	beq.n	80043d8 <HAL_RCC_OscConfig+0x328>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e27d      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80043d8:	4b76      	ldr	r3, [pc, #472]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 80043da:	685b      	ldr	r3, [r3, #4]
 80043dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	691b      	ldr	r3, [r3, #16]
 80043e4:	061b      	lsls	r3, r3, #24
 80043e6:	4973      	ldr	r1, [pc, #460]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80043ec:	e040      	b.n	8004470 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	68db      	ldr	r3, [r3, #12]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d023      	beq.n	800443e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80043f6:	4b6f      	ldr	r3, [pc, #444]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a6e      	ldr	r2, [pc, #440]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 80043fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004400:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004402:	f7fc f8e7 	bl	80005d4 <HAL_GetTick>
 8004406:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004408:	e008      	b.n	800441c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800440a:	f7fc f8e3 	bl	80005d4 <HAL_GetTick>
 800440e:	4602      	mov	r2, r0
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	1ad3      	subs	r3, r2, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d901      	bls.n	800441c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004418:	2303      	movs	r3, #3
 800441a:	e25b      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800441c:	4b65      	ldr	r3, [pc, #404]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004424:	2b00      	cmp	r3, #0
 8004426:	d0f0      	beq.n	800440a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004428:	4b62      	ldr	r3, [pc, #392]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	691b      	ldr	r3, [r3, #16]
 8004434:	061b      	lsls	r3, r3, #24
 8004436:	495f      	ldr	r1, [pc, #380]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]
 800443c:	e018      	b.n	8004470 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800443e:	4b5d      	ldr	r3, [pc, #372]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	4a5c      	ldr	r2, [pc, #368]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 8004444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004448:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800444a:	f7fc f8c3 	bl	80005d4 <HAL_GetTick>
 800444e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004450:	e008      	b.n	8004464 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004452:	f7fc f8bf 	bl	80005d4 <HAL_GetTick>
 8004456:	4602      	mov	r2, r0
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	1ad3      	subs	r3, r2, r3
 800445c:	2b02      	cmp	r3, #2
 800445e:	d901      	bls.n	8004464 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004460:	2303      	movs	r3, #3
 8004462:	e237      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004464:	4b53      	ldr	r3, [pc, #332]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f0      	bne.n	8004452 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f003 0308 	and.w	r3, r3, #8
 8004478:	2b00      	cmp	r3, #0
 800447a:	d03c      	beq.n	80044f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d01c      	beq.n	80044be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004484:	4b4b      	ldr	r3, [pc, #300]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 8004486:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800448a:	4a4a      	ldr	r2, [pc, #296]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 800448c:	f043 0301 	orr.w	r3, r3, #1
 8004490:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004494:	f7fc f89e 	bl	80005d4 <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800449a:	e008      	b.n	80044ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800449c:	f7fc f89a 	bl	80005d4 <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	2b02      	cmp	r3, #2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e212      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80044ae:	4b41      	ldr	r3, [pc, #260]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 80044b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d0ef      	beq.n	800449c <HAL_RCC_OscConfig+0x3ec>
 80044bc:	e01b      	b.n	80044f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80044be:	4b3d      	ldr	r3, [pc, #244]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 80044c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044c4:	4a3b      	ldr	r2, [pc, #236]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 80044c6:	f023 0301 	bic.w	r3, r3, #1
 80044ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80044ce:	f7fc f881 	bl	80005d4 <HAL_GetTick>
 80044d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044d4:	e008      	b.n	80044e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80044d6:	f7fc f87d 	bl	80005d4 <HAL_GetTick>
 80044da:	4602      	mov	r2, r0
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	1ad3      	subs	r3, r2, r3
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d901      	bls.n	80044e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e1f5      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80044e8:	4b32      	ldr	r3, [pc, #200]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 80044ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80044ee:	f003 0302 	and.w	r3, r3, #2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1ef      	bne.n	80044d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0304 	and.w	r3, r3, #4
 80044fe:	2b00      	cmp	r3, #0
 8004500:	f000 80a6 	beq.w	8004650 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004504:	2300      	movs	r3, #0
 8004506:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004508:	4b2a      	ldr	r3, [pc, #168]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 800450a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800450c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10d      	bne.n	8004530 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004514:	4b27      	ldr	r3, [pc, #156]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 8004516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004518:	4a26      	ldr	r2, [pc, #152]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 800451a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800451e:	6593      	str	r3, [r2, #88]	; 0x58
 8004520:	4b24      	ldr	r3, [pc, #144]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 8004522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004524:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004528:	60bb      	str	r3, [r7, #8]
 800452a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800452c:	2301      	movs	r3, #1
 800452e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004530:	4b21      	ldr	r3, [pc, #132]	; (80045b8 <HAL_RCC_OscConfig+0x508>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d118      	bne.n	800456e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800453c:	4b1e      	ldr	r3, [pc, #120]	; (80045b8 <HAL_RCC_OscConfig+0x508>)
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a1d      	ldr	r2, [pc, #116]	; (80045b8 <HAL_RCC_OscConfig+0x508>)
 8004542:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004546:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004548:	f7fc f844 	bl	80005d4 <HAL_GetTick>
 800454c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800454e:	e008      	b.n	8004562 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004550:	f7fc f840 	bl	80005d4 <HAL_GetTick>
 8004554:	4602      	mov	r2, r0
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	1ad3      	subs	r3, r2, r3
 800455a:	2b02      	cmp	r3, #2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e1b8      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004562:	4b15      	ldr	r3, [pc, #84]	; (80045b8 <HAL_RCC_OscConfig+0x508>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	2b00      	cmp	r3, #0
 800456c:	d0f0      	beq.n	8004550 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d108      	bne.n	8004588 <HAL_RCC_OscConfig+0x4d8>
 8004576:	4b0f      	ldr	r3, [pc, #60]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 8004578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457c:	4a0d      	ldr	r2, [pc, #52]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 800457e:	f043 0301 	orr.w	r3, r3, #1
 8004582:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004586:	e029      	b.n	80045dc <HAL_RCC_OscConfig+0x52c>
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	2b05      	cmp	r3, #5
 800458e:	d115      	bne.n	80045bc <HAL_RCC_OscConfig+0x50c>
 8004590:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 8004592:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004596:	4a07      	ldr	r2, [pc, #28]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 8004598:	f043 0304 	orr.w	r3, r3, #4
 800459c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045a0:	4b04      	ldr	r3, [pc, #16]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 80045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045a6:	4a03      	ldr	r2, [pc, #12]	; (80045b4 <HAL_RCC_OscConfig+0x504>)
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045b0:	e014      	b.n	80045dc <HAL_RCC_OscConfig+0x52c>
 80045b2:	bf00      	nop
 80045b4:	40021000 	.word	0x40021000
 80045b8:	40007000 	.word	0x40007000
 80045bc:	4b9d      	ldr	r3, [pc, #628]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 80045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c2:	4a9c      	ldr	r2, [pc, #624]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 80045c4:	f023 0301 	bic.w	r3, r3, #1
 80045c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80045cc:	4b99      	ldr	r3, [pc, #612]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 80045ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045d2:	4a98      	ldr	r2, [pc, #608]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 80045d4:	f023 0304 	bic.w	r3, r3, #4
 80045d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d016      	beq.n	8004612 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045e4:	f7fb fff6 	bl	80005d4 <HAL_GetTick>
 80045e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ea:	e00a      	b.n	8004602 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ec:	f7fb fff2 	bl	80005d4 <HAL_GetTick>
 80045f0:	4602      	mov	r2, r0
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80045fa:	4293      	cmp	r3, r2
 80045fc:	d901      	bls.n	8004602 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80045fe:	2303      	movs	r3, #3
 8004600:	e168      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004602:	4b8c      	ldr	r3, [pc, #560]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 8004604:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004608:	f003 0302 	and.w	r3, r3, #2
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0ed      	beq.n	80045ec <HAL_RCC_OscConfig+0x53c>
 8004610:	e015      	b.n	800463e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004612:	f7fb ffdf 	bl	80005d4 <HAL_GetTick>
 8004616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004618:	e00a      	b.n	8004630 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800461a:	f7fb ffdb 	bl	80005d4 <HAL_GetTick>
 800461e:	4602      	mov	r2, r0
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	1ad3      	subs	r3, r2, r3
 8004624:	f241 3288 	movw	r2, #5000	; 0x1388
 8004628:	4293      	cmp	r3, r2
 800462a:	d901      	bls.n	8004630 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800462c:	2303      	movs	r3, #3
 800462e:	e151      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004630:	4b80      	ldr	r3, [pc, #512]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 8004632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1ed      	bne.n	800461a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800463e:	7ffb      	ldrb	r3, [r7, #31]
 8004640:	2b01      	cmp	r3, #1
 8004642:	d105      	bne.n	8004650 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004644:	4b7b      	ldr	r3, [pc, #492]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 8004646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004648:	4a7a      	ldr	r2, [pc, #488]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 800464a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800464e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d03c      	beq.n	80046d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004660:	2b00      	cmp	r3, #0
 8004662:	d01c      	beq.n	800469e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004664:	4b73      	ldr	r3, [pc, #460]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 8004666:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800466a:	4a72      	ldr	r2, [pc, #456]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004674:	f7fb ffae 	bl	80005d4 <HAL_GetTick>
 8004678:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800467a:	e008      	b.n	800468e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800467c:	f7fb ffaa 	bl	80005d4 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	2b02      	cmp	r3, #2
 8004688:	d901      	bls.n	800468e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800468a:	2303      	movs	r3, #3
 800468c:	e122      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800468e:	4b69      	ldr	r3, [pc, #420]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 8004690:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0ef      	beq.n	800467c <HAL_RCC_OscConfig+0x5cc>
 800469c:	e01b      	b.n	80046d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800469e:	4b65      	ldr	r3, [pc, #404]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 80046a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046a4:	4a63      	ldr	r2, [pc, #396]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 80046a6:	f023 0301 	bic.w	r3, r3, #1
 80046aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ae:	f7fb ff91 	bl	80005d4 <HAL_GetTick>
 80046b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046b4:	e008      	b.n	80046c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80046b6:	f7fb ff8d 	bl	80005d4 <HAL_GetTick>
 80046ba:	4602      	mov	r2, r0
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	1ad3      	subs	r3, r2, r3
 80046c0:	2b02      	cmp	r3, #2
 80046c2:	d901      	bls.n	80046c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80046c4:	2303      	movs	r3, #3
 80046c6:	e105      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80046c8:	4b5a      	ldr	r3, [pc, #360]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 80046ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80046ce:	f003 0302 	and.w	r3, r3, #2
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d1ef      	bne.n	80046b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f000 80f9 	beq.w	80048d2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046e4:	2b02      	cmp	r3, #2
 80046e6:	f040 80cf 	bne.w	8004888 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80046ea:	4b52      	ldr	r3, [pc, #328]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 80046ec:	68db      	ldr	r3, [r3, #12]
 80046ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f003 0203 	and.w	r2, r3, #3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d12c      	bne.n	8004758 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004708:	3b01      	subs	r3, #1
 800470a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800470c:	429a      	cmp	r2, r3
 800470e:	d123      	bne.n	8004758 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800471a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800471c:	429a      	cmp	r2, r3
 800471e:	d11b      	bne.n	8004758 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800472c:	429a      	cmp	r2, r3
 800472e:	d113      	bne.n	8004758 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800473a:	085b      	lsrs	r3, r3, #1
 800473c:	3b01      	subs	r3, #1
 800473e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004740:	429a      	cmp	r2, r3
 8004742:	d109      	bne.n	8004758 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	085b      	lsrs	r3, r3, #1
 8004750:	3b01      	subs	r3, #1
 8004752:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004754:	429a      	cmp	r2, r3
 8004756:	d071      	beq.n	800483c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	2b0c      	cmp	r3, #12
 800475c:	d068      	beq.n	8004830 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800475e:	4b35      	ldr	r3, [pc, #212]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004766:	2b00      	cmp	r3, #0
 8004768:	d105      	bne.n	8004776 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800476a:	4b32      	ldr	r3, [pc, #200]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004772:	2b00      	cmp	r3, #0
 8004774:	d001      	beq.n	800477a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e0ac      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800477a:	4b2e      	ldr	r3, [pc, #184]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a2d      	ldr	r2, [pc, #180]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 8004780:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004784:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004786:	f7fb ff25 	bl	80005d4 <HAL_GetTick>
 800478a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800478c:	e008      	b.n	80047a0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800478e:	f7fb ff21 	bl	80005d4 <HAL_GetTick>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	2b02      	cmp	r3, #2
 800479a:	d901      	bls.n	80047a0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800479c:	2303      	movs	r3, #3
 800479e:	e099      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80047a0:	4b24      	ldr	r3, [pc, #144]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1f0      	bne.n	800478e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80047ac:	4b21      	ldr	r3, [pc, #132]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 80047ae:	68da      	ldr	r2, [r3, #12]
 80047b0:	4b21      	ldr	r3, [pc, #132]	; (8004838 <HAL_RCC_OscConfig+0x788>)
 80047b2:	4013      	ands	r3, r2
 80047b4:	687a      	ldr	r2, [r7, #4]
 80047b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80047bc:	3a01      	subs	r2, #1
 80047be:	0112      	lsls	r2, r2, #4
 80047c0:	4311      	orrs	r1, r2
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80047c6:	0212      	lsls	r2, r2, #8
 80047c8:	4311      	orrs	r1, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047ce:	0852      	lsrs	r2, r2, #1
 80047d0:	3a01      	subs	r2, #1
 80047d2:	0552      	lsls	r2, r2, #21
 80047d4:	4311      	orrs	r1, r2
 80047d6:	687a      	ldr	r2, [r7, #4]
 80047d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80047da:	0852      	lsrs	r2, r2, #1
 80047dc:	3a01      	subs	r2, #1
 80047de:	0652      	lsls	r2, r2, #25
 80047e0:	4311      	orrs	r1, r2
 80047e2:	687a      	ldr	r2, [r7, #4]
 80047e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047e6:	06d2      	lsls	r2, r2, #27
 80047e8:	430a      	orrs	r2, r1
 80047ea:	4912      	ldr	r1, [pc, #72]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80047f0:	4b10      	ldr	r3, [pc, #64]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a0f      	ldr	r2, [pc, #60]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 80047f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80047fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80047fc:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 80047fe:	68db      	ldr	r3, [r3, #12]
 8004800:	4a0c      	ldr	r2, [pc, #48]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 8004802:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004806:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004808:	f7fb fee4 	bl	80005d4 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004810:	f7fb fee0 	bl	80005d4 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b02      	cmp	r3, #2
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e058      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004822:	4b04      	ldr	r3, [pc, #16]	; (8004834 <HAL_RCC_OscConfig+0x784>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800482e:	e050      	b.n	80048d2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004830:	2301      	movs	r3, #1
 8004832:	e04f      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
 8004834:	40021000 	.word	0x40021000
 8004838:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800483c:	4b27      	ldr	r3, [pc, #156]	; (80048dc <HAL_RCC_OscConfig+0x82c>)
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d144      	bne.n	80048d2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004848:	4b24      	ldr	r3, [pc, #144]	; (80048dc <HAL_RCC_OscConfig+0x82c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a23      	ldr	r2, [pc, #140]	; (80048dc <HAL_RCC_OscConfig+0x82c>)
 800484e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004852:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004854:	4b21      	ldr	r3, [pc, #132]	; (80048dc <HAL_RCC_OscConfig+0x82c>)
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	4a20      	ldr	r2, [pc, #128]	; (80048dc <HAL_RCC_OscConfig+0x82c>)
 800485a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800485e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004860:	f7fb feb8 	bl	80005d4 <HAL_GetTick>
 8004864:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004866:	e008      	b.n	800487a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004868:	f7fb feb4 	bl	80005d4 <HAL_GetTick>
 800486c:	4602      	mov	r2, r0
 800486e:	693b      	ldr	r3, [r7, #16]
 8004870:	1ad3      	subs	r3, r2, r3
 8004872:	2b02      	cmp	r3, #2
 8004874:	d901      	bls.n	800487a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8004876:	2303      	movs	r3, #3
 8004878:	e02c      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800487a:	4b18      	ldr	r3, [pc, #96]	; (80048dc <HAL_RCC_OscConfig+0x82c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004882:	2b00      	cmp	r3, #0
 8004884:	d0f0      	beq.n	8004868 <HAL_RCC_OscConfig+0x7b8>
 8004886:	e024      	b.n	80048d2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	2b0c      	cmp	r3, #12
 800488c:	d01f      	beq.n	80048ce <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800488e:	4b13      	ldr	r3, [pc, #76]	; (80048dc <HAL_RCC_OscConfig+0x82c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a12      	ldr	r2, [pc, #72]	; (80048dc <HAL_RCC_OscConfig+0x82c>)
 8004894:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800489a:	f7fb fe9b 	bl	80005d4 <HAL_GetTick>
 800489e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048a0:	e008      	b.n	80048b4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048a2:	f7fb fe97 	bl	80005d4 <HAL_GetTick>
 80048a6:	4602      	mov	r2, r0
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	1ad3      	subs	r3, r2, r3
 80048ac:	2b02      	cmp	r3, #2
 80048ae:	d901      	bls.n	80048b4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e00f      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048b4:	4b09      	ldr	r3, [pc, #36]	; (80048dc <HAL_RCC_OscConfig+0x82c>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1f0      	bne.n	80048a2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80048c0:	4b06      	ldr	r3, [pc, #24]	; (80048dc <HAL_RCC_OscConfig+0x82c>)
 80048c2:	68da      	ldr	r2, [r3, #12]
 80048c4:	4905      	ldr	r1, [pc, #20]	; (80048dc <HAL_RCC_OscConfig+0x82c>)
 80048c6:	4b06      	ldr	r3, [pc, #24]	; (80048e0 <HAL_RCC_OscConfig+0x830>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	60cb      	str	r3, [r1, #12]
 80048cc:	e001      	b.n	80048d2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e000      	b.n	80048d4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3720      	adds	r7, #32
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	40021000 	.word	0x40021000
 80048e0:	feeefffc 	.word	0xfeeefffc

080048e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80048ee:	2300      	movs	r3, #0
 80048f0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80048f8:	2301      	movs	r3, #1
 80048fa:	e11d      	b.n	8004b38 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80048fc:	4b90      	ldr	r3, [pc, #576]	; (8004b40 <HAL_RCC_ClockConfig+0x25c>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 030f 	and.w	r3, r3, #15
 8004904:	683a      	ldr	r2, [r7, #0]
 8004906:	429a      	cmp	r2, r3
 8004908:	d910      	bls.n	800492c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800490a:	4b8d      	ldr	r3, [pc, #564]	; (8004b40 <HAL_RCC_ClockConfig+0x25c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f023 020f 	bic.w	r2, r3, #15
 8004912:	498b      	ldr	r1, [pc, #556]	; (8004b40 <HAL_RCC_ClockConfig+0x25c>)
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	4313      	orrs	r3, r2
 8004918:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800491a:	4b89      	ldr	r3, [pc, #548]	; (8004b40 <HAL_RCC_ClockConfig+0x25c>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 030f 	and.w	r3, r3, #15
 8004922:	683a      	ldr	r2, [r7, #0]
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e105      	b.n	8004b38 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0302 	and.w	r3, r3, #2
 8004934:	2b00      	cmp	r3, #0
 8004936:	d010      	beq.n	800495a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	689a      	ldr	r2, [r3, #8]
 800493c:	4b81      	ldr	r3, [pc, #516]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004944:	429a      	cmp	r2, r3
 8004946:	d908      	bls.n	800495a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004948:	4b7e      	ldr	r3, [pc, #504]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 800494a:	689b      	ldr	r3, [r3, #8]
 800494c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	689b      	ldr	r3, [r3, #8]
 8004954:	497b      	ldr	r1, [pc, #492]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004956:	4313      	orrs	r3, r2
 8004958:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f003 0301 	and.w	r3, r3, #1
 8004962:	2b00      	cmp	r3, #0
 8004964:	d079      	beq.n	8004a5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	2b03      	cmp	r3, #3
 800496c:	d11e      	bne.n	80049ac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800496e:	4b75      	ldr	r3, [pc, #468]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e0dc      	b.n	8004b38 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800497e:	f000 fa09 	bl	8004d94 <RCC_GetSysClockFreqFromPLLSource>
 8004982:	4603      	mov	r3, r0
 8004984:	4a70      	ldr	r2, [pc, #448]	; (8004b48 <HAL_RCC_ClockConfig+0x264>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d946      	bls.n	8004a18 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800498a:	4b6e      	ldr	r3, [pc, #440]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d140      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004996:	4b6b      	ldr	r3, [pc, #428]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004998:	689b      	ldr	r3, [r3, #8]
 800499a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800499e:	4a69      	ldr	r2, [pc, #420]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 80049a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049a4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80049a6:	2380      	movs	r3, #128	; 0x80
 80049a8:	617b      	str	r3, [r7, #20]
 80049aa:	e035      	b.n	8004a18 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d107      	bne.n	80049c4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80049b4:	4b63      	ldr	r3, [pc, #396]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d115      	bne.n	80049ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0b9      	b.n	8004b38 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d107      	bne.n	80049dc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80049cc:	4b5d      	ldr	r3, [pc, #372]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d109      	bne.n	80049ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80049d8:	2301      	movs	r3, #1
 80049da:	e0ad      	b.n	8004b38 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80049dc:	4b59      	ldr	r3, [pc, #356]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e0a5      	b.n	8004b38 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 80049ec:	f000 f8b4 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 80049f0:	4603      	mov	r3, r0
 80049f2:	4a55      	ldr	r2, [pc, #340]	; (8004b48 <HAL_RCC_ClockConfig+0x264>)
 80049f4:	4293      	cmp	r3, r2
 80049f6:	d90f      	bls.n	8004a18 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80049f8:	4b52      	ldr	r3, [pc, #328]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d109      	bne.n	8004a18 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004a04:	4b4f      	ldr	r3, [pc, #316]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004a06:	689b      	ldr	r3, [r3, #8]
 8004a08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a0c:	4a4d      	ldr	r2, [pc, #308]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004a0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a12:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004a14:	2380      	movs	r3, #128	; 0x80
 8004a16:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a18:	4b4a      	ldr	r3, [pc, #296]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f023 0203 	bic.w	r2, r3, #3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	4947      	ldr	r1, [pc, #284]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004a26:	4313      	orrs	r3, r2
 8004a28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a2a:	f7fb fdd3 	bl	80005d4 <HAL_GetTick>
 8004a2e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a30:	e00a      	b.n	8004a48 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a32:	f7fb fdcf 	bl	80005d4 <HAL_GetTick>
 8004a36:	4602      	mov	r2, r0
 8004a38:	693b      	ldr	r3, [r7, #16]
 8004a3a:	1ad3      	subs	r3, r2, r3
 8004a3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d901      	bls.n	8004a48 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004a44:	2303      	movs	r3, #3
 8004a46:	e077      	b.n	8004b38 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a48:	4b3e      	ldr	r3, [pc, #248]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004a4a:	689b      	ldr	r3, [r3, #8]
 8004a4c:	f003 020c 	and.w	r2, r3, #12
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	429a      	cmp	r2, r3
 8004a58:	d1eb      	bne.n	8004a32 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004a5a:	697b      	ldr	r3, [r7, #20]
 8004a5c:	2b80      	cmp	r3, #128	; 0x80
 8004a5e:	d105      	bne.n	8004a6c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004a60:	4b38      	ldr	r3, [pc, #224]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	4a37      	ldr	r2, [pc, #220]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a6a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f003 0302 	and.w	r3, r3, #2
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d010      	beq.n	8004a9a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	689a      	ldr	r2, [r3, #8]
 8004a7c:	4b31      	ldr	r3, [pc, #196]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004a7e:	689b      	ldr	r3, [r3, #8]
 8004a80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d208      	bcs.n	8004a9a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a88:	4b2e      	ldr	r3, [pc, #184]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004a8a:	689b      	ldr	r3, [r3, #8]
 8004a8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	492b      	ldr	r1, [pc, #172]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004a96:	4313      	orrs	r3, r2
 8004a98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a9a:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <HAL_RCC_ClockConfig+0x25c>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 030f 	and.w	r3, r3, #15
 8004aa2:	683a      	ldr	r2, [r7, #0]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d210      	bcs.n	8004aca <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004aa8:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <HAL_RCC_ClockConfig+0x25c>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f023 020f 	bic.w	r2, r3, #15
 8004ab0:	4923      	ldr	r1, [pc, #140]	; (8004b40 <HAL_RCC_ClockConfig+0x25c>)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ab8:	4b21      	ldr	r3, [pc, #132]	; (8004b40 <HAL_RCC_ClockConfig+0x25c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f003 030f 	and.w	r3, r3, #15
 8004ac0:	683a      	ldr	r2, [r7, #0]
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d001      	beq.n	8004aca <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e036      	b.n	8004b38 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d008      	beq.n	8004ae8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ad6:	4b1b      	ldr	r3, [pc, #108]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	4918      	ldr	r1, [pc, #96]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004ae4:	4313      	orrs	r3, r2
 8004ae6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f003 0308 	and.w	r3, r3, #8
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d009      	beq.n	8004b08 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004af4:	4b13      	ldr	r3, [pc, #76]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4910      	ldr	r1, [pc, #64]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b08:	f000 f826 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8004b0c:	4602      	mov	r2, r0
 8004b0e:	4b0d      	ldr	r3, [pc, #52]	; (8004b44 <HAL_RCC_ClockConfig+0x260>)
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	091b      	lsrs	r3, r3, #4
 8004b14:	f003 030f 	and.w	r3, r3, #15
 8004b18:	490c      	ldr	r1, [pc, #48]	; (8004b4c <HAL_RCC_ClockConfig+0x268>)
 8004b1a:	5ccb      	ldrb	r3, [r1, r3]
 8004b1c:	f003 031f 	and.w	r3, r3, #31
 8004b20:	fa22 f303 	lsr.w	r3, r2, r3
 8004b24:	4a0a      	ldr	r2, [pc, #40]	; (8004b50 <HAL_RCC_ClockConfig+0x26c>)
 8004b26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b28:	4b0a      	ldr	r3, [pc, #40]	; (8004b54 <HAL_RCC_ClockConfig+0x270>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	f7fb fd01 	bl	8000534 <HAL_InitTick>
 8004b32:	4603      	mov	r3, r0
 8004b34:	73fb      	strb	r3, [r7, #15]

  return status;
 8004b36:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3718      	adds	r7, #24
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	40022000 	.word	0x40022000
 8004b44:	40021000 	.word	0x40021000
 8004b48:	04c4b400 	.word	0x04c4b400
 8004b4c:	0800ae40 	.word	0x0800ae40
 8004b50:	20000074 	.word	0x20000074
 8004b54:	20000000 	.word	0x20000000

08004b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b089      	sub	sp, #36	; 0x24
 8004b5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	61fb      	str	r3, [r7, #28]
 8004b62:	2300      	movs	r3, #0
 8004b64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004b66:	4b3e      	ldr	r3, [pc, #248]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b68:	689b      	ldr	r3, [r3, #8]
 8004b6a:	f003 030c 	and.w	r3, r3, #12
 8004b6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004b70:	4b3b      	ldr	r3, [pc, #236]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f003 0303 	and.w	r3, r3, #3
 8004b78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d005      	beq.n	8004b8c <HAL_RCC_GetSysClockFreq+0x34>
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	2b0c      	cmp	r3, #12
 8004b84:	d121      	bne.n	8004bca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d11e      	bne.n	8004bca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004b8c:	4b34      	ldr	r3, [pc, #208]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f003 0308 	and.w	r3, r3, #8
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d107      	bne.n	8004ba8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004b98:	4b31      	ldr	r3, [pc, #196]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004b9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004b9e:	0a1b      	lsrs	r3, r3, #8
 8004ba0:	f003 030f 	and.w	r3, r3, #15
 8004ba4:	61fb      	str	r3, [r7, #28]
 8004ba6:	e005      	b.n	8004bb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004ba8:	4b2d      	ldr	r3, [pc, #180]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	091b      	lsrs	r3, r3, #4
 8004bae:	f003 030f 	and.w	r3, r3, #15
 8004bb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004bb4:	4a2b      	ldr	r2, [pc, #172]	; (8004c64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004bb6:	69fb      	ldr	r3, [r7, #28]
 8004bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004bbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10d      	bne.n	8004be0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004bc8:	e00a      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d102      	bne.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004bd0:	4b25      	ldr	r3, [pc, #148]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8004bd2:	61bb      	str	r3, [r7, #24]
 8004bd4:	e004      	b.n	8004be0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b08      	cmp	r3, #8
 8004bda:	d101      	bne.n	8004be0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004bdc:	4b23      	ldr	r3, [pc, #140]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8004bde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	2b0c      	cmp	r3, #12
 8004be4:	d134      	bne.n	8004c50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004be6:	4b1e      	ldr	r3, [pc, #120]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004be8:	68db      	ldr	r3, [r3, #12]
 8004bea:	f003 0303 	and.w	r3, r3, #3
 8004bee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d003      	beq.n	8004bfe <HAL_RCC_GetSysClockFreq+0xa6>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b03      	cmp	r3, #3
 8004bfa:	d003      	beq.n	8004c04 <HAL_RCC_GetSysClockFreq+0xac>
 8004bfc:	e005      	b.n	8004c0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004bfe:	4b1a      	ldr	r3, [pc, #104]	; (8004c68 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c00:	617b      	str	r3, [r7, #20]
      break;
 8004c02:	e005      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c04:	4b19      	ldr	r3, [pc, #100]	; (8004c6c <HAL_RCC_GetSysClockFreq+0x114>)
 8004c06:	617b      	str	r3, [r7, #20]
      break;
 8004c08:	e002      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	617b      	str	r3, [r7, #20]
      break;
 8004c0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c10:	4b13      	ldr	r3, [pc, #76]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	091b      	lsrs	r3, r3, #4
 8004c16:	f003 030f 	and.w	r3, r3, #15
 8004c1a:	3301      	adds	r3, #1
 8004c1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c1e:	4b10      	ldr	r3, [pc, #64]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c20:	68db      	ldr	r3, [r3, #12]
 8004c22:	0a1b      	lsrs	r3, r3, #8
 8004c24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c28:	697a      	ldr	r2, [r7, #20]
 8004c2a:	fb03 f202 	mul.w	r2, r3, r2
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c36:	4b0a      	ldr	r3, [pc, #40]	; (8004c60 <HAL_RCC_GetSysClockFreq+0x108>)
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	0e5b      	lsrs	r3, r3, #25
 8004c3c:	f003 0303 	and.w	r3, r3, #3
 8004c40:	3301      	adds	r3, #1
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004c46:	697a      	ldr	r2, [r7, #20]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004c50:	69bb      	ldr	r3, [r7, #24]
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3724      	adds	r7, #36	; 0x24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	40021000 	.word	0x40021000
 8004c64:	0800ae58 	.word	0x0800ae58
 8004c68:	00f42400 	.word	0x00f42400
 8004c6c:	007a1200 	.word	0x007a1200

08004c70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c74:	4b03      	ldr	r3, [pc, #12]	; (8004c84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000074 	.word	0x20000074

08004c88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004c8c:	f7ff fff0 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004c90:	4602      	mov	r2, r0
 8004c92:	4b06      	ldr	r3, [pc, #24]	; (8004cac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c94:	689b      	ldr	r3, [r3, #8]
 8004c96:	0a1b      	lsrs	r3, r3, #8
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	4904      	ldr	r1, [pc, #16]	; (8004cb0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004c9e:	5ccb      	ldrb	r3, [r1, r3]
 8004ca0:	f003 031f 	and.w	r3, r3, #31
 8004ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	40021000 	.word	0x40021000
 8004cb0:	0800ae50 	.word	0x0800ae50

08004cb4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004cb8:	f7ff ffda 	bl	8004c70 <HAL_RCC_GetHCLKFreq>
 8004cbc:	4602      	mov	r2, r0
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	0adb      	lsrs	r3, r3, #11
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	4904      	ldr	r1, [pc, #16]	; (8004cdc <HAL_RCC_GetPCLK2Freq+0x28>)
 8004cca:	5ccb      	ldrb	r3, [r1, r3]
 8004ccc:	f003 031f 	and.w	r3, r3, #31
 8004cd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	bd80      	pop	{r7, pc}
 8004cd8:	40021000 	.word	0x40021000
 8004cdc:	0800ae50 	.word	0x0800ae50

08004ce0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004ce8:	2300      	movs	r3, #0
 8004cea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004cec:	4b27      	ldr	r3, [pc, #156]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004cee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004cf8:	f7ff f916 	bl	8003f28 <HAL_PWREx_GetVoltageRange>
 8004cfc:	6178      	str	r0, [r7, #20]
 8004cfe:	e014      	b.n	8004d2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d00:	4b22      	ldr	r3, [pc, #136]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d04:	4a21      	ldr	r2, [pc, #132]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d0c:	4b1f      	ldr	r3, [pc, #124]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d14:	60fb      	str	r3, [r7, #12]
 8004d16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d18:	f7ff f906 	bl	8003f28 <HAL_PWREx_GetVoltageRange>
 8004d1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d1e:	4b1b      	ldr	r3, [pc, #108]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d22:	4a1a      	ldr	r2, [pc, #104]	; (8004d8c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004d24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d30:	d10b      	bne.n	8004d4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2b80      	cmp	r3, #128	; 0x80
 8004d36:	d913      	bls.n	8004d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	2ba0      	cmp	r3, #160	; 0xa0
 8004d3c:	d902      	bls.n	8004d44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d3e:	2302      	movs	r3, #2
 8004d40:	613b      	str	r3, [r7, #16]
 8004d42:	e00d      	b.n	8004d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d44:	2301      	movs	r3, #1
 8004d46:	613b      	str	r3, [r7, #16]
 8004d48:	e00a      	b.n	8004d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b7f      	cmp	r3, #127	; 0x7f
 8004d4e:	d902      	bls.n	8004d56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004d50:	2302      	movs	r3, #2
 8004d52:	613b      	str	r3, [r7, #16]
 8004d54:	e004      	b.n	8004d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2b70      	cmp	r3, #112	; 0x70
 8004d5a:	d101      	bne.n	8004d60 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004d60:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f023 020f 	bic.w	r2, r3, #15
 8004d68:	4909      	ldr	r1, [pc, #36]	; (8004d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004d70:	4b07      	ldr	r3, [pc, #28]	; (8004d90 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	429a      	cmp	r2, r3
 8004d7c:	d001      	beq.n	8004d82 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e000      	b.n	8004d84 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004d82:	2300      	movs	r3, #0
}
 8004d84:	4618      	mov	r0, r3
 8004d86:	3718      	adds	r7, #24
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40021000 	.word	0x40021000
 8004d90:	40022000 	.word	0x40022000

08004d94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b087      	sub	sp, #28
 8004d98:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d9a:	4b2d      	ldr	r3, [pc, #180]	; (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	f003 0303 	and.w	r3, r3, #3
 8004da2:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d00b      	beq.n	8004dc2 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2b03      	cmp	r3, #3
 8004dae:	d825      	bhi.n	8004dfc <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d008      	beq.n	8004dc8 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d11f      	bne.n	8004dfc <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004dbc:	4b25      	ldr	r3, [pc, #148]	; (8004e54 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004dbe:	613b      	str	r3, [r7, #16]
    break;
 8004dc0:	e01f      	b.n	8004e02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004dc2:	4b25      	ldr	r3, [pc, #148]	; (8004e58 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004dc4:	613b      	str	r3, [r7, #16]
    break;
 8004dc6:	e01c      	b.n	8004e02 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004dc8:	4b21      	ldr	r3, [pc, #132]	; (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0308 	and.w	r3, r3, #8
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d107      	bne.n	8004de4 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004dd4:	4b1e      	ldr	r3, [pc, #120]	; (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004dd6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dda:	0a1b      	lsrs	r3, r3, #8
 8004ddc:	f003 030f 	and.w	r3, r3, #15
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e005      	b.n	8004df0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004de4:	4b1a      	ldr	r3, [pc, #104]	; (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	091b      	lsrs	r3, r3, #4
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004df0:	4a1a      	ldr	r2, [pc, #104]	; (8004e5c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004df8:	613b      	str	r3, [r7, #16]
    break;
 8004dfa:	e002      	b.n	8004e02 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	613b      	str	r3, [r7, #16]
    break;
 8004e00:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004e02:	4b13      	ldr	r3, [pc, #76]	; (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e04:	68db      	ldr	r3, [r3, #12]
 8004e06:	091b      	lsrs	r3, r3, #4
 8004e08:	f003 030f 	and.w	r3, r3, #15
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004e10:	4b0f      	ldr	r3, [pc, #60]	; (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	0a1b      	lsrs	r3, r3, #8
 8004e16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	fb03 f202 	mul.w	r2, r3, r2
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e26:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004e28:	4b09      	ldr	r3, [pc, #36]	; (8004e50 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004e2a:	68db      	ldr	r3, [r3, #12]
 8004e2c:	0e5b      	lsrs	r3, r3, #25
 8004e2e:	f003 0303 	and.w	r3, r3, #3
 8004e32:	3301      	adds	r3, #1
 8004e34:	005b      	lsls	r3, r3, #1
 8004e36:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004e38:	693a      	ldr	r2, [r7, #16]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e40:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004e42:	683b      	ldr	r3, [r7, #0]
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	371c      	adds	r7, #28
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr
 8004e50:	40021000 	.word	0x40021000
 8004e54:	00f42400 	.word	0x00f42400
 8004e58:	007a1200 	.word	0x007a1200
 8004e5c:	0800ae58 	.word	0x0800ae58

08004e60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b086      	sub	sp, #24
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e68:	2300      	movs	r3, #0
 8004e6a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d040      	beq.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e80:	2b80      	cmp	r3, #128	; 0x80
 8004e82:	d02a      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e84:	2b80      	cmp	r3, #128	; 0x80
 8004e86:	d825      	bhi.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e88:	2b60      	cmp	r3, #96	; 0x60
 8004e8a:	d026      	beq.n	8004eda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004e8c:	2b60      	cmp	r3, #96	; 0x60
 8004e8e:	d821      	bhi.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e90:	2b40      	cmp	r3, #64	; 0x40
 8004e92:	d006      	beq.n	8004ea2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004e94:	2b40      	cmp	r3, #64	; 0x40
 8004e96:	d81d      	bhi.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d009      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	d010      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004ea0:	e018      	b.n	8004ed4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ea2:	4b89      	ldr	r3, [pc, #548]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ea4:	68db      	ldr	r3, [r3, #12]
 8004ea6:	4a88      	ldr	r2, [pc, #544]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ea8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eac:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004eae:	e015      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	3304      	adds	r3, #4
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fb02 	bl	80054c0 <RCCEx_PLLSAI1_Config>
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ec0:	e00c      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	3320      	adds	r3, #32
 8004ec6:	2100      	movs	r1, #0
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f000 fbed 	bl	80056a8 <RCCEx_PLLSAI2_Config>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004ed2:	e003      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	74fb      	strb	r3, [r7, #19]
      break;
 8004ed8:	e000      	b.n	8004edc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004eda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004edc:	7cfb      	ldrb	r3, [r7, #19]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d10b      	bne.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ee2:	4b79      	ldr	r3, [pc, #484]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ee4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004ee8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ef0:	4975      	ldr	r1, [pc, #468]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004ef8:	e001      	b.n	8004efe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004efa:	7cfb      	ldrb	r3, [r7, #19]
 8004efc:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d047      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f12:	d030      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f18:	d82a      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f1e:	d02a      	beq.n	8004f76 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f24:	d824      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f26:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f2a:	d008      	beq.n	8004f3e <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004f2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f30:	d81e      	bhi.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d00a      	beq.n	8004f4c <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004f36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f3a:	d010      	beq.n	8004f5e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004f3c:	e018      	b.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004f3e:	4b62      	ldr	r3, [pc, #392]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	4a61      	ldr	r2, [pc, #388]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f48:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f4a:	e015      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	3304      	adds	r3, #4
 8004f50:	2100      	movs	r1, #0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f000 fab4 	bl	80054c0 <RCCEx_PLLSAI1_Config>
 8004f58:	4603      	mov	r3, r0
 8004f5a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f5c:	e00c      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	3320      	adds	r3, #32
 8004f62:	2100      	movs	r1, #0
 8004f64:	4618      	mov	r0, r3
 8004f66:	f000 fb9f 	bl	80056a8 <RCCEx_PLLSAI2_Config>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f6e:	e003      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f70:	2301      	movs	r3, #1
 8004f72:	74fb      	strb	r3, [r7, #19]
      break;
 8004f74:	e000      	b.n	8004f78 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8004f76:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f78:	7cfb      	ldrb	r3, [r7, #19]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d10b      	bne.n	8004f96 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f7e:	4b52      	ldr	r3, [pc, #328]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f80:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004f84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f8c:	494e      	ldr	r1, [pc, #312]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004f94:	e001      	b.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f96:	7cfb      	ldrb	r3, [r7, #19]
 8004f98:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 809f 	beq.w	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004fac:	4b46      	ldr	r3, [pc, #280]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d00d      	beq.n	8004fde <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc2:	4b41      	ldr	r3, [pc, #260]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fc6:	4a40      	ldr	r2, [pc, #256]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8004fce:	4b3e      	ldr	r3, [pc, #248]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd6:	60bb      	str	r3, [r7, #8]
 8004fd8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fda:	2301      	movs	r3, #1
 8004fdc:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004fde:	4b3b      	ldr	r3, [pc, #236]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a3a      	ldr	r2, [pc, #232]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004fe4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fe8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004fea:	f7fb faf3 	bl	80005d4 <HAL_GetTick>
 8004fee:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004ff0:	e009      	b.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ff2:	f7fb faef 	bl	80005d4 <HAL_GetTick>
 8004ff6:	4602      	mov	r2, r0
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	1ad3      	subs	r3, r2, r3
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d902      	bls.n	8005006 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	74fb      	strb	r3, [r7, #19]
        break;
 8005004:	e005      	b.n	8005012 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005006:	4b31      	ldr	r3, [pc, #196]	; (80050cc <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800500e:	2b00      	cmp	r3, #0
 8005010:	d0ef      	beq.n	8004ff2 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005012:	7cfb      	ldrb	r3, [r7, #19]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d15b      	bne.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005018:	4b2b      	ldr	r3, [pc, #172]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800501e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005022:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d01f      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005030:	697a      	ldr	r2, [r7, #20]
 8005032:	429a      	cmp	r2, r3
 8005034:	d019      	beq.n	800506a <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005036:	4b24      	ldr	r3, [pc, #144]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800503c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005040:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005042:	4b21      	ldr	r3, [pc, #132]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005048:	4a1f      	ldr	r2, [pc, #124]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800504a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800504e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005052:	4b1d      	ldr	r3, [pc, #116]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005054:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005058:	4a1b      	ldr	r2, [pc, #108]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800505a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800505e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005062:	4a19      	ldr	r2, [pc, #100]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005064:	697b      	ldr	r3, [r7, #20]
 8005066:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800506a:	697b      	ldr	r3, [r7, #20]
 800506c:	f003 0301 	and.w	r3, r3, #1
 8005070:	2b00      	cmp	r3, #0
 8005072:	d016      	beq.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005074:	f7fb faae 	bl	80005d4 <HAL_GetTick>
 8005078:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800507a:	e00b      	b.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507c:	f7fb faaa 	bl	80005d4 <HAL_GetTick>
 8005080:	4602      	mov	r2, r0
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f241 3288 	movw	r2, #5000	; 0x1388
 800508a:	4293      	cmp	r3, r2
 800508c:	d902      	bls.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 800508e:	2303      	movs	r3, #3
 8005090:	74fb      	strb	r3, [r7, #19]
            break;
 8005092:	e006      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005094:	4b0c      	ldr	r3, [pc, #48]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0ec      	beq.n	800507c <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80050a2:	7cfb      	ldrb	r3, [r7, #19]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d10c      	bne.n	80050c2 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80050a8:	4b07      	ldr	r3, [pc, #28]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050b8:	4903      	ldr	r1, [pc, #12]	; (80050c8 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050ba:	4313      	orrs	r3, r2
 80050bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80050c0:	e008      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80050c2:	7cfb      	ldrb	r3, [r7, #19]
 80050c4:	74bb      	strb	r3, [r7, #18]
 80050c6:	e005      	b.n	80050d4 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80050c8:	40021000 	.word	0x40021000
 80050cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050d0:	7cfb      	ldrb	r3, [r7, #19]
 80050d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80050d4:	7c7b      	ldrb	r3, [r7, #17]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d105      	bne.n	80050e6 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050da:	4ba0      	ldr	r3, [pc, #640]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050de:	4a9f      	ldr	r2, [pc, #636]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00a      	beq.n	8005108 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80050f2:	4b9a      	ldr	r3, [pc, #616]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80050f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f8:	f023 0203 	bic.w	r2, r3, #3
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005100:	4996      	ldr	r1, [pc, #600]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005102:	4313      	orrs	r3, r2
 8005104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0302 	and.w	r3, r3, #2
 8005110:	2b00      	cmp	r3, #0
 8005112:	d00a      	beq.n	800512a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005114:	4b91      	ldr	r3, [pc, #580]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800511a:	f023 020c 	bic.w	r2, r3, #12
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005122:	498e      	ldr	r1, [pc, #568]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005124:	4313      	orrs	r3, r2
 8005126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0304 	and.w	r3, r3, #4
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00a      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005136:	4b89      	ldr	r3, [pc, #548]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800513c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005144:	4985      	ldr	r1, [pc, #532]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005146:	4313      	orrs	r3, r2
 8005148:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f003 0308 	and.w	r3, r3, #8
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00a      	beq.n	800516e <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005158:	4b80      	ldr	r3, [pc, #512]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800515a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800515e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005166:	497d      	ldr	r1, [pc, #500]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005168:	4313      	orrs	r3, r2
 800516a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00a      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800517a:	4b78      	ldr	r3, [pc, #480]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800517c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005180:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005188:	4974      	ldr	r1, [pc, #464]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800518a:	4313      	orrs	r3, r2
 800518c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f003 0320 	and.w	r3, r3, #32
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00a      	beq.n	80051b2 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800519c:	4b6f      	ldr	r3, [pc, #444]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800519e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051aa:	496c      	ldr	r1, [pc, #432]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ac:	4313      	orrs	r3, r2
 80051ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00a      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80051be:	4b67      	ldr	r3, [pc, #412]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051cc:	4963      	ldr	r1, [pc, #396]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051ce:	4313      	orrs	r3, r2
 80051d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d00a      	beq.n	80051f6 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80051e0:	4b5e      	ldr	r3, [pc, #376]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051ee:	495b      	ldr	r1, [pc, #364]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80051f0:	4313      	orrs	r3, r2
 80051f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00a      	beq.n	8005218 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005202:	4b56      	ldr	r3, [pc, #344]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005204:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005208:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005210:	4952      	ldr	r1, [pc, #328]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00a      	beq.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005224:	4b4d      	ldr	r3, [pc, #308]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800522a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005232:	494a      	ldr	r1, [pc, #296]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005234:	4313      	orrs	r3, r2
 8005236:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005242:	2b00      	cmp	r3, #0
 8005244:	d00a      	beq.n	800525c <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005246:	4b45      	ldr	r3, [pc, #276]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005248:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800524c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005254:	4941      	ldr	r1, [pc, #260]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005256:	4313      	orrs	r3, r2
 8005258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00a      	beq.n	800527e <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005268:	4b3c      	ldr	r3, [pc, #240]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800526a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800526e:	f023 0203 	bic.w	r2, r3, #3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005276:	4939      	ldr	r1, [pc, #228]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005278:	4313      	orrs	r3, r2
 800527a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005286:	2b00      	cmp	r3, #0
 8005288:	d028      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800528a:	4b34      	ldr	r3, [pc, #208]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800528c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005290:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005298:	4930      	ldr	r1, [pc, #192]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800529a:	4313      	orrs	r3, r2
 800529c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052a8:	d106      	bne.n	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052aa:	4b2c      	ldr	r3, [pc, #176]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	4a2b      	ldr	r2, [pc, #172]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052b4:	60d3      	str	r3, [r2, #12]
 80052b6:	e011      	b.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052c0:	d10c      	bne.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3304      	adds	r3, #4
 80052c6:	2101      	movs	r1, #1
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 f8f9 	bl	80054c0 <RCCEx_PLLSAI1_Config>
 80052ce:	4603      	mov	r3, r0
 80052d0:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80052d2:	7cfb      	ldrb	r3, [r7, #19]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d001      	beq.n	80052dc <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80052d8:	7cfb      	ldrb	r3, [r7, #19]
 80052da:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d04d      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80052ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80052f0:	d108      	bne.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80052f2:	4b1a      	ldr	r3, [pc, #104]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80052f8:	4a18      	ldr	r2, [pc, #96]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80052fe:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005302:	e012      	b.n	800532a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005304:	4b15      	ldr	r3, [pc, #84]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005306:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800530a:	4a14      	ldr	r2, [pc, #80]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800530c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005310:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8005314:	4b11      	ldr	r3, [pc, #68]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005322:	490e      	ldr	r1, [pc, #56]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005324:	4313      	orrs	r3, r2
 8005326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800532e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005332:	d106      	bne.n	8005342 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005334:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005336:	68db      	ldr	r3, [r3, #12]
 8005338:	4a08      	ldr	r2, [pc, #32]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800533a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800533e:	60d3      	str	r3, [r2, #12]
 8005340:	e020      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800534a:	d109      	bne.n	8005360 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800534c:	4b03      	ldr	r3, [pc, #12]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800534e:	68db      	ldr	r3, [r3, #12]
 8005350:	4a02      	ldr	r2, [pc, #8]	; (800535c <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005352:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005356:	60d3      	str	r3, [r2, #12]
 8005358:	e014      	b.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800535a:	bf00      	nop
 800535c:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005364:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005368:	d10c      	bne.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	3304      	adds	r3, #4
 800536e:	2101      	movs	r1, #1
 8005370:	4618      	mov	r0, r3
 8005372:	f000 f8a5 	bl	80054c0 <RCCEx_PLLSAI1_Config>
 8005376:	4603      	mov	r3, r0
 8005378:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800537a:	7cfb      	ldrb	r3, [r7, #19]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d001      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005380:	7cfb      	ldrb	r3, [r7, #19]
 8005382:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d028      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005390:	4b4a      	ldr	r3, [pc, #296]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005392:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005396:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800539e:	4947      	ldr	r1, [pc, #284]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053a0:	4313      	orrs	r3, r2
 80053a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053ae:	d106      	bne.n	80053be <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80053b0:	4b42      	ldr	r3, [pc, #264]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053b2:	68db      	ldr	r3, [r3, #12]
 80053b4:	4a41      	ldr	r2, [pc, #260]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053ba:	60d3      	str	r3, [r2, #12]
 80053bc:	e011      	b.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80053c6:	d10c      	bne.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	3304      	adds	r3, #4
 80053cc:	2101      	movs	r1, #1
 80053ce:	4618      	mov	r0, r3
 80053d0:	f000 f876 	bl	80054c0 <RCCEx_PLLSAI1_Config>
 80053d4:	4603      	mov	r3, r0
 80053d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80053d8:	7cfb      	ldrb	r3, [r7, #19]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d001      	beq.n	80053e2 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80053de:	7cfb      	ldrb	r3, [r7, #19]
 80053e0:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d01e      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80053ee:	4b33      	ldr	r3, [pc, #204]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80053f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053fe:	492f      	ldr	r1, [pc, #188]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005400:	4313      	orrs	r3, r2
 8005402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800540c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005410:	d10c      	bne.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	3304      	adds	r3, #4
 8005416:	2102      	movs	r1, #2
 8005418:	4618      	mov	r0, r3
 800541a:	f000 f851 	bl	80054c0 <RCCEx_PLLSAI1_Config>
 800541e:	4603      	mov	r3, r0
 8005420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005422:	7cfb      	ldrb	r3, [r7, #19]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005428:	7cfb      	ldrb	r3, [r7, #19]
 800542a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00b      	beq.n	8005450 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005438:	4b20      	ldr	r3, [pc, #128]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800543a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800543e:	f023 0204 	bic.w	r2, r3, #4
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005448:	491c      	ldr	r1, [pc, #112]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00b      	beq.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800545c:	4b17      	ldr	r3, [pc, #92]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800545e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005462:	f023 0218 	bic.w	r2, r3, #24
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800546c:	4913      	ldr	r1, [pc, #76]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800547c:	2b00      	cmp	r3, #0
 800547e:	d017      	beq.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8005480:	4b0e      	ldr	r3, [pc, #56]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005486:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005490:	490a      	ldr	r1, [pc, #40]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005492:	4313      	orrs	r3, r2
 8005494:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800549e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054a2:	d105      	bne.n	80054b0 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80054a4:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4a04      	ldr	r2, [pc, #16]	; (80054bc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80054ae:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80054b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80054b2:	4618      	mov	r0, r3
 80054b4:	3718      	adds	r7, #24
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}
 80054ba:	bf00      	nop
 80054bc:	40021000 	.word	0x40021000

080054c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80054c0:	b580      	push	{r7, lr}
 80054c2:	b084      	sub	sp, #16
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80054ca:	2300      	movs	r3, #0
 80054cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80054ce:	4b72      	ldr	r3, [pc, #456]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00e      	beq.n	80054f8 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80054da:	4b6f      	ldr	r3, [pc, #444]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80054dc:	68db      	ldr	r3, [r3, #12]
 80054de:	f003 0203 	and.w	r2, r3, #3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	429a      	cmp	r2, r3
 80054e8:	d103      	bne.n	80054f2 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
       ||
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d142      	bne.n	8005578 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	73fb      	strb	r3, [r7, #15]
 80054f6:	e03f      	b.n	8005578 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d018      	beq.n	8005532 <RCCEx_PLLSAI1_Config+0x72>
 8005500:	2b03      	cmp	r3, #3
 8005502:	d825      	bhi.n	8005550 <RCCEx_PLLSAI1_Config+0x90>
 8005504:	2b01      	cmp	r3, #1
 8005506:	d002      	beq.n	800550e <RCCEx_PLLSAI1_Config+0x4e>
 8005508:	2b02      	cmp	r3, #2
 800550a:	d009      	beq.n	8005520 <RCCEx_PLLSAI1_Config+0x60>
 800550c:	e020      	b.n	8005550 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800550e:	4b62      	ldr	r3, [pc, #392]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0302 	and.w	r3, r3, #2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d11d      	bne.n	8005556 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800551e:	e01a      	b.n	8005556 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005520:	4b5d      	ldr	r3, [pc, #372]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005528:	2b00      	cmp	r3, #0
 800552a:	d116      	bne.n	800555a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800552c:	2301      	movs	r3, #1
 800552e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005530:	e013      	b.n	800555a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005532:	4b59      	ldr	r3, [pc, #356]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10f      	bne.n	800555e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800553e:	4b56      	ldr	r3, [pc, #344]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d109      	bne.n	800555e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800554e:	e006      	b.n	800555e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	73fb      	strb	r3, [r7, #15]
      break;
 8005554:	e004      	b.n	8005560 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8005556:	bf00      	nop
 8005558:	e002      	b.n	8005560 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800555a:	bf00      	nop
 800555c:	e000      	b.n	8005560 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800555e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005560:	7bfb      	ldrb	r3, [r7, #15]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d108      	bne.n	8005578 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8005566:	4b4c      	ldr	r3, [pc, #304]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	f023 0203 	bic.w	r2, r3, #3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4949      	ldr	r1, [pc, #292]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005574:	4313      	orrs	r3, r2
 8005576:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005578:	7bfb      	ldrb	r3, [r7, #15]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f040 8086 	bne.w	800568c <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005580:	4b45      	ldr	r3, [pc, #276]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a44      	ldr	r2, [pc, #272]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005586:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800558a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800558c:	f7fb f822 	bl	80005d4 <HAL_GetTick>
 8005590:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005592:	e009      	b.n	80055a8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005594:	f7fb f81e 	bl	80005d4 <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d902      	bls.n	80055a8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	73fb      	strb	r3, [r7, #15]
        break;
 80055a6:	e005      	b.n	80055b4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80055a8:	4b3b      	ldr	r3, [pc, #236]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d1ef      	bne.n	8005594 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d168      	bne.n	800568c <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d113      	bne.n	80055e8 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055c0:	4b35      	ldr	r3, [pc, #212]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	4b35      	ldr	r3, [pc, #212]	; (800569c <RCCEx_PLLSAI1_Config+0x1dc>)
 80055c6:	4013      	ands	r3, r2
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	6892      	ldr	r2, [r2, #8]
 80055cc:	0211      	lsls	r1, r2, #8
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	68d2      	ldr	r2, [r2, #12]
 80055d2:	06d2      	lsls	r2, r2, #27
 80055d4:	4311      	orrs	r1, r2
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	6852      	ldr	r2, [r2, #4]
 80055da:	3a01      	subs	r2, #1
 80055dc:	0112      	lsls	r2, r2, #4
 80055de:	430a      	orrs	r2, r1
 80055e0:	492d      	ldr	r1, [pc, #180]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055e2:	4313      	orrs	r3, r2
 80055e4:	610b      	str	r3, [r1, #16]
 80055e6:	e02d      	b.n	8005644 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d115      	bne.n	800561a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055ee:	4b2a      	ldr	r3, [pc, #168]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	4b2b      	ldr	r3, [pc, #172]	; (80056a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	687a      	ldr	r2, [r7, #4]
 80055f8:	6892      	ldr	r2, [r2, #8]
 80055fa:	0211      	lsls	r1, r2, #8
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6912      	ldr	r2, [r2, #16]
 8005600:	0852      	lsrs	r2, r2, #1
 8005602:	3a01      	subs	r2, #1
 8005604:	0552      	lsls	r2, r2, #21
 8005606:	4311      	orrs	r1, r2
 8005608:	687a      	ldr	r2, [r7, #4]
 800560a:	6852      	ldr	r2, [r2, #4]
 800560c:	3a01      	subs	r2, #1
 800560e:	0112      	lsls	r2, r2, #4
 8005610:	430a      	orrs	r2, r1
 8005612:	4921      	ldr	r1, [pc, #132]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005614:	4313      	orrs	r3, r2
 8005616:	610b      	str	r3, [r1, #16]
 8005618:	e014      	b.n	8005644 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800561a:	4b1f      	ldr	r3, [pc, #124]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 800561c:	691a      	ldr	r2, [r3, #16]
 800561e:	4b21      	ldr	r3, [pc, #132]	; (80056a4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005620:	4013      	ands	r3, r2
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	6892      	ldr	r2, [r2, #8]
 8005626:	0211      	lsls	r1, r2, #8
 8005628:	687a      	ldr	r2, [r7, #4]
 800562a:	6952      	ldr	r2, [r2, #20]
 800562c:	0852      	lsrs	r2, r2, #1
 800562e:	3a01      	subs	r2, #1
 8005630:	0652      	lsls	r2, r2, #25
 8005632:	4311      	orrs	r1, r2
 8005634:	687a      	ldr	r2, [r7, #4]
 8005636:	6852      	ldr	r2, [r2, #4]
 8005638:	3a01      	subs	r2, #1
 800563a:	0112      	lsls	r2, r2, #4
 800563c:	430a      	orrs	r2, r1
 800563e:	4916      	ldr	r1, [pc, #88]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005640:	4313      	orrs	r3, r2
 8005642:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005644:	4b14      	ldr	r3, [pc, #80]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a13      	ldr	r2, [pc, #76]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 800564a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800564e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005650:	f7fa ffc0 	bl	80005d4 <HAL_GetTick>
 8005654:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005656:	e009      	b.n	800566c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005658:	f7fa ffbc 	bl	80005d4 <HAL_GetTick>
 800565c:	4602      	mov	r2, r0
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	1ad3      	subs	r3, r2, r3
 8005662:	2b02      	cmp	r3, #2
 8005664:	d902      	bls.n	800566c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8005666:	2303      	movs	r3, #3
 8005668:	73fb      	strb	r3, [r7, #15]
          break;
 800566a:	e005      	b.n	8005678 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800566c:	4b0a      	ldr	r3, [pc, #40]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0ef      	beq.n	8005658 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005678:	7bfb      	ldrb	r3, [r7, #15]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800567e:	4b06      	ldr	r3, [pc, #24]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	4904      	ldr	r1, [pc, #16]	; (8005698 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005688:	4313      	orrs	r3, r2
 800568a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800568c:	7bfb      	ldrb	r3, [r7, #15]
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	40021000 	.word	0x40021000
 800569c:	07ff800f 	.word	0x07ff800f
 80056a0:	ff9f800f 	.word	0xff9f800f
 80056a4:	f9ff800f 	.word	0xf9ff800f

080056a8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
 80056b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80056b2:	2300      	movs	r3, #0
 80056b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80056b6:	4b72      	ldr	r3, [pc, #456]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056b8:	68db      	ldr	r3, [r3, #12]
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00e      	beq.n	80056e0 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80056c2:	4b6f      	ldr	r3, [pc, #444]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056c4:	68db      	ldr	r3, [r3, #12]
 80056c6:	f003 0203 	and.w	r2, r3, #3
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d103      	bne.n	80056da <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
       ||
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d142      	bne.n	8005760 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 80056da:	2301      	movs	r3, #1
 80056dc:	73fb      	strb	r3, [r7, #15]
 80056de:	e03f      	b.n	8005760 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	2b03      	cmp	r3, #3
 80056e6:	d018      	beq.n	800571a <RCCEx_PLLSAI2_Config+0x72>
 80056e8:	2b03      	cmp	r3, #3
 80056ea:	d825      	bhi.n	8005738 <RCCEx_PLLSAI2_Config+0x90>
 80056ec:	2b01      	cmp	r3, #1
 80056ee:	d002      	beq.n	80056f6 <RCCEx_PLLSAI2_Config+0x4e>
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	d009      	beq.n	8005708 <RCCEx_PLLSAI2_Config+0x60>
 80056f4:	e020      	b.n	8005738 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056f6:	4b62      	ldr	r3, [pc, #392]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d11d      	bne.n	800573e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8005702:	2301      	movs	r3, #1
 8005704:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005706:	e01a      	b.n	800573e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005708:	4b5d      	ldr	r3, [pc, #372]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005710:	2b00      	cmp	r3, #0
 8005712:	d116      	bne.n	8005742 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005718:	e013      	b.n	8005742 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800571a:	4b59      	ldr	r3, [pc, #356]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10f      	bne.n	8005746 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005726:	4b56      	ldr	r3, [pc, #344]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800572e:	2b00      	cmp	r3, #0
 8005730:	d109      	bne.n	8005746 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005736:	e006      	b.n	8005746 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005738:	2301      	movs	r3, #1
 800573a:	73fb      	strb	r3, [r7, #15]
      break;
 800573c:	e004      	b.n	8005748 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800573e:	bf00      	nop
 8005740:	e002      	b.n	8005748 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005742:	bf00      	nop
 8005744:	e000      	b.n	8005748 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005746:	bf00      	nop
    }

    if(status == HAL_OK)
 8005748:	7bfb      	ldrb	r3, [r7, #15]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d108      	bne.n	8005760 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800574e:	4b4c      	ldr	r3, [pc, #304]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005750:	68db      	ldr	r3, [r3, #12]
 8005752:	f023 0203 	bic.w	r2, r3, #3
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4949      	ldr	r1, [pc, #292]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800575c:	4313      	orrs	r3, r2
 800575e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8005760:	7bfb      	ldrb	r3, [r7, #15]
 8005762:	2b00      	cmp	r3, #0
 8005764:	f040 8086 	bne.w	8005874 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005768:	4b45      	ldr	r3, [pc, #276]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	4a44      	ldr	r2, [pc, #272]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800576e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005772:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005774:	f7fa ff2e 	bl	80005d4 <HAL_GetTick>
 8005778:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800577a:	e009      	b.n	8005790 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800577c:	f7fa ff2a 	bl	80005d4 <HAL_GetTick>
 8005780:	4602      	mov	r2, r0
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	1ad3      	subs	r3, r2, r3
 8005786:	2b02      	cmp	r3, #2
 8005788:	d902      	bls.n	8005790 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800578a:	2303      	movs	r3, #3
 800578c:	73fb      	strb	r3, [r7, #15]
        break;
 800578e:	e005      	b.n	800579c <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005790:	4b3b      	ldr	r3, [pc, #236]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1ef      	bne.n	800577c <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800579c:	7bfb      	ldrb	r3, [r7, #15]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d168      	bne.n	8005874 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d113      	bne.n	80057d0 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057a8:	4b35      	ldr	r3, [pc, #212]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057aa:	695a      	ldr	r2, [r3, #20]
 80057ac:	4b35      	ldr	r3, [pc, #212]	; (8005884 <RCCEx_PLLSAI2_Config+0x1dc>)
 80057ae:	4013      	ands	r3, r2
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6892      	ldr	r2, [r2, #8]
 80057b4:	0211      	lsls	r1, r2, #8
 80057b6:	687a      	ldr	r2, [r7, #4]
 80057b8:	68d2      	ldr	r2, [r2, #12]
 80057ba:	06d2      	lsls	r2, r2, #27
 80057bc:	4311      	orrs	r1, r2
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	6852      	ldr	r2, [r2, #4]
 80057c2:	3a01      	subs	r2, #1
 80057c4:	0112      	lsls	r2, r2, #4
 80057c6:	430a      	orrs	r2, r1
 80057c8:	492d      	ldr	r1, [pc, #180]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057ca:	4313      	orrs	r3, r2
 80057cc:	614b      	str	r3, [r1, #20]
 80057ce:	e02d      	b.n	800582c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	2b01      	cmp	r3, #1
 80057d4:	d115      	bne.n	8005802 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80057d6:	4b2a      	ldr	r3, [pc, #168]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057d8:	695a      	ldr	r2, [r3, #20]
 80057da:	4b2b      	ldr	r3, [pc, #172]	; (8005888 <RCCEx_PLLSAI2_Config+0x1e0>)
 80057dc:	4013      	ands	r3, r2
 80057de:	687a      	ldr	r2, [r7, #4]
 80057e0:	6892      	ldr	r2, [r2, #8]
 80057e2:	0211      	lsls	r1, r2, #8
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	6912      	ldr	r2, [r2, #16]
 80057e8:	0852      	lsrs	r2, r2, #1
 80057ea:	3a01      	subs	r2, #1
 80057ec:	0552      	lsls	r2, r2, #21
 80057ee:	4311      	orrs	r1, r2
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	6852      	ldr	r2, [r2, #4]
 80057f4:	3a01      	subs	r2, #1
 80057f6:	0112      	lsls	r2, r2, #4
 80057f8:	430a      	orrs	r2, r1
 80057fa:	4921      	ldr	r1, [pc, #132]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 80057fc:	4313      	orrs	r3, r2
 80057fe:	614b      	str	r3, [r1, #20]
 8005800:	e014      	b.n	800582c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005802:	4b1f      	ldr	r3, [pc, #124]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005804:	695a      	ldr	r2, [r3, #20]
 8005806:	4b21      	ldr	r3, [pc, #132]	; (800588c <RCCEx_PLLSAI2_Config+0x1e4>)
 8005808:	4013      	ands	r3, r2
 800580a:	687a      	ldr	r2, [r7, #4]
 800580c:	6892      	ldr	r2, [r2, #8]
 800580e:	0211      	lsls	r1, r2, #8
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	6952      	ldr	r2, [r2, #20]
 8005814:	0852      	lsrs	r2, r2, #1
 8005816:	3a01      	subs	r2, #1
 8005818:	0652      	lsls	r2, r2, #25
 800581a:	4311      	orrs	r1, r2
 800581c:	687a      	ldr	r2, [r7, #4]
 800581e:	6852      	ldr	r2, [r2, #4]
 8005820:	3a01      	subs	r2, #1
 8005822:	0112      	lsls	r2, r2, #4
 8005824:	430a      	orrs	r2, r1
 8005826:	4916      	ldr	r1, [pc, #88]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005828:	4313      	orrs	r3, r2
 800582a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800582c:	4b14      	ldr	r3, [pc, #80]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	4a13      	ldr	r2, [pc, #76]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005832:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005836:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005838:	f7fa fecc 	bl	80005d4 <HAL_GetTick>
 800583c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800583e:	e009      	b.n	8005854 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005840:	f7fa fec8 	bl	80005d4 <HAL_GetTick>
 8005844:	4602      	mov	r2, r0
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	1ad3      	subs	r3, r2, r3
 800584a:	2b02      	cmp	r3, #2
 800584c:	d902      	bls.n	8005854 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800584e:	2303      	movs	r3, #3
 8005850:	73fb      	strb	r3, [r7, #15]
          break;
 8005852:	e005      	b.n	8005860 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005854:	4b0a      	ldr	r3, [pc, #40]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800585c:	2b00      	cmp	r3, #0
 800585e:	d0ef      	beq.n	8005840 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8005860:	7bfb      	ldrb	r3, [r7, #15]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005866:	4b06      	ldr	r3, [pc, #24]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005868:	695a      	ldr	r2, [r3, #20]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	4904      	ldr	r1, [pc, #16]	; (8005880 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005870:	4313      	orrs	r3, r2
 8005872:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005874:	7bfb      	ldrb	r3, [r7, #15]
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40021000 	.word	0x40021000
 8005884:	07ff800f 	.word	0x07ff800f
 8005888:	ff9f800f 	.word	0xff9f800f
 800588c:	f9ff800f 	.word	0xf9ff800f

08005890 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b082      	sub	sp, #8
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d101      	bne.n	80058a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800589e:	2301      	movs	r3, #1
 80058a0:	e049      	b.n	8005936 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058a8:	b2db      	uxtb	r3, r3
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d106      	bne.n	80058bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f005 f8aa 	bl	800aa10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2202      	movs	r2, #2
 80058c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	3304      	adds	r3, #4
 80058cc:	4619      	mov	r1, r3
 80058ce:	4610      	mov	r0, r2
 80058d0:	f000 fac0 	bl	8005e54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2201      	movs	r2, #1
 80058d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2201      	movs	r2, #1
 80058e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2201      	movs	r2, #1
 80058f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2201      	movs	r2, #1
 80058f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2201      	movs	r2, #1
 8005900:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2201      	movs	r2, #1
 8005910:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2201      	movs	r2, #1
 8005928:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2201      	movs	r2, #1
 8005930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005934:	2300      	movs	r3, #0
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
	...

08005940 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b01      	cmp	r3, #1
 8005952:	d001      	beq.n	8005958 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005954:	2301      	movs	r3, #1
 8005956:	e04f      	b.n	80059f8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2202      	movs	r2, #2
 800595c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	68da      	ldr	r2, [r3, #12]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f042 0201 	orr.w	r2, r2, #1
 800596e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a23      	ldr	r2, [pc, #140]	; (8005a04 <HAL_TIM_Base_Start_IT+0xc4>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d01d      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005982:	d018      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a1f      	ldr	r2, [pc, #124]	; (8005a08 <HAL_TIM_Base_Start_IT+0xc8>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d013      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a1e      	ldr	r2, [pc, #120]	; (8005a0c <HAL_TIM_Base_Start_IT+0xcc>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d00e      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a1c      	ldr	r2, [pc, #112]	; (8005a10 <HAL_TIM_Base_Start_IT+0xd0>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d009      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a1b      	ldr	r2, [pc, #108]	; (8005a14 <HAL_TIM_Base_Start_IT+0xd4>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d004      	beq.n	80059b6 <HAL_TIM_Base_Start_IT+0x76>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a19      	ldr	r2, [pc, #100]	; (8005a18 <HAL_TIM_Base_Start_IT+0xd8>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d115      	bne.n	80059e2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	4b17      	ldr	r3, [pc, #92]	; (8005a1c <HAL_TIM_Base_Start_IT+0xdc>)
 80059be:	4013      	ands	r3, r2
 80059c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b06      	cmp	r3, #6
 80059c6:	d015      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0xb4>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ce:	d011      	beq.n	80059f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059e0:	e008      	b.n	80059f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f042 0201 	orr.w	r2, r2, #1
 80059f0:	601a      	str	r2, [r3, #0]
 80059f2:	e000      	b.n	80059f6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80059f6:	2300      	movs	r3, #0
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr
 8005a04:	40012c00 	.word	0x40012c00
 8005a08:	40000400 	.word	0x40000400
 8005a0c:	40000800 	.word	0x40000800
 8005a10:	40000c00 	.word	0x40000c00
 8005a14:	40013400 	.word	0x40013400
 8005a18:	40014000 	.word	0x40014000
 8005a1c:	00010007 	.word	0x00010007

08005a20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b082      	sub	sp, #8
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f003 0302 	and.w	r3, r3, #2
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d122      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b02      	cmp	r3, #2
 8005a42:	d11b      	bne.n	8005a7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f06f 0202 	mvn.w	r2, #2
 8005a4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2201      	movs	r2, #1
 8005a52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	699b      	ldr	r3, [r3, #24]
 8005a5a:	f003 0303 	and.w	r3, r3, #3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d003      	beq.n	8005a6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a62:	6878      	ldr	r0, [r7, #4]
 8005a64:	f000 f9d8 	bl	8005e18 <HAL_TIM_IC_CaptureCallback>
 8005a68:	e005      	b.n	8005a76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f000 f9ca 	bl	8005e04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a70:	6878      	ldr	r0, [r7, #4]
 8005a72:	f000 f9db 	bl	8005e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	691b      	ldr	r3, [r3, #16]
 8005a82:	f003 0304 	and.w	r3, r3, #4
 8005a86:	2b04      	cmp	r3, #4
 8005a88:	d122      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	f003 0304 	and.w	r3, r3, #4
 8005a94:	2b04      	cmp	r3, #4
 8005a96:	d11b      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f06f 0204 	mvn.w	r2, #4
 8005aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2202      	movs	r2, #2
 8005aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	699b      	ldr	r3, [r3, #24]
 8005aae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ab6:	6878      	ldr	r0, [r7, #4]
 8005ab8:	f000 f9ae 	bl	8005e18 <HAL_TIM_IC_CaptureCallback>
 8005abc:	e005      	b.n	8005aca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f000 f9a0 	bl	8005e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 f9b1 	bl	8005e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	2200      	movs	r2, #0
 8005ace:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0308 	and.w	r3, r3, #8
 8005ada:	2b08      	cmp	r3, #8
 8005adc:	d122      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f003 0308 	and.w	r3, r3, #8
 8005ae8:	2b08      	cmp	r3, #8
 8005aea:	d11b      	bne.n	8005b24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	f06f 0208 	mvn.w	r2, #8
 8005af4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2204      	movs	r2, #4
 8005afa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	69db      	ldr	r3, [r3, #28]
 8005b02:	f003 0303 	and.w	r3, r3, #3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d003      	beq.n	8005b12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b0a:	6878      	ldr	r0, [r7, #4]
 8005b0c:	f000 f984 	bl	8005e18 <HAL_TIM_IC_CaptureCallback>
 8005b10:	e005      	b.n	8005b1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 f976 	bl	8005e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 f987 	bl	8005e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	2200      	movs	r2, #0
 8005b22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	f003 0310 	and.w	r3, r3, #16
 8005b2e:	2b10      	cmp	r3, #16
 8005b30:	d122      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f003 0310 	and.w	r3, r3, #16
 8005b3c:	2b10      	cmp	r3, #16
 8005b3e:	d11b      	bne.n	8005b78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f06f 0210 	mvn.w	r2, #16
 8005b48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2208      	movs	r2, #8
 8005b4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d003      	beq.n	8005b66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 f95a 	bl	8005e18 <HAL_TIM_IC_CaptureCallback>
 8005b64:	e005      	b.n	8005b72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 f94c 	bl	8005e04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f000 f95d 	bl	8005e2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	691b      	ldr	r3, [r3, #16]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d10e      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f003 0301 	and.w	r3, r3, #1
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d107      	bne.n	8005ba4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f06f 0201 	mvn.w	r2, #1
 8005b9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b9e:	6878      	ldr	r0, [r7, #4]
 8005ba0:	f000 f926 	bl	8005df0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bae:	2b80      	cmp	r3, #128	; 0x80
 8005bb0:	d10e      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bbc:	2b80      	cmp	r3, #128	; 0x80
 8005bbe:	d107      	bne.n	8005bd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005bc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fb08 	bl	80061e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bde:	d10e      	bne.n	8005bfe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bea:	2b80      	cmp	r3, #128	; 0x80
 8005bec:	d107      	bne.n	8005bfe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f000 fafb 	bl	80061f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c08:	2b40      	cmp	r3, #64	; 0x40
 8005c0a:	d10e      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c16:	2b40      	cmp	r3, #64	; 0x40
 8005c18:	d107      	bne.n	8005c2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f000 f90b 	bl	8005e40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	691b      	ldr	r3, [r3, #16]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d10e      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68db      	ldr	r3, [r3, #12]
 8005c3e:	f003 0320 	and.w	r3, r3, #32
 8005c42:	2b20      	cmp	r3, #32
 8005c44:	d107      	bne.n	8005c56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f06f 0220 	mvn.w	r2, #32
 8005c4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fabb 	bl	80061cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005c56:	bf00      	nop
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c72:	2b01      	cmp	r3, #1
 8005c74:	d101      	bne.n	8005c7a <HAL_TIM_ConfigClockSource+0x1c>
 8005c76:	2302      	movs	r3, #2
 8005c78:	e0b6      	b.n	8005de8 <HAL_TIM_ConfigClockSource+0x18a>
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2202      	movs	r2, #2
 8005c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c98:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005c9c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ca4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68ba      	ldr	r2, [r7, #8]
 8005cac:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005cae:	683b      	ldr	r3, [r7, #0]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cb6:	d03e      	beq.n	8005d36 <HAL_TIM_ConfigClockSource+0xd8>
 8005cb8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cbc:	f200 8087 	bhi.w	8005dce <HAL_TIM_ConfigClockSource+0x170>
 8005cc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cc4:	f000 8086 	beq.w	8005dd4 <HAL_TIM_ConfigClockSource+0x176>
 8005cc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ccc:	d87f      	bhi.n	8005dce <HAL_TIM_ConfigClockSource+0x170>
 8005cce:	2b70      	cmp	r3, #112	; 0x70
 8005cd0:	d01a      	beq.n	8005d08 <HAL_TIM_ConfigClockSource+0xaa>
 8005cd2:	2b70      	cmp	r3, #112	; 0x70
 8005cd4:	d87b      	bhi.n	8005dce <HAL_TIM_ConfigClockSource+0x170>
 8005cd6:	2b60      	cmp	r3, #96	; 0x60
 8005cd8:	d050      	beq.n	8005d7c <HAL_TIM_ConfigClockSource+0x11e>
 8005cda:	2b60      	cmp	r3, #96	; 0x60
 8005cdc:	d877      	bhi.n	8005dce <HAL_TIM_ConfigClockSource+0x170>
 8005cde:	2b50      	cmp	r3, #80	; 0x50
 8005ce0:	d03c      	beq.n	8005d5c <HAL_TIM_ConfigClockSource+0xfe>
 8005ce2:	2b50      	cmp	r3, #80	; 0x50
 8005ce4:	d873      	bhi.n	8005dce <HAL_TIM_ConfigClockSource+0x170>
 8005ce6:	2b40      	cmp	r3, #64	; 0x40
 8005ce8:	d058      	beq.n	8005d9c <HAL_TIM_ConfigClockSource+0x13e>
 8005cea:	2b40      	cmp	r3, #64	; 0x40
 8005cec:	d86f      	bhi.n	8005dce <HAL_TIM_ConfigClockSource+0x170>
 8005cee:	2b30      	cmp	r3, #48	; 0x30
 8005cf0:	d064      	beq.n	8005dbc <HAL_TIM_ConfigClockSource+0x15e>
 8005cf2:	2b30      	cmp	r3, #48	; 0x30
 8005cf4:	d86b      	bhi.n	8005dce <HAL_TIM_ConfigClockSource+0x170>
 8005cf6:	2b20      	cmp	r3, #32
 8005cf8:	d060      	beq.n	8005dbc <HAL_TIM_ConfigClockSource+0x15e>
 8005cfa:	2b20      	cmp	r3, #32
 8005cfc:	d867      	bhi.n	8005dce <HAL_TIM_ConfigClockSource+0x170>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d05c      	beq.n	8005dbc <HAL_TIM_ConfigClockSource+0x15e>
 8005d02:	2b10      	cmp	r3, #16
 8005d04:	d05a      	beq.n	8005dbc <HAL_TIM_ConfigClockSource+0x15e>
 8005d06:	e062      	b.n	8005dce <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6818      	ldr	r0, [r3, #0]
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	6899      	ldr	r1, [r3, #8]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	f000 f9b0 	bl	800607c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d2a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68ba      	ldr	r2, [r7, #8]
 8005d32:	609a      	str	r2, [r3, #8]
      break;
 8005d34:	e04f      	b.n	8005dd6 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6818      	ldr	r0, [r3, #0]
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	6899      	ldr	r1, [r3, #8]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	f000 f999 	bl	800607c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d58:	609a      	str	r2, [r3, #8]
      break;
 8005d5a:	e03c      	b.n	8005dd6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6818      	ldr	r0, [r3, #0]
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	6859      	ldr	r1, [r3, #4]
 8005d64:	683b      	ldr	r3, [r7, #0]
 8005d66:	68db      	ldr	r3, [r3, #12]
 8005d68:	461a      	mov	r2, r3
 8005d6a:	f000 f90d 	bl	8005f88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	2150      	movs	r1, #80	; 0x50
 8005d74:	4618      	mov	r0, r3
 8005d76:	f000 f966 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005d7a:	e02c      	b.n	8005dd6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6818      	ldr	r0, [r3, #0]
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	6859      	ldr	r1, [r3, #4]
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	68db      	ldr	r3, [r3, #12]
 8005d88:	461a      	mov	r2, r3
 8005d8a:	f000 f92c 	bl	8005fe6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2160      	movs	r1, #96	; 0x60
 8005d94:	4618      	mov	r0, r3
 8005d96:	f000 f956 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005d9a:	e01c      	b.n	8005dd6 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6818      	ldr	r0, [r3, #0]
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	6859      	ldr	r1, [r3, #4]
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	68db      	ldr	r3, [r3, #12]
 8005da8:	461a      	mov	r2, r3
 8005daa:	f000 f8ed 	bl	8005f88 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	2140      	movs	r1, #64	; 0x40
 8005db4:	4618      	mov	r0, r3
 8005db6:	f000 f946 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005dba:	e00c      	b.n	8005dd6 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	f000 f93d 	bl	8006046 <TIM_ITRx_SetConfig>
      break;
 8005dcc:	e003      	b.n	8005dd6 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8005dd2:	e000      	b.n	8005dd6 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005dd4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2200      	movs	r2, #0
 8005de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005de8:	4618      	mov	r0, r3
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005df8:	bf00      	nop
 8005dfa:	370c      	adds	r7, #12
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b083      	sub	sp, #12
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e0c:	bf00      	nop
 8005e0e:	370c      	adds	r7, #12
 8005e10:	46bd      	mov	sp, r7
 8005e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e16:	4770      	bx	lr

08005e18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e18:	b480      	push	{r7}
 8005e1a:	b083      	sub	sp, #12
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e20:	bf00      	nop
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b085      	sub	sp, #20
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	4a40      	ldr	r2, [pc, #256]	; (8005f68 <TIM_Base_SetConfig+0x114>)
 8005e68:	4293      	cmp	r3, r2
 8005e6a:	d013      	beq.n	8005e94 <TIM_Base_SetConfig+0x40>
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e72:	d00f      	beq.n	8005e94 <TIM_Base_SetConfig+0x40>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	4a3d      	ldr	r2, [pc, #244]	; (8005f6c <TIM_Base_SetConfig+0x118>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d00b      	beq.n	8005e94 <TIM_Base_SetConfig+0x40>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	4a3c      	ldr	r2, [pc, #240]	; (8005f70 <TIM_Base_SetConfig+0x11c>)
 8005e80:	4293      	cmp	r3, r2
 8005e82:	d007      	beq.n	8005e94 <TIM_Base_SetConfig+0x40>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	4a3b      	ldr	r2, [pc, #236]	; (8005f74 <TIM_Base_SetConfig+0x120>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d003      	beq.n	8005e94 <TIM_Base_SetConfig+0x40>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	4a3a      	ldr	r2, [pc, #232]	; (8005f78 <TIM_Base_SetConfig+0x124>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d108      	bne.n	8005ea6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	68fa      	ldr	r2, [r7, #12]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	4a2f      	ldr	r2, [pc, #188]	; (8005f68 <TIM_Base_SetConfig+0x114>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d01f      	beq.n	8005eee <TIM_Base_SetConfig+0x9a>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005eb4:	d01b      	beq.n	8005eee <TIM_Base_SetConfig+0x9a>
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	4a2c      	ldr	r2, [pc, #176]	; (8005f6c <TIM_Base_SetConfig+0x118>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d017      	beq.n	8005eee <TIM_Base_SetConfig+0x9a>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	4a2b      	ldr	r2, [pc, #172]	; (8005f70 <TIM_Base_SetConfig+0x11c>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d013      	beq.n	8005eee <TIM_Base_SetConfig+0x9a>
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	4a2a      	ldr	r2, [pc, #168]	; (8005f74 <TIM_Base_SetConfig+0x120>)
 8005eca:	4293      	cmp	r3, r2
 8005ecc:	d00f      	beq.n	8005eee <TIM_Base_SetConfig+0x9a>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	4a29      	ldr	r2, [pc, #164]	; (8005f78 <TIM_Base_SetConfig+0x124>)
 8005ed2:	4293      	cmp	r3, r2
 8005ed4:	d00b      	beq.n	8005eee <TIM_Base_SetConfig+0x9a>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4a28      	ldr	r2, [pc, #160]	; (8005f7c <TIM_Base_SetConfig+0x128>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d007      	beq.n	8005eee <TIM_Base_SetConfig+0x9a>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	4a27      	ldr	r2, [pc, #156]	; (8005f80 <TIM_Base_SetConfig+0x12c>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d003      	beq.n	8005eee <TIM_Base_SetConfig+0x9a>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	4a26      	ldr	r2, [pc, #152]	; (8005f84 <TIM_Base_SetConfig+0x130>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d108      	bne.n	8005f00 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	68db      	ldr	r3, [r3, #12]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	4313      	orrs	r3, r2
 8005efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	695b      	ldr	r3, [r3, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	689a      	ldr	r2, [r3, #8]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	4a10      	ldr	r2, [pc, #64]	; (8005f68 <TIM_Base_SetConfig+0x114>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d00f      	beq.n	8005f4c <TIM_Base_SetConfig+0xf8>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4a12      	ldr	r2, [pc, #72]	; (8005f78 <TIM_Base_SetConfig+0x124>)
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d00b      	beq.n	8005f4c <TIM_Base_SetConfig+0xf8>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a11      	ldr	r2, [pc, #68]	; (8005f7c <TIM_Base_SetConfig+0x128>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d007      	beq.n	8005f4c <TIM_Base_SetConfig+0xf8>
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	4a10      	ldr	r2, [pc, #64]	; (8005f80 <TIM_Base_SetConfig+0x12c>)
 8005f40:	4293      	cmp	r3, r2
 8005f42:	d003      	beq.n	8005f4c <TIM_Base_SetConfig+0xf8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	4a0f      	ldr	r2, [pc, #60]	; (8005f84 <TIM_Base_SetConfig+0x130>)
 8005f48:	4293      	cmp	r3, r2
 8005f4a:	d103      	bne.n	8005f54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	615a      	str	r2, [r3, #20]
}
 8005f5a:	bf00      	nop
 8005f5c:	3714      	adds	r7, #20
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr
 8005f66:	bf00      	nop
 8005f68:	40012c00 	.word	0x40012c00
 8005f6c:	40000400 	.word	0x40000400
 8005f70:	40000800 	.word	0x40000800
 8005f74:	40000c00 	.word	0x40000c00
 8005f78:	40013400 	.word	0x40013400
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	40014400 	.word	0x40014400
 8005f84:	40014800 	.word	0x40014800

08005f88 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	60f8      	str	r0, [r7, #12]
 8005f90:	60b9      	str	r1, [r7, #8]
 8005f92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a1b      	ldr	r3, [r3, #32]
 8005f98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f023 0201 	bic.w	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	699b      	ldr	r3, [r3, #24]
 8005faa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005fb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	011b      	lsls	r3, r3, #4
 8005fb8:	693a      	ldr	r2, [r7, #16]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005fbe:	697b      	ldr	r3, [r7, #20]
 8005fc0:	f023 030a 	bic.w	r3, r3, #10
 8005fc4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005fc6:	697a      	ldr	r2, [r7, #20]
 8005fc8:	68bb      	ldr	r3, [r7, #8]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	693a      	ldr	r2, [r7, #16]
 8005fd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	621a      	str	r2, [r3, #32]
}
 8005fda:	bf00      	nop
 8005fdc:	371c      	adds	r7, #28
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	b087      	sub	sp, #28
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	60f8      	str	r0, [r7, #12]
 8005fee:	60b9      	str	r1, [r7, #8]
 8005ff0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a1b      	ldr	r3, [r3, #32]
 8005ff6:	f023 0210 	bic.w	r2, r3, #16
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	699b      	ldr	r3, [r3, #24]
 8006002:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6a1b      	ldr	r3, [r3, #32]
 8006008:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006010:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	031b      	lsls	r3, r3, #12
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	4313      	orrs	r3, r2
 800601a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006022:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	697a      	ldr	r2, [r7, #20]
 8006032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	693a      	ldr	r2, [r7, #16]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006046:	b480      	push	{r7}
 8006048:	b085      	sub	sp, #20
 800604a:	af00      	add	r7, sp, #0
 800604c:	6078      	str	r0, [r7, #4]
 800604e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	689b      	ldr	r3, [r3, #8]
 8006054:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800605c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800605e:	683a      	ldr	r2, [r7, #0]
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	f043 0307 	orr.w	r3, r3, #7
 8006068:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	68fa      	ldr	r2, [r7, #12]
 800606e:	609a      	str	r2, [r3, #8]
}
 8006070:	bf00      	nop
 8006072:	3714      	adds	r7, #20
 8006074:	46bd      	mov	sp, r7
 8006076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607a:	4770      	bx	lr

0800607c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800607c:	b480      	push	{r7}
 800607e:	b087      	sub	sp, #28
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
 8006088:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006090:	697b      	ldr	r3, [r7, #20]
 8006092:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006096:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	021a      	lsls	r2, r3, #8
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	431a      	orrs	r2, r3
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	4313      	orrs	r3, r2
 80060a4:	697a      	ldr	r2, [r7, #20]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	697a      	ldr	r2, [r7, #20]
 80060ae:	609a      	str	r2, [r3, #8]
}
 80060b0:	bf00      	nop
 80060b2:	371c      	adds	r7, #28
 80060b4:	46bd      	mov	sp, r7
 80060b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ba:	4770      	bx	lr

080060bc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060bc:	b480      	push	{r7}
 80060be:	b085      	sub	sp, #20
 80060c0:	af00      	add	r7, sp, #0
 80060c2:	6078      	str	r0, [r7, #4]
 80060c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d101      	bne.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060d0:	2302      	movs	r3, #2
 80060d2:	e068      	b.n	80061a6 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2202      	movs	r2, #2
 80060e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a2e      	ldr	r2, [pc, #184]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d004      	beq.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	4a2d      	ldr	r2, [pc, #180]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d108      	bne.n	800611a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800610e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	68fa      	ldr	r2, [r7, #12]
 8006116:	4313      	orrs	r3, r2
 8006118:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006120:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	68fa      	ldr	r2, [r7, #12]
 8006128:	4313      	orrs	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	68fa      	ldr	r2, [r7, #12]
 8006132:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a1e      	ldr	r2, [pc, #120]	; (80061b4 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d01d      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006146:	d018      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	4a1b      	ldr	r2, [pc, #108]	; (80061bc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d013      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a1a      	ldr	r2, [pc, #104]	; (80061c0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d00e      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a18      	ldr	r2, [pc, #96]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006162:	4293      	cmp	r3, r2
 8006164:	d009      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a13      	ldr	r2, [pc, #76]	; (80061b8 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d004      	beq.n	800617a <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a14      	ldr	r2, [pc, #80]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d10c      	bne.n	8006194 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800617a:	68bb      	ldr	r3, [r7, #8]
 800617c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006180:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	4313      	orrs	r3, r2
 800618a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	68ba      	ldr	r2, [r7, #8]
 8006192:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2200      	movs	r2, #0
 80061a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061a4:	2300      	movs	r3, #0
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3714      	adds	r7, #20
 80061aa:	46bd      	mov	sp, r7
 80061ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b0:	4770      	bx	lr
 80061b2:	bf00      	nop
 80061b4:	40012c00 	.word	0x40012c00
 80061b8:	40013400 	.word	0x40013400
 80061bc:	40000400 	.word	0x40000400
 80061c0:	40000800 	.word	0x40000800
 80061c4:	40000c00 	.word	0x40000c00
 80061c8:	40014000 	.word	0x40014000

080061cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b083      	sub	sp, #12
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061d4:	bf00      	nop
 80061d6:	370c      	adds	r7, #12
 80061d8:	46bd      	mov	sp, r7
 80061da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061de:	4770      	bx	lr

080061e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d101      	bne.n	800621a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e042      	b.n	80062a0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006220:	2b00      	cmp	r3, #0
 8006222:	d106      	bne.n	8006232 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2200      	movs	r2, #0
 8006228:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800622c:	6878      	ldr	r0, [r7, #4]
 800622e:	f004 fc13 	bl	800aa58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2224      	movs	r2, #36	; 0x24
 8006236:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f022 0201 	bic.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fb64 	bl	8006918 <UART_SetConfig>
 8006250:	4603      	mov	r3, r0
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e022      	b.n	80062a0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fe54 	bl	8006f10 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	685a      	ldr	r2, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006276:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	689a      	ldr	r2, [r3, #8]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006286:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0201 	orr.w	r2, r2, #1
 8006296:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f000 fedb 	bl	8007054 <UART_CheckIdleState>
 800629e:	4603      	mov	r3, r0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b0ba      	sub	sp, #232	; 0xe8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80062ce:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80062d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80062d6:	4013      	ands	r3, r2
 80062d8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80062dc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d11b      	bne.n	800631c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80062e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062e8:	f003 0320 	and.w	r3, r3, #32
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d015      	beq.n	800631c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80062f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062f4:	f003 0320 	and.w	r3, r3, #32
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d105      	bne.n	8006308 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80062fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006304:	2b00      	cmp	r3, #0
 8006306:	d009      	beq.n	800631c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800630c:	2b00      	cmp	r3, #0
 800630e:	f000 82d6 	beq.w	80068be <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	4798      	blx	r3
      }
      return;
 800631a:	e2d0      	b.n	80068be <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800631c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006320:	2b00      	cmp	r3, #0
 8006322:	f000 811f 	beq.w	8006564 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006326:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800632a:	4b8b      	ldr	r3, [pc, #556]	; (8006558 <HAL_UART_IRQHandler+0x2b0>)
 800632c:	4013      	ands	r3, r2
 800632e:	2b00      	cmp	r3, #0
 8006330:	d106      	bne.n	8006340 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006332:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006336:	4b89      	ldr	r3, [pc, #548]	; (800655c <HAL_UART_IRQHandler+0x2b4>)
 8006338:	4013      	ands	r3, r2
 800633a:	2b00      	cmp	r3, #0
 800633c:	f000 8112 	beq.w	8006564 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006344:	f003 0301 	and.w	r3, r3, #1
 8006348:	2b00      	cmp	r3, #0
 800634a:	d011      	beq.n	8006370 <HAL_UART_IRQHandler+0xc8>
 800634c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00b      	beq.n	8006370 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2201      	movs	r2, #1
 800635e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006366:	f043 0201 	orr.w	r2, r3, #1
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006370:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006374:	f003 0302 	and.w	r3, r3, #2
 8006378:	2b00      	cmp	r3, #0
 800637a:	d011      	beq.n	80063a0 <HAL_UART_IRQHandler+0xf8>
 800637c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006380:	f003 0301 	and.w	r3, r3, #1
 8006384:	2b00      	cmp	r3, #0
 8006386:	d00b      	beq.n	80063a0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	2202      	movs	r2, #2
 800638e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006396:	f043 0204 	orr.w	r2, r3, #4
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80063a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063a4:	f003 0304 	and.w	r3, r3, #4
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d011      	beq.n	80063d0 <HAL_UART_IRQHandler+0x128>
 80063ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063b0:	f003 0301 	and.w	r3, r3, #1
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d00b      	beq.n	80063d0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	2204      	movs	r2, #4
 80063be:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80063c6:	f043 0202 	orr.w	r2, r3, #2
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80063d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063d4:	f003 0308 	and.w	r3, r3, #8
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d017      	beq.n	800640c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063e0:	f003 0320 	and.w	r3, r3, #32
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d105      	bne.n	80063f4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80063e8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80063ec:	4b5a      	ldr	r3, [pc, #360]	; (8006558 <HAL_UART_IRQHandler+0x2b0>)
 80063ee:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	2208      	movs	r2, #8
 80063fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006402:	f043 0208 	orr.w	r2, r3, #8
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800640c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006410:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006414:	2b00      	cmp	r3, #0
 8006416:	d012      	beq.n	800643e <HAL_UART_IRQHandler+0x196>
 8006418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800641c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006420:	2b00      	cmp	r3, #0
 8006422:	d00c      	beq.n	800643e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800642c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006434:	f043 0220 	orr.w	r2, r3, #32
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 823c 	beq.w	80068c2 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800644a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800644e:	f003 0320 	and.w	r3, r3, #32
 8006452:	2b00      	cmp	r3, #0
 8006454:	d013      	beq.n	800647e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800645a:	f003 0320 	and.w	r3, r3, #32
 800645e:	2b00      	cmp	r3, #0
 8006460:	d105      	bne.n	800646e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006462:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d007      	beq.n	800647e <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006472:	2b00      	cmp	r3, #0
 8006474:	d003      	beq.n	800647e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800647a:	6878      	ldr	r0, [r7, #4]
 800647c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006484:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	689b      	ldr	r3, [r3, #8]
 800648e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006492:	2b40      	cmp	r3, #64	; 0x40
 8006494:	d005      	beq.n	80064a2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006496:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800649a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d04f      	beq.n	8006542 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 fee9 	bl	800727a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b2:	2b40      	cmp	r3, #64	; 0x40
 80064b4:	d141      	bne.n	800653a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3308      	adds	r3, #8
 80064bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80064c4:	e853 3f00 	ldrex	r3, [r3]
 80064c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80064cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80064d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064d4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	3308      	adds	r3, #8
 80064de:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80064e2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80064e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064ea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80064ee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80064f2:	e841 2300 	strex	r3, r2, [r1]
 80064f6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80064fa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d1d9      	bne.n	80064b6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006506:	2b00      	cmp	r3, #0
 8006508:	d013      	beq.n	8006532 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800650e:	4a14      	ldr	r2, [pc, #80]	; (8006560 <HAL_UART_IRQHandler+0x2b8>)
 8006510:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006516:	4618      	mov	r0, r3
 8006518:	f7fb f9e3 	bl	80018e2 <HAL_DMA_Abort_IT>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d017      	beq.n	8006552 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800652c:	4610      	mov	r0, r2
 800652e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006530:	e00f      	b.n	8006552 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f000 f9da 	bl	80068ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006538:	e00b      	b.n	8006552 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f9d6 	bl	80068ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006540:	e007      	b.n	8006552 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006542:	6878      	ldr	r0, [r7, #4]
 8006544:	f000 f9d2 	bl	80068ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006550:	e1b7      	b.n	80068c2 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006552:	bf00      	nop
    return;
 8006554:	e1b5      	b.n	80068c2 <HAL_UART_IRQHandler+0x61a>
 8006556:	bf00      	nop
 8006558:	10000001 	.word	0x10000001
 800655c:	04000120 	.word	0x04000120
 8006560:	08007347 	.word	0x08007347

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006568:	2b01      	cmp	r3, #1
 800656a:	f040 814a 	bne.w	8006802 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800656e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006572:	f003 0310 	and.w	r3, r3, #16
 8006576:	2b00      	cmp	r3, #0
 8006578:	f000 8143 	beq.w	8006802 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800657c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006580:	f003 0310 	and.w	r3, r3, #16
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 813c 	beq.w	8006802 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	2210      	movs	r2, #16
 8006590:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800659c:	2b40      	cmp	r3, #64	; 0x40
 800659e:	f040 80b5 	bne.w	800670c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80065ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	f000 8187 	beq.w	80068c6 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80065be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065c2:	429a      	cmp	r2, r3
 80065c4:	f080 817f 	bcs.w	80068c6 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80065ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f003 0320 	and.w	r3, r3, #32
 80065de:	2b00      	cmp	r3, #0
 80065e0:	f040 8086 	bne.w	80066f0 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80065f0:	e853 3f00 	ldrex	r3, [r3]
 80065f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80065f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006600:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	461a      	mov	r2, r3
 800660a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800660e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006612:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006616:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800661a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006626:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800662a:	2b00      	cmp	r3, #0
 800662c:	d1da      	bne.n	80065e4 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	3308      	adds	r3, #8
 8006634:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006636:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006638:	e853 3f00 	ldrex	r3, [r3]
 800663c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800663e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006640:	f023 0301 	bic.w	r3, r3, #1
 8006644:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	3308      	adds	r3, #8
 800664e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006652:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006656:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006658:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800665a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800665e:	e841 2300 	strex	r3, r2, [r1]
 8006662:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006664:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1e1      	bne.n	800662e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	3308      	adds	r3, #8
 8006670:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006672:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006674:	e853 3f00 	ldrex	r3, [r3]
 8006678:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800667a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800667c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006680:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	3308      	adds	r3, #8
 800668a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800668e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006690:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006692:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006694:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006696:	e841 2300 	strex	r3, r2, [r1]
 800669a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800669c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1e3      	bne.n	800666a <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2220      	movs	r2, #32
 80066a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066b8:	e853 3f00 	ldrex	r3, [r3]
 80066bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80066be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80066c0:	f023 0310 	bic.w	r3, r3, #16
 80066c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	461a      	mov	r2, r3
 80066ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80066d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80066d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80066d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066da:	e841 2300 	strex	r3, r2, [r1]
 80066de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80066e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d1e4      	bne.n	80066b0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ea:	4618      	mov	r0, r3
 80066ec:	f7fb f89d 	bl	800182a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	b29b      	uxth	r3, r3
 8006702:	4619      	mov	r1, r3
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f8fb 	bl	8006900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800670a:	e0dc      	b.n	80068c6 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006718:	b29b      	uxth	r3, r3
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006726:	b29b      	uxth	r3, r3
 8006728:	2b00      	cmp	r3, #0
 800672a:	f000 80ce 	beq.w	80068ca <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800672e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 80c9 	beq.w	80068ca <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800673e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006740:	e853 3f00 	ldrex	r3, [r3]
 8006744:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006748:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800674c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800675a:	647b      	str	r3, [r7, #68]	; 0x44
 800675c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800675e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006762:	e841 2300 	strex	r3, r2, [r1]
 8006766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800676a:	2b00      	cmp	r3, #0
 800676c:	d1e4      	bne.n	8006738 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	3308      	adds	r3, #8
 8006774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006778:	e853 3f00 	ldrex	r3, [r3]
 800677c:	623b      	str	r3, [r7, #32]
   return(result);
 800677e:	6a3b      	ldr	r3, [r7, #32]
 8006780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006784:	f023 0301 	bic.w	r3, r3, #1
 8006788:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	3308      	adds	r3, #8
 8006792:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006796:	633a      	str	r2, [r7, #48]	; 0x30
 8006798:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800679a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800679c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80067a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d1e1      	bne.n	800676e <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2220      	movs	r2, #32
 80067ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2200      	movs	r2, #0
 80067b6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2200      	movs	r2, #0
 80067bc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	e853 3f00 	ldrex	r3, [r3]
 80067ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0310 	bic.w	r3, r3, #16
 80067d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067e0:	61fb      	str	r3, [r7, #28]
 80067e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067e4:	69b9      	ldr	r1, [r7, #24]
 80067e6:	69fa      	ldr	r2, [r7, #28]
 80067e8:	e841 2300 	strex	r3, r2, [r1]
 80067ec:	617b      	str	r3, [r7, #20]
   return(result);
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1e4      	bne.n	80067be <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80067f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80067f8:	4619      	mov	r1, r3
 80067fa:	6878      	ldr	r0, [r7, #4]
 80067fc:	f000 f880 	bl	8006900 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006800:	e063      	b.n	80068ca <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006806:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800680a:	2b00      	cmp	r3, #0
 800680c:	d00e      	beq.n	800682c <HAL_UART_IRQHandler+0x584>
 800680e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006816:	2b00      	cmp	r3, #0
 8006818:	d008      	beq.n	800682c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006822:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fdcf 	bl	80073c8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800682a:	e051      	b.n	80068d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800682c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006834:	2b00      	cmp	r3, #0
 8006836:	d014      	beq.n	8006862 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006838:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800683c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006840:	2b00      	cmp	r3, #0
 8006842:	d105      	bne.n	8006850 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006844:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006848:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d008      	beq.n	8006862 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006854:	2b00      	cmp	r3, #0
 8006856:	d03a      	beq.n	80068ce <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	4798      	blx	r3
    }
    return;
 8006860:	e035      	b.n	80068ce <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800686a:	2b00      	cmp	r3, #0
 800686c:	d009      	beq.n	8006882 <HAL_UART_IRQHandler+0x5da>
 800686e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006872:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006876:	2b00      	cmp	r3, #0
 8006878:	d003      	beq.n	8006882 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 800687a:	6878      	ldr	r0, [r7, #4]
 800687c:	f000 fd79 	bl	8007372 <UART_EndTransmit_IT>
    return;
 8006880:	e026      	b.n	80068d0 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006882:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006886:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800688a:	2b00      	cmp	r3, #0
 800688c:	d009      	beq.n	80068a2 <HAL_UART_IRQHandler+0x5fa>
 800688e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006892:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f000 fda8 	bl	80073f0 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068a0:	e016      	b.n	80068d0 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80068a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d010      	beq.n	80068d0 <HAL_UART_IRQHandler+0x628>
 80068ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	da0c      	bge.n	80068d0 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 fd90 	bl	80073dc <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80068bc:	e008      	b.n	80068d0 <HAL_UART_IRQHandler+0x628>
      return;
 80068be:	bf00      	nop
 80068c0:	e006      	b.n	80068d0 <HAL_UART_IRQHandler+0x628>
    return;
 80068c2:	bf00      	nop
 80068c4:	e004      	b.n	80068d0 <HAL_UART_IRQHandler+0x628>
      return;
 80068c6:	bf00      	nop
 80068c8:	e002      	b.n	80068d0 <HAL_UART_IRQHandler+0x628>
      return;
 80068ca:	bf00      	nop
 80068cc:	e000      	b.n	80068d0 <HAL_UART_IRQHandler+0x628>
    return;
 80068ce:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 80068d0:	37e8      	adds	r7, #232	; 0xe8
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop

080068d8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80068d8:	b480      	push	{r7}
 80068da:	b083      	sub	sp, #12
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80068e0:	bf00      	nop
 80068e2:	370c      	adds	r7, #12
 80068e4:	46bd      	mov	sp, r7
 80068e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ea:	4770      	bx	lr

080068ec <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b083      	sub	sp, #12
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr

08006900 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
 8006906:	6078      	str	r0, [r7, #4]
 8006908:	460b      	mov	r3, r1
 800690a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800690c:	bf00      	nop
 800690e:	370c      	adds	r7, #12
 8006910:	46bd      	mov	sp, r7
 8006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006916:	4770      	bx	lr

08006918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006918:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800691c:	b08c      	sub	sp, #48	; 0x30
 800691e:	af00      	add	r7, sp, #0
 8006920:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006922:	2300      	movs	r3, #0
 8006924:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	689a      	ldr	r2, [r3, #8]
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	691b      	ldr	r3, [r3, #16]
 8006930:	431a      	orrs	r2, r3
 8006932:	697b      	ldr	r3, [r7, #20]
 8006934:	695b      	ldr	r3, [r3, #20]
 8006936:	431a      	orrs	r2, r3
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	4313      	orrs	r3, r2
 800693e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	4baa      	ldr	r3, [pc, #680]	; (8006bf0 <UART_SetConfig+0x2d8>)
 8006948:	4013      	ands	r3, r2
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	6812      	ldr	r2, [r2, #0]
 800694e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006950:	430b      	orrs	r3, r1
 8006952:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	68da      	ldr	r2, [r3, #12]
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	699b      	ldr	r3, [r3, #24]
 800696e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a9f      	ldr	r2, [pc, #636]	; (8006bf4 <UART_SetConfig+0x2dc>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d004      	beq.n	8006984 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800697a:	697b      	ldr	r3, [r7, #20]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006980:	4313      	orrs	r3, r2
 8006982:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006984:	697b      	ldr	r3, [r7, #20]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800698e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006992:	697a      	ldr	r2, [r7, #20]
 8006994:	6812      	ldr	r2, [r2, #0]
 8006996:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006998:	430b      	orrs	r3, r1
 800699a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800699c:	697b      	ldr	r3, [r7, #20]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a2:	f023 010f 	bic.w	r1, r3, #15
 80069a6:	697b      	ldr	r3, [r7, #20]
 80069a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	430a      	orrs	r2, r1
 80069b0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	4a90      	ldr	r2, [pc, #576]	; (8006bf8 <UART_SetConfig+0x2e0>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d125      	bne.n	8006a08 <UART_SetConfig+0xf0>
 80069bc:	4b8f      	ldr	r3, [pc, #572]	; (8006bfc <UART_SetConfig+0x2e4>)
 80069be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069c2:	f003 0303 	and.w	r3, r3, #3
 80069c6:	2b03      	cmp	r3, #3
 80069c8:	d81a      	bhi.n	8006a00 <UART_SetConfig+0xe8>
 80069ca:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <UART_SetConfig+0xb8>)
 80069cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069d0:	080069e1 	.word	0x080069e1
 80069d4:	080069f1 	.word	0x080069f1
 80069d8:	080069e9 	.word	0x080069e9
 80069dc:	080069f9 	.word	0x080069f9
 80069e0:	2301      	movs	r3, #1
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069e6:	e116      	b.n	8006c16 <UART_SetConfig+0x2fe>
 80069e8:	2302      	movs	r3, #2
 80069ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069ee:	e112      	b.n	8006c16 <UART_SetConfig+0x2fe>
 80069f0:	2304      	movs	r3, #4
 80069f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069f6:	e10e      	b.n	8006c16 <UART_SetConfig+0x2fe>
 80069f8:	2308      	movs	r3, #8
 80069fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80069fe:	e10a      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006a00:	2310      	movs	r3, #16
 8006a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a06:	e106      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006a08:	697b      	ldr	r3, [r7, #20]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4a7c      	ldr	r2, [pc, #496]	; (8006c00 <UART_SetConfig+0x2e8>)
 8006a0e:	4293      	cmp	r3, r2
 8006a10:	d138      	bne.n	8006a84 <UART_SetConfig+0x16c>
 8006a12:	4b7a      	ldr	r3, [pc, #488]	; (8006bfc <UART_SetConfig+0x2e4>)
 8006a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a18:	f003 030c 	and.w	r3, r3, #12
 8006a1c:	2b0c      	cmp	r3, #12
 8006a1e:	d82d      	bhi.n	8006a7c <UART_SetConfig+0x164>
 8006a20:	a201      	add	r2, pc, #4	; (adr r2, 8006a28 <UART_SetConfig+0x110>)
 8006a22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a26:	bf00      	nop
 8006a28:	08006a5d 	.word	0x08006a5d
 8006a2c:	08006a7d 	.word	0x08006a7d
 8006a30:	08006a7d 	.word	0x08006a7d
 8006a34:	08006a7d 	.word	0x08006a7d
 8006a38:	08006a6d 	.word	0x08006a6d
 8006a3c:	08006a7d 	.word	0x08006a7d
 8006a40:	08006a7d 	.word	0x08006a7d
 8006a44:	08006a7d 	.word	0x08006a7d
 8006a48:	08006a65 	.word	0x08006a65
 8006a4c:	08006a7d 	.word	0x08006a7d
 8006a50:	08006a7d 	.word	0x08006a7d
 8006a54:	08006a7d 	.word	0x08006a7d
 8006a58:	08006a75 	.word	0x08006a75
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a62:	e0d8      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006a64:	2302      	movs	r3, #2
 8006a66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a6a:	e0d4      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006a6c:	2304      	movs	r3, #4
 8006a6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a72:	e0d0      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006a74:	2308      	movs	r3, #8
 8006a76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a7a:	e0cc      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006a7c:	2310      	movs	r3, #16
 8006a7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006a82:	e0c8      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a5e      	ldr	r2, [pc, #376]	; (8006c04 <UART_SetConfig+0x2ec>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d125      	bne.n	8006ada <UART_SetConfig+0x1c2>
 8006a8e:	4b5b      	ldr	r3, [pc, #364]	; (8006bfc <UART_SetConfig+0x2e4>)
 8006a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a94:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006a98:	2b30      	cmp	r3, #48	; 0x30
 8006a9a:	d016      	beq.n	8006aca <UART_SetConfig+0x1b2>
 8006a9c:	2b30      	cmp	r3, #48	; 0x30
 8006a9e:	d818      	bhi.n	8006ad2 <UART_SetConfig+0x1ba>
 8006aa0:	2b20      	cmp	r3, #32
 8006aa2:	d00a      	beq.n	8006aba <UART_SetConfig+0x1a2>
 8006aa4:	2b20      	cmp	r3, #32
 8006aa6:	d814      	bhi.n	8006ad2 <UART_SetConfig+0x1ba>
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d002      	beq.n	8006ab2 <UART_SetConfig+0x19a>
 8006aac:	2b10      	cmp	r3, #16
 8006aae:	d008      	beq.n	8006ac2 <UART_SetConfig+0x1aa>
 8006ab0:	e00f      	b.n	8006ad2 <UART_SetConfig+0x1ba>
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ab8:	e0ad      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006aba:	2302      	movs	r3, #2
 8006abc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ac0:	e0a9      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006ac2:	2304      	movs	r3, #4
 8006ac4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ac8:	e0a5      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006aca:	2308      	movs	r3, #8
 8006acc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ad0:	e0a1      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006ad2:	2310      	movs	r3, #16
 8006ad4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ad8:	e09d      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a4a      	ldr	r2, [pc, #296]	; (8006c08 <UART_SetConfig+0x2f0>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d125      	bne.n	8006b30 <UART_SetConfig+0x218>
 8006ae4:	4b45      	ldr	r3, [pc, #276]	; (8006bfc <UART_SetConfig+0x2e4>)
 8006ae6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006aea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006aee:	2bc0      	cmp	r3, #192	; 0xc0
 8006af0:	d016      	beq.n	8006b20 <UART_SetConfig+0x208>
 8006af2:	2bc0      	cmp	r3, #192	; 0xc0
 8006af4:	d818      	bhi.n	8006b28 <UART_SetConfig+0x210>
 8006af6:	2b80      	cmp	r3, #128	; 0x80
 8006af8:	d00a      	beq.n	8006b10 <UART_SetConfig+0x1f8>
 8006afa:	2b80      	cmp	r3, #128	; 0x80
 8006afc:	d814      	bhi.n	8006b28 <UART_SetConfig+0x210>
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <UART_SetConfig+0x1f0>
 8006b02:	2b40      	cmp	r3, #64	; 0x40
 8006b04:	d008      	beq.n	8006b18 <UART_SetConfig+0x200>
 8006b06:	e00f      	b.n	8006b28 <UART_SetConfig+0x210>
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b0e:	e082      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b10:	2302      	movs	r3, #2
 8006b12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b16:	e07e      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b18:	2304      	movs	r3, #4
 8006b1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b1e:	e07a      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b20:	2308      	movs	r3, #8
 8006b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b26:	e076      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b28:	2310      	movs	r3, #16
 8006b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b2e:	e072      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a35      	ldr	r2, [pc, #212]	; (8006c0c <UART_SetConfig+0x2f4>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d12a      	bne.n	8006b90 <UART_SetConfig+0x278>
 8006b3a:	4b30      	ldr	r3, [pc, #192]	; (8006bfc <UART_SetConfig+0x2e4>)
 8006b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b44:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b48:	d01a      	beq.n	8006b80 <UART_SetConfig+0x268>
 8006b4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b4e:	d81b      	bhi.n	8006b88 <UART_SetConfig+0x270>
 8006b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b54:	d00c      	beq.n	8006b70 <UART_SetConfig+0x258>
 8006b56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b5a:	d815      	bhi.n	8006b88 <UART_SetConfig+0x270>
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d003      	beq.n	8006b68 <UART_SetConfig+0x250>
 8006b60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006b64:	d008      	beq.n	8006b78 <UART_SetConfig+0x260>
 8006b66:	e00f      	b.n	8006b88 <UART_SetConfig+0x270>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b6e:	e052      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b70:	2302      	movs	r3, #2
 8006b72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b76:	e04e      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b78:	2304      	movs	r3, #4
 8006b7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b7e:	e04a      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b80:	2308      	movs	r3, #8
 8006b82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b86:	e046      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b88:	2310      	movs	r3, #16
 8006b8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b8e:	e042      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a17      	ldr	r2, [pc, #92]	; (8006bf4 <UART_SetConfig+0x2dc>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d13a      	bne.n	8006c10 <UART_SetConfig+0x2f8>
 8006b9a:	4b18      	ldr	r3, [pc, #96]	; (8006bfc <UART_SetConfig+0x2e4>)
 8006b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ba0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ba4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ba8:	d01a      	beq.n	8006be0 <UART_SetConfig+0x2c8>
 8006baa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006bae:	d81b      	bhi.n	8006be8 <UART_SetConfig+0x2d0>
 8006bb0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bb4:	d00c      	beq.n	8006bd0 <UART_SetConfig+0x2b8>
 8006bb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006bba:	d815      	bhi.n	8006be8 <UART_SetConfig+0x2d0>
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d003      	beq.n	8006bc8 <UART_SetConfig+0x2b0>
 8006bc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006bc4:	d008      	beq.n	8006bd8 <UART_SetConfig+0x2c0>
 8006bc6:	e00f      	b.n	8006be8 <UART_SetConfig+0x2d0>
 8006bc8:	2300      	movs	r3, #0
 8006bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bce:	e022      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006bd0:	2302      	movs	r3, #2
 8006bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bd6:	e01e      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006bd8:	2304      	movs	r3, #4
 8006bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bde:	e01a      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006be0:	2308      	movs	r3, #8
 8006be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006be6:	e016      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006be8:	2310      	movs	r3, #16
 8006bea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006bee:	e012      	b.n	8006c16 <UART_SetConfig+0x2fe>
 8006bf0:	cfff69f3 	.word	0xcfff69f3
 8006bf4:	40008000 	.word	0x40008000
 8006bf8:	40013800 	.word	0x40013800
 8006bfc:	40021000 	.word	0x40021000
 8006c00:	40004400 	.word	0x40004400
 8006c04:	40004800 	.word	0x40004800
 8006c08:	40004c00 	.word	0x40004c00
 8006c0c:	40005000 	.word	0x40005000
 8006c10:	2310      	movs	r3, #16
 8006c12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	4aae      	ldr	r2, [pc, #696]	; (8006ed4 <UART_SetConfig+0x5bc>)
 8006c1c:	4293      	cmp	r3, r2
 8006c1e:	f040 8097 	bne.w	8006d50 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006c22:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006c26:	2b08      	cmp	r3, #8
 8006c28:	d823      	bhi.n	8006c72 <UART_SetConfig+0x35a>
 8006c2a:	a201      	add	r2, pc, #4	; (adr r2, 8006c30 <UART_SetConfig+0x318>)
 8006c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c30:	08006c55 	.word	0x08006c55
 8006c34:	08006c73 	.word	0x08006c73
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c73 	.word	0x08006c73
 8006c40:	08006c63 	.word	0x08006c63
 8006c44:	08006c73 	.word	0x08006c73
 8006c48:	08006c73 	.word	0x08006c73
 8006c4c:	08006c73 	.word	0x08006c73
 8006c50:	08006c6b 	.word	0x08006c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006c54:	f7fe f818 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 8006c58:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c5a:	e010      	b.n	8006c7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006c5c:	4b9e      	ldr	r3, [pc, #632]	; (8006ed8 <UART_SetConfig+0x5c0>)
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c60:	e00d      	b.n	8006c7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006c62:	f7fd ff79 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8006c66:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006c68:	e009      	b.n	8006c7e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006c6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006c70:	e005      	b.n	8006c7e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006c72:	2300      	movs	r3, #0
 8006c74:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006c7c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	f000 8130 	beq.w	8006ee6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006c86:	697b      	ldr	r3, [r7, #20]
 8006c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c8a:	4a94      	ldr	r2, [pc, #592]	; (8006edc <UART_SetConfig+0x5c4>)
 8006c8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c90:	461a      	mov	r2, r3
 8006c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c94:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c98:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	4613      	mov	r3, r2
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	4413      	add	r3, r2
 8006ca4:	69ba      	ldr	r2, [r7, #24]
 8006ca6:	429a      	cmp	r2, r3
 8006ca8:	d305      	bcc.n	8006cb6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	685b      	ldr	r3, [r3, #4]
 8006cae:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006cb0:	69ba      	ldr	r2, [r7, #24]
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d903      	bls.n	8006cbe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006cbc:	e113      	b.n	8006ee6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	60bb      	str	r3, [r7, #8]
 8006cc4:	60fa      	str	r2, [r7, #12]
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cca:	4a84      	ldr	r2, [pc, #528]	; (8006edc <UART_SetConfig+0x5c4>)
 8006ccc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	603b      	str	r3, [r7, #0]
 8006cd6:	607a      	str	r2, [r7, #4]
 8006cd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006cdc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006ce0:	f7f9 fa8e 	bl	8000200 <__aeabi_uldivmod>
 8006ce4:	4602      	mov	r2, r0
 8006ce6:	460b      	mov	r3, r1
 8006ce8:	4610      	mov	r0, r2
 8006cea:	4619      	mov	r1, r3
 8006cec:	f04f 0200 	mov.w	r2, #0
 8006cf0:	f04f 0300 	mov.w	r3, #0
 8006cf4:	020b      	lsls	r3, r1, #8
 8006cf6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006cfa:	0202      	lsls	r2, r0, #8
 8006cfc:	6979      	ldr	r1, [r7, #20]
 8006cfe:	6849      	ldr	r1, [r1, #4]
 8006d00:	0849      	lsrs	r1, r1, #1
 8006d02:	2000      	movs	r0, #0
 8006d04:	460c      	mov	r4, r1
 8006d06:	4605      	mov	r5, r0
 8006d08:	eb12 0804 	adds.w	r8, r2, r4
 8006d0c:	eb43 0905 	adc.w	r9, r3, r5
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	2200      	movs	r2, #0
 8006d16:	469a      	mov	sl, r3
 8006d18:	4693      	mov	fp, r2
 8006d1a:	4652      	mov	r2, sl
 8006d1c:	465b      	mov	r3, fp
 8006d1e:	4640      	mov	r0, r8
 8006d20:	4649      	mov	r1, r9
 8006d22:	f7f9 fa6d 	bl	8000200 <__aeabi_uldivmod>
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006d2e:	6a3b      	ldr	r3, [r7, #32]
 8006d30:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d34:	d308      	bcc.n	8006d48 <UART_SetConfig+0x430>
 8006d36:	6a3b      	ldr	r3, [r7, #32]
 8006d38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d3c:	d204      	bcs.n	8006d48 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	6a3a      	ldr	r2, [r7, #32]
 8006d44:	60da      	str	r2, [r3, #12]
 8006d46:	e0ce      	b.n	8006ee6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006d4e:	e0ca      	b.n	8006ee6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	69db      	ldr	r3, [r3, #28]
 8006d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d58:	d166      	bne.n	8006e28 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006d5a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006d5e:	2b08      	cmp	r3, #8
 8006d60:	d827      	bhi.n	8006db2 <UART_SetConfig+0x49a>
 8006d62:	a201      	add	r2, pc, #4	; (adr r2, 8006d68 <UART_SetConfig+0x450>)
 8006d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d68:	08006d8d 	.word	0x08006d8d
 8006d6c:	08006d95 	.word	0x08006d95
 8006d70:	08006d9d 	.word	0x08006d9d
 8006d74:	08006db3 	.word	0x08006db3
 8006d78:	08006da3 	.word	0x08006da3
 8006d7c:	08006db3 	.word	0x08006db3
 8006d80:	08006db3 	.word	0x08006db3
 8006d84:	08006db3 	.word	0x08006db3
 8006d88:	08006dab 	.word	0x08006dab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006d8c:	f7fd ff7c 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 8006d90:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d92:	e014      	b.n	8006dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006d94:	f7fd ff8e 	bl	8004cb4 <HAL_RCC_GetPCLK2Freq>
 8006d98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006d9a:	e010      	b.n	8006dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006d9c:	4b4e      	ldr	r3, [pc, #312]	; (8006ed8 <UART_SetConfig+0x5c0>)
 8006d9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006da0:	e00d      	b.n	8006dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006da2:	f7fd fed9 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8006da6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006da8:	e009      	b.n	8006dbe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006daa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006dae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006db0:	e005      	b.n	8006dbe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8006db2:	2300      	movs	r3, #0
 8006db4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006db6:	2301      	movs	r3, #1
 8006db8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006dbc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	f000 8090 	beq.w	8006ee6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dca:	4a44      	ldr	r2, [pc, #272]	; (8006edc <UART_SetConfig+0x5c4>)
 8006dcc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006dd0:	461a      	mov	r2, r3
 8006dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd4:	fbb3 f3f2 	udiv	r3, r3, r2
 8006dd8:	005a      	lsls	r2, r3, #1
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	085b      	lsrs	r3, r3, #1
 8006de0:	441a      	add	r2, r3
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	2b0f      	cmp	r3, #15
 8006df0:	d916      	bls.n	8006e20 <UART_SetConfig+0x508>
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006df8:	d212      	bcs.n	8006e20 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006dfa:	6a3b      	ldr	r3, [r7, #32]
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	f023 030f 	bic.w	r3, r3, #15
 8006e02:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006e04:	6a3b      	ldr	r3, [r7, #32]
 8006e06:	085b      	lsrs	r3, r3, #1
 8006e08:	b29b      	uxth	r3, r3
 8006e0a:	f003 0307 	and.w	r3, r3, #7
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	8bfb      	ldrh	r3, [r7, #30]
 8006e12:	4313      	orrs	r3, r2
 8006e14:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	8bfa      	ldrh	r2, [r7, #30]
 8006e1c:	60da      	str	r2, [r3, #12]
 8006e1e:	e062      	b.n	8006ee6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006e20:	2301      	movs	r3, #1
 8006e22:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006e26:	e05e      	b.n	8006ee6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006e28:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006e2c:	2b08      	cmp	r3, #8
 8006e2e:	d828      	bhi.n	8006e82 <UART_SetConfig+0x56a>
 8006e30:	a201      	add	r2, pc, #4	; (adr r2, 8006e38 <UART_SetConfig+0x520>)
 8006e32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e36:	bf00      	nop
 8006e38:	08006e5d 	.word	0x08006e5d
 8006e3c:	08006e65 	.word	0x08006e65
 8006e40:	08006e6d 	.word	0x08006e6d
 8006e44:	08006e83 	.word	0x08006e83
 8006e48:	08006e73 	.word	0x08006e73
 8006e4c:	08006e83 	.word	0x08006e83
 8006e50:	08006e83 	.word	0x08006e83
 8006e54:	08006e83 	.word	0x08006e83
 8006e58:	08006e7b 	.word	0x08006e7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006e5c:	f7fd ff14 	bl	8004c88 <HAL_RCC_GetPCLK1Freq>
 8006e60:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e62:	e014      	b.n	8006e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e64:	f7fd ff26 	bl	8004cb4 <HAL_RCC_GetPCLK2Freq>
 8006e68:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e6a:	e010      	b.n	8006e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006e6c:	4b1a      	ldr	r3, [pc, #104]	; (8006ed8 <UART_SetConfig+0x5c0>)
 8006e6e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e70:	e00d      	b.n	8006e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006e72:	f7fd fe71 	bl	8004b58 <HAL_RCC_GetSysClockFreq>
 8006e76:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006e78:	e009      	b.n	8006e8e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006e7e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006e80:	e005      	b.n	8006e8e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006e82:	2300      	movs	r3, #0
 8006e84:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006e86:	2301      	movs	r3, #1
 8006e88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006e8c:	bf00      	nop
    }

    if (pclk != 0U)
 8006e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d028      	beq.n	8006ee6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e98:	4a10      	ldr	r2, [pc, #64]	; (8006edc <UART_SetConfig+0x5c4>)
 8006e9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	fbb3 f2f2 	udiv	r2, r3, r2
 8006ea6:	697b      	ldr	r3, [r7, #20]
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	085b      	lsrs	r3, r3, #1
 8006eac:	441a      	add	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eb6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb8:	6a3b      	ldr	r3, [r7, #32]
 8006eba:	2b0f      	cmp	r3, #15
 8006ebc:	d910      	bls.n	8006ee0 <UART_SetConfig+0x5c8>
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ec4:	d20c      	bcs.n	8006ee0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ec6:	6a3b      	ldr	r3, [r7, #32]
 8006ec8:	b29a      	uxth	r2, r3
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	60da      	str	r2, [r3, #12]
 8006ed0:	e009      	b.n	8006ee6 <UART_SetConfig+0x5ce>
 8006ed2:	bf00      	nop
 8006ed4:	40008000 	.word	0x40008000
 8006ed8:	00f42400 	.word	0x00f42400
 8006edc:	0800ae18 	.word	0x0800ae18
      }
      else
      {
        ret = HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	2201      	movs	r2, #1
 8006eea:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	2200      	movs	r2, #0
 8006f00:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006f02:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006f06:	4618      	mov	r0, r3
 8006f08:	3730      	adds	r7, #48	; 0x30
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006f10 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b083      	sub	sp, #12
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f1c:	f003 0301 	and.w	r3, r3, #1
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00a      	beq.n	8006f3a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	685b      	ldr	r3, [r3, #4]
 8006f2a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	430a      	orrs	r2, r1
 8006f38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00a      	beq.n	8006f5c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d00a      	beq.n	8006f7e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f82:	f003 0308 	and.w	r3, r3, #8
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d00a      	beq.n	8006fa0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	430a      	orrs	r2, r1
 8006f9e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d00a      	beq.n	8006fc2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	430a      	orrs	r2, r1
 8006fc0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc6:	f003 0320 	and.w	r3, r3, #32
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00a      	beq.n	8006fe4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	430a      	orrs	r2, r1
 8006fe2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d01a      	beq.n	8007026 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	430a      	orrs	r2, r1
 8007004:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800700e:	d10a      	bne.n	8007026 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800702a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00a      	beq.n	8007048 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	685b      	ldr	r3, [r3, #4]
 8007038:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	430a      	orrs	r2, r1
 8007046:	605a      	str	r2, [r3, #4]
  }
}
 8007048:	bf00      	nop
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007052:	4770      	bx	lr

08007054 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b086      	sub	sp, #24
 8007058:	af02      	add	r7, sp, #8
 800705a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007064:	f7f9 fab6 	bl	80005d4 <HAL_GetTick>
 8007068:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b08      	cmp	r3, #8
 8007076:	d10e      	bne.n	8007096 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007078:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800707c:	9300      	str	r3, [sp, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f000 f82f 	bl	80070ea <UART_WaitOnFlagUntilTimeout>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e025      	b.n	80070e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b04      	cmp	r3, #4
 80070a2:	d10e      	bne.n	80070c2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80070a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80070a8:	9300      	str	r3, [sp, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f819 	bl	80070ea <UART_WaitOnFlagUntilTimeout>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d001      	beq.n	80070c2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80070be:	2303      	movs	r3, #3
 80070c0:	e00f      	b.n	80070e2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2220      	movs	r2, #32
 80070c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2200      	movs	r2, #0
 80070d6:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80070e0:	2300      	movs	r3, #0
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b09c      	sub	sp, #112	; 0x70
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	60f8      	str	r0, [r7, #12]
 80070f2:	60b9      	str	r1, [r7, #8]
 80070f4:	603b      	str	r3, [r7, #0]
 80070f6:	4613      	mov	r3, r2
 80070f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80070fa:	e0a9      	b.n	8007250 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007102:	f000 80a5 	beq.w	8007250 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007106:	f7f9 fa65 	bl	80005d4 <HAL_GetTick>
 800710a:	4602      	mov	r2, r0
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	1ad3      	subs	r3, r2, r3
 8007110:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007112:	429a      	cmp	r2, r3
 8007114:	d302      	bcc.n	800711c <UART_WaitOnFlagUntilTimeout+0x32>
 8007116:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007118:	2b00      	cmp	r3, #0
 800711a:	d140      	bne.n	800719e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007124:	e853 3f00 	ldrex	r3, [r3]
 8007128:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800712a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800712c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007130:	667b      	str	r3, [r7, #100]	; 0x64
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	461a      	mov	r2, r3
 8007138:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800713a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800713c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800713e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007140:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007142:	e841 2300 	strex	r3, r2, [r1]
 8007146:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007148:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1e6      	bne.n	800711c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	3308      	adds	r3, #8
 8007154:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800715e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007160:	f023 0301 	bic.w	r3, r3, #1
 8007164:	663b      	str	r3, [r7, #96]	; 0x60
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	3308      	adds	r3, #8
 800716c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800716e:	64ba      	str	r2, [r7, #72]	; 0x48
 8007170:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800717c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e5      	bne.n	800714e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2220      	movs	r2, #32
 8007186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2220      	movs	r2, #32
 800718e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e069      	b.n	8007272 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f003 0304 	and.w	r3, r3, #4
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d051      	beq.n	8007250 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	69db      	ldr	r3, [r3, #28]
 80071b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80071b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80071ba:	d149      	bne.n	8007250 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80071c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ce:	e853 3f00 	ldrex	r3, [r3]
 80071d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80071da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	461a      	mov	r2, r3
 80071e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80071e4:	637b      	str	r3, [r7, #52]	; 0x34
 80071e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80071ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80071ec:	e841 2300 	strex	r3, r2, [r1]
 80071f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d1e6      	bne.n	80071c6 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	3308      	adds	r3, #8
 80071fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007200:	697b      	ldr	r3, [r7, #20]
 8007202:	e853 3f00 	ldrex	r3, [r3]
 8007206:	613b      	str	r3, [r7, #16]
   return(result);
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	f023 0301 	bic.w	r3, r3, #1
 800720e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	3308      	adds	r3, #8
 8007216:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007218:	623a      	str	r2, [r7, #32]
 800721a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800721c:	69f9      	ldr	r1, [r7, #28]
 800721e:	6a3a      	ldr	r2, [r7, #32]
 8007220:	e841 2300 	strex	r3, r2, [r1]
 8007224:	61bb      	str	r3, [r7, #24]
   return(result);
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d1e5      	bne.n	80071f8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2220      	movs	r2, #32
 8007230:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2220      	movs	r2, #32
 8007238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2220      	movs	r2, #32
 8007240:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800724c:	2303      	movs	r3, #3
 800724e:	e010      	b.n	8007272 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	69da      	ldr	r2, [r3, #28]
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	4013      	ands	r3, r2
 800725a:	68ba      	ldr	r2, [r7, #8]
 800725c:	429a      	cmp	r2, r3
 800725e:	bf0c      	ite	eq
 8007260:	2301      	moveq	r3, #1
 8007262:	2300      	movne	r3, #0
 8007264:	b2db      	uxtb	r3, r3
 8007266:	461a      	mov	r2, r3
 8007268:	79fb      	ldrb	r3, [r7, #7]
 800726a:	429a      	cmp	r2, r3
 800726c:	f43f af46 	beq.w	80070fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007270:	2300      	movs	r3, #0
}
 8007272:	4618      	mov	r0, r3
 8007274:	3770      	adds	r7, #112	; 0x70
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800727a:	b480      	push	{r7}
 800727c:	b095      	sub	sp, #84	; 0x54
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007288:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800728a:	e853 3f00 	ldrex	r3, [r3]
 800728e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007292:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007296:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	461a      	mov	r2, r3
 800729e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80072a0:	643b      	str	r3, [r7, #64]	; 0x40
 80072a2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072a4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80072a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80072a8:	e841 2300 	strex	r3, r2, [r1]
 80072ac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80072ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d1e6      	bne.n	8007282 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	3308      	adds	r3, #8
 80072ba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072bc:	6a3b      	ldr	r3, [r7, #32]
 80072be:	e853 3f00 	ldrex	r3, [r3]
 80072c2:	61fb      	str	r3, [r7, #28]
   return(result);
 80072c4:	69fb      	ldr	r3, [r7, #28]
 80072c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80072ca:	f023 0301 	bic.w	r3, r3, #1
 80072ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	3308      	adds	r3, #8
 80072d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80072d8:	62fa      	str	r2, [r7, #44]	; 0x2c
 80072da:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072dc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80072de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80072e0:	e841 2300 	strex	r3, r2, [r1]
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1e3      	bne.n	80072b4 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072f0:	2b01      	cmp	r3, #1
 80072f2:	d118      	bne.n	8007326 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	60bb      	str	r3, [r7, #8]
   return(result);
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	f023 0310 	bic.w	r3, r3, #16
 8007308:	647b      	str	r3, [r7, #68]	; 0x44
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007312:	61bb      	str	r3, [r7, #24]
 8007314:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	6979      	ldr	r1, [r7, #20]
 8007318:	69ba      	ldr	r2, [r7, #24]
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	613b      	str	r3, [r7, #16]
   return(result);
 8007320:	693b      	ldr	r3, [r7, #16]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e6      	bne.n	80072f4 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2220      	movs	r2, #32
 800732a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2200      	movs	r2, #0
 8007338:	671a      	str	r2, [r3, #112]	; 0x70
}
 800733a:	bf00      	nop
 800733c:	3754      	adds	r7, #84	; 0x54
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr

08007346 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007352:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	2200      	movs	r2, #0
 8007360:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007364:	68f8      	ldr	r0, [r7, #12]
 8007366:	f7ff fac1 	bl	80068ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800736a:	bf00      	nop
 800736c:	3710      	adds	r7, #16
 800736e:	46bd      	mov	sp, r7
 8007370:	bd80      	pop	{r7, pc}

08007372 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007372:	b580      	push	{r7, lr}
 8007374:	b088      	sub	sp, #32
 8007376:	af00      	add	r7, sp, #0
 8007378:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	e853 3f00 	ldrex	r3, [r3]
 8007386:	60bb      	str	r3, [r7, #8]
   return(result);
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800738e:	61fb      	str	r3, [r7, #28]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	461a      	mov	r2, r3
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	61bb      	str	r3, [r7, #24]
 800739a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800739c:	6979      	ldr	r1, [r7, #20]
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	e841 2300 	strex	r3, r2, [r1]
 80073a4:	613b      	str	r3, [r7, #16]
   return(result);
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d1e6      	bne.n	800737a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	2220      	movs	r2, #32
 80073b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f7ff fa8c 	bl	80068d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073c0:	bf00      	nop
 80073c2:	3720      	adds	r7, #32
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80073c8:	b480      	push	{r7}
 80073ca:	b083      	sub	sp, #12
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80073d0:	bf00      	nop
 80073d2:	370c      	adds	r7, #12
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80073e4:	bf00      	nop
 80073e6:	370c      	adds	r7, #12
 80073e8:	46bd      	mov	sp, r7
 80073ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ee:	4770      	bx	lr

080073f0 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80073f0:	b480      	push	{r7}
 80073f2:	b083      	sub	sp, #12
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80073f8:	bf00      	nop
 80073fa:	370c      	adds	r7, #12
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007412:	2b01      	cmp	r3, #1
 8007414:	d101      	bne.n	800741a <HAL_UARTEx_DisableFifoMode+0x16>
 8007416:	2302      	movs	r3, #2
 8007418:	e027      	b.n	800746a <HAL_UARTEx_DisableFifoMode+0x66>
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2201      	movs	r2, #1
 800741e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2224      	movs	r2, #36	; 0x24
 8007426:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	681a      	ldr	r2, [r3, #0]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 0201 	bic.w	r2, r2, #1
 8007440:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007448:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2220      	movs	r2, #32
 800745c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007468:	2300      	movs	r3, #0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr

08007476 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007476:	b580      	push	{r7, lr}
 8007478:	b084      	sub	sp, #16
 800747a:	af00      	add	r7, sp, #0
 800747c:	6078      	str	r0, [r7, #4]
 800747e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007486:	2b01      	cmp	r3, #1
 8007488:	d101      	bne.n	800748e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800748a:	2302      	movs	r3, #2
 800748c:	e02d      	b.n	80074ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2224      	movs	r2, #36	; 0x24
 800749a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	681a      	ldr	r2, [r3, #0]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f022 0201 	bic.w	r2, r2, #1
 80074b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	689b      	ldr	r3, [r3, #8]
 80074bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	683a      	ldr	r2, [r7, #0]
 80074c6:	430a      	orrs	r2, r1
 80074c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 f850 	bl	8007570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2220      	movs	r2, #32
 80074dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	2200      	movs	r2, #0
 80074e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074e8:	2300      	movs	r3, #0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3710      	adds	r7, #16
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80074f2:	b580      	push	{r7, lr}
 80074f4:	b084      	sub	sp, #16
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	6078      	str	r0, [r7, #4]
 80074fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007506:	2302      	movs	r3, #2
 8007508:	e02d      	b.n	8007566 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	2224      	movs	r2, #36	; 0x24
 8007516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0201 	bic.w	r2, r2, #1
 8007530:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	683a      	ldr	r2, [r7, #0]
 8007542:	430a      	orrs	r2, r1
 8007544:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007546:	6878      	ldr	r0, [r7, #4]
 8007548:	f000 f812 	bl	8007570 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2220      	movs	r2, #32
 8007558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3710      	adds	r7, #16
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007570:	b480      	push	{r7}
 8007572:	b085      	sub	sp, #20
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800757c:	2b00      	cmp	r3, #0
 800757e:	d108      	bne.n	8007592 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2201      	movs	r2, #1
 800758c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007590:	e031      	b.n	80075f6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007592:	2308      	movs	r3, #8
 8007594:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007596:	2308      	movs	r3, #8
 8007598:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	689b      	ldr	r3, [r3, #8]
 80075a0:	0e5b      	lsrs	r3, r3, #25
 80075a2:	b2db      	uxtb	r3, r3
 80075a4:	f003 0307 	and.w	r3, r3, #7
 80075a8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	689b      	ldr	r3, [r3, #8]
 80075b0:	0f5b      	lsrs	r3, r3, #29
 80075b2:	b2db      	uxtb	r3, r3
 80075b4:	f003 0307 	and.w	r3, r3, #7
 80075b8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075ba:	7bbb      	ldrb	r3, [r7, #14]
 80075bc:	7b3a      	ldrb	r2, [r7, #12]
 80075be:	4911      	ldr	r1, [pc, #68]	; (8007604 <UARTEx_SetNbDataToProcess+0x94>)
 80075c0:	5c8a      	ldrb	r2, [r1, r2]
 80075c2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80075c6:	7b3a      	ldrb	r2, [r7, #12]
 80075c8:	490f      	ldr	r1, [pc, #60]	; (8007608 <UARTEx_SetNbDataToProcess+0x98>)
 80075ca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80075cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075d8:	7bfb      	ldrb	r3, [r7, #15]
 80075da:	7b7a      	ldrb	r2, [r7, #13]
 80075dc:	4909      	ldr	r1, [pc, #36]	; (8007604 <UARTEx_SetNbDataToProcess+0x94>)
 80075de:	5c8a      	ldrb	r2, [r1, r2]
 80075e0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80075e4:	7b7a      	ldrb	r2, [r7, #13]
 80075e6:	4908      	ldr	r1, [pc, #32]	; (8007608 <UARTEx_SetNbDataToProcess+0x98>)
 80075e8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80075ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80075f6:	bf00      	nop
 80075f8:	3714      	adds	r7, #20
 80075fa:	46bd      	mov	sp, r7
 80075fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007600:	4770      	bx	lr
 8007602:	bf00      	nop
 8007604:	0800ae30 	.word	0x0800ae30
 8007608:	0800ae38 	.word	0x0800ae38

0800760c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800760c:	b480      	push	{r7}
 800760e:	b085      	sub	sp, #20
 8007610:	af00      	add	r7, sp, #0
 8007612:	4603      	mov	r3, r0
 8007614:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007616:	2300      	movs	r3, #0
 8007618:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800761a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800761e:	2b84      	cmp	r3, #132	; 0x84
 8007620:	d005      	beq.n	800762e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8007622:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	4413      	add	r3, r2
 800762a:	3303      	adds	r3, #3
 800762c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800762e:	68fb      	ldr	r3, [r7, #12]
}
 8007630:	4618      	mov	r0, r3
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007640:	f000 fade 	bl	8007c00 <vTaskStartScheduler>
  
  return osOK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	bd80      	pop	{r7, pc}

0800764a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800764a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800764c:	b089      	sub	sp, #36	; 0x24
 800764e:	af04      	add	r7, sp, #16
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d020      	beq.n	800769e <osThreadCreate+0x54>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	699b      	ldr	r3, [r3, #24]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d01c      	beq.n	800769e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	685c      	ldr	r4, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681d      	ldr	r5, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	691e      	ldr	r6, [r3, #16]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8007676:	4618      	mov	r0, r3
 8007678:	f7ff ffc8 	bl	800760c <makeFreeRtosPriority>
 800767c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	695b      	ldr	r3, [r3, #20]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007686:	9202      	str	r2, [sp, #8]
 8007688:	9301      	str	r3, [sp, #4]
 800768a:	9100      	str	r1, [sp, #0]
 800768c:	683b      	ldr	r3, [r7, #0]
 800768e:	4632      	mov	r2, r6
 8007690:	4629      	mov	r1, r5
 8007692:	4620      	mov	r0, r4
 8007694:	f000 f8ed 	bl	8007872 <xTaskCreateStatic>
 8007698:	4603      	mov	r3, r0
 800769a:	60fb      	str	r3, [r7, #12]
 800769c:	e01c      	b.n	80076d8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685c      	ldr	r4, [r3, #4]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80076aa:	b29e      	uxth	r6, r3
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f7ff ffaa 	bl	800760c <makeFreeRtosPriority>
 80076b8:	4602      	mov	r2, r0
 80076ba:	f107 030c 	add.w	r3, r7, #12
 80076be:	9301      	str	r3, [sp, #4]
 80076c0:	9200      	str	r2, [sp, #0]
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	4632      	mov	r2, r6
 80076c6:	4629      	mov	r1, r5
 80076c8:	4620      	mov	r0, r4
 80076ca:	f000 f92f 	bl	800792c <xTaskCreate>
 80076ce:	4603      	mov	r3, r0
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d001      	beq.n	80076d8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80076d4:	2300      	movs	r3, #0
 80076d6:	e000      	b.n	80076da <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80076d8:	68fb      	ldr	r3, [r7, #12]
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3714      	adds	r7, #20
 80076de:	46bd      	mov	sp, r7
 80076e0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080076e2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d001      	beq.n	80076f8 <osDelay+0x16>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	e000      	b.n	80076fa <osDelay+0x18>
 80076f8:	2301      	movs	r3, #1
 80076fa:	4618      	mov	r0, r3
 80076fc:	f000 fa4c 	bl	8007b98 <vTaskDelay>
  
  return osOK;
 8007700:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007702:	4618      	mov	r0, r3
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}

0800770a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800770a:	b480      	push	{r7}
 800770c:	b083      	sub	sp, #12
 800770e:	af00      	add	r7, sp, #0
 8007710:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f103 0208 	add.w	r2, r3, #8
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007722:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f103 0208 	add.w	r2, r3, #8
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f103 0208 	add.w	r2, r3, #8
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800773e:	bf00      	nop
 8007740:	370c      	adds	r7, #12
 8007742:	46bd      	mov	sp, r7
 8007744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007748:	4770      	bx	lr

0800774a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800774a:	b480      	push	{r7}
 800774c:	b083      	sub	sp, #12
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	2200      	movs	r2, #0
 8007756:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	685b      	ldr	r3, [r3, #4]
 8007772:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	689a      	ldr	r2, [r3, #8]
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	683a      	ldr	r2, [r7, #0]
 8007788:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	683a      	ldr	r2, [r7, #0]
 800778e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	687a      	ldr	r2, [r7, #4]
 8007794:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	1c5a      	adds	r2, r3, #1
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	601a      	str	r2, [r3, #0]
}
 80077a0:	bf00      	nop
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr

080077ac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077ac:	b480      	push	{r7}
 80077ae:	b085      	sub	sp, #20
 80077b0:	af00      	add	r7, sp, #0
 80077b2:	6078      	str	r0, [r7, #4]
 80077b4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077b6:	683b      	ldr	r3, [r7, #0]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80077c2:	d103      	bne.n	80077cc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	60fb      	str	r3, [r7, #12]
 80077ca:	e00c      	b.n	80077e6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	3308      	adds	r3, #8
 80077d0:	60fb      	str	r3, [r7, #12]
 80077d2:	e002      	b.n	80077da <vListInsert+0x2e>
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	685b      	ldr	r3, [r3, #4]
 80077d8:	60fb      	str	r3, [r7, #12]
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	685b      	ldr	r3, [r3, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	68ba      	ldr	r2, [r7, #8]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d2f6      	bcs.n	80077d4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	683b      	ldr	r3, [r7, #0]
 80077ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	685b      	ldr	r3, [r3, #4]
 80077f2:	683a      	ldr	r2, [r7, #0]
 80077f4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	68fa      	ldr	r2, [r7, #12]
 80077fa:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	683a      	ldr	r2, [r7, #0]
 8007800:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	687a      	ldr	r2, [r7, #4]
 8007806:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	601a      	str	r2, [r3, #0]
}
 8007812:	bf00      	nop
 8007814:	3714      	adds	r7, #20
 8007816:	46bd      	mov	sp, r7
 8007818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781c:	4770      	bx	lr

0800781e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800781e:	b480      	push	{r7}
 8007820:	b085      	sub	sp, #20
 8007822:	af00      	add	r7, sp, #0
 8007824:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	691b      	ldr	r3, [r3, #16]
 800782a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6892      	ldr	r2, [r2, #8]
 8007834:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	689b      	ldr	r3, [r3, #8]
 800783a:	687a      	ldr	r2, [r7, #4]
 800783c:	6852      	ldr	r2, [r2, #4]
 800783e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	687a      	ldr	r2, [r7, #4]
 8007846:	429a      	cmp	r2, r3
 8007848:	d103      	bne.n	8007852 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	689a      	ldr	r2, [r3, #8]
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2200      	movs	r2, #0
 8007856:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	1e5a      	subs	r2, r3, #1
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
}
 8007866:	4618      	mov	r0, r3
 8007868:	3714      	adds	r7, #20
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr

08007872 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007872:	b580      	push	{r7, lr}
 8007874:	b08e      	sub	sp, #56	; 0x38
 8007876:	af04      	add	r7, sp, #16
 8007878:	60f8      	str	r0, [r7, #12]
 800787a:	60b9      	str	r1, [r7, #8]
 800787c:	607a      	str	r2, [r7, #4]
 800787e:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10a      	bne.n	800789c <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007898:	bf00      	nop
 800789a:	e7fe      	b.n	800789a <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	2b00      	cmp	r3, #0
 80078a0:	d10a      	bne.n	80078b8 <xTaskCreateStatic+0x46>
	__asm volatile
 80078a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078a6:	f383 8811 	msr	BASEPRI, r3
 80078aa:	f3bf 8f6f 	isb	sy
 80078ae:	f3bf 8f4f 	dsb	sy
 80078b2:	61fb      	str	r3, [r7, #28]
}
 80078b4:	bf00      	nop
 80078b6:	e7fe      	b.n	80078b6 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80078b8:	2354      	movs	r3, #84	; 0x54
 80078ba:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	2b54      	cmp	r3, #84	; 0x54
 80078c0:	d00a      	beq.n	80078d8 <xTaskCreateStatic+0x66>
	__asm volatile
 80078c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c6:	f383 8811 	msr	BASEPRI, r3
 80078ca:	f3bf 8f6f 	isb	sy
 80078ce:	f3bf 8f4f 	dsb	sy
 80078d2:	61bb      	str	r3, [r7, #24]
}
 80078d4:	bf00      	nop
 80078d6:	e7fe      	b.n	80078d6 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80078d8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80078da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d01e      	beq.n	800791e <xTaskCreateStatic+0xac>
 80078e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01b      	beq.n	800791e <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80078e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e8:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80078ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80078ee:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	2202      	movs	r2, #2
 80078f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80078f8:	2300      	movs	r3, #0
 80078fa:	9303      	str	r3, [sp, #12]
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	9302      	str	r3, [sp, #8]
 8007900:	f107 0314 	add.w	r3, r7, #20
 8007904:	9301      	str	r3, [sp, #4]
 8007906:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	687a      	ldr	r2, [r7, #4]
 800790e:	68b9      	ldr	r1, [r7, #8]
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f850 	bl	80079b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007916:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007918:	f000 f8d4 	bl	8007ac4 <prvAddNewTaskToReadyList>
 800791c:	e001      	b.n	8007922 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800791e:	2300      	movs	r3, #0
 8007920:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007922:	697b      	ldr	r3, [r7, #20]
	}
 8007924:	4618      	mov	r0, r3
 8007926:	3728      	adds	r7, #40	; 0x28
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800792c:	b580      	push	{r7, lr}
 800792e:	b08c      	sub	sp, #48	; 0x30
 8007930:	af04      	add	r7, sp, #16
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	603b      	str	r3, [r7, #0]
 8007938:	4613      	mov	r3, r2
 800793a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800793c:	88fb      	ldrh	r3, [r7, #6]
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4618      	mov	r0, r3
 8007942:	f000 fee1 	bl	8008708 <pvPortMalloc>
 8007946:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00e      	beq.n	800796c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800794e:	2054      	movs	r0, #84	; 0x54
 8007950:	f000 feda 	bl	8008708 <pvPortMalloc>
 8007954:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007956:	69fb      	ldr	r3, [r7, #28]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d003      	beq.n	8007964 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	697a      	ldr	r2, [r7, #20]
 8007960:	631a      	str	r2, [r3, #48]	; 0x30
 8007962:	e005      	b.n	8007970 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007964:	6978      	ldr	r0, [r7, #20]
 8007966:	f000 ff9b 	bl	80088a0 <vPortFree>
 800796a:	e001      	b.n	8007970 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800796c:	2300      	movs	r3, #0
 800796e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d017      	beq.n	80079a6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007976:	69fb      	ldr	r3, [r7, #28]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800797e:	88fa      	ldrh	r2, [r7, #6]
 8007980:	2300      	movs	r3, #0
 8007982:	9303      	str	r3, [sp, #12]
 8007984:	69fb      	ldr	r3, [r7, #28]
 8007986:	9302      	str	r3, [sp, #8]
 8007988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800798a:	9301      	str	r3, [sp, #4]
 800798c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800798e:	9300      	str	r3, [sp, #0]
 8007990:	683b      	ldr	r3, [r7, #0]
 8007992:	68b9      	ldr	r1, [r7, #8]
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 f80e 	bl	80079b6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800799a:	69f8      	ldr	r0, [r7, #28]
 800799c:	f000 f892 	bl	8007ac4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80079a0:	2301      	movs	r3, #1
 80079a2:	61bb      	str	r3, [r7, #24]
 80079a4:	e002      	b.n	80079ac <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80079a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079aa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80079ac:	69bb      	ldr	r3, [r7, #24]
	}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3720      	adds	r7, #32
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}

080079b6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80079b6:	b580      	push	{r7, lr}
 80079b8:	b088      	sub	sp, #32
 80079ba:	af00      	add	r7, sp, #0
 80079bc:	60f8      	str	r0, [r7, #12]
 80079be:	60b9      	str	r1, [r7, #8]
 80079c0:	607a      	str	r2, [r7, #4]
 80079c2:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80079c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80079c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80079ce:	3b01      	subs	r3, #1
 80079d0:	009b      	lsls	r3, r3, #2
 80079d2:	4413      	add	r3, r2
 80079d4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	f023 0307 	bic.w	r3, r3, #7
 80079dc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	f003 0307 	and.w	r3, r3, #7
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d00a      	beq.n	80079fe <prvInitialiseNewTask+0x48>
	__asm volatile
 80079e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ec:	f383 8811 	msr	BASEPRI, r3
 80079f0:	f3bf 8f6f 	isb	sy
 80079f4:	f3bf 8f4f 	dsb	sy
 80079f8:	617b      	str	r3, [r7, #20]
}
 80079fa:	bf00      	nop
 80079fc:	e7fe      	b.n	80079fc <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d01f      	beq.n	8007a44 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a04:	2300      	movs	r3, #0
 8007a06:	61fb      	str	r3, [r7, #28]
 8007a08:	e012      	b.n	8007a30 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007a0a:	68ba      	ldr	r2, [r7, #8]
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	4413      	add	r3, r2
 8007a10:	7819      	ldrb	r1, [r3, #0]
 8007a12:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a14:	69fb      	ldr	r3, [r7, #28]
 8007a16:	4413      	add	r3, r2
 8007a18:	3334      	adds	r3, #52	; 0x34
 8007a1a:	460a      	mov	r2, r1
 8007a1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007a1e:	68ba      	ldr	r2, [r7, #8]
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	4413      	add	r3, r2
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d006      	beq.n	8007a38 <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	61fb      	str	r3, [r7, #28]
 8007a30:	69fb      	ldr	r3, [r7, #28]
 8007a32:	2b0f      	cmp	r3, #15
 8007a34:	d9e9      	bls.n	8007a0a <prvInitialiseNewTask+0x54>
 8007a36:	e000      	b.n	8007a3a <prvInitialiseNewTask+0x84>
			{
				break;
 8007a38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007a42:	e003      	b.n	8007a4c <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a46:	2200      	movs	r2, #0
 8007a48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4e:	2b06      	cmp	r3, #6
 8007a50:	d901      	bls.n	8007a56 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007a52:	2306      	movs	r3, #6
 8007a54:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a5a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007a60:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007a62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a64:	2200      	movs	r2, #0
 8007a66:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a6a:	3304      	adds	r3, #4
 8007a6c:	4618      	mov	r0, r3
 8007a6e:	f7ff fe6c 	bl	800774a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a74:	3318      	adds	r3, #24
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7ff fe67 	bl	800774a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007a7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a84:	f1c3 0207 	rsb	r2, r3, #7
 8007a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a90:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a94:	2200      	movs	r2, #0
 8007a96:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007aa0:	683a      	ldr	r2, [r7, #0]
 8007aa2:	68f9      	ldr	r1, [r7, #12]
 8007aa4:	69b8      	ldr	r0, [r7, #24]
 8007aa6:	f000 fc23 	bl	80082f0 <pxPortInitialiseStack>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d002      	beq.n	8007abc <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007abc:	bf00      	nop
 8007abe:	3720      	adds	r7, #32
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b082      	sub	sp, #8
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007acc:	f000 fd3a 	bl	8008544 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007ad0:	4b2a      	ldr	r3, [pc, #168]	; (8007b7c <prvAddNewTaskToReadyList+0xb8>)
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	3301      	adds	r3, #1
 8007ad6:	4a29      	ldr	r2, [pc, #164]	; (8007b7c <prvAddNewTaskToReadyList+0xb8>)
 8007ad8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007ada:	4b29      	ldr	r3, [pc, #164]	; (8007b80 <prvAddNewTaskToReadyList+0xbc>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d109      	bne.n	8007af6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007ae2:	4a27      	ldr	r2, [pc, #156]	; (8007b80 <prvAddNewTaskToReadyList+0xbc>)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ae8:	4b24      	ldr	r3, [pc, #144]	; (8007b7c <prvAddNewTaskToReadyList+0xb8>)
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	2b01      	cmp	r3, #1
 8007aee:	d110      	bne.n	8007b12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007af0:	f000 fabc 	bl	800806c <prvInitialiseTaskLists>
 8007af4:	e00d      	b.n	8007b12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007af6:	4b23      	ldr	r3, [pc, #140]	; (8007b84 <prvAddNewTaskToReadyList+0xc0>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d109      	bne.n	8007b12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007afe:	4b20      	ldr	r3, [pc, #128]	; (8007b80 <prvAddNewTaskToReadyList+0xbc>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b08:	429a      	cmp	r2, r3
 8007b0a:	d802      	bhi.n	8007b12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007b0c:	4a1c      	ldr	r2, [pc, #112]	; (8007b80 <prvAddNewTaskToReadyList+0xbc>)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007b12:	4b1d      	ldr	r3, [pc, #116]	; (8007b88 <prvAddNewTaskToReadyList+0xc4>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	3301      	adds	r3, #1
 8007b18:	4a1b      	ldr	r2, [pc, #108]	; (8007b88 <prvAddNewTaskToReadyList+0xc4>)
 8007b1a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b20:	2201      	movs	r2, #1
 8007b22:	409a      	lsls	r2, r3
 8007b24:	4b19      	ldr	r3, [pc, #100]	; (8007b8c <prvAddNewTaskToReadyList+0xc8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4313      	orrs	r3, r2
 8007b2a:	4a18      	ldr	r2, [pc, #96]	; (8007b8c <prvAddNewTaskToReadyList+0xc8>)
 8007b2c:	6013      	str	r3, [r2, #0]
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b32:	4613      	mov	r3, r2
 8007b34:	009b      	lsls	r3, r3, #2
 8007b36:	4413      	add	r3, r2
 8007b38:	009b      	lsls	r3, r3, #2
 8007b3a:	4a15      	ldr	r2, [pc, #84]	; (8007b90 <prvAddNewTaskToReadyList+0xcc>)
 8007b3c:	441a      	add	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	3304      	adds	r3, #4
 8007b42:	4619      	mov	r1, r3
 8007b44:	4610      	mov	r0, r2
 8007b46:	f7ff fe0d 	bl	8007764 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007b4a:	f000 fd2b 	bl	80085a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007b4e:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <prvAddNewTaskToReadyList+0xc0>)
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00e      	beq.n	8007b74 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007b56:	4b0a      	ldr	r3, [pc, #40]	; (8007b80 <prvAddNewTaskToReadyList+0xbc>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d207      	bcs.n	8007b74 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007b64:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <prvAddNewTaskToReadyList+0xd0>)
 8007b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	f3bf 8f4f 	dsb	sy
 8007b70:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b74:	bf00      	nop
 8007b76:	3708      	adds	r7, #8
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	bd80      	pop	{r7, pc}
 8007b7c:	200001bc 	.word	0x200001bc
 8007b80:	200000bc 	.word	0x200000bc
 8007b84:	200001c8 	.word	0x200001c8
 8007b88:	200001d8 	.word	0x200001d8
 8007b8c:	200001c4 	.word	0x200001c4
 8007b90:	200000c0 	.word	0x200000c0
 8007b94:	e000ed04 	.word	0xe000ed04

08007b98 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b084      	sub	sp, #16
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d017      	beq.n	8007bda <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8007baa:	4b13      	ldr	r3, [pc, #76]	; (8007bf8 <vTaskDelay+0x60>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d00a      	beq.n	8007bc8 <vTaskDelay+0x30>
	__asm volatile
 8007bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb6:	f383 8811 	msr	BASEPRI, r3
 8007bba:	f3bf 8f6f 	isb	sy
 8007bbe:	f3bf 8f4f 	dsb	sy
 8007bc2:	60bb      	str	r3, [r7, #8]
}
 8007bc4:	bf00      	nop
 8007bc6:	e7fe      	b.n	8007bc6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007bc8:	f000 f87a 	bl	8007cc0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007bcc:	2100      	movs	r1, #0
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 fb28 	bl	8008224 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007bd4:	f000 f882 	bl	8007cdc <xTaskResumeAll>
 8007bd8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d107      	bne.n	8007bf0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007be0:	4b06      	ldr	r3, [pc, #24]	; (8007bfc <vTaskDelay+0x64>)
 8007be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007be6:	601a      	str	r2, [r3, #0]
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007bf0:	bf00      	nop
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}
 8007bf8:	200001e4 	.word	0x200001e4
 8007bfc:	e000ed04 	.word	0xe000ed04

08007c00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b08a      	sub	sp, #40	; 0x28
 8007c04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007c06:	2300      	movs	r3, #0
 8007c08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007c0e:	463a      	mov	r2, r7
 8007c10:	1d39      	adds	r1, r7, #4
 8007c12:	f107 0308 	add.w	r3, r7, #8
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 ff60 	bl	8008adc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007c1c:	6839      	ldr	r1, [r7, #0]
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68ba      	ldr	r2, [r7, #8]
 8007c22:	9202      	str	r2, [sp, #8]
 8007c24:	9301      	str	r3, [sp, #4]
 8007c26:	2300      	movs	r3, #0
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	460a      	mov	r2, r1
 8007c2e:	491e      	ldr	r1, [pc, #120]	; (8007ca8 <vTaskStartScheduler+0xa8>)
 8007c30:	481e      	ldr	r0, [pc, #120]	; (8007cac <vTaskStartScheduler+0xac>)
 8007c32:	f7ff fe1e 	bl	8007872 <xTaskCreateStatic>
 8007c36:	4603      	mov	r3, r0
 8007c38:	4a1d      	ldr	r2, [pc, #116]	; (8007cb0 <vTaskStartScheduler+0xb0>)
 8007c3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007c3c:	4b1c      	ldr	r3, [pc, #112]	; (8007cb0 <vTaskStartScheduler+0xb0>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d002      	beq.n	8007c4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007c44:	2301      	movs	r3, #1
 8007c46:	617b      	str	r3, [r7, #20]
 8007c48:	e001      	b.n	8007c4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d116      	bne.n	8007c82 <vTaskStartScheduler+0x82>
	__asm volatile
 8007c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c58:	f383 8811 	msr	BASEPRI, r3
 8007c5c:	f3bf 8f6f 	isb	sy
 8007c60:	f3bf 8f4f 	dsb	sy
 8007c64:	613b      	str	r3, [r7, #16]
}
 8007c66:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007c68:	4b12      	ldr	r3, [pc, #72]	; (8007cb4 <vTaskStartScheduler+0xb4>)
 8007c6a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007c70:	4b11      	ldr	r3, [pc, #68]	; (8007cb8 <vTaskStartScheduler+0xb8>)
 8007c72:	2201      	movs	r2, #1
 8007c74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007c76:	4b11      	ldr	r3, [pc, #68]	; (8007cbc <vTaskStartScheduler+0xbc>)
 8007c78:	2200      	movs	r2, #0
 8007c7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007c7c:	f000 fbc0 	bl	8008400 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007c80:	e00e      	b.n	8007ca0 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007c82:	697b      	ldr	r3, [r7, #20]
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c88:	d10a      	bne.n	8007ca0 <vTaskStartScheduler+0xa0>
	__asm volatile
 8007c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c8e:	f383 8811 	msr	BASEPRI, r3
 8007c92:	f3bf 8f6f 	isb	sy
 8007c96:	f3bf 8f4f 	dsb	sy
 8007c9a:	60fb      	str	r3, [r7, #12]
}
 8007c9c:	bf00      	nop
 8007c9e:	e7fe      	b.n	8007c9e <vTaskStartScheduler+0x9e>
}
 8007ca0:	bf00      	nop
 8007ca2:	3718      	adds	r7, #24
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	0800ad8c 	.word	0x0800ad8c
 8007cac:	0800803d 	.word	0x0800803d
 8007cb0:	200001e0 	.word	0x200001e0
 8007cb4:	200001dc 	.word	0x200001dc
 8007cb8:	200001c8 	.word	0x200001c8
 8007cbc:	200001c0 	.word	0x200001c0

08007cc0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007cc4:	4b04      	ldr	r3, [pc, #16]	; (8007cd8 <vTaskSuspendAll+0x18>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	3301      	adds	r3, #1
 8007cca:	4a03      	ldr	r2, [pc, #12]	; (8007cd8 <vTaskSuspendAll+0x18>)
 8007ccc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007cce:	bf00      	nop
 8007cd0:	46bd      	mov	sp, r7
 8007cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd6:	4770      	bx	lr
 8007cd8:	200001e4 	.word	0x200001e4

08007cdc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b084      	sub	sp, #16
 8007ce0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007cea:	4b41      	ldr	r3, [pc, #260]	; (8007df0 <xTaskResumeAll+0x114>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d10a      	bne.n	8007d08 <xTaskResumeAll+0x2c>
	__asm volatile
 8007cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cf6:	f383 8811 	msr	BASEPRI, r3
 8007cfa:	f3bf 8f6f 	isb	sy
 8007cfe:	f3bf 8f4f 	dsb	sy
 8007d02:	603b      	str	r3, [r7, #0]
}
 8007d04:	bf00      	nop
 8007d06:	e7fe      	b.n	8007d06 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007d08:	f000 fc1c 	bl	8008544 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007d0c:	4b38      	ldr	r3, [pc, #224]	; (8007df0 <xTaskResumeAll+0x114>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	3b01      	subs	r3, #1
 8007d12:	4a37      	ldr	r2, [pc, #220]	; (8007df0 <xTaskResumeAll+0x114>)
 8007d14:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007d16:	4b36      	ldr	r3, [pc, #216]	; (8007df0 <xTaskResumeAll+0x114>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d161      	bne.n	8007de2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007d1e:	4b35      	ldr	r3, [pc, #212]	; (8007df4 <xTaskResumeAll+0x118>)
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d05d      	beq.n	8007de2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d26:	e02e      	b.n	8007d86 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d28:	4b33      	ldr	r3, [pc, #204]	; (8007df8 <xTaskResumeAll+0x11c>)
 8007d2a:	68db      	ldr	r3, [r3, #12]
 8007d2c:	68db      	ldr	r3, [r3, #12]
 8007d2e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	3318      	adds	r3, #24
 8007d34:	4618      	mov	r0, r3
 8007d36:	f7ff fd72 	bl	800781e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	3304      	adds	r3, #4
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7ff fd6d 	bl	800781e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d48:	2201      	movs	r2, #1
 8007d4a:	409a      	lsls	r2, r3
 8007d4c:	4b2b      	ldr	r3, [pc, #172]	; (8007dfc <xTaskResumeAll+0x120>)
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	4313      	orrs	r3, r2
 8007d52:	4a2a      	ldr	r2, [pc, #168]	; (8007dfc <xTaskResumeAll+0x120>)
 8007d54:	6013      	str	r3, [r2, #0]
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	009b      	lsls	r3, r3, #2
 8007d5e:	4413      	add	r3, r2
 8007d60:	009b      	lsls	r3, r3, #2
 8007d62:	4a27      	ldr	r2, [pc, #156]	; (8007e00 <xTaskResumeAll+0x124>)
 8007d64:	441a      	add	r2, r3
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	3304      	adds	r3, #4
 8007d6a:	4619      	mov	r1, r3
 8007d6c:	4610      	mov	r0, r2
 8007d6e:	f7ff fcf9 	bl	8007764 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d76:	4b23      	ldr	r3, [pc, #140]	; (8007e04 <xTaskResumeAll+0x128>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d302      	bcc.n	8007d86 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8007d80:	4b21      	ldr	r3, [pc, #132]	; (8007e08 <xTaskResumeAll+0x12c>)
 8007d82:	2201      	movs	r2, #1
 8007d84:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007d86:	4b1c      	ldr	r3, [pc, #112]	; (8007df8 <xTaskResumeAll+0x11c>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d1cc      	bne.n	8007d28 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d001      	beq.n	8007d98 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007d94:	f000 fa08 	bl	80081a8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007d98:	4b1c      	ldr	r3, [pc, #112]	; (8007e0c <xTaskResumeAll+0x130>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d010      	beq.n	8007dc6 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007da4:	f000 f836 	bl	8007e14 <xTaskIncrementTick>
 8007da8:	4603      	mov	r3, r0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d002      	beq.n	8007db4 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8007dae:	4b16      	ldr	r3, [pc, #88]	; (8007e08 <xTaskResumeAll+0x12c>)
 8007db0:	2201      	movs	r2, #1
 8007db2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d1f1      	bne.n	8007da4 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8007dc0:	4b12      	ldr	r3, [pc, #72]	; (8007e0c <xTaskResumeAll+0x130>)
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007dc6:	4b10      	ldr	r3, [pc, #64]	; (8007e08 <xTaskResumeAll+0x12c>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d009      	beq.n	8007de2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007dce:	2301      	movs	r3, #1
 8007dd0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007dd2:	4b0f      	ldr	r3, [pc, #60]	; (8007e10 <xTaskResumeAll+0x134>)
 8007dd4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007dd8:	601a      	str	r2, [r3, #0]
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007de2:	f000 fbdf 	bl	80085a4 <vPortExitCritical>

	return xAlreadyYielded;
 8007de6:	68bb      	ldr	r3, [r7, #8]
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	200001e4 	.word	0x200001e4
 8007df4:	200001bc 	.word	0x200001bc
 8007df8:	2000017c 	.word	0x2000017c
 8007dfc:	200001c4 	.word	0x200001c4
 8007e00:	200000c0 	.word	0x200000c0
 8007e04:	200000bc 	.word	0x200000bc
 8007e08:	200001d0 	.word	0x200001d0
 8007e0c:	200001cc 	.word	0x200001cc
 8007e10:	e000ed04 	.word	0xe000ed04

08007e14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b086      	sub	sp, #24
 8007e18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e1e:	4b4e      	ldr	r3, [pc, #312]	; (8007f58 <xTaskIncrementTick+0x144>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f040 808e 	bne.w	8007f44 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007e28:	4b4c      	ldr	r3, [pc, #304]	; (8007f5c <xTaskIncrementTick+0x148>)
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007e30:	4a4a      	ldr	r2, [pc, #296]	; (8007f5c <xTaskIncrementTick+0x148>)
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007e36:	693b      	ldr	r3, [r7, #16]
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d120      	bne.n	8007e7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007e3c:	4b48      	ldr	r3, [pc, #288]	; (8007f60 <xTaskIncrementTick+0x14c>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d00a      	beq.n	8007e5c <xTaskIncrementTick+0x48>
	__asm volatile
 8007e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e4a:	f383 8811 	msr	BASEPRI, r3
 8007e4e:	f3bf 8f6f 	isb	sy
 8007e52:	f3bf 8f4f 	dsb	sy
 8007e56:	603b      	str	r3, [r7, #0]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <xTaskIncrementTick+0x46>
 8007e5c:	4b40      	ldr	r3, [pc, #256]	; (8007f60 <xTaskIncrementTick+0x14c>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	60fb      	str	r3, [r7, #12]
 8007e62:	4b40      	ldr	r3, [pc, #256]	; (8007f64 <xTaskIncrementTick+0x150>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a3e      	ldr	r2, [pc, #248]	; (8007f60 <xTaskIncrementTick+0x14c>)
 8007e68:	6013      	str	r3, [r2, #0]
 8007e6a:	4a3e      	ldr	r2, [pc, #248]	; (8007f64 <xTaskIncrementTick+0x150>)
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	6013      	str	r3, [r2, #0]
 8007e70:	4b3d      	ldr	r3, [pc, #244]	; (8007f68 <xTaskIncrementTick+0x154>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3301      	adds	r3, #1
 8007e76:	4a3c      	ldr	r2, [pc, #240]	; (8007f68 <xTaskIncrementTick+0x154>)
 8007e78:	6013      	str	r3, [r2, #0]
 8007e7a:	f000 f995 	bl	80081a8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007e7e:	4b3b      	ldr	r3, [pc, #236]	; (8007f6c <xTaskIncrementTick+0x158>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	693a      	ldr	r2, [r7, #16]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d348      	bcc.n	8007f1a <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007e88:	4b35      	ldr	r3, [pc, #212]	; (8007f60 <xTaskIncrementTick+0x14c>)
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	2b00      	cmp	r3, #0
 8007e90:	d104      	bne.n	8007e9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007e92:	4b36      	ldr	r3, [pc, #216]	; (8007f6c <xTaskIncrementTick+0x158>)
 8007e94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e98:	601a      	str	r2, [r3, #0]
					break;
 8007e9a:	e03e      	b.n	8007f1a <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e9c:	4b30      	ldr	r3, [pc, #192]	; (8007f60 <xTaskIncrementTick+0x14c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	68db      	ldr	r3, [r3, #12]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d203      	bcs.n	8007ebc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007eb4:	4a2d      	ldr	r2, [pc, #180]	; (8007f6c <xTaskIncrementTick+0x158>)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007eba:	e02e      	b.n	8007f1a <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	3304      	adds	r3, #4
 8007ec0:	4618      	mov	r0, r3
 8007ec2:	f7ff fcac 	bl	800781e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007ec6:	68bb      	ldr	r3, [r7, #8]
 8007ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d004      	beq.n	8007ed8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	3318      	adds	r3, #24
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7ff fca3 	bl	800781e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007edc:	2201      	movs	r2, #1
 8007ede:	409a      	lsls	r2, r3
 8007ee0:	4b23      	ldr	r3, [pc, #140]	; (8007f70 <xTaskIncrementTick+0x15c>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	4a22      	ldr	r2, [pc, #136]	; (8007f70 <xTaskIncrementTick+0x15c>)
 8007ee8:	6013      	str	r3, [r2, #0]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007eee:	4613      	mov	r3, r2
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	009b      	lsls	r3, r3, #2
 8007ef6:	4a1f      	ldr	r2, [pc, #124]	; (8007f74 <xTaskIncrementTick+0x160>)
 8007ef8:	441a      	add	r2, r3
 8007efa:	68bb      	ldr	r3, [r7, #8]
 8007efc:	3304      	adds	r3, #4
 8007efe:	4619      	mov	r1, r3
 8007f00:	4610      	mov	r0, r2
 8007f02:	f7ff fc2f 	bl	8007764 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f0a:	4b1b      	ldr	r3, [pc, #108]	; (8007f78 <xTaskIncrementTick+0x164>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d3b9      	bcc.n	8007e88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007f14:	2301      	movs	r3, #1
 8007f16:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007f18:	e7b6      	b.n	8007e88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007f1a:	4b17      	ldr	r3, [pc, #92]	; (8007f78 <xTaskIncrementTick+0x164>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f20:	4914      	ldr	r1, [pc, #80]	; (8007f74 <xTaskIncrementTick+0x160>)
 8007f22:	4613      	mov	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	4413      	add	r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	2b01      	cmp	r3, #1
 8007f30:	d901      	bls.n	8007f36 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8007f32:	2301      	movs	r3, #1
 8007f34:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007f36:	4b11      	ldr	r3, [pc, #68]	; (8007f7c <xTaskIncrementTick+0x168>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d007      	beq.n	8007f4e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007f3e:	2301      	movs	r3, #1
 8007f40:	617b      	str	r3, [r7, #20]
 8007f42:	e004      	b.n	8007f4e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007f44:	4b0e      	ldr	r3, [pc, #56]	; (8007f80 <xTaskIncrementTick+0x16c>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	3301      	adds	r3, #1
 8007f4a:	4a0d      	ldr	r2, [pc, #52]	; (8007f80 <xTaskIncrementTick+0x16c>)
 8007f4c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007f4e:	697b      	ldr	r3, [r7, #20]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	200001e4 	.word	0x200001e4
 8007f5c:	200001c0 	.word	0x200001c0
 8007f60:	20000174 	.word	0x20000174
 8007f64:	20000178 	.word	0x20000178
 8007f68:	200001d4 	.word	0x200001d4
 8007f6c:	200001dc 	.word	0x200001dc
 8007f70:	200001c4 	.word	0x200001c4
 8007f74:	200000c0 	.word	0x200000c0
 8007f78:	200000bc 	.word	0x200000bc
 8007f7c:	200001d0 	.word	0x200001d0
 8007f80:	200001cc 	.word	0x200001cc

08007f84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007f84:	b480      	push	{r7}
 8007f86:	b087      	sub	sp, #28
 8007f88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007f8a:	4b27      	ldr	r3, [pc, #156]	; (8008028 <vTaskSwitchContext+0xa4>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d003      	beq.n	8007f9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007f92:	4b26      	ldr	r3, [pc, #152]	; (800802c <vTaskSwitchContext+0xa8>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007f98:	e03f      	b.n	800801a <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8007f9a:	4b24      	ldr	r3, [pc, #144]	; (800802c <vTaskSwitchContext+0xa8>)
 8007f9c:	2200      	movs	r2, #0
 8007f9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fa0:	4b23      	ldr	r3, [pc, #140]	; (8008030 <vTaskSwitchContext+0xac>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	fab3 f383 	clz	r3, r3
 8007fac:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007fae:	7afb      	ldrb	r3, [r7, #11]
 8007fb0:	f1c3 031f 	rsb	r3, r3, #31
 8007fb4:	617b      	str	r3, [r7, #20]
 8007fb6:	491f      	ldr	r1, [pc, #124]	; (8008034 <vTaskSwitchContext+0xb0>)
 8007fb8:	697a      	ldr	r2, [r7, #20]
 8007fba:	4613      	mov	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4413      	add	r3, r2
 8007fc0:	009b      	lsls	r3, r3, #2
 8007fc2:	440b      	add	r3, r1
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d10a      	bne.n	8007fe0 <vTaskSwitchContext+0x5c>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	607b      	str	r3, [r7, #4]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <vTaskSwitchContext+0x5a>
 8007fe0:	697a      	ldr	r2, [r7, #20]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	4413      	add	r3, r2
 8007fe8:	009b      	lsls	r3, r3, #2
 8007fea:	4a12      	ldr	r2, [pc, #72]	; (8008034 <vTaskSwitchContext+0xb0>)
 8007fec:	4413      	add	r3, r2
 8007fee:	613b      	str	r3, [r7, #16]
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	693b      	ldr	r3, [r7, #16]
 8007ff8:	605a      	str	r2, [r3, #4]
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	3308      	adds	r3, #8
 8008002:	429a      	cmp	r2, r3
 8008004:	d104      	bne.n	8008010 <vTaskSwitchContext+0x8c>
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	685b      	ldr	r3, [r3, #4]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	605a      	str	r2, [r3, #4]
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	685b      	ldr	r3, [r3, #4]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	4a08      	ldr	r2, [pc, #32]	; (8008038 <vTaskSwitchContext+0xb4>)
 8008018:	6013      	str	r3, [r2, #0]
}
 800801a:	bf00      	nop
 800801c:	371c      	adds	r7, #28
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	200001e4 	.word	0x200001e4
 800802c:	200001d0 	.word	0x200001d0
 8008030:	200001c4 	.word	0x200001c4
 8008034:	200000c0 	.word	0x200000c0
 8008038:	200000bc 	.word	0x200000bc

0800803c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008044:	f000 f852 	bl	80080ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008048:	4b06      	ldr	r3, [pc, #24]	; (8008064 <prvIdleTask+0x28>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	2b01      	cmp	r3, #1
 800804e:	d9f9      	bls.n	8008044 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008050:	4b05      	ldr	r3, [pc, #20]	; (8008068 <prvIdleTask+0x2c>)
 8008052:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	f3bf 8f4f 	dsb	sy
 800805c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008060:	e7f0      	b.n	8008044 <prvIdleTask+0x8>
 8008062:	bf00      	nop
 8008064:	200000c0 	.word	0x200000c0
 8008068:	e000ed04 	.word	0xe000ed04

0800806c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b082      	sub	sp, #8
 8008070:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008072:	2300      	movs	r3, #0
 8008074:	607b      	str	r3, [r7, #4]
 8008076:	e00c      	b.n	8008092 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008078:	687a      	ldr	r2, [r7, #4]
 800807a:	4613      	mov	r3, r2
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	4413      	add	r3, r2
 8008080:	009b      	lsls	r3, r3, #2
 8008082:	4a12      	ldr	r2, [pc, #72]	; (80080cc <prvInitialiseTaskLists+0x60>)
 8008084:	4413      	add	r3, r2
 8008086:	4618      	mov	r0, r3
 8008088:	f7ff fb3f 	bl	800770a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	3301      	adds	r3, #1
 8008090:	607b      	str	r3, [r7, #4]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2b06      	cmp	r3, #6
 8008096:	d9ef      	bls.n	8008078 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008098:	480d      	ldr	r0, [pc, #52]	; (80080d0 <prvInitialiseTaskLists+0x64>)
 800809a:	f7ff fb36 	bl	800770a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800809e:	480d      	ldr	r0, [pc, #52]	; (80080d4 <prvInitialiseTaskLists+0x68>)
 80080a0:	f7ff fb33 	bl	800770a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80080a4:	480c      	ldr	r0, [pc, #48]	; (80080d8 <prvInitialiseTaskLists+0x6c>)
 80080a6:	f7ff fb30 	bl	800770a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80080aa:	480c      	ldr	r0, [pc, #48]	; (80080dc <prvInitialiseTaskLists+0x70>)
 80080ac:	f7ff fb2d 	bl	800770a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80080b0:	480b      	ldr	r0, [pc, #44]	; (80080e0 <prvInitialiseTaskLists+0x74>)
 80080b2:	f7ff fb2a 	bl	800770a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80080b6:	4b0b      	ldr	r3, [pc, #44]	; (80080e4 <prvInitialiseTaskLists+0x78>)
 80080b8:	4a05      	ldr	r2, [pc, #20]	; (80080d0 <prvInitialiseTaskLists+0x64>)
 80080ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80080bc:	4b0a      	ldr	r3, [pc, #40]	; (80080e8 <prvInitialiseTaskLists+0x7c>)
 80080be:	4a05      	ldr	r2, [pc, #20]	; (80080d4 <prvInitialiseTaskLists+0x68>)
 80080c0:	601a      	str	r2, [r3, #0]
}
 80080c2:	bf00      	nop
 80080c4:	3708      	adds	r7, #8
 80080c6:	46bd      	mov	sp, r7
 80080c8:	bd80      	pop	{r7, pc}
 80080ca:	bf00      	nop
 80080cc:	200000c0 	.word	0x200000c0
 80080d0:	2000014c 	.word	0x2000014c
 80080d4:	20000160 	.word	0x20000160
 80080d8:	2000017c 	.word	0x2000017c
 80080dc:	20000190 	.word	0x20000190
 80080e0:	200001a8 	.word	0x200001a8
 80080e4:	20000174 	.word	0x20000174
 80080e8:	20000178 	.word	0x20000178

080080ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80080ec:	b580      	push	{r7, lr}
 80080ee:	b082      	sub	sp, #8
 80080f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80080f2:	e019      	b.n	8008128 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80080f4:	f000 fa26 	bl	8008544 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080f8:	4b10      	ldr	r3, [pc, #64]	; (800813c <prvCheckTasksWaitingTermination+0x50>)
 80080fa:	68db      	ldr	r3, [r3, #12]
 80080fc:	68db      	ldr	r3, [r3, #12]
 80080fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	3304      	adds	r3, #4
 8008104:	4618      	mov	r0, r3
 8008106:	f7ff fb8a 	bl	800781e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800810a:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <prvCheckTasksWaitingTermination+0x54>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	3b01      	subs	r3, #1
 8008110:	4a0b      	ldr	r2, [pc, #44]	; (8008140 <prvCheckTasksWaitingTermination+0x54>)
 8008112:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008114:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <prvCheckTasksWaitingTermination+0x58>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	3b01      	subs	r3, #1
 800811a:	4a0a      	ldr	r2, [pc, #40]	; (8008144 <prvCheckTasksWaitingTermination+0x58>)
 800811c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800811e:	f000 fa41 	bl	80085a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f810 	bl	8008148 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008128:	4b06      	ldr	r3, [pc, #24]	; (8008144 <prvCheckTasksWaitingTermination+0x58>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d1e1      	bne.n	80080f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008130:	bf00      	nop
 8008132:	bf00      	nop
 8008134:	3708      	adds	r7, #8
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	20000190 	.word	0x20000190
 8008140:	200001bc 	.word	0x200001bc
 8008144:	200001a4 	.word	0x200001a4

08008148 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008156:	2b00      	cmp	r3, #0
 8008158:	d108      	bne.n	800816c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815e:	4618      	mov	r0, r3
 8008160:	f000 fb9e 	bl	80088a0 <vPortFree>
				vPortFree( pxTCB );
 8008164:	6878      	ldr	r0, [r7, #4]
 8008166:	f000 fb9b 	bl	80088a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800816a:	e018      	b.n	800819e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008172:	2b01      	cmp	r3, #1
 8008174:	d103      	bne.n	800817e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008176:	6878      	ldr	r0, [r7, #4]
 8008178:	f000 fb92 	bl	80088a0 <vPortFree>
	}
 800817c:	e00f      	b.n	800819e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008184:	2b02      	cmp	r3, #2
 8008186:	d00a      	beq.n	800819e <prvDeleteTCB+0x56>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	60fb      	str	r3, [r7, #12]
}
 800819a:	bf00      	nop
 800819c:	e7fe      	b.n	800819c <prvDeleteTCB+0x54>
	}
 800819e:	bf00      	nop
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
	...

080081a8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80081a8:	b480      	push	{r7}
 80081aa:	b083      	sub	sp, #12
 80081ac:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80081ae:	4b0c      	ldr	r3, [pc, #48]	; (80081e0 <prvResetNextTaskUnblockTime+0x38>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	2b00      	cmp	r3, #0
 80081b6:	d104      	bne.n	80081c2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80081b8:	4b0a      	ldr	r3, [pc, #40]	; (80081e4 <prvResetNextTaskUnblockTime+0x3c>)
 80081ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80081be:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80081c0:	e008      	b.n	80081d4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80081c2:	4b07      	ldr	r3, [pc, #28]	; (80081e0 <prvResetNextTaskUnblockTime+0x38>)
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68db      	ldr	r3, [r3, #12]
 80081c8:	68db      	ldr	r3, [r3, #12]
 80081ca:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4a04      	ldr	r2, [pc, #16]	; (80081e4 <prvResetNextTaskUnblockTime+0x3c>)
 80081d2:	6013      	str	r3, [r2, #0]
}
 80081d4:	bf00      	nop
 80081d6:	370c      	adds	r7, #12
 80081d8:	46bd      	mov	sp, r7
 80081da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081de:	4770      	bx	lr
 80081e0:	20000174 	.word	0x20000174
 80081e4:	200001dc 	.word	0x200001dc

080081e8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80081e8:	b480      	push	{r7}
 80081ea:	b083      	sub	sp, #12
 80081ec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80081ee:	4b0b      	ldr	r3, [pc, #44]	; (800821c <xTaskGetSchedulerState+0x34>)
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d102      	bne.n	80081fc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80081f6:	2301      	movs	r3, #1
 80081f8:	607b      	str	r3, [r7, #4]
 80081fa:	e008      	b.n	800820e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80081fc:	4b08      	ldr	r3, [pc, #32]	; (8008220 <xTaskGetSchedulerState+0x38>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d102      	bne.n	800820a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008204:	2302      	movs	r3, #2
 8008206:	607b      	str	r3, [r7, #4]
 8008208:	e001      	b.n	800820e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800820a:	2300      	movs	r3, #0
 800820c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800820e:	687b      	ldr	r3, [r7, #4]
	}
 8008210:	4618      	mov	r0, r3
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr
 800821c:	200001c8 	.word	0x200001c8
 8008220:	200001e4 	.word	0x200001e4

08008224 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b084      	sub	sp, #16
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800822e:	4b29      	ldr	r3, [pc, #164]	; (80082d4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008234:	4b28      	ldr	r3, [pc, #160]	; (80082d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	3304      	adds	r3, #4
 800823a:	4618      	mov	r0, r3
 800823c:	f7ff faef 	bl	800781e <uxListRemove>
 8008240:	4603      	mov	r3, r0
 8008242:	2b00      	cmp	r3, #0
 8008244:	d10b      	bne.n	800825e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008246:	4b24      	ldr	r3, [pc, #144]	; (80082d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800824c:	2201      	movs	r2, #1
 800824e:	fa02 f303 	lsl.w	r3, r2, r3
 8008252:	43da      	mvns	r2, r3
 8008254:	4b21      	ldr	r3, [pc, #132]	; (80082dc <prvAddCurrentTaskToDelayedList+0xb8>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4013      	ands	r3, r2
 800825a:	4a20      	ldr	r2, [pc, #128]	; (80082dc <prvAddCurrentTaskToDelayedList+0xb8>)
 800825c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008264:	d10a      	bne.n	800827c <prvAddCurrentTaskToDelayedList+0x58>
 8008266:	683b      	ldr	r3, [r7, #0]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d007      	beq.n	800827c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800826c:	4b1a      	ldr	r3, [pc, #104]	; (80082d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3304      	adds	r3, #4
 8008272:	4619      	mov	r1, r3
 8008274:	481a      	ldr	r0, [pc, #104]	; (80082e0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8008276:	f7ff fa75 	bl	8007764 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800827a:	e026      	b.n	80082ca <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	4413      	add	r3, r2
 8008282:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008284:	4b14      	ldr	r3, [pc, #80]	; (80082d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	68ba      	ldr	r2, [r7, #8]
 800828a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800828c:	68ba      	ldr	r2, [r7, #8]
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	429a      	cmp	r2, r3
 8008292:	d209      	bcs.n	80082a8 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008294:	4b13      	ldr	r3, [pc, #76]	; (80082e4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	4b0f      	ldr	r3, [pc, #60]	; (80082d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	3304      	adds	r3, #4
 800829e:	4619      	mov	r1, r3
 80082a0:	4610      	mov	r0, r2
 80082a2:	f7ff fa83 	bl	80077ac <vListInsert>
}
 80082a6:	e010      	b.n	80082ca <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082a8:	4b0f      	ldr	r3, [pc, #60]	; (80082e8 <prvAddCurrentTaskToDelayedList+0xc4>)
 80082aa:	681a      	ldr	r2, [r3, #0]
 80082ac:	4b0a      	ldr	r3, [pc, #40]	; (80082d8 <prvAddCurrentTaskToDelayedList+0xb4>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3304      	adds	r3, #4
 80082b2:	4619      	mov	r1, r3
 80082b4:	4610      	mov	r0, r2
 80082b6:	f7ff fa79 	bl	80077ac <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082ba:	4b0c      	ldr	r3, [pc, #48]	; (80082ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d202      	bcs.n	80082ca <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80082c4:	4a09      	ldr	r2, [pc, #36]	; (80082ec <prvAddCurrentTaskToDelayedList+0xc8>)
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	6013      	str	r3, [r2, #0]
}
 80082ca:	bf00      	nop
 80082cc:	3710      	adds	r7, #16
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
 80082d2:	bf00      	nop
 80082d4:	200001c0 	.word	0x200001c0
 80082d8:	200000bc 	.word	0x200000bc
 80082dc:	200001c4 	.word	0x200001c4
 80082e0:	200001a8 	.word	0x200001a8
 80082e4:	20000178 	.word	0x20000178
 80082e8:	20000174 	.word	0x20000174
 80082ec:	200001dc 	.word	0x200001dc

080082f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80082f0:	b480      	push	{r7}
 80082f2:	b085      	sub	sp, #20
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	3b04      	subs	r3, #4
 8008300:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008308:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3b04      	subs	r3, #4
 800830e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	f023 0201 	bic.w	r2, r3, #1
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	3b04      	subs	r3, #4
 800831e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008320:	4a0c      	ldr	r2, [pc, #48]	; (8008354 <pxPortInitialiseStack+0x64>)
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	3b14      	subs	r3, #20
 800832a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800832c:	687a      	ldr	r2, [r7, #4]
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	3b04      	subs	r3, #4
 8008336:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	f06f 0202 	mvn.w	r2, #2
 800833e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	3b20      	subs	r3, #32
 8008344:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008346:	68fb      	ldr	r3, [r7, #12]
}
 8008348:	4618      	mov	r0, r3
 800834a:	3714      	adds	r7, #20
 800834c:	46bd      	mov	sp, r7
 800834e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008352:	4770      	bx	lr
 8008354:	08008359 	.word	0x08008359

08008358 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008358:	b480      	push	{r7}
 800835a:	b085      	sub	sp, #20
 800835c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800835e:	2300      	movs	r3, #0
 8008360:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008362:	4b12      	ldr	r3, [pc, #72]	; (80083ac <prvTaskExitError+0x54>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800836a:	d00a      	beq.n	8008382 <prvTaskExitError+0x2a>
	__asm volatile
 800836c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008370:	f383 8811 	msr	BASEPRI, r3
 8008374:	f3bf 8f6f 	isb	sy
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	60fb      	str	r3, [r7, #12]
}
 800837e:	bf00      	nop
 8008380:	e7fe      	b.n	8008380 <prvTaskExitError+0x28>
	__asm volatile
 8008382:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008386:	f383 8811 	msr	BASEPRI, r3
 800838a:	f3bf 8f6f 	isb	sy
 800838e:	f3bf 8f4f 	dsb	sy
 8008392:	60bb      	str	r3, [r7, #8]
}
 8008394:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008396:	bf00      	nop
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2b00      	cmp	r3, #0
 800839c:	d0fc      	beq.n	8008398 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800839e:	bf00      	nop
 80083a0:	bf00      	nop
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr
 80083ac:	20000008 	.word	0x20000008

080083b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80083b0:	4b07      	ldr	r3, [pc, #28]	; (80083d0 <pxCurrentTCBConst2>)
 80083b2:	6819      	ldr	r1, [r3, #0]
 80083b4:	6808      	ldr	r0, [r1, #0]
 80083b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083ba:	f380 8809 	msr	PSP, r0
 80083be:	f3bf 8f6f 	isb	sy
 80083c2:	f04f 0000 	mov.w	r0, #0
 80083c6:	f380 8811 	msr	BASEPRI, r0
 80083ca:	4770      	bx	lr
 80083cc:	f3af 8000 	nop.w

080083d0 <pxCurrentTCBConst2>:
 80083d0:	200000bc 	.word	0x200000bc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80083d4:	bf00      	nop
 80083d6:	bf00      	nop

080083d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80083d8:	4808      	ldr	r0, [pc, #32]	; (80083fc <prvPortStartFirstTask+0x24>)
 80083da:	6800      	ldr	r0, [r0, #0]
 80083dc:	6800      	ldr	r0, [r0, #0]
 80083de:	f380 8808 	msr	MSP, r0
 80083e2:	f04f 0000 	mov.w	r0, #0
 80083e6:	f380 8814 	msr	CONTROL, r0
 80083ea:	b662      	cpsie	i
 80083ec:	b661      	cpsie	f
 80083ee:	f3bf 8f4f 	dsb	sy
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	df00      	svc	0
 80083f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80083fa:	bf00      	nop
 80083fc:	e000ed08 	.word	0xe000ed08

08008400 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008400:	b580      	push	{r7, lr}
 8008402:	b086      	sub	sp, #24
 8008404:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008406:	4b46      	ldr	r3, [pc, #280]	; (8008520 <xPortStartScheduler+0x120>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a46      	ldr	r2, [pc, #280]	; (8008524 <xPortStartScheduler+0x124>)
 800840c:	4293      	cmp	r3, r2
 800840e:	d10a      	bne.n	8008426 <xPortStartScheduler+0x26>
	__asm volatile
 8008410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008414:	f383 8811 	msr	BASEPRI, r3
 8008418:	f3bf 8f6f 	isb	sy
 800841c:	f3bf 8f4f 	dsb	sy
 8008420:	613b      	str	r3, [r7, #16]
}
 8008422:	bf00      	nop
 8008424:	e7fe      	b.n	8008424 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008426:	4b3e      	ldr	r3, [pc, #248]	; (8008520 <xPortStartScheduler+0x120>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a3f      	ldr	r2, [pc, #252]	; (8008528 <xPortStartScheduler+0x128>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d10a      	bne.n	8008446 <xPortStartScheduler+0x46>
	__asm volatile
 8008430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008434:	f383 8811 	msr	BASEPRI, r3
 8008438:	f3bf 8f6f 	isb	sy
 800843c:	f3bf 8f4f 	dsb	sy
 8008440:	60fb      	str	r3, [r7, #12]
}
 8008442:	bf00      	nop
 8008444:	e7fe      	b.n	8008444 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008446:	4b39      	ldr	r3, [pc, #228]	; (800852c <xPortStartScheduler+0x12c>)
 8008448:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800844a:	697b      	ldr	r3, [r7, #20]
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	b2db      	uxtb	r3, r3
 8008450:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	22ff      	movs	r2, #255	; 0xff
 8008456:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008458:	697b      	ldr	r3, [r7, #20]
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	b2db      	uxtb	r3, r3
 800845e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008460:	78fb      	ldrb	r3, [r7, #3]
 8008462:	b2db      	uxtb	r3, r3
 8008464:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008468:	b2da      	uxtb	r2, r3
 800846a:	4b31      	ldr	r3, [pc, #196]	; (8008530 <xPortStartScheduler+0x130>)
 800846c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800846e:	4b31      	ldr	r3, [pc, #196]	; (8008534 <xPortStartScheduler+0x134>)
 8008470:	2207      	movs	r2, #7
 8008472:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008474:	e009      	b.n	800848a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008476:	4b2f      	ldr	r3, [pc, #188]	; (8008534 <xPortStartScheduler+0x134>)
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	3b01      	subs	r3, #1
 800847c:	4a2d      	ldr	r2, [pc, #180]	; (8008534 <xPortStartScheduler+0x134>)
 800847e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008480:	78fb      	ldrb	r3, [r7, #3]
 8008482:	b2db      	uxtb	r3, r3
 8008484:	005b      	lsls	r3, r3, #1
 8008486:	b2db      	uxtb	r3, r3
 8008488:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800848a:	78fb      	ldrb	r3, [r7, #3]
 800848c:	b2db      	uxtb	r3, r3
 800848e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008492:	2b80      	cmp	r3, #128	; 0x80
 8008494:	d0ef      	beq.n	8008476 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008496:	4b27      	ldr	r3, [pc, #156]	; (8008534 <xPortStartScheduler+0x134>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	f1c3 0307 	rsb	r3, r3, #7
 800849e:	2b04      	cmp	r3, #4
 80084a0:	d00a      	beq.n	80084b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80084a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a6:	f383 8811 	msr	BASEPRI, r3
 80084aa:	f3bf 8f6f 	isb	sy
 80084ae:	f3bf 8f4f 	dsb	sy
 80084b2:	60bb      	str	r3, [r7, #8]
}
 80084b4:	bf00      	nop
 80084b6:	e7fe      	b.n	80084b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80084b8:	4b1e      	ldr	r3, [pc, #120]	; (8008534 <xPortStartScheduler+0x134>)
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	021b      	lsls	r3, r3, #8
 80084be:	4a1d      	ldr	r2, [pc, #116]	; (8008534 <xPortStartScheduler+0x134>)
 80084c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80084c2:	4b1c      	ldr	r3, [pc, #112]	; (8008534 <xPortStartScheduler+0x134>)
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084ca:	4a1a      	ldr	r2, [pc, #104]	; (8008534 <xPortStartScheduler+0x134>)
 80084cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	697b      	ldr	r3, [r7, #20]
 80084d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80084d6:	4b18      	ldr	r3, [pc, #96]	; (8008538 <xPortStartScheduler+0x138>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a17      	ldr	r2, [pc, #92]	; (8008538 <xPortStartScheduler+0x138>)
 80084dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80084e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80084e2:	4b15      	ldr	r3, [pc, #84]	; (8008538 <xPortStartScheduler+0x138>)
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	4a14      	ldr	r2, [pc, #80]	; (8008538 <xPortStartScheduler+0x138>)
 80084e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80084ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80084ee:	f000 f8dd 	bl	80086ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80084f2:	4b12      	ldr	r3, [pc, #72]	; (800853c <xPortStartScheduler+0x13c>)
 80084f4:	2200      	movs	r2, #0
 80084f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80084f8:	f000 f8fc 	bl	80086f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80084fc:	4b10      	ldr	r3, [pc, #64]	; (8008540 <xPortStartScheduler+0x140>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a0f      	ldr	r2, [pc, #60]	; (8008540 <xPortStartScheduler+0x140>)
 8008502:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008506:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008508:	f7ff ff66 	bl	80083d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800850c:	f7ff fd3a 	bl	8007f84 <vTaskSwitchContext>
	prvTaskExitError();
 8008510:	f7ff ff22 	bl	8008358 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008514:	2300      	movs	r3, #0
}
 8008516:	4618      	mov	r0, r3
 8008518:	3718      	adds	r7, #24
 800851a:	46bd      	mov	sp, r7
 800851c:	bd80      	pop	{r7, pc}
 800851e:	bf00      	nop
 8008520:	e000ed00 	.word	0xe000ed00
 8008524:	410fc271 	.word	0x410fc271
 8008528:	410fc270 	.word	0x410fc270
 800852c:	e000e400 	.word	0xe000e400
 8008530:	200001e8 	.word	0x200001e8
 8008534:	200001ec 	.word	0x200001ec
 8008538:	e000ed20 	.word	0xe000ed20
 800853c:	20000008 	.word	0x20000008
 8008540:	e000ef34 	.word	0xe000ef34

08008544 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
	__asm volatile
 800854a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800854e:	f383 8811 	msr	BASEPRI, r3
 8008552:	f3bf 8f6f 	isb	sy
 8008556:	f3bf 8f4f 	dsb	sy
 800855a:	607b      	str	r3, [r7, #4]
}
 800855c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800855e:	4b0f      	ldr	r3, [pc, #60]	; (800859c <vPortEnterCritical+0x58>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	3301      	adds	r3, #1
 8008564:	4a0d      	ldr	r2, [pc, #52]	; (800859c <vPortEnterCritical+0x58>)
 8008566:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008568:	4b0c      	ldr	r3, [pc, #48]	; (800859c <vPortEnterCritical+0x58>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b01      	cmp	r3, #1
 800856e:	d10f      	bne.n	8008590 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008570:	4b0b      	ldr	r3, [pc, #44]	; (80085a0 <vPortEnterCritical+0x5c>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	b2db      	uxtb	r3, r3
 8008576:	2b00      	cmp	r3, #0
 8008578:	d00a      	beq.n	8008590 <vPortEnterCritical+0x4c>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	603b      	str	r3, [r7, #0]
}
 800858c:	bf00      	nop
 800858e:	e7fe      	b.n	800858e <vPortEnterCritical+0x4a>
	}
}
 8008590:	bf00      	nop
 8008592:	370c      	adds	r7, #12
 8008594:	46bd      	mov	sp, r7
 8008596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859a:	4770      	bx	lr
 800859c:	20000008 	.word	0x20000008
 80085a0:	e000ed04 	.word	0xe000ed04

080085a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80085a4:	b480      	push	{r7}
 80085a6:	b083      	sub	sp, #12
 80085a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80085aa:	4b12      	ldr	r3, [pc, #72]	; (80085f4 <vPortExitCritical+0x50>)
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10a      	bne.n	80085c8 <vPortExitCritical+0x24>
	__asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	607b      	str	r3, [r7, #4]
}
 80085c4:	bf00      	nop
 80085c6:	e7fe      	b.n	80085c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80085c8:	4b0a      	ldr	r3, [pc, #40]	; (80085f4 <vPortExitCritical+0x50>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3b01      	subs	r3, #1
 80085ce:	4a09      	ldr	r2, [pc, #36]	; (80085f4 <vPortExitCritical+0x50>)
 80085d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80085d2:	4b08      	ldr	r3, [pc, #32]	; (80085f4 <vPortExitCritical+0x50>)
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d105      	bne.n	80085e6 <vPortExitCritical+0x42>
 80085da:	2300      	movs	r3, #0
 80085dc:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80085e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80085e6:	bf00      	nop
 80085e8:	370c      	adds	r7, #12
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	20000008 	.word	0x20000008
	...

08008600 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008600:	f3ef 8009 	mrs	r0, PSP
 8008604:	f3bf 8f6f 	isb	sy
 8008608:	4b15      	ldr	r3, [pc, #84]	; (8008660 <pxCurrentTCBConst>)
 800860a:	681a      	ldr	r2, [r3, #0]
 800860c:	f01e 0f10 	tst.w	lr, #16
 8008610:	bf08      	it	eq
 8008612:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008616:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800861a:	6010      	str	r0, [r2, #0]
 800861c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008620:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008624:	f380 8811 	msr	BASEPRI, r0
 8008628:	f3bf 8f4f 	dsb	sy
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f7ff fca8 	bl	8007f84 <vTaskSwitchContext>
 8008634:	f04f 0000 	mov.w	r0, #0
 8008638:	f380 8811 	msr	BASEPRI, r0
 800863c:	bc09      	pop	{r0, r3}
 800863e:	6819      	ldr	r1, [r3, #0]
 8008640:	6808      	ldr	r0, [r1, #0]
 8008642:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008646:	f01e 0f10 	tst.w	lr, #16
 800864a:	bf08      	it	eq
 800864c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008650:	f380 8809 	msr	PSP, r0
 8008654:	f3bf 8f6f 	isb	sy
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	f3af 8000 	nop.w

08008660 <pxCurrentTCBConst>:
 8008660:	200000bc 	.word	0x200000bc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008664:	bf00      	nop
 8008666:	bf00      	nop

08008668 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
	__asm volatile
 800866e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008672:	f383 8811 	msr	BASEPRI, r3
 8008676:	f3bf 8f6f 	isb	sy
 800867a:	f3bf 8f4f 	dsb	sy
 800867e:	607b      	str	r3, [r7, #4]
}
 8008680:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008682:	f7ff fbc7 	bl	8007e14 <xTaskIncrementTick>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d003      	beq.n	8008694 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800868c:	4b06      	ldr	r3, [pc, #24]	; (80086a8 <xPortSysTickHandler+0x40>)
 800868e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	2300      	movs	r3, #0
 8008696:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	f383 8811 	msr	BASEPRI, r3
}
 800869e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80086a0:	bf00      	nop
 80086a2:	3708      	adds	r7, #8
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	e000ed04 	.word	0xe000ed04

080086ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80086ac:	b480      	push	{r7}
 80086ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80086b0:	4b0b      	ldr	r3, [pc, #44]	; (80086e0 <vPortSetupTimerInterrupt+0x34>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80086b6:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <vPortSetupTimerInterrupt+0x38>)
 80086b8:	2200      	movs	r2, #0
 80086ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80086bc:	4b0a      	ldr	r3, [pc, #40]	; (80086e8 <vPortSetupTimerInterrupt+0x3c>)
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	4a0a      	ldr	r2, [pc, #40]	; (80086ec <vPortSetupTimerInterrupt+0x40>)
 80086c2:	fba2 2303 	umull	r2, r3, r2, r3
 80086c6:	099b      	lsrs	r3, r3, #6
 80086c8:	4a09      	ldr	r2, [pc, #36]	; (80086f0 <vPortSetupTimerInterrupt+0x44>)
 80086ca:	3b01      	subs	r3, #1
 80086cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80086ce:	4b04      	ldr	r3, [pc, #16]	; (80086e0 <vPortSetupTimerInterrupt+0x34>)
 80086d0:	2207      	movs	r2, #7
 80086d2:	601a      	str	r2, [r3, #0]
}
 80086d4:	bf00      	nop
 80086d6:	46bd      	mov	sp, r7
 80086d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086dc:	4770      	bx	lr
 80086de:	bf00      	nop
 80086e0:	e000e010 	.word	0xe000e010
 80086e4:	e000e018 	.word	0xe000e018
 80086e8:	20000074 	.word	0x20000074
 80086ec:	10624dd3 	.word	0x10624dd3
 80086f0:	e000e014 	.word	0xe000e014

080086f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80086f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008704 <vPortEnableVFP+0x10>
 80086f8:	6801      	ldr	r1, [r0, #0]
 80086fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80086fe:	6001      	str	r1, [r0, #0]
 8008700:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008702:	bf00      	nop
 8008704:	e000ed88 	.word	0xe000ed88

08008708 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b08a      	sub	sp, #40	; 0x28
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008710:	2300      	movs	r3, #0
 8008712:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008714:	f7ff fad4 	bl	8007cc0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008718:	4b5b      	ldr	r3, [pc, #364]	; (8008888 <pvPortMalloc+0x180>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2b00      	cmp	r3, #0
 800871e:	d101      	bne.n	8008724 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008720:	f000 f920 	bl	8008964 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008724:	4b59      	ldr	r3, [pc, #356]	; (800888c <pvPortMalloc+0x184>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	4013      	ands	r3, r2
 800872c:	2b00      	cmp	r3, #0
 800872e:	f040 8093 	bne.w	8008858 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d01d      	beq.n	8008774 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008738:	2208      	movs	r2, #8
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	4413      	add	r3, r2
 800873e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	f003 0307 	and.w	r3, r3, #7
 8008746:	2b00      	cmp	r3, #0
 8008748:	d014      	beq.n	8008774 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	f023 0307 	bic.w	r3, r3, #7
 8008750:	3308      	adds	r3, #8
 8008752:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	f003 0307 	and.w	r3, r3, #7
 800875a:	2b00      	cmp	r3, #0
 800875c:	d00a      	beq.n	8008774 <pvPortMalloc+0x6c>
	__asm volatile
 800875e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008762:	f383 8811 	msr	BASEPRI, r3
 8008766:	f3bf 8f6f 	isb	sy
 800876a:	f3bf 8f4f 	dsb	sy
 800876e:	617b      	str	r3, [r7, #20]
}
 8008770:	bf00      	nop
 8008772:	e7fe      	b.n	8008772 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d06e      	beq.n	8008858 <pvPortMalloc+0x150>
 800877a:	4b45      	ldr	r3, [pc, #276]	; (8008890 <pvPortMalloc+0x188>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	687a      	ldr	r2, [r7, #4]
 8008780:	429a      	cmp	r2, r3
 8008782:	d869      	bhi.n	8008858 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008784:	4b43      	ldr	r3, [pc, #268]	; (8008894 <pvPortMalloc+0x18c>)
 8008786:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008788:	4b42      	ldr	r3, [pc, #264]	; (8008894 <pvPortMalloc+0x18c>)
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800878e:	e004      	b.n	800879a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008792:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800879a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	687a      	ldr	r2, [r7, #4]
 80087a0:	429a      	cmp	r2, r3
 80087a2:	d903      	bls.n	80087ac <pvPortMalloc+0xa4>
 80087a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d1f1      	bne.n	8008790 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80087ac:	4b36      	ldr	r3, [pc, #216]	; (8008888 <pvPortMalloc+0x180>)
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087b2:	429a      	cmp	r2, r3
 80087b4:	d050      	beq.n	8008858 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2208      	movs	r2, #8
 80087bc:	4413      	add	r3, r2
 80087be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	681a      	ldr	r2, [r3, #0]
 80087c4:	6a3b      	ldr	r3, [r7, #32]
 80087c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80087c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087ca:	685a      	ldr	r2, [r3, #4]
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	1ad2      	subs	r2, r2, r3
 80087d0:	2308      	movs	r3, #8
 80087d2:	005b      	lsls	r3, r3, #1
 80087d4:	429a      	cmp	r2, r3
 80087d6:	d91f      	bls.n	8008818 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80087d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4413      	add	r3, r2
 80087de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	f003 0307 	and.w	r3, r3, #7
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d00a      	beq.n	8008800 <pvPortMalloc+0xf8>
	__asm volatile
 80087ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087ee:	f383 8811 	msr	BASEPRI, r3
 80087f2:	f3bf 8f6f 	isb	sy
 80087f6:	f3bf 8f4f 	dsb	sy
 80087fa:	613b      	str	r3, [r7, #16]
}
 80087fc:	bf00      	nop
 80087fe:	e7fe      	b.n	80087fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008802:	685a      	ldr	r2, [r3, #4]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	1ad2      	subs	r2, r2, r3
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800880c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008812:	69b8      	ldr	r0, [r7, #24]
 8008814:	f000 f908 	bl	8008a28 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008818:	4b1d      	ldr	r3, [pc, #116]	; (8008890 <pvPortMalloc+0x188>)
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	1ad3      	subs	r3, r2, r3
 8008822:	4a1b      	ldr	r2, [pc, #108]	; (8008890 <pvPortMalloc+0x188>)
 8008824:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008826:	4b1a      	ldr	r3, [pc, #104]	; (8008890 <pvPortMalloc+0x188>)
 8008828:	681a      	ldr	r2, [r3, #0]
 800882a:	4b1b      	ldr	r3, [pc, #108]	; (8008898 <pvPortMalloc+0x190>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	429a      	cmp	r2, r3
 8008830:	d203      	bcs.n	800883a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008832:	4b17      	ldr	r3, [pc, #92]	; (8008890 <pvPortMalloc+0x188>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a18      	ldr	r2, [pc, #96]	; (8008898 <pvPortMalloc+0x190>)
 8008838:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	4b13      	ldr	r3, [pc, #76]	; (800888c <pvPortMalloc+0x184>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	431a      	orrs	r2, r3
 8008844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008846:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800884a:	2200      	movs	r2, #0
 800884c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800884e:	4b13      	ldr	r3, [pc, #76]	; (800889c <pvPortMalloc+0x194>)
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	3301      	adds	r3, #1
 8008854:	4a11      	ldr	r2, [pc, #68]	; (800889c <pvPortMalloc+0x194>)
 8008856:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008858:	f7ff fa40 	bl	8007cdc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	f003 0307 	and.w	r3, r3, #7
 8008862:	2b00      	cmp	r3, #0
 8008864:	d00a      	beq.n	800887c <pvPortMalloc+0x174>
	__asm volatile
 8008866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800886a:	f383 8811 	msr	BASEPRI, r3
 800886e:	f3bf 8f6f 	isb	sy
 8008872:	f3bf 8f4f 	dsb	sy
 8008876:	60fb      	str	r3, [r7, #12]
}
 8008878:	bf00      	nop
 800887a:	e7fe      	b.n	800887a <pvPortMalloc+0x172>
	return pvReturn;
 800887c:	69fb      	ldr	r3, [r7, #28]
}
 800887e:	4618      	mov	r0, r3
 8008880:	3728      	adds	r7, #40	; 0x28
 8008882:	46bd      	mov	sp, r7
 8008884:	bd80      	pop	{r7, pc}
 8008886:	bf00      	nop
 8008888:	20000db0 	.word	0x20000db0
 800888c:	20000dc4 	.word	0x20000dc4
 8008890:	20000db4 	.word	0x20000db4
 8008894:	20000da8 	.word	0x20000da8
 8008898:	20000db8 	.word	0x20000db8
 800889c:	20000dbc 	.word	0x20000dbc

080088a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d04d      	beq.n	800894e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80088b2:	2308      	movs	r3, #8
 80088b4:	425b      	negs	r3, r3
 80088b6:	697a      	ldr	r2, [r7, #20]
 80088b8:	4413      	add	r3, r2
 80088ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80088c0:	693b      	ldr	r3, [r7, #16]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	4b24      	ldr	r3, [pc, #144]	; (8008958 <vPortFree+0xb8>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4013      	ands	r3, r2
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d10a      	bne.n	80088e4 <vPortFree+0x44>
	__asm volatile
 80088ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088d2:	f383 8811 	msr	BASEPRI, r3
 80088d6:	f3bf 8f6f 	isb	sy
 80088da:	f3bf 8f4f 	dsb	sy
 80088de:	60fb      	str	r3, [r7, #12]
}
 80088e0:	bf00      	nop
 80088e2:	e7fe      	b.n	80088e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80088e4:	693b      	ldr	r3, [r7, #16]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00a      	beq.n	8008902 <vPortFree+0x62>
	__asm volatile
 80088ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80088f0:	f383 8811 	msr	BASEPRI, r3
 80088f4:	f3bf 8f6f 	isb	sy
 80088f8:	f3bf 8f4f 	dsb	sy
 80088fc:	60bb      	str	r3, [r7, #8]
}
 80088fe:	bf00      	nop
 8008900:	e7fe      	b.n	8008900 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	685a      	ldr	r2, [r3, #4]
 8008906:	4b14      	ldr	r3, [pc, #80]	; (8008958 <vPortFree+0xb8>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	4013      	ands	r3, r2
 800890c:	2b00      	cmp	r3, #0
 800890e:	d01e      	beq.n	800894e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008910:	693b      	ldr	r3, [r7, #16]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	2b00      	cmp	r3, #0
 8008916:	d11a      	bne.n	800894e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008918:	693b      	ldr	r3, [r7, #16]
 800891a:	685a      	ldr	r2, [r3, #4]
 800891c:	4b0e      	ldr	r3, [pc, #56]	; (8008958 <vPortFree+0xb8>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	43db      	mvns	r3, r3
 8008922:	401a      	ands	r2, r3
 8008924:	693b      	ldr	r3, [r7, #16]
 8008926:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008928:	f7ff f9ca 	bl	8007cc0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	685a      	ldr	r2, [r3, #4]
 8008930:	4b0a      	ldr	r3, [pc, #40]	; (800895c <vPortFree+0xbc>)
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	4413      	add	r3, r2
 8008936:	4a09      	ldr	r2, [pc, #36]	; (800895c <vPortFree+0xbc>)
 8008938:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800893a:	6938      	ldr	r0, [r7, #16]
 800893c:	f000 f874 	bl	8008a28 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008940:	4b07      	ldr	r3, [pc, #28]	; (8008960 <vPortFree+0xc0>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	3301      	adds	r3, #1
 8008946:	4a06      	ldr	r2, [pc, #24]	; (8008960 <vPortFree+0xc0>)
 8008948:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800894a:	f7ff f9c7 	bl	8007cdc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800894e:	bf00      	nop
 8008950:	3718      	adds	r7, #24
 8008952:	46bd      	mov	sp, r7
 8008954:	bd80      	pop	{r7, pc}
 8008956:	bf00      	nop
 8008958:	20000dc4 	.word	0x20000dc4
 800895c:	20000db4 	.word	0x20000db4
 8008960:	20000dc0 	.word	0x20000dc0

08008964 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800896a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800896e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008970:	4b27      	ldr	r3, [pc, #156]	; (8008a10 <prvHeapInit+0xac>)
 8008972:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f003 0307 	and.w	r3, r3, #7
 800897a:	2b00      	cmp	r3, #0
 800897c:	d00c      	beq.n	8008998 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3307      	adds	r3, #7
 8008982:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	f023 0307 	bic.w	r3, r3, #7
 800898a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800898c:	68ba      	ldr	r2, [r7, #8]
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	4a1f      	ldr	r2, [pc, #124]	; (8008a10 <prvHeapInit+0xac>)
 8008994:	4413      	add	r3, r2
 8008996:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800899c:	4a1d      	ldr	r2, [pc, #116]	; (8008a14 <prvHeapInit+0xb0>)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80089a2:	4b1c      	ldr	r3, [pc, #112]	; (8008a14 <prvHeapInit+0xb0>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	68ba      	ldr	r2, [r7, #8]
 80089ac:	4413      	add	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80089b0:	2208      	movs	r2, #8
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	1a9b      	subs	r3, r3, r2
 80089b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	f023 0307 	bic.w	r3, r3, #7
 80089be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	4a15      	ldr	r2, [pc, #84]	; (8008a18 <prvHeapInit+0xb4>)
 80089c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80089c6:	4b14      	ldr	r3, [pc, #80]	; (8008a18 <prvHeapInit+0xb4>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	2200      	movs	r2, #0
 80089cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80089ce:	4b12      	ldr	r3, [pc, #72]	; (8008a18 <prvHeapInit+0xb4>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	2200      	movs	r2, #0
 80089d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	68fa      	ldr	r2, [r7, #12]
 80089de:	1ad2      	subs	r2, r2, r3
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80089e4:	4b0c      	ldr	r3, [pc, #48]	; (8008a18 <prvHeapInit+0xb4>)
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089ec:	683b      	ldr	r3, [r7, #0]
 80089ee:	685b      	ldr	r3, [r3, #4]
 80089f0:	4a0a      	ldr	r2, [pc, #40]	; (8008a1c <prvHeapInit+0xb8>)
 80089f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	4a09      	ldr	r2, [pc, #36]	; (8008a20 <prvHeapInit+0xbc>)
 80089fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80089fc:	4b09      	ldr	r3, [pc, #36]	; (8008a24 <prvHeapInit+0xc0>)
 80089fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8008a02:	601a      	str	r2, [r3, #0]
}
 8008a04:	bf00      	nop
 8008a06:	3714      	adds	r7, #20
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	200001f0 	.word	0x200001f0
 8008a14:	20000da8 	.word	0x20000da8
 8008a18:	20000db0 	.word	0x20000db0
 8008a1c:	20000db8 	.word	0x20000db8
 8008a20:	20000db4 	.word	0x20000db4
 8008a24:	20000dc4 	.word	0x20000dc4

08008a28 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b085      	sub	sp, #20
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008a30:	4b28      	ldr	r3, [pc, #160]	; (8008ad4 <prvInsertBlockIntoFreeList+0xac>)
 8008a32:	60fb      	str	r3, [r7, #12]
 8008a34:	e002      	b.n	8008a3c <prvInsertBlockIntoFreeList+0x14>
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	60fb      	str	r3, [r7, #12]
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	687a      	ldr	r2, [r7, #4]
 8008a42:	429a      	cmp	r2, r3
 8008a44:	d8f7      	bhi.n	8008a36 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	4413      	add	r3, r2
 8008a52:	687a      	ldr	r2, [r7, #4]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d108      	bne.n	8008a6a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	685a      	ldr	r2, [r3, #4]
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	685b      	ldr	r3, [r3, #4]
 8008a60:	441a      	add	r2, r3
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	68ba      	ldr	r2, [r7, #8]
 8008a74:	441a      	add	r2, r3
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	429a      	cmp	r2, r3
 8008a7c:	d118      	bne.n	8008ab0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681a      	ldr	r2, [r3, #0]
 8008a82:	4b15      	ldr	r3, [pc, #84]	; (8008ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	429a      	cmp	r2, r3
 8008a88:	d00d      	beq.n	8008aa6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	685a      	ldr	r2, [r3, #4]
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	441a      	add	r2, r3
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	681a      	ldr	r2, [r3, #0]
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	601a      	str	r2, [r3, #0]
 8008aa4:	e008      	b.n	8008ab8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008aa6:	4b0c      	ldr	r3, [pc, #48]	; (8008ad8 <prvInsertBlockIntoFreeList+0xb0>)
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	601a      	str	r2, [r3, #0]
 8008aae:	e003      	b.n	8008ab8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008ab8:	68fa      	ldr	r2, [r7, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	429a      	cmp	r2, r3
 8008abe:	d002      	beq.n	8008ac6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	687a      	ldr	r2, [r7, #4]
 8008ac4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008ac6:	bf00      	nop
 8008ac8:	3714      	adds	r7, #20
 8008aca:	46bd      	mov	sp, r7
 8008acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad0:	4770      	bx	lr
 8008ad2:	bf00      	nop
 8008ad4:	20000da8 	.word	0x20000da8
 8008ad8:	20000db0 	.word	0x20000db0

08008adc <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8008adc:	b480      	push	{r7}
 8008ade:	b085      	sub	sp, #20
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	60f8      	str	r0, [r7, #12]
 8008ae4:	60b9      	str	r1, [r7, #8]
 8008ae6:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	4a07      	ldr	r2, [pc, #28]	; (8008b08 <vApplicationGetIdleTaskMemory+0x2c>)
 8008aec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	4a06      	ldr	r2, [pc, #24]	; (8008b0c <vApplicationGetIdleTaskMemory+0x30>)
 8008af2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	2280      	movs	r2, #128	; 0x80
 8008af8:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8008afa:	bf00      	nop
 8008afc:	3714      	adds	r7, #20
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	20000dc8 	.word	0x20000dc8
 8008b0c:	20000e1c 	.word	0x20000e1c

08008b10 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8008b1e:	2110      	movs	r1, #16
 8008b20:	20d4      	movs	r0, #212	; 0xd4
 8008b22:	f000 ffd5 	bl	8009ad0 <SENSOR_IO_Read>
 8008b26:	4603      	mov	r3, r0
 8008b28:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 8008b2a:	88fb      	ldrh	r3, [r7, #6]
 8008b2c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 8008b2e:	7bbb      	ldrb	r3, [r7, #14]
 8008b30:	f003 0303 	and.w	r3, r3, #3
 8008b34:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8008b36:	7bba      	ldrb	r2, [r7, #14]
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	4313      	orrs	r3, r2
 8008b3c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 8008b3e:	7bbb      	ldrb	r3, [r7, #14]
 8008b40:	461a      	mov	r2, r3
 8008b42:	2110      	movs	r1, #16
 8008b44:	20d4      	movs	r0, #212	; 0xd4
 8008b46:	f000 ffa9 	bl	8009a9c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 8008b4a:	2112      	movs	r1, #18
 8008b4c:	20d4      	movs	r0, #212	; 0xd4
 8008b4e:	f000 ffbf 	bl	8009ad0 <SENSOR_IO_Read>
 8008b52:	4603      	mov	r3, r0
 8008b54:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 8008b56:	88fb      	ldrh	r3, [r7, #6]
 8008b58:	0a1b      	lsrs	r3, r3, #8
 8008b5a:	b29b      	uxth	r3, r3
 8008b5c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 8008b5e:	7bbb      	ldrb	r3, [r7, #14]
 8008b60:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 8008b64:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 8008b66:	7bba      	ldrb	r2, [r7, #14]
 8008b68:	7bfb      	ldrb	r3, [r7, #15]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 8008b6e:	7bbb      	ldrb	r3, [r7, #14]
 8008b70:	461a      	mov	r2, r3
 8008b72:	2112      	movs	r1, #18
 8008b74:	20d4      	movs	r0, #212	; 0xd4
 8008b76:	f000 ff91 	bl	8009a9c <SENSOR_IO_Write>
}
 8008b7a:	bf00      	nop
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 8008b82:	b580      	push	{r7, lr}
 8008b84:	b082      	sub	sp, #8
 8008b86:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 8008b88:	2300      	movs	r3, #0
 8008b8a:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8008b8c:	2110      	movs	r1, #16
 8008b8e:	20d4      	movs	r0, #212	; 0xd4
 8008b90:	f000 ff9e 	bl	8009ad0 <SENSOR_IO_Read>
 8008b94:	4603      	mov	r3, r0
 8008b96:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8008ba0:	79fb      	ldrb	r3, [r7, #7]
 8008ba2:	461a      	mov	r2, r3
 8008ba4:	2110      	movs	r1, #16
 8008ba6:	20d4      	movs	r0, #212	; 0xd4
 8008ba8:	f000 ff78 	bl	8009a9c <SENSOR_IO_Write>
}
 8008bac:	bf00      	nop
 8008bae:	3708      	adds	r7, #8
 8008bb0:	46bd      	mov	sp, r7
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8008bb8:	f000 ff66 	bl	8009a88 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8008bbc:	210f      	movs	r1, #15
 8008bbe:	20d4      	movs	r0, #212	; 0xd4
 8008bc0:	f000 ff86 	bl	8009ad0 <SENSOR_IO_Read>
 8008bc4:	4603      	mov	r3, r0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	4603      	mov	r3, r0
 8008bd2:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8008bd8:	2115      	movs	r1, #21
 8008bda:	20d4      	movs	r0, #212	; 0xd4
 8008bdc:	f000 ff78 	bl	8009ad0 <SENSOR_IO_Read>
 8008be0:	4603      	mov	r3, r0
 8008be2:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8008be4:	7bfb      	ldrb	r3, [r7, #15]
 8008be6:	f023 0310 	bic.w	r3, r3, #16
 8008bea:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8008bec:	88fb      	ldrh	r3, [r7, #6]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8008bf2:	7bfb      	ldrb	r3, [r7, #15]
 8008bf4:	f043 0310 	orr.w	r3, r3, #16
 8008bf8:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8008bfa:	7bfb      	ldrb	r3, [r7, #15]
 8008bfc:	461a      	mov	r2, r3
 8008bfe:	2115      	movs	r1, #21
 8008c00:	20d4      	movs	r0, #212	; 0xd4
 8008c02:	f000 ff4b 	bl	8009a9c <SENSOR_IO_Write>
}
 8008c06:	bf00      	nop
 8008c08:	3710      	adds	r7, #16
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
	...

08008c10 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b088      	sub	sp, #32
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8008c18:	2300      	movs	r3, #0
 8008c1a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8008c20:	f04f 0300 	mov.w	r3, #0
 8008c24:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8008c26:	2110      	movs	r1, #16
 8008c28:	20d4      	movs	r0, #212	; 0xd4
 8008c2a:	f000 ff51 	bl	8009ad0 <SENSOR_IO_Read>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8008c32:	f107 0208 	add.w	r2, r7, #8
 8008c36:	2306      	movs	r3, #6
 8008c38:	2128      	movs	r1, #40	; 0x28
 8008c3a:	20d4      	movs	r0, #212	; 0xd4
 8008c3c:	f000 ff66 	bl	8009b0c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8008c40:	2300      	movs	r3, #0
 8008c42:	77fb      	strb	r3, [r7, #31]
 8008c44:	e01c      	b.n	8008c80 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8008c46:	7ffb      	ldrb	r3, [r7, #31]
 8008c48:	005b      	lsls	r3, r3, #1
 8008c4a:	3301      	adds	r3, #1
 8008c4c:	3320      	adds	r3, #32
 8008c4e:	443b      	add	r3, r7
 8008c50:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	021b      	lsls	r3, r3, #8
 8008c58:	b29a      	uxth	r2, r3
 8008c5a:	7ffb      	ldrb	r3, [r7, #31]
 8008c5c:	005b      	lsls	r3, r3, #1
 8008c5e:	3320      	adds	r3, #32
 8008c60:	443b      	add	r3, r7
 8008c62:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8008c66:	b29b      	uxth	r3, r3
 8008c68:	4413      	add	r3, r2
 8008c6a:	b29a      	uxth	r2, r3
 8008c6c:	7ffb      	ldrb	r3, [r7, #31]
 8008c6e:	b212      	sxth	r2, r2
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	3320      	adds	r3, #32
 8008c74:	443b      	add	r3, r7
 8008c76:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8008c7a:	7ffb      	ldrb	r3, [r7, #31]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	77fb      	strb	r3, [r7, #31]
 8008c80:	7ffb      	ldrb	r3, [r7, #31]
 8008c82:	2b02      	cmp	r3, #2
 8008c84:	d9df      	bls.n	8008c46 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8008c86:	7dfb      	ldrb	r3, [r7, #23]
 8008c88:	f003 030c 	and.w	r3, r3, #12
 8008c8c:	2b0c      	cmp	r3, #12
 8008c8e:	d829      	bhi.n	8008ce4 <LSM6DSL_AccReadXYZ+0xd4>
 8008c90:	a201      	add	r2, pc, #4	; (adr r2, 8008c98 <LSM6DSL_AccReadXYZ+0x88>)
 8008c92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c96:	bf00      	nop
 8008c98:	08008ccd 	.word	0x08008ccd
 8008c9c:	08008ce5 	.word	0x08008ce5
 8008ca0:	08008ce5 	.word	0x08008ce5
 8008ca4:	08008ce5 	.word	0x08008ce5
 8008ca8:	08008cdf 	.word	0x08008cdf
 8008cac:	08008ce5 	.word	0x08008ce5
 8008cb0:	08008ce5 	.word	0x08008ce5
 8008cb4:	08008ce5 	.word	0x08008ce5
 8008cb8:	08008cd3 	.word	0x08008cd3
 8008cbc:	08008ce5 	.word	0x08008ce5
 8008cc0:	08008ce5 	.word	0x08008ce5
 8008cc4:	08008ce5 	.word	0x08008ce5
 8008cc8:	08008cd9 	.word	0x08008cd9
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8008ccc:	4b18      	ldr	r3, [pc, #96]	; (8008d30 <LSM6DSL_AccReadXYZ+0x120>)
 8008cce:	61bb      	str	r3, [r7, #24]
    break;
 8008cd0:	e008      	b.n	8008ce4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8008cd2:	4b18      	ldr	r3, [pc, #96]	; (8008d34 <LSM6DSL_AccReadXYZ+0x124>)
 8008cd4:	61bb      	str	r3, [r7, #24]
    break;
 8008cd6:	e005      	b.n	8008ce4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8008cd8:	4b17      	ldr	r3, [pc, #92]	; (8008d38 <LSM6DSL_AccReadXYZ+0x128>)
 8008cda:	61bb      	str	r3, [r7, #24]
    break;
 8008cdc:	e002      	b.n	8008ce4 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8008cde:	4b17      	ldr	r3, [pc, #92]	; (8008d3c <LSM6DSL_AccReadXYZ+0x12c>)
 8008ce0:	61bb      	str	r3, [r7, #24]
    break;    
 8008ce2:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	77fb      	strb	r3, [r7, #31]
 8008ce8:	e01a      	b.n	8008d20 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8008cea:	7ffb      	ldrb	r3, [r7, #31]
 8008cec:	005b      	lsls	r3, r3, #1
 8008cee:	3320      	adds	r3, #32
 8008cf0:	443b      	add	r3, r7
 8008cf2:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8008cf6:	ee07 3a90 	vmov	s15, r3
 8008cfa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8008cfe:	edd7 7a06 	vldr	s15, [r7, #24]
 8008d02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008d06:	7ffb      	ldrb	r3, [r7, #31]
 8008d08:	005b      	lsls	r3, r3, #1
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	4413      	add	r3, r2
 8008d0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8008d12:	ee17 2a90 	vmov	r2, s15
 8008d16:	b212      	sxth	r2, r2
 8008d18:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8008d1a:	7ffb      	ldrb	r3, [r7, #31]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	77fb      	strb	r3, [r7, #31]
 8008d20:	7ffb      	ldrb	r3, [r7, #31]
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d9e1      	bls.n	8008cea <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8008d26:	bf00      	nop
 8008d28:	bf00      	nop
 8008d2a:	3720      	adds	r7, #32
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}
 8008d30:	3d79db23 	.word	0x3d79db23
 8008d34:	3df9db23 	.word	0x3df9db23
 8008d38:	3e79db23 	.word	0x3e79db23
 8008d3c:	3ef9db23 	.word	0x3ef9db23

08008d40 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008d40:	b5b0      	push	{r4, r5, r7, lr}
 8008d42:	b096      	sub	sp, #88	; 0x58
 8008d44:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008d46:	f7f7 fbdd 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008d4a:	f000 f87f 	bl	8008e4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008d4e:	f000 facb 	bl	80092e8 <MX_GPIO_Init>
  MX_DMA_Init();
 8008d52:	f000 fa97 	bl	8009284 <MX_DMA_Init>
  MX_DAC1_Init();
 8008d56:	f000 f8cb 	bl	8008ef0 <MX_DAC1_Init>
  MX_TIM2_Init();
 8008d5a:	f000 f9f9 	bl	8009150 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8008d5e:	f000 f8fb 	bl	8008f58 <MX_DFSDM1_Init>
  MX_OCTOSPI1_Init();
 8008d62:	f000 f99f 	bl	80090a4 <MX_OCTOSPI1_Init>
  MX_I2C2_Init();
 8008d66:	f000 f95d 	bl	8009024 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8008d6a:	f000 fa3f 	bl	80091ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8008d6e:	f000 feeb 	bl	8009b48 <BSP_ACCELERO_Init>
  BSP_QSPI_Init();
 8008d72:	f000 ff3f 	bl	8009bf4 <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8008d76:	482c      	ldr	r0, [pc, #176]	; (8008e28 <main+0xe8>)
 8008d78:	f7fc fde2 	bl	8005940 <HAL_TIM_Base_Start_IT>

  if(recorder) {
 8008d7c:	4b2b      	ldr	r3, [pc, #172]	; (8008e2c <main+0xec>)
 8008d7e:	781b      	ldrb	r3, [r3, #0]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d017      	beq.n	8008db4 <main+0x74>
	  for(int i = 1; i < 34; i++) {
 8008d84:	2301      	movs	r3, #1
 8008d86:	657b      	str	r3, [r7, #84]	; 0x54
 8008d88:	e011      	b.n	8008dae <main+0x6e>
		  if(BSP_QSPI_Erase_Block((uint32_t) addr) != QSPI_OK)
 8008d8a:	4b29      	ldr	r3, [pc, #164]	; (8008e30 <main+0xf0>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	4618      	mov	r0, r3
 8008d90:	f001 f886 	bl	8009ea0 <BSP_QSPI_Erase_Block>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <main+0x5e>
		  	Error_Handler();
 8008d9a:	f000 fd7d 	bl	8009898 <Error_Handler>
		  addr = 0x010000*i;
 8008d9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008da0:	041b      	lsls	r3, r3, #16
 8008da2:	461a      	mov	r2, r3
 8008da4:	4b22      	ldr	r3, [pc, #136]	; (8008e30 <main+0xf0>)
 8008da6:	601a      	str	r2, [r3, #0]
	  for(int i = 1; i < 34; i++) {
 8008da8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008daa:	3301      	adds	r3, #1
 8008dac:	657b      	str	r3, [r7, #84]	; 0x54
 8008dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008db0:	2b21      	cmp	r3, #33	; 0x21
 8008db2:	ddea      	ble.n	8008d8a <main+0x4a>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GetSpeedAndDir */
  osThreadDef(GetSpeedAndDir, StartGetSpeedAndDir, osPriorityNormal, 0, 128);
 8008db4:	4b1f      	ldr	r3, [pc, #124]	; (8008e34 <main+0xf4>)
 8008db6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8008dba:	461d      	mov	r5, r3
 8008dbc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008dbe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008dc0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008dc4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GetSpeedAndDirHandle = osThreadCreate(osThread(GetSpeedAndDir), NULL);
 8008dc8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008dcc:	2100      	movs	r1, #0
 8008dce:	4618      	mov	r0, r3
 8008dd0:	f7fe fc3b 	bl	800764a <osThreadCreate>
 8008dd4:	4603      	mov	r3, r0
 8008dd6:	4a18      	ldr	r2, [pc, #96]	; (8008e38 <main+0xf8>)
 8008dd8:	6013      	str	r3, [r2, #0]

  /* definition and creation of AcceleroSensor */
  osThreadDef(AcceleroSensor, StartAcceleroSensor, osPriorityIdle, 0, 128);
 8008dda:	4b18      	ldr	r3, [pc, #96]	; (8008e3c <main+0xfc>)
 8008ddc:	f107 041c 	add.w	r4, r7, #28
 8008de0:	461d      	mov	r5, r3
 8008de2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008de4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008de6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008dea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AcceleroSensorHandle = osThreadCreate(osThread(AcceleroSensor), NULL);
 8008dee:	f107 031c 	add.w	r3, r7, #28
 8008df2:	2100      	movs	r1, #0
 8008df4:	4618      	mov	r0, r3
 8008df6:	f7fe fc28 	bl	800764a <osThreadCreate>
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	4a10      	ldr	r2, [pc, #64]	; (8008e40 <main+0x100>)
 8008dfe:	6013      	str	r3, [r2, #0]

  /* definition and creation of CounterDirGame */
  osThreadDef(CounterDirGame, StartCounterDirGame, osPriorityIdle, 0, 128);
 8008e00:	4b10      	ldr	r3, [pc, #64]	; (8008e44 <main+0x104>)
 8008e02:	463c      	mov	r4, r7
 8008e04:	461d      	mov	r5, r3
 8008e06:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008e08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008e0a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008e0e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CounterDirGameHandle = osThreadCreate(osThread(CounterDirGame), NULL);
 8008e12:	463b      	mov	r3, r7
 8008e14:	2100      	movs	r1, #0
 8008e16:	4618      	mov	r0, r3
 8008e18:	f7fe fc17 	bl	800764a <osThreadCreate>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	4a0a      	ldr	r2, [pc, #40]	; (8008e48 <main+0x108>)
 8008e20:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8008e22:	f7fe fc0b 	bl	800763c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8008e26:	e7fe      	b.n	8008e26 <main+0xe6>
 8008e28:	20001220 	.word	0x20001220
 8008e2c:	2004f50c 	.word	0x2004f50c
 8008e30:	2004f514 	.word	0x2004f514
 8008e34:	0800adc4 	.word	0x0800adc4
 8008e38:	200012fc 	.word	0x200012fc
 8008e3c:	0800ade0 	.word	0x0800ade0
 8008e40:	20001300 	.word	0x20001300
 8008e44:	0800adfc 	.word	0x0800adfc
 8008e48:	20001304 	.word	0x20001304

08008e4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b096      	sub	sp, #88	; 0x58
 8008e50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008e52:	f107 0314 	add.w	r3, r7, #20
 8008e56:	2244      	movs	r2, #68	; 0x44
 8008e58:	2100      	movs	r1, #0
 8008e5a:	4618      	mov	r0, r3
 8008e5c:	f001 ff82 	bl	800ad64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008e60:	463b      	mov	r3, r7
 8008e62:	2200      	movs	r2, #0
 8008e64:	601a      	str	r2, [r3, #0]
 8008e66:	605a      	str	r2, [r3, #4]
 8008e68:	609a      	str	r2, [r3, #8]
 8008e6a:	60da      	str	r2, [r3, #12]
 8008e6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8008e6e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8008e72:	f7fb f879 	bl	8003f68 <HAL_PWREx_ControlVoltageScaling>
 8008e76:	4603      	mov	r3, r0
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d001      	beq.n	8008e80 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8008e7c:	f000 fd0c 	bl	8009898 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8008e80:	2310      	movs	r3, #16
 8008e82:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8008e84:	2301      	movs	r3, #1
 8008e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8008e88:	2300      	movs	r3, #0
 8008e8a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8008e8c:	2360      	movs	r3, #96	; 0x60
 8008e8e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008e90:	2302      	movs	r3, #2
 8008e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8008e94:	2301      	movs	r3, #1
 8008e96:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8008e98:	2301      	movs	r3, #1
 8008e9a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8008e9c:	2328      	movs	r3, #40	; 0x28
 8008e9e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8008ea0:	2302      	movs	r3, #2
 8008ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008eac:	f107 0314 	add.w	r3, r7, #20
 8008eb0:	4618      	mov	r0, r3
 8008eb2:	f7fb f8fd 	bl	80040b0 <HAL_RCC_OscConfig>
 8008eb6:	4603      	mov	r3, r0
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d001      	beq.n	8008ec0 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8008ebc:	f000 fcec 	bl	8009898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008ec0:	230f      	movs	r3, #15
 8008ec2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008ec4:	2303      	movs	r3, #3
 8008ec6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008ec8:	2300      	movs	r3, #0
 8008eca:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8008ed4:	463b      	mov	r3, r7
 8008ed6:	2103      	movs	r1, #3
 8008ed8:	4618      	mov	r0, r3
 8008eda:	f7fb fd03 	bl	80048e4 <HAL_RCC_ClockConfig>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8008ee4:	f000 fcd8 	bl	8009898 <Error_Handler>
  }
}
 8008ee8:	bf00      	nop
 8008eea:	3758      	adds	r7, #88	; 0x58
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bd80      	pop	{r7, pc}

08008ef0 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b08a      	sub	sp, #40	; 0x28
 8008ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	2228      	movs	r2, #40	; 0x28
 8008efa:	2100      	movs	r1, #0
 8008efc:	4618      	mov	r0, r3
 8008efe:	f001 ff31 	bl	800ad64 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8008f02:	4b13      	ldr	r3, [pc, #76]	; (8008f50 <MX_DAC1_Init+0x60>)
 8008f04:	4a13      	ldr	r2, [pc, #76]	; (8008f54 <MX_DAC1_Init+0x64>)
 8008f06:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8008f08:	4811      	ldr	r0, [pc, #68]	; (8008f50 <MX_DAC1_Init+0x60>)
 8008f0a:	f7f7 fca4 	bl	8000856 <HAL_DAC_Init>
 8008f0e:	4603      	mov	r3, r0
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d001      	beq.n	8008f18 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8008f14:	f000 fcc0 	bl	8009898 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8008f1c:	230a      	movs	r3, #10
 8008f1e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008f20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008f24:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8008f26:	2300      	movs	r3, #0
 8008f28:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8008f2e:	2300      	movs	r3, #0
 8008f30:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8008f32:	463b      	mov	r3, r7
 8008f34:	2200      	movs	r2, #0
 8008f36:	4619      	mov	r1, r3
 8008f38:	4805      	ldr	r0, [pc, #20]	; (8008f50 <MX_DAC1_Init+0x60>)
 8008f3a:	f7f7 fdd5 	bl	8000ae8 <HAL_DAC_ConfigChannel>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d001      	beq.n	8008f48 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8008f44:	f000 fca8 	bl	8009898 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8008f48:	bf00      	nop
 8008f4a:	3728      	adds	r7, #40	; 0x28
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}
 8008f50:	2000101c 	.word	0x2000101c
 8008f54:	40007400 	.word	0x40007400

08008f58 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8008f5c:	4b2c      	ldr	r3, [pc, #176]	; (8009010 <MX_DFSDM1_Init+0xb8>)
 8008f5e:	4a2d      	ldr	r2, [pc, #180]	; (8009014 <MX_DFSDM1_Init+0xbc>)
 8008f60:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8008f62:	4b2b      	ldr	r3, [pc, #172]	; (8009010 <MX_DFSDM1_Init+0xb8>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8008f68:	4b29      	ldr	r3, [pc, #164]	; (8009010 <MX_DFSDM1_Init+0xb8>)
 8008f6a:	2201      	movs	r2, #1
 8008f6c:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8008f6e:	4b28      	ldr	r3, [pc, #160]	; (8009010 <MX_DFSDM1_Init+0xb8>)
 8008f70:	2201      	movs	r2, #1
 8008f72:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8008f74:	4b26      	ldr	r3, [pc, #152]	; (8009010 <MX_DFSDM1_Init+0xb8>)
 8008f76:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8008f7a:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 118;
 8008f7c:	4b24      	ldr	r3, [pc, #144]	; (8009010 <MX_DFSDM1_Init+0xb8>)
 8008f7e:	2276      	movs	r2, #118	; 0x76
 8008f80:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8008f82:	4b23      	ldr	r3, [pc, #140]	; (8009010 <MX_DFSDM1_Init+0xb8>)
 8008f84:	2201      	movs	r2, #1
 8008f86:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8008f88:	4821      	ldr	r0, [pc, #132]	; (8009010 <MX_DFSDM1_Init+0xb8>)
 8008f8a:	f7f8 f837 	bl	8000ffc <HAL_DFSDM_FilterInit>
 8008f8e:	4603      	mov	r3, r0
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d001      	beq.n	8008f98 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8008f94:	f000 fc80 	bl	8009898 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8008f98:	4b1f      	ldr	r3, [pc, #124]	; (8009018 <MX_DFSDM1_Init+0xc0>)
 8008f9a:	4a20      	ldr	r2, [pc, #128]	; (800901c <MX_DFSDM1_Init+0xc4>)
 8008f9c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8008f9e:	4b1e      	ldr	r3, [pc, #120]	; (8009018 <MX_DFSDM1_Init+0xc0>)
 8008fa0:	2201      	movs	r2, #1
 8008fa2:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8008fa4:	4b1c      	ldr	r3, [pc, #112]	; (8009018 <MX_DFSDM1_Init+0xc0>)
 8008fa6:	2200      	movs	r2, #0
 8008fa8:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 8008faa:	4b1b      	ldr	r3, [pc, #108]	; (8009018 <MX_DFSDM1_Init+0xc0>)
 8008fac:	2222      	movs	r2, #34	; 0x22
 8008fae:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8008fb0:	4b19      	ldr	r3, [pc, #100]	; (8009018 <MX_DFSDM1_Init+0xc0>)
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8008fb6:	4b18      	ldr	r3, [pc, #96]	; (8009018 <MX_DFSDM1_Init+0xc0>)
 8008fb8:	2200      	movs	r2, #0
 8008fba:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8008fbc:	4b16      	ldr	r3, [pc, #88]	; (8009018 <MX_DFSDM1_Init+0xc0>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8008fc2:	4b15      	ldr	r3, [pc, #84]	; (8009018 <MX_DFSDM1_Init+0xc0>)
 8008fc4:	2200      	movs	r2, #0
 8008fc6:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8008fc8:	4b13      	ldr	r3, [pc, #76]	; (8009018 <MX_DFSDM1_Init+0xc0>)
 8008fca:	2204      	movs	r2, #4
 8008fcc:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8008fce:	4b12      	ldr	r3, [pc, #72]	; (8009018 <MX_DFSDM1_Init+0xc0>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8008fd4:	4b10      	ldr	r3, [pc, #64]	; (8009018 <MX_DFSDM1_Init+0xc0>)
 8008fd6:	2201      	movs	r2, #1
 8008fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8008fda:	4b0f      	ldr	r3, [pc, #60]	; (8009018 <MX_DFSDM1_Init+0xc0>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	; (8009018 <MX_DFSDM1_Init+0xc0>)
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8008fe6:	480c      	ldr	r0, [pc, #48]	; (8009018 <MX_DFSDM1_Init+0xc0>)
 8008fe8:	f7f7 ff48 	bl	8000e7c <HAL_DFSDM_ChannelInit>
 8008fec:	4603      	mov	r3, r0
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d001      	beq.n	8008ff6 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8008ff2:	f000 fc51 	bl	8009898 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	4909      	ldr	r1, [pc, #36]	; (8009020 <MX_DFSDM1_Init+0xc8>)
 8008ffa:	4805      	ldr	r0, [pc, #20]	; (8009010 <MX_DFSDM1_Init+0xb8>)
 8008ffc:	f7f8 f8d8 	bl	80011b0 <HAL_DFSDM_FilterConfigRegChannel>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d001      	beq.n	800900a <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8009006:	f000 fc47 	bl	8009898 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 800900a:	bf00      	nop
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop
 8009010:	20001090 	.word	0x20001090
 8009014:	40016100 	.word	0x40016100
 8009018:	200010e4 	.word	0x200010e4
 800901c:	40016040 	.word	0x40016040
 8009020:	00020004 	.word	0x00020004

08009024 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8009024:	b580      	push	{r7, lr}
 8009026:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8009028:	4b1b      	ldr	r3, [pc, #108]	; (8009098 <MX_I2C2_Init+0x74>)
 800902a:	4a1c      	ldr	r2, [pc, #112]	; (800909c <MX_I2C2_Init+0x78>)
 800902c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 800902e:	4b1a      	ldr	r3, [pc, #104]	; (8009098 <MX_I2C2_Init+0x74>)
 8009030:	4a1b      	ldr	r2, [pc, #108]	; (80090a0 <MX_I2C2_Init+0x7c>)
 8009032:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8009034:	4b18      	ldr	r3, [pc, #96]	; (8009098 <MX_I2C2_Init+0x74>)
 8009036:	2200      	movs	r2, #0
 8009038:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800903a:	4b17      	ldr	r3, [pc, #92]	; (8009098 <MX_I2C2_Init+0x74>)
 800903c:	2201      	movs	r2, #1
 800903e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009040:	4b15      	ldr	r3, [pc, #84]	; (8009098 <MX_I2C2_Init+0x74>)
 8009042:	2200      	movs	r2, #0
 8009044:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8009046:	4b14      	ldr	r3, [pc, #80]	; (8009098 <MX_I2C2_Init+0x74>)
 8009048:	2200      	movs	r2, #0
 800904a:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800904c:	4b12      	ldr	r3, [pc, #72]	; (8009098 <MX_I2C2_Init+0x74>)
 800904e:	2200      	movs	r2, #0
 8009050:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009052:	4b11      	ldr	r3, [pc, #68]	; (8009098 <MX_I2C2_Init+0x74>)
 8009054:	2200      	movs	r2, #0
 8009056:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009058:	4b0f      	ldr	r3, [pc, #60]	; (8009098 <MX_I2C2_Init+0x74>)
 800905a:	2200      	movs	r2, #0
 800905c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800905e:	480e      	ldr	r0, [pc, #56]	; (8009098 <MX_I2C2_Init+0x74>)
 8009060:	f7f9 f8bc 	bl	80021dc <HAL_I2C_Init>
 8009064:	4603      	mov	r3, r0
 8009066:	2b00      	cmp	r3, #0
 8009068:	d001      	beq.n	800906e <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800906a:	f000 fc15 	bl	8009898 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800906e:	2100      	movs	r1, #0
 8009070:	4809      	ldr	r0, [pc, #36]	; (8009098 <MX_I2C2_Init+0x74>)
 8009072:	f7f9 fe45 	bl	8002d00 <HAL_I2CEx_ConfigAnalogFilter>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 800907c:	f000 fc0c 	bl	8009898 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009080:	2100      	movs	r1, #0
 8009082:	4805      	ldr	r0, [pc, #20]	; (8009098 <MX_I2C2_Init+0x74>)
 8009084:	f7f9 fe87 	bl	8002d96 <HAL_I2CEx_ConfigDigitalFilter>
 8009088:	4603      	mov	r3, r0
 800908a:	2b00      	cmp	r3, #0
 800908c:	d001      	beq.n	8009092 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 800908e:	f000 fc03 	bl	8009898 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8009092:	bf00      	nop
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	2000117c 	.word	0x2000117c
 800909c:	40005800 	.word	0x40005800
 80090a0:	10909cec 	.word	0x10909cec

080090a4 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b086      	sub	sp, #24
 80090a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80090aa:	1d3b      	adds	r3, r7, #4
 80090ac:	2200      	movs	r2, #0
 80090ae:	601a      	str	r2, [r3, #0]
 80090b0:	605a      	str	r2, [r3, #4]
 80090b2:	609a      	str	r2, [r3, #8]
 80090b4:	60da      	str	r2, [r3, #12]
 80090b6:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80090b8:	4b23      	ldr	r3, [pc, #140]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 80090ba:	4a24      	ldr	r2, [pc, #144]	; (800914c <MX_OCTOSPI1_Init+0xa8>)
 80090bc:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80090be:	4b22      	ldr	r3, [pc, #136]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 80090c0:	2201      	movs	r2, #1
 80090c2:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80090c4:	4b20      	ldr	r3, [pc, #128]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 80090c6:	2200      	movs	r2, #0
 80090c8:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80090ca:	4b1f      	ldr	r3, [pc, #124]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 80090cc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80090d0:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80090d2:	4b1d      	ldr	r3, [pc, #116]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 80090d4:	2220      	movs	r2, #32
 80090d6:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80090d8:	4b1b      	ldr	r3, [pc, #108]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 80090da:	2201      	movs	r2, #1
 80090dc:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80090de:	4b1a      	ldr	r3, [pc, #104]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 80090e0:	2200      	movs	r2, #0
 80090e2:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80090e4:	4b18      	ldr	r3, [pc, #96]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 80090e6:	2200      	movs	r2, #0
 80090e8:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80090ea:	4b17      	ldr	r3, [pc, #92]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 80090ec:	2201      	movs	r2, #1
 80090ee:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80090f0:	4b15      	ldr	r3, [pc, #84]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 80090f6:	4b14      	ldr	r3, [pc, #80]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 80090fc:	4b12      	ldr	r3, [pc, #72]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 80090fe:	2200      	movs	r2, #0
 8009100:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8009102:	4b11      	ldr	r3, [pc, #68]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 8009104:	2208      	movs	r2, #8
 8009106:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8009108:	480f      	ldr	r0, [pc, #60]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 800910a:	f7f9 fe91 	bl	8002e30 <HAL_OSPI_Init>
 800910e:	4603      	mov	r3, r0
 8009110:	2b00      	cmp	r3, #0
 8009112:	d001      	beq.n	8009118 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8009114:	f000 fbc0 	bl	8009898 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8009118:	2301      	movs	r3, #1
 800911a:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 800911c:	2301      	movs	r3, #1
 800911e:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8009120:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8009124:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009126:	1d3b      	adds	r3, r7, #4
 8009128:	f241 3288 	movw	r2, #5000	; 0x1388
 800912c:	4619      	mov	r1, r3
 800912e:	4806      	ldr	r0, [pc, #24]	; (8009148 <MX_OCTOSPI1_Init+0xa4>)
 8009130:	f7fa f97c 	bl	800342c <HAL_OSPIM_Config>
 8009134:	4603      	mov	r3, r0
 8009136:	2b00      	cmp	r3, #0
 8009138:	d001      	beq.n	800913e <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800913a:	f000 fbad 	bl	8009898 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800913e:	bf00      	nop
 8009140:	3718      	adds	r7, #24
 8009142:	46bd      	mov	sp, r7
 8009144:	bd80      	pop	{r7, pc}
 8009146:	bf00      	nop
 8009148:	200011d0 	.word	0x200011d0
 800914c:	a0001000 	.word	0xa0001000

08009150 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b088      	sub	sp, #32
 8009154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8009156:	f107 0310 	add.w	r3, r7, #16
 800915a:	2200      	movs	r2, #0
 800915c:	601a      	str	r2, [r3, #0]
 800915e:	605a      	str	r2, [r3, #4]
 8009160:	609a      	str	r2, [r3, #8]
 8009162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8009164:	1d3b      	adds	r3, r7, #4
 8009166:	2200      	movs	r2, #0
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	605a      	str	r2, [r3, #4]
 800916c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800916e:	4b1e      	ldr	r3, [pc, #120]	; (80091e8 <MX_TIM2_Init+0x98>)
 8009170:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8009174:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8009176:	4b1c      	ldr	r3, [pc, #112]	; (80091e8 <MX_TIM2_Init+0x98>)
 8009178:	2200      	movs	r2, #0
 800917a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800917c:	4b1a      	ldr	r3, [pc, #104]	; (80091e8 <MX_TIM2_Init+0x98>)
 800917e:	2200      	movs	r2, #0
 8009180:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8009182:	4b19      	ldr	r3, [pc, #100]	; (80091e8 <MX_TIM2_Init+0x98>)
 8009184:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8009188:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800918a:	4b17      	ldr	r3, [pc, #92]	; (80091e8 <MX_TIM2_Init+0x98>)
 800918c:	2200      	movs	r2, #0
 800918e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8009190:	4b15      	ldr	r3, [pc, #84]	; (80091e8 <MX_TIM2_Init+0x98>)
 8009192:	2280      	movs	r2, #128	; 0x80
 8009194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8009196:	4814      	ldr	r0, [pc, #80]	; (80091e8 <MX_TIM2_Init+0x98>)
 8009198:	f7fc fb7a 	bl	8005890 <HAL_TIM_Base_Init>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80091a2:	f000 fb79 	bl	8009898 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80091a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80091aa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80091ac:	f107 0310 	add.w	r3, r7, #16
 80091b0:	4619      	mov	r1, r3
 80091b2:	480d      	ldr	r0, [pc, #52]	; (80091e8 <MX_TIM2_Init+0x98>)
 80091b4:	f7fc fd53 	bl	8005c5e <HAL_TIM_ConfigClockSource>
 80091b8:	4603      	mov	r3, r0
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d001      	beq.n	80091c2 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80091be:	f000 fb6b 	bl	8009898 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80091c2:	2320      	movs	r3, #32
 80091c4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80091ca:	1d3b      	adds	r3, r7, #4
 80091cc:	4619      	mov	r1, r3
 80091ce:	4806      	ldr	r0, [pc, #24]	; (80091e8 <MX_TIM2_Init+0x98>)
 80091d0:	f7fc ff74 	bl	80060bc <HAL_TIMEx_MasterConfigSynchronization>
 80091d4:	4603      	mov	r3, r0
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d001      	beq.n	80091de <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80091da:	f000 fb5d 	bl	8009898 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80091de:	bf00      	nop
 80091e0:	3720      	adds	r7, #32
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	20001220 	.word	0x20001220

080091ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80091f0:	4b22      	ldr	r3, [pc, #136]	; (800927c <MX_USART1_UART_Init+0x90>)
 80091f2:	4a23      	ldr	r2, [pc, #140]	; (8009280 <MX_USART1_UART_Init+0x94>)
 80091f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80091f6:	4b21      	ldr	r3, [pc, #132]	; (800927c <MX_USART1_UART_Init+0x90>)
 80091f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80091fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80091fe:	4b1f      	ldr	r3, [pc, #124]	; (800927c <MX_USART1_UART_Init+0x90>)
 8009200:	2200      	movs	r2, #0
 8009202:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8009204:	4b1d      	ldr	r3, [pc, #116]	; (800927c <MX_USART1_UART_Init+0x90>)
 8009206:	2200      	movs	r2, #0
 8009208:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800920a:	4b1c      	ldr	r3, [pc, #112]	; (800927c <MX_USART1_UART_Init+0x90>)
 800920c:	2200      	movs	r2, #0
 800920e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8009210:	4b1a      	ldr	r3, [pc, #104]	; (800927c <MX_USART1_UART_Init+0x90>)
 8009212:	220c      	movs	r2, #12
 8009214:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8009216:	4b19      	ldr	r3, [pc, #100]	; (800927c <MX_USART1_UART_Init+0x90>)
 8009218:	2200      	movs	r2, #0
 800921a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800921c:	4b17      	ldr	r3, [pc, #92]	; (800927c <MX_USART1_UART_Init+0x90>)
 800921e:	2200      	movs	r2, #0
 8009220:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8009222:	4b16      	ldr	r3, [pc, #88]	; (800927c <MX_USART1_UART_Init+0x90>)
 8009224:	2200      	movs	r2, #0
 8009226:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8009228:	4b14      	ldr	r3, [pc, #80]	; (800927c <MX_USART1_UART_Init+0x90>)
 800922a:	2200      	movs	r2, #0
 800922c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800922e:	4b13      	ldr	r3, [pc, #76]	; (800927c <MX_USART1_UART_Init+0x90>)
 8009230:	2200      	movs	r2, #0
 8009232:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8009234:	4811      	ldr	r0, [pc, #68]	; (800927c <MX_USART1_UART_Init+0x90>)
 8009236:	f7fc ffe7 	bl	8006208 <HAL_UART_Init>
 800923a:	4603      	mov	r3, r0
 800923c:	2b00      	cmp	r3, #0
 800923e:	d001      	beq.n	8009244 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8009240:	f000 fb2a 	bl	8009898 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009244:	2100      	movs	r1, #0
 8009246:	480d      	ldr	r0, [pc, #52]	; (800927c <MX_USART1_UART_Init+0x90>)
 8009248:	f7fe f915 	bl	8007476 <HAL_UARTEx_SetTxFifoThreshold>
 800924c:	4603      	mov	r3, r0
 800924e:	2b00      	cmp	r3, #0
 8009250:	d001      	beq.n	8009256 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8009252:	f000 fb21 	bl	8009898 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8009256:	2100      	movs	r1, #0
 8009258:	4808      	ldr	r0, [pc, #32]	; (800927c <MX_USART1_UART_Init+0x90>)
 800925a:	f7fe f94a 	bl	80074f2 <HAL_UARTEx_SetRxFifoThreshold>
 800925e:	4603      	mov	r3, r0
 8009260:	2b00      	cmp	r3, #0
 8009262:	d001      	beq.n	8009268 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8009264:	f000 fb18 	bl	8009898 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8009268:	4804      	ldr	r0, [pc, #16]	; (800927c <MX_USART1_UART_Init+0x90>)
 800926a:	f7fe f8cb 	bl	8007404 <HAL_UARTEx_DisableFifoMode>
 800926e:	4603      	mov	r3, r0
 8009270:	2b00      	cmp	r3, #0
 8009272:	d001      	beq.n	8009278 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8009274:	f000 fb10 	bl	8009898 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8009278:	bf00      	nop
 800927a:	bd80      	pop	{r7, pc}
 800927c:	2000126c 	.word	0x2000126c
 8009280:	40013800 	.word	0x40013800

08009284 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800928a:	4b16      	ldr	r3, [pc, #88]	; (80092e4 <MX_DMA_Init+0x60>)
 800928c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800928e:	4a15      	ldr	r2, [pc, #84]	; (80092e4 <MX_DMA_Init+0x60>)
 8009290:	f043 0304 	orr.w	r3, r3, #4
 8009294:	6493      	str	r3, [r2, #72]	; 0x48
 8009296:	4b13      	ldr	r3, [pc, #76]	; (80092e4 <MX_DMA_Init+0x60>)
 8009298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800929a:	f003 0304 	and.w	r3, r3, #4
 800929e:	607b      	str	r3, [r7, #4]
 80092a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80092a2:	4b10      	ldr	r3, [pc, #64]	; (80092e4 <MX_DMA_Init+0x60>)
 80092a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092a6:	4a0f      	ldr	r2, [pc, #60]	; (80092e4 <MX_DMA_Init+0x60>)
 80092a8:	f043 0301 	orr.w	r3, r3, #1
 80092ac:	6493      	str	r3, [r2, #72]	; 0x48
 80092ae:	4b0d      	ldr	r3, [pc, #52]	; (80092e4 <MX_DMA_Init+0x60>)
 80092b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092b2:	f003 0301 	and.w	r3, r3, #1
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80092ba:	2200      	movs	r2, #0
 80092bc:	2105      	movs	r1, #5
 80092be:	200b      	movs	r0, #11
 80092c0:	f7f7 fa93 	bl	80007ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80092c4:	200b      	movs	r0, #11
 80092c6:	f7f7 faac 	bl	8000822 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 80092ca:	2200      	movs	r2, #0
 80092cc:	2105      	movs	r1, #5
 80092ce:	200c      	movs	r0, #12
 80092d0:	f7f7 fa8b 	bl	80007ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80092d4:	200c      	movs	r0, #12
 80092d6:	f7f7 faa4 	bl	8000822 <HAL_NVIC_EnableIRQ>

}
 80092da:	bf00      	nop
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	40021000 	.word	0x40021000

080092e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b08a      	sub	sp, #40	; 0x28
 80092ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80092ee:	f107 0314 	add.w	r3, r7, #20
 80092f2:	2200      	movs	r2, #0
 80092f4:	601a      	str	r2, [r3, #0]
 80092f6:	605a      	str	r2, [r3, #4]
 80092f8:	609a      	str	r2, [r3, #8]
 80092fa:	60da      	str	r2, [r3, #12]
 80092fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80092fe:	4b39      	ldr	r3, [pc, #228]	; (80093e4 <MX_GPIO_Init+0xfc>)
 8009300:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009302:	4a38      	ldr	r2, [pc, #224]	; (80093e4 <MX_GPIO_Init+0xfc>)
 8009304:	f043 0310 	orr.w	r3, r3, #16
 8009308:	64d3      	str	r3, [r2, #76]	; 0x4c
 800930a:	4b36      	ldr	r3, [pc, #216]	; (80093e4 <MX_GPIO_Init+0xfc>)
 800930c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800930e:	f003 0310 	and.w	r3, r3, #16
 8009312:	613b      	str	r3, [r7, #16]
 8009314:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009316:	4b33      	ldr	r3, [pc, #204]	; (80093e4 <MX_GPIO_Init+0xfc>)
 8009318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800931a:	4a32      	ldr	r2, [pc, #200]	; (80093e4 <MX_GPIO_Init+0xfc>)
 800931c:	f043 0304 	orr.w	r3, r3, #4
 8009320:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009322:	4b30      	ldr	r3, [pc, #192]	; (80093e4 <MX_GPIO_Init+0xfc>)
 8009324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009326:	f003 0304 	and.w	r3, r3, #4
 800932a:	60fb      	str	r3, [r7, #12]
 800932c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800932e:	4b2d      	ldr	r3, [pc, #180]	; (80093e4 <MX_GPIO_Init+0xfc>)
 8009330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009332:	4a2c      	ldr	r2, [pc, #176]	; (80093e4 <MX_GPIO_Init+0xfc>)
 8009334:	f043 0301 	orr.w	r3, r3, #1
 8009338:	64d3      	str	r3, [r2, #76]	; 0x4c
 800933a:	4b2a      	ldr	r3, [pc, #168]	; (80093e4 <MX_GPIO_Init+0xfc>)
 800933c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	60bb      	str	r3, [r7, #8]
 8009344:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8009346:	4b27      	ldr	r3, [pc, #156]	; (80093e4 <MX_GPIO_Init+0xfc>)
 8009348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800934a:	4a26      	ldr	r2, [pc, #152]	; (80093e4 <MX_GPIO_Init+0xfc>)
 800934c:	f043 0302 	orr.w	r3, r3, #2
 8009350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009352:	4b24      	ldr	r3, [pc, #144]	; (80093e4 <MX_GPIO_Init+0xfc>)
 8009354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009356:	f003 0302 	and.w	r3, r3, #2
 800935a:	607b      	str	r3, [r7, #4]
 800935c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
 800935e:	2200      	movs	r2, #0
 8009360:	2108      	movs	r1, #8
 8009362:	4821      	ldr	r0, [pc, #132]	; (80093e8 <MX_GPIO_Init+0x100>)
 8009364:	f7f8 fef0 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);
 8009368:	2200      	movs	r2, #0
 800936a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800936e:	481f      	ldr	r0, [pc, #124]	; (80093ec <MX_GPIO_Init+0x104>)
 8009370:	f7f8 feea 	bl	8002148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : redLED_Pin */
  GPIO_InitStruct.Pin = redLED_Pin;
 8009374:	2308      	movs	r3, #8
 8009376:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8009378:	2301      	movs	r3, #1
 800937a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800937c:	2300      	movs	r3, #0
 800937e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009380:	2300      	movs	r3, #0
 8009382:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(redLED_GPIO_Port, &GPIO_InitStruct);
 8009384:	f107 0314 	add.w	r3, r7, #20
 8009388:	4619      	mov	r1, r3
 800938a:	4817      	ldr	r0, [pc, #92]	; (80093e8 <MX_GPIO_Init+0x100>)
 800938c:	f7f8 fc58 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : pushButton_Pin */
  GPIO_InitStruct.Pin = pushButton_Pin;
 8009390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009394:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8009396:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800939a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800939c:	2300      	movs	r3, #0
 800939e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pushButton_GPIO_Port, &GPIO_InitStruct);
 80093a0:	f107 0314 	add.w	r3, r7, #20
 80093a4:	4619      	mov	r1, r3
 80093a6:	4812      	ldr	r0, [pc, #72]	; (80093f0 <MX_GPIO_Init+0x108>)
 80093a8:	f7f8 fc4a 	bl	8001c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : greenLED_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin;
 80093ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80093b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80093b2:	2301      	movs	r3, #1
 80093b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80093b6:	2300      	movs	r3, #0
 80093b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80093ba:	2300      	movs	r3, #0
 80093bc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(greenLED_GPIO_Port, &GPIO_InitStruct);
 80093be:	f107 0314 	add.w	r3, r7, #20
 80093c2:	4619      	mov	r1, r3
 80093c4:	4809      	ldr	r0, [pc, #36]	; (80093ec <MX_GPIO_Init+0x104>)
 80093c6:	f7f8 fc3b 	bl	8001c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80093ca:	2200      	movs	r2, #0
 80093cc:	2105      	movs	r1, #5
 80093ce:	2028      	movs	r0, #40	; 0x28
 80093d0:	f7f7 fa0b 	bl	80007ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80093d4:	2028      	movs	r0, #40	; 0x28
 80093d6:	f7f7 fa24 	bl	8000822 <HAL_NVIC_EnableIRQ>

}
 80093da:	bf00      	nop
 80093dc:	3728      	adds	r7, #40	; 0x28
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	40021000 	.word	0x40021000
 80093e8:	48001000 	.word	0x48001000
 80093ec:	48000400 	.word	0x48000400
 80093f0:	48000800 	.word	0x48000800

080093f4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b082      	sub	sp, #8
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	4603      	mov	r3, r0
 80093fc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == pushButton_Pin) {
 80093fe:	88fb      	ldrh	r3, [r7, #6]
 8009400:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009404:	d112      	bne.n	800942c <HAL_GPIO_EXTI_Callback+0x38>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8009406:	2100      	movs	r1, #0
 8009408:	480a      	ldr	r0, [pc, #40]	; (8009434 <HAL_GPIO_EXTI_Callback+0x40>)
 800940a:	f7f7 fb13 	bl	8000a34 <HAL_DAC_Stop_DMA>
		HAL_GPIO_TogglePin(greenLED_GPIO_Port, greenLED_Pin);
 800940e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8009412:	4809      	ldr	r0, [pc, #36]	; (8009438 <HAL_GPIO_EXTI_Callback+0x44>)
 8009414:	f7f8 feb0 	bl	8002178 <HAL_GPIO_TogglePin>

		if(recorder)
 8009418:	4b08      	ldr	r3, [pc, #32]	; (800943c <HAL_GPIO_EXTI_Callback+0x48>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b00      	cmp	r3, #0
 800941e:	d005      	beq.n	800942c <HAL_GPIO_EXTI_Callback+0x38>
			HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, SEQUENCE, SEQUENCE_LENGTH);
 8009420:	f649 4240 	movw	r2, #40000	; 0x9c40
 8009424:	4906      	ldr	r1, [pc, #24]	; (8009440 <HAL_GPIO_EXTI_Callback+0x4c>)
 8009426:	4807      	ldr	r0, [pc, #28]	; (8009444 <HAL_GPIO_EXTI_Callback+0x50>)
 8009428:	f7f7 ff08 	bl	800123c <HAL_DFSDM_FilterRegularStart_DMA>
//			if (UART_status != HAL_OK)
//				HAL_GPIO_TogglePin(redLED_GPIO_Port, redLED_Pin);
//			}
//		}
	}
}
 800942c:	bf00      	nop
 800942e:	3708      	adds	r7, #8
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}
 8009434:	2000101c 	.word	0x2000101c
 8009438:	48000400 	.word	0x48000400
 800943c:	2004f50c 	.word	0x2004f50c
 8009440:	20001308 	.word	0x20001308
 8009444:	20001090 	.word	0x20001090

08009448 <HAL_DAC_ConvCpltCallbackCh1>:


void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af02      	add	r7, sp, #8
 800944e:	6078      	str	r0, [r7, #4]

	if(player) {
 8009450:	4b1e      	ldr	r3, [pc, #120]	; (80094cc <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d035      	beq.n	80094c4 <HAL_DAC_ConvCpltCallbackCh1+0x7c>
	j = j + 1;
 8009458:	4b1d      	ldr	r3, [pc, #116]	; (80094d0 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 800945a:	781b      	ldrb	r3, [r3, #0]
 800945c:	3301      	adds	r3, #1
 800945e:	b2da      	uxtb	r2, r3
 8009460:	4b1b      	ldr	r3, [pc, #108]	; (80094d0 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 8009462:	701a      	strb	r2, [r3, #0]
	test = address[seq[j]];
 8009464:	4b1a      	ldr	r3, [pc, #104]	; (80094d0 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	461a      	mov	r2, r3
 800946a:	4b1a      	ldr	r3, [pc, #104]	; (80094d4 <HAL_DAC_ConvCpltCallbackCh1+0x8c>)
 800946c:	5c9b      	ldrb	r3, [r3, r2]
 800946e:	461a      	mov	r2, r3
 8009470:	4b19      	ldr	r3, [pc, #100]	; (80094d8 <HAL_DAC_ConvCpltCallbackCh1+0x90>)
 8009472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009476:	461a      	mov	r2, r3
 8009478:	4b18      	ldr	r3, [pc, #96]	; (80094dc <HAL_DAC_ConvCpltCallbackCh1+0x94>)
 800947a:	601a      	str	r2, [r3, #0]
	if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  address[seq[j]], sizeof(SEQUENCE)) != QSPI_OK)
 800947c:	4b14      	ldr	r3, [pc, #80]	; (80094d0 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	461a      	mov	r2, r3
 8009482:	4b14      	ldr	r3, [pc, #80]	; (80094d4 <HAL_DAC_ConvCpltCallbackCh1+0x8c>)
 8009484:	5c9b      	ldrb	r3, [r3, r2]
 8009486:	461a      	mov	r2, r3
 8009488:	4b13      	ldr	r3, [pc, #76]	; (80094d8 <HAL_DAC_ConvCpltCallbackCh1+0x90>)
 800948a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800948e:	4a14      	ldr	r2, [pc, #80]	; (80094e0 <HAL_DAC_ConvCpltCallbackCh1+0x98>)
 8009490:	4619      	mov	r1, r3
 8009492:	4814      	ldr	r0, [pc, #80]	; (80094e4 <HAL_DAC_ConvCpltCallbackCh1+0x9c>)
 8009494:	f000 fc2c 	bl	8009cf0 <BSP_QSPI_Read>
 8009498:	4603      	mov	r3, r0
 800949a:	2b00      	cmp	r3, #0
 800949c:	d001      	beq.n	80094a2 <HAL_DAC_ConvCpltCallbackCh1+0x5a>
		Error_Handler();
 800949e:	f000 f9fb 	bl	8009898 <Error_Handler>

	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 80094a2:	2300      	movs	r3, #0
 80094a4:	9300      	str	r3, [sp, #0]
 80094a6:	f649 4340 	movw	r3, #40000	; 0x9c40
 80094aa:	4a0e      	ldr	r2, [pc, #56]	; (80094e4 <HAL_DAC_ConvCpltCallbackCh1+0x9c>)
 80094ac:	2100      	movs	r1, #0
 80094ae:	480e      	ldr	r0, [pc, #56]	; (80094e8 <HAL_DAC_ConvCpltCallbackCh1+0xa0>)
 80094b0:	f7f7 f9f4 	bl	800089c <HAL_DAC_Start_DMA>

	if (j == 5) {
 80094b4:	4b06      	ldr	r3, [pc, #24]	; (80094d0 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	2b05      	cmp	r3, #5
 80094ba:	d103      	bne.n	80094c4 <HAL_DAC_ConvCpltCallbackCh1+0x7c>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80094bc:	2100      	movs	r1, #0
 80094be:	480a      	ldr	r0, [pc, #40]	; (80094e8 <HAL_DAC_ConvCpltCallbackCh1+0xa0>)
 80094c0:	f7f7 fab8 	bl	8000a34 <HAL_DAC_Stop_DMA>
	}
	}
}
 80094c4:	bf00      	nop
 80094c6:	3708      	adds	r7, #8
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bd80      	pop	{r7, pc}
 80094cc:	20000068 	.word	0x20000068
 80094d0:	2004f518 	.word	0x2004f518
 80094d4:	2000006c 	.word	0x2000006c
 80094d8:	20000040 	.word	0x20000040
 80094dc:	2004f510 	.word	0x2004f510
 80094e0:	00027100 	.word	0x00027100
 80094e4:	20028408 	.word	0x20028408
 80094e8:	2000101c 	.word	0x2000101c

080094ec <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter ) {
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b086      	sub	sp, #24
 80094f0:	af02      	add	r7, sp, #8
 80094f2:	6078      	str	r0, [r7, #4]

	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 80094f4:	4837      	ldr	r0, [pc, #220]	; (80095d4 <HAL_DFSDM_FilterRegConvCpltCallback+0xe8>)
 80094f6:	f7f7 ff23 	bl	8001340 <HAL_DFSDM_FilterRegularStop_DMA>
	for(uint32_t i = 0 ; i < SEQUENCE_LENGTH; i++ ){
 80094fa:	2300      	movs	r3, #0
 80094fc:	60fb      	str	r3, [r7, #12]
 80094fe:	e02b      	b.n	8009558 <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>
		SEQUENCE[i] = SEQUENCE[i] >> 8; // 24 bit signed  :  −8,388,608 : 8,388,607
 8009500:	4a35      	ldr	r2, [pc, #212]	; (80095d8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009508:	121a      	asrs	r2, r3, #8
 800950a:	4933      	ldr	r1, [pc, #204]	; (80095d8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 800950c:	68fb      	ldr	r3, [r7, #12]
 800950e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(SEQUENCE[i] < 0 ) {
 8009512:	4a31      	ldr	r2, [pc, #196]	; (80095d8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800951a:	2b00      	cmp	r3, #0
 800951c:	da09      	bge.n	8009532 <HAL_DFSDM_FilterRegConvCpltCallback+0x46>
			SEQUENCE[i]= SEQUENCE[i]+ (1<<24);
 800951e:	4a2e      	ldr	r2, [pc, #184]	; (80095d8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009526:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 800952a:	492b      	ldr	r1, [pc, #172]	; (80095d8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if( SEQUENCE[i] >= 4096) {
 8009532:	4a29      	ldr	r2, [pc, #164]	; (80095d8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800953a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800953e:	db08      	blt.n	8009552 <HAL_DFSDM_FilterRegConvCpltCallback+0x66>
			SEQUENCE[i] = SEQUENCE[i] >> 12;
 8009540:	4a25      	ldr	r2, [pc, #148]	; (80095d8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009548:	131a      	asrs	r2, r3, #12
 800954a:	4923      	ldr	r1, [pc, #140]	; (80095d8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint32_t i = 0 ; i < SEQUENCE_LENGTH; i++ ){
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	3301      	adds	r3, #1
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800955e:	4293      	cmp	r3, r2
 8009560:	d9ce      	bls.n	8009500 <HAL_DFSDM_FilterRegConvCpltCallback+0x14>
		}
	}
	if(BSP_QSPI_Write((uint8_t *) SEQUENCE, (uint32_t) address[pushButtonCounter], sizeof(SEQUENCE)) != QSPI_OK){
 8009562:	4b1e      	ldr	r3, [pc, #120]	; (80095dc <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	4a1e      	ldr	r2, [pc, #120]	; (80095e0 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 8009568:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800956c:	4a1d      	ldr	r2, [pc, #116]	; (80095e4 <HAL_DFSDM_FilterRegConvCpltCallback+0xf8>)
 800956e:	4619      	mov	r1, r3
 8009570:	4819      	ldr	r0, [pc, #100]	; (80095d8 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 8009572:	f000 fc0f 	bl	8009d94 <BSP_QSPI_Write>
 8009576:	4603      	mov	r3, r0
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>
		Error_Handler();
 800957c:	f000 f98c 	bl	8009898 <Error_Handler>
	}
	if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t) address[pushButtonCounter], sizeof(SEQUENCE)) != QSPI_OK){
 8009580:	4b16      	ldr	r3, [pc, #88]	; (80095dc <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a16      	ldr	r2, [pc, #88]	; (80095e0 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 8009586:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800958a:	4a16      	ldr	r2, [pc, #88]	; (80095e4 <HAL_DFSDM_FilterRegConvCpltCallback+0xf8>)
 800958c:	4619      	mov	r1, r3
 800958e:	4816      	ldr	r0, [pc, #88]	; (80095e8 <HAL_DFSDM_FilterRegConvCpltCallback+0xfc>)
 8009590:	f000 fbae 	bl	8009cf0 <BSP_QSPI_Read>
 8009594:	4603      	mov	r3, r0
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <HAL_DFSDM_FilterRegConvCpltCallback+0xb2>
		Error_Handler();
 800959a:	f000 f97d 	bl	8009898 <Error_Handler>
	}
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800959e:	2300      	movs	r3, #0
 80095a0:	9300      	str	r3, [sp, #0]
 80095a2:	f649 4340 	movw	r3, #40000	; 0x9c40
 80095a6:	4a10      	ldr	r2, [pc, #64]	; (80095e8 <HAL_DFSDM_FilterRegConvCpltCallback+0xfc>)
 80095a8:	2100      	movs	r1, #0
 80095aa:	4810      	ldr	r0, [pc, #64]	; (80095ec <HAL_DFSDM_FilterRegConvCpltCallback+0x100>)
 80095ac:	f7f7 f976 	bl	800089c <HAL_DAC_Start_DMA>
	pushButtonCounter = (pushButtonCounter + 1) % 10;
 80095b0:	4b0a      	ldr	r3, [pc, #40]	; (80095dc <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	1c59      	adds	r1, r3, #1
 80095b6:	4b0e      	ldr	r3, [pc, #56]	; (80095f0 <HAL_DFSDM_FilterRegConvCpltCallback+0x104>)
 80095b8:	fba3 2301 	umull	r2, r3, r3, r1
 80095bc:	08da      	lsrs	r2, r3, #3
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	005b      	lsls	r3, r3, #1
 80095c6:	1aca      	subs	r2, r1, r3
 80095c8:	4b04      	ldr	r3, [pc, #16]	; (80095dc <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 80095ca:	601a      	str	r2, [r3, #0]

}
 80095cc:	bf00      	nop
 80095ce:	3710      	adds	r7, #16
 80095d0:	46bd      	mov	sp, r7
 80095d2:	bd80      	pop	{r7, pc}
 80095d4:	20001090 	.word	0x20001090
 80095d8:	20001308 	.word	0x20001308
 80095dc:	2004f508 	.word	0x2004f508
 80095e0:	20000040 	.word	0x20000040
 80095e4:	00027100 	.word	0x00027100
 80095e8:	20028408 	.word	0x20028408
 80095ec:	2000101c 	.word	0x2000101c
 80095f0:	cccccccd 	.word	0xcccccccd

080095f4 <StartGetSpeedAndDir>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGetSpeedAndDir */
void StartGetSpeedAndDir(void const * argument)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80095fc:	2001      	movs	r0, #1
 80095fe:	f7fe f870 	bl	80076e2 <osDelay>
    if(counterRestart == 30) {
 8009602:	4b38      	ldr	r3, [pc, #224]	; (80096e4 <StartGetSpeedAndDir+0xf0>)
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	2b1e      	cmp	r3, #30
 8009608:	d1f8      	bne.n	80095fc <StartGetSpeedAndDir+0x8>
		for(int i = 0 ; i < arrayIndex; i ++) { //reinitializing arrays
 800960a:	2300      	movs	r3, #0
 800960c:	60fb      	str	r3, [r7, #12]
 800960e:	e010      	b.n	8009632 <StartGetSpeedAndDir+0x3e>
			arrayX[i] = 0;
 8009610:	4a35      	ldr	r2, [pc, #212]	; (80096e8 <StartGetSpeedAndDir+0xf4>)
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4413      	add	r3, r2
 8009618:	f04f 0200 	mov.w	r2, #0
 800961c:	601a      	str	r2, [r3, #0]
			arrayY[i] = 0;
 800961e:	4a33      	ldr	r2, [pc, #204]	; (80096ec <StartGetSpeedAndDir+0xf8>)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	009b      	lsls	r3, r3, #2
 8009624:	4413      	add	r3, r2
 8009626:	f04f 0200 	mov.w	r2, #0
 800962a:	601a      	str	r2, [r3, #0]
		for(int i = 0 ; i < arrayIndex; i ++) { //reinitializing arrays
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	3301      	adds	r3, #1
 8009630:	60fb      	str	r3, [r7, #12]
 8009632:	4b2f      	ldr	r3, [pc, #188]	; (80096f0 <StartGetSpeedAndDir+0xfc>)
 8009634:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009638:	461a      	mov	r2, r3
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	4293      	cmp	r3, r2
 800963e:	dbe7      	blt.n	8009610 <StartGetSpeedAndDir+0x1c>
		}
		if(maxX2 > maxY2) {
 8009640:	4b2c      	ldr	r3, [pc, #176]	; (80096f4 <StartGetSpeedAndDir+0x100>)
 8009642:	ed93 7a00 	vldr	s14, [r3]
 8009646:	4b2c      	ldr	r3, [pc, #176]	; (80096f8 <StartGetSpeedAndDir+0x104>)
 8009648:	edd3 7a00 	vldr	s15, [r3]
 800964c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8009650:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009654:	dd19      	ble.n	800968a <StartGetSpeedAndDir+0x96>
			if(maxX2 > 500) {
 8009656:	4b27      	ldr	r3, [pc, #156]	; (80096f4 <StartGetSpeedAndDir+0x100>)
 8009658:	edd3 7a00 	vldr	s15, [r3]
 800965c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80096fc <StartGetSpeedAndDir+0x108>
 8009660:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009664:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009668:	dd07      	ble.n	800967a <StartGetSpeedAndDir+0x86>
				directionResult[resultIndex] = 'X'; //fast horizontal
 800966a:	4b25      	ldr	r3, [pc, #148]	; (8009700 <StartGetSpeedAndDir+0x10c>)
 800966c:	f993 3000 	ldrsb.w	r3, [r3]
 8009670:	461a      	mov	r2, r3
 8009672:	4b24      	ldr	r3, [pc, #144]	; (8009704 <StartGetSpeedAndDir+0x110>)
 8009674:	2158      	movs	r1, #88	; 0x58
 8009676:	5499      	strb	r1, [r3, r2]
 8009678:	e020      	b.n	80096bc <StartGetSpeedAndDir+0xc8>
			} else {
				directionResult[resultIndex] = 'x'; //slow horizontal
 800967a:	4b21      	ldr	r3, [pc, #132]	; (8009700 <StartGetSpeedAndDir+0x10c>)
 800967c:	f993 3000 	ldrsb.w	r3, [r3]
 8009680:	461a      	mov	r2, r3
 8009682:	4b20      	ldr	r3, [pc, #128]	; (8009704 <StartGetSpeedAndDir+0x110>)
 8009684:	2178      	movs	r1, #120	; 0x78
 8009686:	5499      	strb	r1, [r3, r2]
 8009688:	e018      	b.n	80096bc <StartGetSpeedAndDir+0xc8>
			}
		} else {
			if(maxY2 > 500) {
 800968a:	4b1b      	ldr	r3, [pc, #108]	; (80096f8 <StartGetSpeedAndDir+0x104>)
 800968c:	edd3 7a00 	vldr	s15, [r3]
 8009690:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80096fc <StartGetSpeedAndDir+0x108>
 8009694:	eef4 7ac7 	vcmpe.f32	s15, s14
 8009698:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800969c:	dd07      	ble.n	80096ae <StartGetSpeedAndDir+0xba>
				directionResult[resultIndex] = 'Y'; //fast vertical
 800969e:	4b18      	ldr	r3, [pc, #96]	; (8009700 <StartGetSpeedAndDir+0x10c>)
 80096a0:	f993 3000 	ldrsb.w	r3, [r3]
 80096a4:	461a      	mov	r2, r3
 80096a6:	4b17      	ldr	r3, [pc, #92]	; (8009704 <StartGetSpeedAndDir+0x110>)
 80096a8:	2159      	movs	r1, #89	; 0x59
 80096aa:	5499      	strb	r1, [r3, r2]
 80096ac:	e006      	b.n	80096bc <StartGetSpeedAndDir+0xc8>
			} else {
				directionResult[resultIndex] = 'y'; //slow vertical
 80096ae:	4b14      	ldr	r3, [pc, #80]	; (8009700 <StartGetSpeedAndDir+0x10c>)
 80096b0:	f993 3000 	ldrsb.w	r3, [r3]
 80096b4:	461a      	mov	r2, r3
 80096b6:	4b13      	ldr	r3, [pc, #76]	; (8009704 <StartGetSpeedAndDir+0x110>)
 80096b8:	2179      	movs	r1, #121	; 0x79
 80096ba:	5499      	strb	r1, [r3, r2]
			}
		}
		resultIndex++;
 80096bc:	4b10      	ldr	r3, [pc, #64]	; (8009700 <StartGetSpeedAndDir+0x10c>)
 80096be:	f993 3000 	ldrsb.w	r3, [r3]
 80096c2:	b2db      	uxtb	r3, r3
 80096c4:	3301      	adds	r3, #1
 80096c6:	b2db      	uxtb	r3, r3
 80096c8:	b25a      	sxtb	r2, r3
 80096ca:	4b0d      	ldr	r3, [pc, #52]	; (8009700 <StartGetSpeedAndDir+0x10c>)
 80096cc:	701a      	strb	r2, [r3, #0]
		arrayIndex = 0;
 80096ce:	4b08      	ldr	r3, [pc, #32]	; (80096f0 <StartGetSpeedAndDir+0xfc>)
 80096d0:	2200      	movs	r2, #0
 80096d2:	801a      	strh	r2, [r3, #0]
		startedMoving = 0;
 80096d4:	4b0c      	ldr	r3, [pc, #48]	; (8009708 <StartGetSpeedAndDir+0x114>)
 80096d6:	2200      	movs	r2, #0
 80096d8:	701a      	strb	r2, [r3, #0]
		counterRestart = 0;
 80096da:	4b02      	ldr	r3, [pc, #8]	; (80096e4 <StartGetSpeedAndDir+0xf0>)
 80096dc:	2200      	movs	r2, #0
 80096de:	601a      	str	r2, [r3, #0]
    osDelay(1);
 80096e0:	e78c      	b.n	80095fc <StartGetSpeedAndDir+0x8>
 80096e2:	bf00      	nop
 80096e4:	200533c0 	.word	0x200533c0
 80096e8:	2004f530 	.word	0x2004f530
 80096ec:	20051470 	.word	0x20051470
 80096f0:	200533b0 	.word	0x200533b0
 80096f4:	2004f528 	.word	0x2004f528
 80096f8:	2004f52c 	.word	0x2004f52c
 80096fc:	43fa0000 	.word	0x43fa0000
 8009700:	200533c4 	.word	0x200533c4
 8009704:	200533bc 	.word	0x200533bc
 8009708:	200533c6 	.word	0x200533c6

0800970c <StartAcceleroSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAcceleroSensor */
void StartAcceleroSensor(void const * argument)
{
 800970c:	b580      	push	{r7, lr}
 800970e:	b082      	sub	sp, #8
 8009710:	af00      	add	r7, sp, #0
 8009712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAcceleroSensor */
  BSP_ACCELERO_Init();
 8009714:	f000 fa18 	bl	8009b48 <BSP_ACCELERO_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8009718:	2001      	movs	r0, #1
 800971a:	f7fd ffe2 	bl	80076e2 <osDelay>
    if(player && directionGame && !counterInitial) {
 800971e:	4b42      	ldr	r3, [pc, #264]	; (8009828 <StartAcceleroSensor+0x11c>)
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	2b00      	cmp	r3, #0
 8009724:	d022      	beq.n	800976c <StartAcceleroSensor+0x60>
 8009726:	4b41      	ldr	r3, [pc, #260]	; (800982c <StartAcceleroSensor+0x120>)
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d01e      	beq.n	800976c <StartAcceleroSensor+0x60>
 800972e:	4b40      	ldr	r3, [pc, #256]	; (8009830 <StartAcceleroSensor+0x124>)
 8009730:	f993 3000 	ldrsb.w	r3, [r3]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d119      	bne.n	800976c <StartAcceleroSensor+0x60>
    	  osDelay(10000);
 8009738:	f242 7010 	movw	r0, #10000	; 0x2710
 800973c:	f7fd ffd1 	bl	80076e2 <osDelay>
   		  BSP_ACCELERO_AccGetXYZ(accelerometer);
 8009740:	483c      	ldr	r0, [pc, #240]	; (8009834 <StartAcceleroSensor+0x128>)
 8009742:	f000 fa3f 	bl	8009bc4 <BSP_ACCELERO_AccGetXYZ>
   		  acc_x1 = accelerometer[0];
 8009746:	4b3b      	ldr	r3, [pc, #236]	; (8009834 <StartAcceleroSensor+0x128>)
 8009748:	f9b3 2000 	ldrsh.w	r2, [r3]
 800974c:	4b3a      	ldr	r3, [pc, #232]	; (8009838 <StartAcceleroSensor+0x12c>)
 800974e:	801a      	strh	r2, [r3, #0]
   		  acc_y1 = accelerometer[1];
 8009750:	4b38      	ldr	r3, [pc, #224]	; (8009834 <StartAcceleroSensor+0x128>)
 8009752:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8009756:	4b39      	ldr	r3, [pc, #228]	; (800983c <StartAcceleroSensor+0x130>)
 8009758:	801a      	strh	r2, [r3, #0]
   		  counterInitial++;
 800975a:	4b35      	ldr	r3, [pc, #212]	; (8009830 <StartAcceleroSensor+0x124>)
 800975c:	f993 3000 	ldrsb.w	r3, [r3]
 8009760:	b2db      	uxtb	r3, r3
 8009762:	3301      	adds	r3, #1
 8009764:	b2db      	uxtb	r3, r3
 8009766:	b25a      	sxtb	r2, r3
 8009768:	4b31      	ldr	r3, [pc, #196]	; (8009830 <StartAcceleroSensor+0x124>)
 800976a:	701a      	strb	r2, [r3, #0]
   	  }
    if(player && directionGame && (resultIndex < 4)) {
 800976c:	4b2e      	ldr	r3, [pc, #184]	; (8009828 <StartAcceleroSensor+0x11c>)
 800976e:	781b      	ldrb	r3, [r3, #0]
 8009770:	2b00      	cmp	r3, #0
 8009772:	d0d1      	beq.n	8009718 <StartAcceleroSensor+0xc>
 8009774:	4b2d      	ldr	r3, [pc, #180]	; (800982c <StartAcceleroSensor+0x120>)
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	2b00      	cmp	r3, #0
 800977a:	d0cd      	beq.n	8009718 <StartAcceleroSensor+0xc>
 800977c:	4b30      	ldr	r3, [pc, #192]	; (8009840 <StartAcceleroSensor+0x134>)
 800977e:	f993 3000 	ldrsb.w	r3, [r3]
 8009782:	2b03      	cmp	r3, #3
 8009784:	dcc8      	bgt.n	8009718 <StartAcceleroSensor+0xc>
   		BSP_ACCELERO_AccGetXYZ(accelerometer);
 8009786:	482b      	ldr	r0, [pc, #172]	; (8009834 <StartAcceleroSensor+0x128>)
 8009788:	f000 fa1c 	bl	8009bc4 <BSP_ACCELERO_AccGetXYZ>
   		if(accelerometer[0]- acc_x1  > 100 || accelerometer[1] - acc_y1 > 100) {
 800978c:	4b29      	ldr	r3, [pc, #164]	; (8009834 <StartAcceleroSensor+0x128>)
 800978e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8009792:	461a      	mov	r2, r3
 8009794:	4b28      	ldr	r3, [pc, #160]	; (8009838 <StartAcceleroSensor+0x12c>)
 8009796:	f9b3 3000 	ldrsh.w	r3, [r3]
 800979a:	1ad3      	subs	r3, r2, r3
 800979c:	2b64      	cmp	r3, #100	; 0x64
 800979e:	dc09      	bgt.n	80097b4 <StartAcceleroSensor+0xa8>
 80097a0:	4b24      	ldr	r3, [pc, #144]	; (8009834 <StartAcceleroSensor+0x128>)
 80097a2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80097a6:	461a      	mov	r2, r3
 80097a8:	4b24      	ldr	r3, [pc, #144]	; (800983c <StartAcceleroSensor+0x130>)
 80097aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097ae:	1ad3      	subs	r3, r2, r3
 80097b0:	2b64      	cmp	r3, #100	; 0x64
 80097b2:	ddb1      	ble.n	8009718 <StartAcceleroSensor+0xc>
   		  arrayX[arrayIndex] = (float32_t) accelerometer[0];
 80097b4:	4b1f      	ldr	r3, [pc, #124]	; (8009834 <StartAcceleroSensor+0x128>)
 80097b6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80097ba:	4b22      	ldr	r3, [pc, #136]	; (8009844 <StartAcceleroSensor+0x138>)
 80097bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097c0:	ee07 2a90 	vmov	s15, r2
 80097c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097c8:	4a1f      	ldr	r2, [pc, #124]	; (8009848 <StartAcceleroSensor+0x13c>)
 80097ca:	009b      	lsls	r3, r3, #2
 80097cc:	4413      	add	r3, r2
 80097ce:	edc3 7a00 	vstr	s15, [r3]
   		  arrayY[arrayIndex] = (float32_t) accelerometer[1];
 80097d2:	4b18      	ldr	r3, [pc, #96]	; (8009834 <StartAcceleroSensor+0x128>)
 80097d4:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80097d8:	4b1a      	ldr	r3, [pc, #104]	; (8009844 <StartAcceleroSensor+0x138>)
 80097da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097de:	ee07 2a90 	vmov	s15, r2
 80097e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80097e6:	4a19      	ldr	r2, [pc, #100]	; (800984c <StartAcceleroSensor+0x140>)
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4413      	add	r3, r2
 80097ec:	edc3 7a00 	vstr	s15, [r3]
   		  arrayIndex++;
 80097f0:	4b14      	ldr	r3, [pc, #80]	; (8009844 <StartAcceleroSensor+0x138>)
 80097f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80097f6:	b29b      	uxth	r3, r3
 80097f8:	3301      	adds	r3, #1
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	b21a      	sxth	r2, r3
 80097fe:	4b11      	ldr	r3, [pc, #68]	; (8009844 <StartAcceleroSensor+0x138>)
 8009800:	801a      	strh	r2, [r3, #0]
   		  arm_max_f32(&arrayX, (uint32_t) 2000,  &maxX2,  &maxIndexX);
 8009802:	4b13      	ldr	r3, [pc, #76]	; (8009850 <StartAcceleroSensor+0x144>)
 8009804:	4a13      	ldr	r2, [pc, #76]	; (8009854 <StartAcceleroSensor+0x148>)
 8009806:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800980a:	480f      	ldr	r0, [pc, #60]	; (8009848 <StartAcceleroSensor+0x13c>)
 800980c:	f001 fa1a 	bl	800ac44 <arm_max_f32>
   		  arm_max_f32(&arrayY, (uint32_t) 2000,  &maxY2,  &maxIndexY);
 8009810:	4b11      	ldr	r3, [pc, #68]	; (8009858 <StartAcceleroSensor+0x14c>)
 8009812:	4a12      	ldr	r2, [pc, #72]	; (800985c <StartAcceleroSensor+0x150>)
 8009814:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8009818:	480c      	ldr	r0, [pc, #48]	; (800984c <StartAcceleroSensor+0x140>)
 800981a:	f001 fa13 	bl	800ac44 <arm_max_f32>
   		  startedMoving = 1;
 800981e:	4b10      	ldr	r3, [pc, #64]	; (8009860 <StartAcceleroSensor+0x154>)
 8009820:	2201      	movs	r2, #1
 8009822:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 8009824:	e778      	b.n	8009718 <StartAcceleroSensor+0xc>
 8009826:	bf00      	nop
 8009828:	20000068 	.word	0x20000068
 800982c:	20000071 	.word	0x20000071
 8009830:	200533c5 	.word	0x200533c5
 8009834:	2004f51c 	.word	0x2004f51c
 8009838:	2004f522 	.word	0x2004f522
 800983c:	2004f524 	.word	0x2004f524
 8009840:	200533c4 	.word	0x200533c4
 8009844:	200533b0 	.word	0x200533b0
 8009848:	2004f530 	.word	0x2004f530
 800984c:	20051470 	.word	0x20051470
 8009850:	200533b4 	.word	0x200533b4
 8009854:	2004f528 	.word	0x2004f528
 8009858:	200533b8 	.word	0x200533b8
 800985c:	2004f52c 	.word	0x2004f52c
 8009860:	200533c6 	.word	0x200533c6

08009864 <StartCounterDirGame>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCounterDirGame */
void StartCounterDirGame(void const * argument)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCounterDirGame */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800986c:	2001      	movs	r0, #1
 800986e:	f7fd ff38 	bl	80076e2 <osDelay>
    if(startedMoving) {
 8009872:	4b07      	ldr	r3, [pc, #28]	; (8009890 <StartCounterDirGame+0x2c>)
 8009874:	f993 3000 	ldrsb.w	r3, [r3]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d0f7      	beq.n	800986c <StartCounterDirGame+0x8>
    	osDelay(100);
 800987c:	2064      	movs	r0, #100	; 0x64
 800987e:	f7fd ff30 	bl	80076e2 <osDelay>
    	counterRestart++;
 8009882:	4b04      	ldr	r3, [pc, #16]	; (8009894 <StartCounterDirGame+0x30>)
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	3301      	adds	r3, #1
 8009888:	4a02      	ldr	r2, [pc, #8]	; (8009894 <StartCounterDirGame+0x30>)
 800988a:	6013      	str	r3, [r2, #0]
    osDelay(1);
 800988c:	e7ee      	b.n	800986c <StartCounterDirGame+0x8>
 800988e:	bf00      	nop
 8009890:	200533c6 	.word	0x200533c6
 8009894:	200533c0 	.word	0x200533c0

08009898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8009898:	b480      	push	{r7}
 800989a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//	HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
	__BKPT();
 800989c:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 800989e:	bf00      	nop
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	b08a      	sub	sp, #40	; 0x28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80098b0:	4b27      	ldr	r3, [pc, #156]	; (8009950 <I2Cx_MspInit+0xa8>)
 80098b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098b4:	4a26      	ldr	r2, [pc, #152]	; (8009950 <I2Cx_MspInit+0xa8>)
 80098b6:	f043 0302 	orr.w	r3, r3, #2
 80098ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80098bc:	4b24      	ldr	r3, [pc, #144]	; (8009950 <I2Cx_MspInit+0xa8>)
 80098be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098c0:	f003 0302 	and.w	r3, r3, #2
 80098c4:	613b      	str	r3, [r7, #16]
 80098c6:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 80098c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80098cc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80098ce:	2312      	movs	r3, #18
 80098d0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80098d2:	2301      	movs	r3, #1
 80098d4:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80098d6:	2303      	movs	r3, #3
 80098d8:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 80098da:	2304      	movs	r3, #4
 80098dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80098de:	f107 0314 	add.w	r3, r7, #20
 80098e2:	4619      	mov	r1, r3
 80098e4:	481b      	ldr	r0, [pc, #108]	; (8009954 <I2Cx_MspInit+0xac>)
 80098e6:	f7f8 f9ab 	bl	8001c40 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80098ea:	f107 0314 	add.w	r3, r7, #20
 80098ee:	4619      	mov	r1, r3
 80098f0:	4818      	ldr	r0, [pc, #96]	; (8009954 <I2Cx_MspInit+0xac>)
 80098f2:	f7f8 f9a5 	bl	8001c40 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 80098f6:	4b16      	ldr	r3, [pc, #88]	; (8009950 <I2Cx_MspInit+0xa8>)
 80098f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098fa:	4a15      	ldr	r2, [pc, #84]	; (8009950 <I2Cx_MspInit+0xa8>)
 80098fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009900:	6593      	str	r3, [r2, #88]	; 0x58
 8009902:	4b13      	ldr	r3, [pc, #76]	; (8009950 <I2Cx_MspInit+0xa8>)
 8009904:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009906:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800990a:	60fb      	str	r3, [r7, #12]
 800990c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800990e:	4b10      	ldr	r3, [pc, #64]	; (8009950 <I2Cx_MspInit+0xa8>)
 8009910:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009912:	4a0f      	ldr	r2, [pc, #60]	; (8009950 <I2Cx_MspInit+0xa8>)
 8009914:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009918:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800991a:	4b0d      	ldr	r3, [pc, #52]	; (8009950 <I2Cx_MspInit+0xa8>)
 800991c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800991e:	4a0c      	ldr	r2, [pc, #48]	; (8009950 <I2Cx_MspInit+0xa8>)
 8009920:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8009924:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8009926:	2200      	movs	r2, #0
 8009928:	210f      	movs	r1, #15
 800992a:	2021      	movs	r0, #33	; 0x21
 800992c:	f7f6 ff5d 	bl	80007ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8009930:	2021      	movs	r0, #33	; 0x21
 8009932:	f7f6 ff76 	bl	8000822 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8009936:	2200      	movs	r2, #0
 8009938:	210f      	movs	r1, #15
 800993a:	2022      	movs	r0, #34	; 0x22
 800993c:	f7f6 ff55 	bl	80007ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 8009940:	2022      	movs	r0, #34	; 0x22
 8009942:	f7f6 ff6e 	bl	8000822 <HAL_NVIC_EnableIRQ>
}
 8009946:	bf00      	nop
 8009948:	3728      	adds	r7, #40	; 0x28
 800994a:	46bd      	mov	sp, r7
 800994c:	bd80      	pop	{r7, pc}
 800994e:	bf00      	nop
 8009950:	40021000 	.word	0x40021000
 8009954:	48000400 	.word	0x48000400

08009958 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8009958:	b580      	push	{r7, lr}
 800995a:	b082      	sub	sp, #8
 800995c:	af00      	add	r7, sp, #0
 800995e:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a12      	ldr	r2, [pc, #72]	; (80099ac <I2Cx_Init+0x54>)
 8009964:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	4a11      	ldr	r2, [pc, #68]	; (80099b0 <I2Cx_Init+0x58>)
 800996a:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2200      	movs	r2, #0
 8009970:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	2200      	movs	r2, #0
 800997c:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	2200      	movs	r2, #0
 8009982:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2200      	movs	r2, #0
 800998e:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 8009990:	6878      	ldr	r0, [r7, #4]
 8009992:	f7ff ff89 	bl	80098a8 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 8009996:	6878      	ldr	r0, [r7, #4]
 8009998:	f7f8 fc20 	bl	80021dc <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800999c:	2100      	movs	r1, #0
 800999e:	6878      	ldr	r0, [r7, #4]
 80099a0:	f7f9 f9ae 	bl	8002d00 <HAL_I2CEx_ConfigAnalogFilter>
}
 80099a4:	bf00      	nop
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	40005800 	.word	0x40005800
 80099b0:	00702681 	.word	0x00702681

080099b4 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08a      	sub	sp, #40	; 0x28
 80099b8:	af04      	add	r7, sp, #16
 80099ba:	60f8      	str	r0, [r7, #12]
 80099bc:	4608      	mov	r0, r1
 80099be:	4611      	mov	r1, r2
 80099c0:	461a      	mov	r2, r3
 80099c2:	4603      	mov	r3, r0
 80099c4:	72fb      	strb	r3, [r7, #11]
 80099c6:	460b      	mov	r3, r1
 80099c8:	813b      	strh	r3, [r7, #8]
 80099ca:	4613      	mov	r3, r2
 80099cc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80099d2:	7afb      	ldrb	r3, [r7, #11]
 80099d4:	b299      	uxth	r1, r3
 80099d6:	88f8      	ldrh	r0, [r7, #6]
 80099d8:	893a      	ldrh	r2, [r7, #8]
 80099da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80099de:	9302      	str	r3, [sp, #8]
 80099e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80099e2:	9301      	str	r3, [sp, #4]
 80099e4:	6a3b      	ldr	r3, [r7, #32]
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	4603      	mov	r3, r0
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f7f8 fdc8 	bl	8002580 <HAL_I2C_Mem_Read>
 80099f0:	4603      	mov	r3, r0
 80099f2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80099f4:	7dfb      	ldrb	r3, [r7, #23]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d004      	beq.n	8009a04 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80099fa:	7afb      	ldrb	r3, [r7, #11]
 80099fc:	4619      	mov	r1, r3
 80099fe:	68f8      	ldr	r0, [r7, #12]
 8009a00:	f000 f832 	bl	8009a68 <I2Cx_Error>
  }
  return status;
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a06:	4618      	mov	r0, r3
 8009a08:	3718      	adds	r7, #24
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	bd80      	pop	{r7, pc}

08009a0e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 8009a0e:	b580      	push	{r7, lr}
 8009a10:	b08a      	sub	sp, #40	; 0x28
 8009a12:	af04      	add	r7, sp, #16
 8009a14:	60f8      	str	r0, [r7, #12]
 8009a16:	4608      	mov	r0, r1
 8009a18:	4611      	mov	r1, r2
 8009a1a:	461a      	mov	r2, r3
 8009a1c:	4603      	mov	r3, r0
 8009a1e:	72fb      	strb	r3, [r7, #11]
 8009a20:	460b      	mov	r3, r1
 8009a22:	813b      	strh	r3, [r7, #8]
 8009a24:	4613      	mov	r3, r2
 8009a26:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8009a28:	2300      	movs	r3, #0
 8009a2a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8009a2c:	7afb      	ldrb	r3, [r7, #11]
 8009a2e:	b299      	uxth	r1, r3
 8009a30:	88f8      	ldrh	r0, [r7, #6]
 8009a32:	893a      	ldrh	r2, [r7, #8]
 8009a34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009a38:	9302      	str	r3, [sp, #8]
 8009a3a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009a3c:	9301      	str	r3, [sp, #4]
 8009a3e:	6a3b      	ldr	r3, [r7, #32]
 8009a40:	9300      	str	r3, [sp, #0]
 8009a42:	4603      	mov	r3, r0
 8009a44:	68f8      	ldr	r0, [r7, #12]
 8009a46:	f7f8 fc87 	bl	8002358 <HAL_I2C_Mem_Write>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8009a4e:	7dfb      	ldrb	r3, [r7, #23]
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d004      	beq.n	8009a5e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8009a54:	7afb      	ldrb	r3, [r7, #11]
 8009a56:	4619      	mov	r1, r3
 8009a58:	68f8      	ldr	r0, [r7, #12]
 8009a5a:	f000 f805 	bl	8009a68 <I2Cx_Error>
  }
  return status;
 8009a5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a60:	4618      	mov	r0, r3
 8009a62:	3718      	adds	r7, #24
 8009a64:	46bd      	mov	sp, r7
 8009a66:	bd80      	pop	{r7, pc}

08009a68 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b082      	sub	sp, #8
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7f8 fc40 	bl	80022fa <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8009a7a:	6878      	ldr	r0, [r7, #4]
 8009a7c:	f7ff ff6c 	bl	8009958 <I2Cx_Init>
}
 8009a80:	bf00      	nop
 8009a82:	3708      	adds	r7, #8
 8009a84:	46bd      	mov	sp, r7
 8009a86:	bd80      	pop	{r7, pc}

08009a88 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 8009a88:	b580      	push	{r7, lr}
 8009a8a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 8009a8c:	4802      	ldr	r0, [pc, #8]	; (8009a98 <SENSOR_IO_Init+0x10>)
 8009a8e:	f7ff ff63 	bl	8009958 <I2Cx_Init>
}
 8009a92:	bf00      	nop
 8009a94:	bd80      	pop	{r7, pc}
 8009a96:	bf00      	nop
 8009a98:	200533c8 	.word	0x200533c8

08009a9c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b084      	sub	sp, #16
 8009aa0:	af02      	add	r7, sp, #8
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	71fb      	strb	r3, [r7, #7]
 8009aa6:	460b      	mov	r3, r1
 8009aa8:	71bb      	strb	r3, [r7, #6]
 8009aaa:	4613      	mov	r3, r2
 8009aac:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8009aae:	79bb      	ldrb	r3, [r7, #6]
 8009ab0:	b29a      	uxth	r2, r3
 8009ab2:	79f9      	ldrb	r1, [r7, #7]
 8009ab4:	2301      	movs	r3, #1
 8009ab6:	9301      	str	r3, [sp, #4]
 8009ab8:	1d7b      	adds	r3, r7, #5
 8009aba:	9300      	str	r3, [sp, #0]
 8009abc:	2301      	movs	r3, #1
 8009abe:	4803      	ldr	r0, [pc, #12]	; (8009acc <SENSOR_IO_Write+0x30>)
 8009ac0:	f7ff ffa5 	bl	8009a0e <I2Cx_WriteMultiple>
}
 8009ac4:	bf00      	nop
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	200533c8 	.word	0x200533c8

08009ad0 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b086      	sub	sp, #24
 8009ad4:	af02      	add	r7, sp, #8
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	460a      	mov	r2, r1
 8009ada:	71fb      	strb	r3, [r7, #7]
 8009adc:	4613      	mov	r3, r2
 8009ade:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8009ae0:	2300      	movs	r3, #0
 8009ae2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8009ae4:	79bb      	ldrb	r3, [r7, #6]
 8009ae6:	b29a      	uxth	r2, r3
 8009ae8:	79f9      	ldrb	r1, [r7, #7]
 8009aea:	2301      	movs	r3, #1
 8009aec:	9301      	str	r3, [sp, #4]
 8009aee:	f107 030f 	add.w	r3, r7, #15
 8009af2:	9300      	str	r3, [sp, #0]
 8009af4:	2301      	movs	r3, #1
 8009af6:	4804      	ldr	r0, [pc, #16]	; (8009b08 <SENSOR_IO_Read+0x38>)
 8009af8:	f7ff ff5c 	bl	80099b4 <I2Cx_ReadMultiple>

  return read_value;
 8009afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009afe:	4618      	mov	r0, r3
 8009b00:	3710      	adds	r7, #16
 8009b02:	46bd      	mov	sp, r7
 8009b04:	bd80      	pop	{r7, pc}
 8009b06:	bf00      	nop
 8009b08:	200533c8 	.word	0x200533c8

08009b0c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 8009b0c:	b580      	push	{r7, lr}
 8009b0e:	b084      	sub	sp, #16
 8009b10:	af02      	add	r7, sp, #8
 8009b12:	603a      	str	r2, [r7, #0]
 8009b14:	461a      	mov	r2, r3
 8009b16:	4603      	mov	r3, r0
 8009b18:	71fb      	strb	r3, [r7, #7]
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	71bb      	strb	r3, [r7, #6]
 8009b1e:	4613      	mov	r3, r2
 8009b20:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 8009b22:	79bb      	ldrb	r3, [r7, #6]
 8009b24:	b29a      	uxth	r2, r3
 8009b26:	79f9      	ldrb	r1, [r7, #7]
 8009b28:	88bb      	ldrh	r3, [r7, #4]
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	9300      	str	r3, [sp, #0]
 8009b30:	2301      	movs	r3, #1
 8009b32:	4804      	ldr	r0, [pc, #16]	; (8009b44 <SENSOR_IO_ReadMultiple+0x38>)
 8009b34:	f7ff ff3e 	bl	80099b4 <I2Cx_ReadMultiple>
 8009b38:	4603      	mov	r3, r0
 8009b3a:	b29b      	uxth	r3, r3
}
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	3708      	adds	r7, #8
 8009b40:	46bd      	mov	sp, r7
 8009b42:	bd80      	pop	{r7, pc}
 8009b44:	200533c8 	.word	0x200533c8

08009b48 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 8009b48:	b580      	push	{r7, lr}
 8009b4a:	b084      	sub	sp, #16
 8009b4c:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 8009b4e:	2300      	movs	r3, #0
 8009b50:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 8009b52:	2300      	movs	r3, #0
 8009b54:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 8009b56:	4b19      	ldr	r3, [pc, #100]	; (8009bbc <BSP_ACCELERO_Init+0x74>)
 8009b58:	689b      	ldr	r3, [r3, #8]
 8009b5a:	4798      	blx	r3
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	2b6a      	cmp	r3, #106	; 0x6a
 8009b60:	d002      	beq.n	8009b68 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 8009b62:	2301      	movs	r3, #1
 8009b64:	73fb      	strb	r3, [r7, #15]
 8009b66:	e024      	b.n	8009bb2 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 8009b68:	4b15      	ldr	r3, [pc, #84]	; (8009bc0 <BSP_ACCELERO_Init+0x78>)
 8009b6a:	4a14      	ldr	r2, [pc, #80]	; (8009bbc <BSP_ACCELERO_Init+0x74>)
 8009b6c:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 8009b6e:	2330      	movs	r3, #48	; 0x30
 8009b70:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 8009b72:	2300      	movs	r3, #0
 8009b74:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_16G;
 8009b76:	2304      	movs	r3, #4
 8009b78:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 8009b7a:	2340      	movs	r3, #64	; 0x40
 8009b7c:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 8009b7e:	2300      	movs	r3, #0
 8009b80:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 8009b82:	2300      	movs	r3, #0
 8009b84:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 8009b86:	797a      	ldrb	r2, [r7, #5]
 8009b88:	7abb      	ldrb	r3, [r7, #10]
 8009b8a:	4313      	orrs	r3, r2
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 8009b90:	7a3b      	ldrb	r3, [r7, #8]
 8009b92:	f043 0304 	orr.w	r3, r3, #4
 8009b96:	b2db      	uxtb	r3, r3
 8009b98:	021b      	lsls	r3, r3, #8
 8009b9a:	b21a      	sxth	r2, r3
 8009b9c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8009ba0:	4313      	orrs	r3, r2
 8009ba2:	b21b      	sxth	r3, r3
 8009ba4:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 8009ba6:	4b06      	ldr	r3, [pc, #24]	; (8009bc0 <BSP_ACCELERO_Init+0x78>)
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	89ba      	ldrh	r2, [r7, #12]
 8009bae:	4610      	mov	r0, r2
 8009bb0:	4798      	blx	r3
  }  

  return ret;
 8009bb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009bb4:	4618      	mov	r0, r3
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	2000000c 	.word	0x2000000c
 8009bc0:	2005341c 	.word	0x2005341c

08009bc4 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b082      	sub	sp, #8
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 8009bcc:	4b08      	ldr	r3, [pc, #32]	; (8009bf0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d009      	beq.n	8009be8 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 8009bd4:	4b06      	ldr	r3, [pc, #24]	; (8009bf0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d004      	beq.n	8009be8 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 8009bde:	4b04      	ldr	r3, [pc, #16]	; (8009bf0 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009be4:	6878      	ldr	r0, [r7, #4]
 8009be6:	4798      	blx	r3
    }
  }
}
 8009be8:	bf00      	nop
 8009bea:	3708      	adds	r7, #8
 8009bec:	46bd      	mov	sp, r7
 8009bee:	bd80      	pop	{r7, pc}
 8009bf0:	2005341c 	.word	0x2005341c

08009bf4 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 8009bfa:	4b3b      	ldr	r3, [pc, #236]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009bfc:	4a3b      	ldr	r2, [pc, #236]	; (8009cec <BSP_QSPI_Init+0xf8>)
 8009bfe:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 8009c00:	4839      	ldr	r0, [pc, #228]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c02:	f7f9 f9bf 	bl	8002f84 <HAL_OSPI_DeInit>
 8009c06:	4603      	mov	r3, r0
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	d001      	beq.n	8009c10 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8009c0c:	2301      	movs	r3, #1
 8009c0e:	e067      	b.n	8009ce0 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8009c10:	f000 f990 	bl	8009f34 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8009c14:	4b34      	ldr	r3, [pc, #208]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c16:	2204      	movs	r2, #4
 8009c18:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8009c1a:	4b33      	ldr	r3, [pc, #204]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8009c20:	4b31      	ldr	r3, [pc, #196]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c22:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c26:	60da      	str	r2, [r3, #12]
 8009c28:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8009c2c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	fa93 f3a3 	rbit	r3, r3
 8009c34:	607b      	str	r3, [r7, #4]
  return result;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d101      	bne.n	8009c44 <BSP_QSPI_Init+0x50>
    return 32U;
 8009c40:	2320      	movs	r3, #32
 8009c42:	e003      	b.n	8009c4c <BSP_QSPI_Init+0x58>
  return __builtin_clz(value);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	fab3 f383 	clz	r3, r3
 8009c4a:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8009c4c:	461a      	mov	r2, r3
 8009c4e:	4b26      	ldr	r3, [pc, #152]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c50:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8009c52:	4b25      	ldr	r3, [pc, #148]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c54:	2201      	movs	r2, #1
 8009c56:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8009c58:	4b23      	ldr	r3, [pc, #140]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 8009c5e:	4b22      	ldr	r3, [pc, #136]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c60:	2200      	movs	r2, #0
 8009c62:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8009c64:	4b20      	ldr	r3, [pc, #128]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c66:	2204      	movs	r2, #4
 8009c68:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8009c6a:	4b1f      	ldr	r3, [pc, #124]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8009c70:	4b1d      	ldr	r3, [pc, #116]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c76:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8009c78:	4b1b      	ldr	r3, [pc, #108]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 8009c7e:	4b1a      	ldr	r3, [pc, #104]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c80:	2200      	movs	r2, #0
 8009c82:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8009c84:	4818      	ldr	r0, [pc, #96]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c86:	f7f9 f8d3 	bl	8002e30 <HAL_OSPI_Init>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8009c90:	2301      	movs	r3, #1
 8009c92:	e025      	b.n	8009ce0 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8009c94:	4814      	ldr	r0, [pc, #80]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009c96:	f000 f98d 	bl	8009fb4 <QSPI_ResetMemory>
 8009c9a:	4603      	mov	r3, r0
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d001      	beq.n	8009ca4 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8009ca0:	2304      	movs	r3, #4
 8009ca2:	e01d      	b.n	8009ce0 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8009ca4:	2101      	movs	r1, #1
 8009ca6:	4810      	ldr	r0, [pc, #64]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009ca8:	f000 fa72 	bl	800a190 <QSPI_QuadMode>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d001      	beq.n	8009cb6 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e014      	b.n	8009ce0 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8009cb6:	2101      	movs	r1, #1
 8009cb8:	480b      	ldr	r0, [pc, #44]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009cba:	f000 fb15 	bl	800a2e8 <QSPI_HighPerfMode>
 8009cbe:	4603      	mov	r3, r0
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d001      	beq.n	8009cc8 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 8009cc4:	2301      	movs	r3, #1
 8009cc6:	e00b      	b.n	8009ce0 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 8009cc8:	4b07      	ldr	r3, [pc, #28]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009cca:	2202      	movs	r2, #2
 8009ccc:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8009cce:	4806      	ldr	r0, [pc, #24]	; (8009ce8 <BSP_QSPI_Init+0xf4>)
 8009cd0:	f7f9 f8ae 	bl	8002e30 <HAL_OSPI_Init>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d001      	beq.n	8009cde <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 8009cda:	2301      	movs	r3, #1
 8009cdc:	e000      	b.n	8009ce0 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	20053420 	.word	0x20053420
 8009cec:	a0001000 	.word	0xa0001000

08009cf0 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b098      	sub	sp, #96	; 0x60
 8009cf4:	af00      	add	r7, sp, #0
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009cfc:	2300      	movs	r3, #0
 8009cfe:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 8009d00:	2300      	movs	r3, #0
 8009d02:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 8009d04:	23eb      	movs	r3, #235	; 0xeb
 8009d06:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 8009d08:	2301      	movs	r3, #1
 8009d0a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009d10:	2300      	movs	r3, #0
 8009d12:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 8009d14:	68bb      	ldr	r3, [r7, #8]
 8009d16:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8009d18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009d1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 8009d1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d22:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009d24:	2300      	movs	r3, #0
 8009d26:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8009d28:	23aa      	movs	r3, #170	; 0xaa
 8009d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8009d2c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8009d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 8009d32:	2300      	movs	r3, #0
 8009d34:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 8009d36:	2300      	movs	r3, #0
 8009d38:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 8009d3a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009d3e:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8009d44:	2300      	movs	r3, #0
 8009d46:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8009d48:	2304      	movs	r3, #4
 8009d4a:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009d50:	2300      	movs	r3, #0
 8009d52:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d54:	f107 0310 	add.w	r3, r7, #16
 8009d58:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d5c:	4619      	mov	r1, r3
 8009d5e:	480c      	ldr	r0, [pc, #48]	; (8009d90 <BSP_QSPI_Read+0xa0>)
 8009d60:	f7f9 f937 	bl	8002fd2 <HAL_OSPI_Command>
 8009d64:	4603      	mov	r3, r0
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d001      	beq.n	8009d6e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	e00b      	b.n	8009d86 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d72:	68f9      	ldr	r1, [r7, #12]
 8009d74:	4806      	ldr	r0, [pc, #24]	; (8009d90 <BSP_QSPI_Read+0xa0>)
 8009d76:	f7f9 fa20 	bl	80031ba <HAL_OSPI_Receive>
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d001      	beq.n	8009d84 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	e000      	b.n	8009d86 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3760      	adds	r7, #96	; 0x60
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	20053420 	.word	0x20053420

08009d94 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b09c      	sub	sp, #112	; 0x70
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	60f8      	str	r0, [r7, #12]
 8009d9c:	60b9      	str	r1, [r7, #8]
 8009d9e:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8009da8:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 8009daa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d901      	bls.n	8009db6 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 8009dba:	68ba      	ldr	r2, [r7, #8]
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	4413      	add	r3, r2
 8009dc0:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009dc6:	2300      	movs	r3, #0
 8009dc8:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 8009dca:	2338      	movs	r3, #56	; 0x38
 8009dcc:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 8009dda:	f44f 7340 	mov.w	r3, #768	; 0x300
 8009dde:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8009de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009de4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009de6:	2300      	movs	r3, #0
 8009de8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009dea:	2300      	movs	r3, #0
 8009dec:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 8009dee:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8009df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8009df4:	2300      	movs	r3, #0
 8009df6:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009e00:	2300      	movs	r3, #0
 8009e02:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 8009e04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e06:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 8009e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e0a:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8009e0c:	4823      	ldr	r0, [pc, #140]	; (8009e9c <BSP_QSPI_Write+0x108>)
 8009e0e:	f000 f918 	bl	800a042 <QSPI_WriteEnable>
 8009e12:	4603      	mov	r3, r0
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d001      	beq.n	8009e1c <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 8009e18:	2301      	movs	r3, #1
 8009e1a:	e03b      	b.n	8009e94 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e1c:	f107 0314 	add.w	r3, r7, #20
 8009e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e24:	4619      	mov	r1, r3
 8009e26:	481d      	ldr	r0, [pc, #116]	; (8009e9c <BSP_QSPI_Write+0x108>)
 8009e28:	f7f9 f8d3 	bl	8002fd2 <HAL_OSPI_Command>
 8009e2c:	4603      	mov	r3, r0
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d001      	beq.n	8009e36 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 8009e32:	2301      	movs	r3, #1
 8009e34:	e02e      	b.n	8009e94 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e3a:	68f9      	ldr	r1, [r7, #12]
 8009e3c:	4817      	ldr	r0, [pc, #92]	; (8009e9c <BSP_QSPI_Write+0x108>)
 8009e3e:	f7f9 f949 	bl	80030d4 <HAL_OSPI_Transmit>
 8009e42:	4603      	mov	r3, r0
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d001      	beq.n	8009e4c <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8009e48:	2301      	movs	r3, #1
 8009e4a:	e023      	b.n	8009e94 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8009e4c:	f241 3188 	movw	r1, #5000	; 0x1388
 8009e50:	4812      	ldr	r0, [pc, #72]	; (8009e9c <BSP_QSPI_Write+0x108>)
 8009e52:	f000 f952 	bl	800a0fa <QSPI_AutoPollingMemReady>
 8009e56:	4603      	mov	r3, r0
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d001      	beq.n	8009e60 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	e019      	b.n	8009e94 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8009e60:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e64:	4413      	add	r3, r2
 8009e66:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 8009e68:	68fa      	ldr	r2, [r7, #12]
 8009e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e6c:	4413      	add	r3, r2
 8009e6e:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8009e70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e72:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009e76:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d203      	bcs.n	8009e84 <BSP_QSPI_Write+0xf0>
 8009e7c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8009e7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009e80:	1ad3      	subs	r3, r2, r3
 8009e82:	e001      	b.n	8009e88 <BSP_QSPI_Write+0xf4>
 8009e84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009e88:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 8009e8a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009e8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009e8e:	429a      	cmp	r2, r3
 8009e90:	d3b8      	bcc.n	8009e04 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3770      	adds	r7, #112	; 0x70
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}
 8009e9c:	20053420 	.word	0x20053420

08009ea0 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b096      	sub	sp, #88	; 0x58
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009eac:	2300      	movs	r3, #0
 8009eae:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 8009eb0:	23d8      	movs	r3, #216	; 0xd8
 8009eb2:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8009eb4:	2301      	movs	r3, #1
 8009eb6:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8009eb8:	2300      	movs	r3, #0
 8009eba:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8009ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ec8:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 8009eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009ece:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8009ed0:	2300      	movs	r3, #0
 8009ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8009ed8:	2300      	movs	r3, #0
 8009eda:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8009edc:	2300      	movs	r3, #0
 8009ede:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 8009ee8:	4811      	ldr	r0, [pc, #68]	; (8009f30 <BSP_QSPI_Erase_Block+0x90>)
 8009eea:	f000 f8aa 	bl	800a042 <QSPI_WriteEnable>
 8009eee:	4603      	mov	r3, r0
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d001      	beq.n	8009ef8 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e017      	b.n	8009f28 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009ef8:	f107 0308 	add.w	r3, r7, #8
 8009efc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f00:	4619      	mov	r1, r3
 8009f02:	480b      	ldr	r0, [pc, #44]	; (8009f30 <BSP_QSPI_Erase_Block+0x90>)
 8009f04:	f7f9 f865 	bl	8002fd2 <HAL_OSPI_Command>
 8009f08:	4603      	mov	r3, r0
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d001      	beq.n	8009f12 <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e00a      	b.n	8009f28 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 8009f12:	f640 51ac 	movw	r1, #3500	; 0xdac
 8009f16:	4806      	ldr	r0, [pc, #24]	; (8009f30 <BSP_QSPI_Erase_Block+0x90>)
 8009f18:	f000 f8ef 	bl	800a0fa <QSPI_AutoPollingMemReady>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d001      	beq.n	8009f26 <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e000      	b.n	8009f28 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 8009f26:	2300      	movs	r3, #0
}
 8009f28:	4618      	mov	r0, r3
 8009f2a:	3758      	adds	r7, #88	; 0x58
 8009f2c:	46bd      	mov	sp, r7
 8009f2e:	bd80      	pop	{r7, pc}
 8009f30:	20053420 	.word	0x20053420

08009f34 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b088      	sub	sp, #32
 8009f38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 8009f3a:	4b1c      	ldr	r3, [pc, #112]	; (8009fac <BSP_QSPI_MspInit+0x78>)
 8009f3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f3e:	4a1b      	ldr	r2, [pc, #108]	; (8009fac <BSP_QSPI_MspInit+0x78>)
 8009f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f44:	6513      	str	r3, [r2, #80]	; 0x50
 8009f46:	4b19      	ldr	r3, [pc, #100]	; (8009fac <BSP_QSPI_MspInit+0x78>)
 8009f48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009f4e:	60bb      	str	r3, [r7, #8]
 8009f50:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8009f52:	4b16      	ldr	r3, [pc, #88]	; (8009fac <BSP_QSPI_MspInit+0x78>)
 8009f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f56:	4a15      	ldr	r2, [pc, #84]	; (8009fac <BSP_QSPI_MspInit+0x78>)
 8009f58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f5c:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 8009f5e:	4b13      	ldr	r3, [pc, #76]	; (8009fac <BSP_QSPI_MspInit+0x78>)
 8009f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f62:	4a12      	ldr	r2, [pc, #72]	; (8009fac <BSP_QSPI_MspInit+0x78>)
 8009f64:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f68:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8009f6a:	4b10      	ldr	r3, [pc, #64]	; (8009fac <BSP_QSPI_MspInit+0x78>)
 8009f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f6e:	4a0f      	ldr	r2, [pc, #60]	; (8009fac <BSP_QSPI_MspInit+0x78>)
 8009f70:	f043 0310 	orr.w	r3, r3, #16
 8009f74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009f76:	4b0d      	ldr	r3, [pc, #52]	; (8009fac <BSP_QSPI_MspInit+0x78>)
 8009f78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f7a:	f003 0310 	and.w	r3, r3, #16
 8009f7e:	607b      	str	r3, [r7, #4]
 8009f80:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8009f82:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8009f86:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8009f88:	2302      	movs	r3, #2
 8009f8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8009f90:	2303      	movs	r3, #3
 8009f92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8009f94:	230a      	movs	r3, #10
 8009f96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8009f98:	f107 030c 	add.w	r3, r7, #12
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	4804      	ldr	r0, [pc, #16]	; (8009fb0 <BSP_QSPI_MspInit+0x7c>)
 8009fa0:	f7f7 fe4e 	bl	8001c40 <HAL_GPIO_Init>
}
 8009fa4:	bf00      	nop
 8009fa6:	3720      	adds	r7, #32
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}
 8009fac:	40021000 	.word	0x40021000
 8009fb0:	48001000 	.word	0x48001000

08009fb4 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8009fb4:	b580      	push	{r7, lr}
 8009fb6:	b096      	sub	sp, #88	; 0x58
 8009fb8:	af00      	add	r7, sp, #0
 8009fba:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8009fbc:	2300      	movs	r3, #0
 8009fbe:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8009fc4:	2366      	movs	r3, #102	; 0x66
 8009fc6:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8009fc8:	2301      	movs	r3, #1
 8009fca:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8009fe0:	2300      	movs	r3, #0
 8009fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8009fe8:	2300      	movs	r3, #0
 8009fea:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8009fec:	f107 0308 	add.w	r3, r7, #8
 8009ff0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ff4:	4619      	mov	r1, r3
 8009ff6:	6878      	ldr	r0, [r7, #4]
 8009ff8:	f7f8 ffeb 	bl	8002fd2 <HAL_OSPI_Command>
 8009ffc:	4603      	mov	r3, r0
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d001      	beq.n	800a006 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 800a002:	2301      	movs	r3, #1
 800a004:	e019      	b.n	800a03a <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 800a006:	2399      	movs	r3, #153	; 0x99
 800a008:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a00a:	f107 0308 	add.w	r3, r7, #8
 800a00e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a012:	4619      	mov	r1, r3
 800a014:	6878      	ldr	r0, [r7, #4]
 800a016:	f7f8 ffdc 	bl	8002fd2 <HAL_OSPI_Command>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e00a      	b.n	800a03a <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800a024:	f241 3188 	movw	r1, #5000	; 0x1388
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f000 f866 	bl	800a0fa <QSPI_AutoPollingMemReady>
 800a02e:	4603      	mov	r3, r0
 800a030:	2b00      	cmp	r3, #0
 800a032:	d001      	beq.n	800a038 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 800a034:	2301      	movs	r3, #1
 800a036:	e000      	b.n	800a03a <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3758      	adds	r7, #88	; 0x58
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}

0800a042 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 800a042:	b580      	push	{r7, lr}
 800a044:	b09c      	sub	sp, #112	; 0x70
 800a046:	af00      	add	r7, sp, #0
 800a048:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a04a:	2300      	movs	r3, #0
 800a04c:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a04e:	2300      	movs	r3, #0
 800a050:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 800a052:	2306      	movs	r3, #6
 800a054:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800a056:	2301      	movs	r3, #1
 800a058:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800a05a:	2300      	movs	r3, #0
 800a05c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a05e:	2300      	movs	r3, #0
 800a060:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800a062:	2300      	movs	r3, #0
 800a064:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a066:	2300      	movs	r3, #0
 800a068:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800a06a:	2300      	movs	r3, #0
 800a06c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 800a06e:	2300      	movs	r3, #0
 800a070:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800a072:	2300      	movs	r3, #0
 800a074:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a076:	2300      	movs	r3, #0
 800a078:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a07a:	f107 0320 	add.w	r3, r7, #32
 800a07e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a082:	4619      	mov	r1, r3
 800a084:	6878      	ldr	r0, [r7, #4]
 800a086:	f7f8 ffa4 	bl	8002fd2 <HAL_OSPI_Command>
 800a08a:	4603      	mov	r3, r0
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d001      	beq.n	800a094 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 800a090:	2301      	movs	r3, #1
 800a092:	e02e      	b.n	800a0f2 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 800a094:	2302      	movs	r3, #2
 800a096:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 800a098:	2302      	movs	r3, #2
 800a09a:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800a09c:	2300      	movs	r3, #0
 800a09e:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800a0a0:	2310      	movs	r3, #16
 800a0a2:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800a0a4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a0a8:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800a0aa:	2305      	movs	r3, #5
 800a0ac:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 800a0ae:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a0b2:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 800a0b8:	2300      	movs	r3, #0
 800a0ba:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a0bc:	f107 0320 	add.w	r3, r7, #32
 800a0c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0c4:	4619      	mov	r1, r3
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7f8 ff83 	bl	8002fd2 <HAL_OSPI_Command>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	e00d      	b.n	800a0f2 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a0d6:	f107 030c 	add.w	r3, r7, #12
 800a0da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a0de:	4619      	mov	r1, r3
 800a0e0:	6878      	ldr	r0, [r7, #4]
 800a0e2:	f7f9 f90d 	bl	8003300 <HAL_OSPI_AutoPolling>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d001      	beq.n	800a0f0 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	e000      	b.n	800a0f2 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 800a0f0:	2300      	movs	r3, #0
}
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	3770      	adds	r7, #112	; 0x70
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	bd80      	pop	{r7, pc}

0800a0fa <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800a0fa:	b580      	push	{r7, lr}
 800a0fc:	b09c      	sub	sp, #112	; 0x70
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
 800a102:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a104:	2300      	movs	r3, #0
 800a106:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a108:	2300      	movs	r3, #0
 800a10a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800a10c:	2305      	movs	r3, #5
 800a10e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800a110:	2301      	movs	r3, #1
 800a112:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800a114:	2300      	movs	r3, #0
 800a116:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a118:	2300      	movs	r3, #0
 800a11a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800a11c:	2300      	movs	r3, #0
 800a11e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a120:	2300      	movs	r3, #0
 800a122:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800a124:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a128:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 800a12a:	2301      	movs	r3, #1
 800a12c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800a12e:	2300      	movs	r3, #0
 800a130:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 800a132:	2300      	movs	r3, #0
 800a134:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800a136:	2300      	movs	r3, #0
 800a138:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a13a:	2300      	movs	r3, #0
 800a13c:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 800a13e:	2300      	movs	r3, #0
 800a140:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 800a142:	2301      	movs	r3, #1
 800a144:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800a146:	2300      	movs	r3, #0
 800a148:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800a14a:	2310      	movs	r3, #16
 800a14c:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800a14e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a152:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a154:	f107 0320 	add.w	r3, r7, #32
 800a158:	f241 3288 	movw	r2, #5000	; 0x1388
 800a15c:	4619      	mov	r1, r3
 800a15e:	6878      	ldr	r0, [r7, #4]
 800a160:	f7f8 ff37 	bl	8002fd2 <HAL_OSPI_Command>
 800a164:	4603      	mov	r3, r0
 800a166:	2b00      	cmp	r3, #0
 800a168:	d001      	beq.n	800a16e <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 800a16a:	2301      	movs	r3, #1
 800a16c:	e00c      	b.n	800a188 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 800a16e:	f107 030c 	add.w	r3, r7, #12
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	4619      	mov	r1, r3
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f7f9 f8c2 	bl	8003300 <HAL_OSPI_AutoPolling>
 800a17c:	4603      	mov	r3, r0
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d001      	beq.n	800a186 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 800a182:	2301      	movs	r3, #1
 800a184:	e000      	b.n	800a188 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 800a186:	2300      	movs	r3, #0
}
 800a188:	4618      	mov	r0, r3
 800a18a:	3770      	adds	r7, #112	; 0x70
 800a18c:	46bd      	mov	sp, r7
 800a18e:	bd80      	pop	{r7, pc}

0800a190 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b098      	sub	sp, #96	; 0x60
 800a194:	af00      	add	r7, sp, #0
 800a196:	6078      	str	r0, [r7, #4]
 800a198:	460b      	mov	r3, r1
 800a19a:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a19c:	2300      	movs	r3, #0
 800a19e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800a1a4:	2305      	movs	r3, #5
 800a1a6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800a1a8:	2301      	movs	r3, #1
 800a1aa:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800a1ac:	2300      	movs	r3, #0
 800a1ae:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a1b0:	2300      	movs	r3, #0
 800a1b2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800a1b4:	2300      	movs	r3, #0
 800a1b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800a1bc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a1c0:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a1d6:	f107 0310 	add.w	r3, r7, #16
 800a1da:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1de:	4619      	mov	r1, r3
 800a1e0:	6878      	ldr	r0, [r7, #4]
 800a1e2:	f7f8 fef6 	bl	8002fd2 <HAL_OSPI_Command>
 800a1e6:	4603      	mov	r3, r0
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d001      	beq.n	800a1f0 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e077      	b.n	800a2e0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a1f0:	f107 030f 	add.w	r3, r7, #15
 800a1f4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f7f8 ffdd 	bl	80031ba <HAL_OSPI_Receive>
 800a200:	4603      	mov	r3, r0
 800a202:	2b00      	cmp	r3, #0
 800a204:	d001      	beq.n	800a20a <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 800a206:	2301      	movs	r3, #1
 800a208:	e06a      	b.n	800a2e0 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 800a20a:	6878      	ldr	r0, [r7, #4]
 800a20c:	f7ff ff19 	bl	800a042 <QSPI_WriteEnable>
 800a210:	4603      	mov	r3, r0
 800a212:	2b00      	cmp	r3, #0
 800a214:	d001      	beq.n	800a21a <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 800a216:	2301      	movs	r3, #1
 800a218:	e062      	b.n	800a2e0 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 800a21a:	78fb      	ldrb	r3, [r7, #3]
 800a21c:	2b01      	cmp	r3, #1
 800a21e:	d105      	bne.n	800a22c <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 800a220:	7bfb      	ldrb	r3, [r7, #15]
 800a222:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a226:	b2db      	uxtb	r3, r3
 800a228:	73fb      	strb	r3, [r7, #15]
 800a22a:	e004      	b.n	800a236 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 800a22c:	7bfb      	ldrb	r3, [r7, #15]
 800a22e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a232:	b2db      	uxtb	r3, r3
 800a234:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800a236:	2301      	movs	r3, #1
 800a238:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a23a:	f107 0310 	add.w	r3, r7, #16
 800a23e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7f8 fec4 	bl	8002fd2 <HAL_OSPI_Command>
 800a24a:	4603      	mov	r3, r0
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d001      	beq.n	800a254 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 800a250:	2301      	movs	r3, #1
 800a252:	e045      	b.n	800a2e0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a254:	f107 030f 	add.w	r3, r7, #15
 800a258:	f241 3288 	movw	r2, #5000	; 0x1388
 800a25c:	4619      	mov	r1, r3
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f7f8 ff38 	bl	80030d4 <HAL_OSPI_Transmit>
 800a264:	4603      	mov	r3, r0
 800a266:	2b00      	cmp	r3, #0
 800a268:	d001      	beq.n	800a26e <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 800a26a:	2301      	movs	r3, #1
 800a26c:	e038      	b.n	800a2e0 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800a26e:	f241 3188 	movw	r1, #5000	; 0x1388
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f7ff ff41 	bl	800a0fa <QSPI_AutoPollingMemReady>
 800a278:	4603      	mov	r3, r0
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d001      	beq.n	800a282 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 800a27e:	2301      	movs	r3, #1
 800a280:	e02e      	b.n	800a2e0 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 800a282:	2305      	movs	r3, #5
 800a284:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a286:	f107 0310 	add.w	r3, r7, #16
 800a28a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a28e:	4619      	mov	r1, r3
 800a290:	6878      	ldr	r0, [r7, #4]
 800a292:	f7f8 fe9e 	bl	8002fd2 <HAL_OSPI_Command>
 800a296:	4603      	mov	r3, r0
 800a298:	2b00      	cmp	r3, #0
 800a29a:	d001      	beq.n	800a2a0 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 800a29c:	2301      	movs	r3, #1
 800a29e:	e01f      	b.n	800a2e0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a2a0:	f107 030f 	add.w	r3, r7, #15
 800a2a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f7f8 ff85 	bl	80031ba <HAL_OSPI_Receive>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d001      	beq.n	800a2ba <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e012      	b.n	800a2e0 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800a2ba:	7bfb      	ldrb	r3, [r7, #15]
 800a2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d102      	bne.n	800a2ca <QSPI_QuadMode+0x13a>
 800a2c4:	78fb      	ldrb	r3, [r7, #3]
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d007      	beq.n	800a2da <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800a2ca:	7bfb      	ldrb	r3, [r7, #15]
 800a2cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d004      	beq.n	800a2de <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d101      	bne.n	800a2de <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 800a2da:	2301      	movs	r3, #1
 800a2dc:	e000      	b.n	800a2e0 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 800a2de:	2300      	movs	r3, #0
}
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	3760      	adds	r7, #96	; 0x60
 800a2e4:	46bd      	mov	sp, r7
 800a2e6:	bd80      	pop	{r7, pc}

0800a2e8 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 800a2e8:	b580      	push	{r7, lr}
 800a2ea:	b098      	sub	sp, #96	; 0x60
 800a2ec:	af00      	add	r7, sp, #0
 800a2ee:	6078      	str	r0, [r7, #4]
 800a2f0:	460b      	mov	r3, r1
 800a2f2:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800a2fc:	2305      	movs	r3, #5
 800a2fe:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800a300:	2301      	movs	r3, #1
 800a302:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800a304:	2300      	movs	r3, #0
 800a306:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800a308:	2300      	movs	r3, #0
 800a30a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800a30c:	2300      	movs	r3, #0
 800a30e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800a310:	2300      	movs	r3, #0
 800a312:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800a314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a318:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800a31a:	2300      	movs	r3, #0
 800a31c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800a322:	2301      	movs	r3, #1
 800a324:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800a326:	2300      	movs	r3, #0
 800a328:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800a32a:	2300      	movs	r3, #0
 800a32c:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a32e:	f107 0310 	add.w	r3, r7, #16
 800a332:	f241 3288 	movw	r2, #5000	; 0x1388
 800a336:	4619      	mov	r1, r3
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f7f8 fe4a 	bl	8002fd2 <HAL_OSPI_Command>
 800a33e:	4603      	mov	r3, r0
 800a340:	2b00      	cmp	r3, #0
 800a342:	d001      	beq.n	800a348 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 800a344:	2301      	movs	r3, #1
 800a346:	e09a      	b.n	800a47e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a348:	f107 030c 	add.w	r3, r7, #12
 800a34c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a350:	4619      	mov	r1, r3
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f7f8 ff31 	bl	80031ba <HAL_OSPI_Receive>
 800a358:	4603      	mov	r3, r0
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 800a35e:	2301      	movs	r3, #1
 800a360:	e08d      	b.n	800a47e <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800a362:	2315      	movs	r3, #21
 800a364:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 800a366:	2302      	movs	r3, #2
 800a368:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a36a:	f107 0310 	add.w	r3, r7, #16
 800a36e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a372:	4619      	mov	r1, r3
 800a374:	6878      	ldr	r0, [r7, #4]
 800a376:	f7f8 fe2c 	bl	8002fd2 <HAL_OSPI_Command>
 800a37a:	4603      	mov	r3, r0
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d001      	beq.n	800a384 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	e07c      	b.n	800a47e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a384:	f107 030c 	add.w	r3, r7, #12
 800a388:	3301      	adds	r3, #1
 800a38a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a38e:	4619      	mov	r1, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f7f8 ff12 	bl	80031ba <HAL_OSPI_Receive>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d001      	beq.n	800a3a0 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 800a39c:	2301      	movs	r3, #1
 800a39e:	e06e      	b.n	800a47e <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7ff fe4e 	bl	800a042 <QSPI_WriteEnable>
 800a3a6:	4603      	mov	r3, r0
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d001      	beq.n	800a3b0 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	e066      	b.n	800a47e <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 800a3b0:	78fb      	ldrb	r3, [r7, #3]
 800a3b2:	2b01      	cmp	r3, #1
 800a3b4:	d105      	bne.n	800a3c2 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800a3b6:	7bbb      	ldrb	r3, [r7, #14]
 800a3b8:	f043 0302 	orr.w	r3, r3, #2
 800a3bc:	b2db      	uxtb	r3, r3
 800a3be:	73bb      	strb	r3, [r7, #14]
 800a3c0:	e004      	b.n	800a3cc <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800a3c2:	7bbb      	ldrb	r3, [r7, #14]
 800a3c4:	f023 0302 	bic.w	r3, r3, #2
 800a3c8:	b2db      	uxtb	r3, r3
 800a3ca:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 800a3d0:	2303      	movs	r3, #3
 800a3d2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a3d4:	f107 0310 	add.w	r3, r7, #16
 800a3d8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f7f8 fdf7 	bl	8002fd2 <HAL_OSPI_Command>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d001      	beq.n	800a3ee <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 800a3ea:	2301      	movs	r3, #1
 800a3ec:	e047      	b.n	800a47e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a3ee:	f107 030c 	add.w	r3, r7, #12
 800a3f2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3f6:	4619      	mov	r1, r3
 800a3f8:	6878      	ldr	r0, [r7, #4]
 800a3fa:	f7f8 fe6b 	bl	80030d4 <HAL_OSPI_Transmit>
 800a3fe:	4603      	mov	r3, r0
 800a400:	2b00      	cmp	r3, #0
 800a402:	d001      	beq.n	800a408 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 800a404:	2301      	movs	r3, #1
 800a406:	e03a      	b.n	800a47e <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800a408:	f241 3188 	movw	r1, #5000	; 0x1388
 800a40c:	6878      	ldr	r0, [r7, #4]
 800a40e:	f7ff fe74 	bl	800a0fa <QSPI_AutoPollingMemReady>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 800a418:	2301      	movs	r3, #1
 800a41a:	e030      	b.n	800a47e <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800a41c:	2315      	movs	r3, #21
 800a41e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 800a420:	2302      	movs	r3, #2
 800a422:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a424:	f107 0310 	add.w	r3, r7, #16
 800a428:	f241 3288 	movw	r2, #5000	; 0x1388
 800a42c:	4619      	mov	r1, r3
 800a42e:	6878      	ldr	r0, [r7, #4]
 800a430:	f7f8 fdcf 	bl	8002fd2 <HAL_OSPI_Command>
 800a434:	4603      	mov	r3, r0
 800a436:	2b00      	cmp	r3, #0
 800a438:	d001      	beq.n	800a43e <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e01f      	b.n	800a47e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a43e:	f107 030c 	add.w	r3, r7, #12
 800a442:	f241 3288 	movw	r2, #5000	; 0x1388
 800a446:	4619      	mov	r1, r3
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f7f8 feb6 	bl	80031ba <HAL_OSPI_Receive>
 800a44e:	4603      	mov	r3, r0
 800a450:	2b00      	cmp	r3, #0
 800a452:	d001      	beq.n	800a458 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 800a454:	2301      	movs	r3, #1
 800a456:	e012      	b.n	800a47e <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800a458:	7b7b      	ldrb	r3, [r7, #13]
 800a45a:	f003 0302 	and.w	r3, r3, #2
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d102      	bne.n	800a468 <QSPI_HighPerfMode+0x180>
 800a462:	78fb      	ldrb	r3, [r7, #3]
 800a464:	2b01      	cmp	r3, #1
 800a466:	d007      	beq.n	800a478 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800a468:	7b7b      	ldrb	r3, [r7, #13]
 800a46a:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d004      	beq.n	800a47c <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800a472:	78fb      	ldrb	r3, [r7, #3]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d101      	bne.n	800a47c <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 800a478:	2301      	movs	r3, #1
 800a47a:	e000      	b.n	800a47e <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 800a47c:	2300      	movs	r3, #0
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3760      	adds	r7, #96	; 0x60
 800a482:	46bd      	mov	sp, r7
 800a484:	bd80      	pop	{r7, pc}
	...

0800a488 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b082      	sub	sp, #8
 800a48c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a48e:	4b11      	ldr	r3, [pc, #68]	; (800a4d4 <HAL_MspInit+0x4c>)
 800a490:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a492:	4a10      	ldr	r2, [pc, #64]	; (800a4d4 <HAL_MspInit+0x4c>)
 800a494:	f043 0301 	orr.w	r3, r3, #1
 800a498:	6613      	str	r3, [r2, #96]	; 0x60
 800a49a:	4b0e      	ldr	r3, [pc, #56]	; (800a4d4 <HAL_MspInit+0x4c>)
 800a49c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a49e:	f003 0301 	and.w	r3, r3, #1
 800a4a2:	607b      	str	r3, [r7, #4]
 800a4a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800a4a6:	4b0b      	ldr	r3, [pc, #44]	; (800a4d4 <HAL_MspInit+0x4c>)
 800a4a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4aa:	4a0a      	ldr	r2, [pc, #40]	; (800a4d4 <HAL_MspInit+0x4c>)
 800a4ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a4b0:	6593      	str	r3, [r2, #88]	; 0x58
 800a4b2:	4b08      	ldr	r3, [pc, #32]	; (800a4d4 <HAL_MspInit+0x4c>)
 800a4b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a4ba:	603b      	str	r3, [r7, #0]
 800a4bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a4be:	2200      	movs	r2, #0
 800a4c0:	210f      	movs	r1, #15
 800a4c2:	f06f 0001 	mvn.w	r0, #1
 800a4c6:	f7f6 f990 	bl	80007ea <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a4ca:	bf00      	nop
 800a4cc:	3708      	adds	r7, #8
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	bd80      	pop	{r7, pc}
 800a4d2:	bf00      	nop
 800a4d4:	40021000 	.word	0x40021000

0800a4d8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800a4d8:	b580      	push	{r7, lr}
 800a4da:	b08a      	sub	sp, #40	; 0x28
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a4e0:	f107 0314 	add.w	r3, r7, #20
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	601a      	str	r2, [r3, #0]
 800a4e8:	605a      	str	r2, [r3, #4]
 800a4ea:	609a      	str	r2, [r3, #8]
 800a4ec:	60da      	str	r2, [r3, #12]
 800a4ee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	4a2b      	ldr	r2, [pc, #172]	; (800a5a4 <HAL_DAC_MspInit+0xcc>)
 800a4f6:	4293      	cmp	r3, r2
 800a4f8:	d14f      	bne.n	800a59a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800a4fa:	4b2b      	ldr	r3, [pc, #172]	; (800a5a8 <HAL_DAC_MspInit+0xd0>)
 800a4fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4fe:	4a2a      	ldr	r2, [pc, #168]	; (800a5a8 <HAL_DAC_MspInit+0xd0>)
 800a500:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800a504:	6593      	str	r3, [r2, #88]	; 0x58
 800a506:	4b28      	ldr	r3, [pc, #160]	; (800a5a8 <HAL_DAC_MspInit+0xd0>)
 800a508:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a50a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a50e:	613b      	str	r3, [r7, #16]
 800a510:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a512:	4b25      	ldr	r3, [pc, #148]	; (800a5a8 <HAL_DAC_MspInit+0xd0>)
 800a514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a516:	4a24      	ldr	r2, [pc, #144]	; (800a5a8 <HAL_DAC_MspInit+0xd0>)
 800a518:	f043 0301 	orr.w	r3, r3, #1
 800a51c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a51e:	4b22      	ldr	r3, [pc, #136]	; (800a5a8 <HAL_DAC_MspInit+0xd0>)
 800a520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a522:	f003 0301 	and.w	r3, r3, #1
 800a526:	60fb      	str	r3, [r7, #12]
 800a528:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800a52a:	2310      	movs	r3, #16
 800a52c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800a52e:	2303      	movs	r3, #3
 800a530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a532:	2300      	movs	r3, #0
 800a534:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a536:	f107 0314 	add.w	r3, r7, #20
 800a53a:	4619      	mov	r1, r3
 800a53c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800a540:	f7f7 fb7e 	bl	8001c40 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800a544:	4b19      	ldr	r3, [pc, #100]	; (800a5ac <HAL_DAC_MspInit+0xd4>)
 800a546:	4a1a      	ldr	r2, [pc, #104]	; (800a5b0 <HAL_DAC_MspInit+0xd8>)
 800a548:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800a54a:	4b18      	ldr	r3, [pc, #96]	; (800a5ac <HAL_DAC_MspInit+0xd4>)
 800a54c:	2206      	movs	r2, #6
 800a54e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a550:	4b16      	ldr	r3, [pc, #88]	; (800a5ac <HAL_DAC_MspInit+0xd4>)
 800a552:	2210      	movs	r2, #16
 800a554:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800a556:	4b15      	ldr	r3, [pc, #84]	; (800a5ac <HAL_DAC_MspInit+0xd4>)
 800a558:	2200      	movs	r2, #0
 800a55a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800a55c:	4b13      	ldr	r3, [pc, #76]	; (800a5ac <HAL_DAC_MspInit+0xd4>)
 800a55e:	2280      	movs	r2, #128	; 0x80
 800a560:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a562:	4b12      	ldr	r3, [pc, #72]	; (800a5ac <HAL_DAC_MspInit+0xd4>)
 800a564:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a568:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a56a:	4b10      	ldr	r3, [pc, #64]	; (800a5ac <HAL_DAC_MspInit+0xd4>)
 800a56c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a570:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 800a572:	4b0e      	ldr	r3, [pc, #56]	; (800a5ac <HAL_DAC_MspInit+0xd4>)
 800a574:	2200      	movs	r2, #0
 800a576:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800a578:	4b0c      	ldr	r3, [pc, #48]	; (800a5ac <HAL_DAC_MspInit+0xd4>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800a57e:	480b      	ldr	r0, [pc, #44]	; (800a5ac <HAL_DAC_MspInit+0xd4>)
 800a580:	f7f7 f830 	bl	80015e4 <HAL_DMA_Init>
 800a584:	4603      	mov	r3, r0
 800a586:	2b00      	cmp	r3, #0
 800a588:	d001      	beq.n	800a58e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800a58a:	f7ff f985 	bl	8009898 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	4a06      	ldr	r2, [pc, #24]	; (800a5ac <HAL_DAC_MspInit+0xd4>)
 800a592:	609a      	str	r2, [r3, #8]
 800a594:	4a05      	ldr	r2, [pc, #20]	; (800a5ac <HAL_DAC_MspInit+0xd4>)
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800a59a:	bf00      	nop
 800a59c:	3728      	adds	r7, #40	; 0x28
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
 800a5a2:	bf00      	nop
 800a5a4:	40007400 	.word	0x40007400
 800a5a8:	40021000 	.word	0x40021000
 800a5ac:	20001030 	.word	0x20001030
 800a5b0:	40020008 	.word	0x40020008

0800a5b4 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b0ae      	sub	sp, #184	; 0xb8
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a5bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a5c0:	2200      	movs	r2, #0
 800a5c2:	601a      	str	r2, [r3, #0]
 800a5c4:	605a      	str	r2, [r3, #4]
 800a5c6:	609a      	str	r2, [r3, #8]
 800a5c8:	60da      	str	r2, [r3, #12]
 800a5ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a5cc:	f107 0310 	add.w	r3, r7, #16
 800a5d0:	2294      	movs	r2, #148	; 0x94
 800a5d2:	2100      	movs	r1, #0
 800a5d4:	4618      	mov	r0, r3
 800a5d6:	f000 fbc5 	bl	800ad64 <memset>
  if(DFSDM1_Init == 0)
 800a5da:	4b45      	ldr	r3, [pc, #276]	; (800a6f0 <HAL_DFSDM_FilterMspInit+0x13c>)
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d14b      	bne.n	800a67a <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800a5e2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a5e6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a5ee:	f107 0310 	add.w	r3, r7, #16
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7fa fc34 	bl	8004e60 <HAL_RCCEx_PeriphCLKConfig>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d001      	beq.n	800a602 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800a5fe:	f7ff f94b 	bl	8009898 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800a602:	4b3c      	ldr	r3, [pc, #240]	; (800a6f4 <HAL_DFSDM_FilterMspInit+0x140>)
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	3301      	adds	r3, #1
 800a608:	4a3a      	ldr	r2, [pc, #232]	; (800a6f4 <HAL_DFSDM_FilterMspInit+0x140>)
 800a60a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800a60c:	4b39      	ldr	r3, [pc, #228]	; (800a6f4 <HAL_DFSDM_FilterMspInit+0x140>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	2b01      	cmp	r3, #1
 800a612:	d10b      	bne.n	800a62c <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800a614:	4b38      	ldr	r3, [pc, #224]	; (800a6f8 <HAL_DFSDM_FilterMspInit+0x144>)
 800a616:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a618:	4a37      	ldr	r2, [pc, #220]	; (800a6f8 <HAL_DFSDM_FilterMspInit+0x144>)
 800a61a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a61e:	6613      	str	r3, [r2, #96]	; 0x60
 800a620:	4b35      	ldr	r3, [pc, #212]	; (800a6f8 <HAL_DFSDM_FilterMspInit+0x144>)
 800a622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a624:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a628:	60fb      	str	r3, [r7, #12]
 800a62a:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a62c:	4b32      	ldr	r3, [pc, #200]	; (800a6f8 <HAL_DFSDM_FilterMspInit+0x144>)
 800a62e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a630:	4a31      	ldr	r2, [pc, #196]	; (800a6f8 <HAL_DFSDM_FilterMspInit+0x144>)
 800a632:	f043 0310 	orr.w	r3, r3, #16
 800a636:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a638:	4b2f      	ldr	r3, [pc, #188]	; (800a6f8 <HAL_DFSDM_FilterMspInit+0x144>)
 800a63a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a63c:	f003 0310 	and.w	r3, r3, #16
 800a640:	60bb      	str	r3, [r7, #8]
 800a642:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800a644:	f44f 7320 	mov.w	r3, #640	; 0x280
 800a648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a64c:	2302      	movs	r3, #2
 800a64e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a652:	2300      	movs	r3, #0
 800a654:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a658:	2300      	movs	r3, #0
 800a65a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800a65e:	2306      	movs	r3, #6
 800a660:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a664:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a668:	4619      	mov	r1, r3
 800a66a:	4824      	ldr	r0, [pc, #144]	; (800a6fc <HAL_DFSDM_FilterMspInit+0x148>)
 800a66c:	f7f7 fae8 	bl	8001c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800a670:	4b1f      	ldr	r3, [pc, #124]	; (800a6f0 <HAL_DFSDM_FilterMspInit+0x13c>)
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	3301      	adds	r3, #1
 800a676:	4a1e      	ldr	r2, [pc, #120]	; (800a6f0 <HAL_DFSDM_FilterMspInit+0x13c>)
 800a678:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a20      	ldr	r2, [pc, #128]	; (800a700 <HAL_DFSDM_FilterMspInit+0x14c>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d130      	bne.n	800a6e6 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 800a684:	4b1f      	ldr	r3, [pc, #124]	; (800a704 <HAL_DFSDM_FilterMspInit+0x150>)
 800a686:	4a20      	ldr	r2, [pc, #128]	; (800a708 <HAL_DFSDM_FilterMspInit+0x154>)
 800a688:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 800a68a:	4b1e      	ldr	r3, [pc, #120]	; (800a704 <HAL_DFSDM_FilterMspInit+0x150>)
 800a68c:	2256      	movs	r2, #86	; 0x56
 800a68e:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a690:	4b1c      	ldr	r3, [pc, #112]	; (800a704 <HAL_DFSDM_FilterMspInit+0x150>)
 800a692:	2200      	movs	r2, #0
 800a694:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800a696:	4b1b      	ldr	r3, [pc, #108]	; (800a704 <HAL_DFSDM_FilterMspInit+0x150>)
 800a698:	2200      	movs	r2, #0
 800a69a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800a69c:	4b19      	ldr	r3, [pc, #100]	; (800a704 <HAL_DFSDM_FilterMspInit+0x150>)
 800a69e:	2280      	movs	r2, #128	; 0x80
 800a6a0:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800a6a2:	4b18      	ldr	r3, [pc, #96]	; (800a704 <HAL_DFSDM_FilterMspInit+0x150>)
 800a6a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6a8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800a6aa:	4b16      	ldr	r3, [pc, #88]	; (800a704 <HAL_DFSDM_FilterMspInit+0x150>)
 800a6ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6b0:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 800a6b2:	4b14      	ldr	r3, [pc, #80]	; (800a704 <HAL_DFSDM_FilterMspInit+0x150>)
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 800a6b8:	4b12      	ldr	r3, [pc, #72]	; (800a704 <HAL_DFSDM_FilterMspInit+0x150>)
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800a6be:	4811      	ldr	r0, [pc, #68]	; (800a704 <HAL_DFSDM_FilterMspInit+0x150>)
 800a6c0:	f7f6 ff90 	bl	80015e4 <HAL_DMA_Init>
 800a6c4:	4603      	mov	r3, r0
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d001      	beq.n	800a6ce <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 800a6ca:	f7ff f8e5 	bl	8009898 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	4a0c      	ldr	r2, [pc, #48]	; (800a704 <HAL_DFSDM_FilterMspInit+0x150>)
 800a6d2:	62da      	str	r2, [r3, #44]	; 0x2c
 800a6d4:	4a0b      	ldr	r2, [pc, #44]	; (800a704 <HAL_DFSDM_FilterMspInit+0x150>)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	4a09      	ldr	r2, [pc, #36]	; (800a704 <HAL_DFSDM_FilterMspInit+0x150>)
 800a6de:	629a      	str	r2, [r3, #40]	; 0x28
 800a6e0:	4a08      	ldr	r2, [pc, #32]	; (800a704 <HAL_DFSDM_FilterMspInit+0x150>)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800a6e6:	bf00      	nop
 800a6e8:	37b8      	adds	r7, #184	; 0xb8
 800a6ea:	46bd      	mov	sp, r7
 800a6ec:	bd80      	pop	{r7, pc}
 800a6ee:	bf00      	nop
 800a6f0:	20053474 	.word	0x20053474
 800a6f4:	20053470 	.word	0x20053470
 800a6f8:	40021000 	.word	0x40021000
 800a6fc:	48001000 	.word	0x48001000
 800a700:	40016100 	.word	0x40016100
 800a704:	2000111c 	.word	0x2000111c
 800a708:	4002001c 	.word	0x4002001c

0800a70c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b0ae      	sub	sp, #184	; 0xb8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a714:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a718:	2200      	movs	r2, #0
 800a71a:	601a      	str	r2, [r3, #0]
 800a71c:	605a      	str	r2, [r3, #4]
 800a71e:	609a      	str	r2, [r3, #8]
 800a720:	60da      	str	r2, [r3, #12]
 800a722:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a724:	f107 0310 	add.w	r3, r7, #16
 800a728:	2294      	movs	r2, #148	; 0x94
 800a72a:	2100      	movs	r1, #0
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 fb19 	bl	800ad64 <memset>
  if(DFSDM1_Init == 0)
 800a732:	4b2a      	ldr	r3, [pc, #168]	; (800a7dc <HAL_DFSDM_ChannelMspInit+0xd0>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2b00      	cmp	r3, #0
 800a738:	d14b      	bne.n	800a7d2 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800a73a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800a73e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800a740:	2300      	movs	r3, #0
 800a742:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a746:	f107 0310 	add.w	r3, r7, #16
 800a74a:	4618      	mov	r0, r3
 800a74c:	f7fa fb88 	bl	8004e60 <HAL_RCCEx_PeriphCLKConfig>
 800a750:	4603      	mov	r3, r0
 800a752:	2b00      	cmp	r3, #0
 800a754:	d001      	beq.n	800a75a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800a756:	f7ff f89f 	bl	8009898 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800a75a:	4b21      	ldr	r3, [pc, #132]	; (800a7e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	3301      	adds	r3, #1
 800a760:	4a1f      	ldr	r2, [pc, #124]	; (800a7e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800a762:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800a764:	4b1e      	ldr	r3, [pc, #120]	; (800a7e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d10b      	bne.n	800a784 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800a76c:	4b1d      	ldr	r3, [pc, #116]	; (800a7e4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800a76e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a770:	4a1c      	ldr	r2, [pc, #112]	; (800a7e4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800a772:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a776:	6613      	str	r3, [r2, #96]	; 0x60
 800a778:	4b1a      	ldr	r3, [pc, #104]	; (800a7e4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800a77a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a77c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a780:	60fb      	str	r3, [r7, #12]
 800a782:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a784:	4b17      	ldr	r3, [pc, #92]	; (800a7e4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800a786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a788:	4a16      	ldr	r2, [pc, #88]	; (800a7e4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800a78a:	f043 0310 	orr.w	r3, r3, #16
 800a78e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a790:	4b14      	ldr	r3, [pc, #80]	; (800a7e4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800a792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a794:	f003 0310 	and.w	r3, r3, #16
 800a798:	60bb      	str	r3, [r7, #8]
 800a79a:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800a79c:	f44f 7320 	mov.w	r3, #640	; 0x280
 800a7a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7a4:	2302      	movs	r3, #2
 800a7a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7aa:	2300      	movs	r3, #0
 800a7ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a7b0:	2300      	movs	r3, #0
 800a7b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800a7b6:	2306      	movs	r3, #6
 800a7b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a7bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	4809      	ldr	r0, [pc, #36]	; (800a7e8 <HAL_DFSDM_ChannelMspInit+0xdc>)
 800a7c4:	f7f7 fa3c 	bl	8001c40 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800a7c8:	4b04      	ldr	r3, [pc, #16]	; (800a7dc <HAL_DFSDM_ChannelMspInit+0xd0>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	3301      	adds	r3, #1
 800a7ce:	4a03      	ldr	r2, [pc, #12]	; (800a7dc <HAL_DFSDM_ChannelMspInit+0xd0>)
 800a7d0:	6013      	str	r3, [r2, #0]
  }

}
 800a7d2:	bf00      	nop
 800a7d4:	37b8      	adds	r7, #184	; 0xb8
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	bd80      	pop	{r7, pc}
 800a7da:	bf00      	nop
 800a7dc:	20053474 	.word	0x20053474
 800a7e0:	20053470 	.word	0x20053470
 800a7e4:	40021000 	.word	0x40021000
 800a7e8:	48001000 	.word	0x48001000

0800a7ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b0ae      	sub	sp, #184	; 0xb8
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a7f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	601a      	str	r2, [r3, #0]
 800a7fc:	605a      	str	r2, [r3, #4]
 800a7fe:	609a      	str	r2, [r3, #8]
 800a800:	60da      	str	r2, [r3, #12]
 800a802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a804:	f107 0310 	add.w	r3, r7, #16
 800a808:	2294      	movs	r2, #148	; 0x94
 800a80a:	2100      	movs	r1, #0
 800a80c:	4618      	mov	r0, r3
 800a80e:	f000 faa9 	bl	800ad64 <memset>
  if(hi2c->Instance==I2C2)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	4a21      	ldr	r2, [pc, #132]	; (800a89c <HAL_I2C_MspInit+0xb0>)
 800a818:	4293      	cmp	r3, r2
 800a81a:	d13b      	bne.n	800a894 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800a81c:	2380      	movs	r3, #128	; 0x80
 800a81e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800a820:	2300      	movs	r3, #0
 800a822:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a824:	f107 0310 	add.w	r3, r7, #16
 800a828:	4618      	mov	r0, r3
 800a82a:	f7fa fb19 	bl	8004e60 <HAL_RCCEx_PeriphCLKConfig>
 800a82e:	4603      	mov	r3, r0
 800a830:	2b00      	cmp	r3, #0
 800a832:	d001      	beq.n	800a838 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800a834:	f7ff f830 	bl	8009898 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a838:	4b19      	ldr	r3, [pc, #100]	; (800a8a0 <HAL_I2C_MspInit+0xb4>)
 800a83a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a83c:	4a18      	ldr	r2, [pc, #96]	; (800a8a0 <HAL_I2C_MspInit+0xb4>)
 800a83e:	f043 0302 	orr.w	r3, r3, #2
 800a842:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a844:	4b16      	ldr	r3, [pc, #88]	; (800a8a0 <HAL_I2C_MspInit+0xb4>)
 800a846:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a848:	f003 0302 	and.w	r3, r3, #2
 800a84c:	60fb      	str	r3, [r7, #12]
 800a84e:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a850:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a854:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800a858:	2312      	movs	r3, #18
 800a85a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a85e:	2300      	movs	r3, #0
 800a860:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a864:	2303      	movs	r3, #3
 800a866:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800a86a:	2304      	movs	r3, #4
 800a86c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a870:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800a874:	4619      	mov	r1, r3
 800a876:	480b      	ldr	r0, [pc, #44]	; (800a8a4 <HAL_I2C_MspInit+0xb8>)
 800a878:	f7f7 f9e2 	bl	8001c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800a87c:	4b08      	ldr	r3, [pc, #32]	; (800a8a0 <HAL_I2C_MspInit+0xb4>)
 800a87e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a880:	4a07      	ldr	r2, [pc, #28]	; (800a8a0 <HAL_I2C_MspInit+0xb4>)
 800a882:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a886:	6593      	str	r3, [r2, #88]	; 0x58
 800a888:	4b05      	ldr	r3, [pc, #20]	; (800a8a0 <HAL_I2C_MspInit+0xb4>)
 800a88a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a88c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a890:	60bb      	str	r3, [r7, #8]
 800a892:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800a894:	bf00      	nop
 800a896:	37b8      	adds	r7, #184	; 0xb8
 800a898:	46bd      	mov	sp, r7
 800a89a:	bd80      	pop	{r7, pc}
 800a89c:	40005800 	.word	0x40005800
 800a8a0:	40021000 	.word	0x40021000
 800a8a4:	48000400 	.word	0x48000400

0800a8a8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800a8a8:	b580      	push	{r7, lr}
 800a8aa:	b082      	sub	sp, #8
 800a8ac:	af00      	add	r7, sp, #0
 800a8ae:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a0b      	ldr	r2, [pc, #44]	; (800a8e4 <HAL_I2C_MspDeInit+0x3c>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d10f      	bne.n	800a8da <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800a8ba:	4b0b      	ldr	r3, [pc, #44]	; (800a8e8 <HAL_I2C_MspDeInit+0x40>)
 800a8bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8be:	4a0a      	ldr	r2, [pc, #40]	; (800a8e8 <HAL_I2C_MspDeInit+0x40>)
 800a8c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800a8c4:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800a8c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a8ca:	4808      	ldr	r0, [pc, #32]	; (800a8ec <HAL_I2C_MspDeInit+0x44>)
 800a8cc:	f7f7 fb4a 	bl	8001f64 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800a8d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800a8d4:	4805      	ldr	r0, [pc, #20]	; (800a8ec <HAL_I2C_MspDeInit+0x44>)
 800a8d6:	f7f7 fb45 	bl	8001f64 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800a8da:	bf00      	nop
 800a8dc:	3708      	adds	r7, #8
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	bd80      	pop	{r7, pc}
 800a8e2:	bf00      	nop
 800a8e4:	40005800 	.word	0x40005800
 800a8e8:	40021000 	.word	0x40021000
 800a8ec:	48000400 	.word	0x48000400

0800a8f0 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800a8f0:	b580      	push	{r7, lr}
 800a8f2:	b0b0      	sub	sp, #192	; 0xc0
 800a8f4:	af00      	add	r7, sp, #0
 800a8f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a8f8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	601a      	str	r2, [r3, #0]
 800a900:	605a      	str	r2, [r3, #4]
 800a902:	609a      	str	r2, [r3, #8]
 800a904:	60da      	str	r2, [r3, #12]
 800a906:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800a908:	f107 0318 	add.w	r3, r7, #24
 800a90c:	2294      	movs	r2, #148	; 0x94
 800a90e:	2100      	movs	r1, #0
 800a910:	4618      	mov	r0, r3
 800a912:	f000 fa27 	bl	800ad64 <memset>
  if(hospi->Instance==OCTOSPI1)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	4a28      	ldr	r2, [pc, #160]	; (800a9bc <HAL_OSPI_MspInit+0xcc>)
 800a91c:	4293      	cmp	r3, r2
 800a91e:	d149      	bne.n	800a9b4 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800a920:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800a924:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800a926:	2300      	movs	r3, #0
 800a928:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800a92c:	f107 0318 	add.w	r3, r7, #24
 800a930:	4618      	mov	r0, r3
 800a932:	f7fa fa95 	bl	8004e60 <HAL_RCCEx_PeriphCLKConfig>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d001      	beq.n	800a940 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 800a93c:	f7fe ffac 	bl	8009898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800a940:	4b1f      	ldr	r3, [pc, #124]	; (800a9c0 <HAL_OSPI_MspInit+0xd0>)
 800a942:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a944:	4a1e      	ldr	r2, [pc, #120]	; (800a9c0 <HAL_OSPI_MspInit+0xd0>)
 800a946:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a94a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a94c:	4b1c      	ldr	r3, [pc, #112]	; (800a9c0 <HAL_OSPI_MspInit+0xd0>)
 800a94e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a950:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a954:	617b      	str	r3, [r7, #20]
 800a956:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800a958:	4b19      	ldr	r3, [pc, #100]	; (800a9c0 <HAL_OSPI_MspInit+0xd0>)
 800a95a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a95c:	4a18      	ldr	r2, [pc, #96]	; (800a9c0 <HAL_OSPI_MspInit+0xd0>)
 800a95e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a962:	6513      	str	r3, [r2, #80]	; 0x50
 800a964:	4b16      	ldr	r3, [pc, #88]	; (800a9c0 <HAL_OSPI_MspInit+0xd0>)
 800a966:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a96c:	613b      	str	r3, [r7, #16]
 800a96e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800a970:	4b13      	ldr	r3, [pc, #76]	; (800a9c0 <HAL_OSPI_MspInit+0xd0>)
 800a972:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a974:	4a12      	ldr	r2, [pc, #72]	; (800a9c0 <HAL_OSPI_MspInit+0xd0>)
 800a976:	f043 0310 	orr.w	r3, r3, #16
 800a97a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a97c:	4b10      	ldr	r3, [pc, #64]	; (800a9c0 <HAL_OSPI_MspInit+0xd0>)
 800a97e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a980:	f003 0310 	and.w	r3, r3, #16
 800a984:	60fb      	str	r3, [r7, #12]
 800a986:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800a988:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800a98c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a990:	2302      	movs	r3, #2
 800a992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a996:	2300      	movs	r3, #0
 800a998:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a99c:	2303      	movs	r3, #3
 800a99e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800a9a2:	230a      	movs	r3, #10
 800a9a4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800a9a8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800a9ac:	4619      	mov	r1, r3
 800a9ae:	4805      	ldr	r0, [pc, #20]	; (800a9c4 <HAL_OSPI_MspInit+0xd4>)
 800a9b0:	f7f7 f946 	bl	8001c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800a9b4:	bf00      	nop
 800a9b6:	37c0      	adds	r7, #192	; 0xc0
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	bd80      	pop	{r7, pc}
 800a9bc:	a0001000 	.word	0xa0001000
 800a9c0:	40021000 	.word	0x40021000
 800a9c4:	48001000 	.word	0x48001000

0800a9c8 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 800a9c8:	b580      	push	{r7, lr}
 800a9ca:	b082      	sub	sp, #8
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a0b      	ldr	r2, [pc, #44]	; (800aa04 <HAL_OSPI_MspDeInit+0x3c>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d110      	bne.n	800a9fc <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 800a9da:	4b0b      	ldr	r3, [pc, #44]	; (800aa08 <HAL_OSPI_MspDeInit+0x40>)
 800a9dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a9de:	4a0a      	ldr	r2, [pc, #40]	; (800aa08 <HAL_OSPI_MspDeInit+0x40>)
 800a9e0:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a9e4:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800a9e6:	4b08      	ldr	r3, [pc, #32]	; (800aa08 <HAL_OSPI_MspDeInit+0x40>)
 800a9e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ea:	4a07      	ldr	r2, [pc, #28]	; (800aa08 <HAL_OSPI_MspDeInit+0x40>)
 800a9ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a9f0:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800a9f2:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800a9f6:	4805      	ldr	r0, [pc, #20]	; (800aa0c <HAL_OSPI_MspDeInit+0x44>)
 800a9f8:	f7f7 fab4 	bl	8001f64 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 800a9fc:	bf00      	nop
 800a9fe:	3708      	adds	r7, #8
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	a0001000 	.word	0xa0001000
 800aa08:	40021000 	.word	0x40021000
 800aa0c:	48001000 	.word	0x48001000

0800aa10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800aa10:	b580      	push	{r7, lr}
 800aa12:	b084      	sub	sp, #16
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa20:	d113      	bne.n	800aa4a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800aa22:	4b0c      	ldr	r3, [pc, #48]	; (800aa54 <HAL_TIM_Base_MspInit+0x44>)
 800aa24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa26:	4a0b      	ldr	r2, [pc, #44]	; (800aa54 <HAL_TIM_Base_MspInit+0x44>)
 800aa28:	f043 0301 	orr.w	r3, r3, #1
 800aa2c:	6593      	str	r3, [r2, #88]	; 0x58
 800aa2e:	4b09      	ldr	r3, [pc, #36]	; (800aa54 <HAL_TIM_Base_MspInit+0x44>)
 800aa30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa32:	f003 0301 	and.w	r3, r3, #1
 800aa36:	60fb      	str	r3, [r7, #12]
 800aa38:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	2105      	movs	r1, #5
 800aa3e:	201c      	movs	r0, #28
 800aa40:	f7f5 fed3 	bl	80007ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800aa44:	201c      	movs	r0, #28
 800aa46:	f7f5 feec 	bl	8000822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800aa4a:	bf00      	nop
 800aa4c:	3710      	adds	r7, #16
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	40021000 	.word	0x40021000

0800aa58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b0ae      	sub	sp, #184	; 0xb8
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa60:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800aa64:	2200      	movs	r2, #0
 800aa66:	601a      	str	r2, [r3, #0]
 800aa68:	605a      	str	r2, [r3, #4]
 800aa6a:	609a      	str	r2, [r3, #8]
 800aa6c:	60da      	str	r2, [r3, #12]
 800aa6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800aa70:	f107 0310 	add.w	r3, r7, #16
 800aa74:	2294      	movs	r2, #148	; 0x94
 800aa76:	2100      	movs	r1, #0
 800aa78:	4618      	mov	r0, r3
 800aa7a:	f000 f973 	bl	800ad64 <memset>
  if(huart->Instance==USART1)
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	4a25      	ldr	r2, [pc, #148]	; (800ab18 <HAL_UART_MspInit+0xc0>)
 800aa84:	4293      	cmp	r3, r2
 800aa86:	d142      	bne.n	800ab0e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800aa88:	2301      	movs	r3, #1
 800aa8a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800aa90:	f107 0310 	add.w	r3, r7, #16
 800aa94:	4618      	mov	r0, r3
 800aa96:	f7fa f9e3 	bl	8004e60 <HAL_RCCEx_PeriphCLKConfig>
 800aa9a:	4603      	mov	r3, r0
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d001      	beq.n	800aaa4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800aaa0:	f7fe fefa 	bl	8009898 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800aaa4:	4b1d      	ldr	r3, [pc, #116]	; (800ab1c <HAL_UART_MspInit+0xc4>)
 800aaa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aaa8:	4a1c      	ldr	r2, [pc, #112]	; (800ab1c <HAL_UART_MspInit+0xc4>)
 800aaaa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800aaae:	6613      	str	r3, [r2, #96]	; 0x60
 800aab0:	4b1a      	ldr	r3, [pc, #104]	; (800ab1c <HAL_UART_MspInit+0xc4>)
 800aab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800aab8:	60fb      	str	r3, [r7, #12]
 800aaba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800aabc:	4b17      	ldr	r3, [pc, #92]	; (800ab1c <HAL_UART_MspInit+0xc4>)
 800aabe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aac0:	4a16      	ldr	r2, [pc, #88]	; (800ab1c <HAL_UART_MspInit+0xc4>)
 800aac2:	f043 0302 	orr.w	r3, r3, #2
 800aac6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800aac8:	4b14      	ldr	r3, [pc, #80]	; (800ab1c <HAL_UART_MspInit+0xc4>)
 800aaca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aacc:	f003 0302 	and.w	r3, r3, #2
 800aad0:	60bb      	str	r3, [r7, #8]
 800aad2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800aad4:	23c0      	movs	r3, #192	; 0xc0
 800aad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aada:	2302      	movs	r3, #2
 800aadc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aae0:	2300      	movs	r3, #0
 800aae2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aae6:	2303      	movs	r3, #3
 800aae8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800aaec:	2307      	movs	r3, #7
 800aaee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800aaf2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800aaf6:	4619      	mov	r1, r3
 800aaf8:	4809      	ldr	r0, [pc, #36]	; (800ab20 <HAL_UART_MspInit+0xc8>)
 800aafa:	f7f7 f8a1 	bl	8001c40 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800aafe:	2200      	movs	r2, #0
 800ab00:	2105      	movs	r1, #5
 800ab02:	2025      	movs	r0, #37	; 0x25
 800ab04:	f7f5 fe71 	bl	80007ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800ab08:	2025      	movs	r0, #37	; 0x25
 800ab0a:	f7f5 fe8a 	bl	8000822 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800ab0e:	bf00      	nop
 800ab10:	37b8      	adds	r7, #184	; 0xb8
 800ab12:	46bd      	mov	sp, r7
 800ab14:	bd80      	pop	{r7, pc}
 800ab16:	bf00      	nop
 800ab18:	40013800 	.word	0x40013800
 800ab1c:	40021000 	.word	0x40021000
 800ab20:	48000400 	.word	0x48000400

0800ab24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ab24:	b480      	push	{r7}
 800ab26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ab28:	e7fe      	b.n	800ab28 <NMI_Handler+0x4>

0800ab2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ab2a:	b480      	push	{r7}
 800ab2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ab2e:	e7fe      	b.n	800ab2e <HardFault_Handler+0x4>

0800ab30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800ab30:	b480      	push	{r7}
 800ab32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800ab34:	e7fe      	b.n	800ab34 <MemManage_Handler+0x4>

0800ab36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800ab36:	b480      	push	{r7}
 800ab38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800ab3a:	e7fe      	b.n	800ab3a <BusFault_Handler+0x4>

0800ab3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800ab3c:	b480      	push	{r7}
 800ab3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800ab40:	e7fe      	b.n	800ab40 <UsageFault_Handler+0x4>

0800ab42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800ab42:	b480      	push	{r7}
 800ab44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800ab46:	bf00      	nop
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ab54:	f7f5 fd2a 	bl	80005ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800ab58:	f7fd fb46 	bl	80081e8 <xTaskGetSchedulerState>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b01      	cmp	r3, #1
 800ab60:	d001      	beq.n	800ab66 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800ab62:	f7fd fd81 	bl	8008668 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ab66:	bf00      	nop
 800ab68:	bd80      	pop	{r7, pc}
	...

0800ab6c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800ab70:	4802      	ldr	r0, [pc, #8]	; (800ab7c <DMA1_Channel1_IRQHandler+0x10>)
 800ab72:	f7f6 ff15 	bl	80019a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800ab76:	bf00      	nop
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	20001030 	.word	0x20001030

0800ab80 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800ab84:	4802      	ldr	r0, [pc, #8]	; (800ab90 <DMA1_Channel2_IRQHandler+0x10>)
 800ab86:	f7f6 ff0b 	bl	80019a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800ab8a:	bf00      	nop
 800ab8c:	bd80      	pop	{r7, pc}
 800ab8e:	bf00      	nop
 800ab90:	2000111c 	.word	0x2000111c

0800ab94 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800ab94:	b580      	push	{r7, lr}
 800ab96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800ab98:	4802      	ldr	r0, [pc, #8]	; (800aba4 <TIM2_IRQHandler+0x10>)
 800ab9a:	f7fa ff41 	bl	8005a20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800ab9e:	bf00      	nop
 800aba0:	bd80      	pop	{r7, pc}
 800aba2:	bf00      	nop
 800aba4:	20001220 	.word	0x20001220

0800aba8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800abac:	4802      	ldr	r0, [pc, #8]	; (800abb8 <USART1_IRQHandler+0x10>)
 800abae:	f7fb fb7b 	bl	80062a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800abb2:	bf00      	nop
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	2000126c 	.word	0x2000126c

0800abbc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800abbc:	b580      	push	{r7, lr}
 800abbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pushButton_Pin);
 800abc0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800abc4:	f7f7 faf2 	bl	80021ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800abc8:	bf00      	nop
 800abca:	bd80      	pop	{r7, pc}

0800abcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800abcc:	b480      	push	{r7}
 800abce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800abd0:	4b06      	ldr	r3, [pc, #24]	; (800abec <SystemInit+0x20>)
 800abd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800abd6:	4a05      	ldr	r2, [pc, #20]	; (800abec <SystemInit+0x20>)
 800abd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800abdc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800abe0:	bf00      	nop
 800abe2:	46bd      	mov	sp, r7
 800abe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe8:	4770      	bx	lr
 800abea:	bf00      	nop
 800abec:	e000ed00 	.word	0xe000ed00

0800abf0 <Reset_Handler>:
 800abf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ac28 <LoopForever+0x2>
 800abf4:	f7ff ffea 	bl	800abcc <SystemInit>
 800abf8:	480c      	ldr	r0, [pc, #48]	; (800ac2c <LoopForever+0x6>)
 800abfa:	490d      	ldr	r1, [pc, #52]	; (800ac30 <LoopForever+0xa>)
 800abfc:	4a0d      	ldr	r2, [pc, #52]	; (800ac34 <LoopForever+0xe>)
 800abfe:	2300      	movs	r3, #0
 800ac00:	e002      	b.n	800ac08 <LoopCopyDataInit>

0800ac02 <CopyDataInit>:
 800ac02:	58d4      	ldr	r4, [r2, r3]
 800ac04:	50c4      	str	r4, [r0, r3]
 800ac06:	3304      	adds	r3, #4

0800ac08 <LoopCopyDataInit>:
 800ac08:	18c4      	adds	r4, r0, r3
 800ac0a:	428c      	cmp	r4, r1
 800ac0c:	d3f9      	bcc.n	800ac02 <CopyDataInit>
 800ac0e:	4a0a      	ldr	r2, [pc, #40]	; (800ac38 <LoopForever+0x12>)
 800ac10:	4c0a      	ldr	r4, [pc, #40]	; (800ac3c <LoopForever+0x16>)
 800ac12:	2300      	movs	r3, #0
 800ac14:	e001      	b.n	800ac1a <LoopFillZerobss>

0800ac16 <FillZerobss>:
 800ac16:	6013      	str	r3, [r2, #0]
 800ac18:	3204      	adds	r2, #4

0800ac1a <LoopFillZerobss>:
 800ac1a:	42a2      	cmp	r2, r4
 800ac1c:	d3fb      	bcc.n	800ac16 <FillZerobss>
 800ac1e:	f000 f87d 	bl	800ad1c <__libc_init_array>
 800ac22:	f7fe f88d 	bl	8008d40 <main>

0800ac26 <LoopForever>:
 800ac26:	e7fe      	b.n	800ac26 <LoopForever>
 800ac28:	200a0000 	.word	0x200a0000
 800ac2c:	20000000 	.word	0x20000000
 800ac30:	20000078 	.word	0x20000078
 800ac34:	0800ae98 	.word	0x0800ae98
 800ac38:	20000078 	.word	0x20000078
 800ac3c:	20053478 	.word	0x20053478

0800ac40 <ADC1_IRQHandler>:
 800ac40:	e7fe      	b.n	800ac40 <ADC1_IRQHandler>
	...

0800ac44 <arm_max_f32>:
 800ac44:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 800ac48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ac4a:	4607      	mov	r7, r0
 800ac4c:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800ac50:	ecf7 7a01 	vldmia	r7!, {s15}
 800ac54:	d060      	beq.n	800ad18 <arm_max_f32+0xd4>
 800ac56:	2400      	movs	r4, #0
 800ac58:	3014      	adds	r0, #20
 800ac5a:	4625      	mov	r5, r4
 800ac5c:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800ac60:	ed10 7a04 	vldr	s14, [r0, #-16]
 800ac64:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac6c:	bf48      	it	mi
 800ac6e:	eef0 7a47 	vmovmi.f32	s15, s14
 800ac72:	ed10 7a03 	vldr	s14, [r0, #-12]
 800ac76:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac7a:	bf48      	it	mi
 800ac7c:	1c65      	addmi	r5, r4, #1
 800ac7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac82:	bf48      	it	mi
 800ac84:	eef0 7a47 	vmovmi.f32	s15, s14
 800ac88:	ed10 7a02 	vldr	s14, [r0, #-8]
 800ac8c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ac90:	bf48      	it	mi
 800ac92:	1ca5      	addmi	r5, r4, #2
 800ac94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac98:	bf48      	it	mi
 800ac9a:	eef0 7a47 	vmovmi.f32	s15, s14
 800ac9e:	ed10 7a01 	vldr	s14, [r0, #-4]
 800aca2:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aca6:	bf48      	it	mi
 800aca8:	1ce5      	addmi	r5, r4, #3
 800acaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acae:	f104 0404 	add.w	r4, r4, #4
 800acb2:	bf44      	itt	mi
 800acb4:	eef0 7a47 	vmovmi.f32	s15, s14
 800acb8:	4625      	movmi	r5, r4
 800acba:	42a6      	cmp	r6, r4
 800acbc:	f100 0010 	add.w	r0, r0, #16
 800acc0:	d1ce      	bne.n	800ac60 <arm_max_f32+0x1c>
 800acc2:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800acc6:	f01c 0003 	ands.w	r0, ip, #3
 800acca:	d021      	beq.n	800ad10 <arm_max_f32+0xcc>
 800accc:	ed97 7a00 	vldr	s14, [r7]
 800acd0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800acd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acd8:	bfc4      	itt	gt
 800acda:	eef0 7a47 	vmovgt.f32	s15, s14
 800acde:	1a0d      	subgt	r5, r1, r0
 800ace0:	3801      	subs	r0, #1
 800ace2:	d015      	beq.n	800ad10 <arm_max_f32+0xcc>
 800ace4:	ed97 7a01 	vldr	s14, [r7, #4]
 800ace8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800acec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800acf0:	bf44      	itt	mi
 800acf2:	eef0 7a47 	vmovmi.f32	s15, s14
 800acf6:	1a0d      	submi	r5, r1, r0
 800acf8:	2801      	cmp	r0, #1
 800acfa:	d009      	beq.n	800ad10 <arm_max_f32+0xcc>
 800acfc:	ed97 7a02 	vldr	s14, [r7, #8]
 800ad00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad08:	bfc4      	itt	gt
 800ad0a:	eef0 7a47 	vmovgt.f32	s15, s14
 800ad0e:	4665      	movgt	r5, ip
 800ad10:	edc2 7a00 	vstr	s15, [r2]
 800ad14:	601d      	str	r5, [r3, #0]
 800ad16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad18:	4675      	mov	r5, lr
 800ad1a:	e7d4      	b.n	800acc6 <arm_max_f32+0x82>

0800ad1c <__libc_init_array>:
 800ad1c:	b570      	push	{r4, r5, r6, lr}
 800ad1e:	4d0d      	ldr	r5, [pc, #52]	; (800ad54 <__libc_init_array+0x38>)
 800ad20:	4c0d      	ldr	r4, [pc, #52]	; (800ad58 <__libc_init_array+0x3c>)
 800ad22:	1b64      	subs	r4, r4, r5
 800ad24:	10a4      	asrs	r4, r4, #2
 800ad26:	2600      	movs	r6, #0
 800ad28:	42a6      	cmp	r6, r4
 800ad2a:	d109      	bne.n	800ad40 <__libc_init_array+0x24>
 800ad2c:	4d0b      	ldr	r5, [pc, #44]	; (800ad5c <__libc_init_array+0x40>)
 800ad2e:	4c0c      	ldr	r4, [pc, #48]	; (800ad60 <__libc_init_array+0x44>)
 800ad30:	f000 f820 	bl	800ad74 <_init>
 800ad34:	1b64      	subs	r4, r4, r5
 800ad36:	10a4      	asrs	r4, r4, #2
 800ad38:	2600      	movs	r6, #0
 800ad3a:	42a6      	cmp	r6, r4
 800ad3c:	d105      	bne.n	800ad4a <__libc_init_array+0x2e>
 800ad3e:	bd70      	pop	{r4, r5, r6, pc}
 800ad40:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad44:	4798      	blx	r3
 800ad46:	3601      	adds	r6, #1
 800ad48:	e7ee      	b.n	800ad28 <__libc_init_array+0xc>
 800ad4a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ad4e:	4798      	blx	r3
 800ad50:	3601      	adds	r6, #1
 800ad52:	e7f2      	b.n	800ad3a <__libc_init_array+0x1e>
 800ad54:	0800ae90 	.word	0x0800ae90
 800ad58:	0800ae90 	.word	0x0800ae90
 800ad5c:	0800ae90 	.word	0x0800ae90
 800ad60:	0800ae94 	.word	0x0800ae94

0800ad64 <memset>:
 800ad64:	4402      	add	r2, r0
 800ad66:	4603      	mov	r3, r0
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d100      	bne.n	800ad6e <memset+0xa>
 800ad6c:	4770      	bx	lr
 800ad6e:	f803 1b01 	strb.w	r1, [r3], #1
 800ad72:	e7f9      	b.n	800ad68 <memset+0x4>

0800ad74 <_init>:
 800ad74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad76:	bf00      	nop
 800ad78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad7a:	bc08      	pop	{r3}
 800ad7c:	469e      	mov	lr, r3
 800ad7e:	4770      	bx	lr

0800ad80 <_fini>:
 800ad80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad82:	bf00      	nop
 800ad84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad86:	bc08      	pop	{r3}
 800ad88:	469e      	mov	lr, r3
 800ad8a:	4770      	bx	lr
