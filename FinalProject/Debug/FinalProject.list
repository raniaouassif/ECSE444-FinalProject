
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a1c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008bd8  08008bd8  00018bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c48  08008c48  00020290  2**0
                  CONTENTS
  4 .ARM          00000008  08008c48  08008c48  00018c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c50  08008c50  00020290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c50  08008c50  00018c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c54  08008c54  00018c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  08008c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000274d8  20000290  08008ee8  00020290  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20027768  08008ee8  00027768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020290  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ba8b  00000000  00000000  000202c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f92  00000000  00000000  0003bd4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001638  00000000  00000000  0003ece0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001520  00000000  00000000  00040318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ca61  00000000  00000000  00041838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019474  00000000  00000000  0006e299  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115299  00000000  00000000  0008770d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019c9a6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005fa0  00000000  00000000  0019c9f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000290 	.word	0x20000290
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08008bc0 	.word	0x08008bc0

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000294 	.word	0x20000294
 80001f8:	08008bc0 	.word	0x08008bc0

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050a:	2003      	movs	r0, #3
 800050c:	f000 f960 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000510:	2000      	movs	r0, #0
 8000512:	f000 f80d 	bl	8000530 <HAL_InitTick>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800051c:	2301      	movs	r3, #1
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	e001      	b.n	8000526 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000522:	f007 ff71 	bl	8008408 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000526:	79fb      	ldrb	r3, [r7, #7]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800053c:	4b17      	ldr	r3, [pc, #92]	; (800059c <HAL_InitTick+0x6c>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d023      	beq.n	800058c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <HAL_InitTick+0x70>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <HAL_InitTick+0x6c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	fbb3 f3f1 	udiv	r3, r3, r1
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f96d 	bl	800083a <HAL_SYSTICK_Config>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d10f      	bne.n	8000586 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b0f      	cmp	r3, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	2200      	movs	r2, #0
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	f04f 30ff 	mov.w	r0, #4294967295
 8000574:	f000 f937 	bl	80007e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <HAL_InitTick+0x74>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	e007      	b.n	8000590 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	e004      	b.n	8000590 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	e001      	b.n	8000590 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000590:	7bfb      	ldrb	r3, [r7, #15]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	2000028c 	.word	0x2000028c
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	200002ac 	.word	0x200002ac

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	200002ac 	.word	0x200002ac

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_Delay+0x44>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0b      	blt.n	80006be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <__NVIC_EnableIRQ+0x38>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db0a      	blt.n	80006fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	490c      	ldr	r1, [pc, #48]	; (800071c <__NVIC_SetPriority+0x4c>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f8:	e00a      	b.n	8000710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4908      	ldr	r1, [pc, #32]	; (8000720 <__NVIC_SetPriority+0x50>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	3b04      	subs	r3, #4
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	440b      	add	r3, r1
 800070e:	761a      	strb	r2, [r3, #24]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	; 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2b04      	cmp	r3, #4
 8000740:	bf28      	it	cs
 8000742:	2304      	movcs	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3304      	adds	r3, #4
 800074a:	2b06      	cmp	r3, #6
 800074c:	d902      	bls.n	8000754 <NVIC_EncodePriority+0x30>
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3b03      	subs	r3, #3
 8000752:	e000      	b.n	8000756 <NVIC_EncodePriority+0x32>
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	f04f 32ff 	mov.w	r2, #4294967295
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	43da      	mvns	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	401a      	ands	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076c:	f04f 31ff 	mov.w	r1, #4294967295
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43d9      	mvns	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4313      	orrs	r3, r2
         );
}
 800077e:	4618      	mov	r0, r3
 8000780:	3724      	adds	r7, #36	; 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800079c:	d301      	bcc.n	80007a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079e:	2301      	movs	r3, #1
 80007a0:	e00f      	b.n	80007c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <SysTick_Config+0x40>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007aa:	210f      	movs	r1, #15
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295
 80007b0:	f7ff ff8e 	bl	80006d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <SysTick_Config+0x40>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SysTick_Config+0x40>)
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff29 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007f8:	f7ff ff3e 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	6978      	ldr	r0, [r7, #20]
 8000804:	f7ff ff8e 	bl	8000724 <NVIC_EncodePriority>
 8000808:	4602      	mov	r2, r0
 800080a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff5d 	bl	80006d0 <__NVIC_SetPriority>
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff31 	bl	8000694 <__NVIC_EnableIRQ>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffa2 	bl	800078c <SysTick_Config>
 8000848:	4603      	mov	r3, r0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d101      	bne.n	8000864 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e014      	b.n	800088e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d105      	bne.n	800087a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f007 fdeb 	bl	8008450 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2202      	movs	r2, #2
 800087e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2201      	movs	r2, #1
 800088a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	795b      	ldrb	r3, [r3, #5]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d101      	bne.n	80008b6 <HAL_DAC_Start_DMA+0x1e>
 80008b2:	2302      	movs	r3, #2
 80008b4:	e0ab      	b.n	8000a0e <HAL_DAC_Start_DMA+0x176>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2201      	movs	r2, #1
 80008ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2202      	movs	r2, #2
 80008c0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d12f      	bne.n	8000928 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	4a52      	ldr	r2, [pc, #328]	; (8000a18 <HAL_DAC_Start_DMA+0x180>)
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4a51      	ldr	r2, [pc, #324]	; (8000a1c <HAL_DAC_Start_DMA+0x184>)
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	4a50      	ldr	r2, [pc, #320]	; (8000a20 <HAL_DAC_Start_DMA+0x188>)
 80008de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008ee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	2b08      	cmp	r3, #8
 80008f4:	d013      	beq.n	800091e <HAL_DAC_Start_DMA+0x86>
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	2b08      	cmp	r3, #8
 80008fa:	d845      	bhi.n	8000988 <HAL_DAC_Start_DMA+0xf0>
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <HAL_DAC_Start_DMA+0x72>
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	2b04      	cmp	r3, #4
 8000906:	d005      	beq.n	8000914 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000908:	e03e      	b.n	8000988 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3308      	adds	r3, #8
 8000910:	613b      	str	r3, [r7, #16]
        break;
 8000912:	e03c      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	330c      	adds	r3, #12
 800091a:	613b      	str	r3, [r7, #16]
        break;
 800091c:	e037      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3310      	adds	r3, #16
 8000924:	613b      	str	r3, [r7, #16]
        break;
 8000926:	e032      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	4a3d      	ldr	r2, [pc, #244]	; (8000a24 <HAL_DAC_Start_DMA+0x18c>)
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4a3c      	ldr	r2, [pc, #240]	; (8000a28 <HAL_DAC_Start_DMA+0x190>)
 8000936:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	4a3b      	ldr	r2, [pc, #236]	; (8000a2c <HAL_DAC_Start_DMA+0x194>)
 800093e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800094e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	2b08      	cmp	r3, #8
 8000954:	d013      	beq.n	800097e <HAL_DAC_Start_DMA+0xe6>
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	2b08      	cmp	r3, #8
 800095a:	d817      	bhi.n	800098c <HAL_DAC_Start_DMA+0xf4>
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <HAL_DAC_Start_DMA+0xd2>
 8000962:	6a3b      	ldr	r3, [r7, #32]
 8000964:	2b04      	cmp	r3, #4
 8000966:	d005      	beq.n	8000974 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000968:	e010      	b.n	800098c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3314      	adds	r3, #20
 8000970:	613b      	str	r3, [r7, #16]
        break;
 8000972:	e00c      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3318      	adds	r3, #24
 800097a:	613b      	str	r3, [r7, #16]
        break;
 800097c:	e007      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	331c      	adds	r3, #28
 8000984:	613b      	str	r3, [r7, #16]
        break;
 8000986:	e002      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        break;
 8000988:	bf00      	nop
 800098a:	e000      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        break;
 800098c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d111      	bne.n	80009b8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	6898      	ldr	r0, [r3, #8]
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	f000 fd37 	bl	8001420 <HAL_DMA_Start_IT>
 80009b2:	4603      	mov	r3, r0
 80009b4:	75fb      	strb	r3, [r7, #23]
 80009b6:	e010      	b.n	80009da <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80009c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	68d8      	ldr	r0, [r3, #12]
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	f000 fd25 	bl	8001420 <HAL_DMA_Start_IT>
 80009d6:	4603      	mov	r3, r0
 80009d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2200      	movs	r2, #0
 80009de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10c      	bne.n	8000a00 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6819      	ldr	r1, [r3, #0]
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	2201      	movs	r2, #1
 80009f4:	409a      	lsls	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	430a      	orrs	r2, r1
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	e005      	b.n	8000a0c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	f043 0204 	orr.w	r2, r3, #4
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	08000d65 	.word	0x08000d65
 8000a1c:	08000d87 	.word	0x08000d87
 8000a20:	08000da3 	.word	0x08000da3
 8000a24:	08000e0d 	.word	0x08000e0d
 8000a28:	08000e2f 	.word	0x08000e2f
 8000a2c:	08000e4b 	.word	0x08000e4b

08000a30 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6819      	ldr	r1, [r3, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	f003 0310 	and.w	r3, r3, #16
 8000a46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	400a      	ands	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6819      	ldr	r1, [r3, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	2201      	movs	r2, #1
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	400a      	ands	r2, r1
 8000a72:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10d      	bne.n	8000a96 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 fd49 	bl	8001516 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	e00c      	b.n	8000ab0 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fd3b 	bl	8001516 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000aae:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	795b      	ldrb	r3, [r3, #5]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d101      	bne.n	8000b00 <HAL_DAC_ConfigChannel+0x1c>
 8000afc:	2302      	movs	r3, #2
 8000afe:	e12a      	b.n	8000d56 <HAL_DAC_ConfigChannel+0x272>
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2201      	movs	r2, #1
 8000b04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2202      	movs	r2, #2
 8000b0a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d174      	bne.n	8000bfe <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000b14:	f7ff fd5c 	bl	80005d0 <HAL_GetTick>
 8000b18:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d134      	bne.n	8000b8a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b20:	e011      	b.n	8000b46 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b22:	f7ff fd55 	bl	80005d0 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d90a      	bls.n	8000b46 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	691b      	ldr	r3, [r3, #16]
 8000b34:	f043 0208 	orr.w	r2, r3, #8
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2203      	movs	r2, #3
 8000b40:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b42:	2303      	movs	r3, #3
 8000b44:	e107      	b.n	8000d56 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1e6      	bne.n	8000b22 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f7ff fd47 	bl	80005e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	69d2      	ldr	r2, [r2, #28]
 8000b62:	641a      	str	r2, [r3, #64]	; 0x40
 8000b64:	e01e      	b.n	8000ba4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b66:	f7ff fd33 	bl	80005d0 <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d90a      	bls.n	8000b8a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	f043 0208 	orr.w	r2, r3, #8
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2203      	movs	r2, #3
 8000b84:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b86:	2303      	movs	r3, #3
 8000b88:	e0e5      	b.n	8000d56 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	dbe8      	blt.n	8000b66 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f7ff fd27 	bl	80005e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	69d2      	ldr	r2, [r2, #28]
 8000ba2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	ea02 0103 	and.w	r1, r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	6a1a      	ldr	r2, [r3, #32]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	21ff      	movs	r1, #255	; 0xff
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	ea02 0103 	and.w	r1, r2, r3
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	409a      	lsls	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d11d      	bne.n	8000c42 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c0c:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	221f      	movs	r2, #31
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	69fa      	ldr	r2, [r7, #28]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69fa      	ldr	r2, [r7, #28]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	69fa      	ldr	r2, [r7, #28]
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c48:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	2207      	movs	r2, #7
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69fa      	ldr	r2, [r7, #28]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	431a      	orrs	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69fa      	ldr	r2, [r7, #28]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6819      	ldr	r1, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0310 	and.w	r3, r3, #16
 8000c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	400a      	ands	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69fa      	ldr	r2, [r7, #28]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69fa      	ldr	r2, [r7, #28]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ce6:	d104      	bne.n	8000cf2 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cee:	61fb      	str	r3, [r7, #28]
 8000cf0:	e018      	b.n	8000d24 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d104      	bne.n	8000d04 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d00:	61fb      	str	r3, [r7, #28]
 8000d02:	e00f      	b.n	8000d24 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000d04:	f002 ffe6 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8000d08:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <HAL_DAC_ConfigChannel+0x27c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d904      	bls.n	8000d1c <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e003      	b.n	8000d24 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d22:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	69fa      	ldr	r2, [r7, #28]
 8000d2a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6819      	ldr	r1, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f003 0310 	and.w	r3, r3, #16
 8000d38:	22c0      	movs	r2, #192	; 0xc0
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	400a      	ands	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2200      	movs	r2, #0
 8000d52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	04c4b400 	.word	0x04c4b400

08000d64 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f006 ff6e 	bl	8007c54 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	711a      	strb	r2, [r3, #4]
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f7ff fe90 	bl	8000aba <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b084      	sub	sp, #16
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	f043 0204 	orr.w	r2, r3, #4
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f7ff fe86 	bl	8000ace <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	711a      	strb	r2, [r3, #4]
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f7ff ffd8 	bl	8000dd0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2201      	movs	r2, #1
 8000e24:	711a      	strb	r2, [r3, #4]
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f7ff ffd1 	bl	8000de4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e56:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	f043 0204 	orr.w	r2, r3, #4
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f7ff ffc7 	bl	8000df8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	711a      	strb	r2, [r3, #4]
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e0ac      	b.n	8000fe4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 f9d2 	bl	8001238 <DFSDM_GetChannelFromInstance>
 8000e94:	4603      	mov	r3, r0
 8000e96:	4a55      	ldr	r2, [pc, #340]	; (8000fec <HAL_DFSDM_ChannelInit+0x174>)
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e09f      	b.n	8000fe4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f007 fbed 	bl	8008684 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000eaa:	4b51      	ldr	r3, [pc, #324]	; (8000ff0 <HAL_DFSDM_ChannelInit+0x178>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <HAL_DFSDM_ChannelInit+0x178>)
 8000eb2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000eb4:	4b4e      	ldr	r3, [pc, #312]	; (8000ff0 <HAL_DFSDM_ChannelInit+0x178>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d125      	bne.n	8000f08 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000ebc:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a4c      	ldr	r2, [pc, #304]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ec2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000ec6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000ec8:	4b4a      	ldr	r3, [pc, #296]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	4948      	ldr	r1, [pc, #288]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000ed6:	4b47      	ldr	r3, [pc, #284]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a46      	ldr	r2, [pc, #280]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000edc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000ee0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	791b      	ldrb	r3, [r3, #4]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d108      	bne.n	8000efc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000eea:	4b42      	ldr	r3, [pc, #264]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	041b      	lsls	r3, r3, #16
 8000ef6:	493f      	ldr	r1, [pc, #252]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000efc:	4b3d      	ldr	r3, [pc, #244]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a3c      	ldr	r2, [pc, #240]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f06:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000f16:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6819      	ldr	r1, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f26:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f2c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 020f 	bic.w	r2, r2, #15
 8000f44:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6819      	ldr	r1, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f54:	431a      	orrs	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000f6c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6899      	ldr	r1, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f002 0207 	and.w	r2, r2, #7
 8000f98:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6859      	ldr	r1, [r3, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fc4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f930 	bl	8001238 <DFSDM_GetChannelFromInstance>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4904      	ldr	r1, [pc, #16]	; (8000fec <HAL_DFSDM_ChannelInit+0x174>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	200002b4 	.word	0x200002b4
 8000ff0:	200002b0 	.word	0x200002b0
 8000ff4:	40016000 	.word	0x40016000

08000ff8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e0ca      	b.n	80011a0 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a66      	ldr	r2, [pc, #408]	; (80011a8 <HAL_DFSDM_FilterInit+0x1b0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d109      	bne.n	8001028 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001018:	2b01      	cmp	r3, #1
 800101a:	d003      	beq.n	8001024 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001020:	2b01      	cmp	r3, #1
 8001022:	d101      	bne.n	8001028 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e0bb      	b.n	80011a0 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f007 fa73 	bl	800852c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001054:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	7a1b      	ldrb	r3, [r3, #8]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d108      	bne.n	8001070 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e007      	b.n	8001080 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800107e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7a5b      	ldrb	r3, [r3, #9]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d108      	bne.n	800109a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e007      	b.n	80010aa <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80010b8:	f023 0308 	bic.w	r3, r3, #8
 80010bc:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d108      	bne.n	80010d8 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6819      	ldr	r1, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7c1b      	ldrb	r3, [r3, #16]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d108      	bne.n	80010f2 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0210 	orr.w	r2, r2, #16
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e007      	b.n	8001102 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0210 	bic.w	r2, r2, #16
 8001100:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7c5b      	ldrb	r3, [r3, #17]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d108      	bne.n	800111c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 0220 	orr.w	r2, r2, #32
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e007      	b.n	800112c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0220 	bic.w	r2, r2, #32
 800112a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800113a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800113e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6959      	ldr	r1, [r3, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	3b01      	subs	r3, #1
 8001150:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001152:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800115a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699a      	ldr	r2, [r3, #24]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7c1a      	ldrb	r2, [r3, #16]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0201 	orr.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40016100 	.word	0x40016100

080011ac <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d02e      	beq.n	8001224 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80011cc:	2bff      	cmp	r3, #255	; 0xff
 80011ce:	d029      	beq.n	8001224 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10d      	bne.n	8001206 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80011f8:	431a      	orrs	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e00a      	b.n	800121c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6819      	ldr	r1, [r3, #0]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
 8001222:	e001      	b.n	8001228 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001228:	7dfb      	ldrb	r3, [r7, #23]
}
 800122a:	4618      	mov	r0, r3
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <DFSDM_GetChannelFromInstance+0x7c>)
 8001244:	4293      	cmp	r3, r2
 8001246:	d102      	bne.n	800124e <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	e02b      	b.n	80012a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	4a19      	ldr	r2, [pc, #100]	; (80012b8 <DFSDM_GetChannelFromInstance+0x80>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d102      	bne.n	800125c <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001256:	2301      	movs	r3, #1
 8001258:	60fb      	str	r3, [r7, #12]
 800125a:	e024      	b.n	80012a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a17      	ldr	r2, [pc, #92]	; (80012bc <DFSDM_GetChannelFromInstance+0x84>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d102      	bne.n	800126a <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001264:	2302      	movs	r3, #2
 8001266:	60fb      	str	r3, [r7, #12]
 8001268:	e01d      	b.n	80012a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4a14      	ldr	r2, [pc, #80]	; (80012c0 <DFSDM_GetChannelFromInstance+0x88>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d102      	bne.n	8001278 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001272:	2304      	movs	r3, #4
 8001274:	60fb      	str	r3, [r7, #12]
 8001276:	e016      	b.n	80012a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a12      	ldr	r2, [pc, #72]	; (80012c4 <DFSDM_GetChannelFromInstance+0x8c>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d102      	bne.n	8001286 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001280:	2305      	movs	r3, #5
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	e00f      	b.n	80012a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <DFSDM_GetChannelFromInstance+0x90>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d102      	bne.n	8001294 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800128e:	2306      	movs	r3, #6
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	e008      	b.n	80012a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a0d      	ldr	r2, [pc, #52]	; (80012cc <DFSDM_GetChannelFromInstance+0x94>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d102      	bne.n	80012a2 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 800129c:	2307      	movs	r3, #7
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	e001      	b.n	80012a6 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80012a2:	2303      	movs	r3, #3
 80012a4:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80012a6:	68fb      	ldr	r3, [r7, #12]
}
 80012a8:	4618      	mov	r0, r3
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	40016000 	.word	0x40016000
 80012b8:	40016020 	.word	0x40016020
 80012bc:	40016040 	.word	0x40016040
 80012c0:	40016080 	.word	0x40016080
 80012c4:	400160a0 	.word	0x400160a0
 80012c8:	400160c0 	.word	0x400160c0
 80012cc:	400160e0 	.word	0x400160e0

080012d0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d101      	bne.n	80012e2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80012de:	2301      	movs	r3, #1
 80012e0:	e08d      	b.n	80013fe <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	461a      	mov	r2, r3
 80012e8:	4b47      	ldr	r3, [pc, #284]	; (8001408 <HAL_DMA_Init+0x138>)
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d80f      	bhi.n	800130e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	4b45      	ldr	r3, [pc, #276]	; (800140c <HAL_DMA_Init+0x13c>)
 80012f6:	4413      	add	r3, r2
 80012f8:	4a45      	ldr	r2, [pc, #276]	; (8001410 <HAL_DMA_Init+0x140>)
 80012fa:	fba2 2303 	umull	r2, r3, r2, r3
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	009a      	lsls	r2, r3, #2
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a42      	ldr	r2, [pc, #264]	; (8001414 <HAL_DMA_Init+0x144>)
 800130a:	641a      	str	r2, [r3, #64]	; 0x40
 800130c:	e00e      	b.n	800132c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	461a      	mov	r2, r3
 8001314:	4b40      	ldr	r3, [pc, #256]	; (8001418 <HAL_DMA_Init+0x148>)
 8001316:	4413      	add	r3, r2
 8001318:	4a3d      	ldr	r2, [pc, #244]	; (8001410 <HAL_DMA_Init+0x140>)
 800131a:	fba2 2303 	umull	r2, r3, r2, r3
 800131e:	091b      	lsrs	r3, r3, #4
 8001320:	009a      	lsls	r2, r3, #2
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a3c      	ldr	r2, [pc, #240]	; (800141c <HAL_DMA_Init+0x14c>)
 800132a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2202      	movs	r2, #2
 8001330:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001342:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001346:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001350:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800135c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	699b      	ldr	r3, [r3, #24]
 8001362:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001368:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001370:	68fa      	ldr	r2, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	68fa      	ldr	r2, [r7, #12]
 800137c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 fa72 	bl	8001868 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800138c:	d102      	bne.n	8001394 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2200      	movs	r2, #0
 8001392:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800139c:	b2d2      	uxtb	r2, r2
 800139e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a4:	687a      	ldr	r2, [r7, #4]
 80013a6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80013a8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d010      	beq.n	80013d4 <HAL_DMA_Init+0x104>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b04      	cmp	r3, #4
 80013b8:	d80c      	bhi.n	80013d4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f000 fa92 	bl	80018e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013c4:	2200      	movs	r2, #0
 80013c6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	e008      	b.n	80013e6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2200      	movs	r2, #0
 80013d8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2201      	movs	r2, #1
 80013f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40020407 	.word	0x40020407
 800140c:	bffdfff8 	.word	0xbffdfff8
 8001410:	cccccccd 	.word	0xcccccccd
 8001414:	40020000 	.word	0x40020000
 8001418:	bffdfbf8 	.word	0xbffdfbf8
 800141c:	40020400 	.word	0x40020400

08001420 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b086      	sub	sp, #24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
 800142c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800142e:	2300      	movs	r3, #0
 8001430:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001438:	2b01      	cmp	r3, #1
 800143a:	d101      	bne.n	8001440 <HAL_DMA_Start_IT+0x20>
 800143c:	2302      	movs	r3, #2
 800143e:	e066      	b.n	800150e <HAL_DMA_Start_IT+0xee>
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2201      	movs	r2, #1
 8001444:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b01      	cmp	r3, #1
 8001452:	d155      	bne.n	8001500 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2202      	movs	r2, #2
 8001458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2200      	movs	r2, #0
 8001460:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0201 	bic.w	r2, r2, #1
 8001470:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	687a      	ldr	r2, [r7, #4]
 8001476:	68b9      	ldr	r1, [r7, #8]
 8001478:	68f8      	ldr	r0, [r7, #12]
 800147a:	f000 f9b6 	bl	80017ea <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	2b00      	cmp	r3, #0
 8001484:	d008      	beq.n	8001498 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f042 020e 	orr.w	r2, r2, #14
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	e00f      	b.n	80014b8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 0204 	bic.w	r2, r2, #4
 80014a6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f042 020a 	orr.w	r2, r2, #10
 80014b6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014d4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d007      	beq.n	80014ee <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014e8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80014ec:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f042 0201 	orr.w	r2, r2, #1
 80014fc:	601a      	str	r2, [r3, #0]
 80014fe:	e005      	b.n	800150c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001508:	2302      	movs	r3, #2
 800150a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800150c:	7dfb      	ldrb	r3, [r7, #23]
}
 800150e:	4618      	mov	r0, r3
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001516:	b480      	push	{r7}
 8001518:	b085      	sub	sp, #20
 800151a:	af00      	add	r7, sp, #0
 800151c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d008      	beq.n	8001540 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2204      	movs	r2, #4
 8001532:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2200      	movs	r2, #0
 8001538:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800153c:	2301      	movs	r3, #1
 800153e:	e040      	b.n	80015c2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f022 020e 	bic.w	r2, r2, #14
 800154e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001554:	681a      	ldr	r2, [r3, #0]
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800155a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800155e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001574:	f003 021c 	and.w	r2, r3, #28
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157c:	2101      	movs	r1, #1
 800157e:	fa01 f202 	lsl.w	r2, r1, r2
 8001582:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800158c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001592:	2b00      	cmp	r3, #0
 8001594:	d00c      	beq.n	80015b0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015a4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	687a      	ldr	r2, [r7, #4]
 80015ac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80015ae:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2201      	movs	r2, #1
 80015b4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80015c0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3714      	adds	r7, #20
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr

080015ce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d6:	2300      	movs	r3, #0
 80015d8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d005      	beq.n	80015f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	2204      	movs	r2, #4
 80015ea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	73fb      	strb	r3, [r7, #15]
 80015f0:	e047      	b.n	8001682 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f022 020e 	bic.w	r2, r2, #14
 8001600:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	681a      	ldr	r2, [r3, #0]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f022 0201 	bic.w	r2, r2, #1
 8001610:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800161c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001620:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f003 021c 	and.w	r2, r3, #28
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	2101      	movs	r1, #1
 8001630:	fa01 f202 	lsl.w	r2, r1, r2
 8001634:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163a:	687a      	ldr	r2, [r7, #4]
 800163c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800163e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001644:	2b00      	cmp	r3, #0
 8001646:	d00c      	beq.n	8001662 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001652:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001656:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001660:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2201      	movs	r2, #1
 8001666:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001676:	2b00      	cmp	r3, #0
 8001678:	d003      	beq.n	8001682 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	4798      	blx	r3
    }
  }
  return status;
 8001682:	7bfb      	ldrb	r3, [r7, #15]
}
 8001684:	4618      	mov	r0, r3
 8001686:	3710      	adds	r7, #16
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}

0800168c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a8:	f003 031c 	and.w	r3, r3, #28
 80016ac:	2204      	movs	r2, #4
 80016ae:	409a      	lsls	r2, r3
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	4013      	ands	r3, r2
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d026      	beq.n	8001706 <HAL_DMA_IRQHandler+0x7a>
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	f003 0304 	and.w	r3, r3, #4
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d021      	beq.n	8001706 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0320 	and.w	r3, r3, #32
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d107      	bne.n	80016e0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 0204 	bic.w	r2, r2, #4
 80016de:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e4:	f003 021c 	and.w	r2, r3, #28
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ec:	2104      	movs	r1, #4
 80016ee:	fa01 f202 	lsl.w	r2, r1, r2
 80016f2:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d071      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001704:	e06c      	b.n	80017e0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	f003 031c 	and.w	r3, r3, #28
 800170e:	2202      	movs	r2, #2
 8001710:	409a      	lsls	r2, r3
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	4013      	ands	r3, r2
 8001716:	2b00      	cmp	r3, #0
 8001718:	d02e      	beq.n	8001778 <HAL_DMA_IRQHandler+0xec>
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	f003 0302 	and.w	r3, r3, #2
 8001720:	2b00      	cmp	r3, #0
 8001722:	d029      	beq.n	8001778 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0320 	and.w	r3, r3, #32
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10b      	bne.n	800174a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 020a 	bic.w	r2, r2, #10
 8001740:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2201      	movs	r2, #1
 8001746:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174e:	f003 021c 	and.w	r2, r3, #28
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001756:	2102      	movs	r1, #2
 8001758:	fa01 f202 	lsl.w	r2, r1, r2
 800175c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2200      	movs	r2, #0
 8001762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	2b00      	cmp	r3, #0
 800176c:	d038      	beq.n	80017e0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001772:	6878      	ldr	r0, [r7, #4]
 8001774:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001776:	e033      	b.n	80017e0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800177c:	f003 031c 	and.w	r3, r3, #28
 8001780:	2208      	movs	r2, #8
 8001782:	409a      	lsls	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	4013      	ands	r3, r2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d02a      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x156>
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	f003 0308 	and.w	r3, r3, #8
 8001792:	2b00      	cmp	r3, #0
 8001794:	d025      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 020e 	bic.w	r2, r2, #14
 80017a4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017aa:	f003 021c 	and.w	r2, r3, #28
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	2101      	movs	r1, #1
 80017b4:	fa01 f202 	lsl.w	r2, r1, r2
 80017b8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2201      	movs	r2, #1
 80017be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	2201      	movs	r2, #1
 80017c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d004      	beq.n	80017e2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80017e0:	bf00      	nop
 80017e2:	bf00      	nop
}
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80017ea:	b480      	push	{r7}
 80017ec:	b085      	sub	sp, #20
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	60f8      	str	r0, [r7, #12]
 80017f2:	60b9      	str	r1, [r7, #8]
 80017f4:	607a      	str	r2, [r7, #4]
 80017f6:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001800:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001806:	2b00      	cmp	r3, #0
 8001808:	d004      	beq.n	8001814 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	68fa      	ldr	r2, [r7, #12]
 8001810:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001812:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001818:	f003 021c 	and.w	r2, r3, #28
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	2101      	movs	r1, #1
 8001822:	fa01 f202 	lsl.w	r2, r1, r2
 8001826:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	683a      	ldr	r2, [r7, #0]
 800182e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b10      	cmp	r3, #16
 8001836:	d108      	bne.n	800184a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001848:	e007      	b.n	800185a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	68ba      	ldr	r2, [r7, #8]
 8001850:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	687a      	ldr	r2, [r7, #4]
 8001858:	60da      	str	r2, [r3, #12]
}
 800185a:	bf00      	nop
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
	...

08001868 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001868:	b480      	push	{r7}
 800186a:	b085      	sub	sp, #20
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	461a      	mov	r2, r3
 8001876:	4b17      	ldr	r3, [pc, #92]	; (80018d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001878:	429a      	cmp	r2, r3
 800187a:	d80a      	bhi.n	8001892 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	089b      	lsrs	r3, r3, #2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001888:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 800188c:	687a      	ldr	r2, [r7, #4]
 800188e:	6493      	str	r3, [r2, #72]	; 0x48
 8001890:	e007      	b.n	80018a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	089b      	lsrs	r3, r3, #2
 8001898:	009a      	lsls	r2, r3, #2
 800189a:	4b0f      	ldr	r3, [pc, #60]	; (80018d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800189c:	4413      	add	r3, r2
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	3b08      	subs	r3, #8
 80018aa:	4a0c      	ldr	r2, [pc, #48]	; (80018dc <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80018ac:	fba2 2303 	umull	r2, r3, r2, r3
 80018b0:	091b      	lsrs	r3, r3, #4
 80018b2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a0a      	ldr	r2, [pc, #40]	; (80018e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80018b8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	f003 031f 	and.w	r3, r3, #31
 80018c0:	2201      	movs	r2, #1
 80018c2:	409a      	lsls	r2, r3
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40020407 	.word	0x40020407
 80018d8:	4002081c 	.word	0x4002081c
 80018dc:	cccccccd 	.word	0xcccccccd
 80018e0:	40020880 	.word	0x40020880

080018e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b085      	sub	sp, #20
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80018f4:	68fa      	ldr	r2, [r7, #12]
 80018f6:	4b0b      	ldr	r3, [pc, #44]	; (8001924 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80018f8:	4413      	add	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	461a      	mov	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a08      	ldr	r2, [pc, #32]	; (8001928 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001906:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	3b01      	subs	r3, #1
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2201      	movs	r2, #1
 8001912:	409a      	lsls	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001918:	bf00      	nop
 800191a:	3714      	adds	r7, #20
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	1000823f 	.word	0x1000823f
 8001928:	40020940 	.word	0x40020940

0800192c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193a:	e166      	b.n	8001c0a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	2101      	movs	r1, #1
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	fa01 f303 	lsl.w	r3, r1, r3
 8001948:	4013      	ands	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 8158 	beq.w	8001c04 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f003 0303 	and.w	r3, r3, #3
 800195c:	2b01      	cmp	r3, #1
 800195e:	d005      	beq.n	800196c <HAL_GPIO_Init+0x40>
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	f003 0303 	and.w	r3, r3, #3
 8001968:	2b02      	cmp	r3, #2
 800196a:	d130      	bne.n	80019ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	2203      	movs	r2, #3
 8001978:	fa02 f303 	lsl.w	r3, r2, r3
 800197c:	43db      	mvns	r3, r3
 800197e:	693a      	ldr	r2, [r7, #16]
 8001980:	4013      	ands	r3, r2
 8001982:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	693a      	ldr	r2, [r7, #16]
 8001992:	4313      	orrs	r3, r2
 8001994:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	693a      	ldr	r2, [r7, #16]
 800199a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019a2:	2201      	movs	r2, #1
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	f003 0201 	and.w	r2, r3, #1
 80019bc:	697b      	ldr	r3, [r7, #20]
 80019be:	fa02 f303 	lsl.w	r3, r2, r3
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	2b03      	cmp	r3, #3
 80019d8:	d017      	beq.n	8001a0a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68db      	ldr	r3, [r3, #12]
 80019de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	2203      	movs	r2, #3
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	005b      	lsls	r3, r3, #1
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	4313      	orrs	r3, r2
 8001a02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	693a      	ldr	r2, [r7, #16]
 8001a08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f003 0303 	and.w	r3, r3, #3
 8001a12:	2b02      	cmp	r3, #2
 8001a14:	d123      	bne.n	8001a5e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	08da      	lsrs	r2, r3, #3
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	3208      	adds	r2, #8
 8001a1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	220f      	movs	r2, #15
 8001a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a32:	43db      	mvns	r3, r3
 8001a34:	693a      	ldr	r2, [r7, #16]
 8001a36:	4013      	ands	r3, r2
 8001a38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	691a      	ldr	r2, [r3, #16]
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	f003 0307 	and.w	r3, r3, #7
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4a:	693a      	ldr	r2, [r7, #16]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	08da      	lsrs	r2, r3, #3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3208      	adds	r2, #8
 8001a58:	6939      	ldr	r1, [r7, #16]
 8001a5a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	2203      	movs	r2, #3
 8001a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	693a      	ldr	r2, [r7, #16]
 8001a72:	4013      	ands	r3, r2
 8001a74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0203 	and.w	r2, r3, #3
 8001a7e:	697b      	ldr	r3, [r7, #20]
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	fa02 f303 	lsl.w	r3, r2, r3
 8001a86:	693a      	ldr	r2, [r7, #16]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	693a      	ldr	r2, [r7, #16]
 8001a90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 80b2 	beq.w	8001c04 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa0:	4b61      	ldr	r3, [pc, #388]	; (8001c28 <HAL_GPIO_Init+0x2fc>)
 8001aa2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001aa4:	4a60      	ldr	r2, [pc, #384]	; (8001c28 <HAL_GPIO_Init+0x2fc>)
 8001aa6:	f043 0301 	orr.w	r3, r3, #1
 8001aaa:	6613      	str	r3, [r2, #96]	; 0x60
 8001aac:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <HAL_GPIO_Init+0x2fc>)
 8001aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001ab8:	4a5c      	ldr	r2, [pc, #368]	; (8001c2c <HAL_GPIO_Init+0x300>)
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	089b      	lsrs	r3, r3, #2
 8001abe:	3302      	adds	r3, #2
 8001ac0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ac4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	220f      	movs	r2, #15
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ae2:	d02b      	beq.n	8001b3c <HAL_GPIO_Init+0x210>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	4a52      	ldr	r2, [pc, #328]	; (8001c30 <HAL_GPIO_Init+0x304>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d025      	beq.n	8001b38 <HAL_GPIO_Init+0x20c>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	4a51      	ldr	r2, [pc, #324]	; (8001c34 <HAL_GPIO_Init+0x308>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d01f      	beq.n	8001b34 <HAL_GPIO_Init+0x208>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	4a50      	ldr	r2, [pc, #320]	; (8001c38 <HAL_GPIO_Init+0x30c>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d019      	beq.n	8001b30 <HAL_GPIO_Init+0x204>
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	4a4f      	ldr	r2, [pc, #316]	; (8001c3c <HAL_GPIO_Init+0x310>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d013      	beq.n	8001b2c <HAL_GPIO_Init+0x200>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	4a4e      	ldr	r2, [pc, #312]	; (8001c40 <HAL_GPIO_Init+0x314>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d00d      	beq.n	8001b28 <HAL_GPIO_Init+0x1fc>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	4a4d      	ldr	r2, [pc, #308]	; (8001c44 <HAL_GPIO_Init+0x318>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d007      	beq.n	8001b24 <HAL_GPIO_Init+0x1f8>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	4a4c      	ldr	r2, [pc, #304]	; (8001c48 <HAL_GPIO_Init+0x31c>)
 8001b18:	4293      	cmp	r3, r2
 8001b1a:	d101      	bne.n	8001b20 <HAL_GPIO_Init+0x1f4>
 8001b1c:	2307      	movs	r3, #7
 8001b1e:	e00e      	b.n	8001b3e <HAL_GPIO_Init+0x212>
 8001b20:	2308      	movs	r3, #8
 8001b22:	e00c      	b.n	8001b3e <HAL_GPIO_Init+0x212>
 8001b24:	2306      	movs	r3, #6
 8001b26:	e00a      	b.n	8001b3e <HAL_GPIO_Init+0x212>
 8001b28:	2305      	movs	r3, #5
 8001b2a:	e008      	b.n	8001b3e <HAL_GPIO_Init+0x212>
 8001b2c:	2304      	movs	r3, #4
 8001b2e:	e006      	b.n	8001b3e <HAL_GPIO_Init+0x212>
 8001b30:	2303      	movs	r3, #3
 8001b32:	e004      	b.n	8001b3e <HAL_GPIO_Init+0x212>
 8001b34:	2302      	movs	r3, #2
 8001b36:	e002      	b.n	8001b3e <HAL_GPIO_Init+0x212>
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e000      	b.n	8001b3e <HAL_GPIO_Init+0x212>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	f002 0203 	and.w	r2, r2, #3
 8001b44:	0092      	lsls	r2, r2, #2
 8001b46:	4093      	lsls	r3, r2
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b4e:	4937      	ldr	r1, [pc, #220]	; (8001c2c <HAL_GPIO_Init+0x300>)
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	089b      	lsrs	r3, r3, #2
 8001b54:	3302      	adds	r3, #2
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b5c:	4b3b      	ldr	r3, [pc, #236]	; (8001c4c <HAL_GPIO_Init+0x320>)
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	43db      	mvns	r3, r3
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	4013      	ands	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685b      	ldr	r3, [r3, #4]
 8001b70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d003      	beq.n	8001b80 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4313      	orrs	r3, r2
 8001b7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b80:	4a32      	ldr	r2, [pc, #200]	; (8001c4c <HAL_GPIO_Init+0x320>)
 8001b82:	693b      	ldr	r3, [r7, #16]
 8001b84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b86:	4b31      	ldr	r3, [pc, #196]	; (8001c4c <HAL_GPIO_Init+0x320>)
 8001b88:	68db      	ldr	r3, [r3, #12]
 8001b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001baa:	4a28      	ldr	r2, [pc, #160]	; (8001c4c <HAL_GPIO_Init+0x320>)
 8001bac:	693b      	ldr	r3, [r7, #16]
 8001bae:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001bb0:	4b26      	ldr	r3, [pc, #152]	; (8001c4c <HAL_GPIO_Init+0x320>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	693a      	ldr	r2, [r7, #16]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d003      	beq.n	8001bd4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001bcc:	693a      	ldr	r2, [r7, #16]
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bd4:	4a1d      	ldr	r2, [pc, #116]	; (8001c4c <HAL_GPIO_Init+0x320>)
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001bda:	4b1c      	ldr	r3, [pc, #112]	; (8001c4c <HAL_GPIO_Init+0x320>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	43db      	mvns	r3, r3
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4013      	ands	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bfe:	4a13      	ldr	r2, [pc, #76]	; (8001c4c <HAL_GPIO_Init+0x320>)
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	3301      	adds	r3, #1
 8001c08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	fa22 f303 	lsr.w	r3, r2, r3
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	f47f ae91 	bne.w	800193c <HAL_GPIO_Init+0x10>
  }
}
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40021000 	.word	0x40021000
 8001c2c:	40010000 	.word	0x40010000
 8001c30:	48000400 	.word	0x48000400
 8001c34:	48000800 	.word	0x48000800
 8001c38:	48000c00 	.word	0x48000c00
 8001c3c:	48001000 	.word	0x48001000
 8001c40:	48001400 	.word	0x48001400
 8001c44:	48001800 	.word	0x48001800
 8001c48:	48001c00 	.word	0x48001c00
 8001c4c:	40010400 	.word	0x40010400

08001c50 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001c5e:	e0c9      	b.n	8001df4 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001c60:	2201      	movs	r2, #1
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80bc 	beq.w	8001dee <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001c76:	4a66      	ldr	r2, [pc, #408]	; (8001e10 <HAL_GPIO_DeInit+0x1c0>)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	089b      	lsrs	r3, r3, #2
 8001c7c:	3302      	adds	r3, #2
 8001c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c82:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f003 0303 	and.w	r3, r3, #3
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	220f      	movs	r2, #15
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	68fa      	ldr	r2, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001c9e:	d02b      	beq.n	8001cf8 <HAL_GPIO_DeInit+0xa8>
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	4a5c      	ldr	r2, [pc, #368]	; (8001e14 <HAL_GPIO_DeInit+0x1c4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d025      	beq.n	8001cf4 <HAL_GPIO_DeInit+0xa4>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	4a5b      	ldr	r2, [pc, #364]	; (8001e18 <HAL_GPIO_DeInit+0x1c8>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d01f      	beq.n	8001cf0 <HAL_GPIO_DeInit+0xa0>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	4a5a      	ldr	r2, [pc, #360]	; (8001e1c <HAL_GPIO_DeInit+0x1cc>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d019      	beq.n	8001cec <HAL_GPIO_DeInit+0x9c>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	4a59      	ldr	r2, [pc, #356]	; (8001e20 <HAL_GPIO_DeInit+0x1d0>)
 8001cbc:	4293      	cmp	r3, r2
 8001cbe:	d013      	beq.n	8001ce8 <HAL_GPIO_DeInit+0x98>
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	4a58      	ldr	r2, [pc, #352]	; (8001e24 <HAL_GPIO_DeInit+0x1d4>)
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d00d      	beq.n	8001ce4 <HAL_GPIO_DeInit+0x94>
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4a57      	ldr	r2, [pc, #348]	; (8001e28 <HAL_GPIO_DeInit+0x1d8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d007      	beq.n	8001ce0 <HAL_GPIO_DeInit+0x90>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	4a56      	ldr	r2, [pc, #344]	; (8001e2c <HAL_GPIO_DeInit+0x1dc>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d101      	bne.n	8001cdc <HAL_GPIO_DeInit+0x8c>
 8001cd8:	2307      	movs	r3, #7
 8001cda:	e00e      	b.n	8001cfa <HAL_GPIO_DeInit+0xaa>
 8001cdc:	2308      	movs	r3, #8
 8001cde:	e00c      	b.n	8001cfa <HAL_GPIO_DeInit+0xaa>
 8001ce0:	2306      	movs	r3, #6
 8001ce2:	e00a      	b.n	8001cfa <HAL_GPIO_DeInit+0xaa>
 8001ce4:	2305      	movs	r3, #5
 8001ce6:	e008      	b.n	8001cfa <HAL_GPIO_DeInit+0xaa>
 8001ce8:	2304      	movs	r3, #4
 8001cea:	e006      	b.n	8001cfa <HAL_GPIO_DeInit+0xaa>
 8001cec:	2303      	movs	r3, #3
 8001cee:	e004      	b.n	8001cfa <HAL_GPIO_DeInit+0xaa>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e002      	b.n	8001cfa <HAL_GPIO_DeInit+0xaa>
 8001cf4:	2301      	movs	r3, #1
 8001cf6:	e000      	b.n	8001cfa <HAL_GPIO_DeInit+0xaa>
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	697a      	ldr	r2, [r7, #20]
 8001cfc:	f002 0203 	and.w	r2, r2, #3
 8001d00:	0092      	lsls	r2, r2, #2
 8001d02:	4093      	lsls	r3, r2
 8001d04:	68fa      	ldr	r2, [r7, #12]
 8001d06:	429a      	cmp	r2, r3
 8001d08:	d132      	bne.n	8001d70 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001d0a:	4b49      	ldr	r3, [pc, #292]	; (8001e30 <HAL_GPIO_DeInit+0x1e0>)
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	43db      	mvns	r3, r3
 8001d12:	4947      	ldr	r1, [pc, #284]	; (8001e30 <HAL_GPIO_DeInit+0x1e0>)
 8001d14:	4013      	ands	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001d18:	4b45      	ldr	r3, [pc, #276]	; (8001e30 <HAL_GPIO_DeInit+0x1e0>)
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	43db      	mvns	r3, r3
 8001d20:	4943      	ldr	r1, [pc, #268]	; (8001e30 <HAL_GPIO_DeInit+0x1e0>)
 8001d22:	4013      	ands	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001d26:	4b42      	ldr	r3, [pc, #264]	; (8001e30 <HAL_GPIO_DeInit+0x1e0>)
 8001d28:	68da      	ldr	r2, [r3, #12]
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	4940      	ldr	r1, [pc, #256]	; (8001e30 <HAL_GPIO_DeInit+0x1e0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001d34:	4b3e      	ldr	r3, [pc, #248]	; (8001e30 <HAL_GPIO_DeInit+0x1e0>)
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	693b      	ldr	r3, [r7, #16]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	493c      	ldr	r1, [pc, #240]	; (8001e30 <HAL_GPIO_DeInit+0x1e0>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0303 	and.w	r3, r3, #3
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	220f      	movs	r2, #15
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001d52:	4a2f      	ldr	r2, [pc, #188]	; (8001e10 <HAL_GPIO_DeInit+0x1c0>)
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	089b      	lsrs	r3, r3, #2
 8001d58:	3302      	adds	r3, #2
 8001d5a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	43da      	mvns	r2, r3
 8001d62:	482b      	ldr	r0, [pc, #172]	; (8001e10 <HAL_GPIO_DeInit+0x1c0>)
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	400a      	ands	r2, r1
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2103      	movs	r1, #3
 8001d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001d7e:	431a      	orrs	r2, r3
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	08da      	lsrs	r2, r3, #3
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3208      	adds	r2, #8
 8001d8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0307 	and.w	r3, r3, #7
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	220f      	movs	r2, #15
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	697a      	ldr	r2, [r7, #20]
 8001da2:	08d2      	lsrs	r2, r2, #3
 8001da4:	4019      	ands	r1, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2103      	movs	r1, #3
 8001db8:	fa01 f303 	lsl.w	r3, r1, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	401a      	ands	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685a      	ldr	r2, [r3, #4]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	401a      	ands	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	2103      	movs	r1, #3
 8001de2:	fa01 f303 	lsl.w	r3, r1, r3
 8001de6:	43db      	mvns	r3, r3
 8001de8:	401a      	ands	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	3301      	adds	r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001df4:	683a      	ldr	r2, [r7, #0]
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	fa22 f303 	lsr.w	r3, r2, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f47f af2f 	bne.w	8001c60 <HAL_GPIO_DeInit+0x10>
  }
}
 8001e02:	bf00      	nop
 8001e04:	bf00      	nop
 8001e06:	371c      	adds	r7, #28
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0e:	4770      	bx	lr
 8001e10:	40010000 	.word	0x40010000
 8001e14:	48000400 	.word	0x48000400
 8001e18:	48000800 	.word	0x48000800
 8001e1c:	48000c00 	.word	0x48000c00
 8001e20:	48001000 	.word	0x48001000
 8001e24:	48001400 	.word	0x48001400
 8001e28:	48001800 	.word	0x48001800
 8001e2c:	48001c00 	.word	0x48001c00
 8001e30:	40010400 	.word	0x40010400

08001e34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
 8001e40:	4613      	mov	r3, r2
 8001e42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e44:	787b      	ldrb	r3, [r7, #1]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d003      	beq.n	8001e52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e4a:	887a      	ldrh	r2, [r7, #2]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e50:	e002      	b.n	8001e58 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e58:	bf00      	nop
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e70:	695a      	ldr	r2, [r3, #20]
 8001e72:	88fb      	ldrh	r3, [r7, #6]
 8001e74:	4013      	ands	r3, r2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d006      	beq.n	8001e88 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e7a:	4a05      	ldr	r2, [pc, #20]	; (8001e90 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e7c:	88fb      	ldrh	r3, [r7, #6]
 8001e7e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e80:	88fb      	ldrh	r3, [r7, #6]
 8001e82:	4618      	mov	r0, r3
 8001e84:	f005 feda 	bl	8007c3c <HAL_GPIO_EXTI_Callback>
  }
}
 8001e88:	bf00      	nop
 8001e8a:	3708      	adds	r7, #8
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40010400 	.word	0x40010400

08001e94 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af02      	add	r7, sp, #8
 8001e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001ea0:	f7fe fb96 	bl	80005d0 <HAL_GetTick>
 8001ea4:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d102      	bne.n	8001eb2 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	73fb      	strb	r3, [r7, #15]
 8001eb0:	e092      	b.n	8001fd8 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f040 808b 	bne.w	8001fd8 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8001ec2:	6878      	ldr	r0, [r7, #4]
 8001ec4:	f006 fc4e 	bl	8008764 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8001ec8:	f241 3188 	movw	r1, #5000	; 0x1388
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f000 fad0 	bl	8002472 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	689a      	ldr	r2, [r3, #8]
 8001ed8:	4b42      	ldr	r3, [pc, #264]	; (8001fe4 <HAL_OSPI_Init+0x150>)
 8001eda:	4013      	ands	r3, r2
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	68d1      	ldr	r1, [r2, #12]
 8001ee0:	687a      	ldr	r2, [r7, #4]
 8001ee2:	6912      	ldr	r2, [r2, #16]
 8001ee4:	3a01      	subs	r2, #1
 8001ee6:	0412      	lsls	r2, r2, #16
 8001ee8:	4311      	orrs	r1, r2
 8001eea:	687a      	ldr	r2, [r7, #4]
 8001eec:	6952      	ldr	r2, [r2, #20]
 8001eee:	3a01      	subs	r2, #1
 8001ef0:	0212      	lsls	r2, r2, #8
 8001ef2:	4311      	orrs	r1, r2
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001ef8:	4311      	orrs	r1, r2
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	69d2      	ldr	r2, [r2, #28]
 8001efe:	4311      	orrs	r1, r2
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	6812      	ldr	r2, [r2, #0]
 8001f04:	430b      	orrs	r3, r1
 8001f06:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	0412      	lsls	r2, r2, #16
 8001f12:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	3b01      	subs	r3, #1
 8001f24:	021a      	lsls	r2, r3, #8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f32:	9300      	str	r3, [sp, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	2200      	movs	r2, #0
 8001f38:	2120      	movs	r1, #32
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f000 fddc 	bl	8002af8 <OSPI_WaitFlagStateUntilTimeout>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d146      	bne.n	8001fd8 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	1e5a      	subs	r2, r3, #1
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	430a      	orrs	r2, r1
 8001f60:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	689a      	ldr	r2, [r3, #8]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	430a      	orrs	r2, r1
 8001f76:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001f80:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	681a      	ldr	r2, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f042 0201 	orr.w	r2, r2, #1
 8001fa6:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b02      	cmp	r3, #2
 8001fae:	d107      	bne.n	8001fc0 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	689a      	ldr	r2, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f042 0202 	orr.w	r2, r2, #2
 8001fbe:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	68db      	ldr	r3, [r3, #12]
 8001fc4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fc8:	d103      	bne.n	8001fd2 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	645a      	str	r2, [r3, #68]	; 0x44
 8001fd0:	e002      	b.n	8001fd8 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2202      	movs	r2, #2
 8001fd6:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	f8e0f8f4 	.word	0xf8e0f8f4

08001fe8 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d102      	bne.n	8002000 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	73fb      	strb	r3, [r7, #15]
 8001ffe:	e015      	b.n	800202c <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f022 0201 	bic.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	689a      	ldr	r2, [r3, #8]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0202 	bic.w	r2, r2, #2
 800201e:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f006 fc0b 	bl	800883c <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b08a      	sub	sp, #40	; 0x28
 800203a:	af02      	add	r7, sp, #8
 800203c:	60f8      	str	r0, [r7, #12]
 800203e:	60b9      	str	r1, [r7, #8]
 8002040:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 8002042:	f7fe fac5 	bl	80005d0 <HAL_GetTick>
 8002046:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204c:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002052:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	2b02      	cmp	r3, #2
 8002058:	d104      	bne.n	8002064 <HAL_OSPI_Command+0x2e>
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002062:	d10d      	bne.n	8002080 <HAL_OSPI_Command+0x4a>
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	2b14      	cmp	r3, #20
 8002068:	d103      	bne.n	8002072 <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 800206a:	68bb      	ldr	r3, [r7, #8]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	2b02      	cmp	r3, #2
 8002070:	d006      	beq.n	8002080 <HAL_OSPI_Command+0x4a>
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b24      	cmp	r3, #36	; 0x24
 8002076:	d153      	bne.n	8002120 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b01      	cmp	r3, #1
 800207e:	d14f      	bne.n	8002120 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2200      	movs	r2, #0
 8002088:	2120      	movs	r1, #32
 800208a:	68f8      	ldr	r0, [r7, #12]
 800208c:	f000 fd34 	bl	8002af8 <OSPI_WaitFlagStateUntilTimeout>
 8002090:	4603      	mov	r3, r0
 8002092:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8002094:	7ffb      	ldrb	r3, [r7, #31]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d148      	bne.n	800212c <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 80020a0:	68b9      	ldr	r1, [r7, #8]
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 fd60 	bl	8002b68 <OSPI_ConfigCmd>
 80020a8:	4603      	mov	r3, r0
 80020aa:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80020ac:	7ffb      	ldrb	r3, [r7, #31]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d13c      	bne.n	800212c <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10e      	bne.n	80020d8 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	69bb      	ldr	r3, [r7, #24]
 80020c0:	2201      	movs	r2, #1
 80020c2:	2102      	movs	r1, #2
 80020c4:	68f8      	ldr	r0, [r7, #12]
 80020c6:	f000 fd17 	bl	8002af8 <OSPI_WaitFlagStateUntilTimeout>
 80020ca:	4603      	mov	r3, r0
 80020cc:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	2202      	movs	r2, #2
 80020d4:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80020d6:	e029      	b.n	800212c <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d103      	bne.n	80020e8 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2204      	movs	r2, #4
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80020e6:	e021      	b.n	800212c <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d10b      	bne.n	8002108 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f4:	2b24      	cmp	r3, #36	; 0x24
 80020f6:	d103      	bne.n	8002100 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2204      	movs	r2, #4
 80020fc:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80020fe:	e015      	b.n	800212c <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2214      	movs	r2, #20
 8002104:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002106:	e011      	b.n	800212c <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800210c:	2b14      	cmp	r3, #20
 800210e:	d103      	bne.n	8002118 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2204      	movs	r2, #4
 8002114:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002116:	e009      	b.n	800212c <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2224      	movs	r2, #36	; 0x24
 800211c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800211e:	e005      	b.n	800212c <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2210      	movs	r2, #16
 8002128:	649a      	str	r2, [r3, #72]	; 0x48
 800212a:	e000      	b.n	800212e <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 800212c:	bf00      	nop
  }

  /* Return function status */
  return status;
 800212e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002130:	4618      	mov	r0, r3
 8002132:	3720      	adds	r7, #32
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002138:	b580      	push	{r7, lr}
 800213a:	b08a      	sub	sp, #40	; 0x28
 800213c:	af02      	add	r7, sp, #8
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002144:	f7fe fa44 	bl	80005d0 <HAL_GetTick>
 8002148:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	3350      	adds	r3, #80	; 0x50
 8002150:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d105      	bne.n	8002164 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2208      	movs	r2, #8
 8002160:	649a      	str	r2, [r3, #72]	; 0x48
 8002162:	e057      	b.n	8002214 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002168:	2b04      	cmp	r3, #4
 800216a:	d14e      	bne.n	800220a <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002194:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	69bb      	ldr	r3, [r7, #24]
 800219c:	2201      	movs	r2, #1
 800219e:	2104      	movs	r1, #4
 80021a0:	68f8      	ldr	r0, [r7, #12]
 80021a2:	f000 fca9 	bl	8002af8 <OSPI_WaitFlagStateUntilTimeout>
 80021a6:	4603      	mov	r3, r0
 80021a8:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 80021aa:	7ffb      	ldrb	r3, [r7, #31]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d113      	bne.n	80021d8 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b4:	781a      	ldrb	r2, [r3, #0]
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021be:	1c5a      	adds	r2, r3, #1
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021c8:	1e5a      	subs	r2, r3, #1
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d1df      	bne.n	8002196 <HAL_OSPI_Transmit+0x5e>
 80021d6:	e000      	b.n	80021da <HAL_OSPI_Transmit+0xa2>
          break;
 80021d8:	bf00      	nop

      if (status == HAL_OK)
 80021da:	7ffb      	ldrb	r3, [r7, #31]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d119      	bne.n	8002214 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	9300      	str	r3, [sp, #0]
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	2201      	movs	r2, #1
 80021e8:	2102      	movs	r1, #2
 80021ea:	68f8      	ldr	r0, [r7, #12]
 80021ec:	f000 fc84 	bl	8002af8 <OSPI_WaitFlagStateUntilTimeout>
 80021f0:	4603      	mov	r3, r0
 80021f2:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80021f4:	7ffb      	ldrb	r3, [r7, #31]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d10c      	bne.n	8002214 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	2202      	movs	r2, #2
 8002200:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2202      	movs	r2, #2
 8002206:	645a      	str	r2, [r3, #68]	; 0x44
 8002208:	e004      	b.n	8002214 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2210      	movs	r2, #16
 8002212:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8002214:	7ffb      	ldrb	r3, [r7, #31]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3720      	adds	r7, #32
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}

0800221e <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 800221e:	b580      	push	{r7, lr}
 8002220:	b08c      	sub	sp, #48	; 0x30
 8002222:	af02      	add	r7, sp, #8
 8002224:	60f8      	str	r0, [r7, #12]
 8002226:	60b9      	str	r1, [r7, #8]
 8002228:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800222a:	f7fe f9d1 	bl	80005d0 <HAL_GetTick>
 800222e:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	3350      	adds	r3, #80	; 0x50
 8002236:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800223e:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002248:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d106      	bne.n	800225e <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2208      	movs	r2, #8
 800225a:	649a      	str	r2, [r3, #72]	; 0x48
 800225c:	e07c      	b.n	8002358 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	2b04      	cmp	r3, #4
 8002264:	d172      	bne.n	800234c <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	68ba      	ldr	r2, [r7, #8]
 800227e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002292:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800229c:	d104      	bne.n	80022a8 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	649a      	str	r2, [r3, #72]	; 0x48
 80022a6:	e011      	b.n	80022cc <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80022b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d004      	beq.n	80022c2 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	649a      	str	r2, [r3, #72]	; 0x48
 80022c0:	e004      	b.n	80022cc <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	6a3b      	ldr	r3, [r7, #32]
 80022d2:	2201      	movs	r2, #1
 80022d4:	2106      	movs	r1, #6
 80022d6:	68f8      	ldr	r0, [r7, #12]
 80022d8:	f000 fc0e 	bl	8002af8 <OSPI_WaitFlagStateUntilTimeout>
 80022dc:	4603      	mov	r3, r0
 80022de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80022e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d114      	bne.n	8002314 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	7812      	ldrb	r2, [r2, #0]
 80022f2:	b2d2      	uxtb	r2, r2
 80022f4:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022fa:	1c5a      	adds	r2, r3, #1
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002304:	1e5a      	subs	r2, r3, #1
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230e:	2b00      	cmp	r3, #0
 8002310:	d1dc      	bne.n	80022cc <HAL_OSPI_Receive+0xae>
 8002312:	e000      	b.n	8002316 <HAL_OSPI_Receive+0xf8>
          break;
 8002314:	bf00      	nop

      if (status == HAL_OK)
 8002316:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800231a:	2b00      	cmp	r3, #0
 800231c:	d11c      	bne.n	8002358 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	9300      	str	r3, [sp, #0]
 8002322:	6a3b      	ldr	r3, [r7, #32]
 8002324:	2201      	movs	r2, #1
 8002326:	2102      	movs	r1, #2
 8002328:	68f8      	ldr	r0, [r7, #12]
 800232a:	f000 fbe5 	bl	8002af8 <OSPI_WaitFlagStateUntilTimeout>
 800232e:	4603      	mov	r3, r0
 8002330:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8002334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10d      	bne.n	8002358 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2202      	movs	r2, #2
 8002342:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2202      	movs	r2, #2
 8002348:	645a      	str	r2, [r3, #68]	; 0x44
 800234a:	e005      	b.n	8002358 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2210      	movs	r2, #16
 8002356:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8002358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800235c:	4618      	mov	r0, r3
 800235e:	3728      	adds	r7, #40	; 0x28
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b08a      	sub	sp, #40	; 0x28
 8002368:	af02      	add	r7, sp, #8
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002370:	f7fe f92e 	bl	80005d0 <HAL_GetTick>
 8002374:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800237c:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002386:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800238c:	2b04      	cmp	r3, #4
 800238e:	d164      	bne.n	800245a <HAL_OSPI_AutoPolling+0xf6>
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002398:	d15f      	bne.n	800245a <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	2200      	movs	r2, #0
 80023a2:	2120      	movs	r1, #32
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fba7 	bl	8002af8 <OSPI_WaitFlagStateUntilTimeout>
 80023aa:	4603      	mov	r3, r0
 80023ac:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 80023ae:	7ffb      	ldrb	r3, [r7, #31]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d158      	bne.n	8002466 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	6812      	ldr	r2, [r2, #0]
 80023bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	6852      	ldr	r2, [r2, #4]
 80023c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	68ba      	ldr	r2, [r7, #8]
 80023d2:	6912      	ldr	r2, [r2, #16]
 80023d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	6899      	ldr	r1, [r3, #8]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	430b      	orrs	r3, r1
 80023ec:	431a      	orrs	r2, r3
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80023f6:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002400:	d104      	bne.n	800240c <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	697a      	ldr	r2, [r7, #20]
 8002408:	649a      	str	r2, [r3, #72]	; 0x48
 800240a:	e011      	b.n	8002430 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002414:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002418:	2b00      	cmp	r3, #0
 800241a:	d004      	beq.n	8002426 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	697a      	ldr	r2, [r7, #20]
 8002422:	649a      	str	r2, [r3, #72]	; 0x48
 8002424:	e004      	b.n	8002430 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	9300      	str	r3, [sp, #0]
 8002434:	69bb      	ldr	r3, [r7, #24]
 8002436:	2201      	movs	r2, #1
 8002438:	2108      	movs	r1, #8
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f000 fb5c 	bl	8002af8 <OSPI_WaitFlagStateUntilTimeout>
 8002440:	4603      	mov	r3, r0
 8002442:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8002444:	7ffb      	ldrb	r3, [r7, #31]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d10d      	bne.n	8002466 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2208      	movs	r2, #8
 8002450:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	2202      	movs	r2, #2
 8002456:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002458:	e005      	b.n	8002466 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2210      	movs	r2, #16
 8002462:	649a      	str	r2, [r3, #72]	; 0x48
 8002464:	e000      	b.n	8002468 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8002466:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002468:	7ffb      	ldrb	r3, [r7, #31]
}
 800246a:	4618      	mov	r0, r3
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
 800247a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8002482:	2300      	movs	r3, #0
}
 8002484:	4618      	mov	r0, r3
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr

08002490 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b092      	sub	sp, #72	; 0x48
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800249c:	2300      	movs	r3, #0
 800249e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a08      	ldr	r2, [pc, #32]	; (80024d0 <HAL_OSPIM_Config+0x40>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d105      	bne.n	80024be <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80024bc:	e004      	b.n	80024c8 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80024be:	2301      	movs	r3, #1
 80024c0:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80024c8:	2300      	movs	r3, #0
 80024ca:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80024ce:	e01f      	b.n	8002510 <HAL_OSPIM_Config+0x80>
 80024d0:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80024d4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80024d8:	3301      	adds	r3, #1
 80024da:	b2d8      	uxtb	r0, r3
 80024dc:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80024e0:	f107 0114 	add.w	r1, r7, #20
 80024e4:	4613      	mov	r3, r2
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	4413      	add	r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	4619      	mov	r1, r3
 80024f0:	f000 fc9c 	bl	8002e2c <OSPIM_GetConfig>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d005      	beq.n	8002506 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80024fa:	2301      	movs	r3, #1
 80024fc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2208      	movs	r2, #8
 8002504:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002506:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800250a:	3301      	adds	r3, #1
 800250c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002510:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002514:	2b01      	cmp	r3, #1
 8002516:	d9dd      	bls.n	80024d4 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8002518:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800251c:	2b00      	cmp	r3, #0
 800251e:	f040 82de 	bne.w	8002ade <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8002522:	4bc6      	ldr	r3, [pc, #792]	; (800283c <HAL_OSPIM_Config+0x3ac>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0301 	and.w	r3, r3, #1
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800252e:	4bc3      	ldr	r3, [pc, #780]	; (800283c <HAL_OSPIM_Config+0x3ac>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4ac2      	ldr	r2, [pc, #776]	; (800283c <HAL_OSPIM_Config+0x3ac>)
 8002534:	f023 0301 	bic.w	r3, r3, #1
 8002538:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800253a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800253e:	f043 0301 	orr.w	r3, r3, #1
 8002542:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002546:	4bbe      	ldr	r3, [pc, #760]	; (8002840 <HAL_OSPIM_Config+0x3b0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b00      	cmp	r3, #0
 8002550:	d00b      	beq.n	800256a <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002552:	4bbb      	ldr	r3, [pc, #748]	; (8002840 <HAL_OSPIM_Config+0x3b0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4aba      	ldr	r2, [pc, #744]	; (8002840 <HAL_OSPIM_Config+0x3b0>)
 8002558:	f023 0301 	bic.w	r3, r3, #1
 800255c:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800255e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002562:	f043 0302 	orr.w	r3, r3, #2
 8002566:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800256a:	49b6      	ldr	r1, [pc, #728]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 800256c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800256e:	4613      	mov	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	3348      	adds	r3, #72	; 0x48
 8002578:	443b      	add	r3, r7
 800257a:	3b2c      	subs	r3, #44	; 0x2c
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	3b01      	subs	r3, #1
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	440b      	add	r3, r1
 8002584:	6859      	ldr	r1, [r3, #4]
 8002586:	48af      	ldr	r0, [pc, #700]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 8002588:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	009b      	lsls	r3, r3, #2
 8002592:	3348      	adds	r3, #72	; 0x48
 8002594:	443b      	add	r3, r7
 8002596:	3b2c      	subs	r3, #44	; 0x2c
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	3b01      	subs	r3, #1
 800259c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	4403      	add	r3, r0
 80025a4:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 80025a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025a8:	4613      	mov	r3, r2
 80025aa:	009b      	lsls	r3, r3, #2
 80025ac:	4413      	add	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	3348      	adds	r3, #72	; 0x48
 80025b2:	443b      	add	r3, r7
 80025b4:	3b34      	subs	r3, #52	; 0x34
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	f000 80a1 	beq.w	8002700 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80025be:	49a1      	ldr	r1, [pc, #644]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 80025c0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025c2:	4613      	mov	r3, r2
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	3348      	adds	r3, #72	; 0x48
 80025cc:	443b      	add	r3, r7
 80025ce:	3b34      	subs	r3, #52	; 0x34
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	6859      	ldr	r1, [r3, #4]
 80025da:	489a      	ldr	r0, [pc, #616]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 80025dc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025de:	4613      	mov	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	4413      	add	r3, r2
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	3348      	adds	r3, #72	; 0x48
 80025e8:	443b      	add	r3, r7
 80025ea:	3b34      	subs	r3, #52	; 0x34
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	3b01      	subs	r3, #1
 80025f0:	f021 0201 	bic.w	r2, r1, #1
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	4403      	add	r3, r0
 80025f8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80025fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	3348      	adds	r3, #72	; 0x48
 8002606:	443b      	add	r3, r7
 8002608:	3b30      	subs	r3, #48	; 0x30
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d01d      	beq.n	800264c <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8002610:	498c      	ldr	r1, [pc, #560]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 8002612:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002614:	4613      	mov	r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	4413      	add	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	3348      	adds	r3, #72	; 0x48
 800261e:	443b      	add	r3, r7
 8002620:	3b30      	subs	r3, #48	; 0x30
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	3b01      	subs	r3, #1
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	440b      	add	r3, r1
 800262a:	6859      	ldr	r1, [r3, #4]
 800262c:	4885      	ldr	r0, [pc, #532]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 800262e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002630:	4613      	mov	r3, r2
 8002632:	009b      	lsls	r3, r3, #2
 8002634:	4413      	add	r3, r2
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	3348      	adds	r3, #72	; 0x48
 800263a:	443b      	add	r3, r7
 800263c:	3b30      	subs	r3, #48	; 0x30
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	3b01      	subs	r3, #1
 8002642:	f021 0210 	bic.w	r2, r1, #16
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	4403      	add	r3, r0
 800264a:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800264c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800264e:	4613      	mov	r3, r2
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	3348      	adds	r3, #72	; 0x48
 8002658:	443b      	add	r3, r7
 800265a:	3b28      	subs	r3, #40	; 0x28
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d021      	beq.n	80026a6 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8002662:	4978      	ldr	r1, [pc, #480]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 8002664:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002666:	4613      	mov	r3, r2
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	4413      	add	r3, r2
 800266c:	009b      	lsls	r3, r3, #2
 800266e:	3348      	adds	r3, #72	; 0x48
 8002670:	443b      	add	r3, r7
 8002672:	3b28      	subs	r3, #40	; 0x28
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	3b01      	subs	r3, #1
 8002678:	f003 0301 	and.w	r3, r3, #1
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	6859      	ldr	r1, [r3, #4]
 8002682:	4870      	ldr	r0, [pc, #448]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 8002684:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002686:	4613      	mov	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4413      	add	r3, r2
 800268c:	009b      	lsls	r3, r3, #2
 800268e:	3348      	adds	r3, #72	; 0x48
 8002690:	443b      	add	r3, r7
 8002692:	3b28      	subs	r3, #40	; 0x28
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	3b01      	subs	r3, #1
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	4403      	add	r3, r0
 80026a4:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80026a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026a8:	4613      	mov	r3, r2
 80026aa:	009b      	lsls	r3, r3, #2
 80026ac:	4413      	add	r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	3348      	adds	r3, #72	; 0x48
 80026b2:	443b      	add	r3, r7
 80026b4:	3b24      	subs	r3, #36	; 0x24
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d021      	beq.n	8002700 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80026bc:	4961      	ldr	r1, [pc, #388]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 80026be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026c0:	4613      	mov	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	4413      	add	r3, r2
 80026c6:	009b      	lsls	r3, r3, #2
 80026c8:	3348      	adds	r3, #72	; 0x48
 80026ca:	443b      	add	r3, r7
 80026cc:	3b24      	subs	r3, #36	; 0x24
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	f003 0301 	and.w	r3, r3, #1
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	440b      	add	r3, r1
 80026da:	6859      	ldr	r1, [r3, #4]
 80026dc:	4859      	ldr	r0, [pc, #356]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 80026de:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	3348      	adds	r3, #72	; 0x48
 80026ea:	443b      	add	r3, r7
 80026ec:	3b24      	subs	r3, #36	; 0x24
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	3b01      	subs	r3, #1
 80026f2:	f003 0301 	and.w	r3, r3, #1
 80026f6:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	4403      	add	r3, r0
 80026fe:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	6819      	ldr	r1, [r3, #0]
 8002704:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002708:	4613      	mov	r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	4413      	add	r3, r2
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	3348      	adds	r3, #72	; 0x48
 8002712:	443b      	add	r3, r7
 8002714:	3b34      	subs	r3, #52	; 0x34
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4299      	cmp	r1, r3
 800271a:	d038      	beq.n	800278e <HAL_OSPIM_Config+0x2fe>
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002724:	4613      	mov	r3, r2
 8002726:	009b      	lsls	r3, r3, #2
 8002728:	4413      	add	r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	3348      	adds	r3, #72	; 0x48
 800272e:	443b      	add	r3, r7
 8002730:	3b30      	subs	r3, #48	; 0x30
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4299      	cmp	r1, r3
 8002736:	d02a      	beq.n	800278e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002738:	68bb      	ldr	r3, [r7, #8]
 800273a:	6899      	ldr	r1, [r3, #8]
 800273c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002740:	4613      	mov	r3, r2
 8002742:	009b      	lsls	r3, r3, #2
 8002744:	4413      	add	r3, r2
 8002746:	009b      	lsls	r3, r3, #2
 8002748:	3348      	adds	r3, #72	; 0x48
 800274a:	443b      	add	r3, r7
 800274c:	3b2c      	subs	r3, #44	; 0x2c
 800274e:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002750:	4299      	cmp	r1, r3
 8002752:	d01c      	beq.n	800278e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	68d9      	ldr	r1, [r3, #12]
 8002758:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800275c:	4613      	mov	r3, r2
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	4413      	add	r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	3348      	adds	r3, #72	; 0x48
 8002766:	443b      	add	r3, r7
 8002768:	3b28      	subs	r3, #40	; 0x28
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4299      	cmp	r1, r3
 800276e:	d00e      	beq.n	800278e <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	6919      	ldr	r1, [r3, #16]
 8002774:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002778:	4613      	mov	r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	4413      	add	r3, r2
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	3348      	adds	r3, #72	; 0x48
 8002782:	443b      	add	r3, r7
 8002784:	3b24      	subs	r3, #36	; 0x24
 8002786:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002788:	4299      	cmp	r1, r3
 800278a:	f040 80d3 	bne.w	8002934 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800278e:	492d      	ldr	r1, [pc, #180]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 8002790:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002794:	4613      	mov	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	4413      	add	r3, r2
 800279a:	009b      	lsls	r3, r3, #2
 800279c:	3348      	adds	r3, #72	; 0x48
 800279e:	443b      	add	r3, r7
 80027a0:	3b34      	subs	r3, #52	; 0x34
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	440b      	add	r3, r1
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	4825      	ldr	r0, [pc, #148]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 80027ae:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	009b      	lsls	r3, r3, #2
 80027ba:	3348      	adds	r3, #72	; 0x48
 80027bc:	443b      	add	r3, r7
 80027be:	3b34      	subs	r3, #52	; 0x34
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	3b01      	subs	r3, #1
 80027c4:	f021 0201 	bic.w	r2, r1, #1
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4403      	add	r3, r0
 80027cc:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80027ce:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80027d2:	4613      	mov	r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	3348      	adds	r3, #72	; 0x48
 80027dc:	443b      	add	r3, r7
 80027de:	3b30      	subs	r3, #48	; 0x30
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d01f      	beq.n	8002826 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80027e6:	4917      	ldr	r1, [pc, #92]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 80027e8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80027ec:	4613      	mov	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4413      	add	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	3348      	adds	r3, #72	; 0x48
 80027f6:	443b      	add	r3, r7
 80027f8:	3b30      	subs	r3, #48	; 0x30
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	3b01      	subs	r3, #1
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	6859      	ldr	r1, [r3, #4]
 8002804:	480f      	ldr	r0, [pc, #60]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 8002806:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	3348      	adds	r3, #72	; 0x48
 8002814:	443b      	add	r3, r7
 8002816:	3b30      	subs	r3, #48	; 0x30
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	3b01      	subs	r3, #1
 800281c:	f021 0210 	bic.w	r2, r1, #16
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	4403      	add	r3, r0
 8002824:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002826:	4907      	ldr	r1, [pc, #28]	; (8002844 <HAL_OSPIM_Config+0x3b4>)
 8002828:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	3348      	adds	r3, #72	; 0x48
 8002836:	443b      	add	r3, r7
 8002838:	3b2c      	subs	r3, #44	; 0x2c
 800283a:	e005      	b.n	8002848 <HAL_OSPIM_Config+0x3b8>
 800283c:	a0001000 	.word	0xa0001000
 8002840:	a0001400 	.word	0xa0001400
 8002844:	50061c00 	.word	0x50061c00
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	3b01      	subs	r3, #1
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	440b      	add	r3, r1
 8002850:	6859      	ldr	r1, [r3, #4]
 8002852:	48a6      	ldr	r0, [pc, #664]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 8002854:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002858:	4613      	mov	r3, r2
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	3348      	adds	r3, #72	; 0x48
 8002862:	443b      	add	r3, r7
 8002864:	3b2c      	subs	r3, #44	; 0x2c
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	3b01      	subs	r3, #1
 800286a:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4403      	add	r3, r0
 8002872:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002874:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002878:	4613      	mov	r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	3348      	adds	r3, #72	; 0x48
 8002882:	443b      	add	r3, r7
 8002884:	3b28      	subs	r3, #40	; 0x28
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d023      	beq.n	80028d4 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 800288c:	4997      	ldr	r1, [pc, #604]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 800288e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002892:	4613      	mov	r3, r2
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	3348      	adds	r3, #72	; 0x48
 800289c:	443b      	add	r3, r7
 800289e:	3b28      	subs	r3, #40	; 0x28
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	3b01      	subs	r3, #1
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	440b      	add	r3, r1
 80028ac:	6859      	ldr	r1, [r3, #4]
 80028ae:	488f      	ldr	r0, [pc, #572]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 80028b0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80028b4:	4613      	mov	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	4413      	add	r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	3348      	adds	r3, #72	; 0x48
 80028be:	443b      	add	r3, r7
 80028c0:	3b28      	subs	r3, #40	; 0x28
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	4403      	add	r3, r0
 80028d2:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80028d4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80028d8:	4613      	mov	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	3348      	adds	r3, #72	; 0x48
 80028e2:	443b      	add	r3, r7
 80028e4:	3b24      	subs	r3, #36	; 0x24
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d023      	beq.n	8002934 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80028ec:	497f      	ldr	r1, [pc, #508]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 80028ee:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	3348      	adds	r3, #72	; 0x48
 80028fc:	443b      	add	r3, r7
 80028fe:	3b24      	subs	r3, #36	; 0x24
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3b01      	subs	r3, #1
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	6859      	ldr	r1, [r3, #4]
 800290e:	4877      	ldr	r0, [pc, #476]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 8002910:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	3348      	adds	r3, #72	; 0x48
 800291e:	443b      	add	r3, r7
 8002920:	3b24      	subs	r3, #36	; 0x24
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3b01      	subs	r3, #1
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	4403      	add	r3, r0
 8002932:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002934:	4a6d      	ldr	r2, [pc, #436]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	3b01      	subs	r3, #1
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002946:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002948:	025b      	lsls	r3, r3, #9
 800294a:	431a      	orrs	r2, r3
 800294c:	4967      	ldr	r1, [pc, #412]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	3b01      	subs	r3, #1
 8002954:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	440b      	add	r3, r1
 800295c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800295e:	4a63      	ldr	r2, [pc, #396]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3b01      	subs	r3, #1
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	f023 0203 	bic.w	r2, r3, #3
 8002970:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002972:	005b      	lsls	r3, r3, #1
 8002974:	431a      	orrs	r2, r3
 8002976:	495d      	ldr	r1, [pc, #372]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 8002978:	68bb      	ldr	r3, [r7, #8]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3b01      	subs	r3, #1
 800297e:	f042 0201 	orr.w	r2, r2, #1
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002988:	68bb      	ldr	r3, [r7, #8]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d014      	beq.n	80029ba <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8002990:	4a56      	ldr	r2, [pc, #344]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	3b01      	subs	r3, #1
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80029a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029a4:	015b      	lsls	r3, r3, #5
 80029a6:	431a      	orrs	r2, r3
 80029a8:	4950      	ldr	r1, [pc, #320]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	3b01      	subs	r3, #1
 80029b0:	f042 0210 	orr.w	r2, r2, #16
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	440b      	add	r3, r1
 80029b8:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	68db      	ldr	r3, [r3, #12]
 80029be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d019      	beq.n	80029fa <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80029c6:	4a49      	ldr	r2, [pc, #292]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	4413      	add	r3, r2
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80029dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029de:	049b      	lsls	r3, r3, #18
 80029e0:	431a      	orrs	r2, r3
 80029e2:	4942      	ldr	r1, [pc, #264]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 80029e4:	68bb      	ldr	r3, [r7, #8]
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	3b01      	subs	r3, #1
 80029ea:	f003 0301 	and.w	r3, r3, #1
 80029ee:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	605a      	str	r2, [r3, #4]
 80029f8:	e01c      	b.n	8002a34 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d018      	beq.n	8002a34 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002a02:	4a3a      	ldr	r2, [pc, #232]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	68db      	ldr	r3, [r3, #12]
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	f003 0301 	and.w	r3, r3, #1
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4413      	add	r3, r2
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a1a:	069b      	lsls	r3, r3, #26
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	4933      	ldr	r1, [pc, #204]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	3b01      	subs	r3, #1
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	440b      	add	r3, r1
 8002a32:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d019      	beq.n	8002a74 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002a40:	4a2a      	ldr	r2, [pc, #168]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	691b      	ldr	r3, [r3, #16]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4413      	add	r3, r2
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002a56:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a58:	049b      	lsls	r3, r3, #18
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	4923      	ldr	r1, [pc, #140]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	3b01      	subs	r3, #1
 8002a64:	f003 0301 	and.w	r3, r3, #1
 8002a68:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002a6c:	009b      	lsls	r3, r3, #2
 8002a6e:	440b      	add	r3, r1
 8002a70:	605a      	str	r2, [r3, #4]
 8002a72:	e01c      	b.n	8002aae <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	691b      	ldr	r3, [r3, #16]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d018      	beq.n	8002aae <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002a7c:	4a1b      	ldr	r2, [pc, #108]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	691b      	ldr	r3, [r3, #16]
 8002a82:	3b01      	subs	r3, #1
 8002a84:	f003 0301 	and.w	r3, r3, #1
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002a92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a94:	069b      	lsls	r3, r3, #26
 8002a96:	431a      	orrs	r2, r3
 8002a98:	4914      	ldr	r1, [pc, #80]	; (8002aec <HAL_OSPIM_Config+0x65c>)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	f003 0301 	and.w	r3, r3, #1
 8002aa4:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002aae:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002ab2:	f003 0301 	and.w	r3, r3, #1
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d005      	beq.n	8002ac6 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002aba:	4b0d      	ldr	r3, [pc, #52]	; (8002af0 <HAL_OSPIM_Config+0x660>)
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a0c      	ldr	r2, [pc, #48]	; (8002af0 <HAL_OSPIM_Config+0x660>)
 8002ac0:	f043 0301 	orr.w	r3, r3, #1
 8002ac4:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002ac6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d005      	beq.n	8002ade <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_OSPIM_Config+0x664>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a07      	ldr	r2, [pc, #28]	; (8002af4 <HAL_OSPIM_Config+0x664>)
 8002ad8:	f043 0301 	orr.w	r3, r3, #1
 8002adc:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002ade:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3748      	adds	r7, #72	; 0x48
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	50061c00 	.word	0x50061c00
 8002af0:	a0001000 	.word	0xa0001000
 8002af4:	a0001400 	.word	0xa0001400

08002af8 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	603b      	str	r3, [r7, #0]
 8002b04:	4613      	mov	r3, r2
 8002b06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002b08:	e01a      	b.n	8002b40 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b10:	d016      	beq.n	8002b40 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b12:	f7fd fd5d 	bl	80005d0 <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	429a      	cmp	r2, r3
 8002b20:	d302      	bcc.n	8002b28 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d10b      	bne.n	8002b40 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002b2e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b34:	f043 0201 	orr.w	r2, r3, #1
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8002b3c:	2301      	movs	r3, #1
 8002b3e:	e00e      	b.n	8002b5e <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6a1a      	ldr	r2, [r3, #32]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	4013      	ands	r3, r2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	bf14      	ite	ne
 8002b4e:	2301      	movne	r3, #1
 8002b50:	2300      	moveq	r3, #0
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	79fb      	ldrb	r3, [r7, #7]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d1d6      	bne.n	8002b0a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	3710      	adds	r7, #16
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
	...

08002b68 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b089      	sub	sp, #36	; 0x24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b72:	2300      	movs	r3, #0
 8002b74:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b84:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	689b      	ldr	r3, [r3, #8]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d10a      	bne.n	8002ba4 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b02      	cmp	r3, #2
 8002baa:	d114      	bne.n	8002bd6 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002bb4:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002bbe:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002bc8:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002bd2:	60fb      	str	r3, [r7, #12]
 8002bd4:	e013      	b.n	8002bfe <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002bde:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002be8:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002bf2:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002bfc:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c06:	431a      	orrs	r2, r3
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d012      	beq.n	8002c3a <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c2c:	4319      	orrs	r1, r3
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c32:	430b      	orrs	r3, r1
 8002c34:	431a      	orrs	r2, r3
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8002c3a:	697b      	ldr	r3, [r7, #20]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 021f 	bic.w	r2, r3, #31
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	431a      	orrs	r2, r3
 8002c48:	697b      	ldr	r3, [r7, #20]
 8002c4a:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d009      	beq.n	8002c68 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	3a01      	subs	r2, #1
 8002c66:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8099 	beq.w	8002da4 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d055      	beq.n	8002d26 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d01e      	beq.n	8002cc0 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002c82:	69bb      	ldr	r3, [r7, #24]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	4b68      	ldr	r3, [pc, #416]	; (8002e28 <OSPI_ConfigCmd+0x2c0>)
 8002c88:	4013      	ands	r3, r2
 8002c8a:	683a      	ldr	r2, [r7, #0]
 8002c8c:	68d1      	ldr	r1, [r2, #12]
 8002c8e:	683a      	ldr	r2, [r7, #0]
 8002c90:	6952      	ldr	r2, [r2, #20]
 8002c92:	4311      	orrs	r1, r2
 8002c94:	683a      	ldr	r2, [r7, #0]
 8002c96:	6912      	ldr	r2, [r2, #16]
 8002c98:	4311      	orrs	r1, r2
 8002c9a:	683a      	ldr	r2, [r7, #0]
 8002c9c:	69d2      	ldr	r2, [r2, #28]
 8002c9e:	4311      	orrs	r1, r2
 8002ca0:	683a      	ldr	r2, [r7, #0]
 8002ca2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ca4:	4311      	orrs	r1, r2
 8002ca6:	683a      	ldr	r2, [r7, #0]
 8002ca8:	6a12      	ldr	r2, [r2, #32]
 8002caa:	4311      	orrs	r1, r2
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002cb0:	4311      	orrs	r1, r2
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	431a      	orrs	r2, r3
 8002cba:	69bb      	ldr	r3, [r7, #24]
 8002cbc:	601a      	str	r2, [r3, #0]
 8002cbe:	e028      	b.n	8002d12 <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002cc8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	68d1      	ldr	r1, [r2, #12]
 8002cd0:	683a      	ldr	r2, [r7, #0]
 8002cd2:	6952      	ldr	r2, [r2, #20]
 8002cd4:	4311      	orrs	r1, r2
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	6912      	ldr	r2, [r2, #16]
 8002cda:	4311      	orrs	r1, r2
 8002cdc:	683a      	ldr	r2, [r7, #0]
 8002cde:	69d2      	ldr	r2, [r2, #28]
 8002ce0:	4311      	orrs	r1, r2
 8002ce2:	683a      	ldr	r2, [r7, #0]
 8002ce4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ce6:	4311      	orrs	r1, r2
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	6a12      	ldr	r2, [r2, #32]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cfc:	d109      	bne.n	8002d12 <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002d02:	2b08      	cmp	r3, #8
 8002d04:	d105      	bne.n	8002d12 <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002d06:	69bb      	ldr	r3, [r7, #24]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d0e:	69bb      	ldr	r3, [r7, #24]
 8002d10:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	6992      	ldr	r2, [r2, #24]
 8002d22:	649a      	str	r2, [r3, #72]	; 0x48
 8002d24:	e078      	b.n	8002e18 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d017      	beq.n	8002d5e <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8002d2e:	69bb      	ldr	r3, [r7, #24]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002d36:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d3a:	683a      	ldr	r2, [r7, #0]
 8002d3c:	68d1      	ldr	r1, [r2, #12]
 8002d3e:	683a      	ldr	r2, [r7, #0]
 8002d40:	6952      	ldr	r2, [r2, #20]
 8002d42:	4311      	orrs	r1, r2
 8002d44:	683a      	ldr	r2, [r7, #0]
 8002d46:	6912      	ldr	r2, [r2, #16]
 8002d48:	4311      	orrs	r1, r2
 8002d4a:	683a      	ldr	r2, [r7, #0]
 8002d4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d4e:	4311      	orrs	r1, r2
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d54:	430a      	orrs	r2, r1
 8002d56:	431a      	orrs	r2, r3
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	601a      	str	r2, [r3, #0]
 8002d5c:	e01d      	b.n	8002d9a <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	68d9      	ldr	r1, [r3, #12]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	4319      	orrs	r1, r3
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	691b      	ldr	r3, [r3, #16]
 8002d74:	430b      	orrs	r3, r1
 8002d76:	431a      	orrs	r2, r3
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d80:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d84:	d109      	bne.n	8002d9a <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002d8a:	2b08      	cmp	r3, #8
 8002d8c:	d105      	bne.n	8002d9a <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	689a      	ldr	r2, [r3, #8]
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	e039      	b.n	8002e18 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d030      	beq.n	8002e0e <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d017      	beq.n	8002de4 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8002db4:	69bb      	ldr	r3, [r7, #24]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002dbc:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	69d1      	ldr	r1, [r2, #28]
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dc8:	4311      	orrs	r1, r2
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	6a12      	ldr	r2, [r2, #32]
 8002dce:	4311      	orrs	r1, r2
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002dd4:	4311      	orrs	r1, r2
 8002dd6:	683a      	ldr	r2, [r7, #0]
 8002dd8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002dda:	430a      	orrs	r2, r1
 8002ddc:	431a      	orrs	r2, r3
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	601a      	str	r2, [r3, #0]
 8002de2:	e00e      	b.n	8002e02 <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	69d9      	ldr	r1, [r3, #28]
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	4319      	orrs	r1, r3
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	430b      	orrs	r3, r1
 8002dfc:	431a      	orrs	r2, r3
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	6992      	ldr	r2, [r2, #24]
 8002e0a:	649a      	str	r2, [r3, #72]	; 0x48
 8002e0c:	e004      	b.n	8002e18 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2208      	movs	r2, #8
 8002e16:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8002e18:	7ffb      	ldrb	r3, [r7, #31]
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3724      	adds	r7, #36	; 0x24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	f0ffc0c0 	.word	0xf0ffc0c0

08002e2c <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	6039      	str	r1, [r7, #0]
 8002e36:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d005      	beq.n	8002e52 <OSPIM_GetConfig+0x26>
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	2b02      	cmp	r3, #2
 8002e4a:	d802      	bhi.n	8002e52 <OSPIM_GetConfig+0x26>
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d102      	bne.n	8002e58 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	75fb      	strb	r3, [r7, #23]
 8002e56:	e08e      	b.n	8002f76 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	2200      	movs	r2, #0
 8002e62:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	2200      	movs	r2, #0
 8002e68:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	2200      	movs	r2, #0
 8002e74:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8002e76:	79fb      	ldrb	r3, [r7, #7]
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d101      	bne.n	8002e80 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8002e7c:	4b41      	ldr	r3, [pc, #260]	; (8002f84 <OSPIM_GetConfig+0x158>)
 8002e7e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002e80:	2300      	movs	r3, #0
 8002e82:	60fb      	str	r3, [r7, #12]
 8002e84:	e074      	b.n	8002f70 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8002e86:	4a40      	ldr	r2, [pc, #256]	; (8002f88 <OSPIM_GetConfig+0x15c>)
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	009b      	lsls	r3, r3, #2
 8002e8c:	4413      	add	r3, r2
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002e9c:	68ba      	ldr	r2, [r7, #8]
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4053      	eors	r3, r2
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d103      	bne.n	8002eb2 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	f003 0310 	and.w	r3, r3, #16
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d00a      	beq.n	8002ed2 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002ebc:	68ba      	ldr	r2, [r7, #8]
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4053      	eors	r3, r2
 8002ec2:	f003 0320 	and.w	r3, r3, #32
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d103      	bne.n	8002ed2 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1c5a      	adds	r2, r3, #1
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002edc:	68ba      	ldr	r2, [r7, #8]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	4053      	eors	r3, r2
 8002ee2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d103      	bne.n	8002ef2 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1c5a      	adds	r2, r3, #1
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d018      	beq.n	8002f2e <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4053      	eors	r3, r2
 8002f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d111      	bne.n	8002f2e <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d106      	bne.n	8002f22 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	3301      	adds	r3, #1
 8002f18:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	60da      	str	r2, [r3, #12]
 8002f20:	e005      	b.n	8002f2e <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	3301      	adds	r3, #1
 8002f26:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d018      	beq.n	8002f6a <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8002f38:	68ba      	ldr	r2, [r7, #8]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	4053      	eors	r3, r2
 8002f3e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d111      	bne.n	8002f6a <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d106      	bne.n	8002f5e <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	3301      	adds	r3, #1
 8002f54:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	611a      	str	r2, [r3, #16]
 8002f5c:	e005      	b.n	8002f6a <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	3301      	adds	r3, #1
 8002f62:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	3301      	adds	r3, #1
 8002f6e:	60fb      	str	r3, [r7, #12]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d987      	bls.n	8002e86 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8002f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	371c      	adds	r7, #28
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr
 8002f84:	04040222 	.word	0x04040222
 8002f88:	50061c00 	.word	0x50061c00

08002f8c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002f90:	4b0d      	ldr	r3, [pc, #52]	; (8002fc8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f9c:	d102      	bne.n	8002fa4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8002f9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fa2:	e00b      	b.n	8002fbc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002fa4:	4b08      	ldr	r3, [pc, #32]	; (8002fc8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002fa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fb2:	d102      	bne.n	8002fba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002fb4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002fb8:	e000      	b.n	8002fbc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002fba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr
 8002fc6:	bf00      	nop
 8002fc8:	40007000 	.word	0x40007000

08002fcc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d141      	bne.n	800305e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002fda:	4b4b      	ldr	r3, [pc, #300]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002fe2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fe6:	d131      	bne.n	800304c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002fe8:	4b47      	ldr	r3, [pc, #284]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002fea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fee:	4a46      	ldr	r2, [pc, #280]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ff0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ff4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ff8:	4b43      	ldr	r3, [pc, #268]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003000:	4a41      	ldr	r2, [pc, #260]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003002:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003006:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003008:	4b40      	ldr	r3, [pc, #256]	; (800310c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2232      	movs	r2, #50	; 0x32
 800300e:	fb02 f303 	mul.w	r3, r2, r3
 8003012:	4a3f      	ldr	r2, [pc, #252]	; (8003110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003014:	fba2 2303 	umull	r2, r3, r2, r3
 8003018:	0c9b      	lsrs	r3, r3, #18
 800301a:	3301      	adds	r3, #1
 800301c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800301e:	e002      	b.n	8003026 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	3b01      	subs	r3, #1
 8003024:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003026:	4b38      	ldr	r3, [pc, #224]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003028:	695b      	ldr	r3, [r3, #20]
 800302a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800302e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003032:	d102      	bne.n	800303a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f2      	bne.n	8003020 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800303a:	4b33      	ldr	r3, [pc, #204]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800303c:	695b      	ldr	r3, [r3, #20]
 800303e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003042:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003046:	d158      	bne.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e057      	b.n	80030fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800304c:	4b2e      	ldr	r3, [pc, #184]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800304e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003052:	4a2d      	ldr	r2, [pc, #180]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003058:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800305c:	e04d      	b.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003064:	d141      	bne.n	80030ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003066:	4b28      	ldr	r3, [pc, #160]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800306e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003072:	d131      	bne.n	80030d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003074:	4b24      	ldr	r3, [pc, #144]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800307a:	4a23      	ldr	r2, [pc, #140]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800307c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003080:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003084:	4b20      	ldr	r3, [pc, #128]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800308c:	4a1e      	ldr	r2, [pc, #120]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800308e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003092:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003094:	4b1d      	ldr	r3, [pc, #116]	; (800310c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2232      	movs	r2, #50	; 0x32
 800309a:	fb02 f303 	mul.w	r3, r2, r3
 800309e:	4a1c      	ldr	r2, [pc, #112]	; (8003110 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030a0:	fba2 2303 	umull	r2, r3, r2, r3
 80030a4:	0c9b      	lsrs	r3, r3, #18
 80030a6:	3301      	adds	r3, #1
 80030a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030aa:	e002      	b.n	80030b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80030b2:	4b15      	ldr	r3, [pc, #84]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030b4:	695b      	ldr	r3, [r3, #20]
 80030b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030be:	d102      	bne.n	80030c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d1f2      	bne.n	80030ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80030c6:	4b10      	ldr	r3, [pc, #64]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030d2:	d112      	bne.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80030d4:	2303      	movs	r3, #3
 80030d6:	e011      	b.n	80030fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030d8:	4b0b      	ldr	r3, [pc, #44]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030de:	4a0a      	ldr	r2, [pc, #40]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80030e8:	e007      	b.n	80030fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80030ea:	4b07      	ldr	r3, [pc, #28]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030f2:	4a05      	ldr	r2, [pc, #20]	; (8003108 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80030f8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	40007000 	.word	0x40007000
 800310c:	2000028c 	.word	0x2000028c
 8003110:	431bde83 	.word	0x431bde83

08003114 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d102      	bne.n	8003128 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	f000 bc08 	b.w	8003938 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003128:	4b96      	ldr	r3, [pc, #600]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 030c 	and.w	r3, r3, #12
 8003130:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003132:	4b94      	ldr	r3, [pc, #592]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 80e4 	beq.w	8003312 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d007      	beq.n	8003160 <HAL_RCC_OscConfig+0x4c>
 8003150:	69bb      	ldr	r3, [r7, #24]
 8003152:	2b0c      	cmp	r3, #12
 8003154:	f040 808b 	bne.w	800326e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	2b01      	cmp	r3, #1
 800315c:	f040 8087 	bne.w	800326e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003160:	4b88      	ldr	r3, [pc, #544]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 0302 	and.w	r3, r3, #2
 8003168:	2b00      	cmp	r3, #0
 800316a:	d005      	beq.n	8003178 <HAL_RCC_OscConfig+0x64>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	699b      	ldr	r3, [r3, #24]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e3df      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	6a1a      	ldr	r2, [r3, #32]
 800317c:	4b81      	ldr	r3, [pc, #516]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f003 0308 	and.w	r3, r3, #8
 8003184:	2b00      	cmp	r3, #0
 8003186:	d004      	beq.n	8003192 <HAL_RCC_OscConfig+0x7e>
 8003188:	4b7e      	ldr	r3, [pc, #504]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003190:	e005      	b.n	800319e <HAL_RCC_OscConfig+0x8a>
 8003192:	4b7c      	ldr	r3, [pc, #496]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 8003194:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003198:	091b      	lsrs	r3, r3, #4
 800319a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800319e:	4293      	cmp	r3, r2
 80031a0:	d223      	bcs.n	80031ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6a1b      	ldr	r3, [r3, #32]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fdcc 	bl	8003d44 <RCC_SetFlashLatencyFromMSIRange>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e3c0      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031b6:	4b73      	ldr	r3, [pc, #460]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a72      	ldr	r2, [pc, #456]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80031bc:	f043 0308 	orr.w	r3, r3, #8
 80031c0:	6013      	str	r3, [r2, #0]
 80031c2:	4b70      	ldr	r3, [pc, #448]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	496d      	ldr	r1, [pc, #436]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80031d4:	4b6b      	ldr	r3, [pc, #428]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	69db      	ldr	r3, [r3, #28]
 80031e0:	021b      	lsls	r3, r3, #8
 80031e2:	4968      	ldr	r1, [pc, #416]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80031e4:	4313      	orrs	r3, r2
 80031e6:	604b      	str	r3, [r1, #4]
 80031e8:	e025      	b.n	8003236 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80031ea:	4b66      	ldr	r3, [pc, #408]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a65      	ldr	r2, [pc, #404]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80031f0:	f043 0308 	orr.w	r3, r3, #8
 80031f4:	6013      	str	r3, [r2, #0]
 80031f6:	4b63      	ldr	r3, [pc, #396]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a1b      	ldr	r3, [r3, #32]
 8003202:	4960      	ldr	r1, [pc, #384]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003208:	4b5e      	ldr	r3, [pc, #376]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	021b      	lsls	r3, r3, #8
 8003216:	495b      	ldr	r1, [pc, #364]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 8003218:	4313      	orrs	r3, r2
 800321a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d109      	bne.n	8003236 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 fd8c 	bl	8003d44 <RCC_SetFlashLatencyFromMSIRange>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	e380      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003236:	f000 fcc1 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 800323a:	4602      	mov	r2, r0
 800323c:	4b51      	ldr	r3, [pc, #324]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	091b      	lsrs	r3, r3, #4
 8003242:	f003 030f 	and.w	r3, r3, #15
 8003246:	4950      	ldr	r1, [pc, #320]	; (8003388 <HAL_RCC_OscConfig+0x274>)
 8003248:	5ccb      	ldrb	r3, [r1, r3]
 800324a:	f003 031f 	and.w	r3, r3, #31
 800324e:	fa22 f303 	lsr.w	r3, r2, r3
 8003252:	4a4e      	ldr	r2, [pc, #312]	; (800338c <HAL_RCC_OscConfig+0x278>)
 8003254:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003256:	4b4e      	ldr	r3, [pc, #312]	; (8003390 <HAL_RCC_OscConfig+0x27c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f7fd f968 	bl	8000530 <HAL_InitTick>
 8003260:	4603      	mov	r3, r0
 8003262:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003264:	7bfb      	ldrb	r3, [r7, #15]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d052      	beq.n	8003310 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
 800326c:	e364      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d032      	beq.n	80032dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003276:	4b43      	ldr	r3, [pc, #268]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a42      	ldr	r2, [pc, #264]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 800327c:	f043 0301 	orr.w	r3, r3, #1
 8003280:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003282:	f7fd f9a5 	bl	80005d0 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800328a:	f7fd f9a1 	bl	80005d0 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e34d      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800329c:	4b39      	ldr	r3, [pc, #228]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032a8:	4b36      	ldr	r3, [pc, #216]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a35      	ldr	r2, [pc, #212]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80032ae:	f043 0308 	orr.w	r3, r3, #8
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	4b33      	ldr	r3, [pc, #204]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	4930      	ldr	r1, [pc, #192]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032c6:	4b2f      	ldr	r3, [pc, #188]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	69db      	ldr	r3, [r3, #28]
 80032d2:	021b      	lsls	r3, r3, #8
 80032d4:	492b      	ldr	r1, [pc, #172]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80032d6:	4313      	orrs	r3, r2
 80032d8:	604b      	str	r3, [r1, #4]
 80032da:	e01a      	b.n	8003312 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80032dc:	4b29      	ldr	r3, [pc, #164]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a28      	ldr	r2, [pc, #160]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 80032e2:	f023 0301 	bic.w	r3, r3, #1
 80032e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80032e8:	f7fd f972 	bl	80005d0 <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80032f0:	f7fd f96e 	bl	80005d0 <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e31a      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003302:	4b20      	ldr	r3, [pc, #128]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x1dc>
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003310:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d073      	beq.n	8003406 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	2b08      	cmp	r3, #8
 8003322:	d005      	beq.n	8003330 <HAL_RCC_OscConfig+0x21c>
 8003324:	69bb      	ldr	r3, [r7, #24]
 8003326:	2b0c      	cmp	r3, #12
 8003328:	d10e      	bne.n	8003348 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	2b03      	cmp	r3, #3
 800332e:	d10b      	bne.n	8003348 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003330:	4b14      	ldr	r3, [pc, #80]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d063      	beq.n	8003404 <HAL_RCC_OscConfig+0x2f0>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d15f      	bne.n	8003404 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	e2f7      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003350:	d106      	bne.n	8003360 <HAL_RCC_OscConfig+0x24c>
 8003352:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 8003358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e025      	b.n	80033ac <HAL_RCC_OscConfig+0x298>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003368:	d114      	bne.n	8003394 <HAL_RCC_OscConfig+0x280>
 800336a:	4b06      	ldr	r3, [pc, #24]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a05      	ldr	r2, [pc, #20]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 8003370:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003374:	6013      	str	r3, [r2, #0]
 8003376:	4b03      	ldr	r3, [pc, #12]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a02      	ldr	r2, [pc, #8]	; (8003384 <HAL_RCC_OscConfig+0x270>)
 800337c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003380:	6013      	str	r3, [r2, #0]
 8003382:	e013      	b.n	80033ac <HAL_RCC_OscConfig+0x298>
 8003384:	40021000 	.word	0x40021000
 8003388:	08008c00 	.word	0x08008c00
 800338c:	2000028c 	.word	0x2000028c
 8003390:	20000000 	.word	0x20000000
 8003394:	4ba0      	ldr	r3, [pc, #640]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a9f      	ldr	r2, [pc, #636]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 800339a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800339e:	6013      	str	r3, [r2, #0]
 80033a0:	4b9d      	ldr	r3, [pc, #628]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a9c      	ldr	r2, [pc, #624]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 80033a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d013      	beq.n	80033dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b4:	f7fd f90c 	bl	80005d0 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033bc:	f7fd f908 	bl	80005d0 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b64      	cmp	r3, #100	; 0x64
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e2b4      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80033ce:	4b92      	ldr	r3, [pc, #584]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x2a8>
 80033da:	e014      	b.n	8003406 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033dc:	f7fd f8f8 	bl	80005d0 <HAL_GetTick>
 80033e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033e2:	e008      	b.n	80033f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033e4:	f7fd f8f4 	bl	80005d0 <HAL_GetTick>
 80033e8:	4602      	mov	r2, r0
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	1ad3      	subs	r3, r2, r3
 80033ee:	2b64      	cmp	r3, #100	; 0x64
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e2a0      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80033f6:	4b88      	ldr	r3, [pc, #544]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d1f0      	bne.n	80033e4 <HAL_RCC_OscConfig+0x2d0>
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003404:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d060      	beq.n	80034d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003412:	69bb      	ldr	r3, [r7, #24]
 8003414:	2b04      	cmp	r3, #4
 8003416:	d005      	beq.n	8003424 <HAL_RCC_OscConfig+0x310>
 8003418:	69bb      	ldr	r3, [r7, #24]
 800341a:	2b0c      	cmp	r3, #12
 800341c:	d119      	bne.n	8003452 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d116      	bne.n	8003452 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003424:	4b7c      	ldr	r3, [pc, #496]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342c:	2b00      	cmp	r3, #0
 800342e:	d005      	beq.n	800343c <HAL_RCC_OscConfig+0x328>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d101      	bne.n	800343c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003438:	2301      	movs	r3, #1
 800343a:	e27d      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800343c:	4b76      	ldr	r3, [pc, #472]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	061b      	lsls	r3, r3, #24
 800344a:	4973      	ldr	r1, [pc, #460]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 800344c:	4313      	orrs	r3, r2
 800344e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003450:	e040      	b.n	80034d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d023      	beq.n	80034a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800345a:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a6e      	ldr	r2, [pc, #440]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 8003460:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003464:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003466:	f7fd f8b3 	bl	80005d0 <HAL_GetTick>
 800346a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800346c:	e008      	b.n	8003480 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800346e:	f7fd f8af 	bl	80005d0 <HAL_GetTick>
 8003472:	4602      	mov	r2, r0
 8003474:	693b      	ldr	r3, [r7, #16]
 8003476:	1ad3      	subs	r3, r2, r3
 8003478:	2b02      	cmp	r3, #2
 800347a:	d901      	bls.n	8003480 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800347c:	2303      	movs	r3, #3
 800347e:	e25b      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003480:	4b65      	ldr	r3, [pc, #404]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003488:	2b00      	cmp	r3, #0
 800348a:	d0f0      	beq.n	800346e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348c:	4b62      	ldr	r3, [pc, #392]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	691b      	ldr	r3, [r3, #16]
 8003498:	061b      	lsls	r3, r3, #24
 800349a:	495f      	ldr	r1, [pc, #380]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 800349c:	4313      	orrs	r3, r2
 800349e:	604b      	str	r3, [r1, #4]
 80034a0:	e018      	b.n	80034d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a2:	4b5d      	ldr	r3, [pc, #372]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a5c      	ldr	r2, [pc, #368]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 80034a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80034ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ae:	f7fd f88f 	bl	80005d0 <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034b4:	e008      	b.n	80034c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b6:	f7fd f88b 	bl	80005d0 <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	2b02      	cmp	r3, #2
 80034c2:	d901      	bls.n	80034c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e237      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80034c8:	4b53      	ldr	r3, [pc, #332]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d1f0      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d03c      	beq.n	800355a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01c      	beq.n	8003522 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e8:	4b4b      	ldr	r3, [pc, #300]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 80034ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80034ee:	4a4a      	ldr	r2, [pc, #296]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 80034f0:	f043 0301 	orr.w	r3, r3, #1
 80034f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034f8:	f7fd f86a 	bl	80005d0 <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003500:	f7fd f866 	bl	80005d0 <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e212      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003512:	4b41      	ldr	r3, [pc, #260]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 8003514:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d0ef      	beq.n	8003500 <HAL_RCC_OscConfig+0x3ec>
 8003520:	e01b      	b.n	800355a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003522:	4b3d      	ldr	r3, [pc, #244]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 8003524:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003528:	4a3b      	ldr	r2, [pc, #236]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 800352a:	f023 0301 	bic.w	r3, r3, #1
 800352e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003532:	f7fd f84d 	bl	80005d0 <HAL_GetTick>
 8003536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003538:	e008      	b.n	800354c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353a:	f7fd f849 	bl	80005d0 <HAL_GetTick>
 800353e:	4602      	mov	r2, r0
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d901      	bls.n	800354c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e1f5      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800354c:	4b32      	ldr	r3, [pc, #200]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 800354e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1ef      	bne.n	800353a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0304 	and.w	r3, r3, #4
 8003562:	2b00      	cmp	r3, #0
 8003564:	f000 80a6 	beq.w	80036b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003568:	2300      	movs	r3, #0
 800356a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800356c:	4b2a      	ldr	r3, [pc, #168]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 800356e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d10d      	bne.n	8003594 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003578:	4b27      	ldr	r3, [pc, #156]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 800357a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800357c:	4a26      	ldr	r2, [pc, #152]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 800357e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003582:	6593      	str	r3, [r2, #88]	; 0x58
 8003584:	4b24      	ldr	r3, [pc, #144]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 8003586:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358c:	60bb      	str	r3, [r7, #8]
 800358e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003590:	2301      	movs	r3, #1
 8003592:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003594:	4b21      	ldr	r3, [pc, #132]	; (800361c <HAL_RCC_OscConfig+0x508>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359c:	2b00      	cmp	r3, #0
 800359e:	d118      	bne.n	80035d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80035a0:	4b1e      	ldr	r3, [pc, #120]	; (800361c <HAL_RCC_OscConfig+0x508>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a1d      	ldr	r2, [pc, #116]	; (800361c <HAL_RCC_OscConfig+0x508>)
 80035a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ac:	f7fd f810 	bl	80005d0 <HAL_GetTick>
 80035b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035b2:	e008      	b.n	80035c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035b4:	f7fd f80c 	bl	80005d0 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	693b      	ldr	r3, [r7, #16]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d901      	bls.n	80035c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80035c2:	2303      	movs	r3, #3
 80035c4:	e1b8      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035c6:	4b15      	ldr	r3, [pc, #84]	; (800361c <HAL_RCC_OscConfig+0x508>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d0f0      	beq.n	80035b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	689b      	ldr	r3, [r3, #8]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d108      	bne.n	80035ec <HAL_RCC_OscConfig+0x4d8>
 80035da:	4b0f      	ldr	r3, [pc, #60]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 80035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e0:	4a0d      	ldr	r2, [pc, #52]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80035ea:	e029      	b.n	8003640 <HAL_RCC_OscConfig+0x52c>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b05      	cmp	r3, #5
 80035f2:	d115      	bne.n	8003620 <HAL_RCC_OscConfig+0x50c>
 80035f4:	4b08      	ldr	r3, [pc, #32]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 80035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035fa:	4a07      	ldr	r2, [pc, #28]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 80035fc:	f043 0304 	orr.w	r3, r3, #4
 8003600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003604:	4b04      	ldr	r3, [pc, #16]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	4a03      	ldr	r2, [pc, #12]	; (8003618 <HAL_RCC_OscConfig+0x504>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003614:	e014      	b.n	8003640 <HAL_RCC_OscConfig+0x52c>
 8003616:	bf00      	nop
 8003618:	40021000 	.word	0x40021000
 800361c:	40007000 	.word	0x40007000
 8003620:	4b9d      	ldr	r3, [pc, #628]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003626:	4a9c      	ldr	r2, [pc, #624]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003628:	f023 0301 	bic.w	r3, r3, #1
 800362c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003630:	4b99      	ldr	r3, [pc, #612]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	4a98      	ldr	r2, [pc, #608]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d016      	beq.n	8003676 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003648:	f7fc ffc2 	bl	80005d0 <HAL_GetTick>
 800364c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800364e:	e00a      	b.n	8003666 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003650:	f7fc ffbe 	bl	80005d0 <HAL_GetTick>
 8003654:	4602      	mov	r2, r0
 8003656:	693b      	ldr	r3, [r7, #16]
 8003658:	1ad3      	subs	r3, r2, r3
 800365a:	f241 3288 	movw	r2, #5000	; 0x1388
 800365e:	4293      	cmp	r3, r2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e168      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003666:	4b8c      	ldr	r3, [pc, #560]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	f003 0302 	and.w	r3, r3, #2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d0ed      	beq.n	8003650 <HAL_RCC_OscConfig+0x53c>
 8003674:	e015      	b.n	80036a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003676:	f7fc ffab 	bl	80005d0 <HAL_GetTick>
 800367a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800367c:	e00a      	b.n	8003694 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367e:	f7fc ffa7 	bl	80005d0 <HAL_GetTick>
 8003682:	4602      	mov	r2, r0
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	1ad3      	subs	r3, r2, r3
 8003688:	f241 3288 	movw	r2, #5000	; 0x1388
 800368c:	4293      	cmp	r3, r2
 800368e:	d901      	bls.n	8003694 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e151      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003694:	4b80      	ldr	r3, [pc, #512]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800369a:	f003 0302 	and.w	r3, r3, #2
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d1ed      	bne.n	800367e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80036a2:	7ffb      	ldrb	r3, [r7, #31]
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d105      	bne.n	80036b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a8:	4b7b      	ldr	r3, [pc, #492]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	4a7a      	ldr	r2, [pc, #488]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 80036ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f003 0320 	and.w	r3, r3, #32
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d03c      	beq.n	800373a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d01c      	beq.n	8003702 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80036c8:	4b73      	ldr	r3, [pc, #460]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 80036ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036ce:	4a72      	ldr	r2, [pc, #456]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 80036d0:	f043 0301 	orr.w	r3, r3, #1
 80036d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036d8:	f7fc ff7a 	bl	80005d0 <HAL_GetTick>
 80036dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036de:	e008      	b.n	80036f2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036e0:	f7fc ff76 	bl	80005d0 <HAL_GetTick>
 80036e4:	4602      	mov	r2, r0
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	1ad3      	subs	r3, r2, r3
 80036ea:	2b02      	cmp	r3, #2
 80036ec:	d901      	bls.n	80036f2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80036ee:	2303      	movs	r3, #3
 80036f0:	e122      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80036f2:	4b69      	ldr	r3, [pc, #420]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 80036f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d0ef      	beq.n	80036e0 <HAL_RCC_OscConfig+0x5cc>
 8003700:	e01b      	b.n	800373a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003702:	4b65      	ldr	r3, [pc, #404]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003704:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003708:	4a63      	ldr	r2, [pc, #396]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 800370a:	f023 0301 	bic.w	r3, r3, #1
 800370e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003712:	f7fc ff5d 	bl	80005d0 <HAL_GetTick>
 8003716:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003718:	e008      	b.n	800372c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800371a:	f7fc ff59 	bl	80005d0 <HAL_GetTick>
 800371e:	4602      	mov	r2, r0
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	1ad3      	subs	r3, r2, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d901      	bls.n	800372c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003728:	2303      	movs	r3, #3
 800372a:	e105      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800372c:	4b5a      	ldr	r3, [pc, #360]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 800372e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d1ef      	bne.n	800371a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 80f9 	beq.w	8003936 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003748:	2b02      	cmp	r3, #2
 800374a:	f040 80cf 	bne.w	80038ec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800374e:	4b52      	ldr	r3, [pc, #328]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	f003 0203 	and.w	r2, r3, #3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375e:	429a      	cmp	r2, r3
 8003760:	d12c      	bne.n	80037bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	3b01      	subs	r3, #1
 800376e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003770:	429a      	cmp	r2, r3
 8003772:	d123      	bne.n	80037bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800377e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003780:	429a      	cmp	r2, r3
 8003782:	d11b      	bne.n	80037bc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003790:	429a      	cmp	r2, r3
 8003792:	d113      	bne.n	80037bc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379e:	085b      	lsrs	r3, r3, #1
 80037a0:	3b01      	subs	r3, #1
 80037a2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80037a4:	429a      	cmp	r2, r3
 80037a6:	d109      	bne.n	80037bc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b2:	085b      	lsrs	r3, r3, #1
 80037b4:	3b01      	subs	r3, #1
 80037b6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d071      	beq.n	80038a0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	2b0c      	cmp	r3, #12
 80037c0:	d068      	beq.n	8003894 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80037c2:	4b35      	ldr	r3, [pc, #212]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d105      	bne.n	80037da <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80037ce:	4b32      	ldr	r3, [pc, #200]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e0ac      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80037de:	4b2e      	ldr	r3, [pc, #184]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2d      	ldr	r2, [pc, #180]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 80037e4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037e8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80037ea:	f7fc fef1 	bl	80005d0 <HAL_GetTick>
 80037ee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80037f0:	e008      	b.n	8003804 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f2:	f7fc feed 	bl	80005d0 <HAL_GetTick>
 80037f6:	4602      	mov	r2, r0
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	1ad3      	subs	r3, r2, r3
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d901      	bls.n	8003804 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003800:	2303      	movs	r3, #3
 8003802:	e099      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003804:	4b24      	ldr	r3, [pc, #144]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d1f0      	bne.n	80037f2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003810:	4b21      	ldr	r3, [pc, #132]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003812:	68da      	ldr	r2, [r3, #12]
 8003814:	4b21      	ldr	r3, [pc, #132]	; (800389c <HAL_RCC_OscConfig+0x788>)
 8003816:	4013      	ands	r3, r2
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003820:	3a01      	subs	r2, #1
 8003822:	0112      	lsls	r2, r2, #4
 8003824:	4311      	orrs	r1, r2
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800382a:	0212      	lsls	r2, r2, #8
 800382c:	4311      	orrs	r1, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003832:	0852      	lsrs	r2, r2, #1
 8003834:	3a01      	subs	r2, #1
 8003836:	0552      	lsls	r2, r2, #21
 8003838:	4311      	orrs	r1, r2
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800383e:	0852      	lsrs	r2, r2, #1
 8003840:	3a01      	subs	r2, #1
 8003842:	0652      	lsls	r2, r2, #25
 8003844:	4311      	orrs	r1, r2
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800384a:	06d2      	lsls	r2, r2, #27
 800384c:	430a      	orrs	r2, r1
 800384e:	4912      	ldr	r1, [pc, #72]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003850:	4313      	orrs	r3, r2
 8003852:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003854:	4b10      	ldr	r3, [pc, #64]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a0f      	ldr	r2, [pc, #60]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 800385a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800385e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003860:	4b0d      	ldr	r3, [pc, #52]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	4a0c      	ldr	r2, [pc, #48]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003866:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800386a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800386c:	f7fc feb0 	bl	80005d0 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003874:	f7fc feac 	bl	80005d0 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e058      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003886:	4b04      	ldr	r3, [pc, #16]	; (8003898 <HAL_RCC_OscConfig+0x784>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0f0      	beq.n	8003874 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003892:	e050      	b.n	8003936 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003894:	2301      	movs	r3, #1
 8003896:	e04f      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
 8003898:	40021000 	.word	0x40021000
 800389c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a0:	4b27      	ldr	r3, [pc, #156]	; (8003940 <HAL_RCC_OscConfig+0x82c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d144      	bne.n	8003936 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80038ac:	4b24      	ldr	r3, [pc, #144]	; (8003940 <HAL_RCC_OscConfig+0x82c>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a23      	ldr	r2, [pc, #140]	; (8003940 <HAL_RCC_OscConfig+0x82c>)
 80038b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038b6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80038b8:	4b21      	ldr	r3, [pc, #132]	; (8003940 <HAL_RCC_OscConfig+0x82c>)
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	4a20      	ldr	r2, [pc, #128]	; (8003940 <HAL_RCC_OscConfig+0x82c>)
 80038be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038c2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80038c4:	f7fc fe84 	bl	80005d0 <HAL_GetTick>
 80038c8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ca:	e008      	b.n	80038de <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038cc:	f7fc fe80 	bl	80005d0 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	693b      	ldr	r3, [r7, #16]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d901      	bls.n	80038de <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e02c      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038de:	4b18      	ldr	r3, [pc, #96]	; (8003940 <HAL_RCC_OscConfig+0x82c>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d0f0      	beq.n	80038cc <HAL_RCC_OscConfig+0x7b8>
 80038ea:	e024      	b.n	8003936 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	2b0c      	cmp	r3, #12
 80038f0:	d01f      	beq.n	8003932 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f2:	4b13      	ldr	r3, [pc, #76]	; (8003940 <HAL_RCC_OscConfig+0x82c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a12      	ldr	r2, [pc, #72]	; (8003940 <HAL_RCC_OscConfig+0x82c>)
 80038f8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038fe:	f7fc fe67 	bl	80005d0 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003906:	f7fc fe63 	bl	80005d0 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e00f      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003918:	4b09      	ldr	r3, [pc, #36]	; (8003940 <HAL_RCC_OscConfig+0x82c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d1f0      	bne.n	8003906 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003924:	4b06      	ldr	r3, [pc, #24]	; (8003940 <HAL_RCC_OscConfig+0x82c>)
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	4905      	ldr	r1, [pc, #20]	; (8003940 <HAL_RCC_OscConfig+0x82c>)
 800392a:	4b06      	ldr	r3, [pc, #24]	; (8003944 <HAL_RCC_OscConfig+0x830>)
 800392c:	4013      	ands	r3, r2
 800392e:	60cb      	str	r3, [r1, #12]
 8003930:	e001      	b.n	8003936 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e000      	b.n	8003938 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003936:	2300      	movs	r3, #0
}
 8003938:	4618      	mov	r0, r3
 800393a:	3720      	adds	r7, #32
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	40021000 	.word	0x40021000
 8003944:	feeefffc 	.word	0xfeeefffc

08003948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b086      	sub	sp, #24
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d101      	bne.n	8003960 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e11d      	b.n	8003b9c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003960:	4b90      	ldr	r3, [pc, #576]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 030f 	and.w	r3, r3, #15
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d910      	bls.n	8003990 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800396e:	4b8d      	ldr	r3, [pc, #564]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f023 020f 	bic.w	r2, r3, #15
 8003976:	498b      	ldr	r1, [pc, #556]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	4313      	orrs	r3, r2
 800397c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800397e:	4b89      	ldr	r3, [pc, #548]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 030f 	and.w	r3, r3, #15
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	429a      	cmp	r2, r3
 800398a:	d001      	beq.n	8003990 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	e105      	b.n	8003b9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b00      	cmp	r3, #0
 800399a:	d010      	beq.n	80039be <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	4b81      	ldr	r3, [pc, #516]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d908      	bls.n	80039be <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039ac:	4b7e      	ldr	r3, [pc, #504]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 80039ae:	689b      	ldr	r3, [r3, #8]
 80039b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	497b      	ldr	r1, [pc, #492]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 80039ba:	4313      	orrs	r3, r2
 80039bc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d079      	beq.n	8003abe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b03      	cmp	r3, #3
 80039d0:	d11e      	bne.n	8003a10 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039d2:	4b75      	ldr	r3, [pc, #468]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e0dc      	b.n	8003b9c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80039e2:	f000 fa09 	bl	8003df8 <RCC_GetSysClockFreqFromPLLSource>
 80039e6:	4603      	mov	r3, r0
 80039e8:	4a70      	ldr	r2, [pc, #448]	; (8003bac <HAL_RCC_ClockConfig+0x264>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d946      	bls.n	8003a7c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80039ee:	4b6e      	ldr	r3, [pc, #440]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 80039f0:	689b      	ldr	r3, [r3, #8]
 80039f2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d140      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80039fa:	4b6b      	ldr	r3, [pc, #428]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a02:	4a69      	ldr	r2, [pc, #420]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a0a:	2380      	movs	r3, #128	; 0x80
 8003a0c:	617b      	str	r3, [r7, #20]
 8003a0e:	e035      	b.n	8003a7c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d107      	bne.n	8003a28 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a18:	4b63      	ldr	r3, [pc, #396]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d115      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0b9      	b.n	8003b9c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	685b      	ldr	r3, [r3, #4]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d107      	bne.n	8003a40 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003a30:	4b5d      	ldr	r3, [pc, #372]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0302 	and.w	r3, r3, #2
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d109      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e0ad      	b.n	8003b9c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a40:	4b59      	ldr	r3, [pc, #356]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e0a5      	b.n	8003b9c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003a50:	f000 f8b4 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4a55      	ldr	r2, [pc, #340]	; (8003bac <HAL_RCC_ClockConfig+0x264>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d90f      	bls.n	8003a7c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003a5c:	4b52      	ldr	r3, [pc, #328]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003a5e:	689b      	ldr	r3, [r3, #8]
 8003a60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a68:	4b4f      	ldr	r3, [pc, #316]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a70:	4a4d      	ldr	r2, [pc, #308]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003a72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a76:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a7c:	4b4a      	ldr	r3, [pc, #296]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	f023 0203 	bic.w	r2, r3, #3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4947      	ldr	r1, [pc, #284]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a8e:	f7fc fd9f 	bl	80005d0 <HAL_GetTick>
 8003a92:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a94:	e00a      	b.n	8003aac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a96:	f7fc fd9b 	bl	80005d0 <HAL_GetTick>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	1ad3      	subs	r3, r2, r3
 8003aa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d901      	bls.n	8003aac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003aa8:	2303      	movs	r3, #3
 8003aaa:	e077      	b.n	8003b9c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aac:	4b3e      	ldr	r3, [pc, #248]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 020c 	and.w	r2, r3, #12
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	009b      	lsls	r3, r3, #2
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d1eb      	bne.n	8003a96 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b80      	cmp	r3, #128	; 0x80
 8003ac2:	d105      	bne.n	8003ad0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003ac4:	4b38      	ldr	r3, [pc, #224]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003ac6:	689b      	ldr	r3, [r3, #8]
 8003ac8:	4a37      	ldr	r2, [pc, #220]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ace:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0302 	and.w	r3, r3, #2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d010      	beq.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	4b31      	ldr	r3, [pc, #196]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003ae2:	689b      	ldr	r3, [r3, #8]
 8003ae4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d208      	bcs.n	8003afe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003aec:	4b2e      	ldr	r3, [pc, #184]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	492b      	ldr	r1, [pc, #172]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003afa:	4313      	orrs	r3, r2
 8003afc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003afe:	4b29      	ldr	r3, [pc, #164]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f003 030f 	and.w	r3, r3, #15
 8003b06:	683a      	ldr	r2, [r7, #0]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d210      	bcs.n	8003b2e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0c:	4b25      	ldr	r3, [pc, #148]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f023 020f 	bic.w	r2, r3, #15
 8003b14:	4923      	ldr	r1, [pc, #140]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b1c:	4b21      	ldr	r3, [pc, #132]	; (8003ba4 <HAL_RCC_ClockConfig+0x25c>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 030f 	and.w	r3, r3, #15
 8003b24:	683a      	ldr	r2, [r7, #0]
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d001      	beq.n	8003b2e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	e036      	b.n	8003b9c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f003 0304 	and.w	r3, r3, #4
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d008      	beq.n	8003b4c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b3a:	4b1b      	ldr	r3, [pc, #108]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	4918      	ldr	r1, [pc, #96]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0308 	and.w	r3, r3, #8
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d009      	beq.n	8003b6c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b58:	4b13      	ldr	r3, [pc, #76]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003b5a:	689b      	ldr	r3, [r3, #8]
 8003b5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	00db      	lsls	r3, r3, #3
 8003b66:	4910      	ldr	r1, [pc, #64]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003b68:	4313      	orrs	r3, r2
 8003b6a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b6c:	f000 f826 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8003b70:	4602      	mov	r2, r0
 8003b72:	4b0d      	ldr	r3, [pc, #52]	; (8003ba8 <HAL_RCC_ClockConfig+0x260>)
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	091b      	lsrs	r3, r3, #4
 8003b78:	f003 030f 	and.w	r3, r3, #15
 8003b7c:	490c      	ldr	r1, [pc, #48]	; (8003bb0 <HAL_RCC_ClockConfig+0x268>)
 8003b7e:	5ccb      	ldrb	r3, [r1, r3]
 8003b80:	f003 031f 	and.w	r3, r3, #31
 8003b84:	fa22 f303 	lsr.w	r3, r2, r3
 8003b88:	4a0a      	ldr	r2, [pc, #40]	; (8003bb4 <HAL_RCC_ClockConfig+0x26c>)
 8003b8a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003b8c:	4b0a      	ldr	r3, [pc, #40]	; (8003bb8 <HAL_RCC_ClockConfig+0x270>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7fc fccd 	bl	8000530 <HAL_InitTick>
 8003b96:	4603      	mov	r3, r0
 8003b98:	73fb      	strb	r3, [r7, #15]

  return status;
 8003b9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3718      	adds	r7, #24
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}
 8003ba4:	40022000 	.word	0x40022000
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	04c4b400 	.word	0x04c4b400
 8003bb0:	08008c00 	.word	0x08008c00
 8003bb4:	2000028c 	.word	0x2000028c
 8003bb8:	20000000 	.word	0x20000000

08003bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b089      	sub	sp, #36	; 0x24
 8003bc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	61fb      	str	r3, [r7, #28]
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003bca:	4b3e      	ldr	r3, [pc, #248]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f003 030c 	and.w	r3, r3, #12
 8003bd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003bd4:	4b3b      	ldr	r3, [pc, #236]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d005      	beq.n	8003bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	2b0c      	cmp	r3, #12
 8003be8:	d121      	bne.n	8003c2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d11e      	bne.n	8003c2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003bf0:	4b34      	ldr	r3, [pc, #208]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0308 	and.w	r3, r3, #8
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d107      	bne.n	8003c0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003bfc:	4b31      	ldr	r3, [pc, #196]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003bfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003c02:	0a1b      	lsrs	r3, r3, #8
 8003c04:	f003 030f 	and.w	r3, r3, #15
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	e005      	b.n	8003c18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003c0c:	4b2d      	ldr	r3, [pc, #180]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	f003 030f 	and.w	r3, r3, #15
 8003c16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003c18:	4a2b      	ldr	r2, [pc, #172]	; (8003cc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003c1a:	69fb      	ldr	r3, [r7, #28]
 8003c1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d10d      	bne.n	8003c44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003c2c:	e00a      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d102      	bne.n	8003c3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c34:	4b25      	ldr	r3, [pc, #148]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x110>)
 8003c36:	61bb      	str	r3, [r7, #24]
 8003c38:	e004      	b.n	8003c44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d101      	bne.n	8003c44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c40:	4b23      	ldr	r3, [pc, #140]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d134      	bne.n	8003cb4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c4a:	4b1e      	ldr	r3, [pc, #120]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
 8003c52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b02      	cmp	r3, #2
 8003c58:	d003      	beq.n	8003c62 <HAL_RCC_GetSysClockFreq+0xa6>
 8003c5a:	68bb      	ldr	r3, [r7, #8]
 8003c5c:	2b03      	cmp	r3, #3
 8003c5e:	d003      	beq.n	8003c68 <HAL_RCC_GetSysClockFreq+0xac>
 8003c60:	e005      	b.n	8003c6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003c62:	4b1a      	ldr	r3, [pc, #104]	; (8003ccc <HAL_RCC_GetSysClockFreq+0x110>)
 8003c64:	617b      	str	r3, [r7, #20]
      break;
 8003c66:	e005      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003c68:	4b19      	ldr	r3, [pc, #100]	; (8003cd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8003c6a:	617b      	str	r3, [r7, #20]
      break;
 8003c6c:	e002      	b.n	8003c74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	617b      	str	r3, [r7, #20]
      break;
 8003c72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c74:	4b13      	ldr	r3, [pc, #76]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	3301      	adds	r3, #1
 8003c80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	0a1b      	lsrs	r3, r3, #8
 8003c88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	fb03 f202 	mul.w	r2, r3, r2
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003c9a:	4b0a      	ldr	r3, [pc, #40]	; (8003cc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	0e5b      	lsrs	r3, r3, #25
 8003ca0:	f003 0303 	and.w	r3, r3, #3
 8003ca4:	3301      	adds	r3, #1
 8003ca6:	005b      	lsls	r3, r3, #1
 8003ca8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003cb4:	69bb      	ldr	r3, [r7, #24]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3724      	adds	r7, #36	; 0x24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40021000 	.word	0x40021000
 8003cc8:	08008c18 	.word	0x08008c18
 8003ccc:	00f42400 	.word	0x00f42400
 8003cd0:	007a1200 	.word	0x007a1200

08003cd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cd8:	4b03      	ldr	r3, [pc, #12]	; (8003ce8 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cda:	681b      	ldr	r3, [r3, #0]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
 8003ce6:	bf00      	nop
 8003ce8:	2000028c 	.word	0x2000028c

08003cec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003cf0:	f7ff fff0 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	4b06      	ldr	r3, [pc, #24]	; (8003d10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	0a1b      	lsrs	r3, r3, #8
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	4904      	ldr	r1, [pc, #16]	; (8003d14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d02:	5ccb      	ldrb	r3, [r1, r3]
 8003d04:	f003 031f 	and.w	r3, r3, #31
 8003d08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	40021000 	.word	0x40021000
 8003d14:	08008c10 	.word	0x08008c10

08003d18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d1c:	f7ff ffda 	bl	8003cd4 <HAL_RCC_GetHCLKFreq>
 8003d20:	4602      	mov	r2, r0
 8003d22:	4b06      	ldr	r3, [pc, #24]	; (8003d3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	0adb      	lsrs	r3, r3, #11
 8003d28:	f003 0307 	and.w	r3, r3, #7
 8003d2c:	4904      	ldr	r1, [pc, #16]	; (8003d40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d2e:	5ccb      	ldrb	r3, [r1, r3]
 8003d30:	f003 031f 	and.w	r3, r3, #31
 8003d34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d38:	4618      	mov	r0, r3
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	40021000 	.word	0x40021000
 8003d40:	08008c10 	.word	0x08008c10

08003d44 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b086      	sub	sp, #24
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d50:	4b27      	ldr	r3, [pc, #156]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d003      	beq.n	8003d64 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003d5c:	f7ff f916 	bl	8002f8c <HAL_PWREx_GetVoltageRange>
 8003d60:	6178      	str	r0, [r7, #20]
 8003d62:	e014      	b.n	8003d8e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d64:	4b22      	ldr	r3, [pc, #136]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d68:	4a21      	ldr	r2, [pc, #132]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	6593      	str	r3, [r2, #88]	; 0x58
 8003d70:	4b1f      	ldr	r3, [pc, #124]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d78:	60fb      	str	r3, [r7, #12]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003d7c:	f7ff f906 	bl	8002f8c <HAL_PWREx_GetVoltageRange>
 8003d80:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003d82:	4b1b      	ldr	r3, [pc, #108]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d86:	4a1a      	ldr	r2, [pc, #104]	; (8003df0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003d88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d8c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d94:	d10b      	bne.n	8003dae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2b80      	cmp	r3, #128	; 0x80
 8003d9a:	d913      	bls.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2ba0      	cmp	r3, #160	; 0xa0
 8003da0:	d902      	bls.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003da2:	2302      	movs	r3, #2
 8003da4:	613b      	str	r3, [r7, #16]
 8003da6:	e00d      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003da8:	2301      	movs	r3, #1
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	e00a      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2b7f      	cmp	r3, #127	; 0x7f
 8003db2:	d902      	bls.n	8003dba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003db4:	2302      	movs	r3, #2
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	e004      	b.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b70      	cmp	r3, #112	; 0x70
 8003dbe:	d101      	bne.n	8003dc4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003dc4:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f023 020f 	bic.w	r2, r3, #15
 8003dcc:	4909      	ldr	r1, [pc, #36]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003dd4:	4b07      	ldr	r3, [pc, #28]	; (8003df4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 030f 	and.w	r3, r3, #15
 8003ddc:	693a      	ldr	r2, [r7, #16]
 8003dde:	429a      	cmp	r2, r3
 8003de0:	d001      	beq.n	8003de6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e000      	b.n	8003de8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3718      	adds	r7, #24
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40021000 	.word	0x40021000
 8003df4:	40022000 	.word	0x40022000

08003df8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dfe:	4b2d      	ldr	r3, [pc, #180]	; (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f003 0303 	and.w	r3, r3, #3
 8003e06:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2b03      	cmp	r3, #3
 8003e0c:	d00b      	beq.n	8003e26 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2b03      	cmp	r3, #3
 8003e12:	d825      	bhi.n	8003e60 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d008      	beq.n	8003e2c <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d11f      	bne.n	8003e60 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003e20:	4b25      	ldr	r3, [pc, #148]	; (8003eb8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003e22:	613b      	str	r3, [r7, #16]
    break;
 8003e24:	e01f      	b.n	8003e66 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003e26:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003e28:	613b      	str	r3, [r7, #16]
    break;
 8003e2a:	e01c      	b.n	8003e66 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003e2c:	4b21      	ldr	r3, [pc, #132]	; (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0308 	and.w	r3, r3, #8
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d107      	bne.n	8003e48 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003e38:	4b1e      	ldr	r3, [pc, #120]	; (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e3e:	0a1b      	lsrs	r3, r3, #8
 8003e40:	f003 030f 	and.w	r3, r3, #15
 8003e44:	617b      	str	r3, [r7, #20]
 8003e46:	e005      	b.n	8003e54 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003e48:	4b1a      	ldr	r3, [pc, #104]	; (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	091b      	lsrs	r3, r3, #4
 8003e4e:	f003 030f 	and.w	r3, r3, #15
 8003e52:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003e54:	4a1a      	ldr	r2, [pc, #104]	; (8003ec0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5c:	613b      	str	r3, [r7, #16]
    break;
 8003e5e:	e002      	b.n	8003e66 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003e60:	2300      	movs	r3, #0
 8003e62:	613b      	str	r3, [r7, #16]
    break;
 8003e64:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003e66:	4b13      	ldr	r3, [pc, #76]	; (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	091b      	lsrs	r3, r3, #4
 8003e6c:	f003 030f 	and.w	r3, r3, #15
 8003e70:	3301      	adds	r3, #1
 8003e72:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003e74:	4b0f      	ldr	r3, [pc, #60]	; (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e76:	68db      	ldr	r3, [r3, #12]
 8003e78:	0a1b      	lsrs	r3, r3, #8
 8003e7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	fb03 f202 	mul.w	r2, r3, r2
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e8a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e8c:	4b09      	ldr	r3, [pc, #36]	; (8003eb4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	0e5b      	lsrs	r3, r3, #25
 8003e92:	f003 0303 	and.w	r3, r3, #3
 8003e96:	3301      	adds	r3, #1
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ea4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003ea6:	683b      	ldr	r3, [r7, #0]
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	00f42400 	.word	0x00f42400
 8003ebc:	007a1200 	.word	0x007a1200
 8003ec0:	08008c18 	.word	0x08008c18

08003ec4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b086      	sub	sp, #24
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ecc:	2300      	movs	r3, #0
 8003ece:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d040      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ee4:	2b80      	cmp	r3, #128	; 0x80
 8003ee6:	d02a      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ee8:	2b80      	cmp	r3, #128	; 0x80
 8003eea:	d825      	bhi.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003eec:	2b60      	cmp	r3, #96	; 0x60
 8003eee:	d026      	beq.n	8003f3e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003ef0:	2b60      	cmp	r3, #96	; 0x60
 8003ef2:	d821      	bhi.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003ef4:	2b40      	cmp	r3, #64	; 0x40
 8003ef6:	d006      	beq.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003ef8:	2b40      	cmp	r3, #64	; 0x40
 8003efa:	d81d      	bhi.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d009      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d010      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003f04:	e018      	b.n	8003f38 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003f06:	4b89      	ldr	r3, [pc, #548]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	4a88      	ldr	r2, [pc, #544]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f10:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f12:	e015      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3304      	adds	r3, #4
 8003f18:	2100      	movs	r1, #0
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 fb02 	bl	8004524 <RCCEx_PLLSAI1_Config>
 8003f20:	4603      	mov	r3, r0
 8003f22:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f24:	e00c      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	3320      	adds	r3, #32
 8003f2a:	2100      	movs	r1, #0
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f000 fbed 	bl	800470c <RCCEx_PLLSAI2_Config>
 8003f32:	4603      	mov	r3, r0
 8003f34:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003f36:	e003      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f38:	2301      	movs	r3, #1
 8003f3a:	74fb      	strb	r3, [r7, #19]
      break;
 8003f3c:	e000      	b.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8003f3e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f40:	7cfb      	ldrb	r3, [r7, #19]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d10b      	bne.n	8003f5e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f46:	4b79      	ldr	r3, [pc, #484]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f4c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f54:	4975      	ldr	r1, [pc, #468]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003f5c:	e001      	b.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f5e:	7cfb      	ldrb	r3, [r7, #19]
 8003f60:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d047      	beq.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f76:	d030      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f7c:	d82a      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f82:	d02a      	beq.n	8003fda <HAL_RCCEx_PeriphCLKConfig+0x116>
 8003f84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003f88:	d824      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f8e:	d008      	beq.n	8003fa2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8003f90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f94:	d81e      	bhi.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d00a      	beq.n	8003fb0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8003f9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f9e:	d010      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003fa0:	e018      	b.n	8003fd4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fa2:	4b62      	ldr	r3, [pc, #392]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	4a61      	ldr	r2, [pc, #388]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fac:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fae:	e015      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	3304      	adds	r3, #4
 8003fb4:	2100      	movs	r1, #0
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 fab4 	bl	8004524 <RCCEx_PLLSAI1_Config>
 8003fbc:	4603      	mov	r3, r0
 8003fbe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fc0:	e00c      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	3320      	adds	r3, #32
 8003fc6:	2100      	movs	r1, #0
 8003fc8:	4618      	mov	r0, r3
 8003fca:	f000 fb9f 	bl	800470c <RCCEx_PLLSAI2_Config>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003fd2:	e003      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	74fb      	strb	r3, [r7, #19]
      break;
 8003fd8:	e000      	b.n	8003fdc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8003fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fdc:	7cfb      	ldrb	r3, [r7, #19]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d10b      	bne.n	8003ffa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003fe2:	4b52      	ldr	r3, [pc, #328]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003fe4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003fe8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ff0:	494e      	ldr	r1, [pc, #312]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003ff8:	e001      	b.n	8003ffe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ffa:	7cfb      	ldrb	r3, [r7, #19]
 8003ffc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004006:	2b00      	cmp	r3, #0
 8004008:	f000 809f 	beq.w	800414a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800400c:	2300      	movs	r3, #0
 800400e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004010:	4b46      	ldr	r3, [pc, #280]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004018:	2b00      	cmp	r3, #0
 800401a:	d101      	bne.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800401c:	2301      	movs	r3, #1
 800401e:	e000      	b.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004020:	2300      	movs	r3, #0
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00d      	beq.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004026:	4b41      	ldr	r3, [pc, #260]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800402a:	4a40      	ldr	r2, [pc, #256]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800402c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004030:	6593      	str	r3, [r2, #88]	; 0x58
 8004032:	4b3e      	ldr	r3, [pc, #248]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004034:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403a:	60bb      	str	r3, [r7, #8]
 800403c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800403e:	2301      	movs	r3, #1
 8004040:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004042:	4b3b      	ldr	r3, [pc, #236]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a3a      	ldr	r2, [pc, #232]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004048:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800404c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800404e:	f7fc fabf 	bl	80005d0 <HAL_GetTick>
 8004052:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004054:	e009      	b.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004056:	f7fc fabb 	bl	80005d0 <HAL_GetTick>
 800405a:	4602      	mov	r2, r0
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d902      	bls.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	74fb      	strb	r3, [r7, #19]
        break;
 8004068:	e005      	b.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800406a:	4b31      	ldr	r3, [pc, #196]	; (8004130 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0ef      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004076:	7cfb      	ldrb	r3, [r7, #19]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d15b      	bne.n	8004134 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800407c:	4b2b      	ldr	r3, [pc, #172]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800407e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004082:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004086:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004088:	697b      	ldr	r3, [r7, #20]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d01f      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	429a      	cmp	r2, r3
 8004098:	d019      	beq.n	80040ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800409a:	4b24      	ldr	r3, [pc, #144]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800409c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80040a6:	4b21      	ldr	r3, [pc, #132]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ac:	4a1f      	ldr	r2, [pc, #124]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80040b6:	4b1d      	ldr	r3, [pc, #116]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040bc:	4a1b      	ldr	r2, [pc, #108]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80040c6:	4a19      	ldr	r2, [pc, #100]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d016      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040d8:	f7fc fa7a 	bl	80005d0 <HAL_GetTick>
 80040dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040de:	e00b      	b.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80040e0:	f7fc fa76 	bl	80005d0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d902      	bls.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80040f2:	2303      	movs	r3, #3
 80040f4:	74fb      	strb	r3, [r7, #19]
            break;
 80040f6:	e006      	b.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040f8:	4b0c      	ldr	r3, [pc, #48]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0ec      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004106:	7cfb      	ldrb	r3, [r7, #19]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d10c      	bne.n	8004126 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800410c:	4b07      	ldr	r3, [pc, #28]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800410e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004112:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800411c:	4903      	ldr	r1, [pc, #12]	; (800412c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800411e:	4313      	orrs	r3, r2
 8004120:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004124:	e008      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004126:	7cfb      	ldrb	r3, [r7, #19]
 8004128:	74bb      	strb	r3, [r7, #18]
 800412a:	e005      	b.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800412c:	40021000 	.word	0x40021000
 8004130:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004134:	7cfb      	ldrb	r3, [r7, #19]
 8004136:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004138:	7c7b      	ldrb	r3, [r7, #17]
 800413a:	2b01      	cmp	r3, #1
 800413c:	d105      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413e:	4ba0      	ldr	r3, [pc, #640]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004142:	4a9f      	ldr	r2, [pc, #636]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004148:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0301 	and.w	r3, r3, #1
 8004152:	2b00      	cmp	r3, #0
 8004154:	d00a      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004156:	4b9a      	ldr	r3, [pc, #616]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415c:	f023 0203 	bic.w	r2, r3, #3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004164:	4996      	ldr	r1, [pc, #600]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0302 	and.w	r3, r3, #2
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00a      	beq.n	800418e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004178:	4b91      	ldr	r3, [pc, #580]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800417a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800417e:	f023 020c 	bic.w	r2, r3, #12
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004186:	498e      	ldr	r1, [pc, #568]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004188:	4313      	orrs	r3, r2
 800418a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0304 	and.w	r3, r3, #4
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00a      	beq.n	80041b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800419a:	4b89      	ldr	r3, [pc, #548]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800419c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a8:	4985      	ldr	r1, [pc, #532]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0308 	and.w	r3, r3, #8
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00a      	beq.n	80041d2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80041bc:	4b80      	ldr	r3, [pc, #512]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041ca:	497d      	ldr	r1, [pc, #500]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0310 	and.w	r3, r3, #16
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d00a      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80041de:	4b78      	ldr	r3, [pc, #480]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ec:	4974      	ldr	r1, [pc, #464]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80041ee:	4313      	orrs	r3, r2
 80041f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0320 	and.w	r3, r3, #32
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d00a      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004200:	4b6f      	ldr	r3, [pc, #444]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004206:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800420e:	496c      	ldr	r1, [pc, #432]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004210:	4313      	orrs	r3, r2
 8004212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00a      	beq.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004222:	4b67      	ldr	r3, [pc, #412]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004228:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004230:	4963      	ldr	r1, [pc, #396]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004232:	4313      	orrs	r3, r2
 8004234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004240:	2b00      	cmp	r3, #0
 8004242:	d00a      	beq.n	800425a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004244:	4b5e      	ldr	r3, [pc, #376]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800424a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004252:	495b      	ldr	r1, [pc, #364]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004254:	4313      	orrs	r3, r2
 8004256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d00a      	beq.n	800427c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004266:	4b56      	ldr	r3, [pc, #344]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800426c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	4952      	ldr	r1, [pc, #328]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004276:	4313      	orrs	r3, r2
 8004278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004288:	4b4d      	ldr	r3, [pc, #308]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800428a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800428e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004296:	494a      	ldr	r1, [pc, #296]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004298:	4313      	orrs	r3, r2
 800429a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80042aa:	4b45      	ldr	r3, [pc, #276]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b8:	4941      	ldr	r1, [pc, #260]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00a      	beq.n	80042e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80042cc:	4b3c      	ldr	r3, [pc, #240]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042d2:	f023 0203 	bic.w	r2, r3, #3
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042da:	4939      	ldr	r1, [pc, #228]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042dc:	4313      	orrs	r3, r2
 80042de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d028      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80042ee:	4b34      	ldr	r3, [pc, #208]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042fc:	4930      	ldr	r1, [pc, #192]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042fe:	4313      	orrs	r3, r2
 8004300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800430c:	d106      	bne.n	800431c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800430e:	4b2c      	ldr	r3, [pc, #176]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	4a2b      	ldr	r2, [pc, #172]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004318:	60d3      	str	r3, [r2, #12]
 800431a:	e011      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004320:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004324:	d10c      	bne.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	3304      	adds	r3, #4
 800432a:	2101      	movs	r1, #1
 800432c:	4618      	mov	r0, r3
 800432e:	f000 f8f9 	bl	8004524 <RCCEx_PLLSAI1_Config>
 8004332:	4603      	mov	r3, r0
 8004334:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004336:	7cfb      	ldrb	r3, [r7, #19]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800433c:	7cfb      	ldrb	r3, [r7, #19]
 800433e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d04d      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004354:	d108      	bne.n	8004368 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8004356:	4b1a      	ldr	r3, [pc, #104]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004358:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800435c:	4a18      	ldr	r2, [pc, #96]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004362:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004366:	e012      	b.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004368:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800436a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800436e:	4a14      	ldr	r2, [pc, #80]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004370:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004374:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004378:	4b11      	ldr	r3, [pc, #68]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800437a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800437e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004386:	490e      	ldr	r1, [pc, #56]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004392:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004396:	d106      	bne.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004398:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800439e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80043a2:	60d3      	str	r3, [r2, #12]
 80043a4:	e020      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ae:	d109      	bne.n	80043c4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043b0:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	4a02      	ldr	r2, [pc, #8]	; (80043c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ba:	60d3      	str	r3, [r2, #12]
 80043bc:	e014      	b.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80043be:	bf00      	nop
 80043c0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80043c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80043cc:	d10c      	bne.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	3304      	adds	r3, #4
 80043d2:	2101      	movs	r1, #1
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 f8a5 	bl	8004524 <RCCEx_PLLSAI1_Config>
 80043da:	4603      	mov	r3, r0
 80043dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80043de:	7cfb      	ldrb	r3, [r7, #19]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d001      	beq.n	80043e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80043e4:	7cfb      	ldrb	r3, [r7, #19]
 80043e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d028      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80043f4:	4b4a      	ldr	r3, [pc, #296]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80043f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004402:	4947      	ldr	r1, [pc, #284]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004404:	4313      	orrs	r3, r2
 8004406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800440e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004412:	d106      	bne.n	8004422 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004414:	4b42      	ldr	r3, [pc, #264]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004416:	68db      	ldr	r3, [r3, #12]
 8004418:	4a41      	ldr	r2, [pc, #260]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800441a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800441e:	60d3      	str	r3, [r2, #12]
 8004420:	e011      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004426:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800442a:	d10c      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3304      	adds	r3, #4
 8004430:	2101      	movs	r1, #1
 8004432:	4618      	mov	r0, r3
 8004434:	f000 f876 	bl	8004524 <RCCEx_PLLSAI1_Config>
 8004438:	4603      	mov	r3, r0
 800443a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800443c:	7cfb      	ldrb	r3, [r7, #19]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8004442:	7cfb      	ldrb	r3, [r7, #19]
 8004444:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d01e      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004452:	4b33      	ldr	r3, [pc, #204]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004458:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004462:	492f      	ldr	r1, [pc, #188]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004464:	4313      	orrs	r3, r2
 8004466:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004470:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004474:	d10c      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	3304      	adds	r3, #4
 800447a:	2102      	movs	r1, #2
 800447c:	4618      	mov	r0, r3
 800447e:	f000 f851 	bl	8004524 <RCCEx_PLLSAI1_Config>
 8004482:	4603      	mov	r3, r0
 8004484:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004486:	7cfb      	ldrb	r3, [r7, #19]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d001      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800448c:	7cfb      	ldrb	r3, [r7, #19]
 800448e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d00b      	beq.n	80044b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800449c:	4b20      	ldr	r3, [pc, #128]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800449e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044a2:	f023 0204 	bic.w	r2, r3, #4
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80044ac:	491c      	ldr	r1, [pc, #112]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ae:	4313      	orrs	r3, r2
 80044b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d00b      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80044c0:	4b17      	ldr	r3, [pc, #92]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044c6:	f023 0218 	bic.w	r2, r3, #24
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044d0:	4913      	ldr	r1, [pc, #76]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044d2:	4313      	orrs	r3, r2
 80044d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d017      	beq.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80044e4:	4b0e      	ldr	r3, [pc, #56]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044f4:	490a      	ldr	r1, [pc, #40]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004502:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004506:	d105      	bne.n	8004514 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004508:	4b05      	ldr	r3, [pc, #20]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800450a:	68db      	ldr	r3, [r3, #12]
 800450c:	4a04      	ldr	r2, [pc, #16]	; (8004520 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800450e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004512:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004514:	7cbb      	ldrb	r3, [r7, #18]
}
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40021000 	.word	0x40021000

08004524 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b084      	sub	sp, #16
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800452e:	2300      	movs	r3, #0
 8004530:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004532:	4b72      	ldr	r3, [pc, #456]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	f003 0303 	and.w	r3, r3, #3
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00e      	beq.n	800455c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800453e:	4b6f      	ldr	r3, [pc, #444]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f003 0203 	and.w	r2, r3, #3
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	429a      	cmp	r2, r3
 800454c:	d103      	bne.n	8004556 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
       ||
 8004552:	2b00      	cmp	r3, #0
 8004554:	d142      	bne.n	80045dc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	73fb      	strb	r3, [r7, #15]
 800455a:	e03f      	b.n	80045dc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d018      	beq.n	8004596 <RCCEx_PLLSAI1_Config+0x72>
 8004564:	2b03      	cmp	r3, #3
 8004566:	d825      	bhi.n	80045b4 <RCCEx_PLLSAI1_Config+0x90>
 8004568:	2b01      	cmp	r3, #1
 800456a:	d002      	beq.n	8004572 <RCCEx_PLLSAI1_Config+0x4e>
 800456c:	2b02      	cmp	r3, #2
 800456e:	d009      	beq.n	8004584 <RCCEx_PLLSAI1_Config+0x60>
 8004570:	e020      	b.n	80045b4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004572:	4b62      	ldr	r3, [pc, #392]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d11d      	bne.n	80045ba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004582:	e01a      	b.n	80045ba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004584:	4b5d      	ldr	r3, [pc, #372]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800458c:	2b00      	cmp	r3, #0
 800458e:	d116      	bne.n	80045be <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004594:	e013      	b.n	80045be <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004596:	4b59      	ldr	r3, [pc, #356]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d10f      	bne.n	80045c2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80045a2:	4b56      	ldr	r3, [pc, #344]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d109      	bne.n	80045c2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80045b2:	e006      	b.n	80045c2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	73fb      	strb	r3, [r7, #15]
      break;
 80045b8:	e004      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045ba:	bf00      	nop
 80045bc:	e002      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045be:	bf00      	nop
 80045c0:	e000      	b.n	80045c4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80045c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80045c4:	7bfb      	ldrb	r3, [r7, #15]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d108      	bne.n	80045dc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80045ca:	4b4c      	ldr	r3, [pc, #304]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	f023 0203 	bic.w	r2, r3, #3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4949      	ldr	r1, [pc, #292]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045d8:	4313      	orrs	r3, r2
 80045da:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80045dc:	7bfb      	ldrb	r3, [r7, #15]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	f040 8086 	bne.w	80046f0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80045e4:	4b45      	ldr	r3, [pc, #276]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a44      	ldr	r2, [pc, #272]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80045ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80045ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80045f0:	f7fb ffee 	bl	80005d0 <HAL_GetTick>
 80045f4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80045f6:	e009      	b.n	800460c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045f8:	f7fb ffea 	bl	80005d0 <HAL_GetTick>
 80045fc:	4602      	mov	r2, r0
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	2b02      	cmp	r3, #2
 8004604:	d902      	bls.n	800460c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004606:	2303      	movs	r3, #3
 8004608:	73fb      	strb	r3, [r7, #15]
        break;
 800460a:	e005      	b.n	8004618 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800460c:	4b3b      	ldr	r3, [pc, #236]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004614:	2b00      	cmp	r3, #0
 8004616:	d1ef      	bne.n	80045f8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004618:	7bfb      	ldrb	r3, [r7, #15]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d168      	bne.n	80046f0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d113      	bne.n	800464c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004624:	4b35      	ldr	r3, [pc, #212]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004626:	691a      	ldr	r2, [r3, #16]
 8004628:	4b35      	ldr	r3, [pc, #212]	; (8004700 <RCCEx_PLLSAI1_Config+0x1dc>)
 800462a:	4013      	ands	r3, r2
 800462c:	687a      	ldr	r2, [r7, #4]
 800462e:	6892      	ldr	r2, [r2, #8]
 8004630:	0211      	lsls	r1, r2, #8
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	68d2      	ldr	r2, [r2, #12]
 8004636:	06d2      	lsls	r2, r2, #27
 8004638:	4311      	orrs	r1, r2
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	6852      	ldr	r2, [r2, #4]
 800463e:	3a01      	subs	r2, #1
 8004640:	0112      	lsls	r2, r2, #4
 8004642:	430a      	orrs	r2, r1
 8004644:	492d      	ldr	r1, [pc, #180]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004646:	4313      	orrs	r3, r2
 8004648:	610b      	str	r3, [r1, #16]
 800464a:	e02d      	b.n	80046a8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	2b01      	cmp	r3, #1
 8004650:	d115      	bne.n	800467e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004652:	4b2a      	ldr	r3, [pc, #168]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004654:	691a      	ldr	r2, [r3, #16]
 8004656:	4b2b      	ldr	r3, [pc, #172]	; (8004704 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004658:	4013      	ands	r3, r2
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	6892      	ldr	r2, [r2, #8]
 800465e:	0211      	lsls	r1, r2, #8
 8004660:	687a      	ldr	r2, [r7, #4]
 8004662:	6912      	ldr	r2, [r2, #16]
 8004664:	0852      	lsrs	r2, r2, #1
 8004666:	3a01      	subs	r2, #1
 8004668:	0552      	lsls	r2, r2, #21
 800466a:	4311      	orrs	r1, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6852      	ldr	r2, [r2, #4]
 8004670:	3a01      	subs	r2, #1
 8004672:	0112      	lsls	r2, r2, #4
 8004674:	430a      	orrs	r2, r1
 8004676:	4921      	ldr	r1, [pc, #132]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004678:	4313      	orrs	r3, r2
 800467a:	610b      	str	r3, [r1, #16]
 800467c:	e014      	b.n	80046a8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800467e:	4b1f      	ldr	r3, [pc, #124]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	4b21      	ldr	r3, [pc, #132]	; (8004708 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004684:	4013      	ands	r3, r2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6892      	ldr	r2, [r2, #8]
 800468a:	0211      	lsls	r1, r2, #8
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	6952      	ldr	r2, [r2, #20]
 8004690:	0852      	lsrs	r2, r2, #1
 8004692:	3a01      	subs	r2, #1
 8004694:	0652      	lsls	r2, r2, #25
 8004696:	4311      	orrs	r1, r2
 8004698:	687a      	ldr	r2, [r7, #4]
 800469a:	6852      	ldr	r2, [r2, #4]
 800469c:	3a01      	subs	r2, #1
 800469e:	0112      	lsls	r2, r2, #4
 80046a0:	430a      	orrs	r2, r1
 80046a2:	4916      	ldr	r1, [pc, #88]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046a4:	4313      	orrs	r3, r2
 80046a6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80046a8:	4b14      	ldr	r3, [pc, #80]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a13      	ldr	r2, [pc, #76]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80046b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046b4:	f7fb ff8c 	bl	80005d0 <HAL_GetTick>
 80046b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046ba:	e009      	b.n	80046d0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046bc:	f7fb ff88 	bl	80005d0 <HAL_GetTick>
 80046c0:	4602      	mov	r2, r0
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	1ad3      	subs	r3, r2, r3
 80046c6:	2b02      	cmp	r3, #2
 80046c8:	d902      	bls.n	80046d0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80046ca:	2303      	movs	r3, #3
 80046cc:	73fb      	strb	r3, [r7, #15]
          break;
 80046ce:	e005      	b.n	80046dc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80046d0:	4b0a      	ldr	r3, [pc, #40]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d0ef      	beq.n	80046bc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80046dc:	7bfb      	ldrb	r3, [r7, #15]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d106      	bne.n	80046f0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80046e2:	4b06      	ldr	r3, [pc, #24]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	4904      	ldr	r1, [pc, #16]	; (80046fc <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ec:	4313      	orrs	r3, r2
 80046ee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80046f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3710      	adds	r7, #16
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	40021000 	.word	0x40021000
 8004700:	07ff800f 	.word	0x07ff800f
 8004704:	ff9f800f 	.word	0xff9f800f
 8004708:	f9ff800f 	.word	0xf9ff800f

0800470c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b084      	sub	sp, #16
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004716:	2300      	movs	r3, #0
 8004718:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800471a:	4b72      	ldr	r3, [pc, #456]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d00e      	beq.n	8004744 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004726:	4b6f      	ldr	r3, [pc, #444]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004728:	68db      	ldr	r3, [r3, #12]
 800472a:	f003 0203 	and.w	r2, r3, #3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	429a      	cmp	r2, r3
 8004734:	d103      	bne.n	800473e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
       ||
 800473a:	2b00      	cmp	r3, #0
 800473c:	d142      	bne.n	80047c4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	73fb      	strb	r3, [r7, #15]
 8004742:	e03f      	b.n	80047c4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2b03      	cmp	r3, #3
 800474a:	d018      	beq.n	800477e <RCCEx_PLLSAI2_Config+0x72>
 800474c:	2b03      	cmp	r3, #3
 800474e:	d825      	bhi.n	800479c <RCCEx_PLLSAI2_Config+0x90>
 8004750:	2b01      	cmp	r3, #1
 8004752:	d002      	beq.n	800475a <RCCEx_PLLSAI2_Config+0x4e>
 8004754:	2b02      	cmp	r3, #2
 8004756:	d009      	beq.n	800476c <RCCEx_PLLSAI2_Config+0x60>
 8004758:	e020      	b.n	800479c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800475a:	4b62      	ldr	r3, [pc, #392]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d11d      	bne.n	80047a2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800476a:	e01a      	b.n	80047a2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800476c:	4b5d      	ldr	r3, [pc, #372]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004774:	2b00      	cmp	r3, #0
 8004776:	d116      	bne.n	80047a6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004778:	2301      	movs	r3, #1
 800477a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800477c:	e013      	b.n	80047a6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800477e:	4b59      	ldr	r3, [pc, #356]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10f      	bne.n	80047aa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800478a:	4b56      	ldr	r3, [pc, #344]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d109      	bne.n	80047aa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004796:	2301      	movs	r3, #1
 8004798:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800479a:	e006      	b.n	80047aa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      break;
 80047a0:	e004      	b.n	80047ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80047a2:	bf00      	nop
 80047a4:	e002      	b.n	80047ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80047a6:	bf00      	nop
 80047a8:	e000      	b.n	80047ac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80047aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80047ac:	7bfb      	ldrb	r3, [r7, #15]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d108      	bne.n	80047c4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80047b2:	4b4c      	ldr	r3, [pc, #304]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047b4:	68db      	ldr	r3, [r3, #12]
 80047b6:	f023 0203 	bic.w	r2, r3, #3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	4949      	ldr	r1, [pc, #292]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f040 8086 	bne.w	80048d8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80047cc:	4b45      	ldr	r3, [pc, #276]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a44      	ldr	r2, [pc, #272]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047d8:	f7fb fefa 	bl	80005d0 <HAL_GetTick>
 80047dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047de:	e009      	b.n	80047f4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80047e0:	f7fb fef6 	bl	80005d0 <HAL_GetTick>
 80047e4:	4602      	mov	r2, r0
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	1ad3      	subs	r3, r2, r3
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d902      	bls.n	80047f4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80047ee:	2303      	movs	r3, #3
 80047f0:	73fb      	strb	r3, [r7, #15]
        break;
 80047f2:	e005      	b.n	8004800 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80047f4:	4b3b      	ldr	r3, [pc, #236]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d1ef      	bne.n	80047e0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004800:	7bfb      	ldrb	r3, [r7, #15]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d168      	bne.n	80048d8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d113      	bne.n	8004834 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800480c:	4b35      	ldr	r3, [pc, #212]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800480e:	695a      	ldr	r2, [r3, #20]
 8004810:	4b35      	ldr	r3, [pc, #212]	; (80048e8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004812:	4013      	ands	r3, r2
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6892      	ldr	r2, [r2, #8]
 8004818:	0211      	lsls	r1, r2, #8
 800481a:	687a      	ldr	r2, [r7, #4]
 800481c:	68d2      	ldr	r2, [r2, #12]
 800481e:	06d2      	lsls	r2, r2, #27
 8004820:	4311      	orrs	r1, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6852      	ldr	r2, [r2, #4]
 8004826:	3a01      	subs	r2, #1
 8004828:	0112      	lsls	r2, r2, #4
 800482a:	430a      	orrs	r2, r1
 800482c:	492d      	ldr	r1, [pc, #180]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800482e:	4313      	orrs	r3, r2
 8004830:	614b      	str	r3, [r1, #20]
 8004832:	e02d      	b.n	8004890 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d115      	bne.n	8004866 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800483a:	4b2a      	ldr	r3, [pc, #168]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800483c:	695a      	ldr	r2, [r3, #20]
 800483e:	4b2b      	ldr	r3, [pc, #172]	; (80048ec <RCCEx_PLLSAI2_Config+0x1e0>)
 8004840:	4013      	ands	r3, r2
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6892      	ldr	r2, [r2, #8]
 8004846:	0211      	lsls	r1, r2, #8
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	6912      	ldr	r2, [r2, #16]
 800484c:	0852      	lsrs	r2, r2, #1
 800484e:	3a01      	subs	r2, #1
 8004850:	0552      	lsls	r2, r2, #21
 8004852:	4311      	orrs	r1, r2
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	6852      	ldr	r2, [r2, #4]
 8004858:	3a01      	subs	r2, #1
 800485a:	0112      	lsls	r2, r2, #4
 800485c:	430a      	orrs	r2, r1
 800485e:	4921      	ldr	r1, [pc, #132]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004860:	4313      	orrs	r3, r2
 8004862:	614b      	str	r3, [r1, #20]
 8004864:	e014      	b.n	8004890 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004866:	4b1f      	ldr	r3, [pc, #124]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004868:	695a      	ldr	r2, [r3, #20]
 800486a:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <RCCEx_PLLSAI2_Config+0x1e4>)
 800486c:	4013      	ands	r3, r2
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	6892      	ldr	r2, [r2, #8]
 8004872:	0211      	lsls	r1, r2, #8
 8004874:	687a      	ldr	r2, [r7, #4]
 8004876:	6952      	ldr	r2, [r2, #20]
 8004878:	0852      	lsrs	r2, r2, #1
 800487a:	3a01      	subs	r2, #1
 800487c:	0652      	lsls	r2, r2, #25
 800487e:	4311      	orrs	r1, r2
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	6852      	ldr	r2, [r2, #4]
 8004884:	3a01      	subs	r2, #1
 8004886:	0112      	lsls	r2, r2, #4
 8004888:	430a      	orrs	r2, r1
 800488a:	4916      	ldr	r1, [pc, #88]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 800488c:	4313      	orrs	r3, r2
 800488e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004890:	4b14      	ldr	r3, [pc, #80]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	4a13      	ldr	r2, [pc, #76]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004896:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800489a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fb fe98 	bl	80005d0 <HAL_GetTick>
 80048a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048a2:	e009      	b.n	80048b8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048a4:	f7fb fe94 	bl	80005d0 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d902      	bls.n	80048b8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	73fb      	strb	r3, [r7, #15]
          break;
 80048b6:	e005      	b.n	80048c4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80048b8:	4b0a      	ldr	r3, [pc, #40]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d0ef      	beq.n	80048a4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d106      	bne.n	80048d8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80048ca:	4b06      	ldr	r3, [pc, #24]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048cc:	695a      	ldr	r2, [r3, #20]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	4904      	ldr	r1, [pc, #16]	; (80048e4 <RCCEx_PLLSAI2_Config+0x1d8>)
 80048d4:	4313      	orrs	r3, r2
 80048d6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80048d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3710      	adds	r7, #16
 80048de:	46bd      	mov	sp, r7
 80048e0:	bd80      	pop	{r7, pc}
 80048e2:	bf00      	nop
 80048e4:	40021000 	.word	0x40021000
 80048e8:	07ff800f 	.word	0x07ff800f
 80048ec:	ff9f800f 	.word	0xff9f800f
 80048f0:	f9ff800f 	.word	0xf9ff800f

080048f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	b082      	sub	sp, #8
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d101      	bne.n	8004906 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e049      	b.n	800499a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800490c:	b2db      	uxtb	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	d106      	bne.n	8004920 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f003 ffb2 	bl	8008884 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2202      	movs	r2, #2
 8004924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	3304      	adds	r3, #4
 8004930:	4619      	mov	r1, r3
 8004932:	4610      	mov	r0, r2
 8004934:	f000 fac0 	bl	8004eb8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2201      	movs	r2, #1
 800493c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2201      	movs	r2, #1
 800495c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	2201      	movs	r2, #1
 8004964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2201      	movs	r2, #1
 800496c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2201      	movs	r2, #1
 800497c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2201      	movs	r2, #1
 8004984:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2201      	movs	r2, #1
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004998:	2300      	movs	r3, #0
}
 800499a:	4618      	mov	r0, r3
 800499c:	3708      	adds	r7, #8
 800499e:	46bd      	mov	sp, r7
 80049a0:	bd80      	pop	{r7, pc}
	...

080049a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b085      	sub	sp, #20
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b2:	b2db      	uxtb	r3, r3
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d001      	beq.n	80049bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e04f      	b.n	8004a5c <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2202      	movs	r2, #2
 80049c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	68da      	ldr	r2, [r3, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 0201 	orr.w	r2, r2, #1
 80049d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a23      	ldr	r2, [pc, #140]	; (8004a68 <HAL_TIM_Base_Start_IT+0xc4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d01d      	beq.n	8004a1a <HAL_TIM_Base_Start_IT+0x76>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e6:	d018      	beq.n	8004a1a <HAL_TIM_Base_Start_IT+0x76>
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a1f      	ldr	r2, [pc, #124]	; (8004a6c <HAL_TIM_Base_Start_IT+0xc8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d013      	beq.n	8004a1a <HAL_TIM_Base_Start_IT+0x76>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a1e      	ldr	r2, [pc, #120]	; (8004a70 <HAL_TIM_Base_Start_IT+0xcc>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d00e      	beq.n	8004a1a <HAL_TIM_Base_Start_IT+0x76>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a1c      	ldr	r2, [pc, #112]	; (8004a74 <HAL_TIM_Base_Start_IT+0xd0>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d009      	beq.n	8004a1a <HAL_TIM_Base_Start_IT+0x76>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a1b      	ldr	r2, [pc, #108]	; (8004a78 <HAL_TIM_Base_Start_IT+0xd4>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d004      	beq.n	8004a1a <HAL_TIM_Base_Start_IT+0x76>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a19      	ldr	r2, [pc, #100]	; (8004a7c <HAL_TIM_Base_Start_IT+0xd8>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d115      	bne.n	8004a46 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	4b17      	ldr	r3, [pc, #92]	; (8004a80 <HAL_TIM_Base_Start_IT+0xdc>)
 8004a22:	4013      	ands	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2b06      	cmp	r3, #6
 8004a2a:	d015      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0xb4>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a32:	d011      	beq.n	8004a58 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f042 0201 	orr.w	r2, r2, #1
 8004a42:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a44:	e008      	b.n	8004a58 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f042 0201 	orr.w	r2, r2, #1
 8004a54:	601a      	str	r2, [r3, #0]
 8004a56:	e000      	b.n	8004a5a <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a58:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a5a:	2300      	movs	r3, #0
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr
 8004a68:	40012c00 	.word	0x40012c00
 8004a6c:	40000400 	.word	0x40000400
 8004a70:	40000800 	.word	0x40000800
 8004a74:	40000c00 	.word	0x40000c00
 8004a78:	40013400 	.word	0x40013400
 8004a7c:	40014000 	.word	0x40014000
 8004a80:	00010007 	.word	0x00010007

08004a84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0302 	and.w	r3, r3, #2
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d122      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0302 	and.w	r3, r3, #2
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d11b      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0202 	mvn.w	r2, #2
 8004ab0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f9d8 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 8004acc:	e005      	b.n	8004ada <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f9ca 	bl	8004e68 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f9db 	bl	8004e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0304 	and.w	r3, r3, #4
 8004aea:	2b04      	cmp	r3, #4
 8004aec:	d122      	bne.n	8004b34 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0304 	and.w	r3, r3, #4
 8004af8:	2b04      	cmp	r3, #4
 8004afa:	d11b      	bne.n	8004b34 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0204 	mvn.w	r2, #4
 8004b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2202      	movs	r2, #2
 8004b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f9ae 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 8004b20:	e005      	b.n	8004b2e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f9a0 	bl	8004e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f9b1 	bl	8004e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0308 	and.w	r3, r3, #8
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d122      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0308 	and.w	r3, r3, #8
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d11b      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0208 	mvn.w	r2, #8
 8004b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f003 0303 	and.w	r3, r3, #3
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f984 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f976 	bl	8004e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f987 	bl	8004e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0310 	and.w	r3, r3, #16
 8004b92:	2b10      	cmp	r3, #16
 8004b94:	d122      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0310 	and.w	r3, r3, #16
 8004ba0:	2b10      	cmp	r3, #16
 8004ba2:	d11b      	bne.n	8004bdc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0210 	mvn.w	r2, #16
 8004bac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	69db      	ldr	r3, [r3, #28]
 8004bba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 f95a 	bl	8004e7c <HAL_TIM_IC_CaptureCallback>
 8004bc8:	e005      	b.n	8004bd6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f000 f94c 	bl	8004e68 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd0:	6878      	ldr	r0, [r7, #4]
 8004bd2:	f000 f95d 	bl	8004e90 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	f003 0301 	and.w	r3, r3, #1
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d10e      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	f003 0301 	and.w	r3, r3, #1
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d107      	bne.n	8004c08 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f06f 0201 	mvn.w	r2, #1
 8004c00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f926 	bl	8004e54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c12:	2b80      	cmp	r3, #128	; 0x80
 8004c14:	d10e      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c20:	2b80      	cmp	r3, #128	; 0x80
 8004c22:	d107      	bne.n	8004c34 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 fb08 	bl	8005244 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	691b      	ldr	r3, [r3, #16]
 8004c3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c42:	d10e      	bne.n	8004c62 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68db      	ldr	r3, [r3, #12]
 8004c4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c4e:	2b80      	cmp	r3, #128	; 0x80
 8004c50:	d107      	bne.n	8004c62 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f000 fafb 	bl	8005258 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6c:	2b40      	cmp	r3, #64	; 0x40
 8004c6e:	d10e      	bne.n	8004c8e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	68db      	ldr	r3, [r3, #12]
 8004c76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7a:	2b40      	cmp	r3, #64	; 0x40
 8004c7c:	d107      	bne.n	8004c8e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f000 f90b 	bl	8004ea4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b20      	cmp	r3, #32
 8004c9a:	d10e      	bne.n	8004cba <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	68db      	ldr	r3, [r3, #12]
 8004ca2:	f003 0320 	and.w	r3, r3, #32
 8004ca6:	2b20      	cmp	r3, #32
 8004ca8:	d107      	bne.n	8004cba <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f06f 0220 	mvn.w	r2, #32
 8004cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f000 fabb 	bl	8005230 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cba:	bf00      	nop
 8004cbc:	3708      	adds	r7, #8
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}

08004cc2 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cc2:	b580      	push	{r7, lr}
 8004cc4:	b084      	sub	sp, #16
 8004cc6:	af00      	add	r7, sp, #0
 8004cc8:	6078      	str	r0, [r7, #4]
 8004cca:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d101      	bne.n	8004cde <HAL_TIM_ConfigClockSource+0x1c>
 8004cda:	2302      	movs	r3, #2
 8004cdc:	e0b6      	b.n	8004e4c <HAL_TIM_ConfigClockSource+0x18a>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2202      	movs	r2, #2
 8004cea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	689b      	ldr	r3, [r3, #8]
 8004cf4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004cfc:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d00:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d08:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	68ba      	ldr	r2, [r7, #8]
 8004d10:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d1a:	d03e      	beq.n	8004d9a <HAL_TIM_ConfigClockSource+0xd8>
 8004d1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d20:	f200 8087 	bhi.w	8004e32 <HAL_TIM_ConfigClockSource+0x170>
 8004d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d28:	f000 8086 	beq.w	8004e38 <HAL_TIM_ConfigClockSource+0x176>
 8004d2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d30:	d87f      	bhi.n	8004e32 <HAL_TIM_ConfigClockSource+0x170>
 8004d32:	2b70      	cmp	r3, #112	; 0x70
 8004d34:	d01a      	beq.n	8004d6c <HAL_TIM_ConfigClockSource+0xaa>
 8004d36:	2b70      	cmp	r3, #112	; 0x70
 8004d38:	d87b      	bhi.n	8004e32 <HAL_TIM_ConfigClockSource+0x170>
 8004d3a:	2b60      	cmp	r3, #96	; 0x60
 8004d3c:	d050      	beq.n	8004de0 <HAL_TIM_ConfigClockSource+0x11e>
 8004d3e:	2b60      	cmp	r3, #96	; 0x60
 8004d40:	d877      	bhi.n	8004e32 <HAL_TIM_ConfigClockSource+0x170>
 8004d42:	2b50      	cmp	r3, #80	; 0x50
 8004d44:	d03c      	beq.n	8004dc0 <HAL_TIM_ConfigClockSource+0xfe>
 8004d46:	2b50      	cmp	r3, #80	; 0x50
 8004d48:	d873      	bhi.n	8004e32 <HAL_TIM_ConfigClockSource+0x170>
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d058      	beq.n	8004e00 <HAL_TIM_ConfigClockSource+0x13e>
 8004d4e:	2b40      	cmp	r3, #64	; 0x40
 8004d50:	d86f      	bhi.n	8004e32 <HAL_TIM_ConfigClockSource+0x170>
 8004d52:	2b30      	cmp	r3, #48	; 0x30
 8004d54:	d064      	beq.n	8004e20 <HAL_TIM_ConfigClockSource+0x15e>
 8004d56:	2b30      	cmp	r3, #48	; 0x30
 8004d58:	d86b      	bhi.n	8004e32 <HAL_TIM_ConfigClockSource+0x170>
 8004d5a:	2b20      	cmp	r3, #32
 8004d5c:	d060      	beq.n	8004e20 <HAL_TIM_ConfigClockSource+0x15e>
 8004d5e:	2b20      	cmp	r3, #32
 8004d60:	d867      	bhi.n	8004e32 <HAL_TIM_ConfigClockSource+0x170>
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d05c      	beq.n	8004e20 <HAL_TIM_ConfigClockSource+0x15e>
 8004d66:	2b10      	cmp	r3, #16
 8004d68:	d05a      	beq.n	8004e20 <HAL_TIM_ConfigClockSource+0x15e>
 8004d6a:	e062      	b.n	8004e32 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6818      	ldr	r0, [r3, #0]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	6899      	ldr	r1, [r3, #8]
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	f000 f9b0 	bl	80050e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004d8e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68ba      	ldr	r2, [r7, #8]
 8004d96:	609a      	str	r2, [r3, #8]
      break;
 8004d98:	e04f      	b.n	8004e3a <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6818      	ldr	r0, [r3, #0]
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6899      	ldr	r1, [r3, #8]
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	685a      	ldr	r2, [r3, #4]
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	f000 f999 	bl	80050e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004dbc:	609a      	str	r2, [r3, #8]
      break;
 8004dbe:	e03c      	b.n	8004e3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6818      	ldr	r0, [r3, #0]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	6859      	ldr	r1, [r3, #4]
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	f000 f90d 	bl	8004fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	2150      	movs	r1, #80	; 0x50
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f000 f966 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004dde:	e02c      	b.n	8004e3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	6859      	ldr	r1, [r3, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	461a      	mov	r2, r3
 8004dee:	f000 f92c 	bl	800504a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2160      	movs	r1, #96	; 0x60
 8004df8:	4618      	mov	r0, r3
 8004dfa:	f000 f956 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004dfe:	e01c      	b.n	8004e3a <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6818      	ldr	r0, [r3, #0]
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	6859      	ldr	r1, [r3, #4]
 8004e08:	683b      	ldr	r3, [r7, #0]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	f000 f8ed 	bl	8004fec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2140      	movs	r1, #64	; 0x40
 8004e18:	4618      	mov	r0, r3
 8004e1a:	f000 f946 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004e1e:	e00c      	b.n	8004e3a <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681a      	ldr	r2, [r3, #0]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f000 f93d 	bl	80050aa <TIM_ITRx_SetConfig>
      break;
 8004e30:	e003      	b.n	8004e3a <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	73fb      	strb	r3, [r7, #15]
      break;
 8004e36:	e000      	b.n	8004e3a <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004e38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3710      	adds	r7, #16
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b083      	sub	sp, #12
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e68:	b480      	push	{r7}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004e98:	bf00      	nop
 8004e9a:	370c      	adds	r7, #12
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b085      	sub	sp, #20
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a40      	ldr	r2, [pc, #256]	; (8004fcc <TIM_Base_SetConfig+0x114>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d013      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ed6:	d00f      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a3d      	ldr	r2, [pc, #244]	; (8004fd0 <TIM_Base_SetConfig+0x118>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d00b      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a3c      	ldr	r2, [pc, #240]	; (8004fd4 <TIM_Base_SetConfig+0x11c>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d007      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	4a3b      	ldr	r2, [pc, #236]	; (8004fd8 <TIM_Base_SetConfig+0x120>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d003      	beq.n	8004ef8 <TIM_Base_SetConfig+0x40>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	4a3a      	ldr	r2, [pc, #232]	; (8004fdc <TIM_Base_SetConfig+0x124>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d108      	bne.n	8004f0a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004efe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a2f      	ldr	r2, [pc, #188]	; (8004fcc <TIM_Base_SetConfig+0x114>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d01f      	beq.n	8004f52 <TIM_Base_SetConfig+0x9a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f18:	d01b      	beq.n	8004f52 <TIM_Base_SetConfig+0x9a>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a2c      	ldr	r2, [pc, #176]	; (8004fd0 <TIM_Base_SetConfig+0x118>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d017      	beq.n	8004f52 <TIM_Base_SetConfig+0x9a>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	4a2b      	ldr	r2, [pc, #172]	; (8004fd4 <TIM_Base_SetConfig+0x11c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d013      	beq.n	8004f52 <TIM_Base_SetConfig+0x9a>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	4a2a      	ldr	r2, [pc, #168]	; (8004fd8 <TIM_Base_SetConfig+0x120>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00f      	beq.n	8004f52 <TIM_Base_SetConfig+0x9a>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a29      	ldr	r2, [pc, #164]	; (8004fdc <TIM_Base_SetConfig+0x124>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d00b      	beq.n	8004f52 <TIM_Base_SetConfig+0x9a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a28      	ldr	r2, [pc, #160]	; (8004fe0 <TIM_Base_SetConfig+0x128>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d007      	beq.n	8004f52 <TIM_Base_SetConfig+0x9a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a27      	ldr	r2, [pc, #156]	; (8004fe4 <TIM_Base_SetConfig+0x12c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d003      	beq.n	8004f52 <TIM_Base_SetConfig+0x9a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a26      	ldr	r2, [pc, #152]	; (8004fe8 <TIM_Base_SetConfig+0x130>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d108      	bne.n	8004f64 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f58:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	695b      	ldr	r3, [r3, #20]
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	689a      	ldr	r2, [r3, #8]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	4a10      	ldr	r2, [pc, #64]	; (8004fcc <TIM_Base_SetConfig+0x114>)
 8004f8c:	4293      	cmp	r3, r2
 8004f8e:	d00f      	beq.n	8004fb0 <TIM_Base_SetConfig+0xf8>
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4a12      	ldr	r2, [pc, #72]	; (8004fdc <TIM_Base_SetConfig+0x124>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d00b      	beq.n	8004fb0 <TIM_Base_SetConfig+0xf8>
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	4a11      	ldr	r2, [pc, #68]	; (8004fe0 <TIM_Base_SetConfig+0x128>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d007      	beq.n	8004fb0 <TIM_Base_SetConfig+0xf8>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	4a10      	ldr	r2, [pc, #64]	; (8004fe4 <TIM_Base_SetConfig+0x12c>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d003      	beq.n	8004fb0 <TIM_Base_SetConfig+0xf8>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	4a0f      	ldr	r2, [pc, #60]	; (8004fe8 <TIM_Base_SetConfig+0x130>)
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d103      	bne.n	8004fb8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	691a      	ldr	r2, [r3, #16]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	615a      	str	r2, [r3, #20]
}
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	40012c00 	.word	0x40012c00
 8004fd0:	40000400 	.word	0x40000400
 8004fd4:	40000800 	.word	0x40000800
 8004fd8:	40000c00 	.word	0x40000c00
 8004fdc:	40013400 	.word	0x40013400
 8004fe0:	40014000 	.word	0x40014000
 8004fe4:	40014400 	.word	0x40014400
 8004fe8:	40014800 	.word	0x40014800

08004fec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b087      	sub	sp, #28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	6a1b      	ldr	r3, [r3, #32]
 8004ffc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	f023 0201 	bic.w	r2, r3, #1
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005010:	693b      	ldr	r3, [r7, #16]
 8005012:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005016:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	011b      	lsls	r3, r3, #4
 800501c:	693a      	ldr	r2, [r7, #16]
 800501e:	4313      	orrs	r3, r2
 8005020:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f023 030a 	bic.w	r3, r3, #10
 8005028:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	697a      	ldr	r2, [r7, #20]
 800503c:	621a      	str	r2, [r3, #32]
}
 800503e:	bf00      	nop
 8005040:	371c      	adds	r7, #28
 8005042:	46bd      	mov	sp, r7
 8005044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005048:	4770      	bx	lr

0800504a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800504a:	b480      	push	{r7}
 800504c:	b087      	sub	sp, #28
 800504e:	af00      	add	r7, sp, #0
 8005050:	60f8      	str	r0, [r7, #12]
 8005052:	60b9      	str	r1, [r7, #8]
 8005054:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	6a1b      	ldr	r3, [r3, #32]
 800505a:	f023 0210 	bic.w	r2, r3, #16
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	699b      	ldr	r3, [r3, #24]
 8005066:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	6a1b      	ldr	r3, [r3, #32]
 800506c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005074:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	031b      	lsls	r3, r3, #12
 800507a:	697a      	ldr	r2, [r7, #20]
 800507c:	4313      	orrs	r3, r2
 800507e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005086:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005088:	68bb      	ldr	r3, [r7, #8]
 800508a:	011b      	lsls	r3, r3, #4
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4313      	orrs	r3, r2
 8005090:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	621a      	str	r2, [r3, #32]
}
 800509e:	bf00      	nop
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80050aa:	b480      	push	{r7}
 80050ac:	b085      	sub	sp, #20
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
 80050b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	689b      	ldr	r3, [r3, #8]
 80050b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80050c2:	683a      	ldr	r2, [r7, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	4313      	orrs	r3, r2
 80050c8:	f043 0307 	orr.w	r3, r3, #7
 80050cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	609a      	str	r2, [r3, #8]
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b087      	sub	sp, #28
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	021a      	lsls	r2, r3, #8
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	431a      	orrs	r2, r3
 8005104:	68bb      	ldr	r3, [r7, #8]
 8005106:	4313      	orrs	r3, r2
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	4313      	orrs	r3, r2
 800510c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	697a      	ldr	r2, [r7, #20]
 8005112:	609a      	str	r2, [r3, #8]
}
 8005114:	bf00      	nop
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005120:	b480      	push	{r7}
 8005122:	b085      	sub	sp, #20
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005130:	2b01      	cmp	r3, #1
 8005132:	d101      	bne.n	8005138 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005134:	2302      	movs	r3, #2
 8005136:	e068      	b.n	800520a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	689b      	ldr	r3, [r3, #8]
 8005156:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a2e      	ldr	r2, [pc, #184]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d004      	beq.n	800516c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a2d      	ldr	r2, [pc, #180]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d108      	bne.n	800517e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005172:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005184:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	4313      	orrs	r3, r2
 800518e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	68fa      	ldr	r2, [r7, #12]
 8005196:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	4a1e      	ldr	r2, [pc, #120]	; (8005218 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800519e:	4293      	cmp	r3, r2
 80051a0:	d01d      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051aa:	d018      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4a1b      	ldr	r2, [pc, #108]	; (8005220 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d013      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a1a      	ldr	r2, [pc, #104]	; (8005224 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d00e      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a18      	ldr	r2, [pc, #96]	; (8005228 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d009      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	4a13      	ldr	r2, [pc, #76]	; (800521c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80051d0:	4293      	cmp	r3, r2
 80051d2:	d004      	beq.n	80051de <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a14      	ldr	r2, [pc, #80]	; (800522c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d10c      	bne.n	80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	68ba      	ldr	r2, [r7, #8]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	68ba      	ldr	r2, [r7, #8]
 80051f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2201      	movs	r2, #1
 80051fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2200      	movs	r2, #0
 8005204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005208:	2300      	movs	r3, #0
}
 800520a:	4618      	mov	r0, r3
 800520c:	3714      	adds	r7, #20
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr
 8005216:	bf00      	nop
 8005218:	40012c00 	.word	0x40012c00
 800521c:	40013400 	.word	0x40013400
 8005220:	40000400 	.word	0x40000400
 8005224:	40000800 	.word	0x40000800
 8005228:	40000c00 	.word	0x40000c00
 800522c:	40014000 	.word	0x40014000

08005230 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005230:	b480      	push	{r7}
 8005232:	b083      	sub	sp, #12
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005238:	bf00      	nop
 800523a:	370c      	adds	r7, #12
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005244:	b480      	push	{r7}
 8005246:	b083      	sub	sp, #12
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005260:	bf00      	nop
 8005262:	370c      	adds	r7, #12
 8005264:	46bd      	mov	sp, r7
 8005266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526a:	4770      	bx	lr

0800526c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b082      	sub	sp, #8
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e042      	b.n	8005304 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005284:	2b00      	cmp	r3, #0
 8005286:	d106      	bne.n	8005296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f003 fb1b 	bl	80088cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2224      	movs	r2, #36	; 0x24
 800529a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f022 0201 	bic.w	r2, r2, #1
 80052ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f000 fc52 	bl	8005b58 <UART_SetConfig>
 80052b4:	4603      	mov	r3, r0
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d101      	bne.n	80052be <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80052ba:	2301      	movs	r3, #1
 80052bc:	e022      	b.n	8005304 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d002      	beq.n	80052cc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80052c6:	6878      	ldr	r0, [r7, #4]
 80052c8:	f000 ff42 	bl	8006150 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685a      	ldr	r2, [r3, #4]
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80052da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	689a      	ldr	r2, [r3, #8]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	681a      	ldr	r2, [r3, #0]
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f042 0201 	orr.w	r2, r2, #1
 80052fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 ffc9 	bl	8006294 <UART_CheckIdleState>
 8005302:	4603      	mov	r3, r0
}
 8005304:	4618      	mov	r0, r3
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b08a      	sub	sp, #40	; 0x28
 8005310:	af02      	add	r7, sp, #8
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	603b      	str	r3, [r7, #0]
 8005318:	4613      	mov	r3, r2
 800531a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005322:	2b20      	cmp	r3, #32
 8005324:	f040 8084 	bne.w	8005430 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d002      	beq.n	8005334 <HAL_UART_Transmit+0x28>
 800532e:	88fb      	ldrh	r3, [r7, #6]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d101      	bne.n	8005338 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e07c      	b.n	8005432 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_UART_Transmit+0x3a>
 8005342:	2302      	movs	r3, #2
 8005344:	e075      	b.n	8005432 <HAL_UART_Transmit+0x126>
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2200      	movs	r2, #0
 8005352:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2221      	movs	r2, #33	; 0x21
 800535a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800535e:	f7fb f937 	bl	80005d0 <HAL_GetTick>
 8005362:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	88fa      	ldrh	r2, [r7, #6]
 8005368:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	88fa      	ldrh	r2, [r7, #6]
 8005370:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800537c:	d108      	bne.n	8005390 <HAL_UART_Transmit+0x84>
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	691b      	ldr	r3, [r3, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d104      	bne.n	8005390 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005386:	2300      	movs	r3, #0
 8005388:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	61bb      	str	r3, [r7, #24]
 800538e:	e003      	b.n	8005398 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005394:	2300      	movs	r3, #0
 8005396:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80053a0:	e02d      	b.n	80053fe <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	9300      	str	r3, [sp, #0]
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2200      	movs	r2, #0
 80053aa:	2180      	movs	r1, #128	; 0x80
 80053ac:	68f8      	ldr	r0, [r7, #12]
 80053ae:	f000 ffbc 	bl	800632a <UART_WaitOnFlagUntilTimeout>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d001      	beq.n	80053bc <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80053b8:	2303      	movs	r3, #3
 80053ba:	e03a      	b.n	8005432 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10b      	bne.n	80053da <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80053c2:	69bb      	ldr	r3, [r7, #24]
 80053c4:	881a      	ldrh	r2, [r3, #0]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053ce:	b292      	uxth	r2, r2
 80053d0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80053d2:	69bb      	ldr	r3, [r7, #24]
 80053d4:	3302      	adds	r3, #2
 80053d6:	61bb      	str	r3, [r7, #24]
 80053d8:	e008      	b.n	80053ec <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	781a      	ldrb	r2, [r3, #0]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	b292      	uxth	r2, r2
 80053e4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80053e6:	69fb      	ldr	r3, [r7, #28]
 80053e8:	3301      	adds	r3, #1
 80053ea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80053f2:	b29b      	uxth	r3, r3
 80053f4:	3b01      	subs	r3, #1
 80053f6:	b29a      	uxth	r2, r3
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005404:	b29b      	uxth	r3, r3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1cb      	bne.n	80053a2 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	9300      	str	r3, [sp, #0]
 800540e:	697b      	ldr	r3, [r7, #20]
 8005410:	2200      	movs	r2, #0
 8005412:	2140      	movs	r1, #64	; 0x40
 8005414:	68f8      	ldr	r0, [r7, #12]
 8005416:	f000 ff88 	bl	800632a <UART_WaitOnFlagUntilTimeout>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d001      	beq.n	8005424 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005420:	2303      	movs	r3, #3
 8005422:	e006      	b.n	8005432 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	2220      	movs	r2, #32
 8005428:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800542c:	2300      	movs	r3, #0
 800542e:	e000      	b.n	8005432 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005430:	2302      	movs	r3, #2
  }
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
	...

0800543c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b08a      	sub	sp, #40	; 0x28
 8005440:	af00      	add	r7, sp, #0
 8005442:	60f8      	str	r0, [r7, #12]
 8005444:	60b9      	str	r1, [r7, #8]
 8005446:	4613      	mov	r3, r2
 8005448:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005450:	2b20      	cmp	r3, #32
 8005452:	d142      	bne.n	80054da <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_UART_Receive_IT+0x24>
 800545a:	88fb      	ldrh	r3, [r7, #6]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d101      	bne.n	8005464 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	e03b      	b.n	80054dc <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800546a:	2b01      	cmp	r3, #1
 800546c:	d101      	bne.n	8005472 <HAL_UART_Receive_IT+0x36>
 800546e:	2302      	movs	r3, #2
 8005470:	e034      	b.n	80054dc <HAL_UART_Receive_IT+0xa0>
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	2200      	movs	r2, #0
 800547e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a17      	ldr	r2, [pc, #92]	; (80054e4 <HAL_UART_Receive_IT+0xa8>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d01f      	beq.n	80054ca <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d018      	beq.n	80054ca <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	e853 3f00 	ldrex	r3, [r3]
 80054a4:	613b      	str	r3, [r7, #16]
   return(result);
 80054a6:	693b      	ldr	r3, [r7, #16]
 80054a8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80054ac:	627b      	str	r3, [r7, #36]	; 0x24
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	461a      	mov	r2, r3
 80054b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b6:	623b      	str	r3, [r7, #32]
 80054b8:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ba:	69f9      	ldr	r1, [r7, #28]
 80054bc:	6a3a      	ldr	r2, [r7, #32]
 80054be:	e841 2300 	strex	r3, r2, [r1]
 80054c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d1e6      	bne.n	8005498 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054ca:	88fb      	ldrh	r3, [r7, #6]
 80054cc:	461a      	mov	r2, r3
 80054ce:	68b9      	ldr	r1, [r7, #8]
 80054d0:	68f8      	ldr	r0, [r7, #12]
 80054d2:	f000 fff3 	bl	80064bc <UART_Start_Receive_IT>
 80054d6:	4603      	mov	r3, r0
 80054d8:	e000      	b.n	80054dc <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80054da:	2302      	movs	r3, #2
  }
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3728      	adds	r7, #40	; 0x28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40008000 	.word	0x40008000

080054e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b0ba      	sub	sp, #232	; 0xe8
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	69db      	ldr	r3, [r3, #28]
 80054f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800550e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005512:	f640 030f 	movw	r3, #2063	; 0x80f
 8005516:	4013      	ands	r3, r2
 8005518:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800551c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005520:	2b00      	cmp	r3, #0
 8005522:	d11b      	bne.n	800555c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005528:	f003 0320 	and.w	r3, r3, #32
 800552c:	2b00      	cmp	r3, #0
 800552e:	d015      	beq.n	800555c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005534:	f003 0320 	and.w	r3, r3, #32
 8005538:	2b00      	cmp	r3, #0
 800553a:	d105      	bne.n	8005548 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800553c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005540:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d009      	beq.n	800555c <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 82d6 	beq.w	8005afe <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	4798      	blx	r3
      }
      return;
 800555a:	e2d0      	b.n	8005afe <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 800555c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 811f 	beq.w	80057a4 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005566:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800556a:	4b8b      	ldr	r3, [pc, #556]	; (8005798 <HAL_UART_IRQHandler+0x2b0>)
 800556c:	4013      	ands	r3, r2
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005572:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005576:	4b89      	ldr	r3, [pc, #548]	; (800579c <HAL_UART_IRQHandler+0x2b4>)
 8005578:	4013      	ands	r3, r2
 800557a:	2b00      	cmp	r3, #0
 800557c:	f000 8112 	beq.w	80057a4 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005580:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	2b00      	cmp	r3, #0
 800558a:	d011      	beq.n	80055b0 <HAL_UART_IRQHandler+0xc8>
 800558c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00b      	beq.n	80055b0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2201      	movs	r2, #1
 800559e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055a6:	f043 0201 	orr.w	r2, r3, #1
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055b4:	f003 0302 	and.w	r3, r3, #2
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d011      	beq.n	80055e0 <HAL_UART_IRQHandler+0xf8>
 80055bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055c0:	f003 0301 	and.w	r3, r3, #1
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	2202      	movs	r2, #2
 80055ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055d6:	f043 0204 	orr.w	r2, r3, #4
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055e4:	f003 0304 	and.w	r3, r3, #4
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d011      	beq.n	8005610 <HAL_UART_IRQHandler+0x128>
 80055ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80055f0:	f003 0301 	and.w	r3, r3, #1
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d00b      	beq.n	8005610 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2204      	movs	r2, #4
 80055fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005606:	f043 0202 	orr.w	r2, r3, #2
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005610:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005614:	f003 0308 	and.w	r3, r3, #8
 8005618:	2b00      	cmp	r3, #0
 800561a:	d017      	beq.n	800564c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800561c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005620:	f003 0320 	and.w	r3, r3, #32
 8005624:	2b00      	cmp	r3, #0
 8005626:	d105      	bne.n	8005634 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005628:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800562c:	4b5a      	ldr	r3, [pc, #360]	; (8005798 <HAL_UART_IRQHandler+0x2b0>)
 800562e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005630:	2b00      	cmp	r3, #0
 8005632:	d00b      	beq.n	800564c <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2208      	movs	r2, #8
 800563a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005642:	f043 0208 	orr.w	r2, r3, #8
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800564c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005650:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005654:	2b00      	cmp	r3, #0
 8005656:	d012      	beq.n	800567e <HAL_UART_IRQHandler+0x196>
 8005658:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800565c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00c      	beq.n	800567e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800566c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005674:	f043 0220 	orr.w	r2, r3, #32
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 823c 	beq.w	8005b02 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800568a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568e:	f003 0320 	and.w	r3, r3, #32
 8005692:	2b00      	cmp	r3, #0
 8005694:	d013      	beq.n	80056be <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005696:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800569a:	f003 0320 	and.w	r3, r3, #32
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d105      	bne.n	80056ae <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80056a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d007      	beq.n	80056be <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d003      	beq.n	80056be <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80056c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	689b      	ldr	r3, [r3, #8]
 80056ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056d2:	2b40      	cmp	r3, #64	; 0x40
 80056d4:	d005      	beq.n	80056e2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80056d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80056da:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d04f      	beq.n	8005782 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f001 f814 	bl	8006710 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056f2:	2b40      	cmp	r3, #64	; 0x40
 80056f4:	d141      	bne.n	800577a <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3308      	adds	r3, #8
 80056fc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005700:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005704:	e853 3f00 	ldrex	r3, [r3]
 8005708:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800570c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005710:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005714:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3308      	adds	r3, #8
 800571e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005722:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005726:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800572e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005732:	e841 2300 	strex	r3, r2, [r1]
 8005736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800573a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d1d9      	bne.n	80056f6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005746:	2b00      	cmp	r3, #0
 8005748:	d013      	beq.n	8005772 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800574e:	4a14      	ldr	r2, [pc, #80]	; (80057a0 <HAL_UART_IRQHandler+0x2b8>)
 8005750:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005756:	4618      	mov	r0, r3
 8005758:	f7fb ff39 	bl	80015ce <HAL_DMA_Abort_IT>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d017      	beq.n	8005792 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800576c:	4610      	mov	r0, r2
 800576e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005770:	e00f      	b.n	8005792 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f9da 	bl	8005b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005778:	e00b      	b.n	8005792 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f000 f9d6 	bl	8005b2c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005780:	e007      	b.n	8005792 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005782:	6878      	ldr	r0, [r7, #4]
 8005784:	f000 f9d2 	bl	8005b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2200      	movs	r2, #0
 800578c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005790:	e1b7      	b.n	8005b02 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005792:	bf00      	nop
    return;
 8005794:	e1b5      	b.n	8005b02 <HAL_UART_IRQHandler+0x61a>
 8005796:	bf00      	nop
 8005798:	10000001 	.word	0x10000001
 800579c:	04000120 	.word	0x04000120
 80057a0:	080067dd 	.word	0x080067dd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	f040 814a 	bne.w	8005a42 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80057ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057b2:	f003 0310 	and.w	r3, r3, #16
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	f000 8143 	beq.w	8005a42 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80057bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057c0:	f003 0310 	and.w	r3, r3, #16
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	f000 813c 	beq.w	8005a42 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2210      	movs	r2, #16
 80057d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057dc:	2b40      	cmp	r3, #64	; 0x40
 80057de:	f040 80b5 	bne.w	800594c <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80057ee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 8187 	beq.w	8005b06 <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005802:	429a      	cmp	r2, r3
 8005804:	f080 817f 	bcs.w	8005b06 <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800580e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b00      	cmp	r3, #0
 8005820:	f040 8086 	bne.w	8005930 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005830:	e853 3f00 	ldrex	r3, [r3]
 8005834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005838:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800583c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005840:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	461a      	mov	r2, r3
 800584a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800584e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005852:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005856:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800585a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800585e:	e841 2300 	strex	r3, r2, [r1]
 8005862:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005866:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1da      	bne.n	8005824 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3308      	adds	r3, #8
 8005874:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800587e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005880:	f023 0301 	bic.w	r3, r3, #1
 8005884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3308      	adds	r3, #8
 800588e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005892:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005896:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005898:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800589a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800589e:	e841 2300 	strex	r3, r2, [r1]
 80058a2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d1e1      	bne.n	800586e <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	3308      	adds	r3, #8
 80058b0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058b2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058b4:	e853 3f00 	ldrex	r3, [r3]
 80058b8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3308      	adds	r3, #8
 80058ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058ce:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058d0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058d2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058d4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058d6:	e841 2300 	strex	r3, r2, [r1]
 80058da:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1e3      	bne.n	80058aa <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2220      	movs	r2, #32
 80058e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058f8:	e853 3f00 	ldrex	r3, [r3]
 80058fc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80058fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005900:	f023 0310 	bic.w	r3, r3, #16
 8005904:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	461a      	mov	r2, r3
 800590e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005912:	65bb      	str	r3, [r7, #88]	; 0x58
 8005914:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005916:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005918:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800591a:	e841 2300 	strex	r3, r2, [r1]
 800591e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005920:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1e4      	bne.n	80058f0 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800592a:	4618      	mov	r0, r3
 800592c:	f7fb fdf3 	bl	8001516 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800593c:	b29b      	uxth	r3, r3
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	b29b      	uxth	r3, r3
 8005942:	4619      	mov	r1, r3
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f000 f8fb 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800594a:	e0dc      	b.n	8005b06 <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005958:	b29b      	uxth	r3, r3
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005966:	b29b      	uxth	r3, r3
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 80ce 	beq.w	8005b0a <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 800596e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005972:	2b00      	cmp	r3, #0
 8005974:	f000 80c9 	beq.w	8005b0a <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800597e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005980:	e853 3f00 	ldrex	r3, [r3]
 8005984:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005986:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005988:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800598c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	461a      	mov	r2, r3
 8005996:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800599a:	647b      	str	r3, [r7, #68]	; 0x44
 800599c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800599e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059a2:	e841 2300 	strex	r3, r2, [r1]
 80059a6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d1e4      	bne.n	8005978 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	3308      	adds	r3, #8
 80059b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b8:	e853 3f00 	ldrex	r3, [r3]
 80059bc:	623b      	str	r3, [r7, #32]
   return(result);
 80059be:	6a3b      	ldr	r3, [r7, #32]
 80059c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80059c4:	f023 0301 	bic.w	r3, r3, #1
 80059c8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	3308      	adds	r3, #8
 80059d2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059d6:	633a      	str	r2, [r7, #48]	; 0x30
 80059d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059de:	e841 2300 	strex	r3, r2, [r1]
 80059e2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1e1      	bne.n	80059ae <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2220      	movs	r2, #32
 80059ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	2200      	movs	r2, #0
 80059f6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	e853 3f00 	ldrex	r3, [r3]
 8005a0a:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f023 0310 	bic.w	r3, r3, #16
 8005a12:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005a20:	61fb      	str	r3, [r7, #28]
 8005a22:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a24:	69b9      	ldr	r1, [r7, #24]
 8005a26:	69fa      	ldr	r2, [r7, #28]
 8005a28:	e841 2300 	strex	r3, r2, [r1]
 8005a2c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d1e4      	bne.n	80059fe <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a38:	4619      	mov	r1, r3
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f000 f880 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a40:	e063      	b.n	8005b0a <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005a42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d00e      	beq.n	8005a6c <HAL_UART_IRQHandler+0x584>
 8005a4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d008      	beq.n	8005a6c <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005a62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005a64:	6878      	ldr	r0, [r7, #4]
 8005a66:	f001 fb5f 	bl	8007128 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005a6a:	e051      	b.n	8005b10 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d014      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005a78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d105      	bne.n	8005a90 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a88:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d008      	beq.n	8005aa2 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d03a      	beq.n	8005b0e <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	4798      	blx	r3
    }
    return;
 8005aa0:	e035      	b.n	8005b0e <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d009      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x5da>
 8005aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ab2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d003      	beq.n	8005ac2 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 fea4 	bl	8006808 <UART_EndTransmit_IT>
    return;
 8005ac0:	e026      	b.n	8005b10 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d009      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x5fa>
 8005ace:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ad2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d003      	beq.n	8005ae2 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f001 fb38 	bl	8007150 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ae0:	e016      	b.n	8005b10 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005ae2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ae6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d010      	beq.n	8005b10 <HAL_UART_IRQHandler+0x628>
 8005aee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	da0c      	bge.n	8005b10 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005af6:	6878      	ldr	r0, [r7, #4]
 8005af8:	f001 fb20 	bl	800713c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005afc:	e008      	b.n	8005b10 <HAL_UART_IRQHandler+0x628>
      return;
 8005afe:	bf00      	nop
 8005b00:	e006      	b.n	8005b10 <HAL_UART_IRQHandler+0x628>
    return;
 8005b02:	bf00      	nop
 8005b04:	e004      	b.n	8005b10 <HAL_UART_IRQHandler+0x628>
      return;
 8005b06:	bf00      	nop
 8005b08:	e002      	b.n	8005b10 <HAL_UART_IRQHandler+0x628>
      return;
 8005b0a:	bf00      	nop
 8005b0c:	e000      	b.n	8005b10 <HAL_UART_IRQHandler+0x628>
    return;
 8005b0e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005b10:	37e8      	adds	r7, #232	; 0xe8
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}
 8005b16:	bf00      	nop

08005b18 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b083      	sub	sp, #12
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005b20:	bf00      	nop
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005b34:	bf00      	nop
 8005b36:	370c      	adds	r7, #12
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b083      	sub	sp, #12
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	6078      	str	r0, [r7, #4]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b5c:	b08c      	sub	sp, #48	; 0x30
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005b62:	2300      	movs	r3, #0
 8005b64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	689a      	ldr	r2, [r3, #8]
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	431a      	orrs	r2, r3
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	69db      	ldr	r3, [r3, #28]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	681a      	ldr	r2, [r3, #0]
 8005b86:	4baa      	ldr	r3, [pc, #680]	; (8005e30 <UART_SetConfig+0x2d8>)
 8005b88:	4013      	ands	r3, r2
 8005b8a:	697a      	ldr	r2, [r7, #20]
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b90:	430b      	orrs	r3, r1
 8005b92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	685b      	ldr	r3, [r3, #4]
 8005b9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	68da      	ldr	r2, [r3, #12]
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	430a      	orrs	r2, r1
 8005ba8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	4a9f      	ldr	r2, [pc, #636]	; (8005e34 <UART_SetConfig+0x2dc>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d004      	beq.n	8005bc4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	6a1b      	ldr	r3, [r3, #32]
 8005bbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005bc4:	697b      	ldr	r3, [r7, #20]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005bce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	6812      	ldr	r2, [r2, #0]
 8005bd6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bd8:	430b      	orrs	r3, r1
 8005bda:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be2:	f023 010f 	bic.w	r1, r3, #15
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	430a      	orrs	r2, r1
 8005bf0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a90      	ldr	r2, [pc, #576]	; (8005e38 <UART_SetConfig+0x2e0>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d125      	bne.n	8005c48 <UART_SetConfig+0xf0>
 8005bfc:	4b8f      	ldr	r3, [pc, #572]	; (8005e3c <UART_SetConfig+0x2e4>)
 8005bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c02:	f003 0303 	and.w	r3, r3, #3
 8005c06:	2b03      	cmp	r3, #3
 8005c08:	d81a      	bhi.n	8005c40 <UART_SetConfig+0xe8>
 8005c0a:	a201      	add	r2, pc, #4	; (adr r2, 8005c10 <UART_SetConfig+0xb8>)
 8005c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c10:	08005c21 	.word	0x08005c21
 8005c14:	08005c31 	.word	0x08005c31
 8005c18:	08005c29 	.word	0x08005c29
 8005c1c:	08005c39 	.word	0x08005c39
 8005c20:	2301      	movs	r3, #1
 8005c22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c26:	e116      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005c28:	2302      	movs	r3, #2
 8005c2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c2e:	e112      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005c30:	2304      	movs	r3, #4
 8005c32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c36:	e10e      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005c38:	2308      	movs	r3, #8
 8005c3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c3e:	e10a      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005c40:	2310      	movs	r3, #16
 8005c42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005c46:	e106      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a7c      	ldr	r2, [pc, #496]	; (8005e40 <UART_SetConfig+0x2e8>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d138      	bne.n	8005cc4 <UART_SetConfig+0x16c>
 8005c52:	4b7a      	ldr	r3, [pc, #488]	; (8005e3c <UART_SetConfig+0x2e4>)
 8005c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c58:	f003 030c 	and.w	r3, r3, #12
 8005c5c:	2b0c      	cmp	r3, #12
 8005c5e:	d82d      	bhi.n	8005cbc <UART_SetConfig+0x164>
 8005c60:	a201      	add	r2, pc, #4	; (adr r2, 8005c68 <UART_SetConfig+0x110>)
 8005c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c66:	bf00      	nop
 8005c68:	08005c9d 	.word	0x08005c9d
 8005c6c:	08005cbd 	.word	0x08005cbd
 8005c70:	08005cbd 	.word	0x08005cbd
 8005c74:	08005cbd 	.word	0x08005cbd
 8005c78:	08005cad 	.word	0x08005cad
 8005c7c:	08005cbd 	.word	0x08005cbd
 8005c80:	08005cbd 	.word	0x08005cbd
 8005c84:	08005cbd 	.word	0x08005cbd
 8005c88:	08005ca5 	.word	0x08005ca5
 8005c8c:	08005cbd 	.word	0x08005cbd
 8005c90:	08005cbd 	.word	0x08005cbd
 8005c94:	08005cbd 	.word	0x08005cbd
 8005c98:	08005cb5 	.word	0x08005cb5
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ca2:	e0d8      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005caa:	e0d4      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005cac:	2304      	movs	r3, #4
 8005cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cb2:	e0d0      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005cb4:	2308      	movs	r3, #8
 8005cb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cba:	e0cc      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005cbc:	2310      	movs	r3, #16
 8005cbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cc2:	e0c8      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a5e      	ldr	r2, [pc, #376]	; (8005e44 <UART_SetConfig+0x2ec>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d125      	bne.n	8005d1a <UART_SetConfig+0x1c2>
 8005cce:	4b5b      	ldr	r3, [pc, #364]	; (8005e3c <UART_SetConfig+0x2e4>)
 8005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005cd8:	2b30      	cmp	r3, #48	; 0x30
 8005cda:	d016      	beq.n	8005d0a <UART_SetConfig+0x1b2>
 8005cdc:	2b30      	cmp	r3, #48	; 0x30
 8005cde:	d818      	bhi.n	8005d12 <UART_SetConfig+0x1ba>
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d00a      	beq.n	8005cfa <UART_SetConfig+0x1a2>
 8005ce4:	2b20      	cmp	r3, #32
 8005ce6:	d814      	bhi.n	8005d12 <UART_SetConfig+0x1ba>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d002      	beq.n	8005cf2 <UART_SetConfig+0x19a>
 8005cec:	2b10      	cmp	r3, #16
 8005cee:	d008      	beq.n	8005d02 <UART_SetConfig+0x1aa>
 8005cf0:	e00f      	b.n	8005d12 <UART_SetConfig+0x1ba>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005cf8:	e0ad      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005cfa:	2302      	movs	r3, #2
 8005cfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d00:	e0a9      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005d02:	2304      	movs	r3, #4
 8005d04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d08:	e0a5      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005d0a:	2308      	movs	r3, #8
 8005d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d10:	e0a1      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005d12:	2310      	movs	r3, #16
 8005d14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d18:	e09d      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005d1a:	697b      	ldr	r3, [r7, #20]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a4a      	ldr	r2, [pc, #296]	; (8005e48 <UART_SetConfig+0x2f0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d125      	bne.n	8005d70 <UART_SetConfig+0x218>
 8005d24:	4b45      	ldr	r3, [pc, #276]	; (8005e3c <UART_SetConfig+0x2e4>)
 8005d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005d2e:	2bc0      	cmp	r3, #192	; 0xc0
 8005d30:	d016      	beq.n	8005d60 <UART_SetConfig+0x208>
 8005d32:	2bc0      	cmp	r3, #192	; 0xc0
 8005d34:	d818      	bhi.n	8005d68 <UART_SetConfig+0x210>
 8005d36:	2b80      	cmp	r3, #128	; 0x80
 8005d38:	d00a      	beq.n	8005d50 <UART_SetConfig+0x1f8>
 8005d3a:	2b80      	cmp	r3, #128	; 0x80
 8005d3c:	d814      	bhi.n	8005d68 <UART_SetConfig+0x210>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d002      	beq.n	8005d48 <UART_SetConfig+0x1f0>
 8005d42:	2b40      	cmp	r3, #64	; 0x40
 8005d44:	d008      	beq.n	8005d58 <UART_SetConfig+0x200>
 8005d46:	e00f      	b.n	8005d68 <UART_SetConfig+0x210>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d4e:	e082      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005d50:	2302      	movs	r3, #2
 8005d52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d56:	e07e      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005d58:	2304      	movs	r3, #4
 8005d5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d5e:	e07a      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005d60:	2308      	movs	r3, #8
 8005d62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d66:	e076      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005d68:	2310      	movs	r3, #16
 8005d6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005d6e:	e072      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a35      	ldr	r2, [pc, #212]	; (8005e4c <UART_SetConfig+0x2f4>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d12a      	bne.n	8005dd0 <UART_SetConfig+0x278>
 8005d7a:	4b30      	ldr	r3, [pc, #192]	; (8005e3c <UART_SetConfig+0x2e4>)
 8005d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005d84:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d88:	d01a      	beq.n	8005dc0 <UART_SetConfig+0x268>
 8005d8a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005d8e:	d81b      	bhi.n	8005dc8 <UART_SetConfig+0x270>
 8005d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d94:	d00c      	beq.n	8005db0 <UART_SetConfig+0x258>
 8005d96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005d9a:	d815      	bhi.n	8005dc8 <UART_SetConfig+0x270>
 8005d9c:	2b00      	cmp	r3, #0
 8005d9e:	d003      	beq.n	8005da8 <UART_SetConfig+0x250>
 8005da0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005da4:	d008      	beq.n	8005db8 <UART_SetConfig+0x260>
 8005da6:	e00f      	b.n	8005dc8 <UART_SetConfig+0x270>
 8005da8:	2300      	movs	r3, #0
 8005daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dae:	e052      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005db0:	2302      	movs	r3, #2
 8005db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005db6:	e04e      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005db8:	2304      	movs	r3, #4
 8005dba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dbe:	e04a      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005dc0:	2308      	movs	r3, #8
 8005dc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dc6:	e046      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005dc8:	2310      	movs	r3, #16
 8005dca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005dce:	e042      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a17      	ldr	r2, [pc, #92]	; (8005e34 <UART_SetConfig+0x2dc>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d13a      	bne.n	8005e50 <UART_SetConfig+0x2f8>
 8005dda:	4b18      	ldr	r3, [pc, #96]	; (8005e3c <UART_SetConfig+0x2e4>)
 8005ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005de4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005de8:	d01a      	beq.n	8005e20 <UART_SetConfig+0x2c8>
 8005dea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005dee:	d81b      	bhi.n	8005e28 <UART_SetConfig+0x2d0>
 8005df0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005df4:	d00c      	beq.n	8005e10 <UART_SetConfig+0x2b8>
 8005df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005dfa:	d815      	bhi.n	8005e28 <UART_SetConfig+0x2d0>
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <UART_SetConfig+0x2b0>
 8005e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e04:	d008      	beq.n	8005e18 <UART_SetConfig+0x2c0>
 8005e06:	e00f      	b.n	8005e28 <UART_SetConfig+0x2d0>
 8005e08:	2300      	movs	r3, #0
 8005e0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e0e:	e022      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005e10:	2302      	movs	r3, #2
 8005e12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e16:	e01e      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005e18:	2304      	movs	r3, #4
 8005e1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e1e:	e01a      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005e20:	2308      	movs	r3, #8
 8005e22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e26:	e016      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005e28:	2310      	movs	r3, #16
 8005e2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e2e:	e012      	b.n	8005e56 <UART_SetConfig+0x2fe>
 8005e30:	cfff69f3 	.word	0xcfff69f3
 8005e34:	40008000 	.word	0x40008000
 8005e38:	40013800 	.word	0x40013800
 8005e3c:	40021000 	.word	0x40021000
 8005e40:	40004400 	.word	0x40004400
 8005e44:	40004800 	.word	0x40004800
 8005e48:	40004c00 	.word	0x40004c00
 8005e4c:	40005000 	.word	0x40005000
 8005e50:	2310      	movs	r3, #16
 8005e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4aae      	ldr	r2, [pc, #696]	; (8006114 <UART_SetConfig+0x5bc>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	f040 8097 	bne.w	8005f90 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005e62:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005e66:	2b08      	cmp	r3, #8
 8005e68:	d823      	bhi.n	8005eb2 <UART_SetConfig+0x35a>
 8005e6a:	a201      	add	r2, pc, #4	; (adr r2, 8005e70 <UART_SetConfig+0x318>)
 8005e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e70:	08005e95 	.word	0x08005e95
 8005e74:	08005eb3 	.word	0x08005eb3
 8005e78:	08005e9d 	.word	0x08005e9d
 8005e7c:	08005eb3 	.word	0x08005eb3
 8005e80:	08005ea3 	.word	0x08005ea3
 8005e84:	08005eb3 	.word	0x08005eb3
 8005e88:	08005eb3 	.word	0x08005eb3
 8005e8c:	08005eb3 	.word	0x08005eb3
 8005e90:	08005eab 	.word	0x08005eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e94:	f7fd ff2a 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8005e98:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005e9a:	e010      	b.n	8005ebe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e9c:	4b9e      	ldr	r3, [pc, #632]	; (8006118 <UART_SetConfig+0x5c0>)
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ea0:	e00d      	b.n	8005ebe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ea2:	f7fd fe8b 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8005ea6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005ea8:	e009      	b.n	8005ebe <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eaa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005eae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005eb0:	e005      	b.n	8005ebe <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ebc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 8130 	beq.w	8006126 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005ec6:	697b      	ldr	r3, [r7, #20]
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eca:	4a94      	ldr	r2, [pc, #592]	; (800611c <UART_SetConfig+0x5c4>)
 8005ecc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ed8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	005b      	lsls	r3, r3, #1
 8005ee2:	4413      	add	r3, r2
 8005ee4:	69ba      	ldr	r2, [r7, #24]
 8005ee6:	429a      	cmp	r2, r3
 8005ee8:	d305      	bcc.n	8005ef6 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005ef0:	69ba      	ldr	r2, [r7, #24]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d903      	bls.n	8005efe <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005efc:	e113      	b.n	8006126 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	2200      	movs	r2, #0
 8005f02:	60bb      	str	r3, [r7, #8]
 8005f04:	60fa      	str	r2, [r7, #12]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	4a84      	ldr	r2, [pc, #528]	; (800611c <UART_SetConfig+0x5c4>)
 8005f0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	2200      	movs	r2, #0
 8005f14:	603b      	str	r3, [r7, #0]
 8005f16:	607a      	str	r2, [r7, #4]
 8005f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005f20:	f7fa f96c 	bl	80001fc <__aeabi_uldivmod>
 8005f24:	4602      	mov	r2, r0
 8005f26:	460b      	mov	r3, r1
 8005f28:	4610      	mov	r0, r2
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	f04f 0200 	mov.w	r2, #0
 8005f30:	f04f 0300 	mov.w	r3, #0
 8005f34:	020b      	lsls	r3, r1, #8
 8005f36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005f3a:	0202      	lsls	r2, r0, #8
 8005f3c:	6979      	ldr	r1, [r7, #20]
 8005f3e:	6849      	ldr	r1, [r1, #4]
 8005f40:	0849      	lsrs	r1, r1, #1
 8005f42:	2000      	movs	r0, #0
 8005f44:	460c      	mov	r4, r1
 8005f46:	4605      	mov	r5, r0
 8005f48:	eb12 0804 	adds.w	r8, r2, r4
 8005f4c:	eb43 0905 	adc.w	r9, r3, r5
 8005f50:	697b      	ldr	r3, [r7, #20]
 8005f52:	685b      	ldr	r3, [r3, #4]
 8005f54:	2200      	movs	r2, #0
 8005f56:	469a      	mov	sl, r3
 8005f58:	4693      	mov	fp, r2
 8005f5a:	4652      	mov	r2, sl
 8005f5c:	465b      	mov	r3, fp
 8005f5e:	4640      	mov	r0, r8
 8005f60:	4649      	mov	r1, r9
 8005f62:	f7fa f94b 	bl	80001fc <__aeabi_uldivmod>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f74:	d308      	bcc.n	8005f88 <UART_SetConfig+0x430>
 8005f76:	6a3b      	ldr	r3, [r7, #32]
 8005f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f7c:	d204      	bcs.n	8005f88 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6a3a      	ldr	r2, [r7, #32]
 8005f84:	60da      	str	r2, [r3, #12]
 8005f86:	e0ce      	b.n	8006126 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005f8e:	e0ca      	b.n	8006126 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f98:	d166      	bne.n	8006068 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8005f9a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005f9e:	2b08      	cmp	r3, #8
 8005fa0:	d827      	bhi.n	8005ff2 <UART_SetConfig+0x49a>
 8005fa2:	a201      	add	r2, pc, #4	; (adr r2, 8005fa8 <UART_SetConfig+0x450>)
 8005fa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fa8:	08005fcd 	.word	0x08005fcd
 8005fac:	08005fd5 	.word	0x08005fd5
 8005fb0:	08005fdd 	.word	0x08005fdd
 8005fb4:	08005ff3 	.word	0x08005ff3
 8005fb8:	08005fe3 	.word	0x08005fe3
 8005fbc:	08005ff3 	.word	0x08005ff3
 8005fc0:	08005ff3 	.word	0x08005ff3
 8005fc4:	08005ff3 	.word	0x08005ff3
 8005fc8:	08005feb 	.word	0x08005feb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005fcc:	f7fd fe8e 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 8005fd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fd2:	e014      	b.n	8005ffe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005fd4:	f7fd fea0 	bl	8003d18 <HAL_RCC_GetPCLK2Freq>
 8005fd8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fda:	e010      	b.n	8005ffe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005fdc:	4b4e      	ldr	r3, [pc, #312]	; (8006118 <UART_SetConfig+0x5c0>)
 8005fde:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005fe0:	e00d      	b.n	8005ffe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005fe2:	f7fd fdeb 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 8005fe6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005fe8:	e009      	b.n	8005ffe <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005fea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8005ff0:	e005      	b.n	8005ffe <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005ffc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 8090 	beq.w	8006126 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006006:	697b      	ldr	r3, [r7, #20]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	4a44      	ldr	r2, [pc, #272]	; (800611c <UART_SetConfig+0x5c4>)
 800600c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006010:	461a      	mov	r2, r3
 8006012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006014:	fbb3 f3f2 	udiv	r3, r3, r2
 8006018:	005a      	lsls	r2, r3, #1
 800601a:	697b      	ldr	r3, [r7, #20]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	085b      	lsrs	r3, r3, #1
 8006020:	441a      	add	r2, r3
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	fbb2 f3f3 	udiv	r3, r2, r3
 800602a:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800602c:	6a3b      	ldr	r3, [r7, #32]
 800602e:	2b0f      	cmp	r3, #15
 8006030:	d916      	bls.n	8006060 <UART_SetConfig+0x508>
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006038:	d212      	bcs.n	8006060 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800603a:	6a3b      	ldr	r3, [r7, #32]
 800603c:	b29b      	uxth	r3, r3
 800603e:	f023 030f 	bic.w	r3, r3, #15
 8006042:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006044:	6a3b      	ldr	r3, [r7, #32]
 8006046:	085b      	lsrs	r3, r3, #1
 8006048:	b29b      	uxth	r3, r3
 800604a:	f003 0307 	and.w	r3, r3, #7
 800604e:	b29a      	uxth	r2, r3
 8006050:	8bfb      	ldrh	r3, [r7, #30]
 8006052:	4313      	orrs	r3, r2
 8006054:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	8bfa      	ldrh	r2, [r7, #30]
 800605c:	60da      	str	r2, [r3, #12]
 800605e:	e062      	b.n	8006126 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006060:	2301      	movs	r3, #1
 8006062:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006066:	e05e      	b.n	8006126 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006068:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800606c:	2b08      	cmp	r3, #8
 800606e:	d828      	bhi.n	80060c2 <UART_SetConfig+0x56a>
 8006070:	a201      	add	r2, pc, #4	; (adr r2, 8006078 <UART_SetConfig+0x520>)
 8006072:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006076:	bf00      	nop
 8006078:	0800609d 	.word	0x0800609d
 800607c:	080060a5 	.word	0x080060a5
 8006080:	080060ad 	.word	0x080060ad
 8006084:	080060c3 	.word	0x080060c3
 8006088:	080060b3 	.word	0x080060b3
 800608c:	080060c3 	.word	0x080060c3
 8006090:	080060c3 	.word	0x080060c3
 8006094:	080060c3 	.word	0x080060c3
 8006098:	080060bb 	.word	0x080060bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800609c:	f7fd fe26 	bl	8003cec <HAL_RCC_GetPCLK1Freq>
 80060a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060a2:	e014      	b.n	80060ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060a4:	f7fd fe38 	bl	8003d18 <HAL_RCC_GetPCLK2Freq>
 80060a8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060aa:	e010      	b.n	80060ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ac:	4b1a      	ldr	r3, [pc, #104]	; (8006118 <UART_SetConfig+0x5c0>)
 80060ae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060b0:	e00d      	b.n	80060ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060b2:	f7fd fd83 	bl	8003bbc <HAL_RCC_GetSysClockFreq>
 80060b6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80060b8:	e009      	b.n	80060ce <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060be:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80060c0:	e005      	b.n	80060ce <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80060c2:	2300      	movs	r3, #0
 80060c4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060cc:	bf00      	nop
    }

    if (pclk != 0U)
 80060ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d028      	beq.n	8006126 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d8:	4a10      	ldr	r2, [pc, #64]	; (800611c <UART_SetConfig+0x5c4>)
 80060da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060de:	461a      	mov	r2, r3
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	fbb3 f2f2 	udiv	r2, r3, r2
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	085b      	lsrs	r3, r3, #1
 80060ec:	441a      	add	r2, r3
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80060f6:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80060f8:	6a3b      	ldr	r3, [r7, #32]
 80060fa:	2b0f      	cmp	r3, #15
 80060fc:	d910      	bls.n	8006120 <UART_SetConfig+0x5c8>
 80060fe:	6a3b      	ldr	r3, [r7, #32]
 8006100:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006104:	d20c      	bcs.n	8006120 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	b29a      	uxth	r2, r3
 800610a:	697b      	ldr	r3, [r7, #20]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	60da      	str	r2, [r3, #12]
 8006110:	e009      	b.n	8006126 <UART_SetConfig+0x5ce>
 8006112:	bf00      	nop
 8006114:	40008000 	.word	0x40008000
 8006118:	00f42400 	.word	0x00f42400
 800611c:	08008bd8 	.word	0x08008bd8
      }
      else
      {
        ret = HAL_ERROR;
 8006120:	2301      	movs	r3, #1
 8006122:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2201      	movs	r2, #1
 800612a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	2201      	movs	r2, #1
 8006132:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006136:	697b      	ldr	r3, [r7, #20]
 8006138:	2200      	movs	r2, #0
 800613a:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800613c:	697b      	ldr	r3, [r7, #20]
 800613e:	2200      	movs	r2, #0
 8006140:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006142:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006146:	4618      	mov	r0, r3
 8006148:	3730      	adds	r7, #48	; 0x30
 800614a:	46bd      	mov	sp, r7
 800614c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006150 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615c:	f003 0301 	and.w	r3, r3, #1
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800617e:	f003 0302 	and.w	r3, r3, #2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a0:	f003 0304 	and.w	r3, r3, #4
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	430a      	orrs	r2, r1
 80061bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061c2:	f003 0308 	and.w	r3, r3, #8
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	430a      	orrs	r2, r1
 80061de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061e4:	f003 0310 	and.w	r3, r3, #16
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	689b      	ldr	r3, [r3, #8]
 80061f2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	430a      	orrs	r2, r1
 8006200:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006206:	f003 0320 	and.w	r3, r3, #32
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	430a      	orrs	r2, r1
 8006222:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006228:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800622c:	2b00      	cmp	r3, #0
 800622e:	d01a      	beq.n	8006266 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	430a      	orrs	r2, r1
 8006244:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800624a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800624e:	d10a      	bne.n	8006266 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00a      	beq.n	8006288 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	430a      	orrs	r2, r1
 8006286:	605a      	str	r2, [r3, #4]
  }
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b086      	sub	sp, #24
 8006298:	af02      	add	r7, sp, #8
 800629a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062a4:	f7fa f994 	bl	80005d0 <HAL_GetTick>
 80062a8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f003 0308 	and.w	r3, r3, #8
 80062b4:	2b08      	cmp	r3, #8
 80062b6:	d10e      	bne.n	80062d6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 f82f 	bl	800632a <UART_WaitOnFlagUntilTimeout>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d001      	beq.n	80062d6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062d2:	2303      	movs	r3, #3
 80062d4:	e025      	b.n	8006322 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f003 0304 	and.w	r3, r3, #4
 80062e0:	2b04      	cmp	r3, #4
 80062e2:	d10e      	bne.n	8006302 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80062e8:	9300      	str	r3, [sp, #0]
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	2200      	movs	r2, #0
 80062ee:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f000 f819 	bl	800632a <UART_WaitOnFlagUntilTimeout>
 80062f8:	4603      	mov	r3, r0
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d001      	beq.n	8006302 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80062fe:	2303      	movs	r3, #3
 8006300:	e00f      	b.n	8006322 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2220      	movs	r2, #32
 8006306:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2220      	movs	r2, #32
 800630e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006320:	2300      	movs	r3, #0
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}

0800632a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800632a:	b580      	push	{r7, lr}
 800632c:	b09c      	sub	sp, #112	; 0x70
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	603b      	str	r3, [r7, #0]
 8006336:	4613      	mov	r3, r2
 8006338:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800633a:	e0a9      	b.n	8006490 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800633c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800633e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006342:	f000 80a5 	beq.w	8006490 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006346:	f7fa f943 	bl	80005d0 <HAL_GetTick>
 800634a:	4602      	mov	r2, r0
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	1ad3      	subs	r3, r2, r3
 8006350:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006352:	429a      	cmp	r2, r3
 8006354:	d302      	bcc.n	800635c <UART_WaitOnFlagUntilTimeout+0x32>
 8006356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006358:	2b00      	cmp	r3, #0
 800635a:	d140      	bne.n	80063de <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006362:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006364:	e853 3f00 	ldrex	r3, [r3]
 8006368:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800636a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800636c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006370:	667b      	str	r3, [r7, #100]	; 0x64
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	461a      	mov	r2, r3
 8006378:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800637a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800637c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800637e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006380:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006382:	e841 2300 	strex	r3, r2, [r1]
 8006386:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006388:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800638a:	2b00      	cmp	r3, #0
 800638c:	d1e6      	bne.n	800635c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	3308      	adds	r3, #8
 8006394:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006396:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006398:	e853 3f00 	ldrex	r3, [r3]
 800639c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800639e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	663b      	str	r3, [r7, #96]	; 0x60
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	3308      	adds	r3, #8
 80063ac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80063ae:	64ba      	str	r2, [r7, #72]	; 0x48
 80063b0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80063b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80063b6:	e841 2300 	strex	r3, r2, [r1]
 80063ba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80063bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1e5      	bne.n	800638e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2220      	movs	r2, #32
 80063c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	2220      	movs	r2, #32
 80063ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	2200      	movs	r2, #0
 80063d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80063da:	2303      	movs	r3, #3
 80063dc:	e069      	b.n	80064b2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f003 0304 	and.w	r3, r3, #4
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d051      	beq.n	8006490 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	69db      	ldr	r3, [r3, #28]
 80063f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063fa:	d149      	bne.n	8006490 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006404:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800640c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800640e:	e853 3f00 	ldrex	r3, [r3]
 8006412:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006416:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800641a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006424:	637b      	str	r3, [r7, #52]	; 0x34
 8006426:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006428:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800642a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800642c:	e841 2300 	strex	r3, r2, [r1]
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006434:	2b00      	cmp	r3, #0
 8006436:	d1e6      	bne.n	8006406 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	3308      	adds	r3, #8
 800643e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	e853 3f00 	ldrex	r3, [r3]
 8006446:	613b      	str	r3, [r7, #16]
   return(result);
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	f023 0301 	bic.w	r3, r3, #1
 800644e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	3308      	adds	r3, #8
 8006456:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006458:	623a      	str	r2, [r7, #32]
 800645a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645c:	69f9      	ldr	r1, [r7, #28]
 800645e:	6a3a      	ldr	r2, [r7, #32]
 8006460:	e841 2300 	strex	r3, r2, [r1]
 8006464:	61bb      	str	r3, [r7, #24]
   return(result);
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1e5      	bne.n	8006438 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2220      	movs	r2, #32
 8006470:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2220      	movs	r2, #32
 8006478:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2220      	movs	r2, #32
 8006480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	2200      	movs	r2, #0
 8006488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800648c:	2303      	movs	r3, #3
 800648e:	e010      	b.n	80064b2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	69da      	ldr	r2, [r3, #28]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	4013      	ands	r3, r2
 800649a:	68ba      	ldr	r2, [r7, #8]
 800649c:	429a      	cmp	r2, r3
 800649e:	bf0c      	ite	eq
 80064a0:	2301      	moveq	r3, #1
 80064a2:	2300      	movne	r3, #0
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	461a      	mov	r2, r3
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	429a      	cmp	r2, r3
 80064ac:	f43f af46 	beq.w	800633c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064b0:	2300      	movs	r3, #0
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3770      	adds	r7, #112	; 0x70
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd80      	pop	{r7, pc}
	...

080064bc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064bc:	b480      	push	{r7}
 80064be:	b0a3      	sub	sp, #140	; 0x8c
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	4613      	mov	r3, r2
 80064c8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	88fa      	ldrh	r2, [r7, #6]
 80064d4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	689b      	ldr	r3, [r3, #8]
 80064ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064ee:	d10e      	bne.n	800650e <UART_Start_Receive_IT+0x52>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	691b      	ldr	r3, [r3, #16]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d105      	bne.n	8006504 <UART_Start_Receive_IT+0x48>
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f240 12ff 	movw	r2, #511	; 0x1ff
 80064fe:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006502:	e02d      	b.n	8006560 <UART_Start_Receive_IT+0xa4>
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	22ff      	movs	r2, #255	; 0xff
 8006508:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800650c:	e028      	b.n	8006560 <UART_Start_Receive_IT+0xa4>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	689b      	ldr	r3, [r3, #8]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d10d      	bne.n	8006532 <UART_Start_Receive_IT+0x76>
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d104      	bne.n	8006528 <UART_Start_Receive_IT+0x6c>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	22ff      	movs	r2, #255	; 0xff
 8006522:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006526:	e01b      	b.n	8006560 <UART_Start_Receive_IT+0xa4>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	227f      	movs	r2, #127	; 0x7f
 800652c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006530:	e016      	b.n	8006560 <UART_Start_Receive_IT+0xa4>
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800653a:	d10d      	bne.n	8006558 <UART_Start_Receive_IT+0x9c>
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	691b      	ldr	r3, [r3, #16]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d104      	bne.n	800654e <UART_Start_Receive_IT+0x92>
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	227f      	movs	r2, #127	; 0x7f
 8006548:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800654c:	e008      	b.n	8006560 <UART_Start_Receive_IT+0xa4>
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	223f      	movs	r2, #63	; 0x3f
 8006552:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006556:	e003      	b.n	8006560 <UART_Start_Receive_IT+0xa4>
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2200      	movs	r2, #0
 8006564:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2222      	movs	r2, #34	; 0x22
 800656c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	3308      	adds	r3, #8
 8006576:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800657a:	e853 3f00 	ldrex	r3, [r3]
 800657e:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006580:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006582:	f043 0301 	orr.w	r3, r3, #1
 8006586:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3308      	adds	r3, #8
 8006590:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006594:	673a      	str	r2, [r7, #112]	; 0x70
 8006596:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006598:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800659a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800659c:	e841 2300 	strex	r3, r2, [r1]
 80065a0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 80065a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d1e3      	bne.n	8006570 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065b0:	d153      	bne.n	800665a <UART_Start_Receive_IT+0x19e>
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80065b8:	88fa      	ldrh	r2, [r7, #6]
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d34d      	bcc.n	800665a <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	689b      	ldr	r3, [r3, #8]
 80065c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065c6:	d107      	bne.n	80065d8 <UART_Start_Receive_IT+0x11c>
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	691b      	ldr	r3, [r3, #16]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d103      	bne.n	80065d8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	4a4b      	ldr	r2, [pc, #300]	; (8006700 <UART_Start_Receive_IT+0x244>)
 80065d4:	671a      	str	r2, [r3, #112]	; 0x70
 80065d6:	e002      	b.n	80065de <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	4a4a      	ldr	r2, [pc, #296]	; (8006704 <UART_Start_Receive_IT+0x248>)
 80065dc:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01a      	beq.n	8006624 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80065f6:	e853 3f00 	ldrex	r3, [r3]
 80065fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80065fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006602:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	461a      	mov	r2, r3
 800660c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006610:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006612:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006614:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006616:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006618:	e841 2300 	strex	r3, r2, [r1]
 800661c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800661e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006620:	2b00      	cmp	r3, #0
 8006622:	d1e4      	bne.n	80065ee <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	3308      	adds	r3, #8
 800662a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800662c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800662e:	e853 3f00 	ldrex	r3, [r3]
 8006632:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800663a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	3308      	adds	r3, #8
 8006642:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006644:	64ba      	str	r2, [r7, #72]	; 0x48
 8006646:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006648:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800664a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800664c:	e841 2300 	strex	r3, r2, [r1]
 8006650:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006652:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006654:	2b00      	cmp	r3, #0
 8006656:	d1e5      	bne.n	8006624 <UART_Start_Receive_IT+0x168>
 8006658:	e04a      	b.n	80066f0 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	689b      	ldr	r3, [r3, #8]
 800665e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006662:	d107      	bne.n	8006674 <UART_Start_Receive_IT+0x1b8>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d103      	bne.n	8006674 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	4a26      	ldr	r2, [pc, #152]	; (8006708 <UART_Start_Receive_IT+0x24c>)
 8006670:	671a      	str	r2, [r3, #112]	; 0x70
 8006672:	e002      	b.n	800667a <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	4a25      	ldr	r2, [pc, #148]	; (800670c <UART_Start_Receive_IT+0x250>)
 8006678:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	691b      	ldr	r3, [r3, #16]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d019      	beq.n	80066be <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	e853 3f00 	ldrex	r3, [r3]
 8006696:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669a:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800669e:	677b      	str	r3, [r7, #116]	; 0x74
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	461a      	mov	r2, r3
 80066a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066a8:	637b      	str	r3, [r7, #52]	; 0x34
 80066aa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80066ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80066b0:	e841 2300 	strex	r3, r2, [r1]
 80066b4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80066b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d1e6      	bne.n	800668a <UART_Start_Receive_IT+0x1ce>
 80066bc:	e018      	b.n	80066f0 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066c4:	697b      	ldr	r3, [r7, #20]
 80066c6:	e853 3f00 	ldrex	r3, [r3]
 80066ca:	613b      	str	r3, [r7, #16]
   return(result);
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	f043 0320 	orr.w	r3, r3, #32
 80066d2:	67bb      	str	r3, [r7, #120]	; 0x78
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	461a      	mov	r2, r3
 80066da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066dc:	623b      	str	r3, [r7, #32]
 80066de:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066e0:	69f9      	ldr	r1, [r7, #28]
 80066e2:	6a3a      	ldr	r2, [r7, #32]
 80066e4:	e841 2300 	strex	r3, r2, [r1]
 80066e8:	61bb      	str	r3, [r7, #24]
   return(result);
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d1e6      	bne.n	80066be <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80066f0:	2300      	movs	r3, #0
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	378c      	adds	r7, #140	; 0x8c
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
 80066fe:	bf00      	nop
 8006700:	08006e25 	.word	0x08006e25
 8006704:	08006b29 	.word	0x08006b29
 8006708:	080069c3 	.word	0x080069c3
 800670c:	0800685f 	.word	0x0800685f

08006710 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006710:	b480      	push	{r7}
 8006712:	b095      	sub	sp, #84	; 0x54
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006728:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800672c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006736:	643b      	str	r3, [r7, #64]	; 0x40
 8006738:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800673c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e6      	bne.n	8006718 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	3308      	adds	r3, #8
 8006750:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006752:	6a3b      	ldr	r3, [r7, #32]
 8006754:	e853 3f00 	ldrex	r3, [r3]
 8006758:	61fb      	str	r3, [r7, #28]
   return(result);
 800675a:	69fb      	ldr	r3, [r7, #28]
 800675c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006760:	f023 0301 	bic.w	r3, r3, #1
 8006764:	64bb      	str	r3, [r7, #72]	; 0x48
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	3308      	adds	r3, #8
 800676c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800676e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006770:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006776:	e841 2300 	strex	r3, r2, [r1]
 800677a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800677c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677e:	2b00      	cmp	r3, #0
 8006780:	d1e3      	bne.n	800674a <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006786:	2b01      	cmp	r3, #1
 8006788:	d118      	bne.n	80067bc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	e853 3f00 	ldrex	r3, [r3]
 8006796:	60bb      	str	r3, [r7, #8]
   return(result);
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	f023 0310 	bic.w	r3, r3, #16
 800679e:	647b      	str	r3, [r7, #68]	; 0x44
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	461a      	mov	r2, r3
 80067a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80067a8:	61bb      	str	r3, [r7, #24]
 80067aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067ac:	6979      	ldr	r1, [r7, #20]
 80067ae:	69ba      	ldr	r2, [r7, #24]
 80067b0:	e841 2300 	strex	r3, r2, [r1]
 80067b4:	613b      	str	r3, [r7, #16]
   return(result);
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e6      	bne.n	800678a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2220      	movs	r2, #32
 80067c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2200      	movs	r2, #0
 80067c8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	671a      	str	r2, [r3, #112]	; 0x70
}
 80067d0:	bf00      	nop
 80067d2:	3754      	adds	r7, #84	; 0x54
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067e8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2200      	movs	r2, #0
 80067ee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	2200      	movs	r2, #0
 80067f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80067fa:	68f8      	ldr	r0, [r7, #12]
 80067fc:	f7ff f996 	bl	8005b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}

08006808 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b088      	sub	sp, #32
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	e853 3f00 	ldrex	r3, [r3]
 800681c:	60bb      	str	r3, [r7, #8]
   return(result);
 800681e:	68bb      	ldr	r3, [r7, #8]
 8006820:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006824:	61fb      	str	r3, [r7, #28]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	69fb      	ldr	r3, [r7, #28]
 800682e:	61bb      	str	r3, [r7, #24]
 8006830:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006832:	6979      	ldr	r1, [r7, #20]
 8006834:	69ba      	ldr	r2, [r7, #24]
 8006836:	e841 2300 	strex	r3, r2, [r1]
 800683a:	613b      	str	r3, [r7, #16]
   return(result);
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1e6      	bne.n	8006810 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2220      	movs	r2, #32
 8006846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2200      	movs	r2, #0
 800684e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7ff f961 	bl	8005b18 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006856:	bf00      	nop
 8006858:	3720      	adds	r7, #32
 800685a:	46bd      	mov	sp, r7
 800685c:	bd80      	pop	{r7, pc}

0800685e <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b096      	sub	sp, #88	; 0x58
 8006862:	af00      	add	r7, sp, #0
 8006864:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800686c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006876:	2b22      	cmp	r3, #34	; 0x22
 8006878:	f040 8095 	bne.w	80069a6 <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006882:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006886:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800688a:	b2d9      	uxtb	r1, r3
 800688c:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8006890:	b2da      	uxtb	r2, r3
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006896:	400a      	ands	r2, r1
 8006898:	b2d2      	uxtb	r2, r2
 800689a:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	3b01      	subs	r3, #1
 80068b0:	b29a      	uxth	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80068be:	b29b      	uxth	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d17a      	bne.n	80069ba <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80068d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80068d8:	653b      	str	r3, [r7, #80]	; 0x50
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	461a      	mov	r2, r3
 80068e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068e2:	647b      	str	r3, [r7, #68]	; 0x44
 80068e4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80068e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068ea:	e841 2300 	strex	r3, r2, [r1]
 80068ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80068f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d1e6      	bne.n	80068c4 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	3308      	adds	r3, #8
 80068fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006900:	e853 3f00 	ldrex	r3, [r3]
 8006904:	623b      	str	r3, [r7, #32]
   return(result);
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	f023 0301 	bic.w	r3, r3, #1
 800690c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3308      	adds	r3, #8
 8006914:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006916:	633a      	str	r2, [r7, #48]	; 0x30
 8006918:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800691c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800691e:	e841 2300 	strex	r3, r2, [r1]
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1e5      	bne.n	80068f6 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2220      	movs	r2, #32
 800692e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800693c:	2b01      	cmp	r3, #1
 800693e:	d12e      	bne.n	800699e <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2200      	movs	r2, #0
 8006944:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	e853 3f00 	ldrex	r3, [r3]
 8006952:	60fb      	str	r3, [r7, #12]
   return(result);
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f023 0310 	bic.w	r3, r3, #16
 800695a:	64bb      	str	r3, [r7, #72]	; 0x48
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	461a      	mov	r2, r3
 8006962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006968:	69b9      	ldr	r1, [r7, #24]
 800696a:	69fa      	ldr	r2, [r7, #28]
 800696c:	e841 2300 	strex	r3, r2, [r1]
 8006970:	617b      	str	r3, [r7, #20]
   return(result);
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1e6      	bne.n	8006946 <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	f003 0310 	and.w	r3, r3, #16
 8006982:	2b10      	cmp	r3, #16
 8006984:	d103      	bne.n	800698e <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2210      	movs	r2, #16
 800698c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006994:	4619      	mov	r1, r3
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f7ff f8d2 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800699c:	e00d      	b.n	80069ba <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fce4 	bl	800736c <HAL_UART_RxCpltCallback>
}
 80069a4:	e009      	b.n	80069ba <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	8b1b      	ldrh	r3, [r3, #24]
 80069ac:	b29a      	uxth	r2, r3
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0208 	orr.w	r2, r2, #8
 80069b6:	b292      	uxth	r2, r2
 80069b8:	831a      	strh	r2, [r3, #24]
}
 80069ba:	bf00      	nop
 80069bc:	3758      	adds	r7, #88	; 0x58
 80069be:	46bd      	mov	sp, r7
 80069c0:	bd80      	pop	{r7, pc}

080069c2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80069c2:	b580      	push	{r7, lr}
 80069c4:	b096      	sub	sp, #88	; 0x58
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80069d0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069da:	2b22      	cmp	r3, #34	; 0x22
 80069dc:	f040 8095 	bne.w	8006b0a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80069e6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069ee:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80069f0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80069f4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80069f8:	4013      	ands	r3, r2
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069fe:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a04:	1c9a      	adds	r2, r3, #2
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	3b01      	subs	r3, #1
 8006a14:	b29a      	uxth	r2, r3
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d17a      	bne.n	8006b1e <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a30:	e853 3f00 	ldrex	r3, [r3]
 8006a34:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a38:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a3c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	461a      	mov	r2, r3
 8006a44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a46:	643b      	str	r3, [r7, #64]	; 0x40
 8006a48:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a4a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006a4c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a4e:	e841 2300 	strex	r3, r2, [r1]
 8006a52:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d1e6      	bne.n	8006a28 <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	3308      	adds	r3, #8
 8006a60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	e853 3f00 	ldrex	r3, [r3]
 8006a68:	61fb      	str	r3, [r7, #28]
   return(result);
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	f023 0301 	bic.w	r3, r3, #1
 8006a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	3308      	adds	r3, #8
 8006a78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006a7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006a82:	e841 2300 	strex	r3, r2, [r1]
 8006a86:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d1e5      	bne.n	8006a5a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d12e      	bne.n	8006b02 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	e853 3f00 	ldrex	r3, [r3]
 8006ab6:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ab8:	68bb      	ldr	r3, [r7, #8]
 8006aba:	f023 0310 	bic.w	r3, r3, #16
 8006abe:	647b      	str	r3, [r7, #68]	; 0x44
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ac8:	61bb      	str	r3, [r7, #24]
 8006aca:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006acc:	6979      	ldr	r1, [r7, #20]
 8006ace:	69ba      	ldr	r2, [r7, #24]
 8006ad0:	e841 2300 	strex	r3, r2, [r1]
 8006ad4:	613b      	str	r3, [r7, #16]
   return(result);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1e6      	bne.n	8006aaa <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	69db      	ldr	r3, [r3, #28]
 8006ae2:	f003 0310 	and.w	r3, r3, #16
 8006ae6:	2b10      	cmp	r3, #16
 8006ae8:	d103      	bne.n	8006af2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2210      	movs	r2, #16
 8006af0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f7ff f820 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006b00:	e00d      	b.n	8006b1e <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f000 fc32 	bl	800736c <HAL_UART_RxCpltCallback>
}
 8006b08:	e009      	b.n	8006b1e <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	8b1b      	ldrh	r3, [r3, #24]
 8006b10:	b29a      	uxth	r2, r3
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0208 	orr.w	r2, r2, #8
 8006b1a:	b292      	uxth	r2, r2
 8006b1c:	831a      	strh	r2, [r3, #24]
}
 8006b1e:	bf00      	nop
 8006b20:	3758      	adds	r7, #88	; 0x58
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
	...

08006b28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b0a6      	sub	sp, #152	; 0x98
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006b36:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	69db      	ldr	r3, [r3, #28]
 8006b40:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006b5e:	2b22      	cmp	r3, #34	; 0x22
 8006b60:	f040 814f 	bne.w	8006e02 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006b6a:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006b6e:	e0f6      	b.n	8006d5e <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006b76:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006b7a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8006b7e:	b2d9      	uxtb	r1, r3
 8006b80:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8006b84:	b2da      	uxtb	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8a:	400a      	ands	r2, r1
 8006b8c:	b2d2      	uxtb	r2, r2
 8006b8e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006bb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006bba:	f003 0307 	and.w	r3, r3, #7
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d053      	beq.n	8006c6a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006bc6:	f003 0301 	and.w	r3, r3, #1
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d011      	beq.n	8006bf2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8006bce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d00b      	beq.n	8006bf2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	2201      	movs	r2, #1
 8006be0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006be8:	f043 0201 	orr.w	r2, r3, #1
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006bf2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006bf6:	f003 0302 	and.w	r3, r3, #2
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d011      	beq.n	8006c22 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8006bfe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c02:	f003 0301 	and.w	r3, r3, #1
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00b      	beq.n	8006c22 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	2202      	movs	r2, #2
 8006c10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c18:	f043 0204 	orr.w	r2, r3, #4
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c22:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006c26:	f003 0304 	and.w	r3, r3, #4
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d011      	beq.n	8006c52 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8006c2e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00b      	beq.n	8006c52 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	2204      	movs	r2, #4
 8006c40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c48:	f043 0202 	orr.w	r2, r3, #2
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d006      	beq.n	8006c6a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f7fe ff65 	bl	8005b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006c70:	b29b      	uxth	r3, r3
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d173      	bne.n	8006d5e <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8006c84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006c86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	461a      	mov	r2, r3
 8006c94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c98:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c9a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c9c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8006c9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ca0:	e841 2300 	strex	r3, r2, [r1]
 8006ca4:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006ca6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d1e4      	bne.n	8006c76 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	3308      	adds	r3, #8
 8006cb2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006cb6:	e853 3f00 	ldrex	r3, [r3]
 8006cba:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8006cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cc2:	f023 0301 	bic.w	r3, r3, #1
 8006cc6:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	3308      	adds	r3, #8
 8006cce:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006cd0:	657a      	str	r2, [r7, #84]	; 0x54
 8006cd2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8006cd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006cd8:	e841 2300 	strex	r3, r2, [r1]
 8006cdc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d1e3      	bne.n	8006cac <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2220      	movs	r2, #32
 8006ce8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2200      	movs	r2, #0
 8006cf0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d12e      	bne.n	8006d58 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006d08:	e853 3f00 	ldrex	r3, [r3]
 8006d0c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d10:	f023 0310 	bic.w	r3, r3, #16
 8006d14:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	461a      	mov	r2, r3
 8006d1c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006d1e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d20:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d22:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006d24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006d26:	e841 2300 	strex	r3, r2, [r1]
 8006d2a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d1e6      	bne.n	8006d00 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	69db      	ldr	r3, [r3, #28]
 8006d38:	f003 0310 	and.w	r3, r3, #16
 8006d3c:	2b10      	cmp	r3, #16
 8006d3e:	d103      	bne.n	8006d48 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	2210      	movs	r2, #16
 8006d46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006d4e:	4619      	mov	r1, r3
 8006d50:	6878      	ldr	r0, [r7, #4]
 8006d52:	f7fe fef5 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
 8006d56:	e002      	b.n	8006d5e <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f000 fb07 	bl	800736c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006d5e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d006      	beq.n	8006d74 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8006d66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006d6a:	f003 0320 	and.w	r3, r3, #32
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f47f aefe 	bne.w	8006b70 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006d7a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8006d7e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d047      	beq.n	8006e16 <UART_RxISR_8BIT_FIFOEN+0x2ee>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006d8c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d240      	bcs.n	8006e16 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	3308      	adds	r3, #8
 8006d9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d9c:	6a3b      	ldr	r3, [r7, #32]
 8006d9e:	e853 3f00 	ldrex	r3, [r3]
 8006da2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006da4:	69fb      	ldr	r3, [r7, #28]
 8006da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006daa:	673b      	str	r3, [r7, #112]	; 0x70
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	3308      	adds	r3, #8
 8006db2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006db4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006db6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006db8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006dbc:	e841 2300 	strex	r3, r2, [r1]
 8006dc0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d1e5      	bne.n	8006d94 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	4a15      	ldr	r2, [pc, #84]	; (8006e20 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8006dcc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	e853 3f00 	ldrex	r3, [r3]
 8006dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	f043 0320 	orr.w	r3, r3, #32
 8006de2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	461a      	mov	r2, r3
 8006dea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dec:	61bb      	str	r3, [r7, #24]
 8006dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df0:	6979      	ldr	r1, [r7, #20]
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	e841 2300 	strex	r3, r2, [r1]
 8006df8:	613b      	str	r3, [r7, #16]
   return(result);
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d1e6      	bne.n	8006dce <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e00:	e009      	b.n	8006e16 <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	8b1b      	ldrh	r3, [r3, #24]
 8006e08:	b29a      	uxth	r2, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f042 0208 	orr.w	r2, r2, #8
 8006e12:	b292      	uxth	r2, r2
 8006e14:	831a      	strh	r2, [r3, #24]
}
 8006e16:	bf00      	nop
 8006e18:	3798      	adds	r7, #152	; 0x98
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	bd80      	pop	{r7, pc}
 8006e1e:	bf00      	nop
 8006e20:	0800685f 	.word	0x0800685f

08006e24 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b0a8      	sub	sp, #160	; 0xa0
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e32:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69db      	ldr	r3, [r3, #28]
 8006e3c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	689b      	ldr	r3, [r3, #8]
 8006e50:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e5a:	2b22      	cmp	r3, #34	; 0x22
 8006e5c:	f040 8153 	bne.w	8007106 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006e66:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006e6a:	e0fa      	b.n	8007062 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8006e72:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e7a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8006e7e:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8006e82:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8006e86:	4013      	ands	r3, r2
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006e8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e94:	1c9a      	adds	r2, r3, #2
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ea0:	b29b      	uxth	r3, r3
 8006ea2:	3b01      	subs	r3, #1
 8006ea4:	b29a      	uxth	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	69db      	ldr	r3, [r3, #28]
 8006eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006eb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006eba:	f003 0307 	and.w	r3, r3, #7
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d053      	beq.n	8006f6a <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006ec2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ec6:	f003 0301 	and.w	r3, r3, #1
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d011      	beq.n	8006ef2 <UART_RxISR_16BIT_FIFOEN+0xce>
 8006ece:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006ed2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d00b      	beq.n	8006ef2 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ee8:	f043 0201 	orr.w	r2, r3, #1
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ef2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ef6:	f003 0302 	and.w	r3, r3, #2
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d011      	beq.n	8006f22 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8006efe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f02:	f003 0301 	and.w	r3, r3, #1
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d00b      	beq.n	8006f22 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f18:	f043 0204 	orr.w	r2, r3, #4
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006f26:	f003 0304 	and.w	r3, r3, #4
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d011      	beq.n	8006f52 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8006f2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006f32:	f003 0301 	and.w	r3, r3, #1
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d00b      	beq.n	8006f52 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2204      	movs	r2, #4
 8006f40:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f48:	f043 0202 	orr.w	r2, r3, #2
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d006      	beq.n	8006f6a <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7fe fde5 	bl	8005b2c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f70:	b29b      	uxth	r3, r3
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d175      	bne.n	8007062 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f7e:	e853 3f00 	ldrex	r3, [r3]
 8006f82:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006f84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006f8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006f98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f9a:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f9c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006f9e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006fa0:	e841 2300 	strex	r3, r2, [r1]
 8006fa4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006fa6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d1e4      	bne.n	8006f76 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	3308      	adds	r3, #8
 8006fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006fb6:	e853 3f00 	ldrex	r3, [r3]
 8006fba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006fbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006fc2:	f023 0301 	bic.w	r3, r3, #1
 8006fc6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	3308      	adds	r3, #8
 8006fd0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006fd4:	65ba      	str	r2, [r7, #88]	; 0x58
 8006fd6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fd8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006fda:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006fdc:	e841 2300 	strex	r3, r2, [r1]
 8006fe0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1e1      	bne.n	8006fac <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2220      	movs	r2, #32
 8006fec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ffa:	2b01      	cmp	r3, #1
 8006ffc:	d12e      	bne.n	800705c <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800700a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800700c:	e853 3f00 	ldrex	r3, [r3]
 8007010:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007014:	f023 0310 	bic.w	r3, r3, #16
 8007018:	67fb      	str	r3, [r7, #124]	; 0x7c
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007022:	647b      	str	r3, [r7, #68]	; 0x44
 8007024:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007026:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007028:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800702a:	e841 2300 	strex	r3, r2, [r1]
 800702e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007030:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1e6      	bne.n	8007004 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	69db      	ldr	r3, [r3, #28]
 800703c:	f003 0310 	and.w	r3, r3, #16
 8007040:	2b10      	cmp	r3, #16
 8007042:	d103      	bne.n	800704c <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	2210      	movs	r2, #16
 800704a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007052:	4619      	mov	r1, r3
 8007054:	6878      	ldr	r0, [r7, #4]
 8007056:	f7fe fd73 	bl	8005b40 <HAL_UARTEx_RxEventCallback>
 800705a:	e002      	b.n	8007062 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f985 	bl	800736c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007062:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8007066:	2b00      	cmp	r3, #0
 8007068:	d006      	beq.n	8007078 <UART_RxISR_16BIT_FIFOEN+0x254>
 800706a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800706e:	f003 0320 	and.w	r3, r3, #32
 8007072:	2b00      	cmp	r3, #0
 8007074:	f47f aefa 	bne.w	8006e6c <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800707e:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007082:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007086:	2b00      	cmp	r3, #0
 8007088:	d047      	beq.n	800711a <UART_RxISR_16BIT_FIFOEN+0x2f6>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007090:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007094:	429a      	cmp	r2, r3
 8007096:	d240      	bcs.n	800711a <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	3308      	adds	r3, #8
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	e853 3f00 	ldrex	r3, [r3]
 80070a6:	623b      	str	r3, [r7, #32]
   return(result);
 80070a8:	6a3b      	ldr	r3, [r7, #32]
 80070aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070ae:	677b      	str	r3, [r7, #116]	; 0x74
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	3308      	adds	r3, #8
 80070b6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80070b8:	633a      	str	r2, [r7, #48]	; 0x30
 80070ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80070be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80070c0:	e841 2300 	strex	r3, r2, [r1]
 80070c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80070c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d1e5      	bne.n	8007098 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4a15      	ldr	r2, [pc, #84]	; (8007124 <UART_RxISR_16BIT_FIFOEN+0x300>)
 80070d0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	e853 3f00 	ldrex	r3, [r3]
 80070de:	60fb      	str	r3, [r7, #12]
   return(result);
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	f043 0320 	orr.w	r3, r3, #32
 80070e6:	673b      	str	r3, [r7, #112]	; 0x70
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	461a      	mov	r2, r3
 80070ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070f0:	61fb      	str	r3, [r7, #28]
 80070f2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070f4:	69b9      	ldr	r1, [r7, #24]
 80070f6:	69fa      	ldr	r2, [r7, #28]
 80070f8:	e841 2300 	strex	r3, r2, [r1]
 80070fc:	617b      	str	r3, [r7, #20]
   return(result);
 80070fe:	697b      	ldr	r3, [r7, #20]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d1e6      	bne.n	80070d2 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007104:	e009      	b.n	800711a <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	8b1b      	ldrh	r3, [r3, #24]
 800710c:	b29a      	uxth	r2, r3
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0208 	orr.w	r2, r2, #8
 8007116:	b292      	uxth	r2, r2
 8007118:	831a      	strh	r2, [r3, #24]
}
 800711a:	bf00      	nop
 800711c:	37a0      	adds	r7, #160	; 0xa0
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	080069c3 	.word	0x080069c3

08007128 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007128:	b480      	push	{r7}
 800712a:	b083      	sub	sp, #12
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800713c:	b480      	push	{r7}
 800713e:	b083      	sub	sp, #12
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007144:	bf00      	nop
 8007146:	370c      	adds	r7, #12
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr

08007150 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007158:	bf00      	nop
 800715a:	370c      	adds	r7, #12
 800715c:	46bd      	mov	sp, r7
 800715e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007162:	4770      	bx	lr

08007164 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007164:	b480      	push	{r7}
 8007166:	b085      	sub	sp, #20
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007172:	2b01      	cmp	r3, #1
 8007174:	d101      	bne.n	800717a <HAL_UARTEx_DisableFifoMode+0x16>
 8007176:	2302      	movs	r3, #2
 8007178:	e027      	b.n	80071ca <HAL_UARTEx_DisableFifoMode+0x66>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2224      	movs	r2, #36	; 0x24
 8007186:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	681a      	ldr	r2, [r3, #0]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f022 0201 	bic.w	r2, r2, #1
 80071a0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80071a8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2200      	movs	r2, #0
 80071ae:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	68fa      	ldr	r2, [r7, #12]
 80071b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2220      	movs	r2, #32
 80071bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80071c8:	2300      	movs	r3, #0
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3714      	adds	r7, #20
 80071ce:	46bd      	mov	sp, r7
 80071d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071d4:	4770      	bx	lr

080071d6 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80071d6:	b580      	push	{r7, lr}
 80071d8:	b084      	sub	sp, #16
 80071da:	af00      	add	r7, sp, #0
 80071dc:	6078      	str	r0, [r7, #4]
 80071de:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d101      	bne.n	80071ee <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80071ea:	2302      	movs	r3, #2
 80071ec:	e02d      	b.n	800724a <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	2224      	movs	r2, #36	; 0x24
 80071fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	681a      	ldr	r2, [r3, #0]
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f022 0201 	bic.w	r2, r2, #1
 8007214:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	689b      	ldr	r3, [r3, #8]
 800721c:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	430a      	orrs	r2, r1
 8007228:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 f850 	bl	80072d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2220      	movs	r2, #32
 800723c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2200      	movs	r2, #0
 8007244:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007248:	2300      	movs	r3, #0
}
 800724a:	4618      	mov	r0, r3
 800724c:	3710      	adds	r7, #16
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}

08007252 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007252:	b580      	push	{r7, lr}
 8007254:	b084      	sub	sp, #16
 8007256:	af00      	add	r7, sp, #0
 8007258:	6078      	str	r0, [r7, #4]
 800725a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007262:	2b01      	cmp	r3, #1
 8007264:	d101      	bne.n	800726a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007266:	2302      	movs	r3, #2
 8007268:	e02d      	b.n	80072c6 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2224      	movs	r2, #36	; 0x24
 8007276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0201 	bic.w	r2, r2, #1
 8007290:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	683a      	ldr	r2, [r7, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f000 f812 	bl	80072d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	4618      	mov	r0, r3
 80072c8:	3710      	adds	r7, #16
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
	...

080072d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b085      	sub	sp, #20
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d108      	bne.n	80072f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80072f0:	e031      	b.n	8007356 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80072f2:	2308      	movs	r3, #8
 80072f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80072f6:	2308      	movs	r3, #8
 80072f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	689b      	ldr	r3, [r3, #8]
 8007300:	0e5b      	lsrs	r3, r3, #25
 8007302:	b2db      	uxtb	r3, r3
 8007304:	f003 0307 	and.w	r3, r3, #7
 8007308:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	0f5b      	lsrs	r3, r3, #29
 8007312:	b2db      	uxtb	r3, r3
 8007314:	f003 0307 	and.w	r3, r3, #7
 8007318:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	7b3a      	ldrb	r2, [r7, #12]
 800731e:	4911      	ldr	r1, [pc, #68]	; (8007364 <UARTEx_SetNbDataToProcess+0x94>)
 8007320:	5c8a      	ldrb	r2, [r1, r2]
 8007322:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007326:	7b3a      	ldrb	r2, [r7, #12]
 8007328:	490f      	ldr	r1, [pc, #60]	; (8007368 <UARTEx_SetNbDataToProcess+0x98>)
 800732a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800732c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007330:	b29a      	uxth	r2, r3
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007338:	7bfb      	ldrb	r3, [r7, #15]
 800733a:	7b7a      	ldrb	r2, [r7, #13]
 800733c:	4909      	ldr	r1, [pc, #36]	; (8007364 <UARTEx_SetNbDataToProcess+0x94>)
 800733e:	5c8a      	ldrb	r2, [r1, r2]
 8007340:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007344:	7b7a      	ldrb	r2, [r7, #13]
 8007346:	4908      	ldr	r1, [pc, #32]	; (8007368 <UARTEx_SetNbDataToProcess+0x98>)
 8007348:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800734a:	fb93 f3f2 	sdiv	r3, r3, r2
 800734e:	b29a      	uxth	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007356:	bf00      	nop
 8007358:	3714      	adds	r7, #20
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr
 8007362:	bf00      	nop
 8007364:	08008bf0 	.word	0x08008bf0
 8007368:	08008bf8 	.word	0x08008bf8

0800736c <HAL_UART_RxCpltCallback>:



//get the data byte by byte
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af02      	add	r7, sp, #8
 8007372:	6078      	str	r0, [r7, #4]


  if (start_yn[0] == '0'){
 8007374:	4bab      	ldr	r3, [pc, #684]	; (8007624 <HAL_UART_RxCpltCallback+0x2b8>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	2b30      	cmp	r3, #48	; 0x30
 800737a:	d10f      	bne.n	800739c <HAL_UART_RxCpltCallback+0x30>
	  //you are a recorder (player 1)
	  memset(start_yn,0,2);
 800737c:	2202      	movs	r2, #2
 800737e:	2100      	movs	r1, #0
 8007380:	48a8      	ldr	r0, [pc, #672]	; (8007624 <HAL_UART_RxCpltCallback+0x2b8>)
 8007382:	f001 fbf9 	bl	8008b78 <memset>
	  // send player message
	  HAL_UART_Transmit(&huart1, chooseModeMessage, sizeof(chooseModeMessage), 100);
 8007386:	2364      	movs	r3, #100	; 0x64
 8007388:	2243      	movs	r2, #67	; 0x43
 800738a:	49a7      	ldr	r1, [pc, #668]	; (8007628 <HAL_UART_RxCpltCallback+0x2bc>)
 800738c:	48a7      	ldr	r0, [pc, #668]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 800738e:	f7fd ffbd 	bl	800530c <HAL_UART_Transmit>

	  //game mode 0 or 1
	  HAL_UART_Receive_IT(&huart1, recorder_game_mode, 2);
 8007392:	2202      	movs	r2, #2
 8007394:	49a6      	ldr	r1, [pc, #664]	; (8007630 <HAL_UART_RxCpltCallback+0x2c4>)
 8007396:	48a5      	ldr	r0, [pc, #660]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 8007398:	f7fe f850 	bl	800543c <HAL_UART_Receive_IT>
  }

  if (recorder_game_mode[0] == '1'){
 800739c:	4ba4      	ldr	r3, [pc, #656]	; (8007630 <HAL_UART_RxCpltCallback+0x2c4>)
 800739e:	781b      	ldrb	r3, [r3, #0]
 80073a0:	2b31      	cmp	r3, #49	; 0x31
 80073a2:	d10a      	bne.n	80073ba <HAL_UART_RxCpltCallback+0x4e>

	  HAL_UART_Transmit(&huart1, direcRecorderMessage, sizeof(direcRecorderMessage), 100);
 80073a4:	2364      	movs	r3, #100	; 0x64
 80073a6:	2240      	movs	r2, #64	; 0x40
 80073a8:	49a2      	ldr	r1, [pc, #648]	; (8007634 <HAL_UART_RxCpltCallback+0x2c8>)
 80073aa:	48a0      	ldr	r0, [pc, #640]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 80073ac:	f7fd ffae 	bl	800530c <HAL_UART_Transmit>

	  //receive the answer in digit_reply
	  HAL_UART_Receive_IT(&huart1, direction_reply, 6);
 80073b0:	2206      	movs	r2, #6
 80073b2:	49a1      	ldr	r1, [pc, #644]	; (8007638 <HAL_UART_RxCpltCallback+0x2cc>)
 80073b4:	489d      	ldr	r0, [pc, #628]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 80073b6:	f7fe f841 	bl	800543c <HAL_UART_Receive_IT>


  }

  if (direction_reply[0] != '\000'){
 80073ba:	4b9f      	ldr	r3, [pc, #636]	; (8007638 <HAL_UART_RxCpltCallback+0x2cc>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d019      	beq.n	80073f6 <HAL_UART_RxCpltCallback+0x8a>

	  HAL_UART_Transmit(&huart1, clearCommand, sizeof(clearCommand), 100);
 80073c2:	2364      	movs	r3, #100	; 0x64
 80073c4:	2205      	movs	r2, #5
 80073c6:	499d      	ldr	r1, [pc, #628]	; (800763c <HAL_UART_RxCpltCallback+0x2d0>)
 80073c8:	4898      	ldr	r0, [pc, #608]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 80073ca:	f7fd ff9f 	bl	800530c <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart1, startPlayer2Message, sizeof(startPlayer2Message), 100);
 80073ce:	2364      	movs	r3, #100	; 0x64
 80073d0:	220c      	movs	r2, #12
 80073d2:	499b      	ldr	r1, [pc, #620]	; (8007640 <HAL_UART_RxCpltCallback+0x2d4>)
 80073d4:	4895      	ldr	r0, [pc, #596]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 80073d6:	f7fd ff99 	bl	800530c <HAL_UART_Transmit>
//   	  }
//	  seq = int_converter;
//	  strcpy(digit_answer,  digit_reply);
	  ///////////////////////////////////////

	  direction_reply[0] = '\000';
 80073da:	4b97      	ldr	r3, [pc, #604]	; (8007638 <HAL_UART_RxCpltCallback+0x2cc>)
 80073dc:	2200      	movs	r2, #0
 80073de:	701a      	strb	r2, [r3, #0]

	  HAL_UART_Transmit(&huart1, waitForSpeakerDirectionMessage, sizeof(waitForSpeakerDirectionMessage), 100);
 80073e0:	2364      	movs	r3, #100	; 0x64
 80073e2:	224b      	movs	r2, #75	; 0x4b
 80073e4:	4997      	ldr	r1, [pc, #604]	; (8007644 <HAL_UART_RxCpltCallback+0x2d8>)
 80073e6:	4891      	ldr	r0, [pc, #580]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 80073e8:	f7fd ff90 	bl	800530c <HAL_UART_Transmit>
	  //send to HAL_DAC...once cmplt user should move the board
//	  if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  address[seq[0]], sizeof(SEQUENCE)) != QSPI_OK)
//	  					Error_Handler();
//	  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);

	  HAL_UART_Receive_IT(&huart1, user_Direction_answer, 6);
 80073ec:	2206      	movs	r2, #6
 80073ee:	4996      	ldr	r1, [pc, #600]	; (8007648 <HAL_UART_RxCpltCallback+0x2dc>)
 80073f0:	488e      	ldr	r0, [pc, #568]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 80073f2:	f7fe f823 	bl	800543c <HAL_UART_Receive_IT>

  }


  /////////////// Recorder Digits ////////////////////////
  if (recorder_game_mode[0] == '0'){
 80073f6:	4b8e      	ldr	r3, [pc, #568]	; (8007630 <HAL_UART_RxCpltCallback+0x2c4>)
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	2b30      	cmp	r3, #48	; 0x30
 80073fc:	d10f      	bne.n	800741e <HAL_UART_RxCpltCallback+0xb2>
	  memset(recorder_game_mode,0,2);
 80073fe:	2202      	movs	r2, #2
 8007400:	2100      	movs	r1, #0
 8007402:	488b      	ldr	r0, [pc, #556]	; (8007630 <HAL_UART_RxCpltCallback+0x2c4>)
 8007404:	f001 fbb8 	bl	8008b78 <memset>

	  HAL_UART_Transmit(&huart1, recorderMessage, sizeof(recorderMessage), 100);
 8007408:	2364      	movs	r3, #100	; 0x64
 800740a:	223b      	movs	r2, #59	; 0x3b
 800740c:	498f      	ldr	r1, [pc, #572]	; (800764c <HAL_UART_RxCpltCallback+0x2e0>)
 800740e:	4887      	ldr	r0, [pc, #540]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 8007410:	f7fd ff7c 	bl	800530c <HAL_UART_Transmit>

	  //receive the answer in digit_reply
	  HAL_UART_Receive_IT(&huart1, digit_reply, 6);
 8007414:	2206      	movs	r2, #6
 8007416:	498e      	ldr	r1, [pc, #568]	; (8007650 <HAL_UART_RxCpltCallback+0x2e4>)
 8007418:	4884      	ldr	r0, [pc, #528]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 800741a:	f7fe f80f 	bl	800543c <HAL_UART_Receive_IT>

  }


  if (digit_reply[0] != '\000'){
 800741e:	4b8c      	ldr	r3, [pc, #560]	; (8007650 <HAL_UART_RxCpltCallback+0x2e4>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	2b00      	cmp	r3, #0
 8007424:	d04e      	beq.n	80074c4 <HAL_UART_RxCpltCallback+0x158>

	  HAL_UART_Transmit(&huart1, clearCommand, sizeof(clearCommand), 100);
 8007426:	2364      	movs	r3, #100	; 0x64
 8007428:	2205      	movs	r2, #5
 800742a:	4984      	ldr	r1, [pc, #528]	; (800763c <HAL_UART_RxCpltCallback+0x2d0>)
 800742c:	487f      	ldr	r0, [pc, #508]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 800742e:	f7fd ff6d 	bl	800530c <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart1, startPlayer2Message, sizeof(startPlayer2Message), 100);
 8007432:	2364      	movs	r3, #100	; 0x64
 8007434:	220c      	movs	r2, #12
 8007436:	4982      	ldr	r1, [pc, #520]	; (8007640 <HAL_UART_RxCpltCallback+0x2d4>)
 8007438:	487c      	ldr	r0, [pc, #496]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 800743a:	f7fd ff67 	bl	800530c <HAL_UART_Transmit>


	  for (int i = 0; i < (sizeof(digit_reply))/(sizeof(digit_reply[0])); i++){
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	e00d      	b.n	8007460 <HAL_UART_RxCpltCallback+0xf4>
		  int_converter[i] = digit_reply[i] - '0';
 8007444:	4a82      	ldr	r2, [pc, #520]	; (8007650 <HAL_UART_RxCpltCallback+0x2e4>)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	4413      	add	r3, r2
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	3b30      	subs	r3, #48	; 0x30
 800744e:	b2d9      	uxtb	r1, r3
 8007450:	4a80      	ldr	r2, [pc, #512]	; (8007654 <HAL_UART_RxCpltCallback+0x2e8>)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	4413      	add	r3, r2
 8007456:	460a      	mov	r2, r1
 8007458:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < (sizeof(digit_reply))/(sizeof(digit_reply[0])); i++){
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3301      	adds	r3, #1
 800745e:	60fb      	str	r3, [r7, #12]
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2b05      	cmp	r3, #5
 8007464:	d9ee      	bls.n	8007444 <HAL_UART_RxCpltCallback+0xd8>
   	  }
	  seq = int_converter;
 8007466:	4b7c      	ldr	r3, [pc, #496]	; (8007658 <HAL_UART_RxCpltCallback+0x2ec>)
 8007468:	4a7a      	ldr	r2, [pc, #488]	; (8007654 <HAL_UART_RxCpltCallback+0x2e8>)
 800746a:	601a      	str	r2, [r3, #0]
	  strcpy(digit_answer,  digit_reply);
 800746c:	4978      	ldr	r1, [pc, #480]	; (8007650 <HAL_UART_RxCpltCallback+0x2e4>)
 800746e:	487b      	ldr	r0, [pc, #492]	; (800765c <HAL_UART_RxCpltCallback+0x2f0>)
 8007470:	f001 fb8a 	bl	8008b88 <strcpy>

	  digit_reply[0] = '\000';
 8007474:	4b76      	ldr	r3, [pc, #472]	; (8007650 <HAL_UART_RxCpltCallback+0x2e4>)
 8007476:	2200      	movs	r2, #0
 8007478:	701a      	strb	r2, [r3, #0]

	  HAL_UART_Transmit(&huart1, waitForSpeakerDigitMessage, sizeof(waitForSpeakerDigitMessage), 100);
 800747a:	2364      	movs	r3, #100	; 0x64
 800747c:	2244      	movs	r2, #68	; 0x44
 800747e:	4978      	ldr	r1, [pc, #480]	; (8007660 <HAL_UART_RxCpltCallback+0x2f4>)
 8007480:	486a      	ldr	r0, [pc, #424]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 8007482:	f7fd ff43 	bl	800530c <HAL_UART_Transmit>

	  //send to HAL_DAC...once cmplt should ask user to start typing
	  if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  address[seq[0]], sizeof(SEQUENCE)) != QSPI_OK)
 8007486:	4b74      	ldr	r3, [pc, #464]	; (8007658 <HAL_UART_RxCpltCallback+0x2ec>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	781b      	ldrb	r3, [r3, #0]
 800748c:	461a      	mov	r2, r3
 800748e:	4b75      	ldr	r3, [pc, #468]	; (8007664 <HAL_UART_RxCpltCallback+0x2f8>)
 8007490:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007494:	4a74      	ldr	r2, [pc, #464]	; (8007668 <HAL_UART_RxCpltCallback+0x2fc>)
 8007496:	4619      	mov	r1, r3
 8007498:	4874      	ldr	r0, [pc, #464]	; (800766c <HAL_UART_RxCpltCallback+0x300>)
 800749a:	f000 fcb9 	bl	8007e10 <BSP_QSPI_Read>
 800749e:	4603      	mov	r3, r0
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d001      	beq.n	80074a8 <HAL_UART_RxCpltCallback+0x13c>
	  					Error_Handler();
 80074a4:	f000 fc26 	bl	8007cf4 <Error_Handler>
	  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 80074a8:	2300      	movs	r3, #0
 80074aa:	9300      	str	r3, [sp, #0]
 80074ac:	f649 4340 	movw	r3, #40000	; 0x9c40
 80074b0:	4a6e      	ldr	r2, [pc, #440]	; (800766c <HAL_UART_RxCpltCallback+0x300>)
 80074b2:	2100      	movs	r1, #0
 80074b4:	486e      	ldr	r0, [pc, #440]	; (8007670 <HAL_UART_RxCpltCallback+0x304>)
 80074b6:	f7f9 f9ef 	bl	8000898 <HAL_DAC_Start_DMA>


	  HAL_UART_Receive_IT(&huart1, user_Digit_answer, 6);
 80074ba:	2206      	movs	r2, #6
 80074bc:	496d      	ldr	r1, [pc, #436]	; (8007674 <HAL_UART_RxCpltCallback+0x308>)
 80074be:	485b      	ldr	r0, [pc, #364]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 80074c0:	f7fd ffbc 	bl	800543c <HAL_UART_Receive_IT>

  }
  /////////////////////////////////////////////////////////////


  if (start_yn[0] == '1'){
 80074c4:	4b57      	ldr	r3, [pc, #348]	; (8007624 <HAL_UART_RxCpltCallback+0x2b8>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b31      	cmp	r3, #49	; 0x31
 80074ca:	d115      	bne.n	80074f8 <HAL_UART_RxCpltCallback+0x18c>
	  //you are a player (player 2)
	  //game mode 0 or game mode 1
	  memset(start_yn,0,2);
 80074cc:	2202      	movs	r2, #2
 80074ce:	2100      	movs	r1, #0
 80074d0:	4854      	ldr	r0, [pc, #336]	; (8007624 <HAL_UART_RxCpltCallback+0x2b8>)
 80074d2:	f001 fb51 	bl	8008b78 <memset>
	  // send player message
	  HAL_UART_Transmit(&huart1, playerMessage, sizeof(playerMessage), 100);
 80074d6:	2364      	movs	r3, #100	; 0x64
 80074d8:	222a      	movs	r2, #42	; 0x2a
 80074da:	4967      	ldr	r1, [pc, #412]	; (8007678 <HAL_UART_RxCpltCallback+0x30c>)
 80074dc:	4853      	ldr	r0, [pc, #332]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 80074de:	f7fd ff15 	bl	800530c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, chooseModeMessage, sizeof(chooseModeMessage), 100);
 80074e2:	2364      	movs	r3, #100	; 0x64
 80074e4:	2243      	movs	r2, #67	; 0x43
 80074e6:	4950      	ldr	r1, [pc, #320]	; (8007628 <HAL_UART_RxCpltCallback+0x2bc>)
 80074e8:	4850      	ldr	r0, [pc, #320]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 80074ea:	f7fd ff0f 	bl	800530c <HAL_UART_Transmit>

	  HAL_UART_Receive_IT(&huart1, game_mode, 2);
 80074ee:	2202      	movs	r2, #2
 80074f0:	4962      	ldr	r1, [pc, #392]	; (800767c <HAL_UART_RxCpltCallback+0x310>)
 80074f2:	484e      	ldr	r0, [pc, #312]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 80074f4:	f7fd ffa2 	bl	800543c <HAL_UART_Receive_IT>
  }


/////////////////////// PLAYER Digit ////////////////////////
  if (game_mode[0] == '0'){
 80074f8:	4b60      	ldr	r3, [pc, #384]	; (800767c <HAL_UART_RxCpltCallback+0x310>)
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	2b30      	cmp	r3, #48	; 0x30
 80074fe:	d130      	bne.n	8007562 <HAL_UART_RxCpltCallback+0x1f6>
	  //you chose game mode 0 (Digits)
	  //get ready to hear the digits
	  strcpy(digit_answer,  digits);
 8007500:	495f      	ldr	r1, [pc, #380]	; (8007680 <HAL_UART_RxCpltCallback+0x314>)
 8007502:	4856      	ldr	r0, [pc, #344]	; (800765c <HAL_UART_RxCpltCallback+0x2f0>)
 8007504:	f001 fb40 	bl	8008b88 <strcpy>
	  seq = mem_seq;
 8007508:	4b53      	ldr	r3, [pc, #332]	; (8007658 <HAL_UART_RxCpltCallback+0x2ec>)
 800750a:	4a5e      	ldr	r2, [pc, #376]	; (8007684 <HAL_UART_RxCpltCallback+0x318>)
 800750c:	601a      	str	r2, [r3, #0]

	  memset(game_mode,0,2);
 800750e:	2202      	movs	r2, #2
 8007510:	2100      	movs	r1, #0
 8007512:	485a      	ldr	r0, [pc, #360]	; (800767c <HAL_UART_RxCpltCallback+0x310>)
 8007514:	f001 fb30 	bl	8008b78 <memset>
	  HAL_UART_Transmit(&huart1, waitForSpeakerDigitMessage, sizeof(waitForSpeakerDigitMessage), 100);
 8007518:	2364      	movs	r3, #100	; 0x64
 800751a:	2244      	movs	r2, #68	; 0x44
 800751c:	4950      	ldr	r1, [pc, #320]	; (8007660 <HAL_UART_RxCpltCallback+0x2f4>)
 800751e:	4843      	ldr	r0, [pc, #268]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 8007520:	f7fd fef4 	bl	800530c <HAL_UART_Transmit>

	  //send to HAL_DAC...once cmplt should ask user to start typing
	  if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  address[seq[0]], sizeof(SEQUENCE)) != QSPI_OK)
 8007524:	4b4c      	ldr	r3, [pc, #304]	; (8007658 <HAL_UART_RxCpltCallback+0x2ec>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	781b      	ldrb	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	4b4d      	ldr	r3, [pc, #308]	; (8007664 <HAL_UART_RxCpltCallback+0x2f8>)
 800752e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007532:	4a4d      	ldr	r2, [pc, #308]	; (8007668 <HAL_UART_RxCpltCallback+0x2fc>)
 8007534:	4619      	mov	r1, r3
 8007536:	484d      	ldr	r0, [pc, #308]	; (800766c <HAL_UART_RxCpltCallback+0x300>)
 8007538:	f000 fc6a 	bl	8007e10 <BSP_QSPI_Read>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d001      	beq.n	8007546 <HAL_UART_RxCpltCallback+0x1da>
	  					Error_Handler();
 8007542:	f000 fbd7 	bl	8007cf4 <Error_Handler>
	  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 8007546:	2300      	movs	r3, #0
 8007548:	9300      	str	r3, [sp, #0]
 800754a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800754e:	4a47      	ldr	r2, [pc, #284]	; (800766c <HAL_UART_RxCpltCallback+0x300>)
 8007550:	2100      	movs	r1, #0
 8007552:	4847      	ldr	r0, [pc, #284]	; (8007670 <HAL_UART_RxCpltCallback+0x304>)
 8007554:	f7f9 f9a0 	bl	8000898 <HAL_DAC_Start_DMA>

	  //HAL_UART_Transmit(&huart1, here, sizeof(here), 100);

	  HAL_UART_Receive_IT(&huart1, user_Digit_answer, 6);
 8007558:	2206      	movs	r2, #6
 800755a:	4946      	ldr	r1, [pc, #280]	; (8007674 <HAL_UART_RxCpltCallback+0x308>)
 800755c:	4833      	ldr	r0, [pc, #204]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 800755e:	f7fd ff6d 	bl	800543c <HAL_UART_Receive_IT>
  }


  //check the answer for digits
  if (user_Digit_answer[0] != '\000'){
 8007562:	4b44      	ldr	r3, [pc, #272]	; (8007674 <HAL_UART_RxCpltCallback+0x308>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d022      	beq.n	80075b0 <HAL_UART_RxCpltCallback+0x244>

	  res= strncmp(user_Digit_answer, digit_answer, 5);
 800756a:	2205      	movs	r2, #5
 800756c:	493b      	ldr	r1, [pc, #236]	; (800765c <HAL_UART_RxCpltCallback+0x2f0>)
 800756e:	4841      	ldr	r0, [pc, #260]	; (8007674 <HAL_UART_RxCpltCallback+0x308>)
 8007570:	f001 fb12 	bl	8008b98 <strncmp>
 8007574:	4603      	mov	r3, r0
 8007576:	b2da      	uxtb	r2, r3
 8007578:	4b43      	ldr	r3, [pc, #268]	; (8007688 <HAL_UART_RxCpltCallback+0x31c>)
 800757a:	701a      	strb	r2, [r3, #0]

	  if (res == 0){
 800757c:	4b42      	ldr	r3, [pc, #264]	; (8007688 <HAL_UART_RxCpltCallback+0x31c>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d106      	bne.n	8007592 <HAL_UART_RxCpltCallback+0x226>
		  HAL_UART_Transmit(&huart1, winMessage, sizeof(winMessage), 100);
 8007584:	2364      	movs	r3, #100	; 0x64
 8007586:	2215      	movs	r2, #21
 8007588:	4940      	ldr	r1, [pc, #256]	; (800768c <HAL_UART_RxCpltCallback+0x320>)
 800758a:	4828      	ldr	r0, [pc, #160]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 800758c:	f7fd febe 	bl	800530c <HAL_UART_Transmit>
 8007590:	e00b      	b.n	80075aa <HAL_UART_RxCpltCallback+0x23e>
	  }
	  else{
		  HAL_UART_Transmit(&huart1, lossMessage, sizeof(lossMessage), 100);
 8007592:	2364      	movs	r3, #100	; 0x64
 8007594:	2232      	movs	r2, #50	; 0x32
 8007596:	493e      	ldr	r1, [pc, #248]	; (8007690 <HAL_UART_RxCpltCallback+0x324>)
 8007598:	4824      	ldr	r0, [pc, #144]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 800759a:	f7fd feb7 	bl	800530c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, digit_answer, sizeof(digit_answer), 100);
 800759e:	2364      	movs	r3, #100	; 0x64
 80075a0:	2206      	movs	r2, #6
 80075a2:	492e      	ldr	r1, [pc, #184]	; (800765c <HAL_UART_RxCpltCallback+0x2f0>)
 80075a4:	4821      	ldr	r0, [pc, #132]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 80075a6:	f7fd feb1 	bl	800530c <HAL_UART_Transmit>
	  }

	  user_Digit_answer[0] = '\000';
 80075aa:	4b32      	ldr	r3, [pc, #200]	; (8007674 <HAL_UART_RxCpltCallback+0x308>)
 80075ac:	2200      	movs	r2, #0
 80075ae:	701a      	strb	r2, [r3, #0]
  ////////////////////////////////////////////////////////



  ////////////////// PLATER Direction //////////////////////////////////////
  if (game_mode[0] == '1'){
 80075b0:	4b32      	ldr	r3, [pc, #200]	; (800767c <HAL_UART_RxCpltCallback+0x310>)
 80075b2:	781b      	ldrb	r3, [r3, #0]
 80075b4:	2b31      	cmp	r3, #49	; 0x31
 80075b6:	d10a      	bne.n	80075ce <HAL_UART_RxCpltCallback+0x262>
	  //you chose game mode 1 (Directions)
	  //get ready to hear the directions
	  memset(game_mode,0,2);
 80075b8:	2202      	movs	r2, #2
 80075ba:	2100      	movs	r1, #0
 80075bc:	482f      	ldr	r0, [pc, #188]	; (800767c <HAL_UART_RxCpltCallback+0x310>)
 80075be:	f001 fadb 	bl	8008b78 <memset>
	  HAL_UART_Transmit(&huart1, waitForSpeakerDirectionMessage, sizeof(waitForSpeakerDirectionMessage), 100);
 80075c2:	2364      	movs	r3, #100	; 0x64
 80075c4:	224b      	movs	r2, #75	; 0x4b
 80075c6:	491f      	ldr	r1, [pc, #124]	; (8007644 <HAL_UART_RxCpltCallback+0x2d8>)
 80075c8:	4818      	ldr	r0, [pc, #96]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 80075ca:	f7fd fe9f 	bl	800530c <HAL_UART_Transmit>

  }

  ///// might not need this
  //check the answer for directions
  if (user_Direction_answer[0] != '\000'){
 80075ce:	4b1e      	ldr	r3, [pc, #120]	; (8007648 <HAL_UART_RxCpltCallback+0x2dc>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d022      	beq.n	800761c <HAL_UART_RxCpltCallback+0x2b0>

	  res= strncmp(user_Direction_answer, direction_answer, 5);
 80075d6:	2205      	movs	r2, #5
 80075d8:	492e      	ldr	r1, [pc, #184]	; (8007694 <HAL_UART_RxCpltCallback+0x328>)
 80075da:	481b      	ldr	r0, [pc, #108]	; (8007648 <HAL_UART_RxCpltCallback+0x2dc>)
 80075dc:	f001 fadc 	bl	8008b98 <strncmp>
 80075e0:	4603      	mov	r3, r0
 80075e2:	b2da      	uxtb	r2, r3
 80075e4:	4b28      	ldr	r3, [pc, #160]	; (8007688 <HAL_UART_RxCpltCallback+0x31c>)
 80075e6:	701a      	strb	r2, [r3, #0]

	  if (res == 0){
 80075e8:	4b27      	ldr	r3, [pc, #156]	; (8007688 <HAL_UART_RxCpltCallback+0x31c>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <HAL_UART_RxCpltCallback+0x292>
		  HAL_UART_Transmit(&huart1, winMessage, sizeof(winMessage), 100);
 80075f0:	2364      	movs	r3, #100	; 0x64
 80075f2:	2215      	movs	r2, #21
 80075f4:	4925      	ldr	r1, [pc, #148]	; (800768c <HAL_UART_RxCpltCallback+0x320>)
 80075f6:	480d      	ldr	r0, [pc, #52]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 80075f8:	f7fd fe88 	bl	800530c <HAL_UART_Transmit>
 80075fc:	e00b      	b.n	8007616 <HAL_UART_RxCpltCallback+0x2aa>
	  }
	  else{
		  HAL_UART_Transmit(&huart1, lossMessage, sizeof(lossMessage), 100);
 80075fe:	2364      	movs	r3, #100	; 0x64
 8007600:	2232      	movs	r2, #50	; 0x32
 8007602:	4923      	ldr	r1, [pc, #140]	; (8007690 <HAL_UART_RxCpltCallback+0x324>)
 8007604:	4809      	ldr	r0, [pc, #36]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 8007606:	f7fd fe81 	bl	800530c <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, direction_answer, sizeof(digit_answer), 100);
 800760a:	2364      	movs	r3, #100	; 0x64
 800760c:	2206      	movs	r2, #6
 800760e:	4921      	ldr	r1, [pc, #132]	; (8007694 <HAL_UART_RxCpltCallback+0x328>)
 8007610:	4806      	ldr	r0, [pc, #24]	; (800762c <HAL_UART_RxCpltCallback+0x2c0>)
 8007612:	f7fd fe7b 	bl	800530c <HAL_UART_Transmit>
	  }

	  user_Direction_answer[0] = '\000';
 8007616:	4b0c      	ldr	r3, [pc, #48]	; (8007648 <HAL_UART_RxCpltCallback+0x2dc>)
 8007618:	2200      	movs	r2, #0
 800761a:	701a      	strb	r2, [r3, #0]





}
 800761c:	bf00      	nop
 800761e:	3710      	adds	r7, #16
 8007620:	46bd      	mov	sp, r7
 8007622:	bd80      	pop	{r7, pc}
 8007624:	200276dc 	.word	0x200276dc
 8007628:	200000a4 	.word	0x200000a4
 800762c:	200004d0 	.word	0x200004d0
 8007630:	200276e4 	.word	0x200276e4
 8007634:	20000228 	.word	0x20000228
 8007638:	200276f8 	.word	0x200276f8
 800763c:	20000268 	.word	0x20000268
 8007640:	200001e0 	.word	0x200001e0
 8007644:	2000012c 	.word	0x2000012c
 8007648:	20027708 	.word	0x20027708
 800764c:	200001ec 	.word	0x200001ec
 8007650:	200276e8 	.word	0x200276e8
 8007654:	200276f0 	.word	0x200276f0
 8007658:	200276c8 	.word	0x200276c8
 800765c:	200276cc 	.word	0x200276cc
 8007660:	200000e8 	.word	0x200000e8
 8007664:	20000008 	.word	0x20000008
 8007668:	00027100 	.word	0x00027100
 800766c:	200005c0 	.word	0x200005c0
 8007670:	200002d4 	.word	0x200002d4
 8007674:	20027700 	.word	0x20027700
 8007678:	20000078 	.word	0x20000078
 800767c:	200276e0 	.word	0x200276e0
 8007680:	20000284 	.word	0x20000284
 8007684:	2000027c 	.word	0x2000027c
 8007688:	200276c5 	.word	0x200276c5
 800768c:	20000178 	.word	0x20000178
 8007690:	20000190 	.word	0x20000190
 8007694:	200276d4 	.word	0x200276d4

08007698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800769c:	f7f8 ff30 	bl	8000500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80076a0:	f000 f830 	bl	8007704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80076a4:	f000 fa44 	bl	8007b30 <MX_GPIO_Init>
  MX_DMA_Init();
 80076a8:	f000 fa08 	bl	8007abc <MX_DMA_Init>
  MX_DAC1_Init();
 80076ac:	f000 f87c 	bl	80077a8 <MX_DAC1_Init>
  MX_TIM2_Init();
 80076b0:	f000 f96a 	bl	8007988 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 80076b4:	f000 f8ac 	bl	8007810 <MX_DFSDM1_Init>
  MX_OCTOSPI1_Init();
 80076b8:	f000 f910 	bl	80078dc <MX_OCTOSPI1_Init>
  MX_USART1_UART_Init();
 80076bc:	f000 f9b2 	bl	8007a24 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_QSPI_Init();
 80076c0:	f000 fb28 	bl	8007d14 <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80076c4:	480a      	ldr	r0, [pc, #40]	; (80076f0 <main+0x58>)
 80076c6:	f7fd f96d 	bl	80049a4 <HAL_TIM_Base_Start_IT>


  HAL_UART_Transmit(&huart1, clearCommand, sizeof(clearCommand), 100);//clear console
 80076ca:	2364      	movs	r3, #100	; 0x64
 80076cc:	2205      	movs	r2, #5
 80076ce:	4909      	ldr	r1, [pc, #36]	; (80076f4 <main+0x5c>)
 80076d0:	4809      	ldr	r0, [pc, #36]	; (80076f8 <main+0x60>)
 80076d2:	f7fd fe1b 	bl	800530c <HAL_UART_Transmit>

  HAL_UART_Transmit(&huart1, startMessage, sizeof(startMessage), 100);// sent start message
 80076d6:	2364      	movs	r3, #100	; 0x64
 80076d8:	2245      	movs	r2, #69	; 0x45
 80076da:	4908      	ldr	r1, [pc, #32]	; (80076fc <main+0x64>)
 80076dc:	4806      	ldr	r0, [pc, #24]	; (80076f8 <main+0x60>)
 80076de:	f7fd fe15 	bl	800530c <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart1, start_yn, 2);// get user 1 or 0
 80076e2:	2202      	movs	r2, #2
 80076e4:	4906      	ldr	r1, [pc, #24]	; (8007700 <main+0x68>)
 80076e6:	4804      	ldr	r0, [pc, #16]	; (80076f8 <main+0x60>)
 80076e8:	f7fd fea8 	bl	800543c <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80076ec:	e7fe      	b.n	80076ec <main+0x54>
 80076ee:	bf00      	nop
 80076f0:	20000484 	.word	0x20000484
 80076f4:	20000268 	.word	0x20000268
 80076f8:	200004d0 	.word	0x200004d0
 80076fc:	20000030 	.word	0x20000030
 8007700:	200276dc 	.word	0x200276dc

08007704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007704:	b580      	push	{r7, lr}
 8007706:	b096      	sub	sp, #88	; 0x58
 8007708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800770a:	f107 0314 	add.w	r3, r7, #20
 800770e:	2244      	movs	r2, #68	; 0x44
 8007710:	2100      	movs	r1, #0
 8007712:	4618      	mov	r0, r3
 8007714:	f001 fa30 	bl	8008b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007718:	463b      	mov	r3, r7
 800771a:	2200      	movs	r2, #0
 800771c:	601a      	str	r2, [r3, #0]
 800771e:	605a      	str	r2, [r3, #4]
 8007720:	609a      	str	r2, [r3, #8]
 8007722:	60da      	str	r2, [r3, #12]
 8007724:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007726:	f44f 7000 	mov.w	r0, #512	; 0x200
 800772a:	f7fb fc4f 	bl	8002fcc <HAL_PWREx_ControlVoltageScaling>
 800772e:	4603      	mov	r3, r0
 8007730:	2b00      	cmp	r3, #0
 8007732:	d001      	beq.n	8007738 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8007734:	f000 fade 	bl	8007cf4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8007738:	2310      	movs	r3, #16
 800773a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800773c:	2301      	movs	r3, #1
 800773e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8007740:	2300      	movs	r3, #0
 8007742:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8007744:	2360      	movs	r3, #96	; 0x60
 8007746:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007748:	2302      	movs	r3, #2
 800774a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800774c:	2301      	movs	r3, #1
 800774e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8007750:	2301      	movs	r3, #1
 8007752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8007754:	2328      	movs	r3, #40	; 0x28
 8007756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007758:	2302      	movs	r3, #2
 800775a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800775c:	2302      	movs	r3, #2
 800775e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007760:	2302      	movs	r3, #2
 8007762:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007764:	f107 0314 	add.w	r3, r7, #20
 8007768:	4618      	mov	r0, r3
 800776a:	f7fb fcd3 	bl	8003114 <HAL_RCC_OscConfig>
 800776e:	4603      	mov	r3, r0
 8007770:	2b00      	cmp	r3, #0
 8007772:	d001      	beq.n	8007778 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8007774:	f000 fabe 	bl	8007cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007778:	230f      	movs	r3, #15
 800777a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800777c:	2303      	movs	r3, #3
 800777e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007780:	2300      	movs	r3, #0
 8007782:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007784:	2300      	movs	r3, #0
 8007786:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007788:	2300      	movs	r3, #0
 800778a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800778c:	463b      	mov	r3, r7
 800778e:	2103      	movs	r1, #3
 8007790:	4618      	mov	r0, r3
 8007792:	f7fc f8d9 	bl	8003948 <HAL_RCC_ClockConfig>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	d001      	beq.n	80077a0 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800779c:	f000 faaa 	bl	8007cf4 <Error_Handler>
  }
}
 80077a0:	bf00      	nop
 80077a2:	3758      	adds	r7, #88	; 0x58
 80077a4:	46bd      	mov	sp, r7
 80077a6:	bd80      	pop	{r7, pc}

080077a8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08a      	sub	sp, #40	; 0x28
 80077ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80077ae:	463b      	mov	r3, r7
 80077b0:	2228      	movs	r2, #40	; 0x28
 80077b2:	2100      	movs	r1, #0
 80077b4:	4618      	mov	r0, r3
 80077b6:	f001 f9df 	bl	8008b78 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80077ba:	4b13      	ldr	r3, [pc, #76]	; (8007808 <MX_DAC1_Init+0x60>)
 80077bc:	4a13      	ldr	r2, [pc, #76]	; (800780c <MX_DAC1_Init+0x64>)
 80077be:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80077c0:	4811      	ldr	r0, [pc, #68]	; (8007808 <MX_DAC1_Init+0x60>)
 80077c2:	f7f9 f846 	bl	8000852 <HAL_DAC_Init>
 80077c6:	4603      	mov	r3, r0
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d001      	beq.n	80077d0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80077cc:	f000 fa92 	bl	8007cf4 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80077d0:	2300      	movs	r3, #0
 80077d2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80077d4:	230a      	movs	r3, #10
 80077d6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80077d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077dc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80077de:	2300      	movs	r3, #0
 80077e0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80077e2:	2300      	movs	r3, #0
 80077e4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80077e6:	2300      	movs	r3, #0
 80077e8:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80077ea:	463b      	mov	r3, r7
 80077ec:	2200      	movs	r2, #0
 80077ee:	4619      	mov	r1, r3
 80077f0:	4805      	ldr	r0, [pc, #20]	; (8007808 <MX_DAC1_Init+0x60>)
 80077f2:	f7f9 f977 	bl	8000ae4 <HAL_DAC_ConfigChannel>
 80077f6:	4603      	mov	r3, r0
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d001      	beq.n	8007800 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80077fc:	f000 fa7a 	bl	8007cf4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8007800:	bf00      	nop
 8007802:	3728      	adds	r7, #40	; 0x28
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}
 8007808:	200002d4 	.word	0x200002d4
 800780c:	40007400 	.word	0x40007400

08007810 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8007814:	4b2c      	ldr	r3, [pc, #176]	; (80078c8 <MX_DFSDM1_Init+0xb8>)
 8007816:	4a2d      	ldr	r2, [pc, #180]	; (80078cc <MX_DFSDM1_Init+0xbc>)
 8007818:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800781a:	4b2b      	ldr	r3, [pc, #172]	; (80078c8 <MX_DFSDM1_Init+0xb8>)
 800781c:	2200      	movs	r2, #0
 800781e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8007820:	4b29      	ldr	r3, [pc, #164]	; (80078c8 <MX_DFSDM1_Init+0xb8>)
 8007822:	2201      	movs	r2, #1
 8007824:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8007826:	4b28      	ldr	r3, [pc, #160]	; (80078c8 <MX_DFSDM1_Init+0xb8>)
 8007828:	2201      	movs	r2, #1
 800782a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800782c:	4b26      	ldr	r3, [pc, #152]	; (80078c8 <MX_DFSDM1_Init+0xb8>)
 800782e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8007832:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 240;
 8007834:	4b24      	ldr	r3, [pc, #144]	; (80078c8 <MX_DFSDM1_Init+0xb8>)
 8007836:	22f0      	movs	r2, #240	; 0xf0
 8007838:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800783a:	4b23      	ldr	r3, [pc, #140]	; (80078c8 <MX_DFSDM1_Init+0xb8>)
 800783c:	2201      	movs	r2, #1
 800783e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8007840:	4821      	ldr	r0, [pc, #132]	; (80078c8 <MX_DFSDM1_Init+0xb8>)
 8007842:	f7f9 fbd9 	bl	8000ff8 <HAL_DFSDM_FilterInit>
 8007846:	4603      	mov	r3, r0
 8007848:	2b00      	cmp	r3, #0
 800784a:	d001      	beq.n	8007850 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 800784c:	f000 fa52 	bl	8007cf4 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8007850:	4b1f      	ldr	r3, [pc, #124]	; (80078d0 <MX_DFSDM1_Init+0xc0>)
 8007852:	4a20      	ldr	r2, [pc, #128]	; (80078d4 <MX_DFSDM1_Init+0xc4>)
 8007854:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8007856:	4b1e      	ldr	r3, [pc, #120]	; (80078d0 <MX_DFSDM1_Init+0xc0>)
 8007858:	2201      	movs	r2, #1
 800785a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800785c:	4b1c      	ldr	r3, [pc, #112]	; (80078d0 <MX_DFSDM1_Init+0xc0>)
 800785e:	2200      	movs	r2, #0
 8007860:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 8007862:	4b1b      	ldr	r3, [pc, #108]	; (80078d0 <MX_DFSDM1_Init+0xc0>)
 8007864:	2222      	movs	r2, #34	; 0x22
 8007866:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8007868:	4b19      	ldr	r3, [pc, #100]	; (80078d0 <MX_DFSDM1_Init+0xc0>)
 800786a:	2200      	movs	r2, #0
 800786c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800786e:	4b18      	ldr	r3, [pc, #96]	; (80078d0 <MX_DFSDM1_Init+0xc0>)
 8007870:	2200      	movs	r2, #0
 8007872:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8007874:	4b16      	ldr	r3, [pc, #88]	; (80078d0 <MX_DFSDM1_Init+0xc0>)
 8007876:	2200      	movs	r2, #0
 8007878:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800787a:	4b15      	ldr	r3, [pc, #84]	; (80078d0 <MX_DFSDM1_Init+0xc0>)
 800787c:	2200      	movs	r2, #0
 800787e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8007880:	4b13      	ldr	r3, [pc, #76]	; (80078d0 <MX_DFSDM1_Init+0xc0>)
 8007882:	2204      	movs	r2, #4
 8007884:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8007886:	4b12      	ldr	r3, [pc, #72]	; (80078d0 <MX_DFSDM1_Init+0xc0>)
 8007888:	2200      	movs	r2, #0
 800788a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800788c:	4b10      	ldr	r3, [pc, #64]	; (80078d0 <MX_DFSDM1_Init+0xc0>)
 800788e:	2201      	movs	r2, #1
 8007890:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8007892:	4b0f      	ldr	r3, [pc, #60]	; (80078d0 <MX_DFSDM1_Init+0xc0>)
 8007894:	2200      	movs	r2, #0
 8007896:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8007898:	4b0d      	ldr	r3, [pc, #52]	; (80078d0 <MX_DFSDM1_Init+0xc0>)
 800789a:	2200      	movs	r2, #0
 800789c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800789e:	480c      	ldr	r0, [pc, #48]	; (80078d0 <MX_DFSDM1_Init+0xc0>)
 80078a0:	f7f9 faea 	bl	8000e78 <HAL_DFSDM_ChannelInit>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d001      	beq.n	80078ae <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 80078aa:	f000 fa23 	bl	8007cf4 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 80078ae:	2201      	movs	r2, #1
 80078b0:	4909      	ldr	r1, [pc, #36]	; (80078d8 <MX_DFSDM1_Init+0xc8>)
 80078b2:	4805      	ldr	r0, [pc, #20]	; (80078c8 <MX_DFSDM1_Init+0xb8>)
 80078b4:	f7f9 fc7a 	bl	80011ac <HAL_DFSDM_FilterConfigRegChannel>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 80078be:	f000 fa19 	bl	8007cf4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80078c2:	bf00      	nop
 80078c4:	bd80      	pop	{r7, pc}
 80078c6:	bf00      	nop
 80078c8:	20000348 	.word	0x20000348
 80078cc:	40016100 	.word	0x40016100
 80078d0:	2000039c 	.word	0x2000039c
 80078d4:	40016040 	.word	0x40016040
 80078d8:	00020004 	.word	0x00020004

080078dc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b086      	sub	sp, #24
 80078e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80078e2:	1d3b      	adds	r3, r7, #4
 80078e4:	2200      	movs	r2, #0
 80078e6:	601a      	str	r2, [r3, #0]
 80078e8:	605a      	str	r2, [r3, #4]
 80078ea:	609a      	str	r2, [r3, #8]
 80078ec:	60da      	str	r2, [r3, #12]
 80078ee:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80078f0:	4b23      	ldr	r3, [pc, #140]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 80078f2:	4a24      	ldr	r2, [pc, #144]	; (8007984 <MX_OCTOSPI1_Init+0xa8>)
 80078f4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80078f6:	4b22      	ldr	r3, [pc, #136]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 80078f8:	2201      	movs	r2, #1
 80078fa:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80078fc:	4b20      	ldr	r3, [pc, #128]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 80078fe:	2200      	movs	r2, #0
 8007900:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8007902:	4b1f      	ldr	r3, [pc, #124]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 8007904:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007908:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 800790a:	4b1d      	ldr	r3, [pc, #116]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 800790c:	2220      	movs	r2, #32
 800790e:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8007910:	4b1b      	ldr	r3, [pc, #108]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 8007912:	2201      	movs	r2, #1
 8007914:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8007916:	4b1a      	ldr	r3, [pc, #104]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 8007918:	2200      	movs	r2, #0
 800791a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800791c:	4b18      	ldr	r3, [pc, #96]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 800791e:	2200      	movs	r2, #0
 8007920:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8007922:	4b17      	ldr	r3, [pc, #92]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 8007924:	2201      	movs	r2, #1
 8007926:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8007928:	4b15      	ldr	r3, [pc, #84]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 800792a:	2200      	movs	r2, #0
 800792c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800792e:	4b14      	ldr	r3, [pc, #80]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 8007930:	2200      	movs	r2, #0
 8007932:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8007934:	4b12      	ldr	r3, [pc, #72]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 8007936:	2200      	movs	r2, #0
 8007938:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800793a:	4b11      	ldr	r3, [pc, #68]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 800793c:	2208      	movs	r2, #8
 800793e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8007940:	480f      	ldr	r0, [pc, #60]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 8007942:	f7fa faa7 	bl	8001e94 <HAL_OSPI_Init>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 800794c:	f000 f9d2 	bl	8007cf4 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8007950:	2301      	movs	r3, #1
 8007952:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8007954:	2301      	movs	r3, #1
 8007956:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8007958:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800795c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800795e:	1d3b      	adds	r3, r7, #4
 8007960:	f241 3288 	movw	r2, #5000	; 0x1388
 8007964:	4619      	mov	r1, r3
 8007966:	4806      	ldr	r0, [pc, #24]	; (8007980 <MX_OCTOSPI1_Init+0xa4>)
 8007968:	f7fa fd92 	bl	8002490 <HAL_OSPIM_Config>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8007972:	f000 f9bf 	bl	8007cf4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8007976:	bf00      	nop
 8007978:	3718      	adds	r7, #24
 800797a:	46bd      	mov	sp, r7
 800797c:	bd80      	pop	{r7, pc}
 800797e:	bf00      	nop
 8007980:	20000434 	.word	0x20000434
 8007984:	a0001000 	.word	0xa0001000

08007988 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b088      	sub	sp, #32
 800798c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800798e:	f107 0310 	add.w	r3, r7, #16
 8007992:	2200      	movs	r2, #0
 8007994:	601a      	str	r2, [r3, #0]
 8007996:	605a      	str	r2, [r3, #4]
 8007998:	609a      	str	r2, [r3, #8]
 800799a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800799c:	1d3b      	adds	r3, r7, #4
 800799e:	2200      	movs	r2, #0
 80079a0:	601a      	str	r2, [r3, #0]
 80079a2:	605a      	str	r2, [r3, #4]
 80079a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80079a6:	4b1e      	ldr	r3, [pc, #120]	; (8007a20 <MX_TIM2_Init+0x98>)
 80079a8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80079ac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80079ae:	4b1c      	ldr	r3, [pc, #112]	; (8007a20 <MX_TIM2_Init+0x98>)
 80079b0:	2200      	movs	r2, #0
 80079b2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80079b4:	4b1a      	ldr	r3, [pc, #104]	; (8007a20 <MX_TIM2_Init+0x98>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 80079ba:	4b19      	ldr	r3, [pc, #100]	; (8007a20 <MX_TIM2_Init+0x98>)
 80079bc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80079c0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80079c2:	4b17      	ldr	r3, [pc, #92]	; (8007a20 <MX_TIM2_Init+0x98>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80079c8:	4b15      	ldr	r3, [pc, #84]	; (8007a20 <MX_TIM2_Init+0x98>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80079ce:	4814      	ldr	r0, [pc, #80]	; (8007a20 <MX_TIM2_Init+0x98>)
 80079d0:	f7fc ff90 	bl	80048f4 <HAL_TIM_Base_Init>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80079da:	f000 f98b 	bl	8007cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80079de:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80079e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80079e4:	f107 0310 	add.w	r3, r7, #16
 80079e8:	4619      	mov	r1, r3
 80079ea:	480d      	ldr	r0, [pc, #52]	; (8007a20 <MX_TIM2_Init+0x98>)
 80079ec:	f7fd f969 	bl	8004cc2 <HAL_TIM_ConfigClockSource>
 80079f0:	4603      	mov	r3, r0
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d001      	beq.n	80079fa <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80079f6:	f000 f97d 	bl	8007cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80079fa:	2320      	movs	r3, #32
 80079fc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007a02:	1d3b      	adds	r3, r7, #4
 8007a04:	4619      	mov	r1, r3
 8007a06:	4806      	ldr	r0, [pc, #24]	; (8007a20 <MX_TIM2_Init+0x98>)
 8007a08:	f7fd fb8a 	bl	8005120 <HAL_TIMEx_MasterConfigSynchronization>
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d001      	beq.n	8007a16 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8007a12:	f000 f96f 	bl	8007cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007a16:	bf00      	nop
 8007a18:	3720      	adds	r7, #32
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}
 8007a1e:	bf00      	nop
 8007a20:	20000484 	.word	0x20000484

08007a24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007a24:	b580      	push	{r7, lr}
 8007a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007a28:	4b22      	ldr	r3, [pc, #136]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007a2a:	4a23      	ldr	r2, [pc, #140]	; (8007ab8 <MX_USART1_UART_Init+0x94>)
 8007a2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007a2e:	4b21      	ldr	r3, [pc, #132]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007a34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007a36:	4b1f      	ldr	r3, [pc, #124]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007a38:	2200      	movs	r2, #0
 8007a3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007a3c:	4b1d      	ldr	r3, [pc, #116]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007a42:	4b1c      	ldr	r3, [pc, #112]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007a44:	2200      	movs	r2, #0
 8007a46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007a48:	4b1a      	ldr	r3, [pc, #104]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007a4a:	220c      	movs	r2, #12
 8007a4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a4e:	4b19      	ldr	r3, [pc, #100]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a54:	4b17      	ldr	r3, [pc, #92]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007a5a:	4b16      	ldr	r3, [pc, #88]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007a60:	4b14      	ldr	r3, [pc, #80]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007a62:	2200      	movs	r2, #0
 8007a64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007a66:	4b13      	ldr	r3, [pc, #76]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007a68:	2200      	movs	r2, #0
 8007a6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007a6c:	4811      	ldr	r0, [pc, #68]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007a6e:	f7fd fbfd 	bl	800526c <HAL_UART_Init>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d001      	beq.n	8007a7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007a78:	f000 f93c 	bl	8007cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007a7c:	2100      	movs	r1, #0
 8007a7e:	480d      	ldr	r0, [pc, #52]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007a80:	f7ff fba9 	bl	80071d6 <HAL_UARTEx_SetTxFifoThreshold>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d001      	beq.n	8007a8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007a8a:	f000 f933 	bl	8007cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007a8e:	2100      	movs	r1, #0
 8007a90:	4808      	ldr	r0, [pc, #32]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007a92:	f7ff fbde 	bl	8007252 <HAL_UARTEx_SetRxFifoThreshold>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007a9c:	f000 f92a 	bl	8007cf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007aa0:	4804      	ldr	r0, [pc, #16]	; (8007ab4 <MX_USART1_UART_Init+0x90>)
 8007aa2:	f7ff fb5f 	bl	8007164 <HAL_UARTEx_DisableFifoMode>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007aac:	f000 f922 	bl	8007cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007ab0:	bf00      	nop
 8007ab2:	bd80      	pop	{r7, pc}
 8007ab4:	200004d0 	.word	0x200004d0
 8007ab8:	40013800 	.word	0x40013800

08007abc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007ac2:	4b1a      	ldr	r3, [pc, #104]	; (8007b2c <MX_DMA_Init+0x70>)
 8007ac4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ac6:	4a19      	ldr	r2, [pc, #100]	; (8007b2c <MX_DMA_Init+0x70>)
 8007ac8:	f043 0304 	orr.w	r3, r3, #4
 8007acc:	6493      	str	r3, [r2, #72]	; 0x48
 8007ace:	4b17      	ldr	r3, [pc, #92]	; (8007b2c <MX_DMA_Init+0x70>)
 8007ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ad2:	f003 0304 	and.w	r3, r3, #4
 8007ad6:	607b      	str	r3, [r7, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007ada:	4b14      	ldr	r3, [pc, #80]	; (8007b2c <MX_DMA_Init+0x70>)
 8007adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ade:	4a13      	ldr	r2, [pc, #76]	; (8007b2c <MX_DMA_Init+0x70>)
 8007ae0:	f043 0301 	orr.w	r3, r3, #1
 8007ae4:	6493      	str	r3, [r2, #72]	; 0x48
 8007ae6:	4b11      	ldr	r3, [pc, #68]	; (8007b2c <MX_DMA_Init+0x70>)
 8007ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aea:	f003 0301 	and.w	r3, r3, #1
 8007aee:	603b      	str	r3, [r7, #0]
 8007af0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8007af2:	2200      	movs	r2, #0
 8007af4:	2100      	movs	r1, #0
 8007af6:	200b      	movs	r0, #11
 8007af8:	f7f8 fe75 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8007afc:	200b      	movs	r0, #11
 8007afe:	f7f8 fe8e 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007b02:	2200      	movs	r2, #0
 8007b04:	2100      	movs	r1, #0
 8007b06:	200c      	movs	r0, #12
 8007b08:	f7f8 fe6d 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007b0c:	200c      	movs	r0, #12
 8007b0e:	f7f8 fe86 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007b12:	2200      	movs	r2, #0
 8007b14:	2100      	movs	r1, #0
 8007b16:	200d      	movs	r0, #13
 8007b18:	f7f8 fe65 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8007b1c:	200d      	movs	r0, #13
 8007b1e:	f7f8 fe7e 	bl	800081e <HAL_NVIC_EnableIRQ>

}
 8007b22:	bf00      	nop
 8007b24:	3708      	adds	r7, #8
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bd80      	pop	{r7, pc}
 8007b2a:	bf00      	nop
 8007b2c:	40021000 	.word	0x40021000

08007b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b08a      	sub	sp, #40	; 0x28
 8007b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b36:	f107 0314 	add.w	r3, r7, #20
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	601a      	str	r2, [r3, #0]
 8007b3e:	605a      	str	r2, [r3, #4]
 8007b40:	609a      	str	r2, [r3, #8]
 8007b42:	60da      	str	r2, [r3, #12]
 8007b44:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007b46:	4b39      	ldr	r3, [pc, #228]	; (8007c2c <MX_GPIO_Init+0xfc>)
 8007b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b4a:	4a38      	ldr	r2, [pc, #224]	; (8007c2c <MX_GPIO_Init+0xfc>)
 8007b4c:	f043 0310 	orr.w	r3, r3, #16
 8007b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b52:	4b36      	ldr	r3, [pc, #216]	; (8007c2c <MX_GPIO_Init+0xfc>)
 8007b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b56:	f003 0310 	and.w	r3, r3, #16
 8007b5a:	613b      	str	r3, [r7, #16]
 8007b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007b5e:	4b33      	ldr	r3, [pc, #204]	; (8007c2c <MX_GPIO_Init+0xfc>)
 8007b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b62:	4a32      	ldr	r2, [pc, #200]	; (8007c2c <MX_GPIO_Init+0xfc>)
 8007b64:	f043 0304 	orr.w	r3, r3, #4
 8007b68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b6a:	4b30      	ldr	r3, [pc, #192]	; (8007c2c <MX_GPIO_Init+0xfc>)
 8007b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b6e:	f003 0304 	and.w	r3, r3, #4
 8007b72:	60fb      	str	r3, [r7, #12]
 8007b74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b76:	4b2d      	ldr	r3, [pc, #180]	; (8007c2c <MX_GPIO_Init+0xfc>)
 8007b78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b7a:	4a2c      	ldr	r2, [pc, #176]	; (8007c2c <MX_GPIO_Init+0xfc>)
 8007b7c:	f043 0301 	orr.w	r3, r3, #1
 8007b80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b82:	4b2a      	ldr	r3, [pc, #168]	; (8007c2c <MX_GPIO_Init+0xfc>)
 8007b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b86:	f003 0301 	and.w	r3, r3, #1
 8007b8a:	60bb      	str	r3, [r7, #8]
 8007b8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b8e:	4b27      	ldr	r3, [pc, #156]	; (8007c2c <MX_GPIO_Init+0xfc>)
 8007b90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b92:	4a26      	ldr	r2, [pc, #152]	; (8007c2c <MX_GPIO_Init+0xfc>)
 8007b94:	f043 0302 	orr.w	r3, r3, #2
 8007b98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b9a:	4b24      	ldr	r3, [pc, #144]	; (8007c2c <MX_GPIO_Init+0xfc>)
 8007b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b9e:	f003 0302 	and.w	r3, r3, #2
 8007ba2:	607b      	str	r3, [r7, #4]
 8007ba4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
 8007ba6:	2200      	movs	r2, #0
 8007ba8:	2108      	movs	r1, #8
 8007baa:	4821      	ldr	r0, [pc, #132]	; (8007c30 <MX_GPIO_Init+0x100>)
 8007bac:	f7fa f942 	bl	8001e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007bb6:	481f      	ldr	r0, [pc, #124]	; (8007c34 <MX_GPIO_Init+0x104>)
 8007bb8:	f7fa f93c 	bl	8001e34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : redLED_Pin */
  GPIO_InitStruct.Pin = redLED_Pin;
 8007bbc:	2308      	movs	r3, #8
 8007bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(redLED_GPIO_Port, &GPIO_InitStruct);
 8007bcc:	f107 0314 	add.w	r3, r7, #20
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	4817      	ldr	r0, [pc, #92]	; (8007c30 <MX_GPIO_Init+0x100>)
 8007bd4:	f7f9 feaa 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : pushButton_Pin */
  GPIO_InitStruct.Pin = pushButton_Pin;
 8007bd8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007bdc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007bde:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8007be2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pushButton_GPIO_Port, &GPIO_InitStruct);
 8007be8:	f107 0314 	add.w	r3, r7, #20
 8007bec:	4619      	mov	r1, r3
 8007bee:	4812      	ldr	r0, [pc, #72]	; (8007c38 <MX_GPIO_Init+0x108>)
 8007bf0:	f7f9 fe9c 	bl	800192c <HAL_GPIO_Init>

  /*Configure GPIO pin : greenLED_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin;
 8007bf4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bfe:	2300      	movs	r3, #0
 8007c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007c02:	2300      	movs	r3, #0
 8007c04:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(greenLED_GPIO_Port, &GPIO_InitStruct);
 8007c06:	f107 0314 	add.w	r3, r7, #20
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	4809      	ldr	r0, [pc, #36]	; (8007c34 <MX_GPIO_Init+0x104>)
 8007c0e:	f7f9 fe8d 	bl	800192c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8007c12:	2200      	movs	r2, #0
 8007c14:	2100      	movs	r1, #0
 8007c16:	2028      	movs	r0, #40	; 0x28
 8007c18:	f7f8 fde5 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007c1c:	2028      	movs	r0, #40	; 0x28
 8007c1e:	f7f8 fdfe 	bl	800081e <HAL_NVIC_EnableIRQ>

}
 8007c22:	bf00      	nop
 8007c24:	3728      	adds	r7, #40	; 0x28
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	40021000 	.word	0x40021000
 8007c30:	48001000 	.word	0x48001000
 8007c34:	48000400 	.word	0x48000400
 8007c38:	48000800 	.word	0x48000800

08007c3c <HAL_GPIO_EXTI_Callback>:





void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007c3c:	b480      	push	{r7}
 8007c3e:	b083      	sub	sp, #12
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	4603      	mov	r3, r0
 8007c44:	80fb      	strh	r3, [r7, #6]
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);

		}
*/
	}
}
 8007c46:	bf00      	nop
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
	...

08007c54 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8007c54:	b580      	push	{r7, lr}
 8007c56:	b084      	sub	sp, #16
 8007c58:	af02      	add	r7, sp, #8
 8007c5a:	6078      	str	r0, [r7, #4]

	j = j + 1;
 8007c5c:	4b1c      	ldr	r3, [pc, #112]	; (8007cd0 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	3301      	adds	r3, #1
 8007c62:	b2da      	uxtb	r2, r3
 8007c64:	4b1a      	ldr	r3, [pc, #104]	; (8007cd0 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 8007c66:	701a      	strb	r2, [r3, #0]
	addy = address[seq[j]];
 8007c68:	4b1a      	ldr	r3, [pc, #104]	; (8007cd4 <HAL_DAC_ConvCpltCallbackCh1+0x80>)
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a18      	ldr	r2, [pc, #96]	; (8007cd0 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 8007c6e:	7812      	ldrb	r2, [r2, #0]
 8007c70:	4413      	add	r3, r2
 8007c72:	781b      	ldrb	r3, [r3, #0]
 8007c74:	461a      	mov	r2, r3
 8007c76:	4b18      	ldr	r3, [pc, #96]	; (8007cd8 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 8007c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c7c:	461a      	mov	r2, r3
 8007c7e:	4b17      	ldr	r3, [pc, #92]	; (8007cdc <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 8007c80:	601a      	str	r2, [r3, #0]
	if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addy, sizeof(SEQUENCE)) != QSPI_OK)
 8007c82:	4b16      	ldr	r3, [pc, #88]	; (8007cdc <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a16      	ldr	r2, [pc, #88]	; (8007ce0 <HAL_DAC_ConvCpltCallbackCh1+0x8c>)
 8007c88:	4619      	mov	r1, r3
 8007c8a:	4816      	ldr	r0, [pc, #88]	; (8007ce4 <HAL_DAC_ConvCpltCallbackCh1+0x90>)
 8007c8c:	f000 f8c0 	bl	8007e10 <BSP_QSPI_Read>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d001      	beq.n	8007c9a <HAL_DAC_ConvCpltCallbackCh1+0x46>
		Error_Handler();
 8007c96:	f000 f82d 	bl	8007cf4 <Error_Handler>

	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	9300      	str	r3, [sp, #0]
 8007c9e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007ca2:	4a10      	ldr	r2, [pc, #64]	; (8007ce4 <HAL_DAC_ConvCpltCallbackCh1+0x90>)
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	4810      	ldr	r0, [pc, #64]	; (8007ce8 <HAL_DAC_ConvCpltCallbackCh1+0x94>)
 8007ca8:	f7f8 fdf6 	bl	8000898 <HAL_DAC_Start_DMA>

	if (j == 5) {
 8007cac:	4b08      	ldr	r3, [pc, #32]	; (8007cd0 <HAL_DAC_ConvCpltCallbackCh1+0x7c>)
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	2b05      	cmp	r3, #5
 8007cb2:	d109      	bne.n	8007cc8 <HAL_DAC_ConvCpltCallbackCh1+0x74>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8007cb4:	2100      	movs	r1, #0
 8007cb6:	480c      	ldr	r0, [pc, #48]	; (8007ce8 <HAL_DAC_ConvCpltCallbackCh1+0x94>)
 8007cb8:	f7f8 feba 	bl	8000a30 <HAL_DAC_Stop_DMA>
		HAL_UART_Transmit(&huart1, startTypingMessage, sizeof(startTypingMessage), 100);
 8007cbc:	2364      	movs	r3, #100	; 0x64
 8007cbe:	221c      	movs	r2, #28
 8007cc0:	490a      	ldr	r1, [pc, #40]	; (8007cec <HAL_DAC_ConvCpltCallbackCh1+0x98>)
 8007cc2:	480b      	ldr	r0, [pc, #44]	; (8007cf0 <HAL_DAC_ConvCpltCallbackCh1+0x9c>)
 8007cc4:	f7fd fb22 	bl	800530c <HAL_UART_Transmit>
	}

}
 8007cc8:	bf00      	nop
 8007cca:	3708      	adds	r7, #8
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	bd80      	pop	{r7, pc}
 8007cd0:	200276c4 	.word	0x200276c4
 8007cd4:	200276c8 	.word	0x200276c8
 8007cd8:	20000008 	.word	0x20000008
 8007cdc:	200276c0 	.word	0x200276c0
 8007ce0:	00027100 	.word	0x00027100
 8007ce4:	200005c0 	.word	0x200005c0
 8007ce8:	200002d4 	.word	0x200002d4
 8007cec:	200001c4 	.word	0x200001c4
 8007cf0:	200004d0 	.word	0x200004d0

08007cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	//HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
	//HAL_GPIO_TogglePin(greenLED_GPIO_Port, greenLED_Pin);
	HAL_UART_Transmit(&huart1, here, sizeof(here), 100);
 8007cf8:	2364      	movs	r3, #100	; 0x64
 8007cfa:	220c      	movs	r2, #12
 8007cfc:	4903      	ldr	r1, [pc, #12]	; (8007d0c <Error_Handler+0x18>)
 8007cfe:	4804      	ldr	r0, [pc, #16]	; (8007d10 <Error_Handler+0x1c>)
 8007d00:	f7fd fb04 	bl	800530c <HAL_UART_Transmit>
	__BKPT();
 8007d04:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 8007d06:	bf00      	nop
 8007d08:	bd80      	pop	{r7, pc}
 8007d0a:	bf00      	nop
 8007d0c:	20000270 	.word	0x20000270
 8007d10:	200004d0 	.word	0x200004d0

08007d14 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b084      	sub	sp, #16
 8007d18:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 8007d1a:	4b3b      	ldr	r3, [pc, #236]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007d1c:	4a3b      	ldr	r2, [pc, #236]	; (8007e0c <BSP_QSPI_Init+0xf8>)
 8007d1e:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 8007d20:	4839      	ldr	r0, [pc, #228]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007d22:	f7fa f961 	bl	8001fe8 <HAL_OSPI_DeInit>
 8007d26:	4603      	mov	r3, r0
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d001      	beq.n	8007d30 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 8007d2c:	2301      	movs	r3, #1
 8007d2e:	e067      	b.n	8007e00 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8007d30:	f000 f8c0 	bl	8007eb4 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8007d34:	4b34      	ldr	r3, [pc, #208]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007d36:	2204      	movs	r2, #4
 8007d38:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 8007d3a:	4b33      	ldr	r3, [pc, #204]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8007d40:	4b31      	ldr	r3, [pc, #196]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007d42:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007d46:	60da      	str	r2, [r3, #12]
 8007d48:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007d4c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	fa93 f3a3 	rbit	r3, r3
 8007d54:	607b      	str	r3, [r7, #4]
  return result;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d101      	bne.n	8007d64 <BSP_QSPI_Init+0x50>
    return 32U;
 8007d60:	2320      	movs	r3, #32
 8007d62:	e003      	b.n	8007d6c <BSP_QSPI_Init+0x58>
  return __builtin_clz(value);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	fab3 f383 	clz	r3, r3
 8007d6a:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 8007d6c:	461a      	mov	r2, r3
 8007d6e:	4b26      	ldr	r3, [pc, #152]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007d70:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8007d72:	4b25      	ldr	r3, [pc, #148]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007d74:	2201      	movs	r2, #1
 8007d76:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8007d78:	4b23      	ldr	r3, [pc, #140]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 8007d7e:	4b22      	ldr	r3, [pc, #136]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007d80:	2200      	movs	r2, #0
 8007d82:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8007d84:	4b20      	ldr	r3, [pc, #128]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007d86:	2204      	movs	r2, #4
 8007d88:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8007d8a:	4b1f      	ldr	r3, [pc, #124]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8007d90:	4b1d      	ldr	r3, [pc, #116]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007d92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d96:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8007d98:	4b1b      	ldr	r3, [pc, #108]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 8007d9e:	4b1a      	ldr	r3, [pc, #104]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8007da4:	4818      	ldr	r0, [pc, #96]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007da6:	f7fa f875 	bl	8001e94 <HAL_OSPI_Init>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d001      	beq.n	8007db4 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8007db0:	2301      	movs	r3, #1
 8007db2:	e025      	b.n	8007e00 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8007db4:	4814      	ldr	r0, [pc, #80]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007db6:	f000 f8bd 	bl	8007f34 <QSPI_ResetMemory>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8007dc0:	2304      	movs	r3, #4
 8007dc2:	e01d      	b.n	8007e00 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8007dc4:	2101      	movs	r1, #1
 8007dc6:	4810      	ldr	r0, [pc, #64]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007dc8:	f000 f9a2 	bl	8008110 <QSPI_QuadMode>
 8007dcc:	4603      	mov	r3, r0
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	e014      	b.n	8007e00 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8007dd6:	2101      	movs	r1, #1
 8007dd8:	480b      	ldr	r0, [pc, #44]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007dda:	f000 fa45 	bl	8008268 <QSPI_HighPerfMode>
 8007dde:	4603      	mov	r3, r0
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d001      	beq.n	8007de8 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e00b      	b.n	8007e00 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 8007de8:	4b07      	ldr	r3, [pc, #28]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007dea:	2202      	movs	r2, #2
 8007dec:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8007dee:	4806      	ldr	r0, [pc, #24]	; (8007e08 <BSP_QSPI_Init+0xf4>)
 8007df0:	f7fa f850 	bl	8001e94 <HAL_OSPI_Init>
 8007df4:	4603      	mov	r3, r0
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d001      	beq.n	8007dfe <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e000      	b.n	8007e00 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 8007dfe:	2300      	movs	r3, #0
}
 8007e00:	4618      	mov	r0, r3
 8007e02:	3710      	adds	r7, #16
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	20027710 	.word	0x20027710
 8007e0c:	a0001000 	.word	0xa0001000

08007e10 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b098      	sub	sp, #96	; 0x60
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	60f8      	str	r0, [r7, #12]
 8007e18:	60b9      	str	r1, [r7, #8]
 8007e1a:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 8007e20:	2300      	movs	r3, #0
 8007e22:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 8007e24:	23eb      	movs	r3, #235	; 0xeb
 8007e26:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 8007e28:	2301      	movs	r3, #1
 8007e2a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007e30:	2300      	movs	r3, #0
 8007e32:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 8007e34:	68bb      	ldr	r3, [r7, #8]
 8007e36:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8007e38:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 8007e3e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007e42:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007e44:	2300      	movs	r3, #0
 8007e46:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8007e48:	23aa      	movs	r3, #170	; 0xaa
 8007e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 8007e4c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8007e50:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 8007e52:	2300      	movs	r3, #0
 8007e54:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 8007e56:	2300      	movs	r3, #0
 8007e58:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 8007e5a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 8007e5e:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8007e64:	2300      	movs	r3, #0
 8007e66:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8007e68:	2304      	movs	r3, #4
 8007e6a:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007e70:	2300      	movs	r3, #0
 8007e72:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007e74:	f107 0310 	add.w	r3, r7, #16
 8007e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e7c:	4619      	mov	r1, r3
 8007e7e:	480c      	ldr	r0, [pc, #48]	; (8007eb0 <BSP_QSPI_Read+0xa0>)
 8007e80:	f7fa f8d9 	bl	8002036 <HAL_OSPI_Command>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d001      	beq.n	8007e8e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 8007e8a:	2301      	movs	r3, #1
 8007e8c:	e00b      	b.n	8007ea6 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e92:	68f9      	ldr	r1, [r7, #12]
 8007e94:	4806      	ldr	r0, [pc, #24]	; (8007eb0 <BSP_QSPI_Read+0xa0>)
 8007e96:	f7fa f9c2 	bl	800221e <HAL_OSPI_Receive>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	d001      	beq.n	8007ea4 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	e000      	b.n	8007ea6 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3760      	adds	r7, #96	; 0x60
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20027710 	.word	0x20027710

08007eb4 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b088      	sub	sp, #32
 8007eb8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 8007eba:	4b1c      	ldr	r3, [pc, #112]	; (8007f2c <BSP_QSPI_MspInit+0x78>)
 8007ebc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ebe:	4a1b      	ldr	r2, [pc, #108]	; (8007f2c <BSP_QSPI_MspInit+0x78>)
 8007ec0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ec4:	6513      	str	r3, [r2, #80]	; 0x50
 8007ec6:	4b19      	ldr	r3, [pc, #100]	; (8007f2c <BSP_QSPI_MspInit+0x78>)
 8007ec8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ece:	60bb      	str	r3, [r7, #8]
 8007ed0:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8007ed2:	4b16      	ldr	r3, [pc, #88]	; (8007f2c <BSP_QSPI_MspInit+0x78>)
 8007ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ed6:	4a15      	ldr	r2, [pc, #84]	; (8007f2c <BSP_QSPI_MspInit+0x78>)
 8007ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007edc:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 8007ede:	4b13      	ldr	r3, [pc, #76]	; (8007f2c <BSP_QSPI_MspInit+0x78>)
 8007ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ee2:	4a12      	ldr	r2, [pc, #72]	; (8007f2c <BSP_QSPI_MspInit+0x78>)
 8007ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ee8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007eea:	4b10      	ldr	r3, [pc, #64]	; (8007f2c <BSP_QSPI_MspInit+0x78>)
 8007eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007eee:	4a0f      	ldr	r2, [pc, #60]	; (8007f2c <BSP_QSPI_MspInit+0x78>)
 8007ef0:	f043 0310 	orr.w	r3, r3, #16
 8007ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ef6:	4b0d      	ldr	r3, [pc, #52]	; (8007f2c <BSP_QSPI_MspInit+0x78>)
 8007ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007efa:	f003 0310 	and.w	r3, r3, #16
 8007efe:	607b      	str	r3, [r7, #4]
 8007f00:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8007f02:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8007f06:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007f08:	2302      	movs	r3, #2
 8007f0a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f10:	2303      	movs	r3, #3
 8007f12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8007f14:	230a      	movs	r3, #10
 8007f16:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007f18:	f107 030c 	add.w	r3, r7, #12
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	4804      	ldr	r0, [pc, #16]	; (8007f30 <BSP_QSPI_MspInit+0x7c>)
 8007f20:	f7f9 fd04 	bl	800192c <HAL_GPIO_Init>
}
 8007f24:	bf00      	nop
 8007f26:	3720      	adds	r7, #32
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	40021000 	.word	0x40021000
 8007f30:	48001000 	.word	0x48001000

08007f34 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b096      	sub	sp, #88	; 0x58
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007f40:	2300      	movs	r3, #0
 8007f42:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8007f44:	2366      	movs	r3, #102	; 0x66
 8007f46:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007f50:	2300      	movs	r3, #0
 8007f52:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007f54:	2300      	movs	r3, #0
 8007f56:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007f58:	2300      	movs	r3, #0
 8007f5a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8007f60:	2300      	movs	r3, #0
 8007f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007f64:	2300      	movs	r3, #0
 8007f66:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007f6c:	f107 0308 	add.w	r3, r7, #8
 8007f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f74:	4619      	mov	r1, r3
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fa f85d 	bl	8002036 <HAL_OSPI_Command>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 8007f82:	2301      	movs	r3, #1
 8007f84:	e019      	b.n	8007fba <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8007f86:	2399      	movs	r3, #153	; 0x99
 8007f88:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007f8a:	f107 0308 	add.w	r3, r7, #8
 8007f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f92:	4619      	mov	r1, r3
 8007f94:	6878      	ldr	r0, [r7, #4]
 8007f96:	f7fa f84e 	bl	8002036 <HAL_OSPI_Command>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d001      	beq.n	8007fa4 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8007fa0:	2301      	movs	r3, #1
 8007fa2:	e00a      	b.n	8007fba <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007fa4:	f241 3188 	movw	r1, #5000	; 0x1388
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f866 	bl	800807a <QSPI_AutoPollingMemReady>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d001      	beq.n	8007fb8 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8007fb4:	2301      	movs	r3, #1
 8007fb6:	e000      	b.n	8007fba <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 8007fb8:	2300      	movs	r3, #0
}
 8007fba:	4618      	mov	r0, r3
 8007fbc:	3758      	adds	r7, #88	; 0x58
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}

08007fc2 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8007fc2:	b580      	push	{r7, lr}
 8007fc4:	b09c      	sub	sp, #112	; 0x70
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8007fd2:	2306      	movs	r3, #6
 8007fd4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8007fea:	2300      	movs	r3, #0
 8007fec:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 8007fee:	2300      	movs	r3, #0
 8007ff0:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007ffa:	f107 0320 	add.w	r3, r7, #32
 8007ffe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008002:	4619      	mov	r1, r3
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f7fa f816 	bl	8002036 <HAL_OSPI_Command>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d001      	beq.n	8008014 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e02e      	b.n	8008072 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8008014:	2302      	movs	r3, #2
 8008016:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8008018:	2302      	movs	r3, #2
 800801a:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800801c:	2300      	movs	r3, #0
 800801e:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8008020:	2310      	movs	r3, #16
 8008022:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8008024:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008028:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800802a:	2305      	movs	r3, #5
 800802c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 800802e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008032:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8008034:	2301      	movs	r3, #1
 8008036:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8008038:	2300      	movs	r3, #0
 800803a:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800803c:	f107 0320 	add.w	r3, r7, #32
 8008040:	f241 3288 	movw	r2, #5000	; 0x1388
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7f9 fff5 	bl	8002036 <HAL_OSPI_Command>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d001      	beq.n	8008056 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 8008052:	2301      	movs	r3, #1
 8008054:	e00d      	b.n	8008072 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008056:	f107 030c 	add.w	r3, r7, #12
 800805a:	f241 3288 	movw	r2, #5000	; 0x1388
 800805e:	4619      	mov	r1, r3
 8008060:	6878      	ldr	r0, [r7, #4]
 8008062:	f7fa f97f 	bl	8002364 <HAL_OSPI_AutoPolling>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	d001      	beq.n	8008070 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	e000      	b.n	8008072 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 8008070:	2300      	movs	r3, #0
}
 8008072:	4618      	mov	r0, r3
 8008074:	3770      	adds	r7, #112	; 0x70
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b09c      	sub	sp, #112	; 0x70
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
 8008082:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008084:	2300      	movs	r3, #0
 8008086:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008088:	2300      	movs	r3, #0
 800808a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800808c:	2305      	movs	r3, #5
 800808e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8008090:	2301      	movs	r3, #1
 8008092:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8008094:	2300      	movs	r3, #0
 8008096:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008098:	2300      	movs	r3, #0
 800809a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800809c:	2300      	movs	r3, #0
 800809e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80080a0:	2300      	movs	r3, #0
 80080a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80080a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80080a8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 80080aa:	2301      	movs	r3, #1
 80080ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80080ae:	2300      	movs	r3, #0
 80080b0:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 80080b2:	2300      	movs	r3, #0
 80080b4:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80080b6:	2300      	movs	r3, #0
 80080b8:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80080ba:	2300      	movs	r3, #0
 80080bc:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 80080c2:	2301      	movs	r3, #1
 80080c4:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80080c6:	2300      	movs	r3, #0
 80080c8:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 80080ca:	2310      	movs	r3, #16
 80080cc:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80080ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80080d2:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80080d4:	f107 0320 	add.w	r3, r7, #32
 80080d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80080dc:	4619      	mov	r1, r3
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f7f9 ffa9 	bl	8002036 <HAL_OSPI_Command>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d001      	beq.n	80080ee <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e00c      	b.n	8008108 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 80080ee:	f107 030c 	add.w	r3, r7, #12
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	4619      	mov	r1, r3
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7fa f934 	bl	8002364 <HAL_OSPI_AutoPolling>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d001      	beq.n	8008106 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8008102:	2301      	movs	r3, #1
 8008104:	e000      	b.n	8008108 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8008106:	2300      	movs	r3, #0
}
 8008108:	4618      	mov	r0, r3
 800810a:	3770      	adds	r7, #112	; 0x70
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b098      	sub	sp, #96	; 0x60
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	460b      	mov	r3, r1
 800811a:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800811c:	2300      	movs	r3, #0
 800811e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008120:	2300      	movs	r3, #0
 8008122:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8008124:	2305      	movs	r3, #5
 8008126:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8008128:	2301      	movs	r3, #1
 800812a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800812c:	2300      	movs	r3, #0
 800812e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008130:	2300      	movs	r3, #0
 8008132:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8008134:	2300      	movs	r3, #0
 8008136:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008138:	2300      	movs	r3, #0
 800813a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800813c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008140:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8008142:	2300      	movs	r3, #0
 8008144:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8008146:	2300      	movs	r3, #0
 8008148:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800814a:	2301      	movs	r3, #1
 800814c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800814e:	2300      	movs	r3, #0
 8008150:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8008152:	2300      	movs	r3, #0
 8008154:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008156:	f107 0310 	add.w	r3, r7, #16
 800815a:	f241 3288 	movw	r2, #5000	; 0x1388
 800815e:	4619      	mov	r1, r3
 8008160:	6878      	ldr	r0, [r7, #4]
 8008162:	f7f9 ff68 	bl	8002036 <HAL_OSPI_Command>
 8008166:	4603      	mov	r3, r0
 8008168:	2b00      	cmp	r3, #0
 800816a:	d001      	beq.n	8008170 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 800816c:	2301      	movs	r3, #1
 800816e:	e077      	b.n	8008260 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008170:	f107 030f 	add.w	r3, r7, #15
 8008174:	f241 3288 	movw	r2, #5000	; 0x1388
 8008178:	4619      	mov	r1, r3
 800817a:	6878      	ldr	r0, [r7, #4]
 800817c:	f7fa f84f 	bl	800221e <HAL_OSPI_Receive>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 8008186:	2301      	movs	r3, #1
 8008188:	e06a      	b.n	8008260 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 800818a:	6878      	ldr	r0, [r7, #4]
 800818c:	f7ff ff19 	bl	8007fc2 <QSPI_WriteEnable>
 8008190:	4603      	mov	r3, r0
 8008192:	2b00      	cmp	r3, #0
 8008194:	d001      	beq.n	800819a <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e062      	b.n	8008260 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 800819a:	78fb      	ldrb	r3, [r7, #3]
 800819c:	2b01      	cmp	r3, #1
 800819e:	d105      	bne.n	80081ac <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081a6:	b2db      	uxtb	r3, r3
 80081a8:	73fb      	strb	r3, [r7, #15]
 80081aa:	e004      	b.n	80081b6 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 80081ac:	7bfb      	ldrb	r3, [r7, #15]
 80081ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 80081b6:	2301      	movs	r3, #1
 80081b8:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80081ba:	f107 0310 	add.w	r3, r7, #16
 80081be:	f241 3288 	movw	r2, #5000	; 0x1388
 80081c2:	4619      	mov	r1, r3
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f7f9 ff36 	bl	8002036 <HAL_OSPI_Command>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d001      	beq.n	80081d4 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 80081d0:	2301      	movs	r3, #1
 80081d2:	e045      	b.n	8008260 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80081d4:	f107 030f 	add.w	r3, r7, #15
 80081d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081dc:	4619      	mov	r1, r3
 80081de:	6878      	ldr	r0, [r7, #4]
 80081e0:	f7f9 ffaa 	bl	8002138 <HAL_OSPI_Transmit>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d001      	beq.n	80081ee <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 80081ea:	2301      	movs	r3, #1
 80081ec:	e038      	b.n	8008260 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80081ee:	f241 3188 	movw	r1, #5000	; 0x1388
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f7ff ff41 	bl	800807a <QSPI_AutoPollingMemReady>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d001      	beq.n	8008202 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e02e      	b.n	8008260 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8008202:	2305      	movs	r3, #5
 8008204:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008206:	f107 0310 	add.w	r3, r7, #16
 800820a:	f241 3288 	movw	r2, #5000	; 0x1388
 800820e:	4619      	mov	r1, r3
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7f9 ff10 	bl	8002036 <HAL_OSPI_Command>
 8008216:	4603      	mov	r3, r0
 8008218:	2b00      	cmp	r3, #0
 800821a:	d001      	beq.n	8008220 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e01f      	b.n	8008260 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008220:	f107 030f 	add.w	r3, r7, #15
 8008224:	f241 3288 	movw	r2, #5000	; 0x1388
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f7f9 fff7 	bl	800221e <HAL_OSPI_Receive>
 8008230:	4603      	mov	r3, r0
 8008232:	2b00      	cmp	r3, #0
 8008234:	d001      	beq.n	800823a <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8008236:	2301      	movs	r3, #1
 8008238:	e012      	b.n	8008260 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800823a:	7bfb      	ldrb	r3, [r7, #15]
 800823c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008240:	2b00      	cmp	r3, #0
 8008242:	d102      	bne.n	800824a <QSPI_QuadMode+0x13a>
 8008244:	78fb      	ldrb	r3, [r7, #3]
 8008246:	2b01      	cmp	r3, #1
 8008248:	d007      	beq.n	800825a <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8008250:	2b00      	cmp	r3, #0
 8008252:	d004      	beq.n	800825e <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8008254:	78fb      	ldrb	r3, [r7, #3]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d101      	bne.n	800825e <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 800825a:	2301      	movs	r3, #1
 800825c:	e000      	b.n	8008260 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 800825e:	2300      	movs	r3, #0
}
 8008260:	4618      	mov	r0, r3
 8008262:	3760      	adds	r7, #96	; 0x60
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b098      	sub	sp, #96	; 0x60
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8008274:	2300      	movs	r3, #0
 8008276:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8008278:	2300      	movs	r3, #0
 800827a:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800827c:	2305      	movs	r3, #5
 800827e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8008280:	2301      	movs	r3, #1
 8008282:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8008284:	2300      	movs	r3, #0
 8008286:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8008288:	2300      	movs	r3, #0
 800828a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800828c:	2300      	movs	r3, #0
 800828e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8008290:	2300      	movs	r3, #0
 8008292:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8008294:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008298:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800829a:	2300      	movs	r3, #0
 800829c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800829e:	2300      	movs	r3, #0
 80082a0:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 80082a2:	2301      	movs	r3, #1
 80082a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80082a6:	2300      	movs	r3, #0
 80082a8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80082aa:	2300      	movs	r3, #0
 80082ac:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80082ae:	f107 0310 	add.w	r3, r7, #16
 80082b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80082b6:	4619      	mov	r1, r3
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f7f9 febc 	bl	8002036 <HAL_OSPI_Command>
 80082be:	4603      	mov	r3, r0
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d001      	beq.n	80082c8 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 80082c4:	2301      	movs	r3, #1
 80082c6:	e09a      	b.n	80083fe <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80082c8:	f107 030c 	add.w	r3, r7, #12
 80082cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80082d0:	4619      	mov	r1, r3
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f7f9 ffa3 	bl	800221e <HAL_OSPI_Receive>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d001      	beq.n	80082e2 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 80082de:	2301      	movs	r3, #1
 80082e0:	e08d      	b.n	80083fe <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 80082e2:	2315      	movs	r3, #21
 80082e4:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 80082e6:	2302      	movs	r3, #2
 80082e8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80082ea:	f107 0310 	add.w	r3, r7, #16
 80082ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80082f2:	4619      	mov	r1, r3
 80082f4:	6878      	ldr	r0, [r7, #4]
 80082f6:	f7f9 fe9e 	bl	8002036 <HAL_OSPI_Command>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d001      	beq.n	8008304 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8008300:	2301      	movs	r3, #1
 8008302:	e07c      	b.n	80083fe <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008304:	f107 030c 	add.w	r3, r7, #12
 8008308:	3301      	adds	r3, #1
 800830a:	f241 3288 	movw	r2, #5000	; 0x1388
 800830e:	4619      	mov	r1, r3
 8008310:	6878      	ldr	r0, [r7, #4]
 8008312:	f7f9 ff84 	bl	800221e <HAL_OSPI_Receive>
 8008316:	4603      	mov	r3, r0
 8008318:	2b00      	cmp	r3, #0
 800831a:	d001      	beq.n	8008320 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 800831c:	2301      	movs	r3, #1
 800831e:	e06e      	b.n	80083fe <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8008320:	6878      	ldr	r0, [r7, #4]
 8008322:	f7ff fe4e 	bl	8007fc2 <QSPI_WriteEnable>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e066      	b.n	80083fe <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8008330:	78fb      	ldrb	r3, [r7, #3]
 8008332:	2b01      	cmp	r3, #1
 8008334:	d105      	bne.n	8008342 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8008336:	7bbb      	ldrb	r3, [r7, #14]
 8008338:	f043 0302 	orr.w	r3, r3, #2
 800833c:	b2db      	uxtb	r3, r3
 800833e:	73bb      	strb	r3, [r7, #14]
 8008340:	e004      	b.n	800834c <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8008342:	7bbb      	ldrb	r3, [r7, #14]
 8008344:	f023 0302 	bic.w	r3, r3, #2
 8008348:	b2db      	uxtb	r3, r3
 800834a:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800834c:	2301      	movs	r3, #1
 800834e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8008350:	2303      	movs	r3, #3
 8008352:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8008354:	f107 0310 	add.w	r3, r7, #16
 8008358:	f241 3288 	movw	r2, #5000	; 0x1388
 800835c:	4619      	mov	r1, r3
 800835e:	6878      	ldr	r0, [r7, #4]
 8008360:	f7f9 fe69 	bl	8002036 <HAL_OSPI_Command>
 8008364:	4603      	mov	r3, r0
 8008366:	2b00      	cmp	r3, #0
 8008368:	d001      	beq.n	800836e <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 800836a:	2301      	movs	r3, #1
 800836c:	e047      	b.n	80083fe <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800836e:	f107 030c 	add.w	r3, r7, #12
 8008372:	f241 3288 	movw	r2, #5000	; 0x1388
 8008376:	4619      	mov	r1, r3
 8008378:	6878      	ldr	r0, [r7, #4]
 800837a:	f7f9 fedd 	bl	8002138 <HAL_OSPI_Transmit>
 800837e:	4603      	mov	r3, r0
 8008380:	2b00      	cmp	r3, #0
 8008382:	d001      	beq.n	8008388 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e03a      	b.n	80083fe <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8008388:	f241 3188 	movw	r1, #5000	; 0x1388
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f7ff fe74 	bl	800807a <QSPI_AutoPollingMemReady>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	e030      	b.n	80083fe <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800839c:	2315      	movs	r3, #21
 800839e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 80083a0:	2302      	movs	r3, #2
 80083a2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80083a4:	f107 0310 	add.w	r3, r7, #16
 80083a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7f9 fe41 	bl	8002036 <HAL_OSPI_Command>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	e01f      	b.n	80083fe <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80083be:	f107 030c 	add.w	r3, r7, #12
 80083c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f7f9 ff28 	bl	800221e <HAL_OSPI_Receive>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d001      	beq.n	80083d8 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 80083d4:	2301      	movs	r3, #1
 80083d6:	e012      	b.n	80083fe <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80083d8:	7b7b      	ldrb	r3, [r7, #13]
 80083da:	f003 0302 	and.w	r3, r3, #2
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d102      	bne.n	80083e8 <QSPI_HighPerfMode+0x180>
 80083e2:	78fb      	ldrb	r3, [r7, #3]
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d007      	beq.n	80083f8 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80083e8:	7b7b      	ldrb	r3, [r7, #13]
 80083ea:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d004      	beq.n	80083fc <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 80083f2:	78fb      	ldrb	r3, [r7, #3]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d101      	bne.n	80083fc <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 80083f8:	2301      	movs	r3, #1
 80083fa:	e000      	b.n	80083fe <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 80083fc:	2300      	movs	r3, #0
}
 80083fe:	4618      	mov	r0, r3
 8008400:	3760      	adds	r7, #96	; 0x60
 8008402:	46bd      	mov	sp, r7
 8008404:	bd80      	pop	{r7, pc}
	...

08008408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800840e:	4b0f      	ldr	r3, [pc, #60]	; (800844c <HAL_MspInit+0x44>)
 8008410:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008412:	4a0e      	ldr	r2, [pc, #56]	; (800844c <HAL_MspInit+0x44>)
 8008414:	f043 0301 	orr.w	r3, r3, #1
 8008418:	6613      	str	r3, [r2, #96]	; 0x60
 800841a:	4b0c      	ldr	r3, [pc, #48]	; (800844c <HAL_MspInit+0x44>)
 800841c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800841e:	f003 0301 	and.w	r3, r3, #1
 8008422:	607b      	str	r3, [r7, #4]
 8008424:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008426:	4b09      	ldr	r3, [pc, #36]	; (800844c <HAL_MspInit+0x44>)
 8008428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800842a:	4a08      	ldr	r2, [pc, #32]	; (800844c <HAL_MspInit+0x44>)
 800842c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008430:	6593      	str	r3, [r2, #88]	; 0x58
 8008432:	4b06      	ldr	r3, [pc, #24]	; (800844c <HAL_MspInit+0x44>)
 8008434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800843e:	bf00      	nop
 8008440:	370c      	adds	r7, #12
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	40021000 	.word	0x40021000

08008450 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b08a      	sub	sp, #40	; 0x28
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008458:	f107 0314 	add.w	r3, r7, #20
 800845c:	2200      	movs	r2, #0
 800845e:	601a      	str	r2, [r3, #0]
 8008460:	605a      	str	r2, [r3, #4]
 8008462:	609a      	str	r2, [r3, #8]
 8008464:	60da      	str	r2, [r3, #12]
 8008466:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	4a2b      	ldr	r2, [pc, #172]	; (800851c <HAL_DAC_MspInit+0xcc>)
 800846e:	4293      	cmp	r3, r2
 8008470:	d14f      	bne.n	8008512 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8008472:	4b2b      	ldr	r3, [pc, #172]	; (8008520 <HAL_DAC_MspInit+0xd0>)
 8008474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008476:	4a2a      	ldr	r2, [pc, #168]	; (8008520 <HAL_DAC_MspInit+0xd0>)
 8008478:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800847c:	6593      	str	r3, [r2, #88]	; 0x58
 800847e:	4b28      	ldr	r3, [pc, #160]	; (8008520 <HAL_DAC_MspInit+0xd0>)
 8008480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008482:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008486:	613b      	str	r3, [r7, #16]
 8008488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800848a:	4b25      	ldr	r3, [pc, #148]	; (8008520 <HAL_DAC_MspInit+0xd0>)
 800848c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800848e:	4a24      	ldr	r2, [pc, #144]	; (8008520 <HAL_DAC_MspInit+0xd0>)
 8008490:	f043 0301 	orr.w	r3, r3, #1
 8008494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008496:	4b22      	ldr	r3, [pc, #136]	; (8008520 <HAL_DAC_MspInit+0xd0>)
 8008498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800849a:	f003 0301 	and.w	r3, r3, #1
 800849e:	60fb      	str	r3, [r7, #12]
 80084a0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80084a2:	2310      	movs	r3, #16
 80084a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80084a6:	2303      	movs	r3, #3
 80084a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084aa:	2300      	movs	r3, #0
 80084ac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80084ae:	f107 0314 	add.w	r3, r7, #20
 80084b2:	4619      	mov	r1, r3
 80084b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80084b8:	f7f9 fa38 	bl	800192c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 80084bc:	4b19      	ldr	r3, [pc, #100]	; (8008524 <HAL_DAC_MspInit+0xd4>)
 80084be:	4a1a      	ldr	r2, [pc, #104]	; (8008528 <HAL_DAC_MspInit+0xd8>)
 80084c0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 80084c2:	4b18      	ldr	r3, [pc, #96]	; (8008524 <HAL_DAC_MspInit+0xd4>)
 80084c4:	2206      	movs	r2, #6
 80084c6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80084c8:	4b16      	ldr	r3, [pc, #88]	; (8008524 <HAL_DAC_MspInit+0xd4>)
 80084ca:	2210      	movs	r2, #16
 80084cc:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80084ce:	4b15      	ldr	r3, [pc, #84]	; (8008524 <HAL_DAC_MspInit+0xd4>)
 80084d0:	2200      	movs	r2, #0
 80084d2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80084d4:	4b13      	ldr	r3, [pc, #76]	; (8008524 <HAL_DAC_MspInit+0xd4>)
 80084d6:	2280      	movs	r2, #128	; 0x80
 80084d8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80084da:	4b12      	ldr	r3, [pc, #72]	; (8008524 <HAL_DAC_MspInit+0xd4>)
 80084dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084e0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80084e2:	4b10      	ldr	r3, [pc, #64]	; (8008524 <HAL_DAC_MspInit+0xd4>)
 80084e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80084e8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 80084ea:	4b0e      	ldr	r3, [pc, #56]	; (8008524 <HAL_DAC_MspInit+0xd4>)
 80084ec:	2200      	movs	r2, #0
 80084ee:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80084f0:	4b0c      	ldr	r3, [pc, #48]	; (8008524 <HAL_DAC_MspInit+0xd4>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 80084f6:	480b      	ldr	r0, [pc, #44]	; (8008524 <HAL_DAC_MspInit+0xd4>)
 80084f8:	f7f8 feea 	bl	80012d0 <HAL_DMA_Init>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8008502:	f7ff fbf7 	bl	8007cf4 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	4a06      	ldr	r2, [pc, #24]	; (8008524 <HAL_DAC_MspInit+0xd4>)
 800850a:	609a      	str	r2, [r3, #8]
 800850c:	4a05      	ldr	r2, [pc, #20]	; (8008524 <HAL_DAC_MspInit+0xd4>)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8008512:	bf00      	nop
 8008514:	3728      	adds	r7, #40	; 0x28
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
 800851a:	bf00      	nop
 800851c:	40007400 	.word	0x40007400
 8008520:	40021000 	.word	0x40021000
 8008524:	200002e8 	.word	0x200002e8
 8008528:	40020008 	.word	0x40020008

0800852c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800852c:	b580      	push	{r7, lr}
 800852e:	b0ae      	sub	sp, #184	; 0xb8
 8008530:	af00      	add	r7, sp, #0
 8008532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008534:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008538:	2200      	movs	r2, #0
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	605a      	str	r2, [r3, #4]
 800853e:	609a      	str	r2, [r3, #8]
 8008540:	60da      	str	r2, [r3, #12]
 8008542:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008544:	f107 0310 	add.w	r3, r7, #16
 8008548:	2294      	movs	r2, #148	; 0x94
 800854a:	2100      	movs	r1, #0
 800854c:	4618      	mov	r0, r3
 800854e:	f000 fb13 	bl	8008b78 <memset>
  if(DFSDM1_Init == 0)
 8008552:	4b45      	ldr	r3, [pc, #276]	; (8008668 <HAL_DFSDM_FilterMspInit+0x13c>)
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d14b      	bne.n	80085f2 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800855a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800855e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8008560:	2300      	movs	r3, #0
 8008562:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008566:	f107 0310 	add.w	r3, r7, #16
 800856a:	4618      	mov	r0, r3
 800856c:	f7fb fcaa 	bl	8003ec4 <HAL_RCCEx_PeriphCLKConfig>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d001      	beq.n	800857a <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8008576:	f7ff fbbd 	bl	8007cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800857a:	4b3c      	ldr	r3, [pc, #240]	; (800866c <HAL_DFSDM_FilterMspInit+0x140>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	3301      	adds	r3, #1
 8008580:	4a3a      	ldr	r2, [pc, #232]	; (800866c <HAL_DFSDM_FilterMspInit+0x140>)
 8008582:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8008584:	4b39      	ldr	r3, [pc, #228]	; (800866c <HAL_DFSDM_FilterMspInit+0x140>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	2b01      	cmp	r3, #1
 800858a:	d10b      	bne.n	80085a4 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800858c:	4b38      	ldr	r3, [pc, #224]	; (8008670 <HAL_DFSDM_FilterMspInit+0x144>)
 800858e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008590:	4a37      	ldr	r2, [pc, #220]	; (8008670 <HAL_DFSDM_FilterMspInit+0x144>)
 8008592:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008596:	6613      	str	r3, [r2, #96]	; 0x60
 8008598:	4b35      	ldr	r3, [pc, #212]	; (8008670 <HAL_DFSDM_FilterMspInit+0x144>)
 800859a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800859c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80085a0:	60fb      	str	r3, [r7, #12]
 80085a2:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80085a4:	4b32      	ldr	r3, [pc, #200]	; (8008670 <HAL_DFSDM_FilterMspInit+0x144>)
 80085a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085a8:	4a31      	ldr	r2, [pc, #196]	; (8008670 <HAL_DFSDM_FilterMspInit+0x144>)
 80085aa:	f043 0310 	orr.w	r3, r3, #16
 80085ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80085b0:	4b2f      	ldr	r3, [pc, #188]	; (8008670 <HAL_DFSDM_FilterMspInit+0x144>)
 80085b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085b4:	f003 0310 	and.w	r3, r3, #16
 80085b8:	60bb      	str	r3, [r7, #8]
 80085ba:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 80085bc:	f44f 7320 	mov.w	r3, #640	; 0x280
 80085c0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085c4:	2302      	movs	r3, #2
 80085c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085ca:	2300      	movs	r3, #0
 80085cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80085d0:	2300      	movs	r3, #0
 80085d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80085d6:	2306      	movs	r3, #6
 80085d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80085dc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80085e0:	4619      	mov	r1, r3
 80085e2:	4824      	ldr	r0, [pc, #144]	; (8008674 <HAL_DFSDM_FilterMspInit+0x148>)
 80085e4:	f7f9 f9a2 	bl	800192c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80085e8:	4b1f      	ldr	r3, [pc, #124]	; (8008668 <HAL_DFSDM_FilterMspInit+0x13c>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	3301      	adds	r3, #1
 80085ee:	4a1e      	ldr	r2, [pc, #120]	; (8008668 <HAL_DFSDM_FilterMspInit+0x13c>)
 80085f0:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	4a20      	ldr	r2, [pc, #128]	; (8008678 <HAL_DFSDM_FilterMspInit+0x14c>)
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d130      	bne.n	800865e <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 80085fc:	4b1f      	ldr	r3, [pc, #124]	; (800867c <HAL_DFSDM_FilterMspInit+0x150>)
 80085fe:	4a20      	ldr	r2, [pc, #128]	; (8008680 <HAL_DFSDM_FilterMspInit+0x154>)
 8008600:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8008602:	4b1e      	ldr	r3, [pc, #120]	; (800867c <HAL_DFSDM_FilterMspInit+0x150>)
 8008604:	2256      	movs	r2, #86	; 0x56
 8008606:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008608:	4b1c      	ldr	r3, [pc, #112]	; (800867c <HAL_DFSDM_FilterMspInit+0x150>)
 800860a:	2200      	movs	r2, #0
 800860c:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800860e:	4b1b      	ldr	r3, [pc, #108]	; (800867c <HAL_DFSDM_FilterMspInit+0x150>)
 8008610:	2200      	movs	r2, #0
 8008612:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8008614:	4b19      	ldr	r3, [pc, #100]	; (800867c <HAL_DFSDM_FilterMspInit+0x150>)
 8008616:	2280      	movs	r2, #128	; 0x80
 8008618:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800861a:	4b18      	ldr	r3, [pc, #96]	; (800867c <HAL_DFSDM_FilterMspInit+0x150>)
 800861c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008620:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008622:	4b16      	ldr	r3, [pc, #88]	; (800867c <HAL_DFSDM_FilterMspInit+0x150>)
 8008624:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008628:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 800862a:	4b14      	ldr	r3, [pc, #80]	; (800867c <HAL_DFSDM_FilterMspInit+0x150>)
 800862c:	2200      	movs	r2, #0
 800862e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8008630:	4b12      	ldr	r3, [pc, #72]	; (800867c <HAL_DFSDM_FilterMspInit+0x150>)
 8008632:	2200      	movs	r2, #0
 8008634:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8008636:	4811      	ldr	r0, [pc, #68]	; (800867c <HAL_DFSDM_FilterMspInit+0x150>)
 8008638:	f7f8 fe4a 	bl	80012d0 <HAL_DMA_Init>
 800863c:	4603      	mov	r3, r0
 800863e:	2b00      	cmp	r3, #0
 8008640:	d001      	beq.n	8008646 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8008642:	f7ff fb57 	bl	8007cf4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	4a0c      	ldr	r2, [pc, #48]	; (800867c <HAL_DFSDM_FilterMspInit+0x150>)
 800864a:	62da      	str	r2, [r3, #44]	; 0x2c
 800864c:	4a0b      	ldr	r2, [pc, #44]	; (800867c <HAL_DFSDM_FilterMspInit+0x150>)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	4a09      	ldr	r2, [pc, #36]	; (800867c <HAL_DFSDM_FilterMspInit+0x150>)
 8008656:	629a      	str	r2, [r3, #40]	; 0x28
 8008658:	4a08      	ldr	r2, [pc, #32]	; (800867c <HAL_DFSDM_FilterMspInit+0x150>)
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800865e:	bf00      	nop
 8008660:	37b8      	adds	r7, #184	; 0xb8
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20027764 	.word	0x20027764
 800866c:	20027760 	.word	0x20027760
 8008670:	40021000 	.word	0x40021000
 8008674:	48001000 	.word	0x48001000
 8008678:	40016100 	.word	0x40016100
 800867c:	200003d4 	.word	0x200003d4
 8008680:	4002001c 	.word	0x4002001c

08008684 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8008684:	b580      	push	{r7, lr}
 8008686:	b0ae      	sub	sp, #184	; 0xb8
 8008688:	af00      	add	r7, sp, #0
 800868a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800868c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008690:	2200      	movs	r2, #0
 8008692:	601a      	str	r2, [r3, #0]
 8008694:	605a      	str	r2, [r3, #4]
 8008696:	609a      	str	r2, [r3, #8]
 8008698:	60da      	str	r2, [r3, #12]
 800869a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800869c:	f107 0310 	add.w	r3, r7, #16
 80086a0:	2294      	movs	r2, #148	; 0x94
 80086a2:	2100      	movs	r1, #0
 80086a4:	4618      	mov	r0, r3
 80086a6:	f000 fa67 	bl	8008b78 <memset>
  if(DFSDM1_Init == 0)
 80086aa:	4b2a      	ldr	r3, [pc, #168]	; (8008754 <HAL_DFSDM_ChannelMspInit+0xd0>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d14b      	bne.n	800874a <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80086b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086b6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80086be:	f107 0310 	add.w	r3, r7, #16
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7fb fbfe 	bl	8003ec4 <HAL_RCCEx_PeriphCLKConfig>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 80086ce:	f7ff fb11 	bl	8007cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80086d2:	4b21      	ldr	r3, [pc, #132]	; (8008758 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	3301      	adds	r3, #1
 80086d8:	4a1f      	ldr	r2, [pc, #124]	; (8008758 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80086da:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80086dc:	4b1e      	ldr	r3, [pc, #120]	; (8008758 <HAL_DFSDM_ChannelMspInit+0xd4>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2b01      	cmp	r3, #1
 80086e2:	d10b      	bne.n	80086fc <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 80086e4:	4b1d      	ldr	r3, [pc, #116]	; (800875c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80086e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086e8:	4a1c      	ldr	r2, [pc, #112]	; (800875c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80086ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80086ee:	6613      	str	r3, [r2, #96]	; 0x60
 80086f0:	4b1a      	ldr	r3, [pc, #104]	; (800875c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80086f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086f8:	60fb      	str	r3, [r7, #12]
 80086fa:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80086fc:	4b17      	ldr	r3, [pc, #92]	; (800875c <HAL_DFSDM_ChannelMspInit+0xd8>)
 80086fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008700:	4a16      	ldr	r2, [pc, #88]	; (800875c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8008702:	f043 0310 	orr.w	r3, r3, #16
 8008706:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008708:	4b14      	ldr	r3, [pc, #80]	; (800875c <HAL_DFSDM_ChannelMspInit+0xd8>)
 800870a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800870c:	f003 0310 	and.w	r3, r3, #16
 8008710:	60bb      	str	r3, [r7, #8]
 8008712:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8008714:	f44f 7320 	mov.w	r3, #640	; 0x280
 8008718:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800871c:	2302      	movs	r3, #2
 800871e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008722:	2300      	movs	r3, #0
 8008724:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008728:	2300      	movs	r3, #0
 800872a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800872e:	2306      	movs	r3, #6
 8008730:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008734:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008738:	4619      	mov	r1, r3
 800873a:	4809      	ldr	r0, [pc, #36]	; (8008760 <HAL_DFSDM_ChannelMspInit+0xdc>)
 800873c:	f7f9 f8f6 	bl	800192c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8008740:	4b04      	ldr	r3, [pc, #16]	; (8008754 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	3301      	adds	r3, #1
 8008746:	4a03      	ldr	r2, [pc, #12]	; (8008754 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8008748:	6013      	str	r3, [r2, #0]
  }

}
 800874a:	bf00      	nop
 800874c:	37b8      	adds	r7, #184	; 0xb8
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}
 8008752:	bf00      	nop
 8008754:	20027764 	.word	0x20027764
 8008758:	20027760 	.word	0x20027760
 800875c:	40021000 	.word	0x40021000
 8008760:	48001000 	.word	0x48001000

08008764 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8008764:	b580      	push	{r7, lr}
 8008766:	b0b0      	sub	sp, #192	; 0xc0
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800876c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008770:	2200      	movs	r2, #0
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	605a      	str	r2, [r3, #4]
 8008776:	609a      	str	r2, [r3, #8]
 8008778:	60da      	str	r2, [r3, #12]
 800877a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800877c:	f107 0318 	add.w	r3, r7, #24
 8008780:	2294      	movs	r2, #148	; 0x94
 8008782:	2100      	movs	r1, #0
 8008784:	4618      	mov	r0, r3
 8008786:	f000 f9f7 	bl	8008b78 <memset>
  if(hospi->Instance==OCTOSPI1)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a28      	ldr	r2, [pc, #160]	; (8008830 <HAL_OSPI_MspInit+0xcc>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d149      	bne.n	8008828 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8008794:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008798:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800879a:	2300      	movs	r3, #0
 800879c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80087a0:	f107 0318 	add.w	r3, r7, #24
 80087a4:	4618      	mov	r0, r3
 80087a6:	f7fb fb8d 	bl	8003ec4 <HAL_RCCEx_PeriphCLKConfig>
 80087aa:	4603      	mov	r3, r0
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d001      	beq.n	80087b4 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80087b0:	f7ff faa0 	bl	8007cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80087b4:	4b1f      	ldr	r3, [pc, #124]	; (8008834 <HAL_OSPI_MspInit+0xd0>)
 80087b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087b8:	4a1e      	ldr	r2, [pc, #120]	; (8008834 <HAL_OSPI_MspInit+0xd0>)
 80087ba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80087be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087c0:	4b1c      	ldr	r3, [pc, #112]	; (8008834 <HAL_OSPI_MspInit+0xd0>)
 80087c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80087c8:	617b      	str	r3, [r7, #20]
 80087ca:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80087cc:	4b19      	ldr	r3, [pc, #100]	; (8008834 <HAL_OSPI_MspInit+0xd0>)
 80087ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087d0:	4a18      	ldr	r2, [pc, #96]	; (8008834 <HAL_OSPI_MspInit+0xd0>)
 80087d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087d6:	6513      	str	r3, [r2, #80]	; 0x50
 80087d8:	4b16      	ldr	r3, [pc, #88]	; (8008834 <HAL_OSPI_MspInit+0xd0>)
 80087da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e0:	613b      	str	r3, [r7, #16]
 80087e2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80087e4:	4b13      	ldr	r3, [pc, #76]	; (8008834 <HAL_OSPI_MspInit+0xd0>)
 80087e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087e8:	4a12      	ldr	r2, [pc, #72]	; (8008834 <HAL_OSPI_MspInit+0xd0>)
 80087ea:	f043 0310 	orr.w	r3, r3, #16
 80087ee:	64d3      	str	r3, [r2, #76]	; 0x4c
 80087f0:	4b10      	ldr	r3, [pc, #64]	; (8008834 <HAL_OSPI_MspInit+0xd0>)
 80087f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80087f4:	f003 0310 	and.w	r3, r3, #16
 80087f8:	60fb      	str	r3, [r7, #12]
 80087fa:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80087fc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8008800:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008804:	2302      	movs	r3, #2
 8008806:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800880a:	2300      	movs	r3, #0
 800880c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008810:	2303      	movs	r3, #3
 8008812:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8008816:	230a      	movs	r3, #10
 8008818:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800881c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008820:	4619      	mov	r1, r3
 8008822:	4805      	ldr	r0, [pc, #20]	; (8008838 <HAL_OSPI_MspInit+0xd4>)
 8008824:	f7f9 f882 	bl	800192c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8008828:	bf00      	nop
 800882a:	37c0      	adds	r7, #192	; 0xc0
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	a0001000 	.word	0xa0001000
 8008834:	40021000 	.word	0x40021000
 8008838:	48001000 	.word	0x48001000

0800883c <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	b082      	sub	sp, #8
 8008840:	af00      	add	r7, sp, #0
 8008842:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	4a0b      	ldr	r2, [pc, #44]	; (8008878 <HAL_OSPI_MspDeInit+0x3c>)
 800884a:	4293      	cmp	r3, r2
 800884c:	d110      	bne.n	8008870 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 800884e:	4b0b      	ldr	r3, [pc, #44]	; (800887c <HAL_OSPI_MspDeInit+0x40>)
 8008850:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008852:	4a0a      	ldr	r2, [pc, #40]	; (800887c <HAL_OSPI_MspDeInit+0x40>)
 8008854:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008858:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800885a:	4b08      	ldr	r3, [pc, #32]	; (800887c <HAL_OSPI_MspDeInit+0x40>)
 800885c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800885e:	4a07      	ldr	r2, [pc, #28]	; (800887c <HAL_OSPI_MspDeInit+0x40>)
 8008860:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008864:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8008866:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800886a:	4805      	ldr	r0, [pc, #20]	; (8008880 <HAL_OSPI_MspDeInit+0x44>)
 800886c:	f7f9 f9f0 	bl	8001c50 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8008870:	bf00      	nop
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	a0001000 	.word	0xa0001000
 800887c:	40021000 	.word	0x40021000
 8008880:	48001000 	.word	0x48001000

08008884 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008894:	d113      	bne.n	80088be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008896:	4b0c      	ldr	r3, [pc, #48]	; (80088c8 <HAL_TIM_Base_MspInit+0x44>)
 8008898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800889a:	4a0b      	ldr	r2, [pc, #44]	; (80088c8 <HAL_TIM_Base_MspInit+0x44>)
 800889c:	f043 0301 	orr.w	r3, r3, #1
 80088a0:	6593      	str	r3, [r2, #88]	; 0x58
 80088a2:	4b09      	ldr	r3, [pc, #36]	; (80088c8 <HAL_TIM_Base_MspInit+0x44>)
 80088a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088a6:	f003 0301 	and.w	r3, r3, #1
 80088aa:	60fb      	str	r3, [r7, #12]
 80088ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80088ae:	2200      	movs	r2, #0
 80088b0:	2100      	movs	r1, #0
 80088b2:	201c      	movs	r0, #28
 80088b4:	f7f7 ff97 	bl	80007e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80088b8:	201c      	movs	r0, #28
 80088ba:	f7f7 ffb0 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80088be:	bf00      	nop
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}
 80088c6:	bf00      	nop
 80088c8:	40021000 	.word	0x40021000

080088cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b0ae      	sub	sp, #184	; 0xb8
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088d4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80088d8:	2200      	movs	r2, #0
 80088da:	601a      	str	r2, [r3, #0]
 80088dc:	605a      	str	r2, [r3, #4]
 80088de:	609a      	str	r2, [r3, #8]
 80088e0:	60da      	str	r2, [r3, #12]
 80088e2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80088e4:	f107 0310 	add.w	r3, r7, #16
 80088e8:	2294      	movs	r2, #148	; 0x94
 80088ea:	2100      	movs	r1, #0
 80088ec:	4618      	mov	r0, r3
 80088ee:	f000 f943 	bl	8008b78 <memset>
  if(huart->Instance==USART1)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a39      	ldr	r2, [pc, #228]	; (80089dc <HAL_UART_MspInit+0x110>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d16b      	bne.n	80089d4 <HAL_UART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80088fc:	2301      	movs	r3, #1
 80088fe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8008900:	2300      	movs	r3, #0
 8008902:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008904:	f107 0310 	add.w	r3, r7, #16
 8008908:	4618      	mov	r0, r3
 800890a:	f7fb fadb 	bl	8003ec4 <HAL_RCCEx_PeriphCLKConfig>
 800890e:	4603      	mov	r3, r0
 8008910:	2b00      	cmp	r3, #0
 8008912:	d001      	beq.n	8008918 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008914:	f7ff f9ee 	bl	8007cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008918:	4b31      	ldr	r3, [pc, #196]	; (80089e0 <HAL_UART_MspInit+0x114>)
 800891a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800891c:	4a30      	ldr	r2, [pc, #192]	; (80089e0 <HAL_UART_MspInit+0x114>)
 800891e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008922:	6613      	str	r3, [r2, #96]	; 0x60
 8008924:	4b2e      	ldr	r3, [pc, #184]	; (80089e0 <HAL_UART_MspInit+0x114>)
 8008926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008928:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800892c:	60fb      	str	r3, [r7, #12]
 800892e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008930:	4b2b      	ldr	r3, [pc, #172]	; (80089e0 <HAL_UART_MspInit+0x114>)
 8008932:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008934:	4a2a      	ldr	r2, [pc, #168]	; (80089e0 <HAL_UART_MspInit+0x114>)
 8008936:	f043 0302 	orr.w	r3, r3, #2
 800893a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800893c:	4b28      	ldr	r3, [pc, #160]	; (80089e0 <HAL_UART_MspInit+0x114>)
 800893e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008940:	f003 0302 	and.w	r3, r3, #2
 8008944:	60bb      	str	r3, [r7, #8]
 8008946:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008948:	23c0      	movs	r3, #192	; 0xc0
 800894a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800894e:	2302      	movs	r3, #2
 8008950:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008954:	2300      	movs	r3, #0
 8008956:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800895a:	2303      	movs	r3, #3
 800895c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008960:	2307      	movs	r3, #7
 8008962:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008966:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800896a:	4619      	mov	r1, r3
 800896c:	481d      	ldr	r0, [pc, #116]	; (80089e4 <HAL_UART_MspInit+0x118>)
 800896e:	f7f8 ffdd 	bl	800192c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8008972:	4b1d      	ldr	r3, [pc, #116]	; (80089e8 <HAL_UART_MspInit+0x11c>)
 8008974:	4a1d      	ldr	r2, [pc, #116]	; (80089ec <HAL_UART_MspInit+0x120>)
 8008976:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8008978:	4b1b      	ldr	r3, [pc, #108]	; (80089e8 <HAL_UART_MspInit+0x11c>)
 800897a:	2218      	movs	r2, #24
 800897c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800897e:	4b1a      	ldr	r3, [pc, #104]	; (80089e8 <HAL_UART_MspInit+0x11c>)
 8008980:	2200      	movs	r2, #0
 8008982:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008984:	4b18      	ldr	r3, [pc, #96]	; (80089e8 <HAL_UART_MspInit+0x11c>)
 8008986:	2200      	movs	r2, #0
 8008988:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800898a:	4b17      	ldr	r3, [pc, #92]	; (80089e8 <HAL_UART_MspInit+0x11c>)
 800898c:	2280      	movs	r2, #128	; 0x80
 800898e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008990:	4b15      	ldr	r3, [pc, #84]	; (80089e8 <HAL_UART_MspInit+0x11c>)
 8008992:	2200      	movs	r2, #0
 8008994:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008996:	4b14      	ldr	r3, [pc, #80]	; (80089e8 <HAL_UART_MspInit+0x11c>)
 8008998:	2200      	movs	r2, #0
 800899a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800899c:	4b12      	ldr	r3, [pc, #72]	; (80089e8 <HAL_UART_MspInit+0x11c>)
 800899e:	2200      	movs	r2, #0
 80089a0:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80089a2:	4b11      	ldr	r3, [pc, #68]	; (80089e8 <HAL_UART_MspInit+0x11c>)
 80089a4:	2200      	movs	r2, #0
 80089a6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80089a8:	480f      	ldr	r0, [pc, #60]	; (80089e8 <HAL_UART_MspInit+0x11c>)
 80089aa:	f7f8 fc91 	bl	80012d0 <HAL_DMA_Init>
 80089ae:	4603      	mov	r3, r0
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d001      	beq.n	80089b8 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 80089b4:	f7ff f99e 	bl	8007cf4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4a0b      	ldr	r2, [pc, #44]	; (80089e8 <HAL_UART_MspInit+0x11c>)
 80089bc:	67da      	str	r2, [r3, #124]	; 0x7c
 80089be:	4a0a      	ldr	r2, [pc, #40]	; (80089e8 <HAL_UART_MspInit+0x11c>)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80089c4:	2200      	movs	r2, #0
 80089c6:	2100      	movs	r1, #0
 80089c8:	2025      	movs	r0, #37	; 0x25
 80089ca:	f7f7 ff0c 	bl	80007e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80089ce:	2025      	movs	r0, #37	; 0x25
 80089d0:	f7f7 ff25 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80089d4:	bf00      	nop
 80089d6:	37b8      	adds	r7, #184	; 0xb8
 80089d8:	46bd      	mov	sp, r7
 80089da:	bd80      	pop	{r7, pc}
 80089dc:	40013800 	.word	0x40013800
 80089e0:	40021000 	.word	0x40021000
 80089e4:	48000400 	.word	0x48000400
 80089e8:	20000560 	.word	0x20000560
 80089ec:	40020030 	.word	0x40020030

080089f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80089f0:	b480      	push	{r7}
 80089f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80089f4:	e7fe      	b.n	80089f4 <NMI_Handler+0x4>

080089f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80089f6:	b480      	push	{r7}
 80089f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80089fa:	e7fe      	b.n	80089fa <HardFault_Handler+0x4>

080089fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80089fc:	b480      	push	{r7}
 80089fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a00:	e7fe      	b.n	8008a00 <MemManage_Handler+0x4>

08008a02 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a02:	b480      	push	{r7}
 8008a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008a06:	e7fe      	b.n	8008a06 <BusFault_Handler+0x4>

08008a08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008a0c:	e7fe      	b.n	8008a0c <UsageFault_Handler+0x4>

08008a0e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008a0e:	b480      	push	{r7}
 8008a10:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008a12:	bf00      	nop
 8008a14:	46bd      	mov	sp, r7
 8008a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1a:	4770      	bx	lr

08008a1c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008a20:	bf00      	nop
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008a2e:	bf00      	nop
 8008a30:	46bd      	mov	sp, r7
 8008a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a36:	4770      	bx	lr

08008a38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008a3c:	f7f7 fdb4 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008a40:	bf00      	nop
 8008a42:	bd80      	pop	{r7, pc}

08008a44 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8008a48:	4802      	ldr	r0, [pc, #8]	; (8008a54 <DMA1_Channel1_IRQHandler+0x10>)
 8008a4a:	f7f8 fe1f 	bl	800168c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8008a4e:	bf00      	nop
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	200002e8 	.word	0x200002e8

08008a58 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8008a5c:	4802      	ldr	r0, [pc, #8]	; (8008a68 <DMA1_Channel2_IRQHandler+0x10>)
 8008a5e:	f7f8 fe15 	bl	800168c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008a62:	bf00      	nop
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	200003d4 	.word	0x200003d4

08008a6c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8008a6c:	b580      	push	{r7, lr}
 8008a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008a70:	4802      	ldr	r0, [pc, #8]	; (8008a7c <DMA1_Channel3_IRQHandler+0x10>)
 8008a72:	f7f8 fe0b 	bl	800168c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8008a76:	bf00      	nop
 8008a78:	bd80      	pop	{r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000560 	.word	0x20000560

08008a80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008a84:	4802      	ldr	r0, [pc, #8]	; (8008a90 <TIM2_IRQHandler+0x10>)
 8008a86:	f7fb fffd 	bl	8004a84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8008a8a:	bf00      	nop
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	20000484 	.word	0x20000484

08008a94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008a98:	4802      	ldr	r0, [pc, #8]	; (8008aa4 <USART1_IRQHandler+0x10>)
 8008a9a:	f7fc fd25 	bl	80054e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008a9e:	bf00      	nop
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	200004d0 	.word	0x200004d0

08008aa8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pushButton_Pin);
 8008aac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008ab0:	f7f9 f9d8 	bl	8001e64 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008ab4:	bf00      	nop
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008ab8:	b480      	push	{r7}
 8008aba:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008abc:	4b06      	ldr	r3, [pc, #24]	; (8008ad8 <SystemInit+0x20>)
 8008abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ac2:	4a05      	ldr	r2, [pc, #20]	; (8008ad8 <SystemInit+0x20>)
 8008ac4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ac8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8008acc:	bf00      	nop
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr
 8008ad6:	bf00      	nop
 8008ad8:	e000ed00 	.word	0xe000ed00

08008adc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008adc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008b14 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8008ae0:	f7ff ffea 	bl	8008ab8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ae4:	480c      	ldr	r0, [pc, #48]	; (8008b18 <LoopForever+0x6>)
  ldr r1, =_edata
 8008ae6:	490d      	ldr	r1, [pc, #52]	; (8008b1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8008ae8:	4a0d      	ldr	r2, [pc, #52]	; (8008b20 <LoopForever+0xe>)
  movs r3, #0
 8008aea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008aec:	e002      	b.n	8008af4 <LoopCopyDataInit>

08008aee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008aee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008af0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008af2:	3304      	adds	r3, #4

08008af4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008af4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008af6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008af8:	d3f9      	bcc.n	8008aee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008afa:	4a0a      	ldr	r2, [pc, #40]	; (8008b24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008afc:	4c0a      	ldr	r4, [pc, #40]	; (8008b28 <LoopForever+0x16>)
  movs r3, #0
 8008afe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008b00:	e001      	b.n	8008b06 <LoopFillZerobss>

08008b02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008b02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008b04:	3204      	adds	r2, #4

08008b06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008b06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008b08:	d3fb      	bcc.n	8008b02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008b0a:	f000 f811 	bl	8008b30 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008b0e:	f7fe fdc3 	bl	8007698 <main>

08008b12 <LoopForever>:

LoopForever:
    b LoopForever
 8008b12:	e7fe      	b.n	8008b12 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008b14:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8008b18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008b1c:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8008b20:	08008c58 	.word	0x08008c58
  ldr r2, =_sbss
 8008b24:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8008b28:	20027768 	.word	0x20027768

08008b2c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008b2c:	e7fe      	b.n	8008b2c <ADC1_IRQHandler>
	...

08008b30 <__libc_init_array>:
 8008b30:	b570      	push	{r4, r5, r6, lr}
 8008b32:	4d0d      	ldr	r5, [pc, #52]	; (8008b68 <__libc_init_array+0x38>)
 8008b34:	4c0d      	ldr	r4, [pc, #52]	; (8008b6c <__libc_init_array+0x3c>)
 8008b36:	1b64      	subs	r4, r4, r5
 8008b38:	10a4      	asrs	r4, r4, #2
 8008b3a:	2600      	movs	r6, #0
 8008b3c:	42a6      	cmp	r6, r4
 8008b3e:	d109      	bne.n	8008b54 <__libc_init_array+0x24>
 8008b40:	4d0b      	ldr	r5, [pc, #44]	; (8008b70 <__libc_init_array+0x40>)
 8008b42:	4c0c      	ldr	r4, [pc, #48]	; (8008b74 <__libc_init_array+0x44>)
 8008b44:	f000 f83c 	bl	8008bc0 <_init>
 8008b48:	1b64      	subs	r4, r4, r5
 8008b4a:	10a4      	asrs	r4, r4, #2
 8008b4c:	2600      	movs	r6, #0
 8008b4e:	42a6      	cmp	r6, r4
 8008b50:	d105      	bne.n	8008b5e <__libc_init_array+0x2e>
 8008b52:	bd70      	pop	{r4, r5, r6, pc}
 8008b54:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b58:	4798      	blx	r3
 8008b5a:	3601      	adds	r6, #1
 8008b5c:	e7ee      	b.n	8008b3c <__libc_init_array+0xc>
 8008b5e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b62:	4798      	blx	r3
 8008b64:	3601      	adds	r6, #1
 8008b66:	e7f2      	b.n	8008b4e <__libc_init_array+0x1e>
 8008b68:	08008c50 	.word	0x08008c50
 8008b6c:	08008c50 	.word	0x08008c50
 8008b70:	08008c50 	.word	0x08008c50
 8008b74:	08008c54 	.word	0x08008c54

08008b78 <memset>:
 8008b78:	4402      	add	r2, r0
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d100      	bne.n	8008b82 <memset+0xa>
 8008b80:	4770      	bx	lr
 8008b82:	f803 1b01 	strb.w	r1, [r3], #1
 8008b86:	e7f9      	b.n	8008b7c <memset+0x4>

08008b88 <strcpy>:
 8008b88:	4603      	mov	r3, r0
 8008b8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b8e:	f803 2b01 	strb.w	r2, [r3], #1
 8008b92:	2a00      	cmp	r2, #0
 8008b94:	d1f9      	bne.n	8008b8a <strcpy+0x2>
 8008b96:	4770      	bx	lr

08008b98 <strncmp>:
 8008b98:	b510      	push	{r4, lr}
 8008b9a:	b17a      	cbz	r2, 8008bbc <strncmp+0x24>
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	3901      	subs	r1, #1
 8008ba0:	1884      	adds	r4, r0, r2
 8008ba2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8008ba6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8008baa:	4290      	cmp	r0, r2
 8008bac:	d101      	bne.n	8008bb2 <strncmp+0x1a>
 8008bae:	42a3      	cmp	r3, r4
 8008bb0:	d101      	bne.n	8008bb6 <strncmp+0x1e>
 8008bb2:	1a80      	subs	r0, r0, r2
 8008bb4:	bd10      	pop	{r4, pc}
 8008bb6:	2800      	cmp	r0, #0
 8008bb8:	d1f3      	bne.n	8008ba2 <strncmp+0xa>
 8008bba:	e7fa      	b.n	8008bb2 <strncmp+0x1a>
 8008bbc:	4610      	mov	r0, r2
 8008bbe:	e7f9      	b.n	8008bb4 <strncmp+0x1c>

08008bc0 <_init>:
 8008bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bc2:	bf00      	nop
 8008bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bc6:	bc08      	pop	{r3}
 8008bc8:	469e      	mov	lr, r3
 8008bca:	4770      	bx	lr

08008bcc <_fini>:
 8008bcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bce:	bf00      	nop
 8008bd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bd2:	bc08      	pop	{r3}
 8008bd4:	469e      	mov	lr, r3
 8008bd6:	4770      	bx	lr
