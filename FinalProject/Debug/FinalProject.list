
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004adc  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08004c98  08004c98  00014c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cd8  08004cd8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004cd8  08004cd8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cd8  08004cd8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cd8  08004cd8  00014cd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004cdc  08004cdc  00014cdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004ce0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  2000000c  08004cec  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08004cec  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001321e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002419  00000000  00000000  0003325a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00035678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b8  00000000  00000000  00036838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002aabd  00000000  00000000  000378f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012cad  00000000  00000000  000623ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010a29c  00000000  00000000  0007505a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017f2f6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b54  00000000  00000000  0017f348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004c80 	.word	0x08004c80

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08004c80 	.word	0x08004c80

080001fc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000202:	2300      	movs	r3, #0
 8000204:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000206:	2003      	movs	r0, #3
 8000208:	f000 f960 	bl	80004cc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800020c:	2000      	movs	r0, #0
 800020e:	f000 f80d 	bl	800022c <HAL_InitTick>
 8000212:	4603      	mov	r3, r0
 8000214:	2b00      	cmp	r3, #0
 8000216:	d002      	beq.n	800021e <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000218:	2301      	movs	r3, #1
 800021a:	71fb      	strb	r3, [r7, #7]
 800021c:	e001      	b.n	8000222 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800021e:	f004 fa2f 	bl	8004680 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000222:	79fb      	ldrb	r3, [r7, #7]
}
 8000224:	4618      	mov	r0, r3
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}

0800022c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000234:	2300      	movs	r3, #0
 8000236:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000238:	4b17      	ldr	r3, [pc, #92]	; (8000298 <HAL_InitTick+0x6c>)
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	2b00      	cmp	r3, #0
 800023e:	d023      	beq.n	8000288 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000240:	4b16      	ldr	r3, [pc, #88]	; (800029c <HAL_InitTick+0x70>)
 8000242:	681a      	ldr	r2, [r3, #0]
 8000244:	4b14      	ldr	r3, [pc, #80]	; (8000298 <HAL_InitTick+0x6c>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	4619      	mov	r1, r3
 800024a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800024e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000252:	fbb2 f3f3 	udiv	r3, r2, r3
 8000256:	4618      	mov	r0, r3
 8000258:	f000 f96d 	bl	8000536 <HAL_SYSTICK_Config>
 800025c:	4603      	mov	r3, r0
 800025e:	2b00      	cmp	r3, #0
 8000260:	d10f      	bne.n	8000282 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	2b0f      	cmp	r3, #15
 8000266:	d809      	bhi.n	800027c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000268:	2200      	movs	r2, #0
 800026a:	6879      	ldr	r1, [r7, #4]
 800026c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000270:	f000 f937 	bl	80004e2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000274:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <HAL_InitTick+0x74>)
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	6013      	str	r3, [r2, #0]
 800027a:	e007      	b.n	800028c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800027c:	2301      	movs	r3, #1
 800027e:	73fb      	strb	r3, [r7, #15]
 8000280:	e004      	b.n	800028c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000282:	2301      	movs	r3, #1
 8000284:	73fb      	strb	r3, [r7, #15]
 8000286:	e001      	b.n	800028c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000288:	2301      	movs	r3, #1
 800028a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800028c:	7bfb      	ldrb	r3, [r7, #15]
}
 800028e:	4618      	mov	r0, r3
 8000290:	3710      	adds	r7, #16
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	20000004 	.word	0x20000004
 800029c:	20000008 	.word	0x20000008
 80002a0:	20000000 	.word	0x20000000

080002a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80002a8:	4b06      	ldr	r3, [pc, #24]	; (80002c4 <HAL_IncTick+0x20>)
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	461a      	mov	r2, r3
 80002ae:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <HAL_IncTick+0x24>)
 80002b0:	681b      	ldr	r3, [r3, #0]
 80002b2:	4413      	add	r3, r2
 80002b4:	4a04      	ldr	r2, [pc, #16]	; (80002c8 <HAL_IncTick+0x24>)
 80002b6:	6013      	str	r3, [r2, #0]
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c0:	4770      	bx	lr
 80002c2:	bf00      	nop
 80002c4:	20000004 	.word	0x20000004
 80002c8:	20000028 	.word	0x20000028

080002cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  return uwTick;
 80002d0:	4b03      	ldr	r3, [pc, #12]	; (80002e0 <HAL_GetTick+0x14>)
 80002d2:	681b      	ldr	r3, [r3, #0]
}
 80002d4:	4618      	mov	r0, r3
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop
 80002e0:	20000028 	.word	0x20000028

080002e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80002ec:	f7ff ffee 	bl	80002cc <HAL_GetTick>
 80002f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002f6:	68fb      	ldr	r3, [r7, #12]
 80002f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80002fc:	d005      	beq.n	800030a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80002fe:	4b0a      	ldr	r3, [pc, #40]	; (8000328 <HAL_Delay+0x44>)
 8000300:	781b      	ldrb	r3, [r3, #0]
 8000302:	461a      	mov	r2, r3
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	4413      	add	r3, r2
 8000308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800030a:	bf00      	nop
 800030c:	f7ff ffde 	bl	80002cc <HAL_GetTick>
 8000310:	4602      	mov	r2, r0
 8000312:	68bb      	ldr	r3, [r7, #8]
 8000314:	1ad3      	subs	r3, r2, r3
 8000316:	68fa      	ldr	r2, [r7, #12]
 8000318:	429a      	cmp	r2, r3
 800031a:	d8f7      	bhi.n	800030c <HAL_Delay+0x28>
  {
  }
}
 800031c:	bf00      	nop
 800031e:	bf00      	nop
 8000320:	3710      	adds	r7, #16
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	20000004 	.word	0x20000004

0800032c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800032c:	b480      	push	{r7}
 800032e:	b085      	sub	sp, #20
 8000330:	af00      	add	r7, sp, #0
 8000332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	f003 0307 	and.w	r3, r3, #7
 800033a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 800033e:	68db      	ldr	r3, [r3, #12]
 8000340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000342:	68ba      	ldr	r2, [r7, #8]
 8000344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000348:	4013      	ands	r3, r2
 800034a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800034c:	68fb      	ldr	r3, [r7, #12]
 800034e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000350:	68bb      	ldr	r3, [r7, #8]
 8000352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800035e:	4a04      	ldr	r2, [pc, #16]	; (8000370 <__NVIC_SetPriorityGrouping+0x44>)
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	60d3      	str	r3, [r2, #12]
}
 8000364:	bf00      	nop
 8000366:	3714      	adds	r7, #20
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr
 8000370:	e000ed00 	.word	0xe000ed00

08000374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000378:	4b04      	ldr	r3, [pc, #16]	; (800038c <__NVIC_GetPriorityGrouping+0x18>)
 800037a:	68db      	ldr	r3, [r3, #12]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	f003 0307 	and.w	r3, r3, #7
}
 8000382:	4618      	mov	r0, r3
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	e000ed00 	.word	0xe000ed00

08000390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000390:	b480      	push	{r7}
 8000392:	b083      	sub	sp, #12
 8000394:	af00      	add	r7, sp, #0
 8000396:	4603      	mov	r3, r0
 8000398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800039a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800039e:	2b00      	cmp	r3, #0
 80003a0:	db0b      	blt.n	80003ba <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80003a2:	79fb      	ldrb	r3, [r7, #7]
 80003a4:	f003 021f 	and.w	r2, r3, #31
 80003a8:	4907      	ldr	r1, [pc, #28]	; (80003c8 <__NVIC_EnableIRQ+0x38>)
 80003aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ae:	095b      	lsrs	r3, r3, #5
 80003b0:	2001      	movs	r0, #1
 80003b2:	fa00 f202 	lsl.w	r2, r0, r2
 80003b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	e000e100 	.word	0xe000e100

080003cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	4603      	mov	r3, r0
 80003d4:	6039      	str	r1, [r7, #0]
 80003d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80003d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	db0a      	blt.n	80003f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003e0:	683b      	ldr	r3, [r7, #0]
 80003e2:	b2da      	uxtb	r2, r3
 80003e4:	490c      	ldr	r1, [pc, #48]	; (8000418 <__NVIC_SetPriority+0x4c>)
 80003e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80003ea:	0112      	lsls	r2, r2, #4
 80003ec:	b2d2      	uxtb	r2, r2
 80003ee:	440b      	add	r3, r1
 80003f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80003f4:	e00a      	b.n	800040c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	b2da      	uxtb	r2, r3
 80003fa:	4908      	ldr	r1, [pc, #32]	; (800041c <__NVIC_SetPriority+0x50>)
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	f003 030f 	and.w	r3, r3, #15
 8000402:	3b04      	subs	r3, #4
 8000404:	0112      	lsls	r2, r2, #4
 8000406:	b2d2      	uxtb	r2, r2
 8000408:	440b      	add	r3, r1
 800040a:	761a      	strb	r2, [r3, #24]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	e000e100 	.word	0xe000e100
 800041c:	e000ed00 	.word	0xe000ed00

08000420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000420:	b480      	push	{r7}
 8000422:	b089      	sub	sp, #36	; 0x24
 8000424:	af00      	add	r7, sp, #0
 8000426:	60f8      	str	r0, [r7, #12]
 8000428:	60b9      	str	r1, [r7, #8]
 800042a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800042c:	68fb      	ldr	r3, [r7, #12]
 800042e:	f003 0307 	and.w	r3, r3, #7
 8000432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000434:	69fb      	ldr	r3, [r7, #28]
 8000436:	f1c3 0307 	rsb	r3, r3, #7
 800043a:	2b04      	cmp	r3, #4
 800043c:	bf28      	it	cs
 800043e:	2304      	movcs	r3, #4
 8000440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000442:	69fb      	ldr	r3, [r7, #28]
 8000444:	3304      	adds	r3, #4
 8000446:	2b06      	cmp	r3, #6
 8000448:	d902      	bls.n	8000450 <NVIC_EncodePriority+0x30>
 800044a:	69fb      	ldr	r3, [r7, #28]
 800044c:	3b03      	subs	r3, #3
 800044e:	e000      	b.n	8000452 <NVIC_EncodePriority+0x32>
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000454:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000458:	69bb      	ldr	r3, [r7, #24]
 800045a:	fa02 f303 	lsl.w	r3, r2, r3
 800045e:	43da      	mvns	r2, r3
 8000460:	68bb      	ldr	r3, [r7, #8]
 8000462:	401a      	ands	r2, r3
 8000464:	697b      	ldr	r3, [r7, #20]
 8000466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000468:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	fa01 f303 	lsl.w	r3, r1, r3
 8000472:	43d9      	mvns	r1, r3
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000478:	4313      	orrs	r3, r2
         );
}
 800047a:	4618      	mov	r0, r3
 800047c:	3724      	adds	r7, #36	; 0x24
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr
	...

08000488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
 800048e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	3b01      	subs	r3, #1
 8000494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000498:	d301      	bcc.n	800049e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800049a:	2301      	movs	r3, #1
 800049c:	e00f      	b.n	80004be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800049e:	4a0a      	ldr	r2, [pc, #40]	; (80004c8 <SysTick_Config+0x40>)
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	3b01      	subs	r3, #1
 80004a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80004a6:	210f      	movs	r1, #15
 80004a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80004ac:	f7ff ff8e 	bl	80003cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80004b0:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <SysTick_Config+0x40>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80004b6:	4b04      	ldr	r3, [pc, #16]	; (80004c8 <SysTick_Config+0x40>)
 80004b8:	2207      	movs	r2, #7
 80004ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80004bc:	2300      	movs	r3, #0
}
 80004be:	4618      	mov	r0, r3
 80004c0:	3708      	adds	r7, #8
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	bf00      	nop
 80004c8:	e000e010 	.word	0xe000e010

080004cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	f7ff ff29 	bl	800032c <__NVIC_SetPriorityGrouping>
}
 80004da:	bf00      	nop
 80004dc:	3708      	adds	r7, #8
 80004de:	46bd      	mov	sp, r7
 80004e0:	bd80      	pop	{r7, pc}

080004e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004e2:	b580      	push	{r7, lr}
 80004e4:	b086      	sub	sp, #24
 80004e6:	af00      	add	r7, sp, #0
 80004e8:	4603      	mov	r3, r0
 80004ea:	60b9      	str	r1, [r7, #8]
 80004ec:	607a      	str	r2, [r7, #4]
 80004ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80004f0:	2300      	movs	r3, #0
 80004f2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80004f4:	f7ff ff3e 	bl	8000374 <__NVIC_GetPriorityGrouping>
 80004f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	68b9      	ldr	r1, [r7, #8]
 80004fe:	6978      	ldr	r0, [r7, #20]
 8000500:	f7ff ff8e 	bl	8000420 <NVIC_EncodePriority>
 8000504:	4602      	mov	r2, r0
 8000506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800050a:	4611      	mov	r1, r2
 800050c:	4618      	mov	r0, r3
 800050e:	f7ff ff5d 	bl	80003cc <__NVIC_SetPriority>
}
 8000512:	bf00      	nop
 8000514:	3718      	adds	r7, #24
 8000516:	46bd      	mov	sp, r7
 8000518:	bd80      	pop	{r7, pc}

0800051a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800051a:	b580      	push	{r7, lr}
 800051c:	b082      	sub	sp, #8
 800051e:	af00      	add	r7, sp, #0
 8000520:	4603      	mov	r3, r0
 8000522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000528:	4618      	mov	r0, r3
 800052a:	f7ff ff31 	bl	8000390 <__NVIC_EnableIRQ>
}
 800052e:	bf00      	nop
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}

08000536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000536:	b580      	push	{r7, lr}
 8000538:	b082      	sub	sp, #8
 800053a:	af00      	add	r7, sp, #0
 800053c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f7ff ffa2 	bl	8000488 <SysTick_Config>
 8000544:	4603      	mov	r3, r0
}
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b082      	sub	sp, #8
 8000552:	af00      	add	r7, sp, #0
 8000554:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	2b00      	cmp	r3, #0
 800055a:	d101      	bne.n	8000560 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800055c:	2301      	movs	r3, #1
 800055e:	e014      	b.n	800058a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	791b      	ldrb	r3, [r3, #4]
 8000564:	b2db      	uxtb	r3, r3
 8000566:	2b00      	cmp	r3, #0
 8000568:	d105      	bne.n	8000576 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2200      	movs	r2, #0
 800056e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f004 f8a9 	bl	80046c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	2202      	movs	r2, #2
 800057a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2200      	movs	r2, #0
 8000580:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	2201      	movs	r2, #1
 8000586:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000588:	2300      	movs	r3, #0
}
 800058a:	4618      	mov	r0, r3
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
	...

08000594 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b088      	sub	sp, #32
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80005a0:	2300      	movs	r3, #0
 80005a2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	795b      	ldrb	r3, [r3, #5]
 80005a8:	2b01      	cmp	r3, #1
 80005aa:	d101      	bne.n	80005b0 <HAL_DAC_ConfigChannel+0x1c>
 80005ac:	2302      	movs	r3, #2
 80005ae:	e12a      	b.n	8000806 <HAL_DAC_ConfigChannel+0x272>
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2201      	movs	r2, #1
 80005b4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	2202      	movs	r2, #2
 80005ba:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80005bc:	68bb      	ldr	r3, [r7, #8]
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	2b04      	cmp	r3, #4
 80005c2:	d174      	bne.n	80006ae <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80005c4:	f7ff fe82 	bl	80002cc <HAL_GetTick>
 80005c8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d134      	bne.n	800063a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80005d0:	e011      	b.n	80005f6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80005d2:	f7ff fe7b 	bl	80002cc <HAL_GetTick>
 80005d6:	4602      	mov	r2, r0
 80005d8:	69bb      	ldr	r3, [r7, #24]
 80005da:	1ad3      	subs	r3, r2, r3
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d90a      	bls.n	80005f6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	691b      	ldr	r3, [r3, #16]
 80005e4:	f043 0208 	orr.w	r2, r3, #8
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	2203      	movs	r2, #3
 80005f0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80005f2:	2303      	movs	r3, #3
 80005f4:	e107      	b.n	8000806 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000600:	2b00      	cmp	r3, #0
 8000602:	d1e6      	bne.n	80005d2 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000604:	2001      	movs	r0, #1
 8000606:	f7ff fe6d 	bl	80002e4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	68ba      	ldr	r2, [r7, #8]
 8000610:	69d2      	ldr	r2, [r2, #28]
 8000612:	641a      	str	r2, [r3, #64]	; 0x40
 8000614:	e01e      	b.n	8000654 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000616:	f7ff fe59 	bl	80002cc <HAL_GetTick>
 800061a:	4602      	mov	r2, r0
 800061c:	69bb      	ldr	r3, [r7, #24]
 800061e:	1ad3      	subs	r3, r2, r3
 8000620:	2b01      	cmp	r3, #1
 8000622:	d90a      	bls.n	800063a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	691b      	ldr	r3, [r3, #16]
 8000628:	f043 0208 	orr.w	r2, r3, #8
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000630:	68fb      	ldr	r3, [r7, #12]
 8000632:	2203      	movs	r2, #3
 8000634:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000636:	2303      	movs	r3, #3
 8000638:	e0e5      	b.n	8000806 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000640:	2b00      	cmp	r3, #0
 8000642:	dbe8      	blt.n	8000616 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000644:	2001      	movs	r0, #1
 8000646:	f7ff fe4d 	bl	80002e4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800064a:	68fb      	ldr	r3, [r7, #12]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	68ba      	ldr	r2, [r7, #8]
 8000650:	69d2      	ldr	r2, [r2, #28]
 8000652:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000654:	68fb      	ldr	r3, [r7, #12]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	f003 0310 	and.w	r3, r3, #16
 8000660:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000664:	fa01 f303 	lsl.w	r3, r1, r3
 8000668:	43db      	mvns	r3, r3
 800066a:	ea02 0103 	and.w	r1, r2, r3
 800066e:	68bb      	ldr	r3, [r7, #8]
 8000670:	6a1a      	ldr	r2, [r3, #32]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f003 0310 	and.w	r3, r3, #16
 8000678:	409a      	lsls	r2, r3
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	430a      	orrs	r2, r1
 8000680:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f003 0310 	and.w	r3, r3, #16
 800068e:	21ff      	movs	r1, #255	; 0xff
 8000690:	fa01 f303 	lsl.w	r3, r1, r3
 8000694:	43db      	mvns	r3, r3
 8000696:	ea02 0103 	and.w	r1, r2, r3
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	f003 0310 	and.w	r3, r3, #16
 80006a4:	409a      	lsls	r2, r3
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	430a      	orrs	r2, r1
 80006ac:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	695b      	ldr	r3, [r3, #20]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d11d      	bne.n	80006f2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006bc:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	f003 0310 	and.w	r3, r3, #16
 80006c4:	221f      	movs	r2, #31
 80006c6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ca:	43db      	mvns	r3, r3
 80006cc:	69fa      	ldr	r2, [r7, #28]
 80006ce:	4013      	ands	r3, r2
 80006d0:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80006d2:	68bb      	ldr	r3, [r7, #8]
 80006d4:	699b      	ldr	r3, [r3, #24]
 80006d6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	f003 0310 	and.w	r3, r3, #16
 80006de:	697a      	ldr	r2, [r7, #20]
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	69fa      	ldr	r2, [r7, #28]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	681b      	ldr	r3, [r3, #0]
 80006ee:	69fa      	ldr	r2, [r7, #28]
 80006f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80006f2:	68fb      	ldr	r3, [r7, #12]
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80006f8:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f003 0310 	and.w	r3, r3, #16
 8000700:	2207      	movs	r2, #7
 8000702:	fa02 f303 	lsl.w	r3, r2, r3
 8000706:	43db      	mvns	r3, r3
 8000708:	69fa      	ldr	r2, [r7, #28]
 800070a:	4013      	ands	r3, r2
 800070c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 800070e:	68bb      	ldr	r3, [r7, #8]
 8000710:	685a      	ldr	r2, [r3, #4]
 8000712:	68bb      	ldr	r3, [r7, #8]
 8000714:	68db      	ldr	r3, [r3, #12]
 8000716:	431a      	orrs	r2, r3
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	4313      	orrs	r3, r2
 800071e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f003 0310 	and.w	r3, r3, #16
 8000726:	697a      	ldr	r2, [r7, #20]
 8000728:	fa02 f303 	lsl.w	r3, r2, r3
 800072c:	69fa      	ldr	r2, [r7, #28]
 800072e:	4313      	orrs	r3, r2
 8000730:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	69fa      	ldr	r2, [r7, #28]
 8000738:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800073a:	68fb      	ldr	r3, [r7, #12]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	6819      	ldr	r1, [r3, #0]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f003 0310 	and.w	r3, r3, #16
 8000746:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800074a:	fa02 f303 	lsl.w	r3, r2, r3
 800074e:	43da      	mvns	r2, r3
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	400a      	ands	r2, r1
 8000756:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	f003 0310 	and.w	r3, r3, #16
 8000766:	f640 72fe 	movw	r2, #4094	; 0xffe
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	69fa      	ldr	r2, [r7, #28]
 8000772:	4013      	ands	r3, r2
 8000774:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000776:	68bb      	ldr	r3, [r7, #8]
 8000778:	689b      	ldr	r3, [r3, #8]
 800077a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f003 0310 	and.w	r3, r3, #16
 8000782:	697a      	ldr	r2, [r7, #20]
 8000784:	fa02 f303 	lsl.w	r3, r2, r3
 8000788:	69fa      	ldr	r2, [r7, #28]
 800078a:	4313      	orrs	r3, r2
 800078c:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000796:	d104      	bne.n	80007a2 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000798:	69fb      	ldr	r3, [r7, #28]
 800079a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800079e:	61fb      	str	r3, [r7, #28]
 80007a0:	e018      	b.n	80007d4 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 80007a2:	68bb      	ldr	r3, [r7, #8]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d104      	bne.n	80007b4 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007b0:	61fb      	str	r3, [r7, #28]
 80007b2:	e00f      	b.n	80007d4 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 80007b4:	f002 fadc 	bl	8002d70 <HAL_RCC_GetHCLKFreq>
 80007b8:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80007ba:	693b      	ldr	r3, [r7, #16]
 80007bc:	4a14      	ldr	r2, [pc, #80]	; (8000810 <HAL_DAC_ConfigChannel+0x27c>)
 80007be:	4293      	cmp	r3, r2
 80007c0:	d904      	bls.n	80007cc <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007c8:	61fb      	str	r3, [r7, #28]
 80007ca:	e003      	b.n	80007d4 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007d2:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80007d4:	68fb      	ldr	r3, [r7, #12]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	69fa      	ldr	r2, [r7, #28]
 80007da:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80007dc:	68fb      	ldr	r3, [r7, #12]
 80007de:	681b      	ldr	r3, [r3, #0]
 80007e0:	6819      	ldr	r1, [r3, #0]
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	f003 0310 	and.w	r3, r3, #16
 80007e8:	22c0      	movs	r2, #192	; 0xc0
 80007ea:	fa02 f303 	lsl.w	r3, r2, r3
 80007ee:	43da      	mvns	r2, r3
 80007f0:	68fb      	ldr	r3, [r7, #12]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	400a      	ands	r2, r1
 80007f6:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80007f8:	68fb      	ldr	r3, [r7, #12]
 80007fa:	2201      	movs	r2, #1
 80007fc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	2200      	movs	r2, #0
 8000802:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3720      	adds	r7, #32
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	04c4b400 	.word	0x04c4b400

08000814 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d101      	bne.n	8000826 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000822:	2301      	movs	r3, #1
 8000824:	e0ac      	b.n	8000980 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	4618      	mov	r0, r3
 800082c:	f000 fb76 	bl	8000f1c <DFSDM_GetChannelFromInstance>
 8000830:	4603      	mov	r3, r0
 8000832:	4a55      	ldr	r2, [pc, #340]	; (8000988 <HAL_DFSDM_ChannelInit+0x174>)
 8000834:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000838:	2b00      	cmp	r3, #0
 800083a:	d001      	beq.n	8000840 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 800083c:	2301      	movs	r3, #1
 800083e:	e09f      	b.n	8000980 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f004 f863 	bl	800490c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000846:	4b51      	ldr	r3, [pc, #324]	; (800098c <HAL_DFSDM_ChannelInit+0x178>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	3301      	adds	r3, #1
 800084c:	4a4f      	ldr	r2, [pc, #316]	; (800098c <HAL_DFSDM_ChannelInit+0x178>)
 800084e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000850:	4b4e      	ldr	r3, [pc, #312]	; (800098c <HAL_DFSDM_ChannelInit+0x178>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d125      	bne.n	80008a4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000858:	4b4d      	ldr	r3, [pc, #308]	; (8000990 <HAL_DFSDM_ChannelInit+0x17c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a4c      	ldr	r2, [pc, #304]	; (8000990 <HAL_DFSDM_ChannelInit+0x17c>)
 800085e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000862:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000864:	4b4a      	ldr	r3, [pc, #296]	; (8000990 <HAL_DFSDM_ChannelInit+0x17c>)
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	689b      	ldr	r3, [r3, #8]
 800086c:	4948      	ldr	r1, [pc, #288]	; (8000990 <HAL_DFSDM_ChannelInit+0x17c>)
 800086e:	4313      	orrs	r3, r2
 8000870:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000872:	4b47      	ldr	r3, [pc, #284]	; (8000990 <HAL_DFSDM_ChannelInit+0x17c>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	4a46      	ldr	r2, [pc, #280]	; (8000990 <HAL_DFSDM_ChannelInit+0x17c>)
 8000878:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 800087c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	791b      	ldrb	r3, [r3, #4]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d108      	bne.n	8000898 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000886:	4b42      	ldr	r3, [pc, #264]	; (8000990 <HAL_DFSDM_ChannelInit+0x17c>)
 8000888:	681a      	ldr	r2, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	68db      	ldr	r3, [r3, #12]
 800088e:	3b01      	subs	r3, #1
 8000890:	041b      	lsls	r3, r3, #16
 8000892:	493f      	ldr	r1, [pc, #252]	; (8000990 <HAL_DFSDM_ChannelInit+0x17c>)
 8000894:	4313      	orrs	r3, r2
 8000896:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000898:	4b3d      	ldr	r3, [pc, #244]	; (8000990 <HAL_DFSDM_ChannelInit+0x17c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a3c      	ldr	r2, [pc, #240]	; (8000990 <HAL_DFSDM_ChannelInit+0x17c>)
 800089e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80008a2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	681a      	ldr	r2, [r3, #0]
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80008b2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	6819      	ldr	r1, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80008c2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80008c8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	430a      	orrs	r2, r1
 80008d0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681a      	ldr	r2, [r3, #0]
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	f022 020f 	bic.w	r2, r2, #15
 80008e0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	6819      	ldr	r1, [r3, #0]
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80008f0:	431a      	orrs	r2, r3
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	430a      	orrs	r2, r1
 80008f8:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	689a      	ldr	r2, [r3, #8]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000908:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	6899      	ldr	r1, [r3, #8]
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000918:	3b01      	subs	r3, #1
 800091a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 800091c:	431a      	orrs	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	430a      	orrs	r2, r1
 8000924:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	685a      	ldr	r2, [r3, #4]
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	f002 0207 	and.w	r2, r2, #7
 8000934:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	6859      	ldr	r1, [r3, #4]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000940:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000948:	431a      	orrs	r2, r3
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	430a      	orrs	r2, r1
 8000950:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000960:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2201      	movs	r2, #1
 8000966:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f000 fad4 	bl	8000f1c <DFSDM_GetChannelFromInstance>
 8000974:	4602      	mov	r2, r0
 8000976:	4904      	ldr	r1, [pc, #16]	; (8000988 <HAL_DFSDM_ChannelInit+0x174>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 800097e:	2300      	movs	r3, #0
}
 8000980:	4618      	mov	r0, r3
 8000982:	3708      	adds	r7, #8
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000030 	.word	0x20000030
 800098c:	2000002c 	.word	0x2000002c
 8000990:	40016000 	.word	0x40016000

08000994 <HAL_DFSDM_ChannelCkabCallback>:
  * @brief  Clock absence detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelCkabCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000994:	b480      	push	{r7}
 8000996:	b083      	sub	sp, #12
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelCkabCallback could be implemented in the user file
   */
}
 800099c:	bf00      	nop
 800099e:	370c      	adds	r7, #12
 80009a0:	46bd      	mov	sp, r7
 80009a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a6:	4770      	bx	lr

080009a8 <HAL_DFSDM_ChannelScdCallback>:
  * @brief  Short circuit detection callback.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval None
  */
__weak void HAL_DFSDM_ChannelScdCallback(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_channel);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_ChannelScdCallback could be implemented in the user file
   */
}
 80009b0:	bf00      	nop
 80009b2:	370c      	adds	r7, #12
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr

080009bc <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d101      	bne.n	80009ce <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e0ca      	b.n	8000b64 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	4a66      	ldr	r2, [pc, #408]	; (8000b6c <HAL_DFSDM_FilterInit+0x1b0>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d109      	bne.n	80009ec <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80009dc:	2b01      	cmp	r3, #1
 80009de:	d003      	beq.n	80009e8 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d101      	bne.n	80009ec <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80009e8:	2301      	movs	r3, #1
 80009ea:	e0bb      	b.n	8000b64 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	2200      	movs	r2, #0
 80009f0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	2201      	movs	r2, #1
 80009f6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	2201      	movs	r2, #1
 80009fc:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	2200      	movs	r2, #0
 8000a02:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f003 fecd 	bl	80047a4 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8000a18:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	7a1b      	ldrb	r3, [r3, #8]
 8000a1e:	2b01      	cmp	r3, #1
 8000a20:	d108      	bne.n	8000a34 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	681a      	ldr	r2, [r3, #0]
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a30:	601a      	str	r2, [r3, #0]
 8000a32:	e007      	b.n	8000a44 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	681a      	ldr	r2, [r3, #0]
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000a42:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	7a5b      	ldrb	r3, [r3, #9]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d108      	bne.n	8000a5e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	681b      	ldr	r3, [r3, #0]
 8000a56:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	e007      	b.n	8000a6e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	681a      	ldr	r2, [r3, #0]
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 8000a6c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	6812      	ldr	r2, [r2, #0]
 8000a78:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8000a7c:	f023 0308 	bic.w	r3, r3, #8
 8000a80:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	2b02      	cmp	r3, #2
 8000a88:	d108      	bne.n	8000a9c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	6819      	ldr	r1, [r3, #0]
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	695a      	ldr	r2, [r3, #20]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	430a      	orrs	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	7c1b      	ldrb	r3, [r3, #16]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d108      	bne.n	8000ab6 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	681a      	ldr	r2, [r3, #0]
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f042 0210 	orr.w	r2, r2, #16
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	e007      	b.n	8000ac6 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	681a      	ldr	r2, [r3, #0]
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f022 0210 	bic.w	r2, r2, #16
 8000ac4:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	7c5b      	ldrb	r3, [r3, #17]
 8000aca:	2b01      	cmp	r3, #1
 8000acc:	d108      	bne.n	8000ae0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	681a      	ldr	r2, [r3, #0]
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f042 0220 	orr.w	r2, r2, #32
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	e007      	b.n	8000af0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	681b      	ldr	r3, [r3, #0]
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	f022 0220 	bic.w	r2, r2, #32
 8000aee:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	695b      	ldr	r3, [r3, #20]
 8000af6:	687a      	ldr	r2, [r7, #4]
 8000af8:	6812      	ldr	r2, [r2, #0]
 8000afa:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 8000afe:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8000b02:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	6959      	ldr	r1, [r3, #20]
 8000b0a:	687b      	ldr	r3, [r7, #4]
 8000b0c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	6a1b      	ldr	r3, [r3, #32]
 8000b12:	3b01      	subs	r3, #1
 8000b14:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000b16:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b1c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 8000b1e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	430a      	orrs	r2, r1
 8000b26:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	68da      	ldr	r2, [r3, #12]
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	699a      	ldr	r2, [r3, #24]
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	7c1a      	ldrb	r2, [r3, #16]
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f042 0201 	orr.w	r2, r2, #1
 8000b58:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8000b62:	2300      	movs	r3, #0
}
 8000b64:	4618      	mov	r0, r3
 8000b66:	3708      	adds	r7, #8
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	40016100 	.word	0x40016100

08000b70 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b087      	sub	sp, #28
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	60f8      	str	r0, [r7, #12]
 8000b78:	60b9      	str	r1, [r7, #8]
 8000b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d02e      	beq.n	8000be8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8000b90:	2bff      	cmp	r3, #255	; 0xff
 8000b92:	d029      	beq.n	8000be8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	68fa      	ldr	r2, [r7, #12]
 8000b9c:	6812      	ldr	r2, [r2, #0]
 8000b9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ba2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ba6:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d10d      	bne.n	8000bca <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	681a      	ldr	r2, [r3, #0]
 8000bb4:	68bb      	ldr	r3, [r7, #8]
 8000bb6:	021b      	lsls	r3, r3, #8
 8000bb8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	e00a      	b.n	8000be0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	6819      	ldr	r1, [r3, #0]
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8000bd8:	68fb      	ldr	r3, [r7, #12]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	430a      	orrs	r2, r1
 8000bde:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	631a      	str	r2, [r3, #48]	; 0x30
 8000be6:	e001      	b.n	8000bec <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8000bec:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	371c      	adds	r7, #28
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
	...

08000bfc <HAL_DFSDM_IRQHandler>:
  * @brief  This function handles the DFSDM interrupts.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
void HAL_DFSDM_IRQHandler(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b08c      	sub	sp, #48	; 0x30
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  /* Get FTLISR and FLTCR2 register values */
  const uint32_t temp_fltisr = hdfsdm_filter->Instance->FLTISR;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	689b      	ldr	r3, [r3, #8]
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint32_t temp_fltcr2 = hdfsdm_filter->Instance->FLTCR2;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	613b      	str	r3, [r7, #16]

  /* Check if overrun occurs during regular conversion */
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	f003 0308 	and.w	r3, r3, #8
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d00f      	beq.n	8000c3e <HAL_DFSDM_IRQHandler+0x42>
      ((temp_fltcr2 & DFSDM_FLTCR2_ROVRIE) != 0U))
 8000c1e:	693b      	ldr	r3, [r7, #16]
 8000c20:	f003 0308 	and.w	r3, r3, #8
  if (((temp_fltisr & DFSDM_FLTISR_ROVRF) != 0U) && \
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d00a      	beq.n	8000c3e <HAL_DFSDM_IRQHandler+0x42>
  {
    /* Clear regular overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRROVRF;
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	2208      	movs	r2, #8
 8000c2e:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_REGULAR_OVERRUN;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2201      	movs	r2, #1
 8000c34:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f000 f966 	bl	8000f08 <HAL_DFSDM_FilterErrorCallback>
 8000c3c:	e13b      	b.n	8000eb6 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if overrun occurs during injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	f003 0304 	and.w	r3, r3, #4
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d00f      	beq.n	8000c68 <HAL_DFSDM_IRQHandler+0x6c>
           ((temp_fltcr2 & DFSDM_FLTCR2_JOVRIE) != 0U))
 8000c48:	693b      	ldr	r3, [r7, #16]
 8000c4a:	f003 0304 	and.w	r3, r3, #4
  else if (((temp_fltisr & DFSDM_FLTISR_JOVRF) != 0U) && \
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d00a      	beq.n	8000c68 <HAL_DFSDM_IRQHandler+0x6c>
  {
    /* Clear injected overrun flag */
    hdfsdm_filter->Instance->FLTICR = DFSDM_FLTICR_CLRJOVRF;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	2204      	movs	r2, #4
 8000c58:	60da      	str	r2, [r3, #12]

    /* Update error code */
    hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_INJECTED_OVERRUN;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2202      	movs	r2, #2
 8000c5e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8000c60:	6878      	ldr	r0, [r7, #4]
 8000c62:	f000 f951 	bl	8000f08 <HAL_DFSDM_FilterErrorCallback>
 8000c66:	e126      	b.n	8000eb6 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if end of regular conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	f003 0302 	and.w	r3, r3, #2
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d025      	beq.n	8000cbe <HAL_DFSDM_IRQHandler+0xc2>
           ((temp_fltcr2 & DFSDM_FLTCR2_REOCIE) != 0U))
 8000c72:	693b      	ldr	r3, [r7, #16]
 8000c74:	f003 0302 	and.w	r3, r3, #2
  else if (((temp_fltisr & DFSDM_FLTISR_REOCF) != 0U) && \
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d020      	beq.n	8000cbe <HAL_DFSDM_IRQHandler+0xc2>
  {
    /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f000 f923 	bl	8000ec8 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif

    /* End of conversion if mode is not continuous and software trigger */
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8114 	bne.w	8000eb4 <HAL_DFSDM_IRQHandler+0x2b8>
        (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER))
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	f040 810f 	bne.w	8000eb4 <HAL_DFSDM_IRQHandler+0x2b8>
    {
      /* Disable interrupts for regular conversions */
      hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_REOCIE);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	685a      	ldr	r2, [r3, #4]
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	f022 0202 	bic.w	r2, r2, #2
 8000ca4:	605a      	str	r2, [r3, #4]

      /* Update DFSDM filter state */
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                             HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8000cac:	2b02      	cmp	r3, #2
 8000cae:	d101      	bne.n	8000cb4 <HAL_DFSDM_IRQHandler+0xb8>
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	e000      	b.n	8000cb6 <HAL_DFSDM_IRQHandler+0xba>
 8000cb4:	2203      	movs	r2, #3
      hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000cbc:	e0fa      	b.n	8000eb4 <HAL_DFSDM_IRQHandler+0x2b8>
    }
  }
  /* Check if end of injected conversion */
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f003 0301 	and.w	r3, r3, #1
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d034      	beq.n	8000d32 <HAL_DFSDM_IRQHandler+0x136>
           ((temp_fltcr2 & DFSDM_FLTCR2_JEOCIE) != 0U))
 8000cc8:	693b      	ldr	r3, [r7, #16]
 8000cca:	f003 0301 	and.w	r3, r3, #1
  else if (((temp_fltisr & DFSDM_FLTISR_JEOCF) != 0U) && \
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d02f      	beq.n	8000d32 <HAL_DFSDM_IRQHandler+0x136>
  {
    /* Call injected conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->InjConvCpltCallback(hdfsdm_filter);
#else
    HAL_DFSDM_FilterInjConvCpltCallback(hdfsdm_filter);
 8000cd2:	6878      	ldr	r0, [r7, #4]
 8000cd4:	f000 f902 	bl	8000edc <HAL_DFSDM_FilterInjConvCpltCallback>
#endif

    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining--;
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cdc:	1e5a      	subs	r2, r3, #1
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	649a      	str	r2, [r3, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	f040 80e5 	bne.w	8000eb6 <HAL_DFSDM_IRQHandler+0x2ba>
    {
      /* End of conversion if trigger is software */
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d112      	bne.n	8000d1a <HAL_DFSDM_IRQHandler+0x11e>
      {
        /* Disable interrupts for injected conversions */
        hdfsdm_filter->Instance->FLTCR2 &= ~(DFSDM_FLTCR2_JEOCIE);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f022 0201 	bic.w	r2, r2, #1
 8000d02:	605a      	str	r2, [r3, #4]

        /* Update DFSDM filter state */
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                               HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_REG;
 8000d0a:	2b03      	cmp	r3, #3
 8000d0c:	d101      	bne.n	8000d12 <HAL_DFSDM_IRQHandler+0x116>
 8000d0e:	2201      	movs	r2, #1
 8000d10:	e000      	b.n	8000d14 <HAL_DFSDM_IRQHandler+0x118>
 8000d12:	2202      	movs	r2, #2
        hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ) ? \
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      /* end of injected sequence, reset the value */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d102      	bne.n	8000d2a <HAL_DFSDM_IRQHandler+0x12e>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d28:	e000      	b.n	8000d2c <HAL_DFSDM_IRQHandler+0x130>
 8000d2a:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8000d2c:	687a      	ldr	r2, [r7, #4]
 8000d2e:	6493      	str	r3, [r2, #72]	; 0x48
    if (hdfsdm_filter->InjConvRemaining == 0U)
 8000d30:	e0c1      	b.n	8000eb6 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if analog watchdog occurs */
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f003 0310 	and.w	r3, r3, #16
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d03d      	beq.n	8000db8 <HAL_DFSDM_IRQHandler+0x1bc>
           ((temp_fltcr2 & DFSDM_FLTCR2_AWDIE) != 0U))
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	f003 0310 	and.w	r3, r3, #16
  else if (((temp_fltisr & DFSDM_FLTISR_AWDF) != 0U) && \
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d038      	beq.n	8000db8 <HAL_DFSDM_IRQHandler+0x1bc>
  {
    uint32_t reg;
    uint32_t threshold;
    uint32_t channel = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	62bb      	str	r3, [r7, #40]	; 0x28

    /* Get channel and threshold */
    reg = hdfsdm_filter->Instance->FLTAWSR;
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    threshold = ((reg & DFSDM_FLTAWSR_AWLTF) != 0U) ? DFSDM_AWD_LOW_THRESHOLD : DFSDM_AWD_HIGH_THRESHOLD;
 8000d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d54:	b2db      	uxtb	r3, r3
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d001      	beq.n	8000d5e <HAL_DFSDM_IRQHandler+0x162>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <HAL_DFSDM_IRQHandler+0x164>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
    if (threshold == DFSDM_AWD_HIGH_THRESHOLD)
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d109      	bne.n	8000d7c <HAL_DFSDM_IRQHandler+0x180>
    {
      reg = reg >> DFSDM_FLTAWSR_AWHTF_Pos;
 8000d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d6a:	0a1b      	lsrs	r3, r3, #8
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8000d6e:	e005      	b.n	8000d7c <HAL_DFSDM_IRQHandler+0x180>
    {
      channel++;
 8000d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d72:	3301      	adds	r3, #1
 8000d74:	62bb      	str	r3, [r7, #40]	; 0x28
      reg = reg >> 1;
 8000d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d78:	085b      	lsrs	r3, r3, #1
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8000d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7e:	f003 0301 	and.w	r3, r3, #1
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d102      	bne.n	8000d8c <HAL_DFSDM_IRQHandler+0x190>
 8000d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d88:	2b06      	cmp	r3, #6
 8000d8a:	d9f1      	bls.n	8000d70 <HAL_DFSDM_IRQHandler+0x174>
    }
    /* Clear analog watchdog flag */
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
                                        (1UL << (DFSDM_FLTAWSR_AWHTF_Pos + channel)) : \
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d105      	bne.n	8000d9e <HAL_DFSDM_IRQHandler+0x1a2>
 8000d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d94:	3308      	adds	r3, #8
 8000d96:	2201      	movs	r2, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	e003      	b.n	8000da6 <HAL_DFSDM_IRQHandler+0x1aa>
 8000d9e:	2201      	movs	r2, #1
 8000da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
    hdfsdm_filter->Instance->FLTAWCFR = (threshold == DFSDM_AWD_HIGH_THRESHOLD) ? \
 8000da6:	687a      	ldr	r2, [r7, #4]
 8000da8:	6812      	ldr	r2, [r2, #0]
 8000daa:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Call analog watchdog callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    hdfsdm_filter->AwdCallback(hdfsdm_filter, channel, threshold);
#else
    HAL_DFSDM_FilterAwdCallback(hdfsdm_filter, channel, threshold);
 8000dac:	68fa      	ldr	r2, [r7, #12]
 8000dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000db0:	6878      	ldr	r0, [r7, #4]
 8000db2:	f000 f89d 	bl	8000ef0 <HAL_DFSDM_FilterAwdCallback>
  {
 8000db6:	e07e      	b.n	8000eb6 <HAL_DFSDM_IRQHandler+0x2ba>
#endif
  }
  /* Check if clock absence occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a40      	ldr	r2, [pc, #256]	; (8000ec0 <HAL_DFSDM_IRQHandler+0x2c4>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d141      	bne.n	8000e46 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d03c      	beq.n	8000e46 <HAL_DFSDM_IRQHandler+0x24a>
           ((temp_fltcr2 & DFSDM_FLTCR2_CKABIE) != 0U))
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
           ((temp_fltisr & DFSDM_FLTISR_CKABF) != 0U) && \
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d037      	beq.n	8000e46 <HAL_DFSDM_IRQHandler+0x24a>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	623b      	str	r3, [r7, #32]

    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_CKABF) >> DFSDM_FLTISR_CKABF_Pos);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	689b      	ldr	r3, [r3, #8]
 8000de0:	0c1b      	lsrs	r3, r3, #16
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	627b      	str	r3, [r7, #36]	; 0x24

    while (channel < DFSDM1_CHANNEL_NUMBER)
 8000de6:	e02a      	b.n	8000e3e <HAL_DFSDM_IRQHandler+0x242>
    {
      /* Check if flag is set and corresponding channel is enabled */
      if (((reg & 1U) != 0U) && (a_dfsdm1ChannelHandle[channel] != NULL))
 8000de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dea:	f003 0301 	and.w	r3, r3, #1
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d01f      	beq.n	8000e32 <HAL_DFSDM_IRQHandler+0x236>
 8000df2:	4a34      	ldr	r2, [pc, #208]	; (8000ec4 <HAL_DFSDM_IRQHandler+0x2c8>)
 8000df4:	6a3b      	ldr	r3, [r7, #32]
 8000df6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d019      	beq.n	8000e32 <HAL_DFSDM_IRQHandler+0x236>
      {
        /* Check clock absence has been enabled for this channel */
        if ((a_dfsdm1ChannelHandle[channel]->Instance->CHCFGR1 & DFSDM_CHCFGR1_CKABEN) != 0U)
 8000dfe:	4a31      	ldr	r2, [pc, #196]	; (8000ec4 <HAL_DFSDM_IRQHandler+0x2c8>)
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00f      	beq.n	8000e32 <HAL_DFSDM_IRQHandler+0x236>
        {
          /* Clear clock absence flag */
          hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRCKABF_Pos + channel));
 8000e12:	6a3b      	ldr	r3, [r7, #32]
 8000e14:	f103 0210 	add.w	r2, r3, #16
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	fa01 f202 	lsl.w	r2, r1, r2
 8000e22:	60da      	str	r2, [r3, #12]

          /* Call clock absence callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
          a_dfsdm1ChannelHandle[channel]->CkabCallback(a_dfsdm1ChannelHandle[channel]);
#else
          HAL_DFSDM_ChannelCkabCallback(a_dfsdm1ChannelHandle[channel]);
 8000e24:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <HAL_DFSDM_IRQHandler+0x2c8>)
 8000e26:	6a3b      	ldr	r3, [r7, #32]
 8000e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fdb1 	bl	8000994 <HAL_DFSDM_ChannelCkabCallback>
#endif
        }
      }
      channel++;
 8000e32:	6a3b      	ldr	r3, [r7, #32]
 8000e34:	3301      	adds	r3, #1
 8000e36:	623b      	str	r3, [r7, #32]
      reg = reg >> 1;
 8000e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3a:	085b      	lsrs	r3, r3, #1
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
    while (channel < DFSDM1_CHANNEL_NUMBER)
 8000e3e:	6a3b      	ldr	r3, [r7, #32]
 8000e40:	2b07      	cmp	r3, #7
 8000e42:	d9d1      	bls.n	8000de8 <HAL_DFSDM_IRQHandler+0x1ec>
  {
 8000e44:	e037      	b.n	8000eb6 <HAL_DFSDM_IRQHandler+0x2ba>
    }
  }
  /* Check if short circuit detection occurs */
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a1d      	ldr	r2, [pc, #116]	; (8000ec0 <HAL_DFSDM_IRQHandler+0x2c4>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d132      	bne.n	8000eb6 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
  else if ((hdfsdm_filter->Instance == DFSDM1_Filter0) && \
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d02d      	beq.n	8000eb6 <HAL_DFSDM_IRQHandler+0x2ba>
           ((temp_fltcr2 & DFSDM_FLTCR2_SCDIE) != 0U))
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	f003 0320 	and.w	r3, r3, #32
           ((temp_fltisr & DFSDM_FLTISR_SCDF) != 0U) && \
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d028      	beq.n	8000eb6 <HAL_DFSDM_IRQHandler+0x2ba>
  {
    uint32_t reg;
    uint32_t channel = 0;
 8000e64:	2300      	movs	r3, #0
 8000e66:	61bb      	str	r3, [r7, #24]

    /* Get channel */
    reg = ((hdfsdm_filter->Instance->FLTISR & DFSDM_FLTISR_SCDF) >> DFSDM_FLTISR_SCDF_Pos);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	0e1b      	lsrs	r3, r3, #24
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8000e74:	e005      	b.n	8000e82 <HAL_DFSDM_IRQHandler+0x286>
    {
      channel++;
 8000e76:	69bb      	ldr	r3, [r7, #24]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	61bb      	str	r3, [r7, #24]
      reg = reg >> 1;
 8000e7c:	69fb      	ldr	r3, [r7, #28]
 8000e7e:	085b      	lsrs	r3, r3, #1
 8000e80:	61fb      	str	r3, [r7, #28]
    while (((reg & 1U) == 0U) && (channel < (DFSDM1_CHANNEL_NUMBER - 1U)))
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	f003 0301 	and.w	r3, r3, #1
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d102      	bne.n	8000e92 <HAL_DFSDM_IRQHandler+0x296>
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	2b06      	cmp	r3, #6
 8000e90:	d9f1      	bls.n	8000e76 <HAL_DFSDM_IRQHandler+0x27a>
    }

    /* Clear short circuit detection flag */
    hdfsdm_filter->Instance->FLTICR = (1UL << (DFSDM_FLTICR_CLRSCDF_Pos + channel));
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	f103 0218 	add.w	r2, r3, #24
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	2101      	movs	r1, #1
 8000e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8000ea2:	60da      	str	r2, [r3, #12]

    /* Call short circuit detection callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
    a_dfsdm1ChannelHandle[channel]->ScdCallback(a_dfsdm1ChannelHandle[channel]);
#else
    HAL_DFSDM_ChannelScdCallback(a_dfsdm1ChannelHandle[channel]);
 8000ea4:	4a07      	ldr	r2, [pc, #28]	; (8000ec4 <HAL_DFSDM_IRQHandler+0x2c8>)
 8000ea6:	69bb      	ldr	r3, [r7, #24]
 8000ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eac:	4618      	mov	r0, r3
 8000eae:	f7ff fd7b 	bl	80009a8 <HAL_DFSDM_ChannelScdCallback>
#endif
  }
}
 8000eb2:	e000      	b.n	8000eb6 <HAL_DFSDM_IRQHandler+0x2ba>
    if ((hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8000eb4:	bf00      	nop
}
 8000eb6:	bf00      	nop
 8000eb8:	3730      	adds	r7, #48	; 0x30
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40016100 	.word	0x40016100
 8000ec4:	20000030 	.word	0x20000030

08000ec8 <HAL_DFSDM_FilterRegConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetRegularValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b083      	sub	sp, #12
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvCpltCallback could be implemented in the user file.
   */
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <HAL_DFSDM_FilterInjConvCpltCallback>:
  *         using HAL_DFSDM_FilterGetInjectedValue.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterInjConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000edc:	b480      	push	{r7}
 8000ede:	b083      	sub	sp, #12
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterInjConvCpltCallback could be implemented in the user file.
   */
}
 8000ee4:	bf00      	nop
 8000ee6:	370c      	adds	r7, #12
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <HAL_DFSDM_FilterAwdCallback>:
  * @param  Threshold Low or high threshold has been reached.
  * @retval None
  */
__weak void HAL_DFSDM_FilterAwdCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                        uint32_t Channel, uint32_t Threshold)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
  UNUSED(Threshold);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterAwdCallback could be implemented in the user file.
   */
}
 8000efc:	bf00      	nop
 8000efe:	3714      	adds	r7, #20
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8000f10:	bf00      	nop
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	4a1c      	ldr	r2, [pc, #112]	; (8000f98 <DFSDM_GetChannelFromInstance+0x7c>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d102      	bne.n	8000f32 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	e02b      	b.n	8000f8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	4a19      	ldr	r2, [pc, #100]	; (8000f9c <DFSDM_GetChannelFromInstance+0x80>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d102      	bne.n	8000f40 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	60fb      	str	r3, [r7, #12]
 8000f3e:	e024      	b.n	8000f8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	4a17      	ldr	r2, [pc, #92]	; (8000fa0 <DFSDM_GetChannelFromInstance+0x84>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d102      	bne.n	8000f4e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	60fb      	str	r3, [r7, #12]
 8000f4c:	e01d      	b.n	8000f8a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <DFSDM_GetChannelFromInstance+0x88>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d102      	bne.n	8000f5c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8000f56:	2304      	movs	r3, #4
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	e016      	b.n	8000f8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a12      	ldr	r2, [pc, #72]	; (8000fa8 <DFSDM_GetChannelFromInstance+0x8c>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d102      	bne.n	8000f6a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8000f64:	2305      	movs	r3, #5
 8000f66:	60fb      	str	r3, [r7, #12]
 8000f68:	e00f      	b.n	8000f8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <DFSDM_GetChannelFromInstance+0x90>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d102      	bne.n	8000f78 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8000f72:	2306      	movs	r3, #6
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	e008      	b.n	8000f8a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	4a0d      	ldr	r2, [pc, #52]	; (8000fb0 <DFSDM_GetChannelFromInstance+0x94>)
 8000f7c:	4293      	cmp	r3, r2
 8000f7e:	d102      	bne.n	8000f86 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8000f80:	2307      	movs	r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	e001      	b.n	8000f8a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8000f86:	2303      	movs	r3, #3
 8000f88:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	40016000 	.word	0x40016000
 8000f9c:	40016020 	.word	0x40016020
 8000fa0:	40016040 	.word	0x40016040
 8000fa4:	40016080 	.word	0x40016080
 8000fa8:	400160a0 	.word	0x400160a0
 8000fac:	400160c0 	.word	0x400160c0
 8000fb0:	400160e0 	.word	0x400160e0

08000fb4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b084      	sub	sp, #16
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e08d      	b.n	80010e2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	4b47      	ldr	r3, [pc, #284]	; (80010ec <HAL_DMA_Init+0x138>)
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d80f      	bhi.n	8000ff2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b45      	ldr	r3, [pc, #276]	; (80010f0 <HAL_DMA_Init+0x13c>)
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a45      	ldr	r2, [pc, #276]	; (80010f4 <HAL_DMA_Init+0x140>)
 8000fde:	fba2 2303 	umull	r2, r3, r2, r3
 8000fe2:	091b      	lsrs	r3, r3, #4
 8000fe4:	009a      	lsls	r2, r3, #2
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a42      	ldr	r2, [pc, #264]	; (80010f8 <HAL_DMA_Init+0x144>)
 8000fee:	641a      	str	r2, [r3, #64]	; 0x40
 8000ff0:	e00e      	b.n	8001010 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b40      	ldr	r3, [pc, #256]	; (80010fc <HAL_DMA_Init+0x148>)
 8000ffa:	4413      	add	r3, r2
 8000ffc:	4a3d      	ldr	r2, [pc, #244]	; (80010f4 <HAL_DMA_Init+0x140>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	091b      	lsrs	r3, r3, #4
 8001004:	009a      	lsls	r2, r3, #2
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a3c      	ldr	r2, [pc, #240]	; (8001100 <HAL_DMA_Init+0x14c>)
 800100e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2202      	movs	r2, #2
 8001014:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800102a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001034:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001040:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	699b      	ldr	r3, [r3, #24]
 8001046:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800104c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a1b      	ldr	r3, [r3, #32]
 8001052:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001054:	68fa      	ldr	r2, [r7, #12]
 8001056:	4313      	orrs	r3, r2
 8001058:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68fa      	ldr	r2, [r7, #12]
 8001060:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f000 f8fe 	bl	8001264 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	689b      	ldr	r3, [r3, #8]
 800106c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001070:	d102      	bne.n	8001078 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001080:	b2d2      	uxtb	r2, r2
 8001082:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001088:	687a      	ldr	r2, [r7, #4]
 800108a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800108c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	2b00      	cmp	r3, #0
 8001094:	d010      	beq.n	80010b8 <HAL_DMA_Init+0x104>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	2b04      	cmp	r3, #4
 800109c:	d80c      	bhi.n	80010b8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f000 f91e 	bl	80012e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80010b4:	605a      	str	r2, [r3, #4]
 80010b6:	e008      	b.n	80010ca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2200      	movs	r2, #0
 80010ce:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2201      	movs	r2, #1
 80010d4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80010e0:	2300      	movs	r3, #0
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	3710      	adds	r7, #16
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40020407 	.word	0x40020407
 80010f0:	bffdfff8 	.word	0xbffdfff8
 80010f4:	cccccccd 	.word	0xcccccccd
 80010f8:	40020000 	.word	0x40020000
 80010fc:	bffdfbf8 	.word	0xbffdfbf8
 8001100:	40020400 	.word	0x40020400

08001104 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001120:	f003 031c 	and.w	r3, r3, #28
 8001124:	2204      	movs	r2, #4
 8001126:	409a      	lsls	r2, r3
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4013      	ands	r3, r2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d026      	beq.n	800117e <HAL_DMA_IRQHandler+0x7a>
 8001130:	68bb      	ldr	r3, [r7, #8]
 8001132:	f003 0304 	and.w	r3, r3, #4
 8001136:	2b00      	cmp	r3, #0
 8001138:	d021      	beq.n	800117e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	2b00      	cmp	r3, #0
 8001146:	d107      	bne.n	8001158 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f022 0204 	bic.w	r2, r2, #4
 8001156:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800115c:	f003 021c 	and.w	r2, r3, #28
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	2104      	movs	r1, #4
 8001166:	fa01 f202 	lsl.w	r2, r1, r2
 800116a:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	2b00      	cmp	r3, #0
 8001172:	d071      	beq.n	8001258 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800117c:	e06c      	b.n	8001258 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f003 031c 	and.w	r3, r3, #28
 8001186:	2202      	movs	r2, #2
 8001188:	409a      	lsls	r2, r3
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d02e      	beq.n	80011f0 <HAL_DMA_IRQHandler+0xec>
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d029      	beq.n	80011f0 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f003 0320 	and.w	r3, r3, #32
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d10b      	bne.n	80011c2 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f022 020a 	bic.w	r2, r2, #10
 80011b8:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2201      	movs	r2, #1
 80011be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	f003 021c 	and.w	r2, r3, #28
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	2102      	movs	r1, #2
 80011d0:	fa01 f202 	lsl.w	r2, r1, r2
 80011d4:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d038      	beq.n	8001258 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80011ee:	e033      	b.n	8001258 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f4:	f003 031c 	and.w	r3, r3, #28
 80011f8:	2208      	movs	r2, #8
 80011fa:	409a      	lsls	r2, r3
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4013      	ands	r3, r2
 8001200:	2b00      	cmp	r3, #0
 8001202:	d02a      	beq.n	800125a <HAL_DMA_IRQHandler+0x156>
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	f003 0308 	and.w	r3, r3, #8
 800120a:	2b00      	cmp	r3, #0
 800120c:	d025      	beq.n	800125a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f022 020e 	bic.w	r2, r2, #14
 800121c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001222:	f003 021c 	and.w	r2, r3, #28
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	2101      	movs	r1, #1
 800122c:	fa01 f202 	lsl.w	r2, r1, r2
 8001230:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2201      	movs	r2, #1
 800123c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124c:	2b00      	cmp	r3, #0
 800124e:	d004      	beq.n	800125a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001258:	bf00      	nop
 800125a:	bf00      	nop
}
 800125c:	3710      	adds	r7, #16
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
	...

08001264 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001264:	b480      	push	{r7}
 8001266:	b085      	sub	sp, #20
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	461a      	mov	r2, r3
 8001272:	4b17      	ldr	r3, [pc, #92]	; (80012d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001274:	429a      	cmp	r2, r3
 8001276:	d80a      	bhi.n	800128e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127c:	089b      	lsrs	r3, r3, #2
 800127e:	009b      	lsls	r3, r3, #2
 8001280:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001284:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6493      	str	r3, [r2, #72]	; 0x48
 800128c:	e007      	b.n	800129e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	089b      	lsrs	r3, r3, #2
 8001294:	009a      	lsls	r2, r3, #2
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001298:	4413      	add	r3, r2
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	b2db      	uxtb	r3, r3
 80012a4:	3b08      	subs	r3, #8
 80012a6:	4a0c      	ldr	r2, [pc, #48]	; (80012d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	091b      	lsrs	r3, r3, #4
 80012ae:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80012b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f003 031f 	and.w	r3, r3, #31
 80012bc:	2201      	movs	r2, #1
 80012be:	409a      	lsls	r2, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	651a      	str	r2, [r3, #80]	; 0x50
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	40020407 	.word	0x40020407
 80012d4:	4002081c 	.word	0x4002081c
 80012d8:	cccccccd 	.word	0xcccccccd
 80012dc:	40020880 	.word	0x40020880

080012e0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80012f0:	68fa      	ldr	r2, [r7, #12]
 80012f2:	4b0b      	ldr	r3, [pc, #44]	; (8001320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80012f4:	4413      	add	r3, r2
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	461a      	mov	r2, r3
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a08      	ldr	r2, [pc, #32]	; (8001324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001302:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	3b01      	subs	r3, #1
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2201      	movs	r2, #1
 800130e:	409a      	lsls	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	1000823f 	.word	0x1000823f
 8001324:	40020940 	.word	0x40020940

08001328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001328:	b480      	push	{r7}
 800132a:	b087      	sub	sp, #28
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001336:	e166      	b.n	8001606 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	2101      	movs	r1, #1
 800133e:	697b      	ldr	r3, [r7, #20]
 8001340:	fa01 f303 	lsl.w	r3, r1, r3
 8001344:	4013      	ands	r3, r2
 8001346:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	2b00      	cmp	r3, #0
 800134c:	f000 8158 	beq.w	8001600 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	685b      	ldr	r3, [r3, #4]
 8001354:	f003 0303 	and.w	r3, r3, #3
 8001358:	2b01      	cmp	r3, #1
 800135a:	d005      	beq.n	8001368 <HAL_GPIO_Init+0x40>
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f003 0303 	and.w	r3, r3, #3
 8001364:	2b02      	cmp	r3, #2
 8001366:	d130      	bne.n	80013ca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800136e:	697b      	ldr	r3, [r7, #20]
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	2203      	movs	r2, #3
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	43db      	mvns	r3, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4013      	ands	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68da      	ldr	r2, [r3, #12]
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800139e:	2201      	movs	r2, #1
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	fa02 f303 	lsl.w	r3, r2, r3
 80013a6:	43db      	mvns	r3, r3
 80013a8:	693a      	ldr	r2, [r7, #16]
 80013aa:	4013      	ands	r3, r2
 80013ac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	f003 0201 	and.w	r2, r3, #1
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	693a      	ldr	r2, [r7, #16]
 80013c8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f003 0303 	and.w	r3, r3, #3
 80013d2:	2b03      	cmp	r3, #3
 80013d4:	d017      	beq.n	8001406 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	2203      	movs	r2, #3
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	43db      	mvns	r3, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4013      	ands	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	697b      	ldr	r3, [r7, #20]
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	693a      	ldr	r2, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0303 	and.w	r3, r3, #3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d123      	bne.n	800145a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	08da      	lsrs	r2, r3, #3
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	3208      	adds	r2, #8
 800141a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800141e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	009b      	lsls	r3, r3, #2
 8001428:	220f      	movs	r2, #15
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43db      	mvns	r3, r3
 8001430:	693a      	ldr	r2, [r7, #16]
 8001432:	4013      	ands	r3, r2
 8001434:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	691a      	ldr	r2, [r3, #16]
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	f003 0307 	and.w	r3, r3, #7
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	08da      	lsrs	r2, r3, #3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3208      	adds	r2, #8
 8001454:	6939      	ldr	r1, [r7, #16]
 8001456:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	005b      	lsls	r3, r3, #1
 8001464:	2203      	movs	r2, #3
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43db      	mvns	r3, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4013      	ands	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	685b      	ldr	r3, [r3, #4]
 8001476:	f003 0203 	and.w	r2, r3, #3
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	693a      	ldr	r2, [r7, #16]
 800148c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001496:	2b00      	cmp	r3, #0
 8001498:	f000 80b2 	beq.w	8001600 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800149c:	4b61      	ldr	r3, [pc, #388]	; (8001624 <HAL_GPIO_Init+0x2fc>)
 800149e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014a0:	4a60      	ldr	r2, [pc, #384]	; (8001624 <HAL_GPIO_Init+0x2fc>)
 80014a2:	f043 0301 	orr.w	r3, r3, #1
 80014a6:	6613      	str	r3, [r2, #96]	; 0x60
 80014a8:	4b5e      	ldr	r3, [pc, #376]	; (8001624 <HAL_GPIO_Init+0x2fc>)
 80014aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ac:	f003 0301 	and.w	r3, r3, #1
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014b4:	4a5c      	ldr	r2, [pc, #368]	; (8001628 <HAL_GPIO_Init+0x300>)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3302      	adds	r3, #2
 80014bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	f003 0303 	and.w	r3, r3, #3
 80014c8:	009b      	lsls	r3, r3, #2
 80014ca:	220f      	movs	r2, #15
 80014cc:	fa02 f303 	lsl.w	r3, r2, r3
 80014d0:	43db      	mvns	r3, r3
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80014de:	d02b      	beq.n	8001538 <HAL_GPIO_Init+0x210>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	4a52      	ldr	r2, [pc, #328]	; (800162c <HAL_GPIO_Init+0x304>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d025      	beq.n	8001534 <HAL_GPIO_Init+0x20c>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	4a51      	ldr	r2, [pc, #324]	; (8001630 <HAL_GPIO_Init+0x308>)
 80014ec:	4293      	cmp	r3, r2
 80014ee:	d01f      	beq.n	8001530 <HAL_GPIO_Init+0x208>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4a50      	ldr	r2, [pc, #320]	; (8001634 <HAL_GPIO_Init+0x30c>)
 80014f4:	4293      	cmp	r3, r2
 80014f6:	d019      	beq.n	800152c <HAL_GPIO_Init+0x204>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	4a4f      	ldr	r2, [pc, #316]	; (8001638 <HAL_GPIO_Init+0x310>)
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d013      	beq.n	8001528 <HAL_GPIO_Init+0x200>
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	4a4e      	ldr	r2, [pc, #312]	; (800163c <HAL_GPIO_Init+0x314>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d00d      	beq.n	8001524 <HAL_GPIO_Init+0x1fc>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	4a4d      	ldr	r2, [pc, #308]	; (8001640 <HAL_GPIO_Init+0x318>)
 800150c:	4293      	cmp	r3, r2
 800150e:	d007      	beq.n	8001520 <HAL_GPIO_Init+0x1f8>
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	4a4c      	ldr	r2, [pc, #304]	; (8001644 <HAL_GPIO_Init+0x31c>)
 8001514:	4293      	cmp	r3, r2
 8001516:	d101      	bne.n	800151c <HAL_GPIO_Init+0x1f4>
 8001518:	2307      	movs	r3, #7
 800151a:	e00e      	b.n	800153a <HAL_GPIO_Init+0x212>
 800151c:	2308      	movs	r3, #8
 800151e:	e00c      	b.n	800153a <HAL_GPIO_Init+0x212>
 8001520:	2306      	movs	r3, #6
 8001522:	e00a      	b.n	800153a <HAL_GPIO_Init+0x212>
 8001524:	2305      	movs	r3, #5
 8001526:	e008      	b.n	800153a <HAL_GPIO_Init+0x212>
 8001528:	2304      	movs	r3, #4
 800152a:	e006      	b.n	800153a <HAL_GPIO_Init+0x212>
 800152c:	2303      	movs	r3, #3
 800152e:	e004      	b.n	800153a <HAL_GPIO_Init+0x212>
 8001530:	2302      	movs	r3, #2
 8001532:	e002      	b.n	800153a <HAL_GPIO_Init+0x212>
 8001534:	2301      	movs	r3, #1
 8001536:	e000      	b.n	800153a <HAL_GPIO_Init+0x212>
 8001538:	2300      	movs	r3, #0
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	f002 0203 	and.w	r2, r2, #3
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	4093      	lsls	r3, r2
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800154a:	4937      	ldr	r1, [pc, #220]	; (8001628 <HAL_GPIO_Init+0x300>)
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	089b      	lsrs	r3, r3, #2
 8001550:	3302      	adds	r3, #2
 8001552:	693a      	ldr	r2, [r7, #16]
 8001554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001558:	4b3b      	ldr	r3, [pc, #236]	; (8001648 <HAL_GPIO_Init+0x320>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	43db      	mvns	r3, r3
 8001562:	693a      	ldr	r2, [r7, #16]
 8001564:	4013      	ands	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001568:	683b      	ldr	r3, [r7, #0]
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001574:	693a      	ldr	r2, [r7, #16]
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	4313      	orrs	r3, r2
 800157a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800157c:	4a32      	ldr	r2, [pc, #200]	; (8001648 <HAL_GPIO_Init+0x320>)
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001582:	4b31      	ldr	r3, [pc, #196]	; (8001648 <HAL_GPIO_Init+0x320>)
 8001584:	68db      	ldr	r3, [r3, #12]
 8001586:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	43db      	mvns	r3, r3
 800158c:	693a      	ldr	r2, [r7, #16]
 800158e:	4013      	ands	r3, r2
 8001590:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800159e:	693a      	ldr	r2, [r7, #16]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015a6:	4a28      	ldr	r2, [pc, #160]	; (8001648 <HAL_GPIO_Init+0x320>)
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015ac:	4b26      	ldr	r3, [pc, #152]	; (8001648 <HAL_GPIO_Init+0x320>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d003      	beq.n	80015d0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80015c8:	693a      	ldr	r2, [r7, #16]
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015d0:	4a1d      	ldr	r2, [pc, #116]	; (8001648 <HAL_GPIO_Init+0x320>)
 80015d2:	693b      	ldr	r3, [r7, #16]
 80015d4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015d6:	4b1c      	ldr	r3, [pc, #112]	; (8001648 <HAL_GPIO_Init+0x320>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	43db      	mvns	r3, r3
 80015e0:	693a      	ldr	r2, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d003      	beq.n	80015fa <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	4313      	orrs	r3, r2
 80015f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015fa:	4a13      	ldr	r2, [pc, #76]	; (8001648 <HAL_GPIO_Init+0x320>)
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	fa22 f303 	lsr.w	r3, r2, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	f47f ae91 	bne.w	8001338 <HAL_GPIO_Init+0x10>
  }
}
 8001616:	bf00      	nop
 8001618:	bf00      	nop
 800161a:	371c      	adds	r7, #28
 800161c:	46bd      	mov	sp, r7
 800161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001622:	4770      	bx	lr
 8001624:	40021000 	.word	0x40021000
 8001628:	40010000 	.word	0x40010000
 800162c:	48000400 	.word	0x48000400
 8001630:	48000800 	.word	0x48000800
 8001634:	48000c00 	.word	0x48000c00
 8001638:	48001000 	.word	0x48001000
 800163c:	48001400 	.word	0x48001400
 8001640:	48001800 	.word	0x48001800
 8001644:	48001c00 	.word	0x48001c00
 8001648:	40010400 	.word	0x40010400

0800164c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	460b      	mov	r3, r1
 8001656:	807b      	strh	r3, [r7, #2]
 8001658:	4613      	mov	r3, r2
 800165a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800165c:	787b      	ldrb	r3, [r7, #1]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d003      	beq.n	800166a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001662:	887a      	ldrh	r2, [r7, #2]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001668:	e002      	b.n	8001670 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800166a:	887a      	ldrh	r2, [r7, #2]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af02      	add	r7, sp, #8
 8001682:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001684:	2300      	movs	r3, #0
 8001686:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001688:	f7fe fe20 	bl	80002cc <HAL_GetTick>
 800168c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2b00      	cmp	r3, #0
 8001692:	d102      	bne.n	800169a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	e092      	b.n	80017c0 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f040 808b 	bne.w	80017c0 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f003 f99e 	bl	80049ec <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 80016b0:	f241 3188 	movw	r1, #5000	; 0x1388
 80016b4:	6878      	ldr	r0, [r7, #4]
 80016b6:	f000 f88b 	bl	80017d0 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	4b42      	ldr	r3, [pc, #264]	; (80017cc <HAL_OSPI_Init+0x150>)
 80016c2:	4013      	ands	r3, r2
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	68d1      	ldr	r1, [r2, #12]
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6912      	ldr	r2, [r2, #16]
 80016cc:	3a01      	subs	r2, #1
 80016ce:	0412      	lsls	r2, r2, #16
 80016d0:	4311      	orrs	r1, r2
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6952      	ldr	r2, [r2, #20]
 80016d6:	3a01      	subs	r2, #1
 80016d8:	0212      	lsls	r2, r2, #8
 80016da:	4311      	orrs	r1, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016e0:	4311      	orrs	r1, r2
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	69d2      	ldr	r2, [r2, #28]
 80016e6:	4311      	orrs	r1, r2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6812      	ldr	r2, [r2, #0]
 80016ec:	430b      	orrs	r3, r1
 80016ee:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	0412      	lsls	r2, r2, #16
 80016fa:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	021a      	lsls	r2, r3, #8
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	68bb      	ldr	r3, [r7, #8]
 800171e:	2200      	movs	r2, #0
 8001720:	2120      	movs	r1, #32
 8001722:	6878      	ldr	r0, [r7, #4]
 8001724:	f000 fb98 	bl	8001e58 <OSPI_WaitFlagStateUntilTimeout>
 8001728:	4603      	mov	r3, r0
 800172a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800172c:	7bfb      	ldrb	r3, [r7, #15]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d146      	bne.n	80017c0 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6a1b      	ldr	r3, [r3, #32]
 8001740:	1e5a      	subs	r2, r3, #1
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	430a      	orrs	r2, r1
 800175e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001768:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001774:	431a      	orrs	r2, r3
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	430a      	orrs	r2, r1
 800177c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	2b02      	cmp	r3, #2
 8001796:	d107      	bne.n	80017a8 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	689a      	ldr	r2, [r3, #8]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0202 	orr.w	r2, r2, #2
 80017a6:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80017b0:	d103      	bne.n	80017ba <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2201      	movs	r2, #1
 80017b6:	645a      	str	r2, [r3, #68]	; 0x44
 80017b8:	e002      	b.n	80017c0 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2202      	movs	r2, #2
 80017be:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80017c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	f8e0f8f4 	.word	0xf8e0f8f4

080017d0 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
 80017d8:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
	...

080017f0 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b092      	sub	sp, #72	; 0x48
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017fc:	2300      	movs	r3, #0
 80017fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8001802:	2300      	movs	r3, #0
 8001804:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a08      	ldr	r2, [pc, #32]	; (8001830 <HAL_OSPIM_Config+0x40>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d105      	bne.n	800181e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8001812:	2300      	movs	r3, #0
 8001814:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8001816:	2301      	movs	r3, #1
 8001818:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 800181c:	e004      	b.n	8001828 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800181e:	2301      	movs	r3, #1
 8001820:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8001828:	2300      	movs	r3, #0
 800182a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800182e:	e01f      	b.n	8001870 <HAL_OSPIM_Config+0x80>
 8001830:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8001834:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001838:	3301      	adds	r3, #1
 800183a:	b2d8      	uxtb	r0, r3
 800183c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001840:	f107 0114 	add.w	r1, r7, #20
 8001844:	4613      	mov	r3, r2
 8001846:	009b      	lsls	r3, r3, #2
 8001848:	4413      	add	r3, r2
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	440b      	add	r3, r1
 800184e:	4619      	mov	r1, r3
 8001850:	f000 fb3a 	bl	8001ec8 <OSPIM_GetConfig>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d005      	beq.n	8001866 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	2208      	movs	r2, #8
 8001864:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8001866:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800186a:	3301      	adds	r3, #1
 800186c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8001870:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001874:	2b01      	cmp	r3, #1
 8001876:	d9dd      	bls.n	8001834 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8001878:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800187c:	2b00      	cmp	r3, #0
 800187e:	f040 82de 	bne.w	8001e3e <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8001882:	4bc6      	ldr	r3, [pc, #792]	; (8001b9c <HAL_OSPIM_Config+0x3ac>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00b      	beq.n	80018a6 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800188e:	4bc3      	ldr	r3, [pc, #780]	; (8001b9c <HAL_OSPIM_Config+0x3ac>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4ac2      	ldr	r2, [pc, #776]	; (8001b9c <HAL_OSPIM_Config+0x3ac>)
 8001894:	f023 0301 	bic.w	r3, r3, #1
 8001898:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 800189a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 80018a6:	4bbe      	ldr	r3, [pc, #760]	; (8001ba0 <HAL_OSPIM_Config+0x3b0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d00b      	beq.n	80018ca <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 80018b2:	4bbb      	ldr	r3, [pc, #748]	; (8001ba0 <HAL_OSPIM_Config+0x3b0>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4aba      	ldr	r2, [pc, #744]	; (8001ba0 <HAL_OSPIM_Config+0x3b0>)
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 80018be:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 80018c2:	f043 0302 	orr.w	r3, r3, #2
 80018c6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 80018ca:	49b6      	ldr	r1, [pc, #728]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 80018cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018ce:	4613      	mov	r3, r2
 80018d0:	009b      	lsls	r3, r3, #2
 80018d2:	4413      	add	r3, r2
 80018d4:	009b      	lsls	r3, r3, #2
 80018d6:	3348      	adds	r3, #72	; 0x48
 80018d8:	443b      	add	r3, r7
 80018da:	3b2c      	subs	r3, #44	; 0x2c
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	3b01      	subs	r3, #1
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	440b      	add	r3, r1
 80018e4:	6859      	ldr	r1, [r3, #4]
 80018e6:	48af      	ldr	r0, [pc, #700]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 80018e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018ea:	4613      	mov	r3, r2
 80018ec:	009b      	lsls	r3, r3, #2
 80018ee:	4413      	add	r3, r2
 80018f0:	009b      	lsls	r3, r3, #2
 80018f2:	3348      	adds	r3, #72	; 0x48
 80018f4:	443b      	add	r3, r7
 80018f6:	3b2c      	subs	r3, #44	; 0x2c
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8001900:	009b      	lsls	r3, r3, #2
 8001902:	4403      	add	r3, r0
 8001904:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8001906:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001908:	4613      	mov	r3, r2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	4413      	add	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	3348      	adds	r3, #72	; 0x48
 8001912:	443b      	add	r3, r7
 8001914:	3b34      	subs	r3, #52	; 0x34
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	2b00      	cmp	r3, #0
 800191a:	f000 80a1 	beq.w	8001a60 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800191e:	49a1      	ldr	r1, [pc, #644]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 8001920:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001922:	4613      	mov	r3, r2
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	009b      	lsls	r3, r3, #2
 800192a:	3348      	adds	r3, #72	; 0x48
 800192c:	443b      	add	r3, r7
 800192e:	3b34      	subs	r3, #52	; 0x34
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	3b01      	subs	r3, #1
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	440b      	add	r3, r1
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	489a      	ldr	r0, [pc, #616]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 800193c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	009b      	lsls	r3, r3, #2
 8001946:	3348      	adds	r3, #72	; 0x48
 8001948:	443b      	add	r3, r7
 800194a:	3b34      	subs	r3, #52	; 0x34
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	3b01      	subs	r3, #1
 8001950:	f021 0201 	bic.w	r2, r1, #1
 8001954:	009b      	lsls	r3, r3, #2
 8001956:	4403      	add	r3, r0
 8001958:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 800195a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800195c:	4613      	mov	r3, r2
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	4413      	add	r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	3348      	adds	r3, #72	; 0x48
 8001966:	443b      	add	r3, r7
 8001968:	3b30      	subs	r3, #48	; 0x30
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d01d      	beq.n	80019ac <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8001970:	498c      	ldr	r1, [pc, #560]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 8001972:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001974:	4613      	mov	r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	3348      	adds	r3, #72	; 0x48
 800197e:	443b      	add	r3, r7
 8001980:	3b30      	subs	r3, #48	; 0x30
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	3b01      	subs	r3, #1
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	440b      	add	r3, r1
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	4885      	ldr	r0, [pc, #532]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 800198e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001990:	4613      	mov	r3, r2
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	009b      	lsls	r3, r3, #2
 8001998:	3348      	adds	r3, #72	; 0x48
 800199a:	443b      	add	r3, r7
 800199c:	3b30      	subs	r3, #48	; 0x30
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	3b01      	subs	r3, #1
 80019a2:	f021 0210 	bic.w	r2, r1, #16
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	4403      	add	r3, r0
 80019aa:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80019ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	3348      	adds	r3, #72	; 0x48
 80019b8:	443b      	add	r3, r7
 80019ba:	3b28      	subs	r3, #40	; 0x28
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d021      	beq.n	8001a06 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 80019c2:	4978      	ldr	r1, [pc, #480]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 80019c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019c6:	4613      	mov	r3, r2
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	3348      	adds	r3, #72	; 0x48
 80019d0:	443b      	add	r3, r7
 80019d2:	3b28      	subs	r3, #40	; 0x28
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	440b      	add	r3, r1
 80019e0:	6859      	ldr	r1, [r3, #4]
 80019e2:	4870      	ldr	r0, [pc, #448]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 80019e4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80019e6:	4613      	mov	r3, r2
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	009b      	lsls	r3, r3, #2
 80019ee:	3348      	adds	r3, #72	; 0x48
 80019f0:	443b      	add	r3, r7
 80019f2:	3b28      	subs	r3, #40	; 0x28
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	f003 0301 	and.w	r3, r3, #1
 80019fc:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4403      	add	r3, r0
 8001a04:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001a06:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a08:	4613      	mov	r3, r2
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	3348      	adds	r3, #72	; 0x48
 8001a12:	443b      	add	r3, r7
 8001a14:	3b24      	subs	r3, #36	; 0x24
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d021      	beq.n	8001a60 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8001a1c:	4961      	ldr	r1, [pc, #388]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 8001a1e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a20:	4613      	mov	r3, r2
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	4413      	add	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	3348      	adds	r3, #72	; 0x48
 8001a2a:	443b      	add	r3, r7
 8001a2c:	3b24      	subs	r3, #36	; 0x24
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	440b      	add	r3, r1
 8001a3a:	6859      	ldr	r1, [r3, #4]
 8001a3c:	4859      	ldr	r0, [pc, #356]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 8001a3e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001a40:	4613      	mov	r3, r2
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	4413      	add	r3, r2
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	3348      	adds	r3, #72	; 0x48
 8001a4a:	443b      	add	r3, r7
 8001a4c:	3b24      	subs	r3, #36	; 0x24
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	3b01      	subs	r3, #1
 8001a52:	f003 0301 	and.w	r3, r3, #1
 8001a56:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	4403      	add	r3, r0
 8001a5e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	6819      	ldr	r1, [r3, #0]
 8001a64:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001a68:	4613      	mov	r3, r2
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	4413      	add	r3, r2
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	3348      	adds	r3, #72	; 0x48
 8001a72:	443b      	add	r3, r7
 8001a74:	3b34      	subs	r3, #52	; 0x34
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4299      	cmp	r1, r3
 8001a7a:	d038      	beq.n	8001aee <HAL_OSPIM_Config+0x2fe>
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	6859      	ldr	r1, [r3, #4]
 8001a80:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	3348      	adds	r3, #72	; 0x48
 8001a8e:	443b      	add	r3, r7
 8001a90:	3b30      	subs	r3, #48	; 0x30
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4299      	cmp	r1, r3
 8001a96:	d02a      	beq.n	8001aee <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	6899      	ldr	r1, [r3, #8]
 8001a9c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001aa0:	4613      	mov	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	4413      	add	r3, r2
 8001aa6:	009b      	lsls	r3, r3, #2
 8001aa8:	3348      	adds	r3, #72	; 0x48
 8001aaa:	443b      	add	r3, r7
 8001aac:	3b2c      	subs	r3, #44	; 0x2c
 8001aae:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8001ab0:	4299      	cmp	r1, r3
 8001ab2:	d01c      	beq.n	8001aee <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	68d9      	ldr	r1, [r3, #12]
 8001ab8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001abc:	4613      	mov	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	4413      	add	r3, r2
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	3348      	adds	r3, #72	; 0x48
 8001ac6:	443b      	add	r3, r7
 8001ac8:	3b28      	subs	r3, #40	; 0x28
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4299      	cmp	r1, r3
 8001ace:	d00e      	beq.n	8001aee <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	6919      	ldr	r1, [r3, #16]
 8001ad4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001ad8:	4613      	mov	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	3348      	adds	r3, #72	; 0x48
 8001ae2:	443b      	add	r3, r7
 8001ae4:	3b24      	subs	r3, #36	; 0x24
 8001ae6:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8001ae8:	4299      	cmp	r1, r3
 8001aea:	f040 80d3 	bne.w	8001c94 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8001aee:	492d      	ldr	r1, [pc, #180]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 8001af0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	3348      	adds	r3, #72	; 0x48
 8001afe:	443b      	add	r3, r7
 8001b00:	3b34      	subs	r3, #52	; 0x34
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	6859      	ldr	r1, [r3, #4]
 8001b0c:	4825      	ldr	r0, [pc, #148]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 8001b0e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b12:	4613      	mov	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4413      	add	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	3348      	adds	r3, #72	; 0x48
 8001b1c:	443b      	add	r3, r7
 8001b1e:	3b34      	subs	r3, #52	; 0x34
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	3b01      	subs	r3, #1
 8001b24:	f021 0201 	bic.w	r2, r1, #1
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	4403      	add	r3, r0
 8001b2c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8001b2e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b32:	4613      	mov	r3, r2
 8001b34:	009b      	lsls	r3, r3, #2
 8001b36:	4413      	add	r3, r2
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	3348      	adds	r3, #72	; 0x48
 8001b3c:	443b      	add	r3, r7
 8001b3e:	3b30      	subs	r3, #48	; 0x30
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d01f      	beq.n	8001b86 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8001b46:	4917      	ldr	r1, [pc, #92]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 8001b48:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	3348      	adds	r3, #72	; 0x48
 8001b56:	443b      	add	r3, r7
 8001b58:	3b30      	subs	r3, #48	; 0x30
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	3b01      	subs	r3, #1
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	6859      	ldr	r1, [r3, #4]
 8001b64:	480f      	ldr	r0, [pc, #60]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 8001b66:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b6a:	4613      	mov	r3, r2
 8001b6c:	009b      	lsls	r3, r3, #2
 8001b6e:	4413      	add	r3, r2
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	3348      	adds	r3, #72	; 0x48
 8001b74:	443b      	add	r3, r7
 8001b76:	3b30      	subs	r3, #48	; 0x30
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	f021 0210 	bic.w	r2, r1, #16
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	4403      	add	r3, r0
 8001b84:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8001b86:	4907      	ldr	r1, [pc, #28]	; (8001ba4 <HAL_OSPIM_Config+0x3b4>)
 8001b88:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	4413      	add	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	3348      	adds	r3, #72	; 0x48
 8001b96:	443b      	add	r3, r7
 8001b98:	3b2c      	subs	r3, #44	; 0x2c
 8001b9a:	e005      	b.n	8001ba8 <HAL_OSPIM_Config+0x3b8>
 8001b9c:	a0001000 	.word	0xa0001000
 8001ba0:	a0001400 	.word	0xa0001400
 8001ba4:	50061c00 	.word	0x50061c00
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	3b01      	subs	r3, #1
 8001bac:	009b      	lsls	r3, r3, #2
 8001bae:	440b      	add	r3, r1
 8001bb0:	6859      	ldr	r1, [r3, #4]
 8001bb2:	48a6      	ldr	r0, [pc, #664]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001bb4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001bb8:	4613      	mov	r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	009b      	lsls	r3, r3, #2
 8001bc0:	3348      	adds	r3, #72	; 0x48
 8001bc2:	443b      	add	r3, r7
 8001bc4:	3b2c      	subs	r3, #44	; 0x2c
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	3b01      	subs	r3, #1
 8001bca:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4403      	add	r3, r0
 8001bd2:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001bd4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001bd8:	4613      	mov	r3, r2
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	4413      	add	r3, r2
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	3348      	adds	r3, #72	; 0x48
 8001be2:	443b      	add	r3, r7
 8001be4:	3b28      	subs	r3, #40	; 0x28
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d023      	beq.n	8001c34 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8001bec:	4997      	ldr	r1, [pc, #604]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001bee:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	009b      	lsls	r3, r3, #2
 8001bf6:	4413      	add	r3, r2
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	3348      	adds	r3, #72	; 0x48
 8001bfc:	443b      	add	r3, r7
 8001bfe:	3b28      	subs	r3, #40	; 0x28
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	3b01      	subs	r3, #1
 8001c04:	f003 0301 	and.w	r3, r3, #1
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	6859      	ldr	r1, [r3, #4]
 8001c0e:	488f      	ldr	r0, [pc, #572]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001c10:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001c14:	4613      	mov	r3, r2
 8001c16:	009b      	lsls	r3, r3, #2
 8001c18:	4413      	add	r3, r2
 8001c1a:	009b      	lsls	r3, r3, #2
 8001c1c:	3348      	adds	r3, #72	; 0x48
 8001c1e:	443b      	add	r3, r7
 8001c20:	3b28      	subs	r3, #40	; 0x28
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	3b01      	subs	r3, #1
 8001c26:	f003 0301 	and.w	r3, r3, #1
 8001c2a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	4403      	add	r3, r0
 8001c32:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001c34:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001c38:	4613      	mov	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	4413      	add	r3, r2
 8001c3e:	009b      	lsls	r3, r3, #2
 8001c40:	3348      	adds	r3, #72	; 0x48
 8001c42:	443b      	add	r3, r7
 8001c44:	3b24      	subs	r3, #36	; 0x24
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d023      	beq.n	8001c94 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8001c4c:	497f      	ldr	r1, [pc, #508]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001c4e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001c52:	4613      	mov	r3, r2
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	4413      	add	r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	3348      	adds	r3, #72	; 0x48
 8001c5c:	443b      	add	r3, r7
 8001c5e:	3b24      	subs	r3, #36	; 0x24
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	3b01      	subs	r3, #1
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	009b      	lsls	r3, r3, #2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	6859      	ldr	r1, [r3, #4]
 8001c6e:	4877      	ldr	r0, [pc, #476]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001c70:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8001c74:	4613      	mov	r3, r2
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	4413      	add	r3, r2
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	3348      	adds	r3, #72	; 0x48
 8001c7e:	443b      	add	r3, r7
 8001c80:	3b24      	subs	r3, #36	; 0x24
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	f003 0301 	and.w	r3, r3, #1
 8001c8a:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	4403      	add	r3, r0
 8001c92:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8001c94:	4a6d      	ldr	r2, [pc, #436]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	3b01      	subs	r3, #1
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ca6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ca8:	025b      	lsls	r3, r3, #9
 8001caa:	431a      	orrs	r2, r3
 8001cac:	4967      	ldr	r1, [pc, #412]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001cae:	68bb      	ldr	r3, [r7, #8]
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	440b      	add	r3, r1
 8001cbc:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8001cbe:	4a63      	ldr	r2, [pc, #396]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001cc0:	68bb      	ldr	r3, [r7, #8]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	3b01      	subs	r3, #1
 8001cc6:	009b      	lsls	r3, r3, #2
 8001cc8:	4413      	add	r3, r2
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f023 0203 	bic.w	r2, r3, #3
 8001cd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001cd2:	005b      	lsls	r3, r3, #1
 8001cd4:	431a      	orrs	r2, r3
 8001cd6:	495d      	ldr	r1, [pc, #372]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001cd8:	68bb      	ldr	r3, [r7, #8]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	3b01      	subs	r3, #1
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8001ce8:	68bb      	ldr	r3, [r7, #8]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d014      	beq.n	8001d1a <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8001cf0:	4a56      	ldr	r2, [pc, #344]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	4413      	add	r3, r2
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d04:	015b      	lsls	r3, r3, #5
 8001d06:	431a      	orrs	r2, r3
 8001d08:	4950      	ldr	r1, [pc, #320]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	3b01      	subs	r3, #1
 8001d10:	f042 0210 	orr.w	r2, r2, #16
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	440b      	add	r3, r1
 8001d18:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8001d1a:	68bb      	ldr	r3, [r7, #8]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d019      	beq.n	8001d5a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8001d26:	4a49      	ldr	r2, [pc, #292]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	68db      	ldr	r3, [r3, #12]
 8001d2c:	3b01      	subs	r3, #1
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	009b      	lsls	r3, r3, #2
 8001d34:	4413      	add	r3, r2
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001d3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d3e:	049b      	lsls	r3, r3, #18
 8001d40:	431a      	orrs	r2, r3
 8001d42:	4942      	ldr	r1, [pc, #264]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	3b01      	subs	r3, #1
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	440b      	add	r3, r1
 8001d56:	605a      	str	r2, [r3, #4]
 8001d58:	e01c      	b.n	8001d94 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d018      	beq.n	8001d94 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8001d62:	4a3a      	ldr	r2, [pc, #232]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	009b      	lsls	r3, r3, #2
 8001d70:	4413      	add	r3, r2
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001d78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d7a:	069b      	lsls	r3, r3, #26
 8001d7c:	431a      	orrs	r2, r3
 8001d7e:	4933      	ldr	r1, [pc, #204]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001d80:	68bb      	ldr	r3, [r7, #8]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	440b      	add	r3, r1
 8001d92:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	691b      	ldr	r3, [r3, #16]
 8001d98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d019      	beq.n	8001dd4 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8001da0:	4a2a      	ldr	r2, [pc, #168]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	691b      	ldr	r3, [r3, #16]
 8001da6:	3b01      	subs	r3, #1
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	009b      	lsls	r3, r3, #2
 8001dae:	4413      	add	r3, r2
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8001db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db8:	049b      	lsls	r3, r3, #18
 8001dba:	431a      	orrs	r2, r3
 8001dbc:	4923      	ldr	r1, [pc, #140]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001dbe:	68bb      	ldr	r3, [r7, #8]
 8001dc0:	691b      	ldr	r3, [r3, #16]
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	f003 0301 	and.w	r3, r3, #1
 8001dc8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	440b      	add	r3, r1
 8001dd0:	605a      	str	r2, [r3, #4]
 8001dd2:	e01c      	b.n	8001e0e <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d018      	beq.n	8001e0e <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8001ddc:	4a1b      	ldr	r2, [pc, #108]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	f003 0301 	and.w	r3, r3, #1
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8001df2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001df4:	069b      	lsls	r3, r3, #26
 8001df6:	431a      	orrs	r2, r3
 8001df8:	4914      	ldr	r1, [pc, #80]	; (8001e4c <HAL_OSPIM_Config+0x65c>)
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	691b      	ldr	r3, [r3, #16]
 8001dfe:	3b01      	subs	r3, #1
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	440b      	add	r3, r1
 8001e0c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8001e0e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001e12:	f003 0301 	and.w	r3, r3, #1
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d005      	beq.n	8001e26 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8001e1a:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_OSPIM_Config+0x660>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a0c      	ldr	r2, [pc, #48]	; (8001e50 <HAL_OSPIM_Config+0x660>)
 8001e20:	f043 0301 	orr.w	r3, r3, #1
 8001e24:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8001e26:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d005      	beq.n	8001e3e <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8001e32:	4b08      	ldr	r3, [pc, #32]	; (8001e54 <HAL_OSPIM_Config+0x664>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a07      	ldr	r2, [pc, #28]	; (8001e54 <HAL_OSPIM_Config+0x664>)
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8001e3e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3748      	adds	r7, #72	; 0x48
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	50061c00 	.word	0x50061c00
 8001e50:	a0001000 	.word	0xa0001000
 8001e54:	a0001400 	.word	0xa0001400

08001e58 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	4613      	mov	r3, r2
 8001e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8001e68:	e01a      	b.n	8001ea0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e70:	d016      	beq.n	8001ea0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e72:	f7fe fa2b 	bl	80002cc <HAL_GetTick>
 8001e76:	4602      	mov	r2, r0
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	1ad3      	subs	r3, r2, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	d302      	bcc.n	8001e88 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d10b      	bne.n	8001ea0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001e8e:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e00e      	b.n	8001ebe <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6a1a      	ldr	r2, [r3, #32]
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	bf14      	ite	ne
 8001eae:	2301      	movne	r3, #1
 8001eb0:	2300      	moveq	r3, #0
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	79fb      	ldrb	r3, [r7, #7]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d1d6      	bne.n	8001e6a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ebc:	2300      	movs	r3, #0
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3710      	adds	r7, #16
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
	...

08001ec8 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b087      	sub	sp, #28
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	4603      	mov	r3, r0
 8001ed0:	6039      	str	r1, [r7, #0]
 8001ed2:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d005      	beq.n	8001eee <OSPIM_GetConfig+0x26>
 8001ee2:	79fb      	ldrb	r3, [r7, #7]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d802      	bhi.n	8001eee <OSPIM_GetConfig+0x26>
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d102      	bne.n	8001ef4 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	75fb      	strb	r3, [r7, #23]
 8001ef2:	e08e      	b.n	8002012 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	2200      	movs	r2, #0
 8001efe:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d101      	bne.n	8001f1c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8001f18:	4b41      	ldr	r3, [pc, #260]	; (8002020 <OSPIM_GetConfig+0x158>)
 8001f1a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60fb      	str	r3, [r7, #12]
 8001f20:	e074      	b.n	800200c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8001f22:	4a40      	ldr	r2, [pc, #256]	; (8002024 <OSPIM_GetConfig+0x15c>)
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d00a      	beq.n	8001f4e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8001f38:	68ba      	ldr	r2, [r7, #8]
 8001f3a:	693b      	ldr	r3, [r7, #16]
 8001f3c:	4053      	eors	r3, r2
 8001f3e:	f003 0302 	and.w	r3, r3, #2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d103      	bne.n	8001f4e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	1c5a      	adds	r2, r3, #1
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	f003 0310 	and.w	r3, r3, #16
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d00a      	beq.n	8001f6e <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8001f58:	68ba      	ldr	r2, [r7, #8]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4053      	eors	r3, r2
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d103      	bne.n	8001f6e <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	1c5a      	adds	r2, r3, #1
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8001f6e:	68bb      	ldr	r3, [r7, #8]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00a      	beq.n	8001f8e <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8001f78:	68ba      	ldr	r2, [r7, #8]
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	4053      	eors	r3, r2
 8001f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d103      	bne.n	8001f8e <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	1c5a      	adds	r2, r3, #1
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d018      	beq.n	8001fca <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8001f98:	68ba      	ldr	r2, [r7, #8]
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	4053      	eors	r3, r2
 8001f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d111      	bne.n	8001fca <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d106      	bne.n	8001fbe <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	60da      	str	r2, [r3, #12]
 8001fbc:	e005      	b.n	8001fca <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d018      	beq.n	8002006 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8001fd4:	68ba      	ldr	r2, [r7, #8]
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	4053      	eors	r3, r2
 8001fda:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d111      	bne.n	8002006 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d106      	bne.n	8001ffa <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	3301      	adds	r3, #1
 8001ff0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	611a      	str	r2, [r3, #16]
 8001ff8:	e005      	b.n	8002006 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	3301      	adds	r3, #1
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d987      	bls.n	8001f22 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8002012:	7dfb      	ldrb	r3, [r7, #23]
}
 8002014:	4618      	mov	r0, r3
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	04040222 	.word	0x04040222
 8002024:	50061c00 	.word	0x50061c00

08002028 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800202c:	4b0d      	ldr	r3, [pc, #52]	; (8002064 <HAL_PWREx_GetVoltageRange+0x3c>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002038:	d102      	bne.n	8002040 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800203a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800203e:	e00b      	b.n	8002058 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8002040:	4b08      	ldr	r3, [pc, #32]	; (8002064 <HAL_PWREx_GetVoltageRange+0x3c>)
 8002042:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800204e:	d102      	bne.n	8002056 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8002050:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002054:	e000      	b.n	8002058 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8002056:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8002058:	4618      	mov	r0, r3
 800205a:	46bd      	mov	sp, r7
 800205c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	40007000 	.word	0x40007000

08002068 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d141      	bne.n	80020fa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002076:	4b4b      	ldr	r3, [pc, #300]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800207e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002082:	d131      	bne.n	80020e8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002084:	4b47      	ldr	r3, [pc, #284]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002086:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800208a:	4a46      	ldr	r2, [pc, #280]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002090:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002094:	4b43      	ldr	r3, [pc, #268]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800209c:	4a41      	ldr	r2, [pc, #260]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80020a4:	4b40      	ldr	r3, [pc, #256]	; (80021a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2232      	movs	r2, #50	; 0x32
 80020aa:	fb02 f303 	mul.w	r3, r2, r3
 80020ae:	4a3f      	ldr	r2, [pc, #252]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020b0:	fba2 2303 	umull	r2, r3, r2, r3
 80020b4:	0c9b      	lsrs	r3, r3, #18
 80020b6:	3301      	adds	r3, #1
 80020b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ba:	e002      	b.n	80020c2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	3b01      	subs	r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020c2:	4b38      	ldr	r3, [pc, #224]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ce:	d102      	bne.n	80020d6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d1f2      	bne.n	80020bc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020d6:	4b33      	ldr	r3, [pc, #204]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020d8:	695b      	ldr	r3, [r3, #20]
 80020da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020e2:	d158      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e057      	b.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020e8:	4b2e      	ldr	r3, [pc, #184]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020ee:	4a2d      	ldr	r2, [pc, #180]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80020f8:	e04d      	b.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002100:	d141      	bne.n	8002186 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002102:	4b28      	ldr	r3, [pc, #160]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800210a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800210e:	d131      	bne.n	8002174 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002110:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002112:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002116:	4a23      	ldr	r2, [pc, #140]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002118:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800211c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002120:	4b20      	ldr	r3, [pc, #128]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002128:	4a1e      	ldr	r2, [pc, #120]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800212e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2232      	movs	r2, #50	; 0x32
 8002136:	fb02 f303 	mul.w	r3, r2, r3
 800213a:	4a1c      	ldr	r2, [pc, #112]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x144>)
 800213c:	fba2 2303 	umull	r2, r3, r2, r3
 8002140:	0c9b      	lsrs	r3, r3, #18
 8002142:	3301      	adds	r3, #1
 8002144:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002146:	e002      	b.n	800214e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	3b01      	subs	r3, #1
 800214c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800214e:	4b15      	ldr	r3, [pc, #84]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002150:	695b      	ldr	r3, [r3, #20]
 8002152:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800215a:	d102      	bne.n	8002162 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f2      	bne.n	8002148 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002162:	4b10      	ldr	r3, [pc, #64]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800216a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800216e:	d112      	bne.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e011      	b.n	8002198 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002174:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800217a:	4a0a      	ldr	r2, [pc, #40]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002184:	e007      	b.n	8002196 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002186:	4b07      	ldr	r3, [pc, #28]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800218e:	4a05      	ldr	r2, [pc, #20]	; (80021a4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002190:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002194:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002196:	2300      	movs	r3, #0
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr
 80021a4:	40007000 	.word	0x40007000
 80021a8:	20000008 	.word	0x20000008
 80021ac:	431bde83 	.word	0x431bde83

080021b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b088      	sub	sp, #32
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d102      	bne.n	80021c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f000 bc08 	b.w	80029d4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021c4:	4b96      	ldr	r3, [pc, #600]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 030c 	and.w	r3, r3, #12
 80021cc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021ce:	4b94      	ldr	r3, [pc, #592]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	f003 0303 	and.w	r3, r3, #3
 80021d6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 0310 	and.w	r3, r3, #16
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 80e4 	beq.w	80023ae <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_RCC_OscConfig+0x4c>
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2b0c      	cmp	r3, #12
 80021f0:	f040 808b 	bne.w	800230a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	f040 8087 	bne.w	800230a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021fc:	4b88      	ldr	r3, [pc, #544]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d005      	beq.n	8002214 <HAL_RCC_OscConfig+0x64>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	699b      	ldr	r3, [r3, #24]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e3df      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6a1a      	ldr	r2, [r3, #32]
 8002218:	4b81      	ldr	r3, [pc, #516]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d004      	beq.n	800222e <HAL_RCC_OscConfig+0x7e>
 8002224:	4b7e      	ldr	r3, [pc, #504]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800222c:	e005      	b.n	800223a <HAL_RCC_OscConfig+0x8a>
 800222e:	4b7c      	ldr	r3, [pc, #496]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002230:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800223a:	4293      	cmp	r3, r2
 800223c:	d223      	bcs.n	8002286 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fda0 	bl	8002d88 <RCC_SetFlashLatencyFromMSIRange>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e3c0      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002252:	4b73      	ldr	r3, [pc, #460]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	4a72      	ldr	r2, [pc, #456]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002258:	f043 0308 	orr.w	r3, r3, #8
 800225c:	6013      	str	r3, [r2, #0]
 800225e:	4b70      	ldr	r3, [pc, #448]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	496d      	ldr	r1, [pc, #436]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002270:	4b6b      	ldr	r3, [pc, #428]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	69db      	ldr	r3, [r3, #28]
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	4968      	ldr	r1, [pc, #416]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002280:	4313      	orrs	r3, r2
 8002282:	604b      	str	r3, [r1, #4]
 8002284:	e025      	b.n	80022d2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002286:	4b66      	ldr	r3, [pc, #408]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a65      	ldr	r2, [pc, #404]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 800228c:	f043 0308 	orr.w	r3, r3, #8
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	4b63      	ldr	r3, [pc, #396]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6a1b      	ldr	r3, [r3, #32]
 800229e:	4960      	ldr	r1, [pc, #384]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022a4:	4b5e      	ldr	r3, [pc, #376]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	69db      	ldr	r3, [r3, #28]
 80022b0:	021b      	lsls	r3, r3, #8
 80022b2:	495b      	ldr	r1, [pc, #364]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d109      	bne.n	80022d2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	4618      	mov	r0, r3
 80022c4:	f000 fd60 	bl	8002d88 <RCC_SetFlashLatencyFromMSIRange>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e380      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022d2:	f000 fcc1 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 80022d6:	4602      	mov	r2, r0
 80022d8:	4b51      	ldr	r3, [pc, #324]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	091b      	lsrs	r3, r3, #4
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	4950      	ldr	r1, [pc, #320]	; (8002424 <HAL_RCC_OscConfig+0x274>)
 80022e4:	5ccb      	ldrb	r3, [r1, r3]
 80022e6:	f003 031f 	and.w	r3, r3, #31
 80022ea:	fa22 f303 	lsr.w	r3, r2, r3
 80022ee:	4a4e      	ldr	r2, [pc, #312]	; (8002428 <HAL_RCC_OscConfig+0x278>)
 80022f0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022f2:	4b4e      	ldr	r3, [pc, #312]	; (800242c <HAL_RCC_OscConfig+0x27c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fd ff98 	bl	800022c <HAL_InitTick>
 80022fc:	4603      	mov	r3, r0
 80022fe:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002300:	7bfb      	ldrb	r3, [r7, #15]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d052      	beq.n	80023ac <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	e364      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	699b      	ldr	r3, [r3, #24]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d032      	beq.n	8002378 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a42      	ldr	r2, [pc, #264]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002318:	f043 0301 	orr.w	r3, r3, #1
 800231c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800231e:	f7fd ffd5 	bl	80002cc <HAL_GetTick>
 8002322:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002324:	e008      	b.n	8002338 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002326:	f7fd ffd1 	bl	80002cc <HAL_GetTick>
 800232a:	4602      	mov	r2, r0
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	1ad3      	subs	r3, r2, r3
 8002330:	2b02      	cmp	r3, #2
 8002332:	d901      	bls.n	8002338 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e34d      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002338:	4b39      	ldr	r3, [pc, #228]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0302 	and.w	r3, r3, #2
 8002340:	2b00      	cmp	r3, #0
 8002342:	d0f0      	beq.n	8002326 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002344:	4b36      	ldr	r3, [pc, #216]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a35      	ldr	r2, [pc, #212]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 800234a:	f043 0308 	orr.w	r3, r3, #8
 800234e:	6013      	str	r3, [r2, #0]
 8002350:	4b33      	ldr	r3, [pc, #204]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4930      	ldr	r1, [pc, #192]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 800235e:	4313      	orrs	r3, r2
 8002360:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002362:	4b2f      	ldr	r3, [pc, #188]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	021b      	lsls	r3, r3, #8
 8002370:	492b      	ldr	r1, [pc, #172]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002372:	4313      	orrs	r3, r2
 8002374:	604b      	str	r3, [r1, #4]
 8002376:	e01a      	b.n	80023ae <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002378:	4b29      	ldr	r3, [pc, #164]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a28      	ldr	r2, [pc, #160]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 800237e:	f023 0301 	bic.w	r3, r3, #1
 8002382:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002384:	f7fd ffa2 	bl	80002cc <HAL_GetTick>
 8002388:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800238a:	e008      	b.n	800239e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800238c:	f7fd ff9e 	bl	80002cc <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	2b02      	cmp	r3, #2
 8002398:	d901      	bls.n	800239e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800239a:	2303      	movs	r3, #3
 800239c:	e31a      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800239e:	4b20      	ldr	r3, [pc, #128]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f0      	bne.n	800238c <HAL_RCC_OscConfig+0x1dc>
 80023aa:	e000      	b.n	80023ae <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023ac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d073      	beq.n	80024a2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023ba:	69bb      	ldr	r3, [r7, #24]
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d005      	beq.n	80023cc <HAL_RCC_OscConfig+0x21c>
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	2b0c      	cmp	r3, #12
 80023c4:	d10e      	bne.n	80023e4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d10b      	bne.n	80023e4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023cc:	4b14      	ldr	r3, [pc, #80]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d063      	beq.n	80024a0 <HAL_RCC_OscConfig+0x2f0>
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	685b      	ldr	r3, [r3, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d15f      	bne.n	80024a0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e2f7      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ec:	d106      	bne.n	80023fc <HAL_RCC_OscConfig+0x24c>
 80023ee:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a0b      	ldr	r2, [pc, #44]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 80023f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f8:	6013      	str	r3, [r2, #0]
 80023fa:	e025      	b.n	8002448 <HAL_RCC_OscConfig+0x298>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002404:	d114      	bne.n	8002430 <HAL_RCC_OscConfig+0x280>
 8002406:	4b06      	ldr	r3, [pc, #24]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a05      	ldr	r2, [pc, #20]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 800240c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002410:	6013      	str	r3, [r2, #0]
 8002412:	4b03      	ldr	r3, [pc, #12]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a02      	ldr	r2, [pc, #8]	; (8002420 <HAL_RCC_OscConfig+0x270>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6013      	str	r3, [r2, #0]
 800241e:	e013      	b.n	8002448 <HAL_RCC_OscConfig+0x298>
 8002420:	40021000 	.word	0x40021000
 8002424:	08004c98 	.word	0x08004c98
 8002428:	20000008 	.word	0x20000008
 800242c:	20000000 	.word	0x20000000
 8002430:	4ba0      	ldr	r3, [pc, #640]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a9f      	ldr	r2, [pc, #636]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 8002436:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243a:	6013      	str	r3, [r2, #0]
 800243c:	4b9d      	ldr	r3, [pc, #628]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a9c      	ldr	r2, [pc, #624]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 8002442:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002446:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d013      	beq.n	8002478 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002450:	f7fd ff3c 	bl	80002cc <HAL_GetTick>
 8002454:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002456:	e008      	b.n	800246a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002458:	f7fd ff38 	bl	80002cc <HAL_GetTick>
 800245c:	4602      	mov	r2, r0
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	2b64      	cmp	r3, #100	; 0x64
 8002464:	d901      	bls.n	800246a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002466:	2303      	movs	r3, #3
 8002468:	e2b4      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800246a:	4b92      	ldr	r3, [pc, #584]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002472:	2b00      	cmp	r3, #0
 8002474:	d0f0      	beq.n	8002458 <HAL_RCC_OscConfig+0x2a8>
 8002476:	e014      	b.n	80024a2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002478:	f7fd ff28 	bl	80002cc <HAL_GetTick>
 800247c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800247e:	e008      	b.n	8002492 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002480:	f7fd ff24 	bl	80002cc <HAL_GetTick>
 8002484:	4602      	mov	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	; 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e2a0      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002492:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f0      	bne.n	8002480 <HAL_RCC_OscConfig+0x2d0>
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d060      	beq.n	8002570 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_OscConfig+0x310>
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2b0c      	cmp	r3, #12
 80024b8:	d119      	bne.n	80024ee <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d116      	bne.n	80024ee <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024c0:	4b7c      	ldr	r3, [pc, #496]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <HAL_RCC_OscConfig+0x328>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d101      	bne.n	80024d8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	e27d      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024d8:	4b76      	ldr	r3, [pc, #472]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
 80024e4:	061b      	lsls	r3, r3, #24
 80024e6:	4973      	ldr	r1, [pc, #460]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 80024e8:	4313      	orrs	r3, r2
 80024ea:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024ec:	e040      	b.n	8002570 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d023      	beq.n	800253e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024f6:	4b6f      	ldr	r3, [pc, #444]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a6e      	ldr	r2, [pc, #440]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 80024fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002500:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002502:	f7fd fee3 	bl	80002cc <HAL_GetTick>
 8002506:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002508:	e008      	b.n	800251c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800250a:	f7fd fedf 	bl	80002cc <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	693b      	ldr	r3, [r7, #16]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b02      	cmp	r3, #2
 8002516:	d901      	bls.n	800251c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e25b      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800251c:	4b65      	ldr	r3, [pc, #404]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002524:	2b00      	cmp	r3, #0
 8002526:	d0f0      	beq.n	800250a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002528:	4b62      	ldr	r3, [pc, #392]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	691b      	ldr	r3, [r3, #16]
 8002534:	061b      	lsls	r3, r3, #24
 8002536:	495f      	ldr	r1, [pc, #380]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
 800253c:	e018      	b.n	8002570 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800253e:	4b5d      	ldr	r3, [pc, #372]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a5c      	ldr	r2, [pc, #368]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 8002544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002548:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7fd febf 	bl	80002cc <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002552:	f7fd febb 	bl	80002cc <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e237      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002564:	4b53      	ldr	r3, [pc, #332]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1f0      	bne.n	8002552 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d03c      	beq.n	80025f6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d01c      	beq.n	80025be <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002584:	4b4b      	ldr	r3, [pc, #300]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 8002586:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800258a:	4a4a      	ldr	r2, [pc, #296]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 800258c:	f043 0301 	orr.w	r3, r3, #1
 8002590:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002594:	f7fd fe9a 	bl	80002cc <HAL_GetTick>
 8002598:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800259a:	e008      	b.n	80025ae <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259c:	f7fd fe96 	bl	80002cc <HAL_GetTick>
 80025a0:	4602      	mov	r2, r0
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	1ad3      	subs	r3, r2, r3
 80025a6:	2b02      	cmp	r3, #2
 80025a8:	d901      	bls.n	80025ae <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025aa:	2303      	movs	r3, #3
 80025ac:	e212      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ae:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 80025b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b4:	f003 0302 	and.w	r3, r3, #2
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d0ef      	beq.n	800259c <HAL_RCC_OscConfig+0x3ec>
 80025bc:	e01b      	b.n	80025f6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025be:	4b3d      	ldr	r3, [pc, #244]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 80025c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025c4:	4a3b      	ldr	r2, [pc, #236]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 80025c6:	f023 0301 	bic.w	r3, r3, #1
 80025ca:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ce:	f7fd fe7d 	bl	80002cc <HAL_GetTick>
 80025d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025d4:	e008      	b.n	80025e8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d6:	f7fd fe79 	bl	80002cc <HAL_GetTick>
 80025da:	4602      	mov	r2, r0
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	1ad3      	subs	r3, r2, r3
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e1f5      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025e8:	4b32      	ldr	r3, [pc, #200]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 80025ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1ef      	bne.n	80025d6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f003 0304 	and.w	r3, r3, #4
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 80a6 	beq.w	8002750 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002604:	2300      	movs	r3, #0
 8002606:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002608:	4b2a      	ldr	r3, [pc, #168]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 800260a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800260c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d10d      	bne.n	8002630 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002614:	4b27      	ldr	r3, [pc, #156]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 8002616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002618:	4a26      	ldr	r2, [pc, #152]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 800261a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800261e:	6593      	str	r3, [r2, #88]	; 0x58
 8002620:	4b24      	ldr	r3, [pc, #144]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 8002622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002624:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800262c:	2301      	movs	r3, #1
 800262e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002630:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <HAL_RCC_OscConfig+0x508>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002638:	2b00      	cmp	r3, #0
 800263a:	d118      	bne.n	800266e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800263c:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <HAL_RCC_OscConfig+0x508>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a1d      	ldr	r2, [pc, #116]	; (80026b8 <HAL_RCC_OscConfig+0x508>)
 8002642:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002646:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002648:	f7fd fe40 	bl	80002cc <HAL_GetTick>
 800264c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264e:	e008      	b.n	8002662 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002650:	f7fd fe3c 	bl	80002cc <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e1b8      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002662:	4b15      	ldr	r3, [pc, #84]	; (80026b8 <HAL_RCC_OscConfig+0x508>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800266a:	2b00      	cmp	r3, #0
 800266c:	d0f0      	beq.n	8002650 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	2b01      	cmp	r3, #1
 8002674:	d108      	bne.n	8002688 <HAL_RCC_OscConfig+0x4d8>
 8002676:	4b0f      	ldr	r3, [pc, #60]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267c:	4a0d      	ldr	r2, [pc, #52]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002686:	e029      	b.n	80026dc <HAL_RCC_OscConfig+0x52c>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	2b05      	cmp	r3, #5
 800268e:	d115      	bne.n	80026bc <HAL_RCC_OscConfig+0x50c>
 8002690:	4b08      	ldr	r3, [pc, #32]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	4a07      	ldr	r2, [pc, #28]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 8002698:	f043 0304 	orr.w	r3, r3, #4
 800269c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a0:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 80026a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026a6:	4a03      	ldr	r2, [pc, #12]	; (80026b4 <HAL_RCC_OscConfig+0x504>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026b0:	e014      	b.n	80026dc <HAL_RCC_OscConfig+0x52c>
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	40007000 	.word	0x40007000
 80026bc:	4b9d      	ldr	r3, [pc, #628]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c2:	4a9c      	ldr	r2, [pc, #624]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80026c4:	f023 0301 	bic.w	r3, r3, #1
 80026c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026cc:	4b99      	ldr	r3, [pc, #612]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80026ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d2:	4a98      	ldr	r2, [pc, #608]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80026d4:	f023 0304 	bic.w	r3, r3, #4
 80026d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d016      	beq.n	8002712 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026e4:	f7fd fdf2 	bl	80002cc <HAL_GetTick>
 80026e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ea:	e00a      	b.n	8002702 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ec:	f7fd fdee 	bl	80002cc <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d901      	bls.n	8002702 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026fe:	2303      	movs	r3, #3
 8002700:	e168      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002702:	4b8c      	ldr	r3, [pc, #560]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 8002704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0ed      	beq.n	80026ec <HAL_RCC_OscConfig+0x53c>
 8002710:	e015      	b.n	800273e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002712:	f7fd fddb 	bl	80002cc <HAL_GetTick>
 8002716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002718:	e00a      	b.n	8002730 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800271a:	f7fd fdd7 	bl	80002cc <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	693b      	ldr	r3, [r7, #16]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	f241 3288 	movw	r2, #5000	; 0x1388
 8002728:	4293      	cmp	r3, r2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e151      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002730:	4b80      	ldr	r3, [pc, #512]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 8002732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d1ed      	bne.n	800271a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800273e:	7ffb      	ldrb	r3, [r7, #31]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d105      	bne.n	8002750 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002744:	4b7b      	ldr	r3, [pc, #492]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 8002746:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002748:	4a7a      	ldr	r2, [pc, #488]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 800274a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800274e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0320 	and.w	r3, r3, #32
 8002758:	2b00      	cmp	r3, #0
 800275a:	d03c      	beq.n	80027d6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	2b00      	cmp	r3, #0
 8002762:	d01c      	beq.n	800279e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002764:	4b73      	ldr	r3, [pc, #460]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 8002766:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800276a:	4a72      	ldr	r2, [pc, #456]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 800276c:	f043 0301 	orr.w	r3, r3, #1
 8002770:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002774:	f7fd fdaa 	bl	80002cc <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800277c:	f7fd fda6 	bl	80002cc <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e122      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800278e:	4b69      	ldr	r3, [pc, #420]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 8002790:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0ef      	beq.n	800277c <HAL_RCC_OscConfig+0x5cc>
 800279c:	e01b      	b.n	80027d6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800279e:	4b65      	ldr	r3, [pc, #404]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80027a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027a4:	4a63      	ldr	r2, [pc, #396]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80027a6:	f023 0301 	bic.w	r3, r3, #1
 80027aa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ae:	f7fd fd8d 	bl	80002cc <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027b6:	f7fd fd89 	bl	80002cc <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e105      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027c8:	4b5a      	ldr	r3, [pc, #360]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80027ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ce:	f003 0302 	and.w	r3, r3, #2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1ef      	bne.n	80027b6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80f9 	beq.w	80029d2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027e4:	2b02      	cmp	r3, #2
 80027e6:	f040 80cf 	bne.w	8002988 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027ea:	4b52      	ldr	r3, [pc, #328]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80027ec:	68db      	ldr	r3, [r3, #12]
 80027ee:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	f003 0203 	and.w	r2, r3, #3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d12c      	bne.n	8002858 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027fe:	697b      	ldr	r3, [r7, #20]
 8002800:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002808:	3b01      	subs	r3, #1
 800280a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800280c:	429a      	cmp	r2, r3
 800280e:	d123      	bne.n	8002858 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800281a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800281c:	429a      	cmp	r2, r3
 800281e:	d11b      	bne.n	8002858 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800282a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800282c:	429a      	cmp	r2, r3
 800282e:	d113      	bne.n	8002858 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283a:	085b      	lsrs	r3, r3, #1
 800283c:	3b01      	subs	r3, #1
 800283e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002840:	429a      	cmp	r2, r3
 8002842:	d109      	bne.n	8002858 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	085b      	lsrs	r3, r3, #1
 8002850:	3b01      	subs	r3, #1
 8002852:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002854:	429a      	cmp	r2, r3
 8002856:	d071      	beq.n	800293c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002858:	69bb      	ldr	r3, [r7, #24]
 800285a:	2b0c      	cmp	r3, #12
 800285c:	d068      	beq.n	8002930 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800285e:	4b35      	ldr	r3, [pc, #212]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d105      	bne.n	8002876 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800286a:	4b32      	ldr	r3, [pc, #200]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d001      	beq.n	800287a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e0ac      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800287a:	4b2e      	ldr	r3, [pc, #184]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2d      	ldr	r2, [pc, #180]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 8002880:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002884:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002886:	f7fd fd21 	bl	80002cc <HAL_GetTick>
 800288a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800288c:	e008      	b.n	80028a0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800288e:	f7fd fd1d 	bl	80002cc <HAL_GetTick>
 8002892:	4602      	mov	r2, r0
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e099      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028a0:	4b24      	ldr	r3, [pc, #144]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1f0      	bne.n	800288e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ac:	4b21      	ldr	r3, [pc, #132]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80028ae:	68da      	ldr	r2, [r3, #12]
 80028b0:	4b21      	ldr	r3, [pc, #132]	; (8002938 <HAL_RCC_OscConfig+0x788>)
 80028b2:	4013      	ands	r3, r2
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028b8:	687a      	ldr	r2, [r7, #4]
 80028ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028bc:	3a01      	subs	r2, #1
 80028be:	0112      	lsls	r2, r2, #4
 80028c0:	4311      	orrs	r1, r2
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028c6:	0212      	lsls	r2, r2, #8
 80028c8:	4311      	orrs	r1, r2
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028ce:	0852      	lsrs	r2, r2, #1
 80028d0:	3a01      	subs	r2, #1
 80028d2:	0552      	lsls	r2, r2, #21
 80028d4:	4311      	orrs	r1, r2
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028da:	0852      	lsrs	r2, r2, #1
 80028dc:	3a01      	subs	r2, #1
 80028de:	0652      	lsls	r2, r2, #25
 80028e0:	4311      	orrs	r1, r2
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028e6:	06d2      	lsls	r2, r2, #27
 80028e8:	430a      	orrs	r2, r1
 80028ea:	4912      	ldr	r1, [pc, #72]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028f0:	4b10      	ldr	r3, [pc, #64]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a0f      	ldr	r2, [pc, #60]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80028f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028fc:	4b0d      	ldr	r3, [pc, #52]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	4a0c      	ldr	r2, [pc, #48]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 8002902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002906:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002908:	f7fd fce0 	bl	80002cc <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800290e:	e008      	b.n	8002922 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002910:	f7fd fcdc 	bl	80002cc <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	2b02      	cmp	r3, #2
 800291c:	d901      	bls.n	8002922 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800291e:	2303      	movs	r3, #3
 8002920:	e058      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002922:	4b04      	ldr	r3, [pc, #16]	; (8002934 <HAL_RCC_OscConfig+0x784>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292a:	2b00      	cmp	r3, #0
 800292c:	d0f0      	beq.n	8002910 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800292e:	e050      	b.n	80029d2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e04f      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
 8002934:	40021000 	.word	0x40021000
 8002938:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293c:	4b27      	ldr	r3, [pc, #156]	; (80029dc <HAL_RCC_OscConfig+0x82c>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d144      	bne.n	80029d2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002948:	4b24      	ldr	r3, [pc, #144]	; (80029dc <HAL_RCC_OscConfig+0x82c>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a23      	ldr	r2, [pc, #140]	; (80029dc <HAL_RCC_OscConfig+0x82c>)
 800294e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002952:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002954:	4b21      	ldr	r3, [pc, #132]	; (80029dc <HAL_RCC_OscConfig+0x82c>)
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4a20      	ldr	r2, [pc, #128]	; (80029dc <HAL_RCC_OscConfig+0x82c>)
 800295a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002960:	f7fd fcb4 	bl	80002cc <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7fd fcb0 	bl	80002cc <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e02c      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800297a:	4b18      	ldr	r3, [pc, #96]	; (80029dc <HAL_RCC_OscConfig+0x82c>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d0f0      	beq.n	8002968 <HAL_RCC_OscConfig+0x7b8>
 8002986:	e024      	b.n	80029d2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2b0c      	cmp	r3, #12
 800298c:	d01f      	beq.n	80029ce <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800298e:	4b13      	ldr	r3, [pc, #76]	; (80029dc <HAL_RCC_OscConfig+0x82c>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a12      	ldr	r2, [pc, #72]	; (80029dc <HAL_RCC_OscConfig+0x82c>)
 8002994:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800299a:	f7fd fc97 	bl	80002cc <HAL_GetTick>
 800299e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a0:	e008      	b.n	80029b4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029a2:	f7fd fc93 	bl	80002cc <HAL_GetTick>
 80029a6:	4602      	mov	r2, r0
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	1ad3      	subs	r3, r2, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d901      	bls.n	80029b4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80029b0:	2303      	movs	r3, #3
 80029b2:	e00f      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029b4:	4b09      	ldr	r3, [pc, #36]	; (80029dc <HAL_RCC_OscConfig+0x82c>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d1f0      	bne.n	80029a2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_RCC_OscConfig+0x82c>)
 80029c2:	68da      	ldr	r2, [r3, #12]
 80029c4:	4905      	ldr	r1, [pc, #20]	; (80029dc <HAL_RCC_OscConfig+0x82c>)
 80029c6:	4b06      	ldr	r3, [pc, #24]	; (80029e0 <HAL_RCC_OscConfig+0x830>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	60cb      	str	r3, [r1, #12]
 80029cc:	e001      	b.n	80029d2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3720      	adds	r7, #32
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40021000 	.word	0x40021000
 80029e0:	feeefffc 	.word	0xfeeefffc

080029e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b086      	sub	sp, #24
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80029ee:	2300      	movs	r3, #0
 80029f0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d101      	bne.n	80029fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	e11d      	b.n	8002c38 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029fc:	4b90      	ldr	r3, [pc, #576]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 030f 	and.w	r3, r3, #15
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d910      	bls.n	8002a2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a0a:	4b8d      	ldr	r3, [pc, #564]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 020f 	bic.w	r2, r3, #15
 8002a12:	498b      	ldr	r1, [pc, #556]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1a:	4b89      	ldr	r3, [pc, #548]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d001      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e105      	b.n	8002c38 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0302 	and.w	r3, r3, #2
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d010      	beq.n	8002a5a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689a      	ldr	r2, [r3, #8]
 8002a3c:	4b81      	ldr	r3, [pc, #516]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d908      	bls.n	8002a5a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a48:	4b7e      	ldr	r3, [pc, #504]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	497b      	ldr	r1, [pc, #492]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f003 0301 	and.w	r3, r3, #1
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d079      	beq.n	8002b5a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b03      	cmp	r3, #3
 8002a6c:	d11e      	bne.n	8002aac <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a6e:	4b75      	ldr	r3, [pc, #468]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d101      	bne.n	8002a7e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e0dc      	b.n	8002c38 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002a7e:	f000 f9dd 	bl	8002e3c <RCC_GetSysClockFreqFromPLLSource>
 8002a82:	4603      	mov	r3, r0
 8002a84:	4a70      	ldr	r2, [pc, #448]	; (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d946      	bls.n	8002b18 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002a8a:	4b6e      	ldr	r3, [pc, #440]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d140      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002a96:	4b6b      	ldr	r3, [pc, #428]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a9e:	4a69      	ldr	r2, [pc, #420]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002aa6:	2380      	movs	r3, #128	; 0x80
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	e035      	b.n	8002b18 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ab4:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d115      	bne.n	8002aec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0b9      	b.n	8002c38 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002acc:	4b5d      	ldr	r3, [pc, #372]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e0ad      	b.n	8002c38 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002adc:	4b59      	ldr	r3, [pc, #356]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0a5      	b.n	8002c38 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002aec:	f000 f8b4 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002af0:	4603      	mov	r3, r0
 8002af2:	4a55      	ldr	r2, [pc, #340]	; (8002c48 <HAL_RCC_ClockConfig+0x264>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d90f      	bls.n	8002b18 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002af8:	4b52      	ldr	r3, [pc, #328]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d109      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002b04:	4b4f      	ldr	r3, [pc, #316]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b0c:	4a4d      	ldr	r2, [pc, #308]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b12:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b18:	4b4a      	ldr	r3, [pc, #296]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f023 0203 	bic.w	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	4947      	ldr	r1, [pc, #284]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b26:	4313      	orrs	r3, r2
 8002b28:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b2a:	f7fd fbcf 	bl	80002cc <HAL_GetTick>
 8002b2e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b30:	e00a      	b.n	8002b48 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b32:	f7fd fbcb 	bl	80002cc <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e077      	b.n	8002c38 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b48:	4b3e      	ldr	r3, [pc, #248]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 020c 	and.w	r2, r3, #12
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d1eb      	bne.n	8002b32 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	2b80      	cmp	r3, #128	; 0x80
 8002b5e:	d105      	bne.n	8002b6c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002b60:	4b38      	ldr	r3, [pc, #224]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	4a37      	ldr	r2, [pc, #220]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b6a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d010      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	689a      	ldr	r2, [r3, #8]
 8002b7c:	4b31      	ldr	r3, [pc, #196]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d208      	bcs.n	8002b9a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b88:	4b2e      	ldr	r3, [pc, #184]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	492b      	ldr	r1, [pc, #172]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9a:	4b29      	ldr	r3, [pc, #164]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d210      	bcs.n	8002bca <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ba8:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 020f 	bic.w	r2, r3, #15
 8002bb0:	4923      	ldr	r1, [pc, #140]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bb8:	4b21      	ldr	r3, [pc, #132]	; (8002c40 <HAL_RCC_ClockConfig+0x25c>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 030f 	and.w	r3, r3, #15
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d001      	beq.n	8002bca <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e036      	b.n	8002c38 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d008      	beq.n	8002be8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd6:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	4918      	ldr	r1, [pc, #96]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002be4:	4313      	orrs	r3, r2
 8002be6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f003 0308 	and.w	r3, r3, #8
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d009      	beq.n	8002c08 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bf4:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	00db      	lsls	r3, r3, #3
 8002c02:	4910      	ldr	r1, [pc, #64]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002c04:	4313      	orrs	r3, r2
 8002c06:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002c08:	f000 f826 	bl	8002c58 <HAL_RCC_GetSysClockFreq>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	4b0d      	ldr	r3, [pc, #52]	; (8002c44 <HAL_RCC_ClockConfig+0x260>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	091b      	lsrs	r3, r3, #4
 8002c14:	f003 030f 	and.w	r3, r3, #15
 8002c18:	490c      	ldr	r1, [pc, #48]	; (8002c4c <HAL_RCC_ClockConfig+0x268>)
 8002c1a:	5ccb      	ldrb	r3, [r1, r3]
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	fa22 f303 	lsr.w	r3, r2, r3
 8002c24:	4a0a      	ldr	r2, [pc, #40]	; (8002c50 <HAL_RCC_ClockConfig+0x26c>)
 8002c26:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002c28:	4b0a      	ldr	r3, [pc, #40]	; (8002c54 <HAL_RCC_ClockConfig+0x270>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f7fd fafd 	bl	800022c <HAL_InitTick>
 8002c32:	4603      	mov	r3, r0
 8002c34:	73fb      	strb	r3, [r7, #15]

  return status;
 8002c36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3718      	adds	r7, #24
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	40022000 	.word	0x40022000
 8002c44:	40021000 	.word	0x40021000
 8002c48:	04c4b400 	.word	0x04c4b400
 8002c4c:	08004c98 	.word	0x08004c98
 8002c50:	20000008 	.word	0x20000008
 8002c54:	20000000 	.word	0x20000000

08002c58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b089      	sub	sp, #36	; 0x24
 8002c5c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	2300      	movs	r3, #0
 8002c64:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c66:	4b3e      	ldr	r3, [pc, #248]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c70:	4b3b      	ldr	r3, [pc, #236]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d005      	beq.n	8002c8c <HAL_RCC_GetSysClockFreq+0x34>
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	2b0c      	cmp	r3, #12
 8002c84:	d121      	bne.n	8002cca <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d11e      	bne.n	8002cca <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c8c:	4b34      	ldr	r3, [pc, #208]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0308 	and.w	r3, r3, #8
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d107      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c98:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c9e:	0a1b      	lsrs	r3, r3, #8
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	61fb      	str	r3, [r7, #28]
 8002ca6:	e005      	b.n	8002cb4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ca8:	4b2d      	ldr	r3, [pc, #180]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 030f 	and.w	r3, r3, #15
 8002cb2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002cb4:	4a2b      	ldr	r2, [pc, #172]	; (8002d64 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cbc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d10d      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cc8:	e00a      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b04      	cmp	r3, #4
 8002cce:	d102      	bne.n	8002cd6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002cd0:	4b25      	ldr	r3, [pc, #148]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cd2:	61bb      	str	r3, [r7, #24]
 8002cd4:	e004      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002cd6:	693b      	ldr	r3, [r7, #16]
 8002cd8:	2b08      	cmp	r3, #8
 8002cda:	d101      	bne.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002cdc:	4b23      	ldr	r3, [pc, #140]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002cde:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	2b0c      	cmp	r3, #12
 8002ce4:	d134      	bne.n	8002d50 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ce6:	4b1e      	ldr	r3, [pc, #120]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d003      	beq.n	8002cfe <HAL_RCC_GetSysClockFreq+0xa6>
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d003      	beq.n	8002d04 <HAL_RCC_GetSysClockFreq+0xac>
 8002cfc:	e005      	b.n	8002d0a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cfe:	4b1a      	ldr	r3, [pc, #104]	; (8002d68 <HAL_RCC_GetSysClockFreq+0x110>)
 8002d00:	617b      	str	r3, [r7, #20]
      break;
 8002d02:	e005      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002d04:	4b19      	ldr	r3, [pc, #100]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x114>)
 8002d06:	617b      	str	r3, [r7, #20]
      break;
 8002d08:	e002      	b.n	8002d10 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	617b      	str	r3, [r7, #20]
      break;
 8002d0e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	091b      	lsrs	r3, r3, #4
 8002d16:	f003 030f 	and.w	r3, r3, #15
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	0a1b      	lsrs	r3, r3, #8
 8002d24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	fb03 f202 	mul.w	r2, r3, r2
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d34:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002d36:	4b0a      	ldr	r3, [pc, #40]	; (8002d60 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	0e5b      	lsrs	r3, r3, #25
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	3301      	adds	r3, #1
 8002d42:	005b      	lsls	r3, r3, #1
 8002d44:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d4e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d50:	69bb      	ldr	r3, [r7, #24]
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3724      	adds	r7, #36	; 0x24
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
 8002d5e:	bf00      	nop
 8002d60:	40021000 	.word	0x40021000
 8002d64:	08004ca8 	.word	0x08004ca8
 8002d68:	00f42400 	.word	0x00f42400
 8002d6c:	007a1200 	.word	0x007a1200

08002d70 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d70:	b480      	push	{r7}
 8002d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d74:	4b03      	ldr	r3, [pc, #12]	; (8002d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d76:	681b      	ldr	r3, [r3, #0]
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
 8002d82:	bf00      	nop
 8002d84:	20000008 	.word	0x20000008

08002d88 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d94:	4b27      	ldr	r3, [pc, #156]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002da0:	f7ff f942 	bl	8002028 <HAL_PWREx_GetVoltageRange>
 8002da4:	6178      	str	r0, [r7, #20]
 8002da6:	e014      	b.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002da8:	4b22      	ldr	r3, [pc, #136]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002daa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dac:	4a21      	ldr	r2, [pc, #132]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db2:	6593      	str	r3, [r2, #88]	; 0x58
 8002db4:	4b1f      	ldr	r3, [pc, #124]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002db6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002db8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbc:	60fb      	str	r3, [r7, #12]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002dc0:	f7ff f932 	bl	8002028 <HAL_PWREx_GetVoltageRange>
 8002dc4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002dc6:	4b1b      	ldr	r3, [pc, #108]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dca:	4a1a      	ldr	r2, [pc, #104]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002dcc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dd0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dd8:	d10b      	bne.n	8002df2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b80      	cmp	r3, #128	; 0x80
 8002dde:	d913      	bls.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2ba0      	cmp	r3, #160	; 0xa0
 8002de4:	d902      	bls.n	8002dec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002de6:	2302      	movs	r3, #2
 8002de8:	613b      	str	r3, [r7, #16]
 8002dea:	e00d      	b.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dec:	2301      	movs	r3, #1
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	e00a      	b.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b7f      	cmp	r3, #127	; 0x7f
 8002df6:	d902      	bls.n	8002dfe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002df8:	2302      	movs	r3, #2
 8002dfa:	613b      	str	r3, [r7, #16]
 8002dfc:	e004      	b.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2b70      	cmp	r3, #112	; 0x70
 8002e02:	d101      	bne.n	8002e08 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e04:	2301      	movs	r3, #1
 8002e06:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e08:	4b0b      	ldr	r3, [pc, #44]	; (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f023 020f 	bic.w	r2, r3, #15
 8002e10:	4909      	ldr	r1, [pc, #36]	; (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e12:	693b      	ldr	r3, [r7, #16]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e18:	4b07      	ldr	r3, [pc, #28]	; (8002e38 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 030f 	and.w	r3, r3, #15
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	429a      	cmp	r2, r3
 8002e24:	d001      	beq.n	8002e2a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e000      	b.n	8002e2c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002e2a:	2300      	movs	r3, #0
}
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	3718      	adds	r7, #24
 8002e30:	46bd      	mov	sp, r7
 8002e32:	bd80      	pop	{r7, pc}
 8002e34:	40021000 	.word	0x40021000
 8002e38:	40022000 	.word	0x40022000

08002e3c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2b03      	cmp	r3, #3
 8002e50:	d00b      	beq.n	8002e6a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d825      	bhi.n	8002ea4 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d008      	beq.n	8002e70 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b02      	cmp	r3, #2
 8002e62:	d11f      	bne.n	8002ea4 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002e64:	4b25      	ldr	r3, [pc, #148]	; (8002efc <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002e66:	613b      	str	r3, [r7, #16]
    break;
 8002e68:	e01f      	b.n	8002eaa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002e6a:	4b25      	ldr	r3, [pc, #148]	; (8002f00 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002e6c:	613b      	str	r3, [r7, #16]
    break;
 8002e6e:	e01c      	b.n	8002eaa <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e70:	4b21      	ldr	r3, [pc, #132]	; (8002ef8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0308 	and.w	r3, r3, #8
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d107      	bne.n	8002e8c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e7c:	4b1e      	ldr	r3, [pc, #120]	; (8002ef8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e82:	0a1b      	lsrs	r3, r3, #8
 8002e84:	f003 030f 	and.w	r3, r3, #15
 8002e88:	617b      	str	r3, [r7, #20]
 8002e8a:	e005      	b.n	8002e98 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e8c:	4b1a      	ldr	r3, [pc, #104]	; (8002ef8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002e98:	4a1a      	ldr	r2, [pc, #104]	; (8002f04 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ea0:	613b      	str	r3, [r7, #16]
    break;
 8002ea2:	e002      	b.n	8002eaa <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	613b      	str	r3, [r7, #16]
    break;
 8002ea8:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002eaa:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	f003 030f 	and.w	r3, r3, #15
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002eb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ef8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002ec2:	693a      	ldr	r2, [r7, #16]
 8002ec4:	fb03 f202 	mul.w	r2, r3, r2
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ece:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ed0:	4b09      	ldr	r3, [pc, #36]	; (8002ef8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	0e5b      	lsrs	r3, r3, #25
 8002ed6:	f003 0303 	and.w	r3, r3, #3
 8002eda:	3301      	adds	r3, #1
 8002edc:	005b      	lsls	r3, r3, #1
 8002ede:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002ee0:	693a      	ldr	r2, [r7, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ee8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002eea:	683b      	ldr	r3, [r7, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	371c      	adds	r7, #28
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	00f42400 	.word	0x00f42400
 8002f00:	007a1200 	.word	0x007a1200
 8002f04:	08004ca8 	.word	0x08004ca8

08002f08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	b086      	sub	sp, #24
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002f10:	2300      	movs	r3, #0
 8002f12:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002f14:	2300      	movs	r3, #0
 8002f16:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d040      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f28:	2b80      	cmp	r3, #128	; 0x80
 8002f2a:	d02a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f2c:	2b80      	cmp	r3, #128	; 0x80
 8002f2e:	d825      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f30:	2b60      	cmp	r3, #96	; 0x60
 8002f32:	d026      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002f34:	2b60      	cmp	r3, #96	; 0x60
 8002f36:	d821      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f38:	2b40      	cmp	r3, #64	; 0x40
 8002f3a:	d006      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002f3c:	2b40      	cmp	r3, #64	; 0x40
 8002f3e:	d81d      	bhi.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d009      	beq.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002f44:	2b20      	cmp	r3, #32
 8002f46:	d010      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002f48:	e018      	b.n	8002f7c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002f4a:	4b89      	ldr	r3, [pc, #548]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	4a88      	ldr	r2, [pc, #544]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f54:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f56:	e015      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	3304      	adds	r3, #4
 8002f5c:	2100      	movs	r1, #0
 8002f5e:	4618      	mov	r0, r3
 8002f60:	f000 fb02 	bl	8003568 <RCCEx_PLLSAI1_Config>
 8002f64:	4603      	mov	r3, r0
 8002f66:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f68:	e00c      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	3320      	adds	r3, #32
 8002f6e:	2100      	movs	r1, #0
 8002f70:	4618      	mov	r0, r3
 8002f72:	f000 fbed 	bl	8003750 <RCCEx_PLLSAI2_Config>
 8002f76:	4603      	mov	r3, r0
 8002f78:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002f7a:	e003      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	74fb      	strb	r3, [r7, #19]
      break;
 8002f80:	e000      	b.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002f82:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f84:	7cfb      	ldrb	r3, [r7, #19]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d10b      	bne.n	8002fa2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f8a:	4b79      	ldr	r3, [pc, #484]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002f90:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f98:	4975      	ldr	r1, [pc, #468]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8002fa0:	e001      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fa2:	7cfb      	ldrb	r3, [r7, #19]
 8002fa4:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d047      	beq.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fba:	d030      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002fbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002fc0:	d82a      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002fc2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fc6:	d02a      	beq.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002fc8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fcc:	d824      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002fce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd2:	d008      	beq.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002fd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd8:	d81e      	bhi.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002fde:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fe2:	d010      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002fe4:	e018      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002fe6:	4b62      	ldr	r3, [pc, #392]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fe8:	68db      	ldr	r3, [r3, #12]
 8002fea:	4a61      	ldr	r2, [pc, #388]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ff2:	e015      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	3304      	adds	r3, #4
 8002ff8:	2100      	movs	r1, #0
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f000 fab4 	bl	8003568 <RCCEx_PLLSAI1_Config>
 8003000:	4603      	mov	r3, r0
 8003002:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003004:	e00c      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	3320      	adds	r3, #32
 800300a:	2100      	movs	r1, #0
 800300c:	4618      	mov	r0, r3
 800300e:	f000 fb9f 	bl	8003750 <RCCEx_PLLSAI2_Config>
 8003012:	4603      	mov	r3, r0
 8003014:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003016:	e003      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	74fb      	strb	r3, [r7, #19]
      break;
 800301c:	e000      	b.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800301e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003020:	7cfb      	ldrb	r3, [r7, #19]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10b      	bne.n	800303e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003026:	4b52      	ldr	r3, [pc, #328]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003028:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800302c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003034:	494e      	ldr	r1, [pc, #312]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800303c:	e001      	b.n	8003042 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800303e:	7cfb      	ldrb	r3, [r7, #19]
 8003040:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800304a:	2b00      	cmp	r3, #0
 800304c:	f000 809f 	beq.w	800318e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003050:	2300      	movs	r3, #0
 8003052:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003054:	4b46      	ldr	r3, [pc, #280]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003064:	2300      	movs	r3, #0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00d      	beq.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306a:	4b41      	ldr	r3, [pc, #260]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800306c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800306e:	4a40      	ldr	r2, [pc, #256]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003070:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003074:	6593      	str	r3, [r2, #88]	; 0x58
 8003076:	4b3e      	ldr	r3, [pc, #248]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800307a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800307e:	60bb      	str	r3, [r7, #8]
 8003080:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003082:	2301      	movs	r3, #1
 8003084:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003086:	4b3b      	ldr	r3, [pc, #236]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a3a      	ldr	r2, [pc, #232]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800308c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003090:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003092:	f7fd f91b 	bl	80002cc <HAL_GetTick>
 8003096:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003098:	e009      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800309a:	f7fd f917 	bl	80002cc <HAL_GetTick>
 800309e:	4602      	mov	r2, r0
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	1ad3      	subs	r3, r2, r3
 80030a4:	2b02      	cmp	r3, #2
 80030a6:	d902      	bls.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80030a8:	2303      	movs	r3, #3
 80030aa:	74fb      	strb	r3, [r7, #19]
        break;
 80030ac:	e005      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80030ae:	4b31      	ldr	r3, [pc, #196]	; (8003174 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d0ef      	beq.n	800309a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 80030ba:	7cfb      	ldrb	r3, [r7, #19]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d15b      	bne.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80030c0:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030ca:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d01f      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030d8:	697a      	ldr	r2, [r7, #20]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d019      	beq.n	8003112 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80030de:	4b24      	ldr	r3, [pc, #144]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030e8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80030ea:	4b21      	ldr	r3, [pc, #132]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030f0:	4a1f      	ldr	r2, [pc, #124]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80030fa:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80030fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003100:	4a1b      	ldr	r2, [pc, #108]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800310a:	4a19      	ldr	r2, [pc, #100]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003112:	697b      	ldr	r3, [r7, #20]
 8003114:	f003 0301 	and.w	r3, r3, #1
 8003118:	2b00      	cmp	r3, #0
 800311a:	d016      	beq.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fd f8d6 	bl	80002cc <HAL_GetTick>
 8003120:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003122:	e00b      	b.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003124:	f7fd f8d2 	bl	80002cc <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d902      	bls.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	74fb      	strb	r3, [r7, #19]
            break;
 800313a:	e006      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313c:	4b0c      	ldr	r3, [pc, #48]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800313e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d0ec      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 800314a:	7cfb      	ldrb	r3, [r7, #19]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d10c      	bne.n	800316a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003150:	4b07      	ldr	r3, [pc, #28]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003152:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003156:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003160:	4903      	ldr	r1, [pc, #12]	; (8003170 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003162:	4313      	orrs	r3, r2
 8003164:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003168:	e008      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800316a:	7cfb      	ldrb	r3, [r7, #19]
 800316c:	74bb      	strb	r3, [r7, #18]
 800316e:	e005      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8003170:	40021000 	.word	0x40021000
 8003174:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003178:	7cfb      	ldrb	r3, [r7, #19]
 800317a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800317c:	7c7b      	ldrb	r3, [r7, #17]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d105      	bne.n	800318e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003182:	4ba0      	ldr	r3, [pc, #640]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003186:	4a9f      	ldr	r2, [pc, #636]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003188:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800318c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00a      	beq.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800319a:	4b9a      	ldr	r3, [pc, #616]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800319c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a0:	f023 0203 	bic.w	r2, r3, #3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a8:	4996      	ldr	r1, [pc, #600]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031aa:	4313      	orrs	r3, r2
 80031ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031bc:	4b91      	ldr	r3, [pc, #580]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031c2:	f023 020c 	bic.w	r2, r3, #12
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	498e      	ldr	r1, [pc, #568]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f003 0304 	and.w	r3, r3, #4
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031de:	4b89      	ldr	r3, [pc, #548]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ec:	4985      	ldr	r1, [pc, #532]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0308 	and.w	r3, r3, #8
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003200:	4b80      	ldr	r3, [pc, #512]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003202:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003206:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800320e:	497d      	ldr	r1, [pc, #500]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003210:	4313      	orrs	r3, r2
 8003212:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0310 	and.w	r3, r3, #16
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003222:	4b78      	ldr	r3, [pc, #480]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003224:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003228:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003230:	4974      	ldr	r1, [pc, #464]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003232:	4313      	orrs	r3, r2
 8003234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 0320 	and.w	r3, r3, #32
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003244:	4b6f      	ldr	r3, [pc, #444]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003252:	496c      	ldr	r1, [pc, #432]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003266:	4b67      	ldr	r3, [pc, #412]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003268:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003274:	4963      	ldr	r1, [pc, #396]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003276:	4313      	orrs	r3, r2
 8003278:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00a      	beq.n	800329e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003288:	4b5e      	ldr	r3, [pc, #376]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800328a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800328e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003296:	495b      	ldr	r1, [pc, #364]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003298:	4313      	orrs	r3, r2
 800329a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d00a      	beq.n	80032c0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80032aa:	4b56      	ldr	r3, [pc, #344]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032b8:	4952      	ldr	r1, [pc, #328]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d00a      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80032cc:	4b4d      	ldr	r3, [pc, #308]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032da:	494a      	ldr	r1, [pc, #296]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00a      	beq.n	8003304 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80032ee:	4b45      	ldr	r3, [pc, #276]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032fc:	4941      	ldr	r1, [pc, #260]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00a      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003310:	4b3c      	ldr	r3, [pc, #240]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003312:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003316:	f023 0203 	bic.w	r2, r3, #3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800331e:	4939      	ldr	r1, [pc, #228]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003320:	4313      	orrs	r3, r2
 8003322:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800332e:	2b00      	cmp	r3, #0
 8003330:	d028      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003332:	4b34      	ldr	r3, [pc, #208]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003334:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003338:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003340:	4930      	ldr	r1, [pc, #192]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800334c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003350:	d106      	bne.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003352:	4b2c      	ldr	r3, [pc, #176]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	4a2b      	ldr	r2, [pc, #172]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8003358:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800335c:	60d3      	str	r3, [r2, #12]
 800335e:	e011      	b.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003364:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003368:	d10c      	bne.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	3304      	adds	r3, #4
 800336e:	2101      	movs	r1, #1
 8003370:	4618      	mov	r0, r3
 8003372:	f000 f8f9 	bl	8003568 <RCCEx_PLLSAI1_Config>
 8003376:	4603      	mov	r3, r0
 8003378:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800337a:	7cfb      	ldrb	r3, [r7, #19]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d001      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800338c:	2b00      	cmp	r3, #0
 800338e:	d04d      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003394:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003398:	d108      	bne.n	80033ac <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800339a:	4b1a      	ldr	r3, [pc, #104]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800339c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033a0:	4a18      	ldr	r2, [pc, #96]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80033a6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80033aa:	e012      	b.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80033ac:	4b15      	ldr	r3, [pc, #84]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033b2:	4a14      	ldr	r2, [pc, #80]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80033b8:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ca:	490e      	ldr	r1, [pc, #56]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033da:	d106      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	4a08      	ldr	r2, [pc, #32]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80033e6:	60d3      	str	r3, [r2, #12]
 80033e8:	e020      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80033ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033f2:	d109      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033f4:	4b03      	ldr	r3, [pc, #12]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	4a02      	ldr	r2, [pc, #8]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80033fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033fe:	60d3      	str	r3, [r2, #12]
 8003400:	e014      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800340c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003410:	d10c      	bne.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	3304      	adds	r3, #4
 8003416:	2101      	movs	r1, #1
 8003418:	4618      	mov	r0, r3
 800341a:	f000 f8a5 	bl	8003568 <RCCEx_PLLSAI1_Config>
 800341e:	4603      	mov	r3, r0
 8003420:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003422:	7cfb      	ldrb	r3, [r7, #19]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d001      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8003428:	7cfb      	ldrb	r3, [r7, #19]
 800342a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003434:	2b00      	cmp	r3, #0
 8003436:	d028      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003438:	4b4a      	ldr	r3, [pc, #296]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800343a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800343e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003446:	4947      	ldr	r1, [pc, #284]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003448:	4313      	orrs	r3, r2
 800344a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003452:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003456:	d106      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003458:	4b42      	ldr	r3, [pc, #264]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	4a41      	ldr	r2, [pc, #260]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800345e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003462:	60d3      	str	r3, [r2, #12]
 8003464:	e011      	b.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800346a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800346e:	d10c      	bne.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	3304      	adds	r3, #4
 8003474:	2101      	movs	r1, #1
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f876 	bl	8003568 <RCCEx_PLLSAI1_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003480:	7cfb      	ldrb	r3, [r7, #19]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8003486:	7cfb      	ldrb	r3, [r7, #19]
 8003488:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d01e      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003496:	4b33      	ldr	r3, [pc, #204]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034a6:	492f      	ldr	r1, [pc, #188]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034a8:	4313      	orrs	r3, r2
 80034aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80034b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034b8:	d10c      	bne.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	3304      	adds	r3, #4
 80034be:	2102      	movs	r1, #2
 80034c0:	4618      	mov	r0, r3
 80034c2:	f000 f851 	bl	8003568 <RCCEx_PLLSAI1_Config>
 80034c6:	4603      	mov	r3, r0
 80034c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ca:	7cfb      	ldrb	r3, [r7, #19]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d001      	beq.n	80034d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 80034d0:	7cfb      	ldrb	r3, [r7, #19]
 80034d2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d00b      	beq.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80034e0:	4b20      	ldr	r3, [pc, #128]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80034e6:	f023 0204 	bic.w	r2, r3, #4
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034f0:	491c      	ldr	r1, [pc, #112]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80034f2:	4313      	orrs	r3, r2
 80034f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003500:	2b00      	cmp	r3, #0
 8003502:	d00b      	beq.n	800351c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003504:	4b17      	ldr	r3, [pc, #92]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003506:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800350a:	f023 0218 	bic.w	r2, r3, #24
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	4913      	ldr	r1, [pc, #76]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003516:	4313      	orrs	r3, r2
 8003518:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003524:	2b00      	cmp	r3, #0
 8003526:	d017      	beq.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8003528:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800352a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800352e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003538:	490a      	ldr	r1, [pc, #40]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800353a:	4313      	orrs	r3, r2
 800353c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003546:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800354a:	d105      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	4a04      	ldr	r2, [pc, #16]	; (8003564 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003552:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003556:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003558:	7cbb      	ldrb	r3, [r7, #18]
}
 800355a:	4618      	mov	r0, r3
 800355c:	3718      	adds	r7, #24
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40021000 	.word	0x40021000

08003568 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003572:	2300      	movs	r3, #0
 8003574:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003576:	4b72      	ldr	r3, [pc, #456]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00e      	beq.n	80035a0 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003582:	4b6f      	ldr	r3, [pc, #444]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	f003 0203 	and.w	r2, r3, #3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	429a      	cmp	r2, r3
 8003590:	d103      	bne.n	800359a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
       ||
 8003596:	2b00      	cmp	r3, #0
 8003598:	d142      	bne.n	8003620 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	73fb      	strb	r3, [r7, #15]
 800359e:	e03f      	b.n	8003620 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	2b03      	cmp	r3, #3
 80035a6:	d018      	beq.n	80035da <RCCEx_PLLSAI1_Config+0x72>
 80035a8:	2b03      	cmp	r3, #3
 80035aa:	d825      	bhi.n	80035f8 <RCCEx_PLLSAI1_Config+0x90>
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d002      	beq.n	80035b6 <RCCEx_PLLSAI1_Config+0x4e>
 80035b0:	2b02      	cmp	r3, #2
 80035b2:	d009      	beq.n	80035c8 <RCCEx_PLLSAI1_Config+0x60>
 80035b4:	e020      	b.n	80035f8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80035b6:	4b62      	ldr	r3, [pc, #392]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d11d      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80035c2:	2301      	movs	r3, #1
 80035c4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035c6:	e01a      	b.n	80035fe <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80035c8:	4b5d      	ldr	r3, [pc, #372]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d116      	bne.n	8003602 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80035d8:	e013      	b.n	8003602 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80035da:	4b59      	ldr	r3, [pc, #356]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10f      	bne.n	8003606 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80035e6:	4b56      	ldr	r3, [pc, #344]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d109      	bne.n	8003606 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80035f6:	e006      	b.n	8003606 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	73fb      	strb	r3, [r7, #15]
      break;
 80035fc:	e004      	b.n	8003608 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80035fe:	bf00      	nop
 8003600:	e002      	b.n	8003608 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003602:	bf00      	nop
 8003604:	e000      	b.n	8003608 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003606:	bf00      	nop
    }

    if(status == HAL_OK)
 8003608:	7bfb      	ldrb	r3, [r7, #15]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d108      	bne.n	8003620 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 800360e:	4b4c      	ldr	r3, [pc, #304]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f023 0203 	bic.w	r2, r3, #3
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4949      	ldr	r1, [pc, #292]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 800361c:	4313      	orrs	r3, r2
 800361e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003620:	7bfb      	ldrb	r3, [r7, #15]
 8003622:	2b00      	cmp	r3, #0
 8003624:	f040 8086 	bne.w	8003734 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003628:	4b45      	ldr	r3, [pc, #276]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a44      	ldr	r2, [pc, #272]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 800362e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003632:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003634:	f7fc fe4a 	bl	80002cc <HAL_GetTick>
 8003638:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800363a:	e009      	b.n	8003650 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800363c:	f7fc fe46 	bl	80002cc <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	2b02      	cmp	r3, #2
 8003648:	d902      	bls.n	8003650 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	73fb      	strb	r3, [r7, #15]
        break;
 800364e:	e005      	b.n	800365c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003650:	4b3b      	ldr	r3, [pc, #236]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003658:	2b00      	cmp	r3, #0
 800365a:	d1ef      	bne.n	800363c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800365c:	7bfb      	ldrb	r3, [r7, #15]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d168      	bne.n	8003734 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	2b00      	cmp	r3, #0
 8003666:	d113      	bne.n	8003690 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003668:	4b35      	ldr	r3, [pc, #212]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 800366a:	691a      	ldr	r2, [r3, #16]
 800366c:	4b35      	ldr	r3, [pc, #212]	; (8003744 <RCCEx_PLLSAI1_Config+0x1dc>)
 800366e:	4013      	ands	r3, r2
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	6892      	ldr	r2, [r2, #8]
 8003674:	0211      	lsls	r1, r2, #8
 8003676:	687a      	ldr	r2, [r7, #4]
 8003678:	68d2      	ldr	r2, [r2, #12]
 800367a:	06d2      	lsls	r2, r2, #27
 800367c:	4311      	orrs	r1, r2
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6852      	ldr	r2, [r2, #4]
 8003682:	3a01      	subs	r2, #1
 8003684:	0112      	lsls	r2, r2, #4
 8003686:	430a      	orrs	r2, r1
 8003688:	492d      	ldr	r1, [pc, #180]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 800368a:	4313      	orrs	r3, r2
 800368c:	610b      	str	r3, [r1, #16]
 800368e:	e02d      	b.n	80036ec <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	2b01      	cmp	r3, #1
 8003694:	d115      	bne.n	80036c2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003696:	4b2a      	ldr	r3, [pc, #168]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003698:	691a      	ldr	r2, [r3, #16]
 800369a:	4b2b      	ldr	r3, [pc, #172]	; (8003748 <RCCEx_PLLSAI1_Config+0x1e0>)
 800369c:	4013      	ands	r3, r2
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	6892      	ldr	r2, [r2, #8]
 80036a2:	0211      	lsls	r1, r2, #8
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	6912      	ldr	r2, [r2, #16]
 80036a8:	0852      	lsrs	r2, r2, #1
 80036aa:	3a01      	subs	r2, #1
 80036ac:	0552      	lsls	r2, r2, #21
 80036ae:	4311      	orrs	r1, r2
 80036b0:	687a      	ldr	r2, [r7, #4]
 80036b2:	6852      	ldr	r2, [r2, #4]
 80036b4:	3a01      	subs	r2, #1
 80036b6:	0112      	lsls	r2, r2, #4
 80036b8:	430a      	orrs	r2, r1
 80036ba:	4921      	ldr	r1, [pc, #132]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036bc:	4313      	orrs	r3, r2
 80036be:	610b      	str	r3, [r1, #16]
 80036c0:	e014      	b.n	80036ec <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80036c2:	4b1f      	ldr	r3, [pc, #124]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036c4:	691a      	ldr	r2, [r3, #16]
 80036c6:	4b21      	ldr	r3, [pc, #132]	; (800374c <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	6892      	ldr	r2, [r2, #8]
 80036ce:	0211      	lsls	r1, r2, #8
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6952      	ldr	r2, [r2, #20]
 80036d4:	0852      	lsrs	r2, r2, #1
 80036d6:	3a01      	subs	r2, #1
 80036d8:	0652      	lsls	r2, r2, #25
 80036da:	4311      	orrs	r1, r2
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	6852      	ldr	r2, [r2, #4]
 80036e0:	3a01      	subs	r2, #1
 80036e2:	0112      	lsls	r2, r2, #4
 80036e4:	430a      	orrs	r2, r1
 80036e6:	4916      	ldr	r1, [pc, #88]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80036ec:	4b14      	ldr	r3, [pc, #80]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a13      	ldr	r2, [pc, #76]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 80036f2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80036f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f8:	f7fc fde8 	bl	80002cc <HAL_GetTick>
 80036fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80036fe:	e009      	b.n	8003714 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003700:	f7fc fde4 	bl	80002cc <HAL_GetTick>
 8003704:	4602      	mov	r2, r0
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	1ad3      	subs	r3, r2, r3
 800370a:	2b02      	cmp	r3, #2
 800370c:	d902      	bls.n	8003714 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	73fb      	strb	r3, [r7, #15]
          break;
 8003712:	e005      	b.n	8003720 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003714:	4b0a      	ldr	r3, [pc, #40]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ef      	beq.n	8003700 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d106      	bne.n	8003734 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003726:	4b06      	ldr	r3, [pc, #24]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003728:	691a      	ldr	r2, [r3, #16]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	4904      	ldr	r1, [pc, #16]	; (8003740 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003730:	4313      	orrs	r3, r2
 8003732:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003734:	7bfb      	ldrb	r3, [r7, #15]
}
 8003736:	4618      	mov	r0, r3
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000
 8003744:	07ff800f 	.word	0x07ff800f
 8003748:	ff9f800f 	.word	0xff9f800f
 800374c:	f9ff800f 	.word	0xf9ff800f

08003750 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800375a:	2300      	movs	r3, #0
 800375c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800375e:	4b72      	ldr	r3, [pc, #456]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 0303 	and.w	r3, r3, #3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d00e      	beq.n	8003788 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800376a:	4b6f      	ldr	r3, [pc, #444]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0203 	and.w	r2, r3, #3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	429a      	cmp	r2, r3
 8003778:	d103      	bne.n	8003782 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
       ||
 800377e:	2b00      	cmp	r3, #0
 8003780:	d142      	bne.n	8003808 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	73fb      	strb	r3, [r7, #15]
 8003786:	e03f      	b.n	8003808 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2b03      	cmp	r3, #3
 800378e:	d018      	beq.n	80037c2 <RCCEx_PLLSAI2_Config+0x72>
 8003790:	2b03      	cmp	r3, #3
 8003792:	d825      	bhi.n	80037e0 <RCCEx_PLLSAI2_Config+0x90>
 8003794:	2b01      	cmp	r3, #1
 8003796:	d002      	beq.n	800379e <RCCEx_PLLSAI2_Config+0x4e>
 8003798:	2b02      	cmp	r3, #2
 800379a:	d009      	beq.n	80037b0 <RCCEx_PLLSAI2_Config+0x60>
 800379c:	e020      	b.n	80037e0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800379e:	4b62      	ldr	r3, [pc, #392]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d11d      	bne.n	80037e6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ae:	e01a      	b.n	80037e6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037b0:	4b5d      	ldr	r3, [pc, #372]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d116      	bne.n	80037ea <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037c0:	e013      	b.n	80037ea <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037c2:	4b59      	ldr	r3, [pc, #356]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10f      	bne.n	80037ee <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037ce:	4b56      	ldr	r3, [pc, #344]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d109      	bne.n	80037ee <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037de:	e006      	b.n	80037ee <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	73fb      	strb	r3, [r7, #15]
      break;
 80037e4:	e004      	b.n	80037f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037e6:	bf00      	nop
 80037e8:	e002      	b.n	80037f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037ea:	bf00      	nop
 80037ec:	e000      	b.n	80037f0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80037ee:	bf00      	nop
    }

    if(status == HAL_OK)
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d108      	bne.n	8003808 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80037f6:	4b4c      	ldr	r3, [pc, #304]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80037f8:	68db      	ldr	r3, [r3, #12]
 80037fa:	f023 0203 	bic.w	r2, r3, #3
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4949      	ldr	r1, [pc, #292]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003804:	4313      	orrs	r3, r2
 8003806:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003808:	7bfb      	ldrb	r3, [r7, #15]
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 8086 	bne.w	800391c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003810:	4b45      	ldr	r3, [pc, #276]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a44      	ldr	r2, [pc, #272]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003816:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800381a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800381c:	f7fc fd56 	bl	80002cc <HAL_GetTick>
 8003820:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003822:	e009      	b.n	8003838 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003824:	f7fc fd52 	bl	80002cc <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d902      	bls.n	8003838 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	73fb      	strb	r3, [r7, #15]
        break;
 8003836:	e005      	b.n	8003844 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003838:	4b3b      	ldr	r3, [pc, #236]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1ef      	bne.n	8003824 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d168      	bne.n	800391c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d113      	bne.n	8003878 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003850:	4b35      	ldr	r3, [pc, #212]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	4b35      	ldr	r3, [pc, #212]	; (800392c <RCCEx_PLLSAI2_Config+0x1dc>)
 8003856:	4013      	ands	r3, r2
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6892      	ldr	r2, [r2, #8]
 800385c:	0211      	lsls	r1, r2, #8
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68d2      	ldr	r2, [r2, #12]
 8003862:	06d2      	lsls	r2, r2, #27
 8003864:	4311      	orrs	r1, r2
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6852      	ldr	r2, [r2, #4]
 800386a:	3a01      	subs	r2, #1
 800386c:	0112      	lsls	r2, r2, #4
 800386e:	430a      	orrs	r2, r1
 8003870:	492d      	ldr	r1, [pc, #180]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003872:	4313      	orrs	r3, r2
 8003874:	614b      	str	r3, [r1, #20]
 8003876:	e02d      	b.n	80038d4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d115      	bne.n	80038aa <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800387e:	4b2a      	ldr	r3, [pc, #168]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003880:	695a      	ldr	r2, [r3, #20]
 8003882:	4b2b      	ldr	r3, [pc, #172]	; (8003930 <RCCEx_PLLSAI2_Config+0x1e0>)
 8003884:	4013      	ands	r3, r2
 8003886:	687a      	ldr	r2, [r7, #4]
 8003888:	6892      	ldr	r2, [r2, #8]
 800388a:	0211      	lsls	r1, r2, #8
 800388c:	687a      	ldr	r2, [r7, #4]
 800388e:	6912      	ldr	r2, [r2, #16]
 8003890:	0852      	lsrs	r2, r2, #1
 8003892:	3a01      	subs	r2, #1
 8003894:	0552      	lsls	r2, r2, #21
 8003896:	4311      	orrs	r1, r2
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6852      	ldr	r2, [r2, #4]
 800389c:	3a01      	subs	r2, #1
 800389e:	0112      	lsls	r2, r2, #4
 80038a0:	430a      	orrs	r2, r1
 80038a2:	4921      	ldr	r1, [pc, #132]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	614b      	str	r3, [r1, #20]
 80038a8:	e014      	b.n	80038d4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038aa:	4b1f      	ldr	r3, [pc, #124]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038ac:	695a      	ldr	r2, [r3, #20]
 80038ae:	4b21      	ldr	r3, [pc, #132]	; (8003934 <RCCEx_PLLSAI2_Config+0x1e4>)
 80038b0:	4013      	ands	r3, r2
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	6892      	ldr	r2, [r2, #8]
 80038b6:	0211      	lsls	r1, r2, #8
 80038b8:	687a      	ldr	r2, [r7, #4]
 80038ba:	6952      	ldr	r2, [r2, #20]
 80038bc:	0852      	lsrs	r2, r2, #1
 80038be:	3a01      	subs	r2, #1
 80038c0:	0652      	lsls	r2, r2, #25
 80038c2:	4311      	orrs	r1, r2
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6852      	ldr	r2, [r2, #4]
 80038c8:	3a01      	subs	r2, #1
 80038ca:	0112      	lsls	r2, r2, #4
 80038cc:	430a      	orrs	r2, r1
 80038ce:	4916      	ldr	r1, [pc, #88]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d0:	4313      	orrs	r3, r2
 80038d2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80038d4:	4b14      	ldr	r3, [pc, #80]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	4a13      	ldr	r2, [pc, #76]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038de:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e0:	f7fc fcf4 	bl	80002cc <HAL_GetTick>
 80038e4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038e6:	e009      	b.n	80038fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038e8:	f7fc fcf0 	bl	80002cc <HAL_GetTick>
 80038ec:	4602      	mov	r2, r0
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	1ad3      	subs	r3, r2, r3
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d902      	bls.n	80038fc <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	73fb      	strb	r3, [r7, #15]
          break;
 80038fa:	e005      	b.n	8003908 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80038fc:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d0ef      	beq.n	80038e8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003908:	7bfb      	ldrb	r3, [r7, #15]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d106      	bne.n	800391c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800390e:	4b06      	ldr	r3, [pc, #24]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003910:	695a      	ldr	r2, [r3, #20]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	699b      	ldr	r3, [r3, #24]
 8003916:	4904      	ldr	r1, [pc, #16]	; (8003928 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003918:	4313      	orrs	r3, r2
 800391a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800391c:	7bfb      	ldrb	r3, [r7, #15]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
 8003926:	bf00      	nop
 8003928:	40021000 	.word	0x40021000
 800392c:	07ff800f 	.word	0x07ff800f
 8003930:	ff9f800f 	.word	0xff9f800f
 8003934:	f9ff800f 	.word	0xf9ff800f

08003938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b082      	sub	sp, #8
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e049      	b.n	80039de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d106      	bne.n	8003964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f001 f8b0 	bl	8004ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	3304      	adds	r3, #4
 8003974:	4619      	mov	r1, r3
 8003976:	4610      	mov	r0, r2
 8003978:	f000 fa50 	bl	8003e1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2201      	movs	r2, #1
 8003988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2201      	movs	r2, #1
 8003990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2201      	movs	r2, #1
 80039c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3708      	adds	r7, #8
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}

080039e6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039e6:	b580      	push	{r7, lr}
 80039e8:	b082      	sub	sp, #8
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	691b      	ldr	r3, [r3, #16]
 80039f4:	f003 0302 	and.w	r3, r3, #2
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d122      	bne.n	8003a42 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	f003 0302 	and.w	r3, r3, #2
 8003a06:	2b02      	cmp	r3, #2
 8003a08:	d11b      	bne.n	8003a42 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f06f 0202 	mvn.w	r2, #2
 8003a12:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	699b      	ldr	r3, [r3, #24]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d003      	beq.n	8003a30 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a28:	6878      	ldr	r0, [r7, #4]
 8003a2a:	f000 f9d8 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003a2e:	e005      	b.n	8003a3c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f000 f9ca 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 f9db 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	691b      	ldr	r3, [r3, #16]
 8003a48:	f003 0304 	and.w	r3, r3, #4
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d122      	bne.n	8003a96 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	f003 0304 	and.w	r3, r3, #4
 8003a5a:	2b04      	cmp	r3, #4
 8003a5c:	d11b      	bne.n	8003a96 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f06f 0204 	mvn.w	r2, #4
 8003a66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d003      	beq.n	8003a84 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f000 f9ae 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003a82:	e005      	b.n	8003a90 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f9a0 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 f9b1 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	f003 0308 	and.w	r3, r3, #8
 8003aa0:	2b08      	cmp	r3, #8
 8003aa2:	d122      	bne.n	8003aea <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	f003 0308 	and.w	r3, r3, #8
 8003aae:	2b08      	cmp	r3, #8
 8003ab0:	d11b      	bne.n	8003aea <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f06f 0208 	mvn.w	r2, #8
 8003aba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2204      	movs	r2, #4
 8003ac0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	69db      	ldr	r3, [r3, #28]
 8003ac8:	f003 0303 	and.w	r3, r3, #3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d003      	beq.n	8003ad8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 f984 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003ad6:	e005      	b.n	8003ae4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f976 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f987 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	f003 0310 	and.w	r3, r3, #16
 8003af4:	2b10      	cmp	r3, #16
 8003af6:	d122      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	f003 0310 	and.w	r3, r3, #16
 8003b02:	2b10      	cmp	r3, #16
 8003b04:	d11b      	bne.n	8003b3e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f06f 0210 	mvn.w	r2, #16
 8003b0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2208      	movs	r2, #8
 8003b14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	69db      	ldr	r3, [r3, #28]
 8003b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d003      	beq.n	8003b2c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 f95a 	bl	8003dde <HAL_TIM_IC_CaptureCallback>
 8003b2a:	e005      	b.n	8003b38 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f94c 	bl	8003dca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b32:	6878      	ldr	r0, [r7, #4]
 8003b34:	f000 f95d 	bl	8003df2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d10e      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68db      	ldr	r3, [r3, #12]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d107      	bne.n	8003b6a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f06f 0201 	mvn.w	r2, #1
 8003b62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f000 f926 	bl	8003db6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	691b      	ldr	r3, [r3, #16]
 8003b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b74:	2b80      	cmp	r3, #128	; 0x80
 8003b76:	d10e      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b82:	2b80      	cmp	r3, #128	; 0x80
 8003b84:	d107      	bne.n	8003b96 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f000 fb09 	bl	80041a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	691b      	ldr	r3, [r3, #16]
 8003b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ba0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ba4:	d10e      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb0:	2b80      	cmp	r3, #128	; 0x80
 8003bb2:	d107      	bne.n	8003bc4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003bbe:	6878      	ldr	r0, [r7, #4]
 8003bc0:	f000 fafc 	bl	80041bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	691b      	ldr	r3, [r3, #16]
 8003bca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bce:	2b40      	cmp	r3, #64	; 0x40
 8003bd0:	d10e      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bdc:	2b40      	cmp	r3, #64	; 0x40
 8003bde:	d107      	bne.n	8003bf0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f90b 	bl	8003e06 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	f003 0320 	and.w	r3, r3, #32
 8003bfa:	2b20      	cmp	r3, #32
 8003bfc:	d10e      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f003 0320 	and.w	r3, r3, #32
 8003c08:	2b20      	cmp	r3, #32
 8003c0a:	d107      	bne.n	8003c1c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f06f 0220 	mvn.w	r2, #32
 8003c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 fabc 	bl	8004194 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c1c:	bf00      	nop
 8003c1e:	3708      	adds	r7, #8
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_TIM_ConfigClockSource+0x1c>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e0b6      	b.n	8003dae <HAL_TIM_ConfigClockSource+0x18a>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c5e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c6a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7c:	d03e      	beq.n	8003cfc <HAL_TIM_ConfigClockSource+0xd8>
 8003c7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c82:	f200 8087 	bhi.w	8003d94 <HAL_TIM_ConfigClockSource+0x170>
 8003c86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8a:	f000 8086 	beq.w	8003d9a <HAL_TIM_ConfigClockSource+0x176>
 8003c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c92:	d87f      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x170>
 8003c94:	2b70      	cmp	r3, #112	; 0x70
 8003c96:	d01a      	beq.n	8003cce <HAL_TIM_ConfigClockSource+0xaa>
 8003c98:	2b70      	cmp	r3, #112	; 0x70
 8003c9a:	d87b      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x170>
 8003c9c:	2b60      	cmp	r3, #96	; 0x60
 8003c9e:	d050      	beq.n	8003d42 <HAL_TIM_ConfigClockSource+0x11e>
 8003ca0:	2b60      	cmp	r3, #96	; 0x60
 8003ca2:	d877      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x170>
 8003ca4:	2b50      	cmp	r3, #80	; 0x50
 8003ca6:	d03c      	beq.n	8003d22 <HAL_TIM_ConfigClockSource+0xfe>
 8003ca8:	2b50      	cmp	r3, #80	; 0x50
 8003caa:	d873      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x170>
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d058      	beq.n	8003d62 <HAL_TIM_ConfigClockSource+0x13e>
 8003cb0:	2b40      	cmp	r3, #64	; 0x40
 8003cb2:	d86f      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x170>
 8003cb4:	2b30      	cmp	r3, #48	; 0x30
 8003cb6:	d064      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15e>
 8003cb8:	2b30      	cmp	r3, #48	; 0x30
 8003cba:	d86b      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x170>
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d060      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15e>
 8003cc0:	2b20      	cmp	r3, #32
 8003cc2:	d867      	bhi.n	8003d94 <HAL_TIM_ConfigClockSource+0x170>
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d05c      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15e>
 8003cc8:	2b10      	cmp	r3, #16
 8003cca:	d05a      	beq.n	8003d82 <HAL_TIM_ConfigClockSource+0x15e>
 8003ccc:	e062      	b.n	8003d94 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6899      	ldr	r1, [r3, #8]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f000 f9b1 	bl	8004044 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cf0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68ba      	ldr	r2, [r7, #8]
 8003cf8:	609a      	str	r2, [r3, #8]
      break;
 8003cfa:	e04f      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6818      	ldr	r0, [r3, #0]
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	6899      	ldr	r1, [r3, #8]
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	685a      	ldr	r2, [r3, #4]
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	f000 f99a 	bl	8004044 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689a      	ldr	r2, [r3, #8]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d1e:	609a      	str	r2, [r3, #8]
      break;
 8003d20:	e03c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6818      	ldr	r0, [r3, #0]
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	6859      	ldr	r1, [r3, #4]
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	461a      	mov	r2, r3
 8003d30:	f000 f90e 	bl	8003f50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2150      	movs	r1, #80	; 0x50
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 f967 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003d40:	e02c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6818      	ldr	r0, [r3, #0]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	6859      	ldr	r1, [r3, #4]
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	461a      	mov	r2, r3
 8003d50:	f000 f92d 	bl	8003fae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	2160      	movs	r1, #96	; 0x60
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f957 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003d60:	e01c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6818      	ldr	r0, [r3, #0]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6859      	ldr	r1, [r3, #4]
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	f000 f8ee 	bl	8003f50 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	2140      	movs	r1, #64	; 0x40
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f000 f947 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003d80:	e00c      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681a      	ldr	r2, [r3, #0]
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	4610      	mov	r0, r2
 8003d8e:	f000 f93e 	bl	800400e <TIM_ITRx_SetConfig>
      break;
 8003d92:	e003      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	73fb      	strb	r3, [r7, #15]
      break;
 8003d98:	e000      	b.n	8003d9c <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003d9a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3710      	adds	r7, #16
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003db6:	b480      	push	{r7}
 8003db8:	b083      	sub	sp, #12
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003dbe:	bf00      	nop
 8003dc0:	370c      	adds	r7, #12
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr

08003dca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003dca:	b480      	push	{r7}
 8003dcc:	b083      	sub	sp, #12
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003dd2:	bf00      	nop
 8003dd4:	370c      	adds	r7, #12
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr

08003dde <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003de6:	bf00      	nop
 8003de8:	370c      	adds	r7, #12
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr

08003df2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003df2:	b480      	push	{r7}
 8003df4:	b083      	sub	sp, #12
 8003df6:	af00      	add	r7, sp, #0
 8003df8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr

08003e06 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e06:	b480      	push	{r7}
 8003e08:	b083      	sub	sp, #12
 8003e0a:	af00      	add	r7, sp, #0
 8003e0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e0e:	bf00      	nop
 8003e10:	370c      	adds	r7, #12
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
	...

08003e1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	4a40      	ldr	r2, [pc, #256]	; (8003f30 <TIM_Base_SetConfig+0x114>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d013      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3a:	d00f      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	4a3d      	ldr	r2, [pc, #244]	; (8003f34 <TIM_Base_SetConfig+0x118>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00b      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a3c      	ldr	r2, [pc, #240]	; (8003f38 <TIM_Base_SetConfig+0x11c>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d007      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a3b      	ldr	r2, [pc, #236]	; (8003f3c <TIM_Base_SetConfig+0x120>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d003      	beq.n	8003e5c <TIM_Base_SetConfig+0x40>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a3a      	ldr	r2, [pc, #232]	; (8003f40 <TIM_Base_SetConfig+0x124>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d108      	bne.n	8003e6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003e64:	683b      	ldr	r3, [r7, #0]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4313      	orrs	r3, r2
 8003e6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a2f      	ldr	r2, [pc, #188]	; (8003f30 <TIM_Base_SetConfig+0x114>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d01f      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e7c:	d01b      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a2c      	ldr	r2, [pc, #176]	; (8003f34 <TIM_Base_SetConfig+0x118>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d017      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a2b      	ldr	r2, [pc, #172]	; (8003f38 <TIM_Base_SetConfig+0x11c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d013      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a2a      	ldr	r2, [pc, #168]	; (8003f3c <TIM_Base_SetConfig+0x120>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00f      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a29      	ldr	r2, [pc, #164]	; (8003f40 <TIM_Base_SetConfig+0x124>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00b      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a28      	ldr	r2, [pc, #160]	; (8003f44 <TIM_Base_SetConfig+0x128>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a27      	ldr	r2, [pc, #156]	; (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <TIM_Base_SetConfig+0x9a>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a26      	ldr	r2, [pc, #152]	; (8003f4c <TIM_Base_SetConfig+0x130>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d108      	bne.n	8003ec8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ebc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	68db      	ldr	r3, [r3, #12]
 8003ec2:	68fa      	ldr	r2, [r7, #12]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68fa      	ldr	r2, [r7, #12]
 8003eda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	4a10      	ldr	r2, [pc, #64]	; (8003f30 <TIM_Base_SetConfig+0x114>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d00f      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	4a12      	ldr	r2, [pc, #72]	; (8003f40 <TIM_Base_SetConfig+0x124>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d00b      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4a11      	ldr	r2, [pc, #68]	; (8003f44 <TIM_Base_SetConfig+0x128>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d007      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	4a10      	ldr	r2, [pc, #64]	; (8003f48 <TIM_Base_SetConfig+0x12c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d003      	beq.n	8003f14 <TIM_Base_SetConfig+0xf8>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	4a0f      	ldr	r2, [pc, #60]	; (8003f4c <TIM_Base_SetConfig+0x130>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d103      	bne.n	8003f1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	691a      	ldr	r2, [r3, #16]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	615a      	str	r2, [r3, #20]
}
 8003f22:	bf00      	nop
 8003f24:	3714      	adds	r7, #20
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40012c00 	.word	0x40012c00
 8003f34:	40000400 	.word	0x40000400
 8003f38:	40000800 	.word	0x40000800
 8003f3c:	40000c00 	.word	0x40000c00
 8003f40:	40013400 	.word	0x40013400
 8003f44:	40014000 	.word	0x40014000
 8003f48:	40014400 	.word	0x40014400
 8003f4c:	40014800 	.word	0x40014800

08003f50 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b087      	sub	sp, #28
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a1b      	ldr	r3, [r3, #32]
 8003f60:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	f023 0201 	bic.w	r2, r3, #1
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f7a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	011b      	lsls	r3, r3, #4
 8003f80:	693a      	ldr	r2, [r7, #16]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003f86:	697b      	ldr	r3, [r7, #20]
 8003f88:	f023 030a 	bic.w	r3, r3, #10
 8003f8c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4313      	orrs	r3, r2
 8003f94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	621a      	str	r2, [r3, #32]
}
 8003fa2:	bf00      	nop
 8003fa4:	371c      	adds	r7, #28
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b087      	sub	sp, #28
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	60f8      	str	r0, [r7, #12]
 8003fb6:	60b9      	str	r1, [r7, #8]
 8003fb8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6a1b      	ldr	r3, [r3, #32]
 8003fbe:	f023 0210 	bic.w	r2, r3, #16
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6a1b      	ldr	r3, [r3, #32]
 8003fd0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	031b      	lsls	r3, r3, #12
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003fea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	4313      	orrs	r3, r2
 8003ff4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	621a      	str	r2, [r3, #32]
}
 8004002:	bf00      	nop
 8004004:	371c      	adds	r7, #28
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800400e:	b480      	push	{r7}
 8004010:	b085      	sub	sp, #20
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004024:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	4313      	orrs	r3, r2
 800402c:	f043 0307 	orr.w	r3, r3, #7
 8004030:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	609a      	str	r2, [r3, #8]
}
 8004038:	bf00      	nop
 800403a:	3714      	adds	r7, #20
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr

08004044 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	60b9      	str	r1, [r7, #8]
 800404e:	607a      	str	r2, [r7, #4]
 8004050:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004058:	697b      	ldr	r3, [r7, #20]
 800405a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800405e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	021a      	lsls	r2, r3, #8
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	431a      	orrs	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4313      	orrs	r3, r2
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	697a      	ldr	r2, [r7, #20]
 8004076:	609a      	str	r2, [r3, #8]
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
 800408c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004094:	2b01      	cmp	r3, #1
 8004096:	d101      	bne.n	800409c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004098:	2302      	movs	r3, #2
 800409a:	e068      	b.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2201      	movs	r2, #1
 80040a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2202      	movs	r2, #2
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	689b      	ldr	r3, [r3, #8]
 80040ba:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a2e      	ldr	r2, [pc, #184]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a2d      	ldr	r2, [pc, #180]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d108      	bne.n	80040e2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80040d6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	4313      	orrs	r3, r2
 80040e0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68fa      	ldr	r2, [r7, #12]
 80040f0:	4313      	orrs	r3, r2
 80040f2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a1e      	ldr	r2, [pc, #120]	; (800417c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d01d      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800410e:	d018      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	4a1b      	ldr	r2, [pc, #108]	; (8004184 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004116:	4293      	cmp	r3, r2
 8004118:	d013      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	4a1a      	ldr	r2, [pc, #104]	; (8004188 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004120:	4293      	cmp	r3, r2
 8004122:	d00e      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	4a18      	ldr	r2, [pc, #96]	; (800418c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d009      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a13      	ldr	r2, [pc, #76]	; (8004180 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d004      	beq.n	8004142 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a14      	ldr	r2, [pc, #80]	; (8004190 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d10c      	bne.n	800415c <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004148:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	689b      	ldr	r3, [r3, #8]
 800414e:	68ba      	ldr	r2, [r7, #8]
 8004150:	4313      	orrs	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68ba      	ldr	r2, [r7, #8]
 800415a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800416c:	2300      	movs	r3, #0
}
 800416e:	4618      	mov	r0, r3
 8004170:	3714      	adds	r7, #20
 8004172:	46bd      	mov	sp, r7
 8004174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004178:	4770      	bx	lr
 800417a:	bf00      	nop
 800417c:	40012c00 	.word	0x40012c00
 8004180:	40013400 	.word	0x40013400
 8004184:	40000400 	.word	0x40000400
 8004188:	40000800 	.word	0x40000800
 800418c:	40000c00 	.word	0x40000c00
 8004190:	40014000 	.word	0x40014000

08004194 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b083      	sub	sp, #12
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr

080041bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80041bc:	b480      	push	{r7}
 80041be:	b083      	sub	sp, #12
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80041c4:	bf00      	nop
 80041c6:	370c      	adds	r7, #12
 80041c8:	46bd      	mov	sp, r7
 80041ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ce:	4770      	bx	lr

080041d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041d4:	f7fc f812 	bl	80001fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041d8:	f000 f80d 	bl	80041f6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041dc:	f000 f9cc 	bl	8004578 <MX_GPIO_Init>
  MX_DMA_Init();
 80041e0:	f000 f998 	bl	8004514 <MX_DMA_Init>
  MX_DAC1_Init();
 80041e4:	f000 f858 	bl	8004298 <MX_DAC1_Init>
  MX_TIM2_Init();
 80041e8:	f000 f946 	bl	8004478 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 80041ec:	f000 f888 	bl	8004300 <MX_DFSDM1_Init>
  MX_OCTOSPI1_Init();
 80041f0:	f000 f8ec 	bl	80043cc <MX_OCTOSPI1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80041f4:	e7fe      	b.n	80041f4 <main+0x24>

080041f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80041f6:	b580      	push	{r7, lr}
 80041f8:	b096      	sub	sp, #88	; 0x58
 80041fa:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80041fc:	f107 0314 	add.w	r3, r7, #20
 8004200:	2244      	movs	r2, #68	; 0x44
 8004202:	2100      	movs	r1, #0
 8004204:	4618      	mov	r0, r3
 8004206:	f000 fd33 	bl	8004c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800420a:	463b      	mov	r3, r7
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	605a      	str	r2, [r3, #4]
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	60da      	str	r2, [r3, #12]
 8004216:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8004218:	2000      	movs	r0, #0
 800421a:	f7fd ff25 	bl	8002068 <HAL_PWREx_ControlVoltageScaling>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d001      	beq.n	8004228 <SystemClock_Config+0x32>
  {
    Error_Handler();
 8004224:	f000 fa26 	bl	8004674 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8004228:	2310      	movs	r3, #16
 800422a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800422c:	2301      	movs	r3, #1
 800422e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8004234:	2360      	movs	r3, #96	; 0x60
 8004236:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004238:	2302      	movs	r3, #2
 800423a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800423c:	2301      	movs	r3, #1
 800423e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004240:	2301      	movs	r3, #1
 8004242:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8004244:	233c      	movs	r3, #60	; 0x3c
 8004246:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004248:	2302      	movs	r3, #2
 800424a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800424c:	2302      	movs	r3, #2
 800424e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004250:	2302      	movs	r3, #2
 8004252:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004254:	f107 0314 	add.w	r3, r7, #20
 8004258:	4618      	mov	r0, r3
 800425a:	f7fd ffa9 	bl	80021b0 <HAL_RCC_OscConfig>
 800425e:	4603      	mov	r3, r0
 8004260:	2b00      	cmp	r3, #0
 8004262:	d001      	beq.n	8004268 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8004264:	f000 fa06 	bl	8004674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004268:	230f      	movs	r3, #15
 800426a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800426c:	2303      	movs	r3, #3
 800426e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004270:	2300      	movs	r3, #0
 8004272:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004274:	2300      	movs	r3, #0
 8004276:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004278:	2300      	movs	r3, #0
 800427a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800427c:	463b      	mov	r3, r7
 800427e:	2105      	movs	r1, #5
 8004280:	4618      	mov	r0, r3
 8004282:	f7fe fbaf 	bl	80029e4 <HAL_RCC_ClockConfig>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d001      	beq.n	8004290 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800428c:	f000 f9f2 	bl	8004674 <Error_Handler>
  }
}
 8004290:	bf00      	nop
 8004292:	3758      	adds	r7, #88	; 0x58
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08a      	sub	sp, #40	; 0x28
 800429c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800429e:	463b      	mov	r3, r7
 80042a0:	2228      	movs	r2, #40	; 0x28
 80042a2:	2100      	movs	r1, #0
 80042a4:	4618      	mov	r0, r3
 80042a6:	f000 fce3 	bl	8004c70 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 80042aa:	4b13      	ldr	r3, [pc, #76]	; (80042f8 <MX_DAC1_Init+0x60>)
 80042ac:	4a13      	ldr	r2, [pc, #76]	; (80042fc <MX_DAC1_Init+0x64>)
 80042ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80042b0:	4811      	ldr	r0, [pc, #68]	; (80042f8 <MX_DAC1_Init+0x60>)
 80042b2:	f7fc f94c 	bl	800054e <HAL_DAC_Init>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d001      	beq.n	80042c0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80042bc:	f000 f9da 	bl	8004674 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80042c0:	2300      	movs	r3, #0
 80042c2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 80042c4:	230a      	movs	r3, #10
 80042c6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80042c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80042cc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80042d2:	2300      	movs	r3, #0
 80042d4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80042d6:	2300      	movs	r3, #0
 80042d8:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80042da:	463b      	mov	r3, r7
 80042dc:	2200      	movs	r2, #0
 80042de:	4619      	mov	r1, r3
 80042e0:	4805      	ldr	r0, [pc, #20]	; (80042f8 <MX_DAC1_Init+0x60>)
 80042e2:	f7fc f957 	bl	8000594 <HAL_DAC_ConfigChannel>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 80042ec:	f000 f9c2 	bl	8004674 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80042f0:	bf00      	nop
 80042f2:	3728      	adds	r7, #40	; 0x28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	20000050 	.word	0x20000050
 80042fc:	40007400 	.word	0x40007400

08004300 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8004304:	4b2c      	ldr	r3, [pc, #176]	; (80043b8 <MX_DFSDM1_Init+0xb8>)
 8004306:	4a2d      	ldr	r2, [pc, #180]	; (80043bc <MX_DFSDM1_Init+0xbc>)
 8004308:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 800430a:	4b2b      	ldr	r3, [pc, #172]	; (80043b8 <MX_DFSDM1_Init+0xb8>)
 800430c:	2200      	movs	r2, #0
 800430e:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8004310:	4b29      	ldr	r3, [pc, #164]	; (80043b8 <MX_DFSDM1_Init+0xb8>)
 8004312:	2201      	movs	r2, #1
 8004314:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8004316:	4b28      	ldr	r3, [pc, #160]	; (80043b8 <MX_DFSDM1_Init+0xb8>)
 8004318:	2201      	movs	r2, #1
 800431a:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 800431c:	4b26      	ldr	r3, [pc, #152]	; (80043b8 <MX_DFSDM1_Init+0xb8>)
 800431e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8004322:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 240;
 8004324:	4b24      	ldr	r3, [pc, #144]	; (80043b8 <MX_DFSDM1_Init+0xb8>)
 8004326:	22f0      	movs	r2, #240	; 0xf0
 8004328:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800432a:	4b23      	ldr	r3, [pc, #140]	; (80043b8 <MX_DFSDM1_Init+0xb8>)
 800432c:	2201      	movs	r2, #1
 800432e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8004330:	4821      	ldr	r0, [pc, #132]	; (80043b8 <MX_DFSDM1_Init+0xb8>)
 8004332:	f7fc fb43 	bl	80009bc <HAL_DFSDM_FilterInit>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 800433c:	f000 f99a 	bl	8004674 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8004340:	4b1f      	ldr	r3, [pc, #124]	; (80043c0 <MX_DFSDM1_Init+0xc0>)
 8004342:	4a20      	ldr	r2, [pc, #128]	; (80043c4 <MX_DFSDM1_Init+0xc4>)
 8004344:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8004346:	4b1e      	ldr	r3, [pc, #120]	; (80043c0 <MX_DFSDM1_Init+0xc0>)
 8004348:	2201      	movs	r2, #1
 800434a:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 800434c:	4b1c      	ldr	r3, [pc, #112]	; (80043c0 <MX_DFSDM1_Init+0xc0>)
 800434e:	2200      	movs	r2, #0
 8004350:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 8004352:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <MX_DFSDM1_Init+0xc0>)
 8004354:	2222      	movs	r2, #34	; 0x22
 8004356:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8004358:	4b19      	ldr	r3, [pc, #100]	; (80043c0 <MX_DFSDM1_Init+0xc0>)
 800435a:	2200      	movs	r2, #0
 800435c:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 800435e:	4b18      	ldr	r3, [pc, #96]	; (80043c0 <MX_DFSDM1_Init+0xc0>)
 8004360:	2200      	movs	r2, #0
 8004362:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8004364:	4b16      	ldr	r3, [pc, #88]	; (80043c0 <MX_DFSDM1_Init+0xc0>)
 8004366:	2200      	movs	r2, #0
 8004368:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800436a:	4b15      	ldr	r3, [pc, #84]	; (80043c0 <MX_DFSDM1_Init+0xc0>)
 800436c:	2200      	movs	r2, #0
 800436e:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8004370:	4b13      	ldr	r3, [pc, #76]	; (80043c0 <MX_DFSDM1_Init+0xc0>)
 8004372:	2204      	movs	r2, #4
 8004374:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8004376:	4b12      	ldr	r3, [pc, #72]	; (80043c0 <MX_DFSDM1_Init+0xc0>)
 8004378:	2200      	movs	r2, #0
 800437a:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 800437c:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <MX_DFSDM1_Init+0xc0>)
 800437e:	2201      	movs	r2, #1
 8004380:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8004382:	4b0f      	ldr	r3, [pc, #60]	; (80043c0 <MX_DFSDM1_Init+0xc0>)
 8004384:	2200      	movs	r2, #0
 8004386:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8004388:	4b0d      	ldr	r3, [pc, #52]	; (80043c0 <MX_DFSDM1_Init+0xc0>)
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 800438e:	480c      	ldr	r0, [pc, #48]	; (80043c0 <MX_DFSDM1_Init+0xc0>)
 8004390:	f7fc fa40 	bl	8000814 <HAL_DFSDM_ChannelInit>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800439a:	f000 f96b 	bl	8004674 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 800439e:	2201      	movs	r2, #1
 80043a0:	4909      	ldr	r1, [pc, #36]	; (80043c8 <MX_DFSDM1_Init+0xc8>)
 80043a2:	4805      	ldr	r0, [pc, #20]	; (80043b8 <MX_DFSDM1_Init+0xb8>)
 80043a4:	f7fc fbe4 	bl	8000b70 <HAL_DFSDM_FilterConfigRegChannel>
 80043a8:	4603      	mov	r3, r0
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 80043ae:	f000 f961 	bl	8004674 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 80043b2:	bf00      	nop
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	200000c4 	.word	0x200000c4
 80043bc:	40016100 	.word	0x40016100
 80043c0:	20000118 	.word	0x20000118
 80043c4:	40016040 	.word	0x40016040
 80043c8:	00020004 	.word	0x00020004

080043cc <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b086      	sub	sp, #24
 80043d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80043d2:	1d3b      	adds	r3, r7, #4
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]
 80043d8:	605a      	str	r2, [r3, #4]
 80043da:	609a      	str	r2, [r3, #8]
 80043dc:	60da      	str	r2, [r3, #12]
 80043de:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80043e0:	4b23      	ldr	r3, [pc, #140]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 80043e2:	4a24      	ldr	r2, [pc, #144]	; (8004474 <MX_OCTOSPI1_Init+0xa8>)
 80043e4:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80043e6:	4b22      	ldr	r3, [pc, #136]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 80043e8:	2201      	movs	r2, #1
 80043ea:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80043ec:	4b20      	ldr	r3, [pc, #128]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80043f2:	4b1f      	ldr	r3, [pc, #124]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 80043f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80043f8:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80043fa:	4b1d      	ldr	r3, [pc, #116]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 80043fc:	2220      	movs	r2, #32
 80043fe:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8004400:	4b1b      	ldr	r3, [pc, #108]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 8004402:	2201      	movs	r2, #1
 8004404:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8004406:	4b1a      	ldr	r3, [pc, #104]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 8004408:	2200      	movs	r2, #0
 800440a:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 800440c:	4b18      	ldr	r3, [pc, #96]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 800440e:	2200      	movs	r2, #0
 8004410:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8004412:	4b17      	ldr	r3, [pc, #92]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 8004414:	2201      	movs	r2, #1
 8004416:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8004418:	4b15      	ldr	r3, [pc, #84]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 800441a:	2200      	movs	r2, #0
 800441c:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800441e:	4b14      	ldr	r3, [pc, #80]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 8004420:	2200      	movs	r2, #0
 8004422:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8004424:	4b12      	ldr	r3, [pc, #72]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 8004426:	2200      	movs	r2, #0
 8004428:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 800442c:	2208      	movs	r2, #8
 800442e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8004430:	480f      	ldr	r0, [pc, #60]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 8004432:	f7fd f923 	bl	800167c <HAL_OSPI_Init>
 8004436:	4603      	mov	r3, r0
 8004438:	2b00      	cmp	r3, #0
 800443a:	d001      	beq.n	8004440 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 800443c:	f000 f91a 	bl	8004674 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8004440:	2301      	movs	r3, #1
 8004442:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8004444:	2301      	movs	r3, #1
 8004446:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8004448:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800444c:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800444e:	1d3b      	adds	r3, r7, #4
 8004450:	f241 3288 	movw	r2, #5000	; 0x1388
 8004454:	4619      	mov	r1, r3
 8004456:	4806      	ldr	r0, [pc, #24]	; (8004470 <MX_OCTOSPI1_Init+0xa4>)
 8004458:	f7fd f9ca 	bl	80017f0 <HAL_OSPIM_Config>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8004462:	f000 f907 	bl	8004674 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8004466:	bf00      	nop
 8004468:	3718      	adds	r7, #24
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}
 800446e:	bf00      	nop
 8004470:	200001b0 	.word	0x200001b0
 8004474:	a0001000 	.word	0xa0001000

08004478 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b088      	sub	sp, #32
 800447c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800447e:	f107 0310 	add.w	r3, r7, #16
 8004482:	2200      	movs	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	605a      	str	r2, [r3, #4]
 8004488:	609a      	str	r2, [r3, #8]
 800448a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800448c:	1d3b      	adds	r3, r7, #4
 800448e:	2200      	movs	r2, #0
 8004490:	601a      	str	r2, [r3, #0]
 8004492:	605a      	str	r2, [r3, #4]
 8004494:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004496:	4b1e      	ldr	r3, [pc, #120]	; (8004510 <MX_TIM2_Init+0x98>)
 8004498:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800449c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800449e:	4b1c      	ldr	r3, [pc, #112]	; (8004510 <MX_TIM2_Init+0x98>)
 80044a0:	2200      	movs	r2, #0
 80044a2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80044a4:	4b1a      	ldr	r3, [pc, #104]	; (8004510 <MX_TIM2_Init+0x98>)
 80044a6:	2200      	movs	r2, #0
 80044a8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8000;
 80044aa:	4b19      	ldr	r3, [pc, #100]	; (8004510 <MX_TIM2_Init+0x98>)
 80044ac:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 80044b0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80044b2:	4b17      	ldr	r3, [pc, #92]	; (8004510 <MX_TIM2_Init+0x98>)
 80044b4:	2200      	movs	r2, #0
 80044b6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80044b8:	4b15      	ldr	r3, [pc, #84]	; (8004510 <MX_TIM2_Init+0x98>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80044be:	4814      	ldr	r0, [pc, #80]	; (8004510 <MX_TIM2_Init+0x98>)
 80044c0:	f7ff fa3a 	bl	8003938 <HAL_TIM_Base_Init>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80044ca:	f000 f8d3 	bl	8004674 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80044ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80044d4:	f107 0310 	add.w	r3, r7, #16
 80044d8:	4619      	mov	r1, r3
 80044da:	480d      	ldr	r0, [pc, #52]	; (8004510 <MX_TIM2_Init+0x98>)
 80044dc:	f7ff fba2 	bl	8003c24 <HAL_TIM_ConfigClockSource>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80044e6:	f000 f8c5 	bl	8004674 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80044ea:	2320      	movs	r3, #32
 80044ec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80044f2:	1d3b      	adds	r3, r7, #4
 80044f4:	4619      	mov	r1, r3
 80044f6:	4806      	ldr	r0, [pc, #24]	; (8004510 <MX_TIM2_Init+0x98>)
 80044f8:	f7ff fdc4 	bl	8004084 <HAL_TIMEx_MasterConfigSynchronization>
 80044fc:	4603      	mov	r3, r0
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d001      	beq.n	8004506 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8004502:	f000 f8b7 	bl	8004674 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8004506:	bf00      	nop
 8004508:	3720      	adds	r7, #32
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	20000200 	.word	0x20000200

08004514 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b082      	sub	sp, #8
 8004518:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800451a:	4b16      	ldr	r3, [pc, #88]	; (8004574 <MX_DMA_Init+0x60>)
 800451c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451e:	4a15      	ldr	r2, [pc, #84]	; (8004574 <MX_DMA_Init+0x60>)
 8004520:	f043 0304 	orr.w	r3, r3, #4
 8004524:	6493      	str	r3, [r2, #72]	; 0x48
 8004526:	4b13      	ldr	r3, [pc, #76]	; (8004574 <MX_DMA_Init+0x60>)
 8004528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800452a:	f003 0304 	and.w	r3, r3, #4
 800452e:	607b      	str	r3, [r7, #4]
 8004530:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004532:	4b10      	ldr	r3, [pc, #64]	; (8004574 <MX_DMA_Init+0x60>)
 8004534:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004536:	4a0f      	ldr	r2, [pc, #60]	; (8004574 <MX_DMA_Init+0x60>)
 8004538:	f043 0301 	orr.w	r3, r3, #1
 800453c:	6493      	str	r3, [r2, #72]	; 0x48
 800453e:	4b0d      	ldr	r3, [pc, #52]	; (8004574 <MX_DMA_Init+0x60>)
 8004540:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004542:	f003 0301 	and.w	r3, r3, #1
 8004546:	603b      	str	r3, [r7, #0]
 8004548:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800454a:	2200      	movs	r2, #0
 800454c:	2100      	movs	r1, #0
 800454e:	200b      	movs	r0, #11
 8004550:	f7fb ffc7 	bl	80004e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004554:	200b      	movs	r0, #11
 8004556:	f7fb ffe0 	bl	800051a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800455a:	2200      	movs	r2, #0
 800455c:	2100      	movs	r1, #0
 800455e:	200c      	movs	r0, #12
 8004560:	f7fb ffbf 	bl	80004e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004564:	200c      	movs	r0, #12
 8004566:	f7fb ffd8 	bl	800051a <HAL_NVIC_EnableIRQ>

}
 800456a:	bf00      	nop
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000

08004578 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08a      	sub	sp, #40	; 0x28
 800457c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800457e:	f107 0314 	add.w	r3, r7, #20
 8004582:	2200      	movs	r2, #0
 8004584:	601a      	str	r2, [r3, #0]
 8004586:	605a      	str	r2, [r3, #4]
 8004588:	609a      	str	r2, [r3, #8]
 800458a:	60da      	str	r2, [r3, #12]
 800458c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800458e:	4b35      	ldr	r3, [pc, #212]	; (8004664 <MX_GPIO_Init+0xec>)
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	4a34      	ldr	r2, [pc, #208]	; (8004664 <MX_GPIO_Init+0xec>)
 8004594:	f043 0310 	orr.w	r3, r3, #16
 8004598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800459a:	4b32      	ldr	r3, [pc, #200]	; (8004664 <MX_GPIO_Init+0xec>)
 800459c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800459e:	f003 0310 	and.w	r3, r3, #16
 80045a2:	613b      	str	r3, [r7, #16]
 80045a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80045a6:	4b2f      	ldr	r3, [pc, #188]	; (8004664 <MX_GPIO_Init+0xec>)
 80045a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045aa:	4a2e      	ldr	r2, [pc, #184]	; (8004664 <MX_GPIO_Init+0xec>)
 80045ac:	f043 0304 	orr.w	r3, r3, #4
 80045b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045b2:	4b2c      	ldr	r3, [pc, #176]	; (8004664 <MX_GPIO_Init+0xec>)
 80045b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045b6:	f003 0304 	and.w	r3, r3, #4
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80045be:	4b29      	ldr	r3, [pc, #164]	; (8004664 <MX_GPIO_Init+0xec>)
 80045c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c2:	4a28      	ldr	r2, [pc, #160]	; (8004664 <MX_GPIO_Init+0xec>)
 80045c4:	f043 0301 	orr.w	r3, r3, #1
 80045c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045ca:	4b26      	ldr	r3, [pc, #152]	; (8004664 <MX_GPIO_Init+0xec>)
 80045cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	60bb      	str	r3, [r7, #8]
 80045d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80045d6:	4b23      	ldr	r3, [pc, #140]	; (8004664 <MX_GPIO_Init+0xec>)
 80045d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045da:	4a22      	ldr	r2, [pc, #136]	; (8004664 <MX_GPIO_Init+0xec>)
 80045dc:	f043 0302 	orr.w	r3, r3, #2
 80045e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80045e2:	4b20      	ldr	r3, [pc, #128]	; (8004664 <MX_GPIO_Init+0xec>)
 80045e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045e6:	f003 0302 	and.w	r3, r3, #2
 80045ea:	607b      	str	r3, [r7, #4]
 80045ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
 80045ee:	2200      	movs	r2, #0
 80045f0:	2108      	movs	r1, #8
 80045f2:	481d      	ldr	r0, [pc, #116]	; (8004668 <MX_GPIO_Init+0xf0>)
 80045f4:	f7fd f82a 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);
 80045f8:	2200      	movs	r2, #0
 80045fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045fe:	481b      	ldr	r0, [pc, #108]	; (800466c <MX_GPIO_Init+0xf4>)
 8004600:	f7fd f824 	bl	800164c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : redLED_Pin */
  GPIO_InitStruct.Pin = redLED_Pin;
 8004604:	2308      	movs	r3, #8
 8004606:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004608:	2301      	movs	r3, #1
 800460a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460c:	2300      	movs	r3, #0
 800460e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004610:	2300      	movs	r3, #0
 8004612:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(redLED_GPIO_Port, &GPIO_InitStruct);
 8004614:	f107 0314 	add.w	r3, r7, #20
 8004618:	4619      	mov	r1, r3
 800461a:	4813      	ldr	r0, [pc, #76]	; (8004668 <MX_GPIO_Init+0xf0>)
 800461c:	f7fc fe84 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : pushButton_Pin */
  GPIO_InitStruct.Pin = pushButton_Pin;
 8004620:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004624:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8004626:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800462a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462c:	2300      	movs	r3, #0
 800462e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pushButton_GPIO_Port, &GPIO_InitStruct);
 8004630:	f107 0314 	add.w	r3, r7, #20
 8004634:	4619      	mov	r1, r3
 8004636:	480e      	ldr	r0, [pc, #56]	; (8004670 <MX_GPIO_Init+0xf8>)
 8004638:	f7fc fe76 	bl	8001328 <HAL_GPIO_Init>

  /*Configure GPIO pin : greenLED_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin;
 800463c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004640:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004642:	2301      	movs	r3, #1
 8004644:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004646:	2300      	movs	r3, #0
 8004648:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800464a:	2300      	movs	r3, #0
 800464c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(greenLED_GPIO_Port, &GPIO_InitStruct);
 800464e:	f107 0314 	add.w	r3, r7, #20
 8004652:	4619      	mov	r1, r3
 8004654:	4805      	ldr	r0, [pc, #20]	; (800466c <MX_GPIO_Init+0xf4>)
 8004656:	f7fc fe67 	bl	8001328 <HAL_GPIO_Init>

}
 800465a:	bf00      	nop
 800465c:	3728      	adds	r7, #40	; 0x28
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}
 8004662:	bf00      	nop
 8004664:	40021000 	.word	0x40021000
 8004668:	48001000 	.word	0x48001000
 800466c:	48000400 	.word	0x48000400
 8004670:	48000800 	.word	0x48000800

08004674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004674:	b480      	push	{r7}
 8004676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004678:	b672      	cpsid	i
}
 800467a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800467c:	e7fe      	b.n	800467c <Error_Handler+0x8>
	...

08004680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004686:	4b0f      	ldr	r3, [pc, #60]	; (80046c4 <HAL_MspInit+0x44>)
 8004688:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800468a:	4a0e      	ldr	r2, [pc, #56]	; (80046c4 <HAL_MspInit+0x44>)
 800468c:	f043 0301 	orr.w	r3, r3, #1
 8004690:	6613      	str	r3, [r2, #96]	; 0x60
 8004692:	4b0c      	ldr	r3, [pc, #48]	; (80046c4 <HAL_MspInit+0x44>)
 8004694:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	607b      	str	r3, [r7, #4]
 800469c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800469e:	4b09      	ldr	r3, [pc, #36]	; (80046c4 <HAL_MspInit+0x44>)
 80046a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046a2:	4a08      	ldr	r2, [pc, #32]	; (80046c4 <HAL_MspInit+0x44>)
 80046a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046a8:	6593      	str	r3, [r2, #88]	; 0x58
 80046aa:	4b06      	ldr	r3, [pc, #24]	; (80046c4 <HAL_MspInit+0x44>)
 80046ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046b2:	603b      	str	r3, [r7, #0]
 80046b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80046b6:	bf00      	nop
 80046b8:	370c      	adds	r7, #12
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr
 80046c2:	bf00      	nop
 80046c4:	40021000 	.word	0x40021000

080046c8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b08a      	sub	sp, #40	; 0x28
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d0:	f107 0314 	add.w	r3, r7, #20
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	609a      	str	r2, [r3, #8]
 80046dc:	60da      	str	r2, [r3, #12]
 80046de:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a2b      	ldr	r2, [pc, #172]	; (8004794 <HAL_DAC_MspInit+0xcc>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d14f      	bne.n	800478a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80046ea:	4b2b      	ldr	r3, [pc, #172]	; (8004798 <HAL_DAC_MspInit+0xd0>)
 80046ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046ee:	4a2a      	ldr	r2, [pc, #168]	; (8004798 <HAL_DAC_MspInit+0xd0>)
 80046f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80046f4:	6593      	str	r3, [r2, #88]	; 0x58
 80046f6:	4b28      	ldr	r3, [pc, #160]	; (8004798 <HAL_DAC_MspInit+0xd0>)
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80046fe:	613b      	str	r3, [r7, #16]
 8004700:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004702:	4b25      	ldr	r3, [pc, #148]	; (8004798 <HAL_DAC_MspInit+0xd0>)
 8004704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004706:	4a24      	ldr	r2, [pc, #144]	; (8004798 <HAL_DAC_MspInit+0xd0>)
 8004708:	f043 0301 	orr.w	r3, r3, #1
 800470c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800470e:	4b22      	ldr	r3, [pc, #136]	; (8004798 <HAL_DAC_MspInit+0xd0>)
 8004710:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	60fb      	str	r3, [r7, #12]
 8004718:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800471a:	2310      	movs	r3, #16
 800471c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800471e:	2303      	movs	r3, #3
 8004720:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004722:	2300      	movs	r3, #0
 8004724:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004726:	f107 0314 	add.w	r3, r7, #20
 800472a:	4619      	mov	r1, r3
 800472c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004730:	f7fc fdfa 	bl	8001328 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8004734:	4b19      	ldr	r3, [pc, #100]	; (800479c <HAL_DAC_MspInit+0xd4>)
 8004736:	4a1a      	ldr	r2, [pc, #104]	; (80047a0 <HAL_DAC_MspInit+0xd8>)
 8004738:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800473a:	4b18      	ldr	r3, [pc, #96]	; (800479c <HAL_DAC_MspInit+0xd4>)
 800473c:	2206      	movs	r2, #6
 800473e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004740:	4b16      	ldr	r3, [pc, #88]	; (800479c <HAL_DAC_MspInit+0xd4>)
 8004742:	2210      	movs	r2, #16
 8004744:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004746:	4b15      	ldr	r3, [pc, #84]	; (800479c <HAL_DAC_MspInit+0xd4>)
 8004748:	2200      	movs	r2, #0
 800474a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800474c:	4b13      	ldr	r3, [pc, #76]	; (800479c <HAL_DAC_MspInit+0xd4>)
 800474e:	2280      	movs	r2, #128	; 0x80
 8004750:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004752:	4b12      	ldr	r3, [pc, #72]	; (800479c <HAL_DAC_MspInit+0xd4>)
 8004754:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004758:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800475a:	4b10      	ldr	r3, [pc, #64]	; (800479c <HAL_DAC_MspInit+0xd4>)
 800475c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004760:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8004762:	4b0e      	ldr	r3, [pc, #56]	; (800479c <HAL_DAC_MspInit+0xd4>)
 8004764:	2220      	movs	r2, #32
 8004766:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004768:	4b0c      	ldr	r3, [pc, #48]	; (800479c <HAL_DAC_MspInit+0xd4>)
 800476a:	2200      	movs	r2, #0
 800476c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800476e:	480b      	ldr	r0, [pc, #44]	; (800479c <HAL_DAC_MspInit+0xd4>)
 8004770:	f7fc fc20 	bl	8000fb4 <HAL_DMA_Init>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d001      	beq.n	800477e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800477a:	f7ff ff7b 	bl	8004674 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a06      	ldr	r2, [pc, #24]	; (800479c <HAL_DAC_MspInit+0xd4>)
 8004782:	609a      	str	r2, [r3, #8]
 8004784:	4a05      	ldr	r2, [pc, #20]	; (800479c <HAL_DAC_MspInit+0xd4>)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800478a:	bf00      	nop
 800478c:	3728      	adds	r7, #40	; 0x28
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	40007400 	.word	0x40007400
 8004798:	40021000 	.word	0x40021000
 800479c:	20000064 	.word	0x20000064
 80047a0:	40020008 	.word	0x40020008

080047a4 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b0ae      	sub	sp, #184	; 0xb8
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80047b0:	2200      	movs	r2, #0
 80047b2:	601a      	str	r2, [r3, #0]
 80047b4:	605a      	str	r2, [r3, #4]
 80047b6:	609a      	str	r2, [r3, #8]
 80047b8:	60da      	str	r2, [r3, #12]
 80047ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80047bc:	f107 0310 	add.w	r3, r7, #16
 80047c0:	2294      	movs	r2, #148	; 0x94
 80047c2:	2100      	movs	r1, #0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 fa53 	bl	8004c70 <memset>
  if(DFSDM1_Init == 0)
 80047ca:	4b49      	ldr	r3, [pc, #292]	; (80048f0 <HAL_DFSDM_FilterMspInit+0x14c>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d153      	bne.n	800487a <HAL_DFSDM_FilterMspInit+0xd6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 80047d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80047d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80047d8:	2300      	movs	r3, #0
 80047da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80047de:	f107 0310 	add.w	r3, r7, #16
 80047e2:	4618      	mov	r0, r3
 80047e4:	f7fe fb90 	bl	8002f08 <HAL_RCCEx_PeriphCLKConfig>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 80047ee:	f7ff ff41 	bl	8004674 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 80047f2:	4b40      	ldr	r3, [pc, #256]	; (80048f4 <HAL_DFSDM_FilterMspInit+0x150>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	3301      	adds	r3, #1
 80047f8:	4a3e      	ldr	r2, [pc, #248]	; (80048f4 <HAL_DFSDM_FilterMspInit+0x150>)
 80047fa:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 80047fc:	4b3d      	ldr	r3, [pc, #244]	; (80048f4 <HAL_DFSDM_FilterMspInit+0x150>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d10b      	bne.n	800481c <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8004804:	4b3c      	ldr	r3, [pc, #240]	; (80048f8 <HAL_DFSDM_FilterMspInit+0x154>)
 8004806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004808:	4a3b      	ldr	r2, [pc, #236]	; (80048f8 <HAL_DFSDM_FilterMspInit+0x154>)
 800480a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800480e:	6613      	str	r3, [r2, #96]	; 0x60
 8004810:	4b39      	ldr	r3, [pc, #228]	; (80048f8 <HAL_DFSDM_FilterMspInit+0x154>)
 8004812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004814:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004818:	60fb      	str	r3, [r7, #12]
 800481a:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800481c:	4b36      	ldr	r3, [pc, #216]	; (80048f8 <HAL_DFSDM_FilterMspInit+0x154>)
 800481e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004820:	4a35      	ldr	r2, [pc, #212]	; (80048f8 <HAL_DFSDM_FilterMspInit+0x154>)
 8004822:	f043 0310 	orr.w	r3, r3, #16
 8004826:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004828:	4b33      	ldr	r3, [pc, #204]	; (80048f8 <HAL_DFSDM_FilterMspInit+0x154>)
 800482a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482c:	f003 0310 	and.w	r3, r3, #16
 8004830:	60bb      	str	r3, [r7, #8]
 8004832:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8004834:	f44f 7320 	mov.w	r3, #640	; 0x280
 8004838:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800483c:	2302      	movs	r3, #2
 800483e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004842:	2300      	movs	r3, #0
 8004844:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004848:	2300      	movs	r3, #0
 800484a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800484e:	2306      	movs	r3, #6
 8004850:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004854:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004858:	4619      	mov	r1, r3
 800485a:	4828      	ldr	r0, [pc, #160]	; (80048fc <HAL_DFSDM_FilterMspInit+0x158>)
 800485c:	f7fc fd64 	bl	8001328 <HAL_GPIO_Init>

    /* DFSDM1 interrupt Init */
    HAL_NVIC_SetPriority(DFSDM1_FLT0_IRQn, 0, 0);
 8004860:	2200      	movs	r2, #0
 8004862:	2100      	movs	r1, #0
 8004864:	203d      	movs	r0, #61	; 0x3d
 8004866:	f7fb fe3c 	bl	80004e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DFSDM1_FLT0_IRQn);
 800486a:	203d      	movs	r0, #61	; 0x3d
 800486c:	f7fb fe55 	bl	800051a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8004870:	4b1f      	ldr	r3, [pc, #124]	; (80048f0 <HAL_DFSDM_FilterMspInit+0x14c>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	3301      	adds	r3, #1
 8004876:	4a1e      	ldr	r2, [pc, #120]	; (80048f0 <HAL_DFSDM_FilterMspInit+0x14c>)
 8004878:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a20      	ldr	r2, [pc, #128]	; (8004900 <HAL_DFSDM_FilterMspInit+0x15c>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d130      	bne.n	80048e6 <HAL_DFSDM_FilterMspInit+0x142>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 8004884:	4b1f      	ldr	r3, [pc, #124]	; (8004904 <HAL_DFSDM_FilterMspInit+0x160>)
 8004886:	4a20      	ldr	r2, [pc, #128]	; (8004908 <HAL_DFSDM_FilterMspInit+0x164>)
 8004888:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 800488a:	4b1e      	ldr	r3, [pc, #120]	; (8004904 <HAL_DFSDM_FilterMspInit+0x160>)
 800488c:	2256      	movs	r2, #86	; 0x56
 800488e:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004890:	4b1c      	ldr	r3, [pc, #112]	; (8004904 <HAL_DFSDM_FilterMspInit+0x160>)
 8004892:	2200      	movs	r2, #0
 8004894:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8004896:	4b1b      	ldr	r3, [pc, #108]	; (8004904 <HAL_DFSDM_FilterMspInit+0x160>)
 8004898:	2200      	movs	r2, #0
 800489a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800489c:	4b19      	ldr	r3, [pc, #100]	; (8004904 <HAL_DFSDM_FilterMspInit+0x160>)
 800489e:	2280      	movs	r2, #128	; 0x80
 80048a0:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80048a2:	4b18      	ldr	r3, [pc, #96]	; (8004904 <HAL_DFSDM_FilterMspInit+0x160>)
 80048a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048a8:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80048aa:	4b16      	ldr	r3, [pc, #88]	; (8004904 <HAL_DFSDM_FilterMspInit+0x160>)
 80048ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80048b0:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 80048b2:	4b14      	ldr	r3, [pc, #80]	; (8004904 <HAL_DFSDM_FilterMspInit+0x160>)
 80048b4:	2200      	movs	r2, #0
 80048b6:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 80048b8:	4b12      	ldr	r3, [pc, #72]	; (8004904 <HAL_DFSDM_FilterMspInit+0x160>)
 80048ba:	2200      	movs	r2, #0
 80048bc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 80048be:	4811      	ldr	r0, [pc, #68]	; (8004904 <HAL_DFSDM_FilterMspInit+0x160>)
 80048c0:	f7fc fb78 	bl	8000fb4 <HAL_DMA_Init>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_DFSDM_FilterMspInit+0x12a>
    {
      Error_Handler();
 80048ca:	f7ff fed3 	bl	8004674 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	4a0c      	ldr	r2, [pc, #48]	; (8004904 <HAL_DFSDM_FilterMspInit+0x160>)
 80048d2:	62da      	str	r2, [r3, #44]	; 0x2c
 80048d4:	4a0b      	ldr	r2, [pc, #44]	; (8004904 <HAL_DFSDM_FilterMspInit+0x160>)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	4a09      	ldr	r2, [pc, #36]	; (8004904 <HAL_DFSDM_FilterMspInit+0x160>)
 80048de:	629a      	str	r2, [r3, #40]	; 0x28
 80048e0:	4a08      	ldr	r2, [pc, #32]	; (8004904 <HAL_DFSDM_FilterMspInit+0x160>)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 80048e6:	bf00      	nop
 80048e8:	37b8      	adds	r7, #184	; 0xb8
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
 80048ee:	bf00      	nop
 80048f0:	20000250 	.word	0x20000250
 80048f4:	2000024c 	.word	0x2000024c
 80048f8:	40021000 	.word	0x40021000
 80048fc:	48001000 	.word	0x48001000
 8004900:	40016100 	.word	0x40016100
 8004904:	20000150 	.word	0x20000150
 8004908:	4002001c 	.word	0x4002001c

0800490c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b0ae      	sub	sp, #184	; 0xb8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004914:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8004918:	2200      	movs	r2, #0
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	605a      	str	r2, [r3, #4]
 800491e:	609a      	str	r2, [r3, #8]
 8004920:	60da      	str	r2, [r3, #12]
 8004922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004924:	f107 0310 	add.w	r3, r7, #16
 8004928:	2294      	movs	r2, #148	; 0x94
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f000 f99f 	bl	8004c70 <memset>
  if(DFSDM1_Init == 0)
 8004932:	4b2a      	ldr	r3, [pc, #168]	; (80049dc <HAL_DFSDM_ChannelMspInit+0xd0>)
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d14b      	bne.n	80049d2 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800493a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800493e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8004940:	2300      	movs	r3, #0
 8004942:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004946:	f107 0310 	add.w	r3, r7, #16
 800494a:	4618      	mov	r0, r3
 800494c:	f7fe fadc 	bl	8002f08 <HAL_RCCEx_PeriphCLKConfig>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8004956:	f7ff fe8d 	bl	8004674 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800495a:	4b21      	ldr	r3, [pc, #132]	; (80049e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	3301      	adds	r3, #1
 8004960:	4a1f      	ldr	r2, [pc, #124]	; (80049e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8004962:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8004964:	4b1e      	ldr	r3, [pc, #120]	; (80049e0 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d10b      	bne.n	8004984 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800496c:	4b1d      	ldr	r3, [pc, #116]	; (80049e4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800496e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004970:	4a1c      	ldr	r2, [pc, #112]	; (80049e4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004972:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004976:	6613      	str	r3, [r2, #96]	; 0x60
 8004978:	4b1a      	ldr	r3, [pc, #104]	; (80049e4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800497a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800497c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004984:	4b17      	ldr	r3, [pc, #92]	; (80049e4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004986:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004988:	4a16      	ldr	r2, [pc, #88]	; (80049e4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800498a:	f043 0310 	orr.w	r3, r3, #16
 800498e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004990:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <HAL_DFSDM_ChannelMspInit+0xd8>)
 8004992:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004994:	f003 0310 	and.w	r3, r3, #16
 8004998:	60bb      	str	r3, [r7, #8]
 800499a:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800499c:	f44f 7320 	mov.w	r3, #640	; 0x280
 80049a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a4:	2302      	movs	r3, #2
 80049a6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049aa:	2300      	movs	r3, #0
 80049ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80049b0:	2300      	movs	r3, #0
 80049b2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 80049b6:	2306      	movs	r3, #6
 80049b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049bc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80049c0:	4619      	mov	r1, r3
 80049c2:	4809      	ldr	r0, [pc, #36]	; (80049e8 <HAL_DFSDM_ChannelMspInit+0xdc>)
 80049c4:	f7fc fcb0 	bl	8001328 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 80049c8:	4b04      	ldr	r3, [pc, #16]	; (80049dc <HAL_DFSDM_ChannelMspInit+0xd0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3301      	adds	r3, #1
 80049ce:	4a03      	ldr	r2, [pc, #12]	; (80049dc <HAL_DFSDM_ChannelMspInit+0xd0>)
 80049d0:	6013      	str	r3, [r2, #0]
  }

}
 80049d2:	bf00      	nop
 80049d4:	37b8      	adds	r7, #184	; 0xb8
 80049d6:	46bd      	mov	sp, r7
 80049d8:	bd80      	pop	{r7, pc}
 80049da:	bf00      	nop
 80049dc:	20000250 	.word	0x20000250
 80049e0:	2000024c 	.word	0x2000024c
 80049e4:	40021000 	.word	0x40021000
 80049e8:	48001000 	.word	0x48001000

080049ec <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b0b0      	sub	sp, #192	; 0xc0
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]
 80049fc:	605a      	str	r2, [r3, #4]
 80049fe:	609a      	str	r2, [r3, #8]
 8004a00:	60da      	str	r2, [r3, #12]
 8004a02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a04:	f107 0318 	add.w	r3, r7, #24
 8004a08:	2294      	movs	r2, #148	; 0x94
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f92f 	bl	8004c70 <memset>
  if(hospi->Instance==OCTOSPI1)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a28      	ldr	r2, [pc, #160]	; (8004ab8 <HAL_OSPI_MspInit+0xcc>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d149      	bne.n	8004ab0 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8004a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004a20:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a28:	f107 0318 	add.w	r3, r7, #24
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe fa6b 	bl	8002f08 <HAL_RCCEx_PeriphCLKConfig>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d001      	beq.n	8004a3c <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8004a38:	f7ff fe1c 	bl	8004674 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8004a3c:	4b1f      	ldr	r3, [pc, #124]	; (8004abc <HAL_OSPI_MspInit+0xd0>)
 8004a3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a40:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <HAL_OSPI_MspInit+0xd0>)
 8004a42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a48:	4b1c      	ldr	r3, [pc, #112]	; (8004abc <HAL_OSPI_MspInit+0xd0>)
 8004a4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a50:	617b      	str	r3, [r7, #20]
 8004a52:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8004a54:	4b19      	ldr	r3, [pc, #100]	; (8004abc <HAL_OSPI_MspInit+0xd0>)
 8004a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a58:	4a18      	ldr	r2, [pc, #96]	; (8004abc <HAL_OSPI_MspInit+0xd0>)
 8004a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a5e:	6513      	str	r3, [r2, #80]	; 0x50
 8004a60:	4b16      	ldr	r3, [pc, #88]	; (8004abc <HAL_OSPI_MspInit+0xd0>)
 8004a62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a68:	613b      	str	r3, [r7, #16]
 8004a6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004a6c:	4b13      	ldr	r3, [pc, #76]	; (8004abc <HAL_OSPI_MspInit+0xd0>)
 8004a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a70:	4a12      	ldr	r2, [pc, #72]	; (8004abc <HAL_OSPI_MspInit+0xd0>)
 8004a72:	f043 0310 	orr.w	r3, r3, #16
 8004a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004a78:	4b10      	ldr	r3, [pc, #64]	; (8004abc <HAL_OSPI_MspInit+0xd0>)
 8004a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a7c:	f003 0310 	and.w	r3, r3, #16
 8004a80:	60fb      	str	r3, [r7, #12]
 8004a82:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8004a84:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8004a88:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a8c:	2302      	movs	r3, #2
 8004a8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a92:	2300      	movs	r3, #0
 8004a94:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a98:	2303      	movs	r3, #3
 8004a9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8004a9e:	230a      	movs	r3, #10
 8004aa0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004aa4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004aa8:	4619      	mov	r1, r3
 8004aaa:	4805      	ldr	r0, [pc, #20]	; (8004ac0 <HAL_OSPI_MspInit+0xd4>)
 8004aac:	f7fc fc3c 	bl	8001328 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8004ab0:	bf00      	nop
 8004ab2:	37c0      	adds	r7, #192	; 0xc0
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	a0001000 	.word	0xa0001000
 8004abc:	40021000 	.word	0x40021000
 8004ac0:	48001000 	.word	0x48001000

08004ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b084      	sub	sp, #16
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ad4:	d113      	bne.n	8004afe <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	; (8004b08 <HAL_TIM_Base_MspInit+0x44>)
 8004ad8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ada:	4a0b      	ldr	r2, [pc, #44]	; (8004b08 <HAL_TIM_Base_MspInit+0x44>)
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ae2:	4b09      	ldr	r3, [pc, #36]	; (8004b08 <HAL_TIM_Base_MspInit+0x44>)
 8004ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ae6:	f003 0301 	and.w	r3, r3, #1
 8004aea:	60fb      	str	r3, [r7, #12]
 8004aec:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8004aee:	2200      	movs	r2, #0
 8004af0:	2100      	movs	r1, #0
 8004af2:	201c      	movs	r0, #28
 8004af4:	f7fb fcf5 	bl	80004e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8004af8:	201c      	movs	r0, #28
 8004afa:	f7fb fd0e 	bl	800051a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8004afe:	bf00      	nop
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	40021000 	.word	0x40021000

08004b0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b10:	e7fe      	b.n	8004b10 <NMI_Handler+0x4>

08004b12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b12:	b480      	push	{r7}
 8004b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b16:	e7fe      	b.n	8004b16 <HardFault_Handler+0x4>

08004b18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b1c:	e7fe      	b.n	8004b1c <MemManage_Handler+0x4>

08004b1e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b1e:	b480      	push	{r7}
 8004b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b22:	e7fe      	b.n	8004b22 <BusFault_Handler+0x4>

08004b24 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b24:	b480      	push	{r7}
 8004b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b28:	e7fe      	b.n	8004b28 <UsageFault_Handler+0x4>

08004b2a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004b2e:	bf00      	nop
 8004b30:	46bd      	mov	sp, r7
 8004b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b36:	4770      	bx	lr

08004b38 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b3c:	bf00      	nop
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b44:	4770      	bx	lr

08004b46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004b46:	b480      	push	{r7}
 8004b48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004b4a:	bf00      	nop
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b52:	4770      	bx	lr

08004b54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004b58:	f7fb fba4 	bl	80002a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004b5c:	bf00      	nop
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004b64:	4802      	ldr	r0, [pc, #8]	; (8004b70 <DMA1_Channel1_IRQHandler+0x10>)
 8004b66:	f7fc facd 	bl	8001104 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004b6a:	bf00      	nop
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000064 	.word	0x20000064

08004b74 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8004b78:	4802      	ldr	r0, [pc, #8]	; (8004b84 <DMA1_Channel2_IRQHandler+0x10>)
 8004b7a:	f7fc fac3 	bl	8001104 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004b7e:	bf00      	nop
 8004b80:	bd80      	pop	{r7, pc}
 8004b82:	bf00      	nop
 8004b84:	20000150 	.word	0x20000150

08004b88 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004b8c:	4802      	ldr	r0, [pc, #8]	; (8004b98 <TIM2_IRQHandler+0x10>)
 8004b8e:	f7fe ff2a 	bl	80039e6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004b92:	bf00      	nop
 8004b94:	bd80      	pop	{r7, pc}
 8004b96:	bf00      	nop
 8004b98:	20000200 	.word	0x20000200

08004b9c <DFSDM1_FLT0_IRQHandler>:

/**
  * @brief This function handles DFSDM1 filter0 global interrupt.
  */
void DFSDM1_FLT0_IRQHandler(void)
{
 8004b9c:	b580      	push	{r7, lr}
 8004b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 0 */

  /* USER CODE END DFSDM1_FLT0_IRQn 0 */
  HAL_DFSDM_IRQHandler(&hdfsdm1_filter0);
 8004ba0:	4802      	ldr	r0, [pc, #8]	; (8004bac <DFSDM1_FLT0_IRQHandler+0x10>)
 8004ba2:	f7fc f82b 	bl	8000bfc <HAL_DFSDM_IRQHandler>
  /* USER CODE BEGIN DFSDM1_FLT0_IRQn 1 */

  /* USER CODE END DFSDM1_FLT0_IRQn 1 */
}
 8004ba6:	bf00      	nop
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	200000c4 	.word	0x200000c4

08004bb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004bb4:	4b06      	ldr	r3, [pc, #24]	; (8004bd0 <SystemInit+0x20>)
 8004bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004bba:	4a05      	ldr	r2, [pc, #20]	; (8004bd0 <SystemInit+0x20>)
 8004bbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8004bc4:	bf00      	nop
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bcc:	4770      	bx	lr
 8004bce:	bf00      	nop
 8004bd0:	e000ed00 	.word	0xe000ed00

08004bd4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004bd8:	f7ff ffea 	bl	8004bb0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004bdc:	480c      	ldr	r0, [pc, #48]	; (8004c10 <LoopForever+0x6>)
  ldr r1, =_edata
 8004bde:	490d      	ldr	r1, [pc, #52]	; (8004c14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004be0:	4a0d      	ldr	r2, [pc, #52]	; (8004c18 <LoopForever+0xe>)
  movs r3, #0
 8004be2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004be4:	e002      	b.n	8004bec <LoopCopyDataInit>

08004be6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004be6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004be8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004bea:	3304      	adds	r3, #4

08004bec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004bec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004bee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004bf0:	d3f9      	bcc.n	8004be6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004bf2:	4a0a      	ldr	r2, [pc, #40]	; (8004c1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004bf4:	4c0a      	ldr	r4, [pc, #40]	; (8004c20 <LoopForever+0x16>)
  movs r3, #0
 8004bf6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004bf8:	e001      	b.n	8004bfe <LoopFillZerobss>

08004bfa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004bfa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004bfc:	3204      	adds	r2, #4

08004bfe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004bfe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004c00:	d3fb      	bcc.n	8004bfa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004c02:	f000 f811 	bl	8004c28 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004c06:	f7ff fae3 	bl	80041d0 <main>

08004c0a <LoopForever>:

LoopForever:
    b LoopForever
 8004c0a:	e7fe      	b.n	8004c0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004c0c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8004c10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004c14:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8004c18:	08004ce0 	.word	0x08004ce0
  ldr r2, =_sbss
 8004c1c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8004c20:	20000254 	.word	0x20000254

08004c24 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004c24:	e7fe      	b.n	8004c24 <ADC1_IRQHandler>
	...

08004c28 <__libc_init_array>:
 8004c28:	b570      	push	{r4, r5, r6, lr}
 8004c2a:	4d0d      	ldr	r5, [pc, #52]	; (8004c60 <__libc_init_array+0x38>)
 8004c2c:	4c0d      	ldr	r4, [pc, #52]	; (8004c64 <__libc_init_array+0x3c>)
 8004c2e:	1b64      	subs	r4, r4, r5
 8004c30:	10a4      	asrs	r4, r4, #2
 8004c32:	2600      	movs	r6, #0
 8004c34:	42a6      	cmp	r6, r4
 8004c36:	d109      	bne.n	8004c4c <__libc_init_array+0x24>
 8004c38:	4d0b      	ldr	r5, [pc, #44]	; (8004c68 <__libc_init_array+0x40>)
 8004c3a:	4c0c      	ldr	r4, [pc, #48]	; (8004c6c <__libc_init_array+0x44>)
 8004c3c:	f000 f820 	bl	8004c80 <_init>
 8004c40:	1b64      	subs	r4, r4, r5
 8004c42:	10a4      	asrs	r4, r4, #2
 8004c44:	2600      	movs	r6, #0
 8004c46:	42a6      	cmp	r6, r4
 8004c48:	d105      	bne.n	8004c56 <__libc_init_array+0x2e>
 8004c4a:	bd70      	pop	{r4, r5, r6, pc}
 8004c4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c50:	4798      	blx	r3
 8004c52:	3601      	adds	r6, #1
 8004c54:	e7ee      	b.n	8004c34 <__libc_init_array+0xc>
 8004c56:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c5a:	4798      	blx	r3
 8004c5c:	3601      	adds	r6, #1
 8004c5e:	e7f2      	b.n	8004c46 <__libc_init_array+0x1e>
 8004c60:	08004cd8 	.word	0x08004cd8
 8004c64:	08004cd8 	.word	0x08004cd8
 8004c68:	08004cd8 	.word	0x08004cd8
 8004c6c:	08004cdc 	.word	0x08004cdc

08004c70 <memset>:
 8004c70:	4402      	add	r2, r0
 8004c72:	4603      	mov	r3, r0
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d100      	bne.n	8004c7a <memset+0xa>
 8004c78:	4770      	bx	lr
 8004c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c7e:	e7f9      	b.n	8004c74 <memset+0x4>

08004c80 <_init>:
 8004c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c82:	bf00      	nop
 8004c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c86:	bc08      	pop	{r3}
 8004c88:	469e      	mov	lr, r3
 8004c8a:	4770      	bx	lr

08004c8c <_fini>:
 8004c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8e:	bf00      	nop
 8004c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c92:	bc08      	pop	{r3}
 8004c94:	469e      	mov	lr, r3
 8004c96:	4770      	bx	lr
