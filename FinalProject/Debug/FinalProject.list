
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c374  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  0800c534  0800c534  0001c534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c630  0800c630  000202d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c630  0800c630  0001c630  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c638  0800c638  000202d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c638  0800c638  0001c638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c63c  0800c63c  0001c63c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002d4  20000000  0800c640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00053438  200002d4  0800c914  000202d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2005370c  0800c914  0002370c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027e29  00000000  00000000  00020304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004af9  00000000  00000000  0004812d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002078  00000000  00000000  0004cc28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001e90  00000000  00000000  0004eca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002ff98  00000000  00000000  00050b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00024f91  00000000  00000000  00080ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001236e8  00000000  00000000  000a5a59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c5  00000000  00000000  001c9141  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000089a8  00000000  00000000  001c9208  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000363  00000000  00000000  001d1bb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200002d4 	.word	0x200002d4
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800c51c 	.word	0x0800c51c

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200002d8 	.word	0x200002d8
 80001fc:	0800c51c 	.word	0x0800c51c

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b974 	b.w	8000500 <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9d08      	ldr	r5, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	468e      	mov	lr, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14d      	bne.n	80002da <__udivmoddi4+0xaa>
 800023e:	428a      	cmp	r2, r1
 8000240:	4694      	mov	ip, r2
 8000242:	d969      	bls.n	8000318 <__udivmoddi4+0xe8>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b152      	cbz	r2, 8000260 <__udivmoddi4+0x30>
 800024a:	fa01 f302 	lsl.w	r3, r1, r2
 800024e:	f1c2 0120 	rsb	r1, r2, #32
 8000252:	fa20 f101 	lsr.w	r1, r0, r1
 8000256:	fa0c fc02 	lsl.w	ip, ip, r2
 800025a:	ea41 0e03 	orr.w	lr, r1, r3
 800025e:	4094      	lsls	r4, r2
 8000260:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000264:	0c21      	lsrs	r1, r4, #16
 8000266:	fbbe f6f8 	udiv	r6, lr, r8
 800026a:	fa1f f78c 	uxth.w	r7, ip
 800026e:	fb08 e316 	mls	r3, r8, r6, lr
 8000272:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000276:	fb06 f107 	mul.w	r1, r6, r7
 800027a:	4299      	cmp	r1, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x64>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 811f 	bcs.w	80004c8 <__udivmoddi4+0x298>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 811c 	bls.w	80004c8 <__udivmoddi4+0x298>
 8000290:	3e02      	subs	r6, #2
 8000292:	4463      	add	r3, ip
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 f707 	mul.w	r7, r0, r7
 80002a8:	42a7      	cmp	r7, r4
 80002aa:	d90a      	bls.n	80002c2 <__udivmoddi4+0x92>
 80002ac:	eb1c 0404 	adds.w	r4, ip, r4
 80002b0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b4:	f080 810a 	bcs.w	80004cc <__udivmoddi4+0x29c>
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	f240 8107 	bls.w	80004cc <__udivmoddi4+0x29c>
 80002be:	4464      	add	r4, ip
 80002c0:	3802      	subs	r0, #2
 80002c2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c6:	1be4      	subs	r4, r4, r7
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa4>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	428b      	cmp	r3, r1
 80002dc:	d909      	bls.n	80002f2 <__udivmoddi4+0xc2>
 80002de:	2d00      	cmp	r5, #0
 80002e0:	f000 80ef 	beq.w	80004c2 <__udivmoddi4+0x292>
 80002e4:	2600      	movs	r6, #0
 80002e6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ea:	4630      	mov	r0, r6
 80002ec:	4631      	mov	r1, r6
 80002ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f2:	fab3 f683 	clz	r6, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d14a      	bne.n	8000390 <__udivmoddi4+0x160>
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d302      	bcc.n	8000304 <__udivmoddi4+0xd4>
 80002fe:	4282      	cmp	r2, r0
 8000300:	f200 80f9 	bhi.w	80004f6 <__udivmoddi4+0x2c6>
 8000304:	1a84      	subs	r4, r0, r2
 8000306:	eb61 0303 	sbc.w	r3, r1, r3
 800030a:	2001      	movs	r0, #1
 800030c:	469e      	mov	lr, r3
 800030e:	2d00      	cmp	r5, #0
 8000310:	d0e0      	beq.n	80002d4 <__udivmoddi4+0xa4>
 8000312:	e9c5 4e00 	strd	r4, lr, [r5]
 8000316:	e7dd      	b.n	80002d4 <__udivmoddi4+0xa4>
 8000318:	b902      	cbnz	r2, 800031c <__udivmoddi4+0xec>
 800031a:	deff      	udf	#255	; 0xff
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	2a00      	cmp	r2, #0
 8000322:	f040 8092 	bne.w	800044a <__udivmoddi4+0x21a>
 8000326:	eba1 010c 	sub.w	r1, r1, ip
 800032a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032e:	fa1f fe8c 	uxth.w	lr, ip
 8000332:	2601      	movs	r6, #1
 8000334:	0c20      	lsrs	r0, r4, #16
 8000336:	fbb1 f3f7 	udiv	r3, r1, r7
 800033a:	fb07 1113 	mls	r1, r7, r3, r1
 800033e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000342:	fb0e f003 	mul.w	r0, lr, r3
 8000346:	4288      	cmp	r0, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0x12c>
 800034a:	eb1c 0101 	adds.w	r1, ip, r1
 800034e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0x12a>
 8000354:	4288      	cmp	r0, r1
 8000356:	f200 80cb 	bhi.w	80004f0 <__udivmoddi4+0x2c0>
 800035a:	4643      	mov	r3, r8
 800035c:	1a09      	subs	r1, r1, r0
 800035e:	b2a4      	uxth	r4, r4
 8000360:	fbb1 f0f7 	udiv	r0, r1, r7
 8000364:	fb07 1110 	mls	r1, r7, r0, r1
 8000368:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800036c:	fb0e fe00 	mul.w	lr, lr, r0
 8000370:	45a6      	cmp	lr, r4
 8000372:	d908      	bls.n	8000386 <__udivmoddi4+0x156>
 8000374:	eb1c 0404 	adds.w	r4, ip, r4
 8000378:	f100 31ff 	add.w	r1, r0, #4294967295
 800037c:	d202      	bcs.n	8000384 <__udivmoddi4+0x154>
 800037e:	45a6      	cmp	lr, r4
 8000380:	f200 80bb 	bhi.w	80004fa <__udivmoddi4+0x2ca>
 8000384:	4608      	mov	r0, r1
 8000386:	eba4 040e 	sub.w	r4, r4, lr
 800038a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038e:	e79c      	b.n	80002ca <__udivmoddi4+0x9a>
 8000390:	f1c6 0720 	rsb	r7, r6, #32
 8000394:	40b3      	lsls	r3, r6
 8000396:	fa22 fc07 	lsr.w	ip, r2, r7
 800039a:	ea4c 0c03 	orr.w	ip, ip, r3
 800039e:	fa20 f407 	lsr.w	r4, r0, r7
 80003a2:	fa01 f306 	lsl.w	r3, r1, r6
 80003a6:	431c      	orrs	r4, r3
 80003a8:	40f9      	lsrs	r1, r7
 80003aa:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003ae:	fa00 f306 	lsl.w	r3, r0, r6
 80003b2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b6:	0c20      	lsrs	r0, r4, #16
 80003b8:	fa1f fe8c 	uxth.w	lr, ip
 80003bc:	fb09 1118 	mls	r1, r9, r8, r1
 80003c0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c4:	fb08 f00e 	mul.w	r0, r8, lr
 80003c8:	4288      	cmp	r0, r1
 80003ca:	fa02 f206 	lsl.w	r2, r2, r6
 80003ce:	d90b      	bls.n	80003e8 <__udivmoddi4+0x1b8>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003d8:	f080 8088 	bcs.w	80004ec <__udivmoddi4+0x2bc>
 80003dc:	4288      	cmp	r0, r1
 80003de:	f240 8085 	bls.w	80004ec <__udivmoddi4+0x2bc>
 80003e2:	f1a8 0802 	sub.w	r8, r8, #2
 80003e6:	4461      	add	r1, ip
 80003e8:	1a09      	subs	r1, r1, r0
 80003ea:	b2a4      	uxth	r4, r4
 80003ec:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f0:	fb09 1110 	mls	r1, r9, r0, r1
 80003f4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003fc:	458e      	cmp	lr, r1
 80003fe:	d908      	bls.n	8000412 <__udivmoddi4+0x1e2>
 8000400:	eb1c 0101 	adds.w	r1, ip, r1
 8000404:	f100 34ff 	add.w	r4, r0, #4294967295
 8000408:	d26c      	bcs.n	80004e4 <__udivmoddi4+0x2b4>
 800040a:	458e      	cmp	lr, r1
 800040c:	d96a      	bls.n	80004e4 <__udivmoddi4+0x2b4>
 800040e:	3802      	subs	r0, #2
 8000410:	4461      	add	r1, ip
 8000412:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000416:	fba0 9402 	umull	r9, r4, r0, r2
 800041a:	eba1 010e 	sub.w	r1, r1, lr
 800041e:	42a1      	cmp	r1, r4
 8000420:	46c8      	mov	r8, r9
 8000422:	46a6      	mov	lr, r4
 8000424:	d356      	bcc.n	80004d4 <__udivmoddi4+0x2a4>
 8000426:	d053      	beq.n	80004d0 <__udivmoddi4+0x2a0>
 8000428:	b15d      	cbz	r5, 8000442 <__udivmoddi4+0x212>
 800042a:	ebb3 0208 	subs.w	r2, r3, r8
 800042e:	eb61 010e 	sbc.w	r1, r1, lr
 8000432:	fa01 f707 	lsl.w	r7, r1, r7
 8000436:	fa22 f306 	lsr.w	r3, r2, r6
 800043a:	40f1      	lsrs	r1, r6
 800043c:	431f      	orrs	r7, r3
 800043e:	e9c5 7100 	strd	r7, r1, [r5]
 8000442:	2600      	movs	r6, #0
 8000444:	4631      	mov	r1, r6
 8000446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044a:	f1c2 0320 	rsb	r3, r2, #32
 800044e:	40d8      	lsrs	r0, r3
 8000450:	fa0c fc02 	lsl.w	ip, ip, r2
 8000454:	fa21 f303 	lsr.w	r3, r1, r3
 8000458:	4091      	lsls	r1, r2
 800045a:	4301      	orrs	r1, r0
 800045c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000460:	fa1f fe8c 	uxth.w	lr, ip
 8000464:	fbb3 f0f7 	udiv	r0, r3, r7
 8000468:	fb07 3610 	mls	r6, r7, r0, r3
 800046c:	0c0b      	lsrs	r3, r1, #16
 800046e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000472:	fb00 f60e 	mul.w	r6, r0, lr
 8000476:	429e      	cmp	r6, r3
 8000478:	fa04 f402 	lsl.w	r4, r4, r2
 800047c:	d908      	bls.n	8000490 <__udivmoddi4+0x260>
 800047e:	eb1c 0303 	adds.w	r3, ip, r3
 8000482:	f100 38ff 	add.w	r8, r0, #4294967295
 8000486:	d22f      	bcs.n	80004e8 <__udivmoddi4+0x2b8>
 8000488:	429e      	cmp	r6, r3
 800048a:	d92d      	bls.n	80004e8 <__udivmoddi4+0x2b8>
 800048c:	3802      	subs	r0, #2
 800048e:	4463      	add	r3, ip
 8000490:	1b9b      	subs	r3, r3, r6
 8000492:	b289      	uxth	r1, r1
 8000494:	fbb3 f6f7 	udiv	r6, r3, r7
 8000498:	fb07 3316 	mls	r3, r7, r6, r3
 800049c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a0:	fb06 f30e 	mul.w	r3, r6, lr
 80004a4:	428b      	cmp	r3, r1
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x28a>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b0:	d216      	bcs.n	80004e0 <__udivmoddi4+0x2b0>
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d914      	bls.n	80004e0 <__udivmoddi4+0x2b0>
 80004b6:	3e02      	subs	r6, #2
 80004b8:	4461      	add	r1, ip
 80004ba:	1ac9      	subs	r1, r1, r3
 80004bc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c0:	e738      	b.n	8000334 <__udivmoddi4+0x104>
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e705      	b.n	80002d4 <__udivmoddi4+0xa4>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e3      	b.n	8000294 <__udivmoddi4+0x64>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6f8      	b.n	80002c2 <__udivmoddi4+0x92>
 80004d0:	454b      	cmp	r3, r9
 80004d2:	d2a9      	bcs.n	8000428 <__udivmoddi4+0x1f8>
 80004d4:	ebb9 0802 	subs.w	r8, r9, r2
 80004d8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004dc:	3801      	subs	r0, #1
 80004de:	e7a3      	b.n	8000428 <__udivmoddi4+0x1f8>
 80004e0:	4646      	mov	r6, r8
 80004e2:	e7ea      	b.n	80004ba <__udivmoddi4+0x28a>
 80004e4:	4620      	mov	r0, r4
 80004e6:	e794      	b.n	8000412 <__udivmoddi4+0x1e2>
 80004e8:	4640      	mov	r0, r8
 80004ea:	e7d1      	b.n	8000490 <__udivmoddi4+0x260>
 80004ec:	46d0      	mov	r8, sl
 80004ee:	e77b      	b.n	80003e8 <__udivmoddi4+0x1b8>
 80004f0:	3b02      	subs	r3, #2
 80004f2:	4461      	add	r1, ip
 80004f4:	e732      	b.n	800035c <__udivmoddi4+0x12c>
 80004f6:	4630      	mov	r0, r6
 80004f8:	e709      	b.n	800030e <__udivmoddi4+0xde>
 80004fa:	4464      	add	r4, ip
 80004fc:	3802      	subs	r0, #2
 80004fe:	e742      	b.n	8000386 <__udivmoddi4+0x156>

08000500 <__aeabi_idiv0>:
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop

08000504 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800050a:	2300      	movs	r3, #0
 800050c:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050e:	2003      	movs	r0, #3
 8000510:	f000 f980 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000514:	200f      	movs	r0, #15
 8000516:	f000 f80d 	bl	8000534 <HAL_InitTick>
 800051a:	4603      	mov	r3, r0
 800051c:	2b00      	cmp	r3, #0
 800051e:	d002      	beq.n	8000526 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000520:	2301      	movs	r3, #1
 8000522:	71fb      	strb	r3, [r7, #7]
 8000524:	e001      	b.n	800052a <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000526:	f00b fb67 	bl	800bbf8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800052a:	79fb      	ldrb	r3, [r7, #7]
}
 800052c:	4618      	mov	r0, r3
 800052e:	3708      	adds	r7, #8
 8000530:	46bd      	mov	sp, r7
 8000532:	bd80      	pop	{r7, pc}

08000534 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800053c:	2300      	movs	r3, #0
 800053e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000540:	4b17      	ldr	r3, [pc, #92]	; (80005a0 <HAL_InitTick+0x6c>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d023      	beq.n	8000590 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000548:	4b16      	ldr	r3, [pc, #88]	; (80005a4 <HAL_InitTick+0x70>)
 800054a:	681a      	ldr	r2, [r3, #0]
 800054c:	4b14      	ldr	r3, [pc, #80]	; (80005a0 <HAL_InitTick+0x6c>)
 800054e:	781b      	ldrb	r3, [r3, #0]
 8000550:	4619      	mov	r1, r3
 8000552:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000556:	fbb3 f3f1 	udiv	r3, r3, r1
 800055a:	fbb2 f3f3 	udiv	r3, r2, r3
 800055e:	4618      	mov	r0, r3
 8000560:	f000 f98d 	bl	800087e <HAL_SYSTICK_Config>
 8000564:	4603      	mov	r3, r0
 8000566:	2b00      	cmp	r3, #0
 8000568:	d10f      	bne.n	800058a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	2b0f      	cmp	r3, #15
 800056e:	d809      	bhi.n	8000584 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000570:	2200      	movs	r2, #0
 8000572:	6879      	ldr	r1, [r7, #4]
 8000574:	f04f 30ff 	mov.w	r0, #4294967295
 8000578:	f000 f957 	bl	800082a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800057c:	4a0a      	ldr	r2, [pc, #40]	; (80005a8 <HAL_InitTick+0x74>)
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	6013      	str	r3, [r2, #0]
 8000582:	e007      	b.n	8000594 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000584:	2301      	movs	r3, #1
 8000586:	73fb      	strb	r3, [r7, #15]
 8000588:	e004      	b.n	8000594 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800058a:	2301      	movs	r3, #1
 800058c:	73fb      	strb	r3, [r7, #15]
 800058e:	e001      	b.n	8000594 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000590:	2301      	movs	r3, #1
 8000592:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000594:	7bfb      	ldrb	r3, [r7, #15]
}
 8000596:	4618      	mov	r0, r3
 8000598:	3710      	adds	r7, #16
 800059a:	46bd      	mov	sp, r7
 800059c:	bd80      	pop	{r7, pc}
 800059e:	bf00      	nop
 80005a0:	20000004 	.word	0x20000004
 80005a4:	200002d0 	.word	0x200002d0
 80005a8:	20000000 	.word	0x20000000

080005ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x20>)
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	461a      	mov	r2, r3
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <HAL_IncTick+0x24>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4413      	add	r3, r2
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <HAL_IncTick+0x24>)
 80005be:	6013      	str	r3, [r2, #0]
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000004 	.word	0x20000004
 80005d0:	200002f0 	.word	0x200002f0

080005d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return uwTick;
 80005d8:	4b03      	ldr	r3, [pc, #12]	; (80005e8 <HAL_GetTick+0x14>)
 80005da:	681b      	ldr	r3, [r3, #0]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	46bd      	mov	sp, r7
 80005e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop
 80005e8:	200002f0 	.word	0x200002f0

080005ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f4:	f7ff ffee 	bl	80005d4 <HAL_GetTick>
 80005f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000604:	d005      	beq.n	8000612 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000606:	4b0a      	ldr	r3, [pc, #40]	; (8000630 <HAL_Delay+0x44>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	461a      	mov	r2, r3
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	4413      	add	r3, r2
 8000610:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000612:	bf00      	nop
 8000614:	f7ff ffde 	bl	80005d4 <HAL_GetTick>
 8000618:	4602      	mov	r2, r0
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	1ad3      	subs	r3, r2, r3
 800061e:	68fa      	ldr	r2, [r7, #12]
 8000620:	429a      	cmp	r2, r3
 8000622:	d8f7      	bhi.n	8000614 <HAL_Delay+0x28>
  {
  }
}
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	3710      	adds	r7, #16
 800062a:	46bd      	mov	sp, r7
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	20000004 	.word	0x20000004

08000634 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <HAL_SuspendTick+0x1c>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <HAL_SuspendTick+0x1c>)
 800063e:	f023 0302 	bic.w	r3, r3, #2
 8000642:	6013      	str	r3, [r2, #0]
}
 8000644:	bf00      	nop
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	e000e010 	.word	0xe000e010

08000654 <HAL_ResumeTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SysTick->CTRL  |= SysTick_CTRL_TICKINT_Msk;
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <HAL_ResumeTick+0x1c>)
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <HAL_ResumeTick+0x1c>)
 800065e:	f043 0302 	orr.w	r3, r3, #2
 8000662:	6013      	str	r3, [r2, #0]
}
 8000664:	bf00      	nop
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	e000e010 	.word	0xe000e010

08000674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800069c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a6:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60d3      	str	r3, [r2, #12]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <__NVIC_GetPriorityGrouping+0x18>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	f003 0307 	and.w	r3, r3, #7
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db0b      	blt.n	8000702 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	f003 021f 	and.w	r2, r3, #31
 80006f0:	4907      	ldr	r1, [pc, #28]	; (8000710 <__NVIC_EnableIRQ+0x38>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	2001      	movs	r0, #1
 80006fa:	fa00 f202 	lsl.w	r2, r0, r2
 80006fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e100 	.word	0xe000e100

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <__NVIC_SetPriority+0x4c>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4908      	ldr	r1, [pc, #32]	; (8000764 <__NVIC_SetPriority+0x50>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	3b04      	subs	r3, #4
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	2b04      	cmp	r3, #4
 8000784:	bf28      	it	cs
 8000786:	2304      	movcs	r3, #4
 8000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3304      	adds	r3, #4
 800078e:	2b06      	cmp	r3, #6
 8000790:	d902      	bls.n	8000798 <NVIC_EncodePriority+0x30>
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3b03      	subs	r3, #3
 8000796:	e000      	b.n	800079a <NVIC_EncodePriority+0x32>
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	f04f 32ff 	mov.w	r2, #4294967295
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	401a      	ands	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b0:	f04f 31ff 	mov.w	r1, #4294967295
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43d9      	mvns	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	4313      	orrs	r3, r2
         );
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3724      	adds	r7, #36	; 0x24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e0:	d301      	bcc.n	80007e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00f      	b.n	8000806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <SysTick_Config+0x40>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ee:	210f      	movs	r1, #15
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295
 80007f4:	f7ff ff8e 	bl	8000714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <SysTick_Config+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SysTick_Config+0x40>)
 8000800:	2207      	movs	r2, #7
 8000802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	e000e010 	.word	0xe000e010

08000814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff29 	bl	8000674 <__NVIC_SetPriorityGrouping>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800083c:	f7ff ff3e 	bl	80006bc <__NVIC_GetPriorityGrouping>
 8000840:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	6978      	ldr	r0, [r7, #20]
 8000848:	f7ff ff8e 	bl	8000768 <NVIC_EncodePriority>
 800084c:	4602      	mov	r2, r0
 800084e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff5d 	bl	8000714 <__NVIC_SetPriority>
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff31 	bl	80006d8 <__NVIC_EnableIRQ>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ffa2 	bl	80007d0 <SysTick_Config>
 800088c:	4603      	mov	r3, r0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}

08000896 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
 800089c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d101      	bne.n	80008a8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e014      	b.n	80008d2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	791b      	ldrb	r3, [r3, #4]
 80008ac:	b2db      	uxtb	r3, r3
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d105      	bne.n	80008be <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2200      	movs	r2, #0
 80008b6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f00b f9c5 	bl	800bc48 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2202      	movs	r2, #2
 80008c2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2200      	movs	r2, #0
 80008c8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	2201      	movs	r2, #1
 80008ce:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
	...

080008dc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
 80008e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80008ea:	2300      	movs	r3, #0
 80008ec:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	795b      	ldrb	r3, [r3, #5]
 80008f2:	2b01      	cmp	r3, #1
 80008f4:	d101      	bne.n	80008fa <HAL_DAC_Start_DMA+0x1e>
 80008f6:	2302      	movs	r3, #2
 80008f8:	e0ab      	b.n	8000a52 <HAL_DAC_Start_DMA+0x176>
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	2201      	movs	r2, #1
 80008fe:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000900:	68fb      	ldr	r3, [r7, #12]
 8000902:	2202      	movs	r2, #2
 8000904:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	2b00      	cmp	r3, #0
 800090a:	d12f      	bne.n	800096c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	689b      	ldr	r3, [r3, #8]
 8000910:	4a52      	ldr	r2, [pc, #328]	; (8000a5c <HAL_DAC_Start_DMA+0x180>)
 8000912:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	4a51      	ldr	r2, [pc, #324]	; (8000a60 <HAL_DAC_Start_DMA+0x184>)
 800091a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	689b      	ldr	r3, [r3, #8]
 8000920:	4a50      	ldr	r2, [pc, #320]	; (8000a64 <HAL_DAC_Start_DMA+0x188>)
 8000922:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	681a      	ldr	r2, [r3, #0]
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000932:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8000934:	6a3b      	ldr	r3, [r7, #32]
 8000936:	2b08      	cmp	r3, #8
 8000938:	d013      	beq.n	8000962 <HAL_DAC_Start_DMA+0x86>
 800093a:	6a3b      	ldr	r3, [r7, #32]
 800093c:	2b08      	cmp	r3, #8
 800093e:	d845      	bhi.n	80009cc <HAL_DAC_Start_DMA+0xf0>
 8000940:	6a3b      	ldr	r3, [r7, #32]
 8000942:	2b00      	cmp	r3, #0
 8000944:	d003      	beq.n	800094e <HAL_DAC_Start_DMA+0x72>
 8000946:	6a3b      	ldr	r3, [r7, #32]
 8000948:	2b04      	cmp	r3, #4
 800094a:	d005      	beq.n	8000958 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800094c:	e03e      	b.n	80009cc <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	3308      	adds	r3, #8
 8000954:	613b      	str	r3, [r7, #16]
        break;
 8000956:	e03c      	b.n	80009d2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	330c      	adds	r3, #12
 800095e:	613b      	str	r3, [r7, #16]
        break;
 8000960:	e037      	b.n	80009d2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3310      	adds	r3, #16
 8000968:	613b      	str	r3, [r7, #16]
        break;
 800096a:	e032      	b.n	80009d2 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	68db      	ldr	r3, [r3, #12]
 8000970:	4a3d      	ldr	r2, [pc, #244]	; (8000a68 <HAL_DAC_Start_DMA+0x18c>)
 8000972:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	68db      	ldr	r3, [r3, #12]
 8000978:	4a3c      	ldr	r2, [pc, #240]	; (8000a6c <HAL_DAC_Start_DMA+0x190>)
 800097a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	68db      	ldr	r3, [r3, #12]
 8000980:	4a3b      	ldr	r2, [pc, #236]	; (8000a70 <HAL_DAC_Start_DMA+0x194>)
 8000982:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	681b      	ldr	r3, [r3, #0]
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000992:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000994:	6a3b      	ldr	r3, [r7, #32]
 8000996:	2b08      	cmp	r3, #8
 8000998:	d013      	beq.n	80009c2 <HAL_DAC_Start_DMA+0xe6>
 800099a:	6a3b      	ldr	r3, [r7, #32]
 800099c:	2b08      	cmp	r3, #8
 800099e:	d817      	bhi.n	80009d0 <HAL_DAC_Start_DMA+0xf4>
 80009a0:	6a3b      	ldr	r3, [r7, #32]
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d003      	beq.n	80009ae <HAL_DAC_Start_DMA+0xd2>
 80009a6:	6a3b      	ldr	r3, [r7, #32]
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d005      	beq.n	80009b8 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80009ac:	e010      	b.n	80009d0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	681b      	ldr	r3, [r3, #0]
 80009b2:	3314      	adds	r3, #20
 80009b4:	613b      	str	r3, [r7, #16]
        break;
 80009b6:	e00c      	b.n	80009d2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3318      	adds	r3, #24
 80009be:	613b      	str	r3, [r7, #16]
        break;
 80009c0:	e007      	b.n	80009d2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	331c      	adds	r3, #28
 80009c8:	613b      	str	r3, [r7, #16]
        break;
 80009ca:	e002      	b.n	80009d2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80009cc:	bf00      	nop
 80009ce:	e000      	b.n	80009d2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80009d0:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80009d2:	68bb      	ldr	r3, [r7, #8]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d111      	bne.n	80009fc <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009e6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	6898      	ldr	r0, [r3, #8]
 80009ec:	6879      	ldr	r1, [r7, #4]
 80009ee:	683b      	ldr	r3, [r7, #0]
 80009f0:	693a      	ldr	r2, [r7, #16]
 80009f2:	f000 febf 	bl	8001774 <HAL_DMA_Start_IT>
 80009f6:	4603      	mov	r3, r0
 80009f8:	75fb      	strb	r3, [r7, #23]
 80009fa:	e010      	b.n	8000a1e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	681a      	ldr	r2, [r3, #0]
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a0a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	68d8      	ldr	r0, [r3, #12]
 8000a10:	6879      	ldr	r1, [r7, #4]
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	693a      	ldr	r2, [r7, #16]
 8000a16:	f000 fead 	bl	8001774 <HAL_DMA_Start_IT>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	2200      	movs	r2, #0
 8000a22:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000a24:	7dfb      	ldrb	r3, [r7, #23]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d10c      	bne.n	8000a44 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	6819      	ldr	r1, [r3, #0]
 8000a30:	68bb      	ldr	r3, [r7, #8]
 8000a32:	f003 0310 	and.w	r3, r3, #16
 8000a36:	2201      	movs	r2, #1
 8000a38:	409a      	lsls	r2, r3
 8000a3a:	68fb      	ldr	r3, [r7, #12]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	430a      	orrs	r2, r1
 8000a40:	601a      	str	r2, [r3, #0]
 8000a42:	e005      	b.n	8000a50 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	691b      	ldr	r3, [r3, #16]
 8000a48:	f043 0204 	orr.w	r2, r3, #4
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000a50:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	08000da9 	.word	0x08000da9
 8000a60:	08000dcb 	.word	0x08000dcb
 8000a64:	08000de7 	.word	0x08000de7
 8000a68:	08000e51 	.word	0x08000e51
 8000a6c:	08000e73 	.word	0x08000e73
 8000a70:	08000e8f 	.word	0x08000e8f

08000a74 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	6819      	ldr	r1, [r3, #0]
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	f003 0310 	and.w	r3, r3, #16
 8000a8a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	43da      	mvns	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	400a      	ands	r2, r1
 8000a9a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	6819      	ldr	r1, [r3, #0]
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	f003 0310 	and.w	r3, r3, #16
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d10d      	bne.n	8000ada <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fed1 	bl	800186a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	e00c      	b.n	8000af4 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	68db      	ldr	r3, [r3, #12]
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f000 fec3 	bl	800186a <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000af2:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8000af4:	2300      	movs	r3, #0
}
 8000af6:	4618      	mov	r0, r3
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}

08000afe <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000afe:	b480      	push	{r7}
 8000b00:	b083      	sub	sp, #12
 8000b02:	af00      	add	r7, sp, #0
 8000b04:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000b1a:	bf00      	nop
 8000b1c:	370c      	adds	r7, #12
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b088      	sub	sp, #32
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	795b      	ldrb	r3, [r3, #5]
 8000b3c:	2b01      	cmp	r3, #1
 8000b3e:	d101      	bne.n	8000b44 <HAL_DAC_ConfigChannel+0x1c>
 8000b40:	2302      	movs	r3, #2
 8000b42:	e12a      	b.n	8000d9a <HAL_DAC_ConfigChannel+0x272>
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2201      	movs	r2, #1
 8000b48:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b4a:	68fb      	ldr	r3, [r7, #12]
 8000b4c:	2202      	movs	r2, #2
 8000b4e:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000b50:	68bb      	ldr	r3, [r7, #8]
 8000b52:	685b      	ldr	r3, [r3, #4]
 8000b54:	2b04      	cmp	r3, #4
 8000b56:	d174      	bne.n	8000c42 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000b58:	f7ff fd3c 	bl	80005d4 <HAL_GetTick>
 8000b5c:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d134      	bne.n	8000bce <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b64:	e011      	b.n	8000b8a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b66:	f7ff fd35 	bl	80005d4 <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d90a      	bls.n	8000b8a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	f043 0208 	orr.w	r2, r3, #8
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2203      	movs	r2, #3
 8000b84:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b86:	2303      	movs	r3, #3
 8000b88:	e107      	b.n	8000d9a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d1e6      	bne.n	8000b66 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000b98:	2001      	movs	r0, #1
 8000b9a:	f7ff fd27 	bl	80005ec <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	68ba      	ldr	r2, [r7, #8]
 8000ba4:	69d2      	ldr	r2, [r2, #28]
 8000ba6:	641a      	str	r2, [r3, #64]	; 0x40
 8000ba8:	e01e      	b.n	8000be8 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000baa:	f7ff fd13 	bl	80005d4 <HAL_GetTick>
 8000bae:	4602      	mov	r2, r0
 8000bb0:	69bb      	ldr	r3, [r7, #24]
 8000bb2:	1ad3      	subs	r3, r2, r3
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d90a      	bls.n	8000bce <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	691b      	ldr	r3, [r3, #16]
 8000bbc:	f043 0208 	orr.w	r2, r3, #8
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	2203      	movs	r2, #3
 8000bc8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000bca:	2303      	movs	r3, #3
 8000bcc:	e0e5      	b.n	8000d9a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	dbe8      	blt.n	8000baa <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000bd8:	2001      	movs	r0, #1
 8000bda:	f7ff fd07 	bl	80005ec <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	69d2      	ldr	r2, [r2, #28]
 8000be6:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000bfc:	43db      	mvns	r3, r3
 8000bfe:	ea02 0103 	and.w	r1, r2, r3
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	6a1a      	ldr	r2, [r3, #32]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f003 0310 	and.w	r3, r3, #16
 8000c0c:	409a      	lsls	r2, r3
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	430a      	orrs	r2, r1
 8000c14:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f003 0310 	and.w	r3, r3, #16
 8000c22:	21ff      	movs	r1, #255	; 0xff
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	43db      	mvns	r3, r3
 8000c2a:	ea02 0103 	and.w	r1, r2, r3
 8000c2e:	68bb      	ldr	r3, [r7, #8]
 8000c30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f003 0310 	and.w	r3, r3, #16
 8000c38:	409a      	lsls	r2, r3
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	430a      	orrs	r2, r1
 8000c40:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000c42:	68bb      	ldr	r3, [r7, #8]
 8000c44:	695b      	ldr	r3, [r3, #20]
 8000c46:	2b01      	cmp	r3, #1
 8000c48:	d11d      	bne.n	8000c86 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c50:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	f003 0310 	and.w	r3, r3, #16
 8000c58:	221f      	movs	r2, #31
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	69fa      	ldr	r2, [r7, #28]
 8000c62:	4013      	ands	r3, r2
 8000c64:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f003 0310 	and.w	r3, r3, #16
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	69fa      	ldr	r2, [r7, #28]
 8000c7a:	4313      	orrs	r3, r2
 8000c7c:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	69fa      	ldr	r2, [r7, #28]
 8000c84:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c8c:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	f003 0310 	and.w	r3, r3, #16
 8000c94:	2207      	movs	r2, #7
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	69fa      	ldr	r2, [r7, #28]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000ca2:	68bb      	ldr	r3, [r7, #8]
 8000ca4:	685a      	ldr	r2, [r3, #4]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	68db      	ldr	r3, [r3, #12]
 8000caa:	431a      	orrs	r2, r3
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	691b      	ldr	r3, [r3, #16]
 8000cb0:	4313      	orrs	r3, r2
 8000cb2:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f003 0310 	and.w	r3, r3, #16
 8000cba:	697a      	ldr	r2, [r7, #20]
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	69fa      	ldr	r2, [r7, #28]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	69fa      	ldr	r2, [r7, #28]
 8000ccc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6819      	ldr	r1, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43da      	mvns	r2, r3
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	400a      	ands	r2, r1
 8000cea:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	f003 0310 	and.w	r3, r3, #16
 8000cfa:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43db      	mvns	r3, r3
 8000d04:	69fa      	ldr	r2, [r7, #28]
 8000d06:	4013      	ands	r3, r2
 8000d08:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000d0a:	68bb      	ldr	r3, [r7, #8]
 8000d0c:	689b      	ldr	r3, [r3, #8]
 8000d0e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f003 0310 	and.w	r3, r3, #16
 8000d16:	697a      	ldr	r2, [r7, #20]
 8000d18:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1c:	69fa      	ldr	r2, [r7, #28]
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d2a:	d104      	bne.n	8000d36 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d32:	61fb      	str	r3, [r7, #28]
 8000d34:	e018      	b.n	8000d68 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d104      	bne.n	8000d48 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d44:	61fb      	str	r3, [r7, #28]
 8000d46:	e00f      	b.n	8000d68 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000d48:	f004 f83e 	bl	8004dc8 <HAL_RCC_GetHCLKFreq>
 8000d4c:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000d4e:	693b      	ldr	r3, [r7, #16]
 8000d50:	4a14      	ldr	r2, [pc, #80]	; (8000da4 <HAL_DAC_ConfigChannel+0x27c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d904      	bls.n	8000d60 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d5c:	61fb      	str	r3, [r7, #28]
 8000d5e:	e003      	b.n	8000d68 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d66:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	69fa      	ldr	r2, [r7, #28]
 8000d6e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000d70:	68fb      	ldr	r3, [r7, #12]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	6819      	ldr	r1, [r3, #0]
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f003 0310 	and.w	r3, r3, #16
 8000d7c:	22c0      	movs	r2, #192	; 0xc0
 8000d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d82:	43da      	mvns	r2, r3
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	400a      	ands	r2, r1
 8000d8a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	2201      	movs	r2, #1
 8000d90:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	2200      	movs	r2, #0
 8000d96:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d98:	2300      	movs	r3, #0
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3720      	adds	r7, #32
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	04c4b400 	.word	0x04c4b400

08000da8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b084      	sub	sp, #16
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000db4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000db6:	68f8      	ldr	r0, [r7, #12]
 8000db8:	f009 facc 	bl	800a354 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	2201      	movs	r2, #1
 8000dc0:	711a      	strb	r2, [r3, #4]
}
 8000dc2:	bf00      	nop
 8000dc4:	3710      	adds	r7, #16
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	b084      	sub	sp, #16
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dd6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f7ff fe90 	bl	8000afe <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b084      	sub	sp, #16
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000df2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	691b      	ldr	r3, [r3, #16]
 8000df8:	f043 0204 	orr.w	r2, r3, #4
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000e00:	68f8      	ldr	r0, [r7, #12]
 8000e02:	f7ff fe86 	bl	8000b12 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	2201      	movs	r2, #1
 8000e0a:	711a      	strb	r2, [r3, #4]
}
 8000e0c:	bf00      	nop
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}

08000e14 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f7ff ffd8 	bl	8000e14 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	2201      	movs	r2, #1
 8000e68:	711a      	strb	r2, [r3, #4]
}
 8000e6a:	bf00      	nop
 8000e6c:	3710      	adds	r7, #16
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b084      	sub	sp, #16
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e7e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000e80:	68f8      	ldr	r0, [r7, #12]
 8000e82:	f7ff ffd1 	bl	8000e28 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000e86:	bf00      	nop
 8000e88:	3710      	adds	r7, #16
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}

08000e8e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000e8e:	b580      	push	{r7, lr}
 8000e90:	b084      	sub	sp, #16
 8000e92:	af00      	add	r7, sp, #0
 8000e94:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e9a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	691b      	ldr	r3, [r3, #16]
 8000ea0:	f043 0204 	orr.w	r2, r3, #4
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000ea8:	68f8      	ldr	r0, [r7, #12]
 8000eaa:	f7ff ffc7 	bl	8000e3c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	711a      	strb	r2, [r3, #4]
}
 8000eb4:	bf00      	nop
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e0ac      	b.n	8001028 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f000 fab6 	bl	8001444 <DFSDM_GetChannelFromInstance>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	4a55      	ldr	r2, [pc, #340]	; (8001030 <HAL_DFSDM_ChannelInit+0x174>)
 8000edc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	e09f      	b.n	8001028 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f00a ffc7 	bl	800be7c <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000eee:	4b51      	ldr	r3, [pc, #324]	; (8001034 <HAL_DFSDM_ChannelInit+0x178>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	4a4f      	ldr	r2, [pc, #316]	; (8001034 <HAL_DFSDM_ChannelInit+0x178>)
 8000ef6:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000ef8:	4b4e      	ldr	r3, [pc, #312]	; (8001034 <HAL_DFSDM_ChannelInit+0x178>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d125      	bne.n	8000f4c <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000f00:	4b4d      	ldr	r3, [pc, #308]	; (8001038 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a4c      	ldr	r2, [pc, #304]	; (8001038 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f06:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000f0a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000f0c:	4b4a      	ldr	r3, [pc, #296]	; (8001038 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	4948      	ldr	r1, [pc, #288]	; (8001038 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f16:	4313      	orrs	r3, r2
 8000f18:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000f1a:	4b47      	ldr	r3, [pc, #284]	; (8001038 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a46      	ldr	r2, [pc, #280]	; (8001038 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f20:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000f24:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	791b      	ldrb	r3, [r3, #4]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d108      	bne.n	8000f40 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000f2e:	4b42      	ldr	r3, [pc, #264]	; (8001038 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f30:	681a      	ldr	r2, [r3, #0]
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	041b      	lsls	r3, r3, #16
 8000f3a:	493f      	ldr	r1, [pc, #252]	; (8001038 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f3c:	4313      	orrs	r3, r2
 8000f3e:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000f40:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a3c      	ldr	r2, [pc, #240]	; (8001038 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f4a:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	681a      	ldr	r2, [r3, #0]
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000f5a:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f6a:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f70:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	430a      	orrs	r2, r1
 8000f78:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f022 020f 	bic.w	r2, r2, #15
 8000f88:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	6819      	ldr	r1, [r3, #0]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	689a      	ldr	r2, [r3, #8]
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000fb0:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	6899      	ldr	r1, [r3, #8]
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc0:	3b01      	subs	r3, #1
 8000fc2:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	685a      	ldr	r2, [r3, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f002 0207 	and.w	r2, r2, #7
 8000fdc:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6859      	ldr	r1, [r3, #4]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe8:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000ff0:	431a      	orrs	r2, r3
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	430a      	orrs	r2, r1
 8000ff8:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001008:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2201      	movs	r2, #1
 800100e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f000 fa14 	bl	8001444 <DFSDM_GetChannelFromInstance>
 800101c:	4602      	mov	r2, r0
 800101e:	4904      	ldr	r1, [pc, #16]	; (8001030 <HAL_DFSDM_ChannelInit+0x174>)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	200002f8 	.word	0x200002f8
 8001034:	200002f4 	.word	0x200002f4
 8001038:	40016000 	.word	0x40016000

0800103c <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d101      	bne.n	800104e <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
 800104c:	e0ca      	b.n	80011e4 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a66      	ldr	r2, [pc, #408]	; (80011ec <HAL_DFSDM_FilterInit+0x1b0>)
 8001054:	4293      	cmp	r3, r2
 8001056:	d109      	bne.n	800106c <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800105c:	2b01      	cmp	r3, #1
 800105e:	d003      	beq.n	8001068 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001064:	2b01      	cmp	r3, #1
 8001066:	d101      	bne.n	800106c <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001068:	2301      	movs	r3, #1
 800106a:	e0bb      	b.n	80011e4 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2201      	movs	r2, #1
 8001076:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2201      	movs	r2, #1
 800107c:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001084:	6878      	ldr	r0, [r7, #4]
 8001086:	f00a fe4d 	bl	800bd24 <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001098:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	7a1b      	ldrb	r3, [r3, #8]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d108      	bne.n	80010b4 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80010b0:	601a      	str	r2, [r3, #0]
 80010b2:	e007      	b.n	80010c4 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	681a      	ldr	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80010c2:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	7a5b      	ldrb	r3, [r3, #9]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d108      	bne.n	80010de <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681a      	ldr	r2, [r3, #0]
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	e007      	b.n	80010ee <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80010ec:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	6812      	ldr	r2, [r2, #0]
 80010f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80010fc:	f023 0308 	bic.w	r3, r3, #8
 8001100:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d108      	bne.n	800111c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	6819      	ldr	r1, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695a      	ldr	r2, [r3, #20]
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	430a      	orrs	r2, r1
 800111a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	7c1b      	ldrb	r3, [r3, #16]
 8001120:	2b01      	cmp	r3, #1
 8001122:	d108      	bne.n	8001136 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f042 0210 	orr.w	r2, r2, #16
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	e007      	b.n	8001146 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0210 	bic.w	r2, r2, #16
 8001144:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	7c5b      	ldrb	r3, [r3, #17]
 800114a:	2b01      	cmp	r3, #1
 800114c:	d108      	bne.n	8001160 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f042 0220 	orr.w	r2, r2, #32
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	e007      	b.n	8001170 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f022 0220 	bic.w	r2, r2, #32
 800116e:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	6812      	ldr	r2, [r2, #0]
 800117a:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800117e:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 8001182:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6959      	ldr	r1, [r3, #20]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a1b      	ldr	r3, [r3, #32]
 8001192:	3b01      	subs	r3, #1
 8001194:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001196:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800119e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	430a      	orrs	r2, r1
 80011a6:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685a      	ldr	r2, [r3, #4]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	68da      	ldr	r2, [r3, #12]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	699a      	ldr	r2, [r3, #24]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	7c1a      	ldrb	r2, [r3, #16]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f042 0201 	orr.w	r2, r2, #1
 80011d8:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2201      	movs	r2, #1
 80011de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	3708      	adds	r7, #8
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	40016100 	.word	0x40016100

080011f0 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b087      	sub	sp, #28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60f8      	str	r0, [r7, #12]
 80011f8:	60b9      	str	r1, [r7, #8]
 80011fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011fc:	2300      	movs	r3, #0
 80011fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001206:	2b00      	cmp	r3, #0
 8001208:	d02e      	beq.n	8001268 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001210:	2bff      	cmp	r3, #255	; 0xff
 8001212:	d029      	beq.n	8001268 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	6812      	ldr	r2, [r2, #0]
 800121e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001226:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b01      	cmp	r3, #1
 800122c:	d10d      	bne.n	800124a <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681a      	ldr	r2, [r3, #0]
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	021b      	lsls	r3, r3, #8
 8001238:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800123c:	431a      	orrs	r2, r3
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	e00a      	b.n	8001260 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	6819      	ldr	r1, [r3, #0]
 8001250:	68bb      	ldr	r3, [r7, #8]
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	430a      	orrs	r2, r1
 800125e:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	687a      	ldr	r2, [r7, #4]
 8001264:	631a      	str	r2, [r3, #48]	; 0x30
 8001266:	e001      	b.n	800126c <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 800126c:	7dfb      	ldrb	r3, [r7, #23]
}
 800126e:	4618      	mov	r0, r3
 8001270:	371c      	adds	r7, #28
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
	...

0800127c <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001288:	2300      	movs	r3, #0
 800128a:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d002      	beq.n	8001298 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d102      	bne.n	800129e <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	75fb      	strb	r3, [r7, #23]
 800129c:	e064      	b.n	8001368 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80012ac:	d002      	beq.n	80012b4 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	75fb      	strb	r3, [r7, #23]
 80012b2:	e059      	b.n	8001368 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d10e      	bne.n	80012da <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d10a      	bne.n	80012da <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012c8:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d105      	bne.n	80012da <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	2b01      	cmp	r3, #1
 80012d2:	d002      	beq.n	80012da <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 80012d4:	2301      	movs	r3, #1
 80012d6:	75fb      	strb	r3, [r7, #23]
 80012d8:	e046      	b.n	8001368 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10b      	bne.n	80012fa <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d107      	bne.n	80012fa <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ee:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012f0:	2b20      	cmp	r3, #32
 80012f2:	d102      	bne.n	80012fa <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	75fb      	strb	r3, [r7, #23]
 80012f8:	e036      	b.n	8001368 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001300:	2b01      	cmp	r3, #1
 8001302:	d004      	beq.n	800130e <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 800130a:	2b03      	cmp	r3, #3
 800130c:	d12a      	bne.n	8001364 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001312:	4a18      	ldr	r2, [pc, #96]	; (8001374 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 8001314:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800131a:	4a17      	ldr	r2, [pc, #92]	; (8001378 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 800131c:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001322:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 8001324:	2b20      	cmp	r3, #32
 8001326:	d101      	bne.n	800132c <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 8001328:	4a14      	ldr	r2, [pc, #80]	; (800137c <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 800132a:	e000      	b.n	800132e <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 800132c:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001332:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	331c      	adds	r3, #28
 800133e:	4619      	mov	r1, r3
 8001340:	68ba      	ldr	r2, [r7, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f000 fa16 	bl	8001774 <HAL_DMA_Start_IT>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d006      	beq.n	800135c <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	22ff      	movs	r2, #255	; 0xff
 8001352:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800135a:	e005      	b.n	8001368 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 800135c:	68f8      	ldr	r0, [r7, #12]
 800135e:	f000 f8bd 	bl	80014dc <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001362:	e001      	b.n	8001368 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001368:	7dfb      	ldrb	r3, [r7, #23]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}
 8001372:	bf00      	nop
 8001374:	08001405 	.word	0x08001405
 8001378:	08001421 	.word	0x08001421
 800137c:	080013e9 	.word	0x080013e9

08001380 <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001388:	2300      	movs	r3, #0
 800138a:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001392:	2b02      	cmp	r3, #2
 8001394:	d007      	beq.n	80013a6 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 800139c:	2b04      	cmp	r3, #4
 800139e:	d002      	beq.n	80013a6 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	73fb      	strb	r3, [r7, #15]
 80013a4:	e007      	b.n	80013b6 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013aa:	4618      	mov	r0, r3
 80013ac:	f000 fa5d 	bl	800186a <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 f8e9 	bl	8001588 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 80013b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 80013c8:	bf00      	nop
 80013ca:	370c      	adds	r7, #12
 80013cc:	46bd      	mov	sp, r7
 80013ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d2:	4770      	bx	lr

080013d4 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80013d4:	b480      	push	{r7}
 80013d6:	b083      	sub	sp, #12
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013f4:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80013f6:	68f8      	ldr	r0, [r7, #12]
 80013f8:	f7ff ffe2 	bl	80013c0 <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}

08001404 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001410:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 8001412:	68f8      	ldr	r0, [r7, #12]
 8001414:	f009 f88e 	bl	800a534 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 8001418:	bf00      	nop
 800141a:	3710      	adds	r7, #16
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}

08001420 <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800142c:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2203      	movs	r2, #3
 8001432:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f7ff ffcd 	bl	80013d4 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	4a1c      	ldr	r2, [pc, #112]	; (80014c0 <DFSDM_GetChannelFromInstance+0x7c>)
 8001450:	4293      	cmp	r3, r2
 8001452:	d102      	bne.n	800145a <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
 8001458:	e02b      	b.n	80014b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4a19      	ldr	r2, [pc, #100]	; (80014c4 <DFSDM_GetChannelFromInstance+0x80>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d102      	bne.n	8001468 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8001462:	2301      	movs	r3, #1
 8001464:	60fb      	str	r3, [r7, #12]
 8001466:	e024      	b.n	80014b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4a17      	ldr	r2, [pc, #92]	; (80014c8 <DFSDM_GetChannelFromInstance+0x84>)
 800146c:	4293      	cmp	r3, r2
 800146e:	d102      	bne.n	8001476 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001470:	2302      	movs	r3, #2
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	e01d      	b.n	80014b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a14      	ldr	r2, [pc, #80]	; (80014cc <DFSDM_GetChannelFromInstance+0x88>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d102      	bne.n	8001484 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800147e:	2304      	movs	r3, #4
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	e016      	b.n	80014b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a12      	ldr	r2, [pc, #72]	; (80014d0 <DFSDM_GetChannelFromInstance+0x8c>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d102      	bne.n	8001492 <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 800148c:	2305      	movs	r3, #5
 800148e:	60fb      	str	r3, [r7, #12]
 8001490:	e00f      	b.n	80014b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a0f      	ldr	r2, [pc, #60]	; (80014d4 <DFSDM_GetChannelFromInstance+0x90>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d102      	bne.n	80014a0 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 800149a:	2306      	movs	r3, #6
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	e008      	b.n	80014b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a0d      	ldr	r2, [pc, #52]	; (80014d8 <DFSDM_GetChannelFromInstance+0x94>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d102      	bne.n	80014ae <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 80014a8:	2307      	movs	r3, #7
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	e001      	b.n	80014b2 <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80014ae:	2303      	movs	r3, #3
 80014b0:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80014b2:	68fb      	ldr	r3, [r7, #12]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3714      	adds	r7, #20
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	40016000 	.word	0x40016000
 80014c4:	40016020 	.word	0x40016020
 80014c8:	40016040 	.word	0x40016040
 80014cc:	40016080 	.word	0x40016080
 80014d0:	400160a0 	.word	0x400160a0
 80014d4:	400160c0 	.word	0x400160c0
 80014d8:	400160e0 	.word	0x400160e0

080014dc <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80014dc:	b480      	push	{r7}
 80014de:	b083      	sub	sp, #12
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d108      	bne.n	80014fe <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	681a      	ldr	r2, [r3, #0]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	e033      	b.n	8001566 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	f022 0201 	bic.w	r2, r2, #1
 800150c:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 800151c:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f042 0201 	orr.w	r2, r2, #1
 800152c:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001534:	2b03      	cmp	r3, #3
 8001536:	d116      	bne.n	8001566 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800153c:	2b00      	cmp	r3, #0
 800153e:	d107      	bne.n	8001550 <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	681a      	ldr	r2, [r3, #0]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f042 0202 	orr.w	r2, r2, #2
 800154e:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001556:	2b01      	cmp	r3, #1
 8001558:	d102      	bne.n	8001560 <DFSDM_RegConvStart+0x84>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800155e:	e000      	b.n	8001562 <DFSDM_RegConvStart+0x86>
 8001560:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 800156c:	2b01      	cmp	r3, #1
 800156e:	d101      	bne.n	8001574 <DFSDM_RegConvStart+0x98>
 8001570:	2202      	movs	r2, #2
 8001572:	e000      	b.n	8001576 <DFSDM_RegConvStart+0x9a>
 8001574:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d107      	bne.n	80015b8 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 80015b6:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	681a      	ldr	r2, [r3, #0]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f042 0201 	orr.w	r2, r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80015ce:	2b04      	cmp	r3, #4
 80015d0:	d116      	bne.n	8001600 <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d107      	bne.n	80015ea <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f042 0202 	orr.w	r2, r2, #2
 80015e8:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d102      	bne.n	80015fa <DFSDM_RegConvStop+0x72>
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015f8:	e000      	b.n	80015fc <DFSDM_RegConvStop+0x74>
 80015fa:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 8001606:	2b02      	cmp	r3, #2
 8001608:	d101      	bne.n	800160e <DFSDM_RegConvStop+0x86>
 800160a:	2201      	movs	r2, #1
 800160c:	e000      	b.n	8001610 <DFSDM_RegConvStop+0x88>
 800160e:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
	...

08001624 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d101      	bne.n	8001636 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e08d      	b.n	8001752 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	461a      	mov	r2, r3
 800163c:	4b47      	ldr	r3, [pc, #284]	; (800175c <HAL_DMA_Init+0x138>)
 800163e:	429a      	cmp	r2, r3
 8001640:	d80f      	bhi.n	8001662 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	461a      	mov	r2, r3
 8001648:	4b45      	ldr	r3, [pc, #276]	; (8001760 <HAL_DMA_Init+0x13c>)
 800164a:	4413      	add	r3, r2
 800164c:	4a45      	ldr	r2, [pc, #276]	; (8001764 <HAL_DMA_Init+0x140>)
 800164e:	fba2 2303 	umull	r2, r3, r2, r3
 8001652:	091b      	lsrs	r3, r3, #4
 8001654:	009a      	lsls	r2, r3, #2
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	4a42      	ldr	r2, [pc, #264]	; (8001768 <HAL_DMA_Init+0x144>)
 800165e:	641a      	str	r2, [r3, #64]	; 0x40
 8001660:	e00e      	b.n	8001680 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	4b40      	ldr	r3, [pc, #256]	; (800176c <HAL_DMA_Init+0x148>)
 800166a:	4413      	add	r3, r2
 800166c:	4a3d      	ldr	r2, [pc, #244]	; (8001764 <HAL_DMA_Init+0x140>)
 800166e:	fba2 2303 	umull	r2, r3, r2, r3
 8001672:	091b      	lsrs	r3, r3, #4
 8001674:	009a      	lsls	r2, r3, #2
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a3c      	ldr	r2, [pc, #240]	; (8001770 <HAL_DMA_Init+0x14c>)
 800167e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	2202      	movs	r2, #2
 8001684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800169a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80016a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	691b      	ldr	r3, [r3, #16]
 80016aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80016b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	699b      	ldr	r3, [r3, #24]
 80016b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80016bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6a1b      	ldr	r3, [r3, #32]
 80016c2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80016d2:	6878      	ldr	r0, [r7, #4]
 80016d4:	f000 fa72 	bl	8001bbc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	689b      	ldr	r3, [r3, #8]
 80016dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80016e0:	d102      	bne.n	80016e8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2200      	movs	r2, #0
 80016e6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685a      	ldr	r2, [r3, #4]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016f8:	687a      	ldr	r2, [r7, #4]
 80016fa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016fc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d010      	beq.n	8001728 <HAL_DMA_Init+0x104>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	2b04      	cmp	r3, #4
 800170c:	d80c      	bhi.n	8001728 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 fa92 	bl	8001c38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001720:	687a      	ldr	r2, [r7, #4]
 8001722:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	e008      	b.n	800173a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2200      	movs	r2, #0
 8001732:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2200      	movs	r2, #0
 800173e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2201      	movs	r2, #1
 8001744:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2200      	movs	r2, #0
 800174c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40020407 	.word	0x40020407
 8001760:	bffdfff8 	.word	0xbffdfff8
 8001764:	cccccccd 	.word	0xcccccccd
 8001768:	40020000 	.word	0x40020000
 800176c:	bffdfbf8 	.word	0xbffdfbf8
 8001770:	40020400 	.word	0x40020400

08001774 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b086      	sub	sp, #24
 8001778:	af00      	add	r7, sp, #0
 800177a:	60f8      	str	r0, [r7, #12]
 800177c:	60b9      	str	r1, [r7, #8]
 800177e:	607a      	str	r2, [r7, #4]
 8001780:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001782:	2300      	movs	r3, #0
 8001784:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800178c:	2b01      	cmp	r3, #1
 800178e:	d101      	bne.n	8001794 <HAL_DMA_Start_IT+0x20>
 8001790:	2302      	movs	r3, #2
 8001792:	e066      	b.n	8001862 <HAL_DMA_Start_IT+0xee>
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2201      	movs	r2, #1
 8001798:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017a2:	b2db      	uxtb	r3, r3
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d155      	bne.n	8001854 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2202      	movs	r2, #2
 80017ac:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2200      	movs	r2, #0
 80017b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0201 	bic.w	r2, r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	68b9      	ldr	r1, [r7, #8]
 80017cc:	68f8      	ldr	r0, [r7, #12]
 80017ce:	f000 f9b6 	bl	8001b3e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d008      	beq.n	80017ec <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681a      	ldr	r2, [r3, #0]
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f042 020e 	orr.w	r2, r2, #14
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	e00f      	b.n	800180c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 0204 	bic.w	r2, r2, #4
 80017fa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f042 020a 	orr.w	r2, r2, #10
 800180a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001816:	2b00      	cmp	r3, #0
 8001818:	d007      	beq.n	800182a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001824:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001828:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800182e:	2b00      	cmp	r3, #0
 8001830:	d007      	beq.n	8001842 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001840:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 0201 	orr.w	r2, r2, #1
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	e005      	b.n	8001860 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	2200      	movs	r2, #0
 8001858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800185c:	2302      	movs	r3, #2
 800185e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8001860:	7dfb      	ldrb	r3, [r7, #23]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3718      	adds	r7, #24
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800186a:	b480      	push	{r7}
 800186c:	b085      	sub	sp, #20
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001872:	2300      	movs	r3, #0
 8001874:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b02      	cmp	r3, #2
 8001880:	d008      	beq.n	8001894 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	2204      	movs	r2, #4
 8001886:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e040      	b.n	8001916 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f022 020e 	bic.w	r2, r2, #14
 80018a2:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018a8:	681a      	ldr	r2, [r3, #0]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b2:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f022 0201 	bic.w	r2, r2, #1
 80018c2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c8:	f003 021c 	and.w	r2, r3, #28
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	2101      	movs	r1, #1
 80018d2:	fa01 f202 	lsl.w	r2, r1, r2
 80018d6:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018dc:	687a      	ldr	r2, [r7, #4]
 80018de:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018e0:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d00c      	beq.n	8001904 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018f8:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018fe:	687a      	ldr	r2, [r7, #4]
 8001900:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001902:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2200      	movs	r2, #0
 8001910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001914:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001916:	4618      	mov	r0, r3
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr

08001922 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001922:	b580      	push	{r7, lr}
 8001924:	b084      	sub	sp, #16
 8001926:	af00      	add	r7, sp, #0
 8001928:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800192a:	2300      	movs	r3, #0
 800192c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d005      	beq.n	8001946 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2204      	movs	r2, #4
 800193e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	73fb      	strb	r3, [r7, #15]
 8001944:	e047      	b.n	80019d6 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f022 020e 	bic.w	r2, r2, #14
 8001954:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f022 0201 	bic.w	r2, r2, #1
 8001964:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001970:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001974:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197a:	f003 021c 	and.w	r2, r3, #28
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	2101      	movs	r1, #1
 8001984:	fa01 f202 	lsl.w	r2, r1, r2
 8001988:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001992:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001998:	2b00      	cmp	r3, #0
 800199a:	d00c      	beq.n	80019b6 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019a6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80019aa:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b0:	687a      	ldr	r2, [r7, #4]
 80019b2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80019b4:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2201      	movs	r2, #1
 80019ba:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d003      	beq.n	80019d6 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	4798      	blx	r3
    }
  }
  return status;
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80019d8:	4618      	mov	r0, r3
 80019da:	3710      	adds	r7, #16
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}

080019e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019fc:	f003 031c 	and.w	r3, r3, #28
 8001a00:	2204      	movs	r2, #4
 8001a02:	409a      	lsls	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d026      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x7a>
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d021      	beq.n	8001a5a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0320 	and.w	r3, r3, #32
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d107      	bne.n	8001a34 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0204 	bic.w	r2, r2, #4
 8001a32:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a38:	f003 021c 	and.w	r2, r3, #28
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a40:	2104      	movs	r1, #4
 8001a42:	fa01 f202 	lsl.w	r2, r1, r2
 8001a46:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d071      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001a58:	e06c      	b.n	8001b34 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f003 031c 	and.w	r3, r3, #28
 8001a62:	2202      	movs	r2, #2
 8001a64:	409a      	lsls	r2, r3
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d02e      	beq.n	8001acc <HAL_DMA_IRQHandler+0xec>
 8001a6e:	68bb      	ldr	r3, [r7, #8]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d029      	beq.n	8001acc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0320 	and.w	r3, r3, #32
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10b      	bne.n	8001a9e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f022 020a 	bic.w	r2, r2, #10
 8001a94:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	f003 021c 	and.w	r2, r3, #28
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	2102      	movs	r1, #2
 8001aac:	fa01 f202 	lsl.w	r2, r1, r2
 8001ab0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d038      	beq.n	8001b34 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001aca:	e033      	b.n	8001b34 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad0:	f003 031c 	and.w	r3, r3, #28
 8001ad4:	2208      	movs	r2, #8
 8001ad6:	409a      	lsls	r2, r3
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	4013      	ands	r3, r2
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d02a      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x156>
 8001ae0:	68bb      	ldr	r3, [r7, #8]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d025      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 020e 	bic.w	r2, r2, #14
 8001af8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f003 021c 	and.w	r2, r3, #28
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	2101      	movs	r1, #1
 8001b08:	fa01 f202 	lsl.w	r2, r1, r2
 8001b0c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2201      	movs	r2, #1
 8001b18:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2200      	movs	r2, #0
 8001b20:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d004      	beq.n	8001b36 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b34:	bf00      	nop
 8001b36:	bf00      	nop
}
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b085      	sub	sp, #20
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	60b9      	str	r1, [r7, #8]
 8001b48:	607a      	str	r2, [r7, #4]
 8001b4a:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b50:	68fa      	ldr	r2, [r7, #12]
 8001b52:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b54:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d004      	beq.n	8001b68 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b66:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6c:	f003 021c 	and.w	r2, r3, #28
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b74:	2101      	movs	r1, #1
 8001b76:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	683a      	ldr	r2, [r7, #0]
 8001b82:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	2b10      	cmp	r3, #16
 8001b8a:	d108      	bne.n	8001b9e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	687a      	ldr	r2, [r7, #4]
 8001b92:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	68ba      	ldr	r2, [r7, #8]
 8001b9a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b9c:	e007      	b.n	8001bae <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68ba      	ldr	r2, [r7, #8]
 8001ba4:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	60da      	str	r2, [r3, #12]
}
 8001bae:	bf00      	nop
 8001bb0:	3714      	adds	r7, #20
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
	...

08001bbc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4b17      	ldr	r3, [pc, #92]	; (8001c28 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d80a      	bhi.n	8001be6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001bdc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001be0:	687a      	ldr	r2, [r7, #4]
 8001be2:	6493      	str	r3, [r2, #72]	; 0x48
 8001be4:	e007      	b.n	8001bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bea:	089b      	lsrs	r3, r3, #2
 8001bec:	009a      	lsls	r2, r3, #2
 8001bee:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bf0:	4413      	add	r3, r2
 8001bf2:	687a      	ldr	r2, [r7, #4]
 8001bf4:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	b2db      	uxtb	r3, r3
 8001bfc:	3b08      	subs	r3, #8
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001c00:	fba2 2303 	umull	r2, r3, r2, r3
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	4a0a      	ldr	r2, [pc, #40]	; (8001c34 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001c0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	2201      	movs	r2, #1
 8001c16:	409a      	lsls	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001c1c:	bf00      	nop
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr
 8001c28:	40020407 	.word	0x40020407
 8001c2c:	4002081c 	.word	0x4002081c
 8001c30:	cccccccd 	.word	0xcccccccd
 8001c34:	40020880 	.word	0x40020880

08001c38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4b0b      	ldr	r3, [pc, #44]	; (8001c78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	461a      	mov	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a08      	ldr	r2, [pc, #32]	; (8001c7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c5a:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3b01      	subs	r3, #1
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2201      	movs	r2, #1
 8001c66:	409a      	lsls	r2, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	1000823f 	.word	0x1000823f
 8001c7c:	40020940 	.word	0x40020940

08001c80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
 8001c88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8e:	e166      	b.n	8001f5e <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	2101      	movs	r1, #1
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	fa01 f303 	lsl.w	r3, r1, r3
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	f000 8158 	beq.w	8001f58 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0303 	and.w	r3, r3, #3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	d005      	beq.n	8001cc0 <HAL_GPIO_Init+0x40>
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f003 0303 	and.w	r3, r3, #3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d130      	bne.n	8001d22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001cc6:	697b      	ldr	r3, [r7, #20]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	2203      	movs	r2, #3
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	68da      	ldr	r2, [r3, #12]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	005b      	lsls	r3, r3, #1
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4313      	orrs	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	693a      	ldr	r2, [r7, #16]
 8001cee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	4013      	ands	r3, r2
 8001d04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	091b      	lsrs	r3, r3, #4
 8001d0c:	f003 0201 	and.w	r2, r3, #1
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	693a      	ldr	r2, [r7, #16]
 8001d20:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d22:	683b      	ldr	r3, [r7, #0]
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f003 0303 	and.w	r3, r3, #3
 8001d2a:	2b03      	cmp	r3, #3
 8001d2c:	d017      	beq.n	8001d5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	68db      	ldr	r3, [r3, #12]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	2203      	movs	r2, #3
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	4013      	ands	r3, r2
 8001d44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	689a      	ldr	r2, [r3, #8]
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	005b      	lsls	r3, r3, #1
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	693a      	ldr	r2, [r7, #16]
 8001d54:	4313      	orrs	r3, r2
 8001d56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 0303 	and.w	r3, r3, #3
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d123      	bne.n	8001db2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	08da      	lsrs	r2, r3, #3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	3208      	adds	r2, #8
 8001d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	220f      	movs	r2, #15
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	43db      	mvns	r3, r3
 8001d88:	693a      	ldr	r2, [r7, #16]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 0307 	and.w	r3, r3, #7
 8001d98:	009b      	lsls	r3, r3, #2
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	4313      	orrs	r3, r2
 8001da2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	08da      	lsrs	r2, r3, #3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	3208      	adds	r2, #8
 8001dac:	6939      	ldr	r1, [r7, #16]
 8001dae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001db8:	697b      	ldr	r3, [r7, #20]
 8001dba:	005b      	lsls	r3, r3, #1
 8001dbc:	2203      	movs	r2, #3
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	43db      	mvns	r3, r3
 8001dc4:	693a      	ldr	r2, [r7, #16]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f003 0203 	and.w	r2, r3, #3
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80b2 	beq.w	8001f58 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001df4:	4b61      	ldr	r3, [pc, #388]	; (8001f7c <HAL_GPIO_Init+0x2fc>)
 8001df6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df8:	4a60      	ldr	r2, [pc, #384]	; (8001f7c <HAL_GPIO_Init+0x2fc>)
 8001dfa:	f043 0301 	orr.w	r3, r3, #1
 8001dfe:	6613      	str	r3, [r2, #96]	; 0x60
 8001e00:	4b5e      	ldr	r3, [pc, #376]	; (8001f7c <HAL_GPIO_Init+0x2fc>)
 8001e02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001e0c:	4a5c      	ldr	r2, [pc, #368]	; (8001f80 <HAL_GPIO_Init+0x300>)
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	089b      	lsrs	r3, r3, #2
 8001e12:	3302      	adds	r3, #2
 8001e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e18:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0303 	and.w	r3, r3, #3
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	220f      	movs	r2, #15
 8001e24:	fa02 f303 	lsl.w	r3, r2, r3
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	693a      	ldr	r2, [r7, #16]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001e36:	d02b      	beq.n	8001e90 <HAL_GPIO_Init+0x210>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a52      	ldr	r2, [pc, #328]	; (8001f84 <HAL_GPIO_Init+0x304>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d025      	beq.n	8001e8c <HAL_GPIO_Init+0x20c>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a51      	ldr	r2, [pc, #324]	; (8001f88 <HAL_GPIO_Init+0x308>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d01f      	beq.n	8001e88 <HAL_GPIO_Init+0x208>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a50      	ldr	r2, [pc, #320]	; (8001f8c <HAL_GPIO_Init+0x30c>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d019      	beq.n	8001e84 <HAL_GPIO_Init+0x204>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a4f      	ldr	r2, [pc, #316]	; (8001f90 <HAL_GPIO_Init+0x310>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d013      	beq.n	8001e80 <HAL_GPIO_Init+0x200>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	4a4e      	ldr	r2, [pc, #312]	; (8001f94 <HAL_GPIO_Init+0x314>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d00d      	beq.n	8001e7c <HAL_GPIO_Init+0x1fc>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	4a4d      	ldr	r2, [pc, #308]	; (8001f98 <HAL_GPIO_Init+0x318>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d007      	beq.n	8001e78 <HAL_GPIO_Init+0x1f8>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	4a4c      	ldr	r2, [pc, #304]	; (8001f9c <HAL_GPIO_Init+0x31c>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d101      	bne.n	8001e74 <HAL_GPIO_Init+0x1f4>
 8001e70:	2307      	movs	r3, #7
 8001e72:	e00e      	b.n	8001e92 <HAL_GPIO_Init+0x212>
 8001e74:	2308      	movs	r3, #8
 8001e76:	e00c      	b.n	8001e92 <HAL_GPIO_Init+0x212>
 8001e78:	2306      	movs	r3, #6
 8001e7a:	e00a      	b.n	8001e92 <HAL_GPIO_Init+0x212>
 8001e7c:	2305      	movs	r3, #5
 8001e7e:	e008      	b.n	8001e92 <HAL_GPIO_Init+0x212>
 8001e80:	2304      	movs	r3, #4
 8001e82:	e006      	b.n	8001e92 <HAL_GPIO_Init+0x212>
 8001e84:	2303      	movs	r3, #3
 8001e86:	e004      	b.n	8001e92 <HAL_GPIO_Init+0x212>
 8001e88:	2302      	movs	r3, #2
 8001e8a:	e002      	b.n	8001e92 <HAL_GPIO_Init+0x212>
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e000      	b.n	8001e92 <HAL_GPIO_Init+0x212>
 8001e90:	2300      	movs	r3, #0
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	f002 0203 	and.w	r2, r2, #3
 8001e98:	0092      	lsls	r2, r2, #2
 8001e9a:	4093      	lsls	r3, r2
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ea2:	4937      	ldr	r1, [pc, #220]	; (8001f80 <HAL_GPIO_Init+0x300>)
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	089b      	lsrs	r3, r3, #2
 8001ea8:	3302      	adds	r3, #2
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001eb0:	4b3b      	ldr	r3, [pc, #236]	; (8001fa0 <HAL_GPIO_Init+0x320>)
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	693a      	ldr	r2, [r7, #16]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ed4:	4a32      	ldr	r2, [pc, #200]	; (8001fa0 <HAL_GPIO_Init+0x320>)
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eda:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <HAL_GPIO_Init+0x320>)
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	693a      	ldr	r2, [r7, #16]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001efe:	4a28      	ldr	r2, [pc, #160]	; (8001fa0 <HAL_GPIO_Init+0x320>)
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001f04:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <HAL_GPIO_Init+0x320>)
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	693a      	ldr	r2, [r7, #16]
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001f20:	693a      	ldr	r2, [r7, #16]
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f28:	4a1d      	ldr	r2, [pc, #116]	; (8001fa0 <HAL_GPIO_Init+0x320>)
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001f2e:	4b1c      	ldr	r3, [pc, #112]	; (8001fa0 <HAL_GPIO_Init+0x320>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f4a:	693a      	ldr	r2, [r7, #16]
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f52:	4a13      	ldr	r2, [pc, #76]	; (8001fa0 <HAL_GPIO_Init+0x320>)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	fa22 f303 	lsr.w	r3, r2, r3
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f47f ae91 	bne.w	8001c90 <HAL_GPIO_Init+0x10>
  }
}
 8001f6e:	bf00      	nop
 8001f70:	bf00      	nop
 8001f72:	371c      	adds	r7, #28
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40021000 	.word	0x40021000
 8001f80:	40010000 	.word	0x40010000
 8001f84:	48000400 	.word	0x48000400
 8001f88:	48000800 	.word	0x48000800
 8001f8c:	48000c00 	.word	0x48000c00
 8001f90:	48001000 	.word	0x48001000
 8001f94:	48001400 	.word	0x48001400
 8001f98:	48001800 	.word	0x48001800
 8001f9c:	48001c00 	.word	0x48001c00
 8001fa0:	40010400 	.word	0x40010400

08001fa4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b087      	sub	sp, #28
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001fb2:	e0c9      	b.n	8002148 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	683a      	ldr	r2, [r7, #0]
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80bc 	beq.w	8002142 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001fca:	4a66      	ldr	r2, [pc, #408]	; (8002164 <HAL_GPIO_DeInit+0x1c0>)
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	3302      	adds	r3, #2
 8001fd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	f003 0303 	and.w	r3, r3, #3
 8001fde:	009b      	lsls	r3, r3, #2
 8001fe0:	220f      	movs	r2, #15
 8001fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ff2:	d02b      	beq.n	800204c <HAL_GPIO_DeInit+0xa8>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a5c      	ldr	r2, [pc, #368]	; (8002168 <HAL_GPIO_DeInit+0x1c4>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d025      	beq.n	8002048 <HAL_GPIO_DeInit+0xa4>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a5b      	ldr	r2, [pc, #364]	; (800216c <HAL_GPIO_DeInit+0x1c8>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d01f      	beq.n	8002044 <HAL_GPIO_DeInit+0xa0>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a5a      	ldr	r2, [pc, #360]	; (8002170 <HAL_GPIO_DeInit+0x1cc>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d019      	beq.n	8002040 <HAL_GPIO_DeInit+0x9c>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a59      	ldr	r2, [pc, #356]	; (8002174 <HAL_GPIO_DeInit+0x1d0>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d013      	beq.n	800203c <HAL_GPIO_DeInit+0x98>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	4a58      	ldr	r2, [pc, #352]	; (8002178 <HAL_GPIO_DeInit+0x1d4>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d00d      	beq.n	8002038 <HAL_GPIO_DeInit+0x94>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	4a57      	ldr	r2, [pc, #348]	; (800217c <HAL_GPIO_DeInit+0x1d8>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d007      	beq.n	8002034 <HAL_GPIO_DeInit+0x90>
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a56      	ldr	r2, [pc, #344]	; (8002180 <HAL_GPIO_DeInit+0x1dc>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d101      	bne.n	8002030 <HAL_GPIO_DeInit+0x8c>
 800202c:	2307      	movs	r3, #7
 800202e:	e00e      	b.n	800204e <HAL_GPIO_DeInit+0xaa>
 8002030:	2308      	movs	r3, #8
 8002032:	e00c      	b.n	800204e <HAL_GPIO_DeInit+0xaa>
 8002034:	2306      	movs	r3, #6
 8002036:	e00a      	b.n	800204e <HAL_GPIO_DeInit+0xaa>
 8002038:	2305      	movs	r3, #5
 800203a:	e008      	b.n	800204e <HAL_GPIO_DeInit+0xaa>
 800203c:	2304      	movs	r3, #4
 800203e:	e006      	b.n	800204e <HAL_GPIO_DeInit+0xaa>
 8002040:	2303      	movs	r3, #3
 8002042:	e004      	b.n	800204e <HAL_GPIO_DeInit+0xaa>
 8002044:	2302      	movs	r3, #2
 8002046:	e002      	b.n	800204e <HAL_GPIO_DeInit+0xaa>
 8002048:	2301      	movs	r3, #1
 800204a:	e000      	b.n	800204e <HAL_GPIO_DeInit+0xaa>
 800204c:	2300      	movs	r3, #0
 800204e:	697a      	ldr	r2, [r7, #20]
 8002050:	f002 0203 	and.w	r2, r2, #3
 8002054:	0092      	lsls	r2, r2, #2
 8002056:	4093      	lsls	r3, r2
 8002058:	68fa      	ldr	r2, [r7, #12]
 800205a:	429a      	cmp	r2, r3
 800205c:	d132      	bne.n	80020c4 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800205e:	4b49      	ldr	r3, [pc, #292]	; (8002184 <HAL_GPIO_DeInit+0x1e0>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	43db      	mvns	r3, r3
 8002066:	4947      	ldr	r1, [pc, #284]	; (8002184 <HAL_GPIO_DeInit+0x1e0>)
 8002068:	4013      	ands	r3, r2
 800206a:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800206c:	4b45      	ldr	r3, [pc, #276]	; (8002184 <HAL_GPIO_DeInit+0x1e0>)
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	693b      	ldr	r3, [r7, #16]
 8002072:	43db      	mvns	r3, r3
 8002074:	4943      	ldr	r1, [pc, #268]	; (8002184 <HAL_GPIO_DeInit+0x1e0>)
 8002076:	4013      	ands	r3, r2
 8002078:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800207a:	4b42      	ldr	r3, [pc, #264]	; (8002184 <HAL_GPIO_DeInit+0x1e0>)
 800207c:	68da      	ldr	r2, [r3, #12]
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	43db      	mvns	r3, r3
 8002082:	4940      	ldr	r1, [pc, #256]	; (8002184 <HAL_GPIO_DeInit+0x1e0>)
 8002084:	4013      	ands	r3, r2
 8002086:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002088:	4b3e      	ldr	r3, [pc, #248]	; (8002184 <HAL_GPIO_DeInit+0x1e0>)
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	43db      	mvns	r3, r3
 8002090:	493c      	ldr	r1, [pc, #240]	; (8002184 <HAL_GPIO_DeInit+0x1e0>)
 8002092:	4013      	ands	r3, r2
 8002094:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	f003 0303 	and.w	r3, r3, #3
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	220f      	movs	r2, #15
 80020a0:	fa02 f303 	lsl.w	r3, r2, r3
 80020a4:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80020a6:	4a2f      	ldr	r2, [pc, #188]	; (8002164 <HAL_GPIO_DeInit+0x1c0>)
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	089b      	lsrs	r3, r3, #2
 80020ac:	3302      	adds	r3, #2
 80020ae:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	43da      	mvns	r2, r3
 80020b6:	482b      	ldr	r0, [pc, #172]	; (8002164 <HAL_GPIO_DeInit+0x1c0>)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	089b      	lsrs	r3, r3, #2
 80020bc:	400a      	ands	r2, r1
 80020be:	3302      	adds	r3, #2
 80020c0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	005b      	lsls	r3, r3, #1
 80020cc:	2103      	movs	r1, #3
 80020ce:	fa01 f303 	lsl.w	r3, r1, r3
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	08da      	lsrs	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3208      	adds	r2, #8
 80020e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	220f      	movs	r2, #15
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	697a      	ldr	r2, [r7, #20]
 80020f6:	08d2      	lsrs	r2, r2, #3
 80020f8:	4019      	ands	r1, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3208      	adds	r2, #8
 80020fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	689a      	ldr	r2, [r3, #8]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	2103      	movs	r1, #3
 800210c:	fa01 f303 	lsl.w	r3, r1, r3
 8002110:	43db      	mvns	r3, r3
 8002112:	401a      	ands	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	2101      	movs	r1, #1
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	fa01 f303 	lsl.w	r3, r1, r3
 8002124:	43db      	mvns	r3, r3
 8002126:	401a      	ands	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68da      	ldr	r2, [r3, #12]
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	2103      	movs	r1, #3
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	43db      	mvns	r3, r3
 800213c:	401a      	ands	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	3301      	adds	r3, #1
 8002146:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	fa22 f303 	lsr.w	r3, r2, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	f47f af2f 	bne.w	8001fb4 <HAL_GPIO_DeInit+0x10>
  }
}
 8002156:	bf00      	nop
 8002158:	bf00      	nop
 800215a:	371c      	adds	r7, #28
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr
 8002164:	40010000 	.word	0x40010000
 8002168:	48000400 	.word	0x48000400
 800216c:	48000800 	.word	0x48000800
 8002170:	48000c00 	.word	0x48000c00
 8002174:	48001000 	.word	0x48001000
 8002178:	48001400 	.word	0x48001400
 800217c:	48001800 	.word	0x48001800
 8002180:	48001c00 	.word	0x48001c00
 8002184:	40010400 	.word	0x40010400

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80021a4:	e002      	b.n	80021ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80021a6:	887a      	ldrh	r2, [r7, #2]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80021ca:	887a      	ldrh	r2, [r7, #2]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	4013      	ands	r3, r2
 80021d0:	041a      	lsls	r2, r3, #16
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	43d9      	mvns	r1, r3
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	400b      	ands	r3, r1
 80021da:	431a      	orrs	r2, r3
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	619a      	str	r2, [r3, #24]
}
 80021e0:	bf00      	nop
 80021e2:	3714      	adds	r7, #20
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr

080021ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021f6:	4b08      	ldr	r3, [pc, #32]	; (8002218 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021f8:	695a      	ldr	r2, [r3, #20]
 80021fa:	88fb      	ldrh	r3, [r7, #6]
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d006      	beq.n	8002210 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002202:	4a05      	ldr	r2, [pc, #20]	; (8002218 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002204:	88fb      	ldrh	r3, [r7, #6]
 8002206:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002208:	88fb      	ldrh	r3, [r7, #6]
 800220a:	4618      	mov	r0, r3
 800220c:	f008 f878 	bl	800a300 <HAL_GPIO_EXTI_Callback>
  }
}
 8002210:	bf00      	nop
 8002212:	3708      	adds	r7, #8
 8002214:	46bd      	mov	sp, r7
 8002216:	bd80      	pop	{r7, pc}
 8002218:	40010400 	.word	0x40010400

0800221c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b082      	sub	sp, #8
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e081      	b.n	8002332 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	d106      	bne.n	8002248 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f009 fe8a 	bl	800bf5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	; 0x24
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	685a      	ldr	r2, [r3, #4]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800226c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800227c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	68db      	ldr	r3, [r3, #12]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d107      	bne.n	8002296 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	689a      	ldr	r2, [r3, #8]
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002292:	609a      	str	r2, [r3, #8]
 8002294:	e006      	b.n	80022a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	689a      	ldr	r2, [r3, #8]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80022a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68db      	ldr	r3, [r3, #12]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d104      	bne.n	80022b6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80022b4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	687a      	ldr	r2, [r7, #4]
 80022be:	6812      	ldr	r2, [r2, #0]
 80022c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80022c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80022d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	691a      	ldr	r2, [r3, #16]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	699b      	ldr	r3, [r3, #24]
 80022ea:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	430a      	orrs	r2, r1
 80022f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69d9      	ldr	r1, [r3, #28]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1a      	ldr	r2, [r3, #32]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681a      	ldr	r2, [r3, #0]
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f042 0201 	orr.w	r2, r2, #1
 8002312:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2200      	movs	r2, #0
 8002318:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2200      	movs	r2, #0
 8002326:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800233a:	b580      	push	{r7, lr}
 800233c:	b082      	sub	sp, #8
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e021      	b.n	8002390 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2224      	movs	r2, #36	; 0x24
 8002350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f022 0201 	bic.w	r2, r2, #1
 8002362:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f009 fe57 	bl	800c018 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2200      	movs	r2, #0
 800236e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2200      	movs	r2, #0
 8002374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	2200      	movs	r2, #0
 800237c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2200      	movs	r2, #0
 8002382:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800238e:	2300      	movs	r3, #0
}
 8002390:	4618      	mov	r0, r3
 8002392:	3708      	adds	r7, #8
 8002394:	46bd      	mov	sp, r7
 8002396:	bd80      	pop	{r7, pc}

08002398 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af02      	add	r7, sp, #8
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	4608      	mov	r0, r1
 80023a2:	4611      	mov	r1, r2
 80023a4:	461a      	mov	r2, r3
 80023a6:	4603      	mov	r3, r0
 80023a8:	817b      	strh	r3, [r7, #10]
 80023aa:	460b      	mov	r3, r1
 80023ac:	813b      	strh	r3, [r7, #8]
 80023ae:	4613      	mov	r3, r2
 80023b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	2b20      	cmp	r3, #32
 80023bc:	f040 80f9 	bne.w	80025b2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c0:	6a3b      	ldr	r3, [r7, #32]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d002      	beq.n	80023cc <HAL_I2C_Mem_Write+0x34>
 80023c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d105      	bne.n	80023d8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80023d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e0ed      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023de:	2b01      	cmp	r3, #1
 80023e0:	d101      	bne.n	80023e6 <HAL_I2C_Mem_Write+0x4e>
 80023e2:	2302      	movs	r3, #2
 80023e4:	e0e6      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023ee:	f7fe f8f1 	bl	80005d4 <HAL_GetTick>
 80023f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2319      	movs	r3, #25
 80023fa:	2201      	movs	r2, #1
 80023fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 fac3 	bl	800298c <I2C_WaitOnFlagUntilTimeout>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d001      	beq.n	8002410 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e0d1      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	2221      	movs	r2, #33	; 0x21
 8002414:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2240      	movs	r2, #64	; 0x40
 800241c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	2200      	movs	r2, #0
 8002424:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	6a3a      	ldr	r2, [r7, #32]
 800242a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002430:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002438:	88f8      	ldrh	r0, [r7, #6]
 800243a:	893a      	ldrh	r2, [r7, #8]
 800243c:	8979      	ldrh	r1, [r7, #10]
 800243e:	697b      	ldr	r3, [r7, #20]
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	4603      	mov	r3, r0
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f9d3 	bl	80027f4 <I2C_RequestMemoryWrite>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d005      	beq.n	8002460 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e0a9      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002464:	b29b      	uxth	r3, r3
 8002466:	2bff      	cmp	r3, #255	; 0xff
 8002468:	d90e      	bls.n	8002488 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	22ff      	movs	r2, #255	; 0xff
 800246e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002474:	b2da      	uxtb	r2, r3
 8002476:	8979      	ldrh	r1, [r7, #10]
 8002478:	2300      	movs	r3, #0
 800247a:	9300      	str	r3, [sp, #0]
 800247c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002480:	68f8      	ldr	r0, [r7, #12]
 8002482:	f000 fc2b 	bl	8002cdc <I2C_TransferConfig>
 8002486:	e00f      	b.n	80024a8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800248c:	b29a      	uxth	r2, r3
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002496:	b2da      	uxtb	r2, r3
 8002498:	8979      	ldrh	r1, [r7, #10]
 800249a:	2300      	movs	r3, #0
 800249c:	9300      	str	r3, [sp, #0]
 800249e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024a2:	68f8      	ldr	r0, [r7, #12]
 80024a4:	f000 fc1a 	bl	8002cdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024a8:	697a      	ldr	r2, [r7, #20]
 80024aa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024ac:	68f8      	ldr	r0, [r7, #12]
 80024ae:	f000 faad 	bl	8002a0c <I2C_WaitOnTXISFlagUntilTimeout>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d001      	beq.n	80024bc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80024b8:	2301      	movs	r3, #1
 80024ba:	e07b      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	781a      	ldrb	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024e4:	3b01      	subs	r3, #1
 80024e6:	b29a      	uxth	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f0:	b29b      	uxth	r3, r3
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d034      	beq.n	8002560 <HAL_I2C_Mem_Write+0x1c8>
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d130      	bne.n	8002560 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	9300      	str	r3, [sp, #0]
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	2200      	movs	r2, #0
 8002506:	2180      	movs	r1, #128	; 0x80
 8002508:	68f8      	ldr	r0, [r7, #12]
 800250a:	f000 fa3f 	bl	800298c <I2C_WaitOnFlagUntilTimeout>
 800250e:	4603      	mov	r3, r0
 8002510:	2b00      	cmp	r3, #0
 8002512:	d001      	beq.n	8002518 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	e04d      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800251c:	b29b      	uxth	r3, r3
 800251e:	2bff      	cmp	r3, #255	; 0xff
 8002520:	d90e      	bls.n	8002540 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	22ff      	movs	r2, #255	; 0xff
 8002526:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800252c:	b2da      	uxtb	r2, r3
 800252e:	8979      	ldrh	r1, [r7, #10]
 8002530:	2300      	movs	r3, #0
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002538:	68f8      	ldr	r0, [r7, #12]
 800253a:	f000 fbcf 	bl	8002cdc <I2C_TransferConfig>
 800253e:	e00f      	b.n	8002560 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002544:	b29a      	uxth	r2, r3
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800254e:	b2da      	uxtb	r2, r3
 8002550:	8979      	ldrh	r1, [r7, #10]
 8002552:	2300      	movs	r3, #0
 8002554:	9300      	str	r3, [sp, #0]
 8002556:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 fbbe 	bl	8002cdc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002564:	b29b      	uxth	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d19e      	bne.n	80024a8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f000 fa8c 	bl	8002a8c <I2C_WaitOnSTOPFlagUntilTimeout>
 8002574:	4603      	mov	r3, r0
 8002576:	2b00      	cmp	r3, #0
 8002578:	d001      	beq.n	800257e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e01a      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	2220      	movs	r2, #32
 8002584:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6859      	ldr	r1, [r3, #4]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	4b0a      	ldr	r3, [pc, #40]	; (80025bc <HAL_I2C_Mem_Write+0x224>)
 8002592:	400b      	ands	r3, r1
 8002594:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2220      	movs	r2, #32
 800259a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	e000      	b.n	80025b4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80025b2:	2302      	movs	r3, #2
  }
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3718      	adds	r7, #24
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	fe00e800 	.word	0xfe00e800

080025c0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af02      	add	r7, sp, #8
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	4608      	mov	r0, r1
 80025ca:	4611      	mov	r1, r2
 80025cc:	461a      	mov	r2, r3
 80025ce:	4603      	mov	r3, r0
 80025d0:	817b      	strh	r3, [r7, #10]
 80025d2:	460b      	mov	r3, r1
 80025d4:	813b      	strh	r3, [r7, #8]
 80025d6:	4613      	mov	r3, r2
 80025d8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b20      	cmp	r3, #32
 80025e4:	f040 80fd 	bne.w	80027e2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d002      	beq.n	80025f4 <HAL_I2C_Mem_Read+0x34>
 80025ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80025fa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	e0f1      	b.n	80027e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_I2C_Mem_Read+0x4e>
 800260a:	2302      	movs	r3, #2
 800260c:	e0ea      	b.n	80027e4 <HAL_I2C_Mem_Read+0x224>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002616:	f7fd ffdd 	bl	80005d4 <HAL_GetTick>
 800261a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	9300      	str	r3, [sp, #0]
 8002620:	2319      	movs	r3, #25
 8002622:	2201      	movs	r2, #1
 8002624:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002628:	68f8      	ldr	r0, [r7, #12]
 800262a:	f000 f9af 	bl	800298c <I2C_WaitOnFlagUntilTimeout>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002634:	2301      	movs	r3, #1
 8002636:	e0d5      	b.n	80027e4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2222      	movs	r2, #34	; 0x22
 800263c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2240      	movs	r2, #64	; 0x40
 8002644:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	2200      	movs	r2, #0
 800264c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6a3a      	ldr	r2, [r7, #32]
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002658:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	2200      	movs	r2, #0
 800265e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002660:	88f8      	ldrh	r0, [r7, #6]
 8002662:	893a      	ldrh	r2, [r7, #8]
 8002664:	8979      	ldrh	r1, [r7, #10]
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	4603      	mov	r3, r0
 8002670:	68f8      	ldr	r0, [r7, #12]
 8002672:	f000 f913 	bl	800289c <I2C_RequestMemoryRead>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d005      	beq.n	8002688 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	e0ad      	b.n	80027e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800268c:	b29b      	uxth	r3, r3
 800268e:	2bff      	cmp	r3, #255	; 0xff
 8002690:	d90e      	bls.n	80026b0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	22ff      	movs	r2, #255	; 0xff
 8002696:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800269c:	b2da      	uxtb	r2, r3
 800269e:	8979      	ldrh	r1, [r7, #10]
 80026a0:	4b52      	ldr	r3, [pc, #328]	; (80027ec <HAL_I2C_Mem_Read+0x22c>)
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026a8:	68f8      	ldr	r0, [r7, #12]
 80026aa:	f000 fb17 	bl	8002cdc <I2C_TransferConfig>
 80026ae:	e00f      	b.n	80026d0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026b4:	b29a      	uxth	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80026be:	b2da      	uxtb	r2, r3
 80026c0:	8979      	ldrh	r1, [r7, #10]
 80026c2:	4b4a      	ldr	r3, [pc, #296]	; (80027ec <HAL_I2C_Mem_Read+0x22c>)
 80026c4:	9300      	str	r3, [sp, #0]
 80026c6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f000 fb06 	bl	8002cdc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	2200      	movs	r2, #0
 80026d8:	2104      	movs	r1, #4
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f000 f956 	bl	800298c <I2C_WaitOnFlagUntilTimeout>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d001      	beq.n	80026ea <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e07c      	b.n	80027e4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002706:	3b01      	subs	r3, #1
 8002708:	b29a      	uxth	r2, r3
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002712:	b29b      	uxth	r3, r3
 8002714:	3b01      	subs	r3, #1
 8002716:	b29a      	uxth	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002720:	b29b      	uxth	r3, r3
 8002722:	2b00      	cmp	r3, #0
 8002724:	d034      	beq.n	8002790 <HAL_I2C_Mem_Read+0x1d0>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800272a:	2b00      	cmp	r3, #0
 800272c:	d130      	bne.n	8002790 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800272e:	697b      	ldr	r3, [r7, #20]
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002734:	2200      	movs	r2, #0
 8002736:	2180      	movs	r1, #128	; 0x80
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f927 	bl	800298c <I2C_WaitOnFlagUntilTimeout>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d001      	beq.n	8002748 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002744:	2301      	movs	r3, #1
 8002746:	e04d      	b.n	80027e4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800274c:	b29b      	uxth	r3, r3
 800274e:	2bff      	cmp	r3, #255	; 0xff
 8002750:	d90e      	bls.n	8002770 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	22ff      	movs	r2, #255	; 0xff
 8002756:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800275c:	b2da      	uxtb	r2, r3
 800275e:	8979      	ldrh	r1, [r7, #10]
 8002760:	2300      	movs	r3, #0
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002768:	68f8      	ldr	r0, [r7, #12]
 800276a:	f000 fab7 	bl	8002cdc <I2C_TransferConfig>
 800276e:	e00f      	b.n	8002790 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29a      	uxth	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800277e:	b2da      	uxtb	r2, r3
 8002780:	8979      	ldrh	r1, [r7, #10]
 8002782:	2300      	movs	r3, #0
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800278a:	68f8      	ldr	r0, [r7, #12]
 800278c:	f000 faa6 	bl	8002cdc <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002794:	b29b      	uxth	r3, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d19a      	bne.n	80026d0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800279a:	697a      	ldr	r2, [r7, #20]
 800279c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f974 	bl	8002a8c <I2C_WaitOnSTOPFlagUntilTimeout>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e01a      	b.n	80027e4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2220      	movs	r2, #32
 80027b4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	6859      	ldr	r1, [r3, #4]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b0b      	ldr	r3, [pc, #44]	; (80027f0 <HAL_I2C_Mem_Read+0x230>)
 80027c2:	400b      	ands	r3, r1
 80027c4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2200      	movs	r2, #0
 80027d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80027de:	2300      	movs	r3, #0
 80027e0:	e000      	b.n	80027e4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80027e2:	2302      	movs	r3, #2
  }
}
 80027e4:	4618      	mov	r0, r3
 80027e6:	3718      	adds	r7, #24
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	80002400 	.word	0x80002400
 80027f0:	fe00e800 	.word	0xfe00e800

080027f4 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b086      	sub	sp, #24
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	60f8      	str	r0, [r7, #12]
 80027fc:	4608      	mov	r0, r1
 80027fe:	4611      	mov	r1, r2
 8002800:	461a      	mov	r2, r3
 8002802:	4603      	mov	r3, r0
 8002804:	817b      	strh	r3, [r7, #10]
 8002806:	460b      	mov	r3, r1
 8002808:	813b      	strh	r3, [r7, #8]
 800280a:	4613      	mov	r3, r2
 800280c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	b2da      	uxtb	r2, r3
 8002812:	8979      	ldrh	r1, [r7, #10]
 8002814:	4b20      	ldr	r3, [pc, #128]	; (8002898 <I2C_RequestMemoryWrite+0xa4>)
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800281c:	68f8      	ldr	r0, [r7, #12]
 800281e:	f000 fa5d 	bl	8002cdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	69b9      	ldr	r1, [r7, #24]
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f8f0 	bl	8002a0c <I2C_WaitOnTXISFlagUntilTimeout>
 800282c:	4603      	mov	r3, r0
 800282e:	2b00      	cmp	r3, #0
 8002830:	d001      	beq.n	8002836 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e02c      	b.n	8002890 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002836:	88fb      	ldrh	r3, [r7, #6]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d105      	bne.n	8002848 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800283c:	893b      	ldrh	r3, [r7, #8]
 800283e:	b2da      	uxtb	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	629a      	str	r2, [r3, #40]	; 0x28
 8002846:	e015      	b.n	8002874 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002848:	893b      	ldrh	r3, [r7, #8]
 800284a:	0a1b      	lsrs	r3, r3, #8
 800284c:	b29b      	uxth	r3, r3
 800284e:	b2da      	uxtb	r2, r3
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002856:	69fa      	ldr	r2, [r7, #28]
 8002858:	69b9      	ldr	r1, [r7, #24]
 800285a:	68f8      	ldr	r0, [r7, #12]
 800285c:	f000 f8d6 	bl	8002a0c <I2C_WaitOnTXISFlagUntilTimeout>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e012      	b.n	8002890 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800286a:	893b      	ldrh	r3, [r7, #8]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	2200      	movs	r2, #0
 800287c:	2180      	movs	r1, #128	; 0x80
 800287e:	68f8      	ldr	r0, [r7, #12]
 8002880:	f000 f884 	bl	800298c <I2C_WaitOnFlagUntilTimeout>
 8002884:	4603      	mov	r3, r0
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e000      	b.n	8002890 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800288e:	2300      	movs	r3, #0
}
 8002890:	4618      	mov	r0, r3
 8002892:	3710      	adds	r7, #16
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}
 8002898:	80002000 	.word	0x80002000

0800289c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af02      	add	r7, sp, #8
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	4608      	mov	r0, r1
 80028a6:	4611      	mov	r1, r2
 80028a8:	461a      	mov	r2, r3
 80028aa:	4603      	mov	r3, r0
 80028ac:	817b      	strh	r3, [r7, #10]
 80028ae:	460b      	mov	r3, r1
 80028b0:	813b      	strh	r3, [r7, #8]
 80028b2:	4613      	mov	r3, r2
 80028b4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80028b6:	88fb      	ldrh	r3, [r7, #6]
 80028b8:	b2da      	uxtb	r2, r3
 80028ba:	8979      	ldrh	r1, [r7, #10]
 80028bc:	4b20      	ldr	r3, [pc, #128]	; (8002940 <I2C_RequestMemoryRead+0xa4>)
 80028be:	9300      	str	r3, [sp, #0]
 80028c0:	2300      	movs	r3, #0
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 fa0a 	bl	8002cdc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028c8:	69fa      	ldr	r2, [r7, #28]
 80028ca:	69b9      	ldr	r1, [r7, #24]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 f89d 	bl	8002a0c <I2C_WaitOnTXISFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e02c      	b.n	8002936 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028dc:	88fb      	ldrh	r3, [r7, #6]
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d105      	bne.n	80028ee <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80028e2:	893b      	ldrh	r3, [r7, #8]
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	629a      	str	r2, [r3, #40]	; 0x28
 80028ec:	e015      	b.n	800291a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80028ee:	893b      	ldrh	r3, [r7, #8]
 80028f0:	0a1b      	lsrs	r3, r3, #8
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	b2da      	uxtb	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028fc:	69fa      	ldr	r2, [r7, #28]
 80028fe:	69b9      	ldr	r1, [r7, #24]
 8002900:	68f8      	ldr	r0, [r7, #12]
 8002902:	f000 f883 	bl	8002a0c <I2C_WaitOnTXISFlagUntilTimeout>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d001      	beq.n	8002910 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800290c:	2301      	movs	r3, #1
 800290e:	e012      	b.n	8002936 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002910:	893b      	ldrh	r3, [r7, #8]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800291a:	69fb      	ldr	r3, [r7, #28]
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	69bb      	ldr	r3, [r7, #24]
 8002920:	2200      	movs	r2, #0
 8002922:	2140      	movs	r1, #64	; 0x40
 8002924:	68f8      	ldr	r0, [r7, #12]
 8002926:	f000 f831 	bl	800298c <I2C_WaitOnFlagUntilTimeout>
 800292a:	4603      	mov	r3, r0
 800292c:	2b00      	cmp	r3, #0
 800292e:	d001      	beq.n	8002934 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8002930:	2301      	movs	r3, #1
 8002932:	e000      	b.n	8002936 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002934:	2300      	movs	r3, #0
}
 8002936:	4618      	mov	r0, r3
 8002938:	3710      	adds	r7, #16
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	80002000 	.word	0x80002000

08002944 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b02      	cmp	r3, #2
 8002958:	d103      	bne.n	8002962 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2200      	movs	r2, #0
 8002960:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	699b      	ldr	r3, [r3, #24]
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	2b01      	cmp	r3, #1
 800296e:	d007      	beq.n	8002980 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	699a      	ldr	r2, [r3, #24]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f042 0201 	orr.w	r2, r2, #1
 800297e:	619a      	str	r2, [r3, #24]
  }
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b084      	sub	sp, #16
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	603b      	str	r3, [r7, #0]
 8002998:	4613      	mov	r3, r2
 800299a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800299c:	e022      	b.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029a4:	d01e      	beq.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029a6:	f7fd fe15 	bl	80005d4 <HAL_GetTick>
 80029aa:	4602      	mov	r2, r0
 80029ac:	69bb      	ldr	r3, [r7, #24]
 80029ae:	1ad3      	subs	r3, r2, r3
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d302      	bcc.n	80029bc <I2C_WaitOnFlagUntilTimeout+0x30>
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d113      	bne.n	80029e4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029c0:	f043 0220 	orr.w	r2, r3, #32
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	2220      	movs	r2, #32
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	2200      	movs	r2, #0
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	e00f      	b.n	8002a04 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	699a      	ldr	r2, [r3, #24]
 80029ea:	68bb      	ldr	r3, [r7, #8]
 80029ec:	4013      	ands	r3, r2
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	bf0c      	ite	eq
 80029f4:	2301      	moveq	r3, #1
 80029f6:	2300      	movne	r3, #0
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	79fb      	ldrb	r3, [r7, #7]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d0cd      	beq.n	800299e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a02:	2300      	movs	r3, #0
}
 8002a04:	4618      	mov	r0, r3
 8002a06:	3710      	adds	r7, #16
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	bd80      	pop	{r7, pc}

08002a0c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	60f8      	str	r0, [r7, #12]
 8002a14:	60b9      	str	r1, [r7, #8]
 8002a16:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a18:	e02c      	b.n	8002a74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	68b9      	ldr	r1, [r7, #8]
 8002a1e:	68f8      	ldr	r0, [r7, #12]
 8002a20:	f000 f870 	bl	8002b04 <I2C_IsErrorOccurred>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	e02a      	b.n	8002a84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a34:	d01e      	beq.n	8002a74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a36:	f7fd fdcd 	bl	80005d4 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	68ba      	ldr	r2, [r7, #8]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d302      	bcc.n	8002a4c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d113      	bne.n	8002a74 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a50:	f043 0220 	orr.w	r2, r3, #32
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2220      	movs	r2, #32
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8002a70:	2301      	movs	r3, #1
 8002a72:	e007      	b.n	8002a84 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d1cb      	bne.n	8002a1a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a82:	2300      	movs	r3, #0
}
 8002a84:	4618      	mov	r0, r3
 8002a86:	3710      	adds	r7, #16
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002a98:	e028      	b.n	8002aec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	68b9      	ldr	r1, [r7, #8]
 8002a9e:	68f8      	ldr	r0, [r7, #12]
 8002aa0:	f000 f830 	bl	8002b04 <I2C_IsErrorOccurred>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e026      	b.n	8002afc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aae:	f7fd fd91 	bl	80005d4 <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	68ba      	ldr	r2, [r7, #8]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d302      	bcc.n	8002ac4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d113      	bne.n	8002aec <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	f043 0220 	orr.w	r2, r3, #32
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	2220      	movs	r2, #32
 8002ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e007      	b.n	8002afc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	f003 0320 	and.w	r3, r3, #32
 8002af6:	2b20      	cmp	r3, #32
 8002af8:	d1cf      	bne.n	8002a9a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3710      	adds	r7, #16
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}

08002b04 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b08a      	sub	sp, #40	; 0x28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b10:	2300      	movs	r3, #0
 8002b12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	699b      	ldr	r3, [r3, #24]
 8002b1c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002b26:	69bb      	ldr	r3, [r7, #24]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d075      	beq.n	8002c1c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2210      	movs	r2, #16
 8002b36:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002b38:	e056      	b.n	8002be8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b40:	d052      	beq.n	8002be8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b42:	f7fd fd47 	bl	80005d4 <HAL_GetTick>
 8002b46:	4602      	mov	r2, r0
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	1ad3      	subs	r3, r2, r3
 8002b4c:	68ba      	ldr	r2, [r7, #8]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d302      	bcc.n	8002b58 <I2C_IsErrorOccurred+0x54>
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d147      	bne.n	8002be8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	685b      	ldr	r3, [r3, #4]
 8002b5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b62:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002b6a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	699b      	ldr	r3, [r3, #24]
 8002b72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b7a:	d12e      	bne.n	8002bda <I2C_IsErrorOccurred+0xd6>
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b82:	d02a      	beq.n	8002bda <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8002b84:	7cfb      	ldrb	r3, [r7, #19]
 8002b86:	2b20      	cmp	r3, #32
 8002b88:	d027      	beq.n	8002bda <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	685a      	ldr	r2, [r3, #4]
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002b98:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002b9a:	f7fd fd1b 	bl	80005d4 <HAL_GetTick>
 8002b9e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002ba0:	e01b      	b.n	8002bda <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002ba2:	f7fd fd17 	bl	80005d4 <HAL_GetTick>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b19      	cmp	r3, #25
 8002bae:	d914      	bls.n	8002bda <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bb4:	f043 0220 	orr.w	r2, r3, #32
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2220      	movs	r2, #32
 8002bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b20      	cmp	r3, #32
 8002be6:	d1dc      	bne.n	8002ba2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f003 0320 	and.w	r3, r3, #32
 8002bf2:	2b20      	cmp	r3, #32
 8002bf4:	d003      	beq.n	8002bfe <I2C_IsErrorOccurred+0xfa>
 8002bf6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d09d      	beq.n	8002b3a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002bfe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d103      	bne.n	8002c0e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002c0e:	6a3b      	ldr	r3, [r7, #32]
 8002c10:	f043 0304 	orr.w	r3, r3, #4
 8002c14:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	699b      	ldr	r3, [r3, #24]
 8002c22:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00b      	beq.n	8002c46 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002c2e:	6a3b      	ldr	r3, [r7, #32]
 8002c30:	f043 0301 	orr.w	r3, r3, #1
 8002c34:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c3e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002c46:	69bb      	ldr	r3, [r7, #24]
 8002c48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00b      	beq.n	8002c68 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002c50:	6a3b      	ldr	r3, [r7, #32]
 8002c52:	f043 0308 	orr.w	r3, r3, #8
 8002c56:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c60:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00b      	beq.n	8002c8a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	f043 0302 	orr.w	r3, r3, #2
 8002c78:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c82:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002c8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d01c      	beq.n	8002ccc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7ff fe56 	bl	8002944 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	6859      	ldr	r1, [r3, #4]
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	4b0d      	ldr	r3, [pc, #52]	; (8002cd8 <I2C_IsErrorOccurred+0x1d4>)
 8002ca4:	400b      	ands	r3, r1
 8002ca6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cac:	6a3b      	ldr	r3, [r7, #32]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002ccc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	3728      	adds	r7, #40	; 0x28
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}
 8002cd8:	fe00e800 	.word	0xfe00e800

08002cdc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b087      	sub	sp, #28
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	60f8      	str	r0, [r7, #12]
 8002ce4:	607b      	str	r3, [r7, #4]
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	817b      	strh	r3, [r7, #10]
 8002cea:	4613      	mov	r3, r2
 8002cec:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cee:	897b      	ldrh	r3, [r7, #10]
 8002cf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cf4:	7a7b      	ldrb	r3, [r7, #9]
 8002cf6:	041b      	lsls	r3, r3, #16
 8002cf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002cfc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	4313      	orrs	r3, r2
 8002d06:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d0a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	685a      	ldr	r2, [r3, #4]
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	0d5b      	lsrs	r3, r3, #21
 8002d16:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8002d1a:	4b08      	ldr	r3, [pc, #32]	; (8002d3c <I2C_TransferConfig+0x60>)
 8002d1c:	430b      	orrs	r3, r1
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	ea02 0103 	and.w	r1, r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	697a      	ldr	r2, [r7, #20]
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	03ff63ff 	.word	0x03ff63ff

08002d40 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	2b20      	cmp	r3, #32
 8002d54:	d138      	bne.n	8002dc8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e032      	b.n	8002dca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2224      	movs	r2, #36	; 0x24
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	681a      	ldr	r2, [r3, #0]
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f022 0201 	bic.w	r2, r2, #1
 8002d82:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002d92:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6819      	ldr	r1, [r3, #0]
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	681a      	ldr	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f042 0201 	orr.w	r2, r2, #1
 8002db2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2220      	movs	r2, #32
 8002db8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr

08002dd6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002dd6:	b480      	push	{r7}
 8002dd8:	b085      	sub	sp, #20
 8002dda:	af00      	add	r7, sp, #0
 8002ddc:	6078      	str	r0, [r7, #4]
 8002dde:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b20      	cmp	r3, #32
 8002dea:	d139      	bne.n	8002e60 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d101      	bne.n	8002dfa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002df6:	2302      	movs	r3, #2
 8002df8:	e033      	b.n	8002e62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2224      	movs	r2, #36	; 0x24
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e28:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	021b      	lsls	r3, r3, #8
 8002e2e:	68fa      	ldr	r2, [r7, #12]
 8002e30:	4313      	orrs	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	681a      	ldr	r2, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	e000      	b.n	8002e62 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002e60:	2302      	movs	r3, #2
  }
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	3714      	adds	r7, #20
 8002e66:	46bd      	mov	sp, r7
 8002e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6c:	4770      	bx	lr
	...

08002e70 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002e7c:	f7fd fbaa 	bl	80005d4 <HAL_GetTick>
 8002e80:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d102      	bne.n	8002e8e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	73fb      	strb	r3, [r7, #15]
 8002e8c:	e092      	b.n	8002fb4 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f040 808b 	bne.w	8002fb4 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002e9e:	6878      	ldr	r0, [r7, #4]
 8002ea0:	f009 f8de 	bl	800c060 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002ea4:	f241 3188 	movw	r1, #5000	; 0x1388
 8002ea8:	6878      	ldr	r0, [r7, #4]
 8002eaa:	f000 fad0 	bl	800344e <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	4b42      	ldr	r3, [pc, #264]	; (8002fc0 <HAL_OSPI_Init+0x150>)
 8002eb6:	4013      	ands	r3, r2
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	68d1      	ldr	r1, [r2, #12]
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	6912      	ldr	r2, [r2, #16]
 8002ec0:	3a01      	subs	r2, #1
 8002ec2:	0412      	lsls	r2, r2, #16
 8002ec4:	4311      	orrs	r1, r2
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	6952      	ldr	r2, [r2, #20]
 8002eca:	3a01      	subs	r2, #1
 8002ecc:	0212      	lsls	r2, r2, #8
 8002ece:	4311      	orrs	r1, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002ed4:	4311      	orrs	r1, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	69d2      	ldr	r2, [r2, #28]
 8002eda:	4311      	orrs	r1, r2
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6812      	ldr	r2, [r2, #0]
 8002ee0:	430b      	orrs	r3, r1
 8002ee2:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	0412      	lsls	r2, r2, #16
 8002eee:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	021a      	lsls	r2, r3, #8
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0e:	9300      	str	r3, [sp, #0]
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	2200      	movs	r2, #0
 8002f14:	2120      	movs	r1, #32
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 fddc 	bl	8003ad4 <OSPI_WaitFlagStateUntilTimeout>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8002f20:	7bfb      	ldrb	r3, [r7, #15]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d146      	bne.n	8002fb4 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a1b      	ldr	r3, [r3, #32]
 8002f34:	1e5a      	subs	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	430a      	orrs	r2, r1
 8002f3c:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002f5c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f68:	431a      	orrs	r2, r3
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f042 0201 	orr.w	r2, r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d107      	bne.n	8002f9c <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689a      	ldr	r2, [r3, #8]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f042 0202 	orr.w	r2, r2, #2
 8002f9a:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fa4:	d103      	bne.n	8002fae <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	645a      	str	r2, [r3, #68]	; 0x44
 8002fac:	e002      	b.n	8002fb4 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	f8e0f8f4 	.word	0xf8e0f8f4

08002fc4 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d102      	bne.n	8002fdc <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	73fb      	strb	r3, [r7, #15]
 8002fda:	e015      	b.n	8003008 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689a      	ldr	r2, [r3, #8]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f022 0202 	bic.w	r2, r2, #2
 8002ffa:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f009 f89b 	bl	800c138 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8003008:	7bfb      	ldrb	r3, [r7, #15]
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}

08003012 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 8003012:	b580      	push	{r7, lr}
 8003014:	b08a      	sub	sp, #40	; 0x28
 8003016:	af02      	add	r7, sp, #8
 8003018:	60f8      	str	r0, [r7, #12]
 800301a:	60b9      	str	r1, [r7, #8]
 800301c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800301e:	f7fd fad9 	bl	80005d4 <HAL_GetTick>
 8003022:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003028:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	2b02      	cmp	r3, #2
 8003034:	d104      	bne.n	8003040 <HAL_OSPI_Command+0x2e>
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800303e:	d10d      	bne.n	800305c <HAL_OSPI_Command+0x4a>
 8003040:	697b      	ldr	r3, [r7, #20]
 8003042:	2b14      	cmp	r3, #20
 8003044:	d103      	bne.n	800304e <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b02      	cmp	r3, #2
 800304c:	d006      	beq.n	800305c <HAL_OSPI_Command+0x4a>
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	2b24      	cmp	r3, #36	; 0x24
 8003052:	d153      	bne.n	80030fc <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	2b01      	cmp	r3, #1
 800305a:	d14f      	bne.n	80030fc <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2200      	movs	r2, #0
 8003064:	2120      	movs	r1, #32
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f000 fd34 	bl	8003ad4 <OSPI_WaitFlagStateUntilTimeout>
 800306c:	4603      	mov	r3, r0
 800306e:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8003070:	7ffb      	ldrb	r3, [r7, #31]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d148      	bne.n	8003108 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 800307c:	68b9      	ldr	r1, [r7, #8]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fd60 	bl	8003b44 <OSPI_ConfigCmd>
 8003084:	4603      	mov	r3, r0
 8003086:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003088:	7ffb      	ldrb	r3, [r7, #31]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d13c      	bne.n	8003108 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800308e:	68bb      	ldr	r3, [r7, #8]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10e      	bne.n	80030b4 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	9300      	str	r3, [sp, #0]
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	2201      	movs	r2, #1
 800309e:	2102      	movs	r1, #2
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fd17 	bl	8003ad4 <OSPI_WaitFlagStateUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2202      	movs	r2, #2
 80030b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80030b2:	e029      	b.n	8003108 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d103      	bne.n	80030c4 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2204      	movs	r2, #4
 80030c0:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80030c2:	e021      	b.n	8003108 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d10b      	bne.n	80030e4 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030d0:	2b24      	cmp	r3, #36	; 0x24
 80030d2:	d103      	bne.n	80030dc <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2204      	movs	r2, #4
 80030d8:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80030da:	e015      	b.n	8003108 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	2214      	movs	r2, #20
 80030e0:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80030e2:	e011      	b.n	8003108 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e8:	2b14      	cmp	r3, #20
 80030ea:	d103      	bne.n	80030f4 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2204      	movs	r2, #4
 80030f0:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80030f2:	e009      	b.n	8003108 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2224      	movs	r2, #36	; 0x24
 80030f8:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80030fa:	e005      	b.n	8003108 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2210      	movs	r2, #16
 8003104:	649a      	str	r2, [r3, #72]	; 0x48
 8003106:	e000      	b.n	800310a <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8003108:	bf00      	nop
  }

  /* Return function status */
  return status;
 800310a:	7ffb      	ldrb	r3, [r7, #31]
}
 800310c:	4618      	mov	r0, r3
 800310e:	3720      	adds	r7, #32
 8003110:	46bd      	mov	sp, r7
 8003112:	bd80      	pop	{r7, pc}

08003114 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	; 0x28
 8003118:	af02      	add	r7, sp, #8
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003120:	f7fd fa58 	bl	80005d4 <HAL_GetTick>
 8003124:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	3350      	adds	r3, #80	; 0x50
 800312c:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800312e:	68bb      	ldr	r3, [r7, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d105      	bne.n	8003140 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8003134:	2301      	movs	r3, #1
 8003136:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2208      	movs	r2, #8
 800313c:	649a      	str	r2, [r3, #72]	; 0x48
 800313e:	e057      	b.n	80031f0 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003144:	2b04      	cmp	r3, #4
 8003146:	d14e      	bne.n	80031e6 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314e:	1c5a      	adds	r2, r3, #1
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	68ba      	ldr	r2, [r7, #8]
 8003160:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003170:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	2201      	movs	r2, #1
 800317a:	2104      	movs	r1, #4
 800317c:	68f8      	ldr	r0, [r7, #12]
 800317e:	f000 fca9 	bl	8003ad4 <OSPI_WaitFlagStateUntilTimeout>
 8003182:	4603      	mov	r3, r0
 8003184:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8003186:	7ffb      	ldrb	r3, [r7, #31]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d113      	bne.n	80031b4 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003190:	781a      	ldrb	r2, [r3, #0]
 8003192:	697b      	ldr	r3, [r7, #20]
 8003194:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800319a:	1c5a      	adds	r2, r3, #1
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a4:	1e5a      	subs	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1df      	bne.n	8003172 <HAL_OSPI_Transmit+0x5e>
 80031b2:	e000      	b.n	80031b6 <HAL_OSPI_Transmit+0xa2>
          break;
 80031b4:	bf00      	nop

      if (status == HAL_OK)
 80031b6:	7ffb      	ldrb	r3, [r7, #31]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d119      	bne.n	80031f0 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	2201      	movs	r2, #1
 80031c4:	2102      	movs	r1, #2
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fc84 	bl	8003ad4 <OSPI_WaitFlagStateUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80031d0:	7ffb      	ldrb	r3, [r7, #31]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d10c      	bne.n	80031f0 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2202      	movs	r2, #2
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	2202      	movs	r2, #2
 80031e2:	645a      	str	r2, [r3, #68]	; 0x44
 80031e4:	e004      	b.n	80031f0 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2210      	movs	r2, #16
 80031ee:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80031f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3720      	adds	r7, #32
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}

080031fa <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80031fa:	b580      	push	{r7, lr}
 80031fc:	b08c      	sub	sp, #48	; 0x30
 80031fe:	af02      	add	r7, sp, #8
 8003200:	60f8      	str	r0, [r7, #12]
 8003202:	60b9      	str	r1, [r7, #8]
 8003204:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003206:	f7fd f9e5 	bl	80005d4 <HAL_GetTick>
 800320a:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	3350      	adds	r3, #80	; 0x50
 8003212:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800321a:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003224:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8003226:	68bb      	ldr	r3, [r7, #8]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d106      	bne.n	800323a <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2208      	movs	r2, #8
 8003236:	649a      	str	r2, [r3, #72]	; 0x48
 8003238:	e07c      	b.n	8003334 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800323e:	2b04      	cmp	r3, #4
 8003240:	d172      	bne.n	8003328 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003248:	1c5a      	adds	r2, r3, #1
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	68ba      	ldr	r2, [r7, #8]
 800325a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800326e:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003278:	d104      	bne.n	8003284 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	649a      	str	r2, [r3, #72]	; 0x48
 8003282:	e011      	b.n	80032a8 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800328c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003290:	2b00      	cmp	r3, #0
 8003292:	d004      	beq.n	800329e <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	649a      	str	r2, [r3, #72]	; 0x48
 800329c:	e004      	b.n	80032a8 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	697a      	ldr	r2, [r7, #20]
 80032a4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	2201      	movs	r2, #1
 80032b0:	2106      	movs	r1, #6
 80032b2:	68f8      	ldr	r0, [r7, #12]
 80032b4:	f000 fc0e 	bl	8003ad4 <OSPI_WaitFlagStateUntilTimeout>
 80032b8:	4603      	mov	r3, r0
 80032ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80032be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d114      	bne.n	80032f0 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ca:	69fa      	ldr	r2, [r7, #28]
 80032cc:	7812      	ldrb	r2, [r2, #0]
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e0:	1e5a      	subs	r2, r3, #1
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1dc      	bne.n	80032a8 <HAL_OSPI_Receive+0xae>
 80032ee:	e000      	b.n	80032f2 <HAL_OSPI_Receive+0xf8>
          break;
 80032f0:	bf00      	nop

      if (status == HAL_OK)
 80032f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d11c      	bne.n	8003334 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	2201      	movs	r2, #1
 8003302:	2102      	movs	r1, #2
 8003304:	68f8      	ldr	r0, [r7, #12]
 8003306:	f000 fbe5 	bl	8003ad4 <OSPI_WaitFlagStateUntilTimeout>
 800330a:	4603      	mov	r3, r0
 800330c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 8003310:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003314:	2b00      	cmp	r3, #0
 8003316:	d10d      	bne.n	8003334 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2202      	movs	r2, #2
 800331e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2202      	movs	r2, #2
 8003324:	645a      	str	r2, [r3, #68]	; 0x44
 8003326:	e005      	b.n	8003334 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2210      	movs	r2, #16
 8003332:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003334:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003338:	4618      	mov	r0, r3
 800333a:	3728      	adds	r7, #40	; 0x28
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}

08003340 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b08a      	sub	sp, #40	; 0x28
 8003344:	af02      	add	r7, sp, #8
 8003346:	60f8      	str	r0, [r7, #12]
 8003348:	60b9      	str	r1, [r7, #8]
 800334a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800334c:	f7fd f942 	bl	80005d4 <HAL_GetTick>
 8003350:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003358:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8003362:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003368:	2b04      	cmp	r3, #4
 800336a:	d164      	bne.n	8003436 <HAL_OSPI_AutoPolling+0xf6>
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	68db      	ldr	r3, [r3, #12]
 8003370:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003374:	d15f      	bne.n	8003436 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	9300      	str	r3, [sp, #0]
 800337a:	69bb      	ldr	r3, [r7, #24]
 800337c:	2200      	movs	r2, #0
 800337e:	2120      	movs	r1, #32
 8003380:	68f8      	ldr	r0, [r7, #12]
 8003382:	f000 fba7 	bl	8003ad4 <OSPI_WaitFlagStateUntilTimeout>
 8003386:	4603      	mov	r3, r0
 8003388:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800338a:	7ffb      	ldrb	r3, [r7, #31]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d158      	bne.n	8003442 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	68ba      	ldr	r2, [r7, #8]
 8003396:	6812      	ldr	r2, [r2, #0]
 8003398:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	6852      	ldr	r2, [r2, #4]
 80033a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	68ba      	ldr	r2, [r7, #8]
 80033ae:	6912      	ldr	r2, [r2, #16]
 80033b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80033be:	68bb      	ldr	r3, [r7, #8]
 80033c0:	6899      	ldr	r1, [r3, #8]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	430b      	orrs	r3, r1
 80033c8:	431a      	orrs	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80033d2:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80033dc:	d104      	bne.n	80033e8 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	697a      	ldr	r2, [r7, #20]
 80033e4:	649a      	str	r2, [r3, #72]	; 0x48
 80033e6:	e011      	b.n	800340c <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80033f0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d004      	beq.n	8003402 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	697a      	ldr	r2, [r7, #20]
 80033fe:	649a      	str	r2, [r3, #72]	; 0x48
 8003400:	e004      	b.n	800340c <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	9300      	str	r3, [sp, #0]
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	2201      	movs	r2, #1
 8003414:	2108      	movs	r1, #8
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f000 fb5c 	bl	8003ad4 <OSPI_WaitFlagStateUntilTimeout>
 800341c:	4603      	mov	r3, r0
 800341e:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8003420:	7ffb      	ldrb	r3, [r7, #31]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10d      	bne.n	8003442 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	2208      	movs	r2, #8
 800342c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2202      	movs	r2, #2
 8003432:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8003434:	e005      	b.n	8003442 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2210      	movs	r2, #16
 800343e:	649a      	str	r2, [r3, #72]	; 0x48
 8003440:	e000      	b.n	8003444 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 8003442:	bf00      	nop
  }

  /* Return function status */
  return status;
 8003444:	7ffb      	ldrb	r3, [r7, #31]
}
 8003446:	4618      	mov	r0, r3
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}

0800344e <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800344e:	b480      	push	{r7}
 8003450:	b083      	sub	sp, #12
 8003452:	af00      	add	r7, sp, #0
 8003454:	6078      	str	r0, [r7, #4]
 8003456:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	683a      	ldr	r2, [r7, #0]
 800345c:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b092      	sub	sp, #72	; 0x48
 8003470:	af00      	add	r7, sp, #0
 8003472:	60f8      	str	r0, [r7, #12]
 8003474:	60b9      	str	r1, [r7, #8]
 8003476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003478:	2300      	movs	r3, #0
 800347a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a08      	ldr	r2, [pc, #32]	; (80034ac <HAL_OSPIM_Config+0x40>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d105      	bne.n	800349a <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800348e:	2300      	movs	r3, #0
 8003490:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8003492:	2301      	movs	r3, #1
 8003494:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8003498:	e004      	b.n	80034a4 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 800349a:	2301      	movs	r3, #1
 800349c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 800349e:	2300      	movs	r3, #0
 80034a0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80034a4:	2300      	movs	r3, #0
 80034a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80034aa:	e01f      	b.n	80034ec <HAL_OSPIM_Config+0x80>
 80034ac:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80034b0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034b4:	3301      	adds	r3, #1
 80034b6:	b2d8      	uxtb	r0, r3
 80034b8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80034bc:	f107 0114 	add.w	r1, r7, #20
 80034c0:	4613      	mov	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4413      	add	r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	4619      	mov	r1, r3
 80034cc:	f000 fc9c 	bl	8003e08 <OSPIM_GetConfig>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d005      	beq.n	80034e2 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2208      	movs	r2, #8
 80034e0:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80034e2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034e6:	3301      	adds	r3, #1
 80034e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80034ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80034f0:	2b01      	cmp	r3, #1
 80034f2:	d9dd      	bls.n	80034b0 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 80034f4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f040 82de 	bne.w	8003aba <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 80034fe:	4bc6      	ldr	r3, [pc, #792]	; (8003818 <HAL_OSPIM_Config+0x3ac>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00b      	beq.n	8003522 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800350a:	4bc3      	ldr	r3, [pc, #780]	; (8003818 <HAL_OSPIM_Config+0x3ac>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4ac2      	ldr	r2, [pc, #776]	; (8003818 <HAL_OSPIM_Config+0x3ac>)
 8003510:	f023 0301 	bic.w	r3, r3, #1
 8003514:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8003516:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8003522:	4bbe      	ldr	r3, [pc, #760]	; (800381c <HAL_OSPIM_Config+0x3b0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0301 	and.w	r3, r3, #1
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00b      	beq.n	8003546 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800352e:	4bbb      	ldr	r3, [pc, #748]	; (800381c <HAL_OSPIM_Config+0x3b0>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4aba      	ldr	r2, [pc, #744]	; (800381c <HAL_OSPIM_Config+0x3b0>)
 8003534:	f023 0301 	bic.w	r3, r3, #1
 8003538:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 800353a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800353e:	f043 0302 	orr.w	r3, r3, #2
 8003542:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003546:	49b6      	ldr	r1, [pc, #728]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 8003548:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800354a:	4613      	mov	r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	4413      	add	r3, r2
 8003550:	009b      	lsls	r3, r3, #2
 8003552:	3348      	adds	r3, #72	; 0x48
 8003554:	443b      	add	r3, r7
 8003556:	3b2c      	subs	r3, #44	; 0x2c
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3b01      	subs	r3, #1
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	6859      	ldr	r1, [r3, #4]
 8003562:	48af      	ldr	r0, [pc, #700]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 8003564:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003566:	4613      	mov	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	3348      	adds	r3, #72	; 0x48
 8003570:	443b      	add	r3, r7
 8003572:	3b2c      	subs	r3, #44	; 0x2c
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	3b01      	subs	r3, #1
 8003578:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4403      	add	r3, r0
 8003580:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8003582:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	3348      	adds	r3, #72	; 0x48
 800358e:	443b      	add	r3, r7
 8003590:	3b34      	subs	r3, #52	; 0x34
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	2b00      	cmp	r3, #0
 8003596:	f000 80a1 	beq.w	80036dc <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800359a:	49a1      	ldr	r1, [pc, #644]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 800359c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800359e:	4613      	mov	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	3348      	adds	r3, #72	; 0x48
 80035a8:	443b      	add	r3, r7
 80035aa:	3b34      	subs	r3, #52	; 0x34
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	3b01      	subs	r3, #1
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	6859      	ldr	r1, [r3, #4]
 80035b6:	489a      	ldr	r0, [pc, #616]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 80035b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035ba:	4613      	mov	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	4413      	add	r3, r2
 80035c0:	009b      	lsls	r3, r3, #2
 80035c2:	3348      	adds	r3, #72	; 0x48
 80035c4:	443b      	add	r3, r7
 80035c6:	3b34      	subs	r3, #52	; 0x34
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	3b01      	subs	r3, #1
 80035cc:	f021 0201 	bic.w	r2, r1, #1
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	4403      	add	r3, r0
 80035d4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80035d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	3348      	adds	r3, #72	; 0x48
 80035e2:	443b      	add	r3, r7
 80035e4:	3b30      	subs	r3, #48	; 0x30
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d01d      	beq.n	8003628 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80035ec:	498c      	ldr	r1, [pc, #560]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 80035ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80035f0:	4613      	mov	r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4413      	add	r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	3348      	adds	r3, #72	; 0x48
 80035fa:	443b      	add	r3, r7
 80035fc:	3b30      	subs	r3, #48	; 0x30
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3b01      	subs	r3, #1
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	6859      	ldr	r1, [r3, #4]
 8003608:	4885      	ldr	r0, [pc, #532]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 800360a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800360c:	4613      	mov	r3, r2
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	4413      	add	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	3348      	adds	r3, #72	; 0x48
 8003616:	443b      	add	r3, r7
 8003618:	3b30      	subs	r3, #48	; 0x30
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3b01      	subs	r3, #1
 800361e:	f021 0210 	bic.w	r2, r1, #16
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	4403      	add	r3, r0
 8003626:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003628:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800362a:	4613      	mov	r3, r2
 800362c:	009b      	lsls	r3, r3, #2
 800362e:	4413      	add	r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	3348      	adds	r3, #72	; 0x48
 8003634:	443b      	add	r3, r7
 8003636:	3b28      	subs	r3, #40	; 0x28
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d021      	beq.n	8003682 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800363e:	4978      	ldr	r1, [pc, #480]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 8003640:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003642:	4613      	mov	r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	4413      	add	r3, r2
 8003648:	009b      	lsls	r3, r3, #2
 800364a:	3348      	adds	r3, #72	; 0x48
 800364c:	443b      	add	r3, r7
 800364e:	3b28      	subs	r3, #40	; 0x28
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	3b01      	subs	r3, #1
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	6859      	ldr	r1, [r3, #4]
 800365e:	4870      	ldr	r0, [pc, #448]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 8003660:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	3348      	adds	r3, #72	; 0x48
 800366c:	443b      	add	r3, r7
 800366e:	3b28      	subs	r3, #40	; 0x28
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	3b01      	subs	r3, #1
 8003674:	f003 0301 	and.w	r3, r3, #1
 8003678:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	4403      	add	r3, r0
 8003680:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003682:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003684:	4613      	mov	r3, r2
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	4413      	add	r3, r2
 800368a:	009b      	lsls	r3, r3, #2
 800368c:	3348      	adds	r3, #72	; 0x48
 800368e:	443b      	add	r3, r7
 8003690:	3b24      	subs	r3, #36	; 0x24
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d021      	beq.n	80036dc <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8003698:	4961      	ldr	r1, [pc, #388]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 800369a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800369c:	4613      	mov	r3, r2
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	3348      	adds	r3, #72	; 0x48
 80036a6:	443b      	add	r3, r7
 80036a8:	3b24      	subs	r3, #36	; 0x24
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	3b01      	subs	r3, #1
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	009b      	lsls	r3, r3, #2
 80036b4:	440b      	add	r3, r1
 80036b6:	6859      	ldr	r1, [r3, #4]
 80036b8:	4859      	ldr	r0, [pc, #356]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 80036ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80036bc:	4613      	mov	r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	4413      	add	r3, r2
 80036c2:	009b      	lsls	r3, r3, #2
 80036c4:	3348      	adds	r3, #72	; 0x48
 80036c6:	443b      	add	r3, r7
 80036c8:	3b24      	subs	r3, #36	; 0x24
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4403      	add	r3, r0
 80036da:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	6819      	ldr	r1, [r3, #0]
 80036e0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80036e4:	4613      	mov	r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	4413      	add	r3, r2
 80036ea:	009b      	lsls	r3, r3, #2
 80036ec:	3348      	adds	r3, #72	; 0x48
 80036ee:	443b      	add	r3, r7
 80036f0:	3b34      	subs	r3, #52	; 0x34
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4299      	cmp	r1, r3
 80036f6:	d038      	beq.n	800376a <HAL_OSPIM_Config+0x2fe>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	6859      	ldr	r1, [r3, #4]
 80036fc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003700:	4613      	mov	r3, r2
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	4413      	add	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	3348      	adds	r3, #72	; 0x48
 800370a:	443b      	add	r3, r7
 800370c:	3b30      	subs	r3, #48	; 0x30
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4299      	cmp	r1, r3
 8003712:	d02a      	beq.n	800376a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	6899      	ldr	r1, [r3, #8]
 8003718:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800371c:	4613      	mov	r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	4413      	add	r3, r2
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	3348      	adds	r3, #72	; 0x48
 8003726:	443b      	add	r3, r7
 8003728:	3b2c      	subs	r3, #44	; 0x2c
 800372a:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 800372c:	4299      	cmp	r1, r3
 800372e:	d01c      	beq.n	800376a <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	68d9      	ldr	r1, [r3, #12]
 8003734:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003738:	4613      	mov	r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	3348      	adds	r3, #72	; 0x48
 8003742:	443b      	add	r3, r7
 8003744:	3b28      	subs	r3, #40	; 0x28
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4299      	cmp	r1, r3
 800374a:	d00e      	beq.n	800376a <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	6919      	ldr	r1, [r3, #16]
 8003750:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003754:	4613      	mov	r3, r2
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	3348      	adds	r3, #72	; 0x48
 800375e:	443b      	add	r3, r7
 8003760:	3b24      	subs	r3, #36	; 0x24
 8003762:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8003764:	4299      	cmp	r1, r3
 8003766:	f040 80d3 	bne.w	8003910 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 800376a:	492d      	ldr	r1, [pc, #180]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 800376c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003770:	4613      	mov	r3, r2
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	3348      	adds	r3, #72	; 0x48
 800377a:	443b      	add	r3, r7
 800377c:	3b34      	subs	r3, #52	; 0x34
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3b01      	subs	r3, #1
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	6859      	ldr	r1, [r3, #4]
 8003788:	4825      	ldr	r0, [pc, #148]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 800378a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800378e:	4613      	mov	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	3348      	adds	r3, #72	; 0x48
 8003798:	443b      	add	r3, r7
 800379a:	3b34      	subs	r3, #52	; 0x34
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	3b01      	subs	r3, #1
 80037a0:	f021 0201 	bic.w	r2, r1, #1
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4403      	add	r3, r0
 80037a8:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80037aa:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037ae:	4613      	mov	r3, r2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	4413      	add	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	3348      	adds	r3, #72	; 0x48
 80037b8:	443b      	add	r3, r7
 80037ba:	3b30      	subs	r3, #48	; 0x30
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d01f      	beq.n	8003802 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80037c2:	4917      	ldr	r1, [pc, #92]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 80037c4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037c8:	4613      	mov	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	3348      	adds	r3, #72	; 0x48
 80037d2:	443b      	add	r3, r7
 80037d4:	3b30      	subs	r3, #48	; 0x30
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	3b01      	subs	r3, #1
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	6859      	ldr	r1, [r3, #4]
 80037e0:	480f      	ldr	r0, [pc, #60]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 80037e2:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80037e6:	4613      	mov	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	4413      	add	r3, r2
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	3348      	adds	r3, #72	; 0x48
 80037f0:	443b      	add	r3, r7
 80037f2:	3b30      	subs	r3, #48	; 0x30
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	f021 0210 	bic.w	r2, r1, #16
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4403      	add	r3, r0
 8003800:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8003802:	4907      	ldr	r1, [pc, #28]	; (8003820 <HAL_OSPIM_Config+0x3b4>)
 8003804:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	3348      	adds	r3, #72	; 0x48
 8003812:	443b      	add	r3, r7
 8003814:	3b2c      	subs	r3, #44	; 0x2c
 8003816:	e005      	b.n	8003824 <HAL_OSPIM_Config+0x3b8>
 8003818:	a0001000 	.word	0xa0001000
 800381c:	a0001400 	.word	0xa0001400
 8003820:	50061c00 	.word	0x50061c00
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3b01      	subs	r3, #1
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	6859      	ldr	r1, [r3, #4]
 800382e:	48a6      	ldr	r0, [pc, #664]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 8003830:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003834:	4613      	mov	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	4413      	add	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	3348      	adds	r3, #72	; 0x48
 800383e:	443b      	add	r3, r7
 8003840:	3b2c      	subs	r3, #44	; 0x2c
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	3b01      	subs	r3, #1
 8003846:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	4403      	add	r3, r0
 800384e:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8003850:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003854:	4613      	mov	r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4413      	add	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	3348      	adds	r3, #72	; 0x48
 800385e:	443b      	add	r3, r7
 8003860:	3b28      	subs	r3, #40	; 0x28
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d023      	beq.n	80038b0 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8003868:	4997      	ldr	r1, [pc, #604]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 800386a:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800386e:	4613      	mov	r3, r2
 8003870:	009b      	lsls	r3, r3, #2
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	3348      	adds	r3, #72	; 0x48
 8003878:	443b      	add	r3, r7
 800387a:	3b28      	subs	r3, #40	; 0x28
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	3b01      	subs	r3, #1
 8003880:	f003 0301 	and.w	r3, r3, #1
 8003884:	009b      	lsls	r3, r3, #2
 8003886:	440b      	add	r3, r1
 8003888:	6859      	ldr	r1, [r3, #4]
 800388a:	488f      	ldr	r0, [pc, #572]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 800388c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8003890:	4613      	mov	r3, r2
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	4413      	add	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	3348      	adds	r3, #72	; 0x48
 800389a:	443b      	add	r3, r7
 800389c:	3b28      	subs	r3, #40	; 0x28
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	4403      	add	r3, r0
 80038ae:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80038b0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038b4:	4613      	mov	r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	4413      	add	r3, r2
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	3348      	adds	r3, #72	; 0x48
 80038be:	443b      	add	r3, r7
 80038c0:	3b24      	subs	r3, #36	; 0x24
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d023      	beq.n	8003910 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80038c8:	497f      	ldr	r1, [pc, #508]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 80038ca:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038ce:	4613      	mov	r3, r2
 80038d0:	009b      	lsls	r3, r3, #2
 80038d2:	4413      	add	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	3348      	adds	r3, #72	; 0x48
 80038d8:	443b      	add	r3, r7
 80038da:	3b24      	subs	r3, #36	; 0x24
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	3b01      	subs	r3, #1
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	440b      	add	r3, r1
 80038e8:	6859      	ldr	r1, [r3, #4]
 80038ea:	4877      	ldr	r0, [pc, #476]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 80038ec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80038f0:	4613      	mov	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	3348      	adds	r3, #72	; 0x48
 80038fa:	443b      	add	r3, r7
 80038fc:	3b24      	subs	r3, #36	; 0x24
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	3b01      	subs	r3, #1
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4403      	add	r3, r0
 800390e:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8003910:	4a6d      	ldr	r2, [pc, #436]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	3b01      	subs	r3, #1
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003922:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003924:	025b      	lsls	r3, r3, #9
 8003926:	431a      	orrs	r2, r3
 8003928:	4967      	ldr	r1, [pc, #412]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	3b01      	subs	r3, #1
 8003930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003934:	009b      	lsls	r3, r3, #2
 8003936:	440b      	add	r3, r1
 8003938:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 800393a:	4a63      	ldr	r2, [pc, #396]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	3b01      	subs	r3, #1
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	4413      	add	r3, r2
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f023 0203 	bic.w	r2, r3, #3
 800394c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	431a      	orrs	r2, r3
 8003952:	495d      	ldr	r1, [pc, #372]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3b01      	subs	r3, #1
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	440b      	add	r3, r1
 8003962:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8003964:	68bb      	ldr	r3, [r7, #8]
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d014      	beq.n	8003996 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 800396c:	4a56      	ldr	r2, [pc, #344]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	3b01      	subs	r3, #1
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	4413      	add	r3, r2
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800397e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003980:	015b      	lsls	r3, r3, #5
 8003982:	431a      	orrs	r2, r3
 8003984:	4950      	ldr	r1, [pc, #320]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	f042 0210 	orr.w	r2, r2, #16
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d019      	beq.n	80039d6 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80039a2:	4a49      	ldr	r2, [pc, #292]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	3b01      	subs	r3, #1
 80039aa:	f003 0301 	and.w	r3, r3, #1
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	4413      	add	r3, r2
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80039b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039ba:	049b      	lsls	r3, r3, #18
 80039bc:	431a      	orrs	r2, r3
 80039be:	4942      	ldr	r1, [pc, #264]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80039ce:	009b      	lsls	r3, r3, #2
 80039d0:	440b      	add	r3, r1
 80039d2:	605a      	str	r2, [r3, #4]
 80039d4:	e01c      	b.n	8003a10 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d018      	beq.n	8003a10 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 80039de:	4a3a      	ldr	r2, [pc, #232]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	68db      	ldr	r3, [r3, #12]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	4413      	add	r3, r2
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80039f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039f6:	069b      	lsls	r3, r3, #26
 80039f8:	431a      	orrs	r2, r3
 80039fa:	4933      	ldr	r1, [pc, #204]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	440b      	add	r3, r1
 8003a0e:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	691b      	ldr	r3, [r3, #16]
 8003a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d019      	beq.n	8003a50 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003a1c:	4a2a      	ldr	r2, [pc, #168]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	3b01      	subs	r3, #1
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	4413      	add	r3, r2
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8003a32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a34:	049b      	lsls	r3, r3, #18
 8003a36:	431a      	orrs	r2, r3
 8003a38:	4923      	ldr	r1, [pc, #140]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	3b01      	subs	r3, #1
 8003a40:	f003 0301 	and.w	r3, r3, #1
 8003a44:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	605a      	str	r2, [r3, #4]
 8003a4e:	e01c      	b.n	8003a8a <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d018      	beq.n	8003a8a <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8003a58:	4a1b      	ldr	r2, [pc, #108]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	f003 0301 	and.w	r3, r3, #1
 8003a64:	009b      	lsls	r3, r3, #2
 8003a66:	4413      	add	r3, r2
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a70:	069b      	lsls	r3, r3, #26
 8003a72:	431a      	orrs	r2, r3
 8003a74:	4914      	ldr	r1, [pc, #80]	; (8003ac8 <HAL_OSPIM_Config+0x65c>)
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	f003 0301 	and.w	r3, r3, #1
 8003a80:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8003a8a:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d005      	beq.n	8003aa2 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8003a96:	4b0d      	ldr	r3, [pc, #52]	; (8003acc <HAL_OSPIM_Config+0x660>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4a0c      	ldr	r2, [pc, #48]	; (8003acc <HAL_OSPIM_Config+0x660>)
 8003a9c:	f043 0301 	orr.w	r3, r3, #1
 8003aa0:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003aa2:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003aa6:	f003 0302 	and.w	r3, r3, #2
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d005      	beq.n	8003aba <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003aae:	4b08      	ldr	r3, [pc, #32]	; (8003ad0 <HAL_OSPIM_Config+0x664>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a07      	ldr	r2, [pc, #28]	; (8003ad0 <HAL_OSPIM_Config+0x664>)
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8003aba:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3748      	adds	r7, #72	; 0x48
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	50061c00 	.word	0x50061c00
 8003acc:	a0001000 	.word	0xa0001000
 8003ad0:	a0001400 	.word	0xa0001400

08003ad4 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	60f8      	str	r0, [r7, #12]
 8003adc:	60b9      	str	r1, [r7, #8]
 8003ade:	603b      	str	r3, [r7, #0]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003ae4:	e01a      	b.n	8003b1c <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aec:	d016      	beq.n	8003b1c <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aee:	f7fc fd71 	bl	80005d4 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	429a      	cmp	r2, r3
 8003afc:	d302      	bcc.n	8003b04 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d10b      	bne.n	8003b1c <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003b0a:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b10:	f043 0201 	orr.w	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e00e      	b.n	8003b3a <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	6a1a      	ldr	r2, [r3, #32]
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	4013      	ands	r3, r2
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	bf14      	ite	ne
 8003b2a:	2301      	movne	r3, #1
 8003b2c:	2300      	moveq	r3, #0
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	461a      	mov	r2, r3
 8003b32:	79fb      	ldrb	r3, [r7, #7]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d1d6      	bne.n	8003ae6 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003b38:	2300      	movs	r3, #0
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
	...

08003b44 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b089      	sub	sp, #36	; 0x24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b4e:	2300      	movs	r3, #0
 8003b50:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b60:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d10a      	bne.n	8003b80 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d114      	bne.n	8003bb2 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003b90:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003b9a:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003ba4:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003bae:	60fb      	str	r3, [r7, #12]
 8003bb0:	e013      	b.n	8003bda <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8003bba:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003bc4:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003bce:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8003bd8:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003be2:	431a      	orrs	r2, r3
 8003be4:	69bb      	ldr	r3, [r7, #24]
 8003be6:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d012      	beq.n	8003c16 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c08:	4319      	orrs	r1, r3
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	430b      	orrs	r3, r1
 8003c10:	431a      	orrs	r2, r3
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f023 021f 	bic.w	r2, r3, #31
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c22:	431a      	orrs	r2, r3
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d009      	beq.n	8003c44 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	3a01      	subs	r2, #1
 8003c42:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	f000 8099 	beq.w	8003d80 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	69db      	ldr	r3, [r3, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d055      	beq.n	8003d02 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d01e      	beq.n	8003c9c <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	4b68      	ldr	r3, [pc, #416]	; (8003e04 <OSPI_ConfigCmd+0x2c0>)
 8003c64:	4013      	ands	r3, r2
 8003c66:	683a      	ldr	r2, [r7, #0]
 8003c68:	68d1      	ldr	r1, [r2, #12]
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	6952      	ldr	r2, [r2, #20]
 8003c6e:	4311      	orrs	r1, r2
 8003c70:	683a      	ldr	r2, [r7, #0]
 8003c72:	6912      	ldr	r2, [r2, #16]
 8003c74:	4311      	orrs	r1, r2
 8003c76:	683a      	ldr	r2, [r7, #0]
 8003c78:	69d2      	ldr	r2, [r2, #28]
 8003c7a:	4311      	orrs	r1, r2
 8003c7c:	683a      	ldr	r2, [r7, #0]
 8003c7e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003c80:	4311      	orrs	r1, r2
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	6a12      	ldr	r2, [r2, #32]
 8003c86:	4311      	orrs	r1, r2
 8003c88:	683a      	ldr	r2, [r7, #0]
 8003c8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c8c:	4311      	orrs	r1, r2
 8003c8e:	683a      	ldr	r2, [r7, #0]
 8003c90:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003c92:	430a      	orrs	r2, r1
 8003c94:	431a      	orrs	r2, r3
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	601a      	str	r2, [r3, #0]
 8003c9a:	e028      	b.n	8003cee <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ca4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003ca8:	683a      	ldr	r2, [r7, #0]
 8003caa:	68d1      	ldr	r1, [r2, #12]
 8003cac:	683a      	ldr	r2, [r7, #0]
 8003cae:	6952      	ldr	r2, [r2, #20]
 8003cb0:	4311      	orrs	r1, r2
 8003cb2:	683a      	ldr	r2, [r7, #0]
 8003cb4:	6912      	ldr	r2, [r2, #16]
 8003cb6:	4311      	orrs	r1, r2
 8003cb8:	683a      	ldr	r2, [r7, #0]
 8003cba:	69d2      	ldr	r2, [r2, #28]
 8003cbc:	4311      	orrs	r1, r2
 8003cbe:	683a      	ldr	r2, [r7, #0]
 8003cc0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003cc2:	4311      	orrs	r1, r2
 8003cc4:	683a      	ldr	r2, [r7, #0]
 8003cc6:	6a12      	ldr	r2, [r2, #32]
 8003cc8:	430a      	orrs	r2, r1
 8003cca:	431a      	orrs	r2, r3
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003cd8:	d109      	bne.n	8003cee <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003cde:	2b08      	cmp	r3, #8
 8003ce0:	d105      	bne.n	8003cee <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003ce2:	69bb      	ldr	r3, [r7, #24]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	689a      	ldr	r2, [r3, #8]
 8003cf2:	693b      	ldr	r3, [r7, #16]
 8003cf4:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	6992      	ldr	r2, [r2, #24]
 8003cfe:	649a      	str	r2, [r3, #72]	; 0x48
 8003d00:	e078      	b.n	8003df4 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d017      	beq.n	8003d3a <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003d12:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	68d1      	ldr	r1, [r2, #12]
 8003d1a:	683a      	ldr	r2, [r7, #0]
 8003d1c:	6952      	ldr	r2, [r2, #20]
 8003d1e:	4311      	orrs	r1, r2
 8003d20:	683a      	ldr	r2, [r7, #0]
 8003d22:	6912      	ldr	r2, [r2, #16]
 8003d24:	4311      	orrs	r1, r2
 8003d26:	683a      	ldr	r2, [r7, #0]
 8003d28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d2a:	4311      	orrs	r1, r2
 8003d2c:	683a      	ldr	r2, [r7, #0]
 8003d2e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003d30:	430a      	orrs	r2, r1
 8003d32:	431a      	orrs	r2, r3
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e01d      	b.n	8003d76 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	68d9      	ldr	r1, [r3, #12]
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	4319      	orrs	r1, r3
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	691b      	ldr	r3, [r3, #16]
 8003d50:	430b      	orrs	r3, r1
 8003d52:	431a      	orrs	r2, r3
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d5c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003d60:	d109      	bne.n	8003d76 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003d66:	2b08      	cmp	r3, #8
 8003d68:	d105      	bne.n	8003d76 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	689a      	ldr	r2, [r3, #8]
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e039      	b.n	8003df4 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	69db      	ldr	r3, [r3, #28]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d030      	beq.n	8003dea <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d017      	beq.n	8003dc0 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8003d98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	69d1      	ldr	r1, [r2, #28]
 8003da0:	683a      	ldr	r2, [r7, #0]
 8003da2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003da4:	4311      	orrs	r1, r2
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	6a12      	ldr	r2, [r2, #32]
 8003daa:	4311      	orrs	r1, r2
 8003dac:	683a      	ldr	r2, [r7, #0]
 8003dae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003db0:	4311      	orrs	r1, r2
 8003db2:	683a      	ldr	r2, [r7, #0]
 8003db4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003db6:	430a      	orrs	r2, r1
 8003db8:	431a      	orrs	r2, r3
 8003dba:	69bb      	ldr	r3, [r7, #24]
 8003dbc:	601a      	str	r2, [r3, #0]
 8003dbe:	e00e      	b.n	8003dde <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8003dc0:	69bb      	ldr	r3, [r7, #24]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	69d9      	ldr	r1, [r3, #28]
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	4319      	orrs	r1, r3
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	6a1b      	ldr	r3, [r3, #32]
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	6992      	ldr	r2, [r2, #24]
 8003de6:	649a      	str	r2, [r3, #72]	; 0x48
 8003de8:	e004      	b.n	8003df4 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8003dea:	2301      	movs	r3, #1
 8003dec:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2208      	movs	r2, #8
 8003df2:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8003df4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3724      	adds	r7, #36	; 0x24
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	f0ffc0c0 	.word	0xf0ffc0c0

08003e08 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b087      	sub	sp, #28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	6039      	str	r1, [r7, #0]
 8003e12:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8003e14:	2300      	movs	r3, #0
 8003e16:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8003e1c:	79fb      	ldrb	r3, [r7, #7]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d005      	beq.n	8003e2e <OSPIM_GetConfig+0x26>
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d802      	bhi.n	8003e2e <OSPIM_GetConfig+0x26>
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d102      	bne.n	8003e34 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	75fb      	strb	r3, [r7, #23]
 8003e32:	e08e      	b.n	8003f52 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	2200      	movs	r2, #0
 8003e44:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	2b02      	cmp	r3, #2
 8003e56:	d101      	bne.n	8003e5c <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8003e58:	4b41      	ldr	r3, [pc, #260]	; (8003f60 <OSPIM_GetConfig+0x158>)
 8003e5a:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	60fb      	str	r3, [r7, #12]
 8003e60:	e074      	b.n	8003f4c <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003e62:	4a40      	ldr	r2, [pc, #256]	; (8003f64 <OSPIM_GetConfig+0x15c>)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	4413      	add	r3, r2
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d00a      	beq.n	8003e8e <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	4053      	eors	r3, r2
 8003e7e:	f003 0302 	and.w	r3, r3, #2
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d103      	bne.n	8003e8e <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	1c5a      	adds	r2, r3, #1
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8003e98:	68ba      	ldr	r2, [r7, #8]
 8003e9a:	693b      	ldr	r3, [r7, #16]
 8003e9c:	4053      	eors	r3, r2
 8003e9e:	f003 0320 	and.w	r3, r3, #32
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d103      	bne.n	8003eae <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	1c5a      	adds	r2, r3, #1
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00a      	beq.n	8003ece <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	4053      	eors	r3, r2
 8003ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d103      	bne.n	8003ece <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	1c5a      	adds	r2, r3, #1
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d018      	beq.n	8003f0a <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8003ed8:	68ba      	ldr	r2, [r7, #8]
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	4053      	eors	r3, r2
 8003ede:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d111      	bne.n	8003f0a <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d106      	bne.n	8003efe <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	3301      	adds	r3, #1
 8003ef4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	60da      	str	r2, [r3, #12]
 8003efc:	e005      	b.n	8003f0a <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3301      	adds	r3, #1
 8003f02:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d018      	beq.n	8003f46 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003f14:	68ba      	ldr	r2, [r7, #8]
 8003f16:	693b      	ldr	r3, [r7, #16]
 8003f18:	4053      	eors	r3, r2
 8003f1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d111      	bne.n	8003f46 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d106      	bne.n	8003f3a <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	3301      	adds	r3, #1
 8003f30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	611a      	str	r2, [r3, #16]
 8003f38:	e005      	b.n	8003f46 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	3301      	adds	r3, #1
 8003f3e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	60fb      	str	r3, [r7, #12]
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	2b01      	cmp	r3, #1
 8003f50:	d987      	bls.n	8003e62 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003f52:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	371c      	adds	r7, #28
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5e:	4770      	bx	lr
 8003f60:	04040222 	.word	0x04040222
 8003f64:	50061c00 	.word	0x50061c00

08003f68 <HAL_PWR_EnterSLEEPMode>:
  * @note  When WFI entry is used, tick interrupt have to be disabled if not desired as
  *        the interrupt wake up source.
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b082      	sub	sp, #8
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	460b      	mov	r3, r1
 8003f72:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Set Regulator parameter */
  if (Regulator == PWR_MAINREGULATOR_ON)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d10c      	bne.n	8003f94 <HAL_PWR_EnterSLEEPMode+0x2c>
  {
    /* If in low-power run mode at this point, exit it */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 8003f7a:	4b13      	ldr	r3, [pc, #76]	; (8003fc8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f86:	d10e      	bne.n	8003fa6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      if (HAL_PWREx_DisableLowPowerRunMode() != HAL_OK)
 8003f88:	f000 f906 	bl	8004198 <HAL_PWREx_DisableLowPowerRunMode>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d009      	beq.n	8003fa6 <HAL_PWR_EnterSLEEPMode+0x3e>
      {
        return ;
 8003f92:	e016      	b.n	8003fc2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* If in run mode, first move to low-power run mode.
       The system clock frequency must be below 2 MHz at this point. */
    if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF) == RESET)
 8003f94:	4b0c      	ldr	r3, [pc, #48]	; (8003fc8 <HAL_PWR_EnterSLEEPMode+0x60>)
 8003f96:	695b      	ldr	r3, [r3, #20]
 8003f98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fa0:	d001      	beq.n	8003fa6 <HAL_PWR_EnterSLEEPMode+0x3e>
    {
      HAL_PWREx_EnableLowPowerRunMode();
 8003fa2:	f000 f8e9 	bl	8004178 <HAL_PWREx_EnableLowPowerRunMode>
    }
  }

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  CLEAR_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPDEEP_Msk));
 8003fa6:	4b09      	ldr	r3, [pc, #36]	; (8003fcc <HAL_PWR_EnterSLEEPMode+0x64>)
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	4a08      	ldr	r2, [pc, #32]	; (8003fcc <HAL_PWR_EnterSLEEPMode+0x64>)
 8003fac:	f023 0304 	bic.w	r3, r3, #4
 8003fb0:	6113      	str	r3, [r2, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003fb2:	78fb      	ldrb	r3, [r7, #3]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_PWR_EnterSLEEPMode+0x54>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003fb8:	bf30      	wfi
 8003fba:	e002      	b.n	8003fc2 <HAL_PWR_EnterSLEEPMode+0x5a>
  }
  else
  {
    /* Request Wait For Event */
    __SEV();
 8003fbc:	bf40      	sev
    __WFE();
 8003fbe:	bf20      	wfe
    __WFE();
 8003fc0:	bf20      	wfe
  }

}
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	40007000 	.word	0x40007000
 8003fcc:	e000ed00 	.word	0xe000ed00

08003fd0 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <HAL_PWR_EnableSleepOnExit+0x1c>)
 8003fd6:	691b      	ldr	r3, [r3, #16]
 8003fd8:	4a04      	ldr	r2, [pc, #16]	; (8003fec <HAL_PWR_EnableSleepOnExit+0x1c>)
 8003fda:	f043 0302 	orr.w	r3, r3, #2
 8003fde:	6113      	str	r3, [r2, #16]
}
 8003fe0:	bf00      	nop
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ff4:	4b0d      	ldr	r3, [pc, #52]	; (800402c <HAL_PWREx_GetVoltageRange+0x3c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ffc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004000:	d102      	bne.n	8004008 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004006:	e00b      	b.n	8004020 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004008:	4b08      	ldr	r3, [pc, #32]	; (800402c <HAL_PWREx_GetVoltageRange+0x3c>)
 800400a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800400e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004012:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004016:	d102      	bne.n	800401e <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004018:	f44f 7300 	mov.w	r3, #512	; 0x200
 800401c:	e000      	b.n	8004020 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800401e:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004020:	4618      	mov	r0, r3
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	40007000 	.word	0x40007000

08004030 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d141      	bne.n	80040c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800403e:	4b4b      	ldr	r3, [pc, #300]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404a:	d131      	bne.n	80040b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800404c:	4b47      	ldr	r3, [pc, #284]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800404e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004052:	4a46      	ldr	r2, [pc, #280]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004058:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800405c:	4b43      	ldr	r3, [pc, #268]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004064:	4a41      	ldr	r2, [pc, #260]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004066:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800406a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800406c:	4b40      	ldr	r3, [pc, #256]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	2232      	movs	r2, #50	; 0x32
 8004072:	fb02 f303 	mul.w	r3, r2, r3
 8004076:	4a3f      	ldr	r2, [pc, #252]	; (8004174 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004078:	fba2 2303 	umull	r2, r3, r2, r3
 800407c:	0c9b      	lsrs	r3, r3, #18
 800407e:	3301      	adds	r3, #1
 8004080:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004082:	e002      	b.n	800408a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	3b01      	subs	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800408a:	4b38      	ldr	r3, [pc, #224]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004092:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004096:	d102      	bne.n	800409e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1f2      	bne.n	8004084 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800409e:	4b33      	ldr	r3, [pc, #204]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040aa:	d158      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80040ac:	2303      	movs	r3, #3
 80040ae:	e057      	b.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040b0:	4b2e      	ldr	r3, [pc, #184]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040b6:	4a2d      	ldr	r2, [pc, #180]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80040bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80040c0:	e04d      	b.n	800415e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040c8:	d141      	bne.n	800414e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80040ca:	4b28      	ldr	r3, [pc, #160]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040d6:	d131      	bne.n	800413c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80040d8:	4b24      	ldr	r3, [pc, #144]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80040de:	4a23      	ldr	r2, [pc, #140]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80040e8:	4b20      	ldr	r3, [pc, #128]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80040f0:	4a1e      	ldr	r2, [pc, #120]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80040f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80040f8:	4b1d      	ldr	r3, [pc, #116]	; (8004170 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2232      	movs	r2, #50	; 0x32
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	4a1c      	ldr	r2, [pc, #112]	; (8004174 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	0c9b      	lsrs	r3, r3, #18
 800410a:	3301      	adds	r3, #1
 800410c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800410e:	e002      	b.n	8004116 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	3b01      	subs	r3, #1
 8004114:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004116:	4b15      	ldr	r3, [pc, #84]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800411e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004122:	d102      	bne.n	800412a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1f2      	bne.n	8004110 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800412a:	4b10      	ldr	r3, [pc, #64]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004132:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004136:	d112      	bne.n	800415e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004138:	2303      	movs	r3, #3
 800413a:	e011      	b.n	8004160 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800413c:	4b0b      	ldr	r3, [pc, #44]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800413e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004142:	4a0a      	ldr	r2, [pc, #40]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004148:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800414c:	e007      	b.n	800415e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004156:	4a05      	ldr	r2, [pc, #20]	; (800416c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004158:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800415c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3714      	adds	r7, #20
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	40007000 	.word	0x40007000
 8004170:	200002d0 	.word	0x200002d0
 8004174:	431bde83 	.word	0x431bde83

08004178 <HAL_PWREx_EnableLowPowerRunMode>:
  *        Setting RUN_PD in FLASH_ACR then appropriately reducing the clock frequency must
  *        be done before calling HAL_PWREx_EnableLowPowerRunMode() API.
  * @retval None
  */
void HAL_PWREx_EnableLowPowerRunMode(void)
{
 8004178:	b480      	push	{r7}
 800417a:	af00      	add	r7, sp, #0
  /* Set Regulator parameter */
  SET_BIT(PWR->CR1, PWR_CR1_LPR);
 800417c:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a04      	ldr	r2, [pc, #16]	; (8004194 <HAL_PWREx_EnableLowPowerRunMode+0x1c>)
 8004182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004186:	6013      	str	r3, [r2, #0]
}
 8004188:	bf00      	nop
 800418a:	46bd      	mov	sp, r7
 800418c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004190:	4770      	bx	lr
 8004192:	bf00      	nop
 8004194:	40007000 	.word	0x40007000

08004198 <HAL_PWREx_DisableLowPowerRunMode>:
  *        returns HAL_TIMEOUT status). The system clock frequency can then be
  *        increased above 2 MHz.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_DisableLowPowerRunMode(void)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
  uint32_t wait_loop_index;

  /* Clear LPR bit */
  CLEAR_BIT(PWR->CR1, PWR_CR1_LPR);
 800419e:	4b17      	ldr	r3, [pc, #92]	; (80041fc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a16      	ldr	r2, [pc, #88]	; (80041fc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80041a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80041a8:	6013      	str	r3, [r2, #0]

  /* Wait until REGLPF is reset */
  wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80041aa:	4b15      	ldr	r3, [pc, #84]	; (8004200 <HAL_PWREx_DisableLowPowerRunMode+0x68>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	2232      	movs	r2, #50	; 0x32
 80041b0:	fb02 f303 	mul.w	r3, r2, r3
 80041b4:	4a13      	ldr	r2, [pc, #76]	; (8004204 <HAL_PWREx_DisableLowPowerRunMode+0x6c>)
 80041b6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ba:	0c9b      	lsrs	r3, r3, #18
 80041bc:	3301      	adds	r3, #1
 80041be:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80041c0:	e002      	b.n	80041c8 <HAL_PWREx_DisableLowPowerRunMode+0x30>
  {
    wait_loop_index--;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	3b01      	subs	r3, #1
 80041c6:	607b      	str	r3, [r7, #4]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF)) && (wait_loop_index != 0U))
 80041c8:	4b0c      	ldr	r3, [pc, #48]	; (80041fc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041d4:	d102      	bne.n	80041dc <HAL_PWREx_DisableLowPowerRunMode+0x44>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1f2      	bne.n	80041c2 <HAL_PWREx_DisableLowPowerRunMode+0x2a>
  }
  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_REGLPF))
 80041dc:	4b07      	ldr	r3, [pc, #28]	; (80041fc <HAL_PWREx_DisableLowPowerRunMode+0x64>)
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80041e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041e8:	d101      	bne.n	80041ee <HAL_PWREx_DisableLowPowerRunMode+0x56>
  {
    return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e000      	b.n	80041f0 <HAL_PWREx_DisableLowPowerRunMode+0x58>
  }

  return HAL_OK;
 80041ee:	2300      	movs	r3, #0
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	40007000 	.word	0x40007000
 8004200:	200002d0 	.word	0x200002d0
 8004204:	431bde83 	.word	0x431bde83

08004208 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b088      	sub	sp, #32
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d102      	bne.n	800421c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	f000 bc08 	b.w	8004a2c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800421c:	4b96      	ldr	r3, [pc, #600]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	f003 030c 	and.w	r3, r3, #12
 8004224:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004226:	4b94      	ldr	r3, [pc, #592]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 80e4 	beq.w	8004406 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d007      	beq.n	8004254 <HAL_RCC_OscConfig+0x4c>
 8004244:	69bb      	ldr	r3, [r7, #24]
 8004246:	2b0c      	cmp	r3, #12
 8004248:	f040 808b 	bne.w	8004362 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800424c:	697b      	ldr	r3, [r7, #20]
 800424e:	2b01      	cmp	r3, #1
 8004250:	f040 8087 	bne.w	8004362 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004254:	4b88      	ldr	r3, [pc, #544]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_OscConfig+0x64>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	699b      	ldr	r3, [r3, #24]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d101      	bne.n	800426c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e3df      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	4b81      	ldr	r3, [pc, #516]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f003 0308 	and.w	r3, r3, #8
 8004278:	2b00      	cmp	r3, #0
 800427a:	d004      	beq.n	8004286 <HAL_RCC_OscConfig+0x7e>
 800427c:	4b7e      	ldr	r3, [pc, #504]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004284:	e005      	b.n	8004292 <HAL_RCC_OscConfig+0x8a>
 8004286:	4b7c      	ldr	r3, [pc, #496]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 8004288:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004292:	4293      	cmp	r3, r2
 8004294:	d223      	bcs.n	80042de <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	4618      	mov	r0, r3
 800429c:	f000 fdcc 	bl	8004e38 <RCC_SetFlashLatencyFromMSIRange>
 80042a0:	4603      	mov	r3, r0
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d001      	beq.n	80042aa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80042a6:	2301      	movs	r3, #1
 80042a8:	e3c0      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042aa:	4b73      	ldr	r3, [pc, #460]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a72      	ldr	r2, [pc, #456]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80042b0:	f043 0308 	orr.w	r3, r3, #8
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	4b70      	ldr	r3, [pc, #448]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	496d      	ldr	r1, [pc, #436]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80042c4:	4313      	orrs	r3, r2
 80042c6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042c8:	4b6b      	ldr	r3, [pc, #428]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	69db      	ldr	r3, [r3, #28]
 80042d4:	021b      	lsls	r3, r3, #8
 80042d6:	4968      	ldr	r1, [pc, #416]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80042d8:	4313      	orrs	r3, r2
 80042da:	604b      	str	r3, [r1, #4]
 80042dc:	e025      	b.n	800432a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042de:	4b66      	ldr	r3, [pc, #408]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a65      	ldr	r2, [pc, #404]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80042e4:	f043 0308 	orr.w	r3, r3, #8
 80042e8:	6013      	str	r3, [r2, #0]
 80042ea:	4b63      	ldr	r3, [pc, #396]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	4960      	ldr	r1, [pc, #384]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042fc:	4b5e      	ldr	r3, [pc, #376]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	69db      	ldr	r3, [r3, #28]
 8004308:	021b      	lsls	r3, r3, #8
 800430a:	495b      	ldr	r1, [pc, #364]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 800430c:	4313      	orrs	r3, r2
 800430e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004310:	69bb      	ldr	r3, [r7, #24]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d109      	bne.n	800432a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	4618      	mov	r0, r3
 800431c:	f000 fd8c 	bl	8004e38 <RCC_SetFlashLatencyFromMSIRange>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e380      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800432a:	f000 fcc1 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 800432e:	4602      	mov	r2, r0
 8004330:	4b51      	ldr	r3, [pc, #324]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	091b      	lsrs	r3, r3, #4
 8004336:	f003 030f 	and.w	r3, r3, #15
 800433a:	4950      	ldr	r1, [pc, #320]	; (800447c <HAL_RCC_OscConfig+0x274>)
 800433c:	5ccb      	ldrb	r3, [r1, r3]
 800433e:	f003 031f 	and.w	r3, r3, #31
 8004342:	fa22 f303 	lsr.w	r3, r2, r3
 8004346:	4a4e      	ldr	r2, [pc, #312]	; (8004480 <HAL_RCC_OscConfig+0x278>)
 8004348:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800434a:	4b4e      	ldr	r3, [pc, #312]	; (8004484 <HAL_RCC_OscConfig+0x27c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4618      	mov	r0, r3
 8004350:	f7fc f8f0 	bl	8000534 <HAL_InitTick>
 8004354:	4603      	mov	r3, r0
 8004356:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004358:	7bfb      	ldrb	r3, [r7, #15]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d052      	beq.n	8004404 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800435e:	7bfb      	ldrb	r3, [r7, #15]
 8004360:	e364      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	699b      	ldr	r3, [r3, #24]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d032      	beq.n	80043d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800436a:	4b43      	ldr	r3, [pc, #268]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	4a42      	ldr	r2, [pc, #264]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004376:	f7fc f92d 	bl	80005d4 <HAL_GetTick>
 800437a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800437c:	e008      	b.n	8004390 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800437e:	f7fc f929 	bl	80005d4 <HAL_GetTick>
 8004382:	4602      	mov	r2, r0
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	1ad3      	subs	r3, r2, r3
 8004388:	2b02      	cmp	r3, #2
 800438a:	d901      	bls.n	8004390 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800438c:	2303      	movs	r3, #3
 800438e:	e34d      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004390:	4b39      	ldr	r3, [pc, #228]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f003 0302 	and.w	r3, r3, #2
 8004398:	2b00      	cmp	r3, #0
 800439a:	d0f0      	beq.n	800437e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800439c:	4b36      	ldr	r3, [pc, #216]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a35      	ldr	r2, [pc, #212]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80043a2:	f043 0308 	orr.w	r3, r3, #8
 80043a6:	6013      	str	r3, [r2, #0]
 80043a8:	4b33      	ldr	r3, [pc, #204]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a1b      	ldr	r3, [r3, #32]
 80043b4:	4930      	ldr	r1, [pc, #192]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043ba:	4b2f      	ldr	r3, [pc, #188]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69db      	ldr	r3, [r3, #28]
 80043c6:	021b      	lsls	r3, r3, #8
 80043c8:	492b      	ldr	r1, [pc, #172]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80043ca:	4313      	orrs	r3, r2
 80043cc:	604b      	str	r3, [r1, #4]
 80043ce:	e01a      	b.n	8004406 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80043d0:	4b29      	ldr	r3, [pc, #164]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a28      	ldr	r2, [pc, #160]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80043d6:	f023 0301 	bic.w	r3, r3, #1
 80043da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043dc:	f7fc f8fa 	bl	80005d4 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043e4:	f7fc f8f6 	bl	80005d4 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e31a      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043f6:	4b20      	ldr	r3, [pc, #128]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0302 	and.w	r3, r3, #2
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x1dc>
 8004402:	e000      	b.n	8004406 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004404:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f003 0301 	and.w	r3, r3, #1
 800440e:	2b00      	cmp	r3, #0
 8004410:	d073      	beq.n	80044fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004412:	69bb      	ldr	r3, [r7, #24]
 8004414:	2b08      	cmp	r3, #8
 8004416:	d005      	beq.n	8004424 <HAL_RCC_OscConfig+0x21c>
 8004418:	69bb      	ldr	r3, [r7, #24]
 800441a:	2b0c      	cmp	r3, #12
 800441c:	d10e      	bne.n	800443c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b03      	cmp	r3, #3
 8004422:	d10b      	bne.n	800443c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004424:	4b14      	ldr	r3, [pc, #80]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800442c:	2b00      	cmp	r3, #0
 800442e:	d063      	beq.n	80044f8 <HAL_RCC_OscConfig+0x2f0>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	685b      	ldr	r3, [r3, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d15f      	bne.n	80044f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e2f7      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004444:	d106      	bne.n	8004454 <HAL_RCC_OscConfig+0x24c>
 8004446:	4b0c      	ldr	r3, [pc, #48]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a0b      	ldr	r2, [pc, #44]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 800444c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004450:	6013      	str	r3, [r2, #0]
 8004452:	e025      	b.n	80044a0 <HAL_RCC_OscConfig+0x298>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800445c:	d114      	bne.n	8004488 <HAL_RCC_OscConfig+0x280>
 800445e:	4b06      	ldr	r3, [pc, #24]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	4a05      	ldr	r2, [pc, #20]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 8004464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004468:	6013      	str	r3, [r2, #0]
 800446a:	4b03      	ldr	r3, [pc, #12]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	4a02      	ldr	r2, [pc, #8]	; (8004478 <HAL_RCC_OscConfig+0x270>)
 8004470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004474:	6013      	str	r3, [r2, #0]
 8004476:	e013      	b.n	80044a0 <HAL_RCC_OscConfig+0x298>
 8004478:	40021000 	.word	0x40021000
 800447c:	0800c5e8 	.word	0x0800c5e8
 8004480:	200002d0 	.word	0x200002d0
 8004484:	20000000 	.word	0x20000000
 8004488:	4ba0      	ldr	r3, [pc, #640]	; (800470c <HAL_RCC_OscConfig+0x504>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4a9f      	ldr	r2, [pc, #636]	; (800470c <HAL_RCC_OscConfig+0x504>)
 800448e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004492:	6013      	str	r3, [r2, #0]
 8004494:	4b9d      	ldr	r3, [pc, #628]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a9c      	ldr	r2, [pc, #624]	; (800470c <HAL_RCC_OscConfig+0x504>)
 800449a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800449e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d013      	beq.n	80044d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044a8:	f7fc f894 	bl	80005d4 <HAL_GetTick>
 80044ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044ae:	e008      	b.n	80044c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044b0:	f7fc f890 	bl	80005d4 <HAL_GetTick>
 80044b4:	4602      	mov	r2, r0
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	1ad3      	subs	r3, r2, r3
 80044ba:	2b64      	cmp	r3, #100	; 0x64
 80044bc:	d901      	bls.n	80044c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e2b4      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044c2:	4b92      	ldr	r3, [pc, #584]	; (800470c <HAL_RCC_OscConfig+0x504>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d0f0      	beq.n	80044b0 <HAL_RCC_OscConfig+0x2a8>
 80044ce:	e014      	b.n	80044fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044d0:	f7fc f880 	bl	80005d4 <HAL_GetTick>
 80044d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044d6:	e008      	b.n	80044ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044d8:	f7fc f87c 	bl	80005d4 <HAL_GetTick>
 80044dc:	4602      	mov	r2, r0
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	1ad3      	subs	r3, r2, r3
 80044e2:	2b64      	cmp	r3, #100	; 0x64
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e2a0      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044ea:	4b88      	ldr	r3, [pc, #544]	; (800470c <HAL_RCC_OscConfig+0x504>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d1f0      	bne.n	80044d8 <HAL_RCC_OscConfig+0x2d0>
 80044f6:	e000      	b.n	80044fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0302 	and.w	r3, r3, #2
 8004502:	2b00      	cmp	r3, #0
 8004504:	d060      	beq.n	80045c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	2b04      	cmp	r3, #4
 800450a:	d005      	beq.n	8004518 <HAL_RCC_OscConfig+0x310>
 800450c:	69bb      	ldr	r3, [r7, #24]
 800450e:	2b0c      	cmp	r3, #12
 8004510:	d119      	bne.n	8004546 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	2b02      	cmp	r3, #2
 8004516:	d116      	bne.n	8004546 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004518:	4b7c      	ldr	r3, [pc, #496]	; (800470c <HAL_RCC_OscConfig+0x504>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004520:	2b00      	cmp	r3, #0
 8004522:	d005      	beq.n	8004530 <HAL_RCC_OscConfig+0x328>
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d101      	bne.n	8004530 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800452c:	2301      	movs	r3, #1
 800452e:	e27d      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004530:	4b76      	ldr	r3, [pc, #472]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004532:	685b      	ldr	r3, [r3, #4]
 8004534:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	061b      	lsls	r3, r3, #24
 800453e:	4973      	ldr	r1, [pc, #460]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004540:	4313      	orrs	r3, r2
 8004542:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004544:	e040      	b.n	80045c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	68db      	ldr	r3, [r3, #12]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d023      	beq.n	8004596 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800454e:	4b6f      	ldr	r3, [pc, #444]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a6e      	ldr	r2, [pc, #440]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004554:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004558:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800455a:	f7fc f83b 	bl	80005d4 <HAL_GetTick>
 800455e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004560:	e008      	b.n	8004574 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004562:	f7fc f837 	bl	80005d4 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	693b      	ldr	r3, [r7, #16]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d901      	bls.n	8004574 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004570:	2303      	movs	r3, #3
 8004572:	e25b      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004574:	4b65      	ldr	r3, [pc, #404]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800457c:	2b00      	cmp	r3, #0
 800457e:	d0f0      	beq.n	8004562 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004580:	4b62      	ldr	r3, [pc, #392]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	061b      	lsls	r3, r3, #24
 800458e:	495f      	ldr	r1, [pc, #380]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004590:	4313      	orrs	r3, r2
 8004592:	604b      	str	r3, [r1, #4]
 8004594:	e018      	b.n	80045c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004596:	4b5d      	ldr	r3, [pc, #372]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a5c      	ldr	r2, [pc, #368]	; (800470c <HAL_RCC_OscConfig+0x504>)
 800459c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a2:	f7fc f817 	bl	80005d4 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045aa:	f7fc f813 	bl	80005d4 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e237      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045bc:	4b53      	ldr	r3, [pc, #332]	; (800470c <HAL_RCC_OscConfig+0x504>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d1f0      	bne.n	80045aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f003 0308 	and.w	r3, r3, #8
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d03c      	beq.n	800464e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	695b      	ldr	r3, [r3, #20]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01c      	beq.n	8004616 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045dc:	4b4b      	ldr	r3, [pc, #300]	; (800470c <HAL_RCC_OscConfig+0x504>)
 80045de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045e2:	4a4a      	ldr	r2, [pc, #296]	; (800470c <HAL_RCC_OscConfig+0x504>)
 80045e4:	f043 0301 	orr.w	r3, r3, #1
 80045e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ec:	f7fb fff2 	bl	80005d4 <HAL_GetTick>
 80045f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80045f2:	e008      	b.n	8004606 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80045f4:	f7fb ffee 	bl	80005d4 <HAL_GetTick>
 80045f8:	4602      	mov	r2, r0
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	1ad3      	subs	r3, r2, r3
 80045fe:	2b02      	cmp	r3, #2
 8004600:	d901      	bls.n	8004606 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e212      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004606:	4b41      	ldr	r3, [pc, #260]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004608:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d0ef      	beq.n	80045f4 <HAL_RCC_OscConfig+0x3ec>
 8004614:	e01b      	b.n	800464e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004616:	4b3d      	ldr	r3, [pc, #244]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800461c:	4a3b      	ldr	r2, [pc, #236]	; (800470c <HAL_RCC_OscConfig+0x504>)
 800461e:	f023 0301 	bic.w	r3, r3, #1
 8004622:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004626:	f7fb ffd5 	bl	80005d4 <HAL_GetTick>
 800462a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800462c:	e008      	b.n	8004640 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800462e:	f7fb ffd1 	bl	80005d4 <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	693b      	ldr	r3, [r7, #16]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b02      	cmp	r3, #2
 800463a:	d901      	bls.n	8004640 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e1f5      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004640:	4b32      	ldr	r3, [pc, #200]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004642:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004646:	f003 0302 	and.w	r3, r3, #2
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1ef      	bne.n	800462e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f003 0304 	and.w	r3, r3, #4
 8004656:	2b00      	cmp	r3, #0
 8004658:	f000 80a6 	beq.w	80047a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800465c:	2300      	movs	r3, #0
 800465e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004660:	4b2a      	ldr	r3, [pc, #168]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10d      	bne.n	8004688 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800466c:	4b27      	ldr	r3, [pc, #156]	; (800470c <HAL_RCC_OscConfig+0x504>)
 800466e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004670:	4a26      	ldr	r2, [pc, #152]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004672:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004676:	6593      	str	r3, [r2, #88]	; 0x58
 8004678:	4b24      	ldr	r3, [pc, #144]	; (800470c <HAL_RCC_OscConfig+0x504>)
 800467a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800467c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004680:	60bb      	str	r3, [r7, #8]
 8004682:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004684:	2301      	movs	r3, #1
 8004686:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004688:	4b21      	ldr	r3, [pc, #132]	; (8004710 <HAL_RCC_OscConfig+0x508>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004690:	2b00      	cmp	r3, #0
 8004692:	d118      	bne.n	80046c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004694:	4b1e      	ldr	r3, [pc, #120]	; (8004710 <HAL_RCC_OscConfig+0x508>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a1d      	ldr	r2, [pc, #116]	; (8004710 <HAL_RCC_OscConfig+0x508>)
 800469a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800469e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046a0:	f7fb ff98 	bl	80005d4 <HAL_GetTick>
 80046a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046a6:	e008      	b.n	80046ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046a8:	f7fb ff94 	bl	80005d4 <HAL_GetTick>
 80046ac:	4602      	mov	r2, r0
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	2b02      	cmp	r3, #2
 80046b4:	d901      	bls.n	80046ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80046b6:	2303      	movs	r3, #3
 80046b8:	e1b8      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046ba:	4b15      	ldr	r3, [pc, #84]	; (8004710 <HAL_RCC_OscConfig+0x508>)
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d0f0      	beq.n	80046a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d108      	bne.n	80046e0 <HAL_RCC_OscConfig+0x4d8>
 80046ce:	4b0f      	ldr	r3, [pc, #60]	; (800470c <HAL_RCC_OscConfig+0x504>)
 80046d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046d4:	4a0d      	ldr	r2, [pc, #52]	; (800470c <HAL_RCC_OscConfig+0x504>)
 80046d6:	f043 0301 	orr.w	r3, r3, #1
 80046da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046de:	e029      	b.n	8004734 <HAL_RCC_OscConfig+0x52c>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	2b05      	cmp	r3, #5
 80046e6:	d115      	bne.n	8004714 <HAL_RCC_OscConfig+0x50c>
 80046e8:	4b08      	ldr	r3, [pc, #32]	; (800470c <HAL_RCC_OscConfig+0x504>)
 80046ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ee:	4a07      	ldr	r2, [pc, #28]	; (800470c <HAL_RCC_OscConfig+0x504>)
 80046f0:	f043 0304 	orr.w	r3, r3, #4
 80046f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046f8:	4b04      	ldr	r3, [pc, #16]	; (800470c <HAL_RCC_OscConfig+0x504>)
 80046fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046fe:	4a03      	ldr	r2, [pc, #12]	; (800470c <HAL_RCC_OscConfig+0x504>)
 8004700:	f043 0301 	orr.w	r3, r3, #1
 8004704:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004708:	e014      	b.n	8004734 <HAL_RCC_OscConfig+0x52c>
 800470a:	bf00      	nop
 800470c:	40021000 	.word	0x40021000
 8004710:	40007000 	.word	0x40007000
 8004714:	4b9d      	ldr	r3, [pc, #628]	; (800498c <HAL_RCC_OscConfig+0x784>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471a:	4a9c      	ldr	r2, [pc, #624]	; (800498c <HAL_RCC_OscConfig+0x784>)
 800471c:	f023 0301 	bic.w	r3, r3, #1
 8004720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004724:	4b99      	ldr	r3, [pc, #612]	; (800498c <HAL_RCC_OscConfig+0x784>)
 8004726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472a:	4a98      	ldr	r2, [pc, #608]	; (800498c <HAL_RCC_OscConfig+0x784>)
 800472c:	f023 0304 	bic.w	r3, r3, #4
 8004730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d016      	beq.n	800476a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800473c:	f7fb ff4a 	bl	80005d4 <HAL_GetTick>
 8004740:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004742:	e00a      	b.n	800475a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004744:	f7fb ff46 	bl	80005d4 <HAL_GetTick>
 8004748:	4602      	mov	r2, r0
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	1ad3      	subs	r3, r2, r3
 800474e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004752:	4293      	cmp	r3, r2
 8004754:	d901      	bls.n	800475a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004756:	2303      	movs	r3, #3
 8004758:	e168      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800475a:	4b8c      	ldr	r3, [pc, #560]	; (800498c <HAL_RCC_OscConfig+0x784>)
 800475c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	d0ed      	beq.n	8004744 <HAL_RCC_OscConfig+0x53c>
 8004768:	e015      	b.n	8004796 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800476a:	f7fb ff33 	bl	80005d4 <HAL_GetTick>
 800476e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004770:	e00a      	b.n	8004788 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004772:	f7fb ff2f 	bl	80005d4 <HAL_GetTick>
 8004776:	4602      	mov	r2, r0
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	1ad3      	subs	r3, r2, r3
 800477c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004780:	4293      	cmp	r3, r2
 8004782:	d901      	bls.n	8004788 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e151      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004788:	4b80      	ldr	r3, [pc, #512]	; (800498c <HAL_RCC_OscConfig+0x784>)
 800478a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800478e:	f003 0302 	and.w	r3, r3, #2
 8004792:	2b00      	cmp	r3, #0
 8004794:	d1ed      	bne.n	8004772 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004796:	7ffb      	ldrb	r3, [r7, #31]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d105      	bne.n	80047a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800479c:	4b7b      	ldr	r3, [pc, #492]	; (800498c <HAL_RCC_OscConfig+0x784>)
 800479e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047a0:	4a7a      	ldr	r2, [pc, #488]	; (800498c <HAL_RCC_OscConfig+0x784>)
 80047a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0320 	and.w	r3, r3, #32
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d03c      	beq.n	800482e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01c      	beq.n	80047f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80047bc:	4b73      	ldr	r3, [pc, #460]	; (800498c <HAL_RCC_OscConfig+0x784>)
 80047be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047c2:	4a72      	ldr	r2, [pc, #456]	; (800498c <HAL_RCC_OscConfig+0x784>)
 80047c4:	f043 0301 	orr.w	r3, r3, #1
 80047c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047cc:	f7fb ff02 	bl	80005d4 <HAL_GetTick>
 80047d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047d2:	e008      	b.n	80047e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80047d4:	f7fb fefe 	bl	80005d4 <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	2b02      	cmp	r3, #2
 80047e0:	d901      	bls.n	80047e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80047e2:	2303      	movs	r3, #3
 80047e4:	e122      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80047e6:	4b69      	ldr	r3, [pc, #420]	; (800498c <HAL_RCC_OscConfig+0x784>)
 80047e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047ec:	f003 0302 	and.w	r3, r3, #2
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d0ef      	beq.n	80047d4 <HAL_RCC_OscConfig+0x5cc>
 80047f4:	e01b      	b.n	800482e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80047f6:	4b65      	ldr	r3, [pc, #404]	; (800498c <HAL_RCC_OscConfig+0x784>)
 80047f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80047fc:	4a63      	ldr	r2, [pc, #396]	; (800498c <HAL_RCC_OscConfig+0x784>)
 80047fe:	f023 0301 	bic.w	r3, r3, #1
 8004802:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004806:	f7fb fee5 	bl	80005d4 <HAL_GetTick>
 800480a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800480c:	e008      	b.n	8004820 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800480e:	f7fb fee1 	bl	80005d4 <HAL_GetTick>
 8004812:	4602      	mov	r2, r0
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	2b02      	cmp	r3, #2
 800481a:	d901      	bls.n	8004820 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800481c:	2303      	movs	r3, #3
 800481e:	e105      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004820:	4b5a      	ldr	r3, [pc, #360]	; (800498c <HAL_RCC_OscConfig+0x784>)
 8004822:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004826:	f003 0302 	and.w	r3, r3, #2
 800482a:	2b00      	cmp	r3, #0
 800482c:	d1ef      	bne.n	800480e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004832:	2b00      	cmp	r3, #0
 8004834:	f000 80f9 	beq.w	8004a2a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483c:	2b02      	cmp	r3, #2
 800483e:	f040 80cf 	bne.w	80049e0 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004842:	4b52      	ldr	r3, [pc, #328]	; (800498c <HAL_RCC_OscConfig+0x784>)
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004848:	697b      	ldr	r3, [r7, #20]
 800484a:	f003 0203 	and.w	r2, r3, #3
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004852:	429a      	cmp	r2, r3
 8004854:	d12c      	bne.n	80048b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004860:	3b01      	subs	r3, #1
 8004862:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004864:	429a      	cmp	r2, r3
 8004866:	d123      	bne.n	80048b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004874:	429a      	cmp	r2, r3
 8004876:	d11b      	bne.n	80048b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004882:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004884:	429a      	cmp	r2, r3
 8004886:	d113      	bne.n	80048b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004892:	085b      	lsrs	r3, r3, #1
 8004894:	3b01      	subs	r3, #1
 8004896:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004898:	429a      	cmp	r2, r3
 800489a:	d109      	bne.n	80048b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	085b      	lsrs	r3, r3, #1
 80048a8:	3b01      	subs	r3, #1
 80048aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d071      	beq.n	8004994 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	2b0c      	cmp	r3, #12
 80048b4:	d068      	beq.n	8004988 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80048b6:	4b35      	ldr	r3, [pc, #212]	; (800498c <HAL_RCC_OscConfig+0x784>)
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d105      	bne.n	80048ce <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80048c2:	4b32      	ldr	r3, [pc, #200]	; (800498c <HAL_RCC_OscConfig+0x784>)
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d001      	beq.n	80048d2 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e0ac      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80048d2:	4b2e      	ldr	r3, [pc, #184]	; (800498c <HAL_RCC_OscConfig+0x784>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a2d      	ldr	r2, [pc, #180]	; (800498c <HAL_RCC_OscConfig+0x784>)
 80048d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80048dc:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80048de:	f7fb fe79 	bl	80005d4 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e6:	f7fb fe75 	bl	80005d4 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e099      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80048f8:	4b24      	ldr	r3, [pc, #144]	; (800498c <HAL_RCC_OscConfig+0x784>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f0      	bne.n	80048e6 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004904:	4b21      	ldr	r3, [pc, #132]	; (800498c <HAL_RCC_OscConfig+0x784>)
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	4b21      	ldr	r3, [pc, #132]	; (8004990 <HAL_RCC_OscConfig+0x788>)
 800490a:	4013      	ands	r3, r2
 800490c:	687a      	ldr	r2, [r7, #4]
 800490e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004910:	687a      	ldr	r2, [r7, #4]
 8004912:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8004914:	3a01      	subs	r2, #1
 8004916:	0112      	lsls	r2, r2, #4
 8004918:	4311      	orrs	r1, r2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800491e:	0212      	lsls	r2, r2, #8
 8004920:	4311      	orrs	r1, r2
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004926:	0852      	lsrs	r2, r2, #1
 8004928:	3a01      	subs	r2, #1
 800492a:	0552      	lsls	r2, r2, #21
 800492c:	4311      	orrs	r1, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004932:	0852      	lsrs	r2, r2, #1
 8004934:	3a01      	subs	r2, #1
 8004936:	0652      	lsls	r2, r2, #25
 8004938:	4311      	orrs	r1, r2
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800493e:	06d2      	lsls	r2, r2, #27
 8004940:	430a      	orrs	r2, r1
 8004942:	4912      	ldr	r1, [pc, #72]	; (800498c <HAL_RCC_OscConfig+0x784>)
 8004944:	4313      	orrs	r3, r2
 8004946:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8004948:	4b10      	ldr	r3, [pc, #64]	; (800498c <HAL_RCC_OscConfig+0x784>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a0f      	ldr	r2, [pc, #60]	; (800498c <HAL_RCC_OscConfig+0x784>)
 800494e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004952:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004954:	4b0d      	ldr	r3, [pc, #52]	; (800498c <HAL_RCC_OscConfig+0x784>)
 8004956:	68db      	ldr	r3, [r3, #12]
 8004958:	4a0c      	ldr	r2, [pc, #48]	; (800498c <HAL_RCC_OscConfig+0x784>)
 800495a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800495e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004960:	f7fb fe38 	bl	80005d4 <HAL_GetTick>
 8004964:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004966:	e008      	b.n	800497a <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004968:	f7fb fe34 	bl	80005d4 <HAL_GetTick>
 800496c:	4602      	mov	r2, r0
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	2b02      	cmp	r3, #2
 8004974:	d901      	bls.n	800497a <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8004976:	2303      	movs	r3, #3
 8004978:	e058      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800497a:	4b04      	ldr	r3, [pc, #16]	; (800498c <HAL_RCC_OscConfig+0x784>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004982:	2b00      	cmp	r3, #0
 8004984:	d0f0      	beq.n	8004968 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004986:	e050      	b.n	8004a2a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004988:	2301      	movs	r3, #1
 800498a:	e04f      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
 800498c:	40021000 	.word	0x40021000
 8004990:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004994:	4b27      	ldr	r3, [pc, #156]	; (8004a34 <HAL_RCC_OscConfig+0x82c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800499c:	2b00      	cmp	r3, #0
 800499e:	d144      	bne.n	8004a2a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80049a0:	4b24      	ldr	r3, [pc, #144]	; (8004a34 <HAL_RCC_OscConfig+0x82c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a23      	ldr	r2, [pc, #140]	; (8004a34 <HAL_RCC_OscConfig+0x82c>)
 80049a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80049ac:	4b21      	ldr	r3, [pc, #132]	; (8004a34 <HAL_RCC_OscConfig+0x82c>)
 80049ae:	68db      	ldr	r3, [r3, #12]
 80049b0:	4a20      	ldr	r2, [pc, #128]	; (8004a34 <HAL_RCC_OscConfig+0x82c>)
 80049b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80049b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80049b8:	f7fb fe0c 	bl	80005d4 <HAL_GetTick>
 80049bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049be:	e008      	b.n	80049d2 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049c0:	f7fb fe08 	bl	80005d4 <HAL_GetTick>
 80049c4:	4602      	mov	r2, r0
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	1ad3      	subs	r3, r2, r3
 80049ca:	2b02      	cmp	r3, #2
 80049cc:	d901      	bls.n	80049d2 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80049ce:	2303      	movs	r3, #3
 80049d0:	e02c      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80049d2:	4b18      	ldr	r3, [pc, #96]	; (8004a34 <HAL_RCC_OscConfig+0x82c>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d0f0      	beq.n	80049c0 <HAL_RCC_OscConfig+0x7b8>
 80049de:	e024      	b.n	8004a2a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b0c      	cmp	r3, #12
 80049e4:	d01f      	beq.n	8004a26 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049e6:	4b13      	ldr	r3, [pc, #76]	; (8004a34 <HAL_RCC_OscConfig+0x82c>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a12      	ldr	r2, [pc, #72]	; (8004a34 <HAL_RCC_OscConfig+0x82c>)
 80049ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80049f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049f2:	f7fb fdef 	bl	80005d4 <HAL_GetTick>
 80049f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049f8:	e008      	b.n	8004a0c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049fa:	f7fb fdeb 	bl	80005d4 <HAL_GetTick>
 80049fe:	4602      	mov	r2, r0
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	1ad3      	subs	r3, r2, r3
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d901      	bls.n	8004a0c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8004a08:	2303      	movs	r3, #3
 8004a0a:	e00f      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004a0c:	4b09      	ldr	r3, [pc, #36]	; (8004a34 <HAL_RCC_OscConfig+0x82c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d1f0      	bne.n	80049fa <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8004a18:	4b06      	ldr	r3, [pc, #24]	; (8004a34 <HAL_RCC_OscConfig+0x82c>)
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	4905      	ldr	r1, [pc, #20]	; (8004a34 <HAL_RCC_OscConfig+0x82c>)
 8004a1e:	4b06      	ldr	r3, [pc, #24]	; (8004a38 <HAL_RCC_OscConfig+0x830>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	60cb      	str	r3, [r1, #12]
 8004a24:	e001      	b.n	8004a2a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3720      	adds	r7, #32
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	40021000 	.word	0x40021000
 8004a38:	feeefffc 	.word	0xfeeefffc

08004a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b086      	sub	sp, #24
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d101      	bne.n	8004a54 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e11d      	b.n	8004c90 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a54:	4b90      	ldr	r3, [pc, #576]	; (8004c98 <HAL_RCC_ClockConfig+0x25c>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 030f 	and.w	r3, r3, #15
 8004a5c:	683a      	ldr	r2, [r7, #0]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d910      	bls.n	8004a84 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a62:	4b8d      	ldr	r3, [pc, #564]	; (8004c98 <HAL_RCC_ClockConfig+0x25c>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f023 020f 	bic.w	r2, r3, #15
 8004a6a:	498b      	ldr	r1, [pc, #556]	; (8004c98 <HAL_RCC_ClockConfig+0x25c>)
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a72:	4b89      	ldr	r3, [pc, #548]	; (8004c98 <HAL_RCC_ClockConfig+0x25c>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e105      	b.n	8004c90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0302 	and.w	r3, r3, #2
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d010      	beq.n	8004ab2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	4b81      	ldr	r3, [pc, #516]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d908      	bls.n	8004ab2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004aa0:	4b7e      	ldr	r3, [pc, #504]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	497b      	ldr	r1, [pc, #492]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004aae:	4313      	orrs	r3, r2
 8004ab0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f003 0301 	and.w	r3, r3, #1
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d079      	beq.n	8004bb2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	2b03      	cmp	r3, #3
 8004ac4:	d11e      	bne.n	8004b04 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004ac6:	4b75      	ldr	r3, [pc, #468]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d101      	bne.n	8004ad6 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	e0dc      	b.n	8004c90 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8004ad6:	f000 fa09 	bl	8004eec <RCC_GetSysClockFreqFromPLLSource>
 8004ada:	4603      	mov	r3, r0
 8004adc:	4a70      	ldr	r2, [pc, #448]	; (8004ca0 <HAL_RCC_ClockConfig+0x264>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d946      	bls.n	8004b70 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004ae2:	4b6e      	ldr	r3, [pc, #440]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d140      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004aee:	4b6b      	ldr	r3, [pc, #428]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004af6:	4a69      	ldr	r2, [pc, #420]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004af8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004afc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004afe:	2380      	movs	r3, #128	; 0x80
 8004b00:	617b      	str	r3, [r7, #20]
 8004b02:	e035      	b.n	8004b70 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	2b02      	cmp	r3, #2
 8004b0a:	d107      	bne.n	8004b1c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004b0c:	4b63      	ldr	r3, [pc, #396]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d115      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b18:	2301      	movs	r3, #1
 8004b1a:	e0b9      	b.n	8004c90 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d107      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004b24:	4b5d      	ldr	r3, [pc, #372]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d109      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b30:	2301      	movs	r3, #1
 8004b32:	e0ad      	b.n	8004c90 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004b34:	4b59      	ldr	r3, [pc, #356]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d101      	bne.n	8004b44 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8004b40:	2301      	movs	r3, #1
 8004b42:	e0a5      	b.n	8004c90 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8004b44:	f000 f8b4 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	4a55      	ldr	r2, [pc, #340]	; (8004ca0 <HAL_RCC_ClockConfig+0x264>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d90f      	bls.n	8004b70 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8004b50:	4b52      	ldr	r3, [pc, #328]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d109      	bne.n	8004b70 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004b5c:	4b4f      	ldr	r3, [pc, #316]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004b64:	4a4d      	ldr	r2, [pc, #308]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b6a:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004b6c:	2380      	movs	r3, #128	; 0x80
 8004b6e:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004b70:	4b4a      	ldr	r3, [pc, #296]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004b72:	689b      	ldr	r3, [r3, #8]
 8004b74:	f023 0203 	bic.w	r2, r3, #3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	4947      	ldr	r1, [pc, #284]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b82:	f7fb fd27 	bl	80005d4 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b88:	e00a      	b.n	8004ba0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b8a:	f7fb fd23 	bl	80005d4 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e077      	b.n	8004c90 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ba0:	4b3e      	ldr	r3, [pc, #248]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004ba2:	689b      	ldr	r3, [r3, #8]
 8004ba4:	f003 020c 	and.w	r2, r3, #12
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	685b      	ldr	r3, [r3, #4]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d1eb      	bne.n	8004b8a <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	2b80      	cmp	r3, #128	; 0x80
 8004bb6:	d105      	bne.n	8004bc4 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004bb8:	4b38      	ldr	r3, [pc, #224]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	4a37      	ldr	r2, [pc, #220]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004bbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004bc2:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 0302 	and.w	r3, r3, #2
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d010      	beq.n	8004bf2 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	689a      	ldr	r2, [r3, #8]
 8004bd4:	4b31      	ldr	r3, [pc, #196]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004bdc:	429a      	cmp	r2, r3
 8004bde:	d208      	bcs.n	8004bf2 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004be0:	4b2e      	ldr	r3, [pc, #184]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	492b      	ldr	r1, [pc, #172]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004bf2:	4b29      	ldr	r3, [pc, #164]	; (8004c98 <HAL_RCC_ClockConfig+0x25c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 030f 	and.w	r3, r3, #15
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d210      	bcs.n	8004c22 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c00:	4b25      	ldr	r3, [pc, #148]	; (8004c98 <HAL_RCC_ClockConfig+0x25c>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f023 020f 	bic.w	r2, r3, #15
 8004c08:	4923      	ldr	r1, [pc, #140]	; (8004c98 <HAL_RCC_ClockConfig+0x25c>)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c10:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <HAL_RCC_ClockConfig+0x25c>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f003 030f 	and.w	r3, r3, #15
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d001      	beq.n	8004c22 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8004c1e:	2301      	movs	r3, #1
 8004c20:	e036      	b.n	8004c90 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0304 	and.w	r3, r3, #4
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d008      	beq.n	8004c40 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c2e:	4b1b      	ldr	r3, [pc, #108]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	68db      	ldr	r3, [r3, #12]
 8004c3a:	4918      	ldr	r1, [pc, #96]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0308 	and.w	r3, r3, #8
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d009      	beq.n	8004c60 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004c4c:	4b13      	ldr	r3, [pc, #76]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	4910      	ldr	r1, [pc, #64]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004c5c:	4313      	orrs	r3, r2
 8004c5e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004c60:	f000 f826 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 8004c64:	4602      	mov	r2, r0
 8004c66:	4b0d      	ldr	r3, [pc, #52]	; (8004c9c <HAL_RCC_ClockConfig+0x260>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	091b      	lsrs	r3, r3, #4
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	490c      	ldr	r1, [pc, #48]	; (8004ca4 <HAL_RCC_ClockConfig+0x268>)
 8004c72:	5ccb      	ldrb	r3, [r1, r3]
 8004c74:	f003 031f 	and.w	r3, r3, #31
 8004c78:	fa22 f303 	lsr.w	r3, r2, r3
 8004c7c:	4a0a      	ldr	r2, [pc, #40]	; (8004ca8 <HAL_RCC_ClockConfig+0x26c>)
 8004c7e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004c80:	4b0a      	ldr	r3, [pc, #40]	; (8004cac <HAL_RCC_ClockConfig+0x270>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fb fc55 	bl	8000534 <HAL_InitTick>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	73fb      	strb	r3, [r7, #15]

  return status;
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3718      	adds	r7, #24
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}
 8004c98:	40022000 	.word	0x40022000
 8004c9c:	40021000 	.word	0x40021000
 8004ca0:	04c4b400 	.word	0x04c4b400
 8004ca4:	0800c5e8 	.word	0x0800c5e8
 8004ca8:	200002d0 	.word	0x200002d0
 8004cac:	20000000 	.word	0x20000000

08004cb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b089      	sub	sp, #36	; 0x24
 8004cb4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	61fb      	str	r3, [r7, #28]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cbe:	4b3e      	ldr	r3, [pc, #248]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cc0:	689b      	ldr	r3, [r3, #8]
 8004cc2:	f003 030c 	and.w	r3, r3, #12
 8004cc6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cc8:	4b3b      	ldr	r3, [pc, #236]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cca:	68db      	ldr	r3, [r3, #12]
 8004ccc:	f003 0303 	and.w	r3, r3, #3
 8004cd0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x34>
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	2b0c      	cmp	r3, #12
 8004cdc:	d121      	bne.n	8004d22 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d11e      	bne.n	8004d22 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004ce4:	4b34      	ldr	r3, [pc, #208]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f003 0308 	and.w	r3, r3, #8
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d107      	bne.n	8004d00 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004cf0:	4b31      	ldr	r3, [pc, #196]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cf6:	0a1b      	lsrs	r3, r3, #8
 8004cf8:	f003 030f 	and.w	r3, r3, #15
 8004cfc:	61fb      	str	r3, [r7, #28]
 8004cfe:	e005      	b.n	8004d0c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004d00:	4b2d      	ldr	r3, [pc, #180]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	091b      	lsrs	r3, r3, #4
 8004d06:	f003 030f 	and.w	r3, r3, #15
 8004d0a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004d0c:	4a2b      	ldr	r2, [pc, #172]	; (8004dbc <HAL_RCC_GetSysClockFreq+0x10c>)
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004d14:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d10d      	bne.n	8004d38 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004d1c:	69fb      	ldr	r3, [r7, #28]
 8004d1e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d20:	e00a      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	2b04      	cmp	r3, #4
 8004d26:	d102      	bne.n	8004d2e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004d28:	4b25      	ldr	r3, [pc, #148]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d2a:	61bb      	str	r3, [r7, #24]
 8004d2c:	e004      	b.n	8004d38 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b08      	cmp	r3, #8
 8004d32:	d101      	bne.n	8004d38 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004d34:	4b23      	ldr	r3, [pc, #140]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d36:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004d38:	693b      	ldr	r3, [r7, #16]
 8004d3a:	2b0c      	cmp	r3, #12
 8004d3c:	d134      	bne.n	8004da8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004d3e:	4b1e      	ldr	r3, [pc, #120]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f003 0303 	and.w	r3, r3, #3
 8004d46:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	2b02      	cmp	r3, #2
 8004d4c:	d003      	beq.n	8004d56 <HAL_RCC_GetSysClockFreq+0xa6>
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	2b03      	cmp	r3, #3
 8004d52:	d003      	beq.n	8004d5c <HAL_RCC_GetSysClockFreq+0xac>
 8004d54:	e005      	b.n	8004d62 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004d56:	4b1a      	ldr	r3, [pc, #104]	; (8004dc0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004d58:	617b      	str	r3, [r7, #20]
      break;
 8004d5a:	e005      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004d5c:	4b19      	ldr	r3, [pc, #100]	; (8004dc4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004d5e:	617b      	str	r3, [r7, #20]
      break;
 8004d60:	e002      	b.n	8004d68 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004d62:	69fb      	ldr	r3, [r7, #28]
 8004d64:	617b      	str	r3, [r7, #20]
      break;
 8004d66:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004d68:	4b13      	ldr	r3, [pc, #76]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d6a:	68db      	ldr	r3, [r3, #12]
 8004d6c:	091b      	lsrs	r3, r3, #4
 8004d6e:	f003 030f 	and.w	r3, r3, #15
 8004d72:	3301      	adds	r3, #1
 8004d74:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004d76:	4b10      	ldr	r3, [pc, #64]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	0a1b      	lsrs	r3, r3, #8
 8004d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d80:	697a      	ldr	r2, [r7, #20]
 8004d82:	fb03 f202 	mul.w	r2, r3, r2
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d8c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004d8e:	4b0a      	ldr	r3, [pc, #40]	; (8004db8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	0e5b      	lsrs	r3, r3, #25
 8004d94:	f003 0303 	and.w	r3, r3, #3
 8004d98:	3301      	adds	r3, #1
 8004d9a:	005b      	lsls	r3, r3, #1
 8004d9c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004d9e:	697a      	ldr	r2, [r7, #20]
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004da6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004da8:	69bb      	ldr	r3, [r7, #24]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3724      	adds	r7, #36	; 0x24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	0800c600 	.word	0x0800c600
 8004dc0:	00f42400 	.word	0x00f42400
 8004dc4:	007a1200 	.word	0x007a1200

08004dc8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004dcc:	4b03      	ldr	r3, [pc, #12]	; (8004ddc <HAL_RCC_GetHCLKFreq+0x14>)
 8004dce:	681b      	ldr	r3, [r3, #0]
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd8:	4770      	bx	lr
 8004dda:	bf00      	nop
 8004ddc:	200002d0 	.word	0x200002d0

08004de0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004de4:	f7ff fff0 	bl	8004dc8 <HAL_RCC_GetHCLKFreq>
 8004de8:	4602      	mov	r2, r0
 8004dea:	4b06      	ldr	r3, [pc, #24]	; (8004e04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dec:	689b      	ldr	r3, [r3, #8]
 8004dee:	0a1b      	lsrs	r3, r3, #8
 8004df0:	f003 0307 	and.w	r3, r3, #7
 8004df4:	4904      	ldr	r1, [pc, #16]	; (8004e08 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004df6:	5ccb      	ldrb	r3, [r1, r3]
 8004df8:	f003 031f 	and.w	r3, r3, #31
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	40021000 	.word	0x40021000
 8004e08:	0800c5f8 	.word	0x0800c5f8

08004e0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004e10:	f7ff ffda 	bl	8004dc8 <HAL_RCC_GetHCLKFreq>
 8004e14:	4602      	mov	r2, r0
 8004e16:	4b06      	ldr	r3, [pc, #24]	; (8004e30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	0adb      	lsrs	r3, r3, #11
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	4904      	ldr	r1, [pc, #16]	; (8004e34 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004e22:	5ccb      	ldrb	r3, [r1, r3]
 8004e24:	f003 031f 	and.w	r3, r3, #31
 8004e28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	bd80      	pop	{r7, pc}
 8004e30:	40021000 	.word	0x40021000
 8004e34:	0800c5f8 	.word	0x0800c5f8

08004e38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b086      	sub	sp, #24
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004e40:	2300      	movs	r3, #0
 8004e42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004e44:	4b27      	ldr	r3, [pc, #156]	; (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d003      	beq.n	8004e58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004e50:	f7ff f8ce 	bl	8003ff0 <HAL_PWREx_GetVoltageRange>
 8004e54:	6178      	str	r0, [r7, #20]
 8004e56:	e014      	b.n	8004e82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e58:	4b22      	ldr	r3, [pc, #136]	; (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5c:	4a21      	ldr	r2, [pc, #132]	; (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e62:	6593      	str	r3, [r2, #88]	; 0x58
 8004e64:	4b1f      	ldr	r3, [pc, #124]	; (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e6c:	60fb      	str	r3, [r7, #12]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004e70:	f7ff f8be 	bl	8003ff0 <HAL_PWREx_GetVoltageRange>
 8004e74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004e76:	4b1b      	ldr	r3, [pc, #108]	; (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ee4 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e88:	d10b      	bne.n	8004ea2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b80      	cmp	r3, #128	; 0x80
 8004e8e:	d913      	bls.n	8004eb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2ba0      	cmp	r3, #160	; 0xa0
 8004e94:	d902      	bls.n	8004e9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004e96:	2302      	movs	r3, #2
 8004e98:	613b      	str	r3, [r7, #16]
 8004e9a:	e00d      	b.n	8004eb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	e00a      	b.n	8004eb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8004ea6:	d902      	bls.n	8004eae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	613b      	str	r3, [r7, #16]
 8004eac:	e004      	b.n	8004eb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2b70      	cmp	r3, #112	; 0x70
 8004eb2:	d101      	bne.n	8004eb8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004eb8:	4b0b      	ldr	r3, [pc, #44]	; (8004ee8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f023 020f 	bic.w	r2, r3, #15
 8004ec0:	4909      	ldr	r1, [pc, #36]	; (8004ee8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	4313      	orrs	r3, r2
 8004ec6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004ec8:	4b07      	ldr	r3, [pc, #28]	; (8004ee8 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 030f 	and.w	r3, r3, #15
 8004ed0:	693a      	ldr	r2, [r7, #16]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d001      	beq.n	8004eda <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e000      	b.n	8004edc <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004eda:	2300      	movs	r3, #0
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3718      	adds	r7, #24
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}
 8004ee4:	40021000 	.word	0x40021000
 8004ee8:	40022000 	.word	0x40022000

08004eec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	b087      	sub	sp, #28
 8004ef0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004ef2:	4b2d      	ldr	r3, [pc, #180]	; (8004fa8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004ef4:	68db      	ldr	r3, [r3, #12]
 8004ef6:	f003 0303 	and.w	r3, r3, #3
 8004efa:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	2b03      	cmp	r3, #3
 8004f00:	d00b      	beq.n	8004f1a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b03      	cmp	r3, #3
 8004f06:	d825      	bhi.n	8004f54 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d008      	beq.n	8004f20 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	2b02      	cmp	r3, #2
 8004f12:	d11f      	bne.n	8004f54 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8004f14:	4b25      	ldr	r3, [pc, #148]	; (8004fac <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8004f16:	613b      	str	r3, [r7, #16]
    break;
 8004f18:	e01f      	b.n	8004f5a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8004f1a:	4b25      	ldr	r3, [pc, #148]	; (8004fb0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8004f1c:	613b      	str	r3, [r7, #16]
    break;
 8004f1e:	e01c      	b.n	8004f5a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004f20:	4b21      	ldr	r3, [pc, #132]	; (8004fa8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0308 	and.w	r3, r3, #8
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d107      	bne.n	8004f3c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f32:	0a1b      	lsrs	r3, r3, #8
 8004f34:	f003 030f 	and.w	r3, r3, #15
 8004f38:	617b      	str	r3, [r7, #20]
 8004f3a:	e005      	b.n	8004f48 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004f3c:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	091b      	lsrs	r3, r3, #4
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8004f48:	4a1a      	ldr	r2, [pc, #104]	; (8004fb4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f50:	613b      	str	r3, [r7, #16]
    break;
 8004f52:	e002      	b.n	8004f5a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	613b      	str	r3, [r7, #16]
    break;
 8004f58:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004f5a:	4b13      	ldr	r3, [pc, #76]	; (8004fa8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f5c:	68db      	ldr	r3, [r3, #12]
 8004f5e:	091b      	lsrs	r3, r3, #4
 8004f60:	f003 030f 	and.w	r3, r3, #15
 8004f64:	3301      	adds	r3, #1
 8004f66:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004f68:	4b0f      	ldr	r3, [pc, #60]	; (8004fa8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f6a:	68db      	ldr	r3, [r3, #12]
 8004f6c:	0a1b      	lsrs	r3, r3, #8
 8004f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	fb03 f202 	mul.w	r2, r3, r2
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f7e:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004f80:	4b09      	ldr	r3, [pc, #36]	; (8004fa8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	0e5b      	lsrs	r3, r3, #25
 8004f86:	f003 0303 	and.w	r3, r3, #3
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f98:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004f9a:	683b      	ldr	r3, [r7, #0]
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	371c      	adds	r7, #28
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa6:	4770      	bx	lr
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	00f42400 	.word	0x00f42400
 8004fb0:	007a1200 	.word	0x007a1200
 8004fb4:	0800c600 	.word	0x0800c600

08004fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d040      	beq.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fd8:	2b80      	cmp	r3, #128	; 0x80
 8004fda:	d02a      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004fdc:	2b80      	cmp	r3, #128	; 0x80
 8004fde:	d825      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004fe0:	2b60      	cmp	r3, #96	; 0x60
 8004fe2:	d026      	beq.n	8005032 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004fe4:	2b60      	cmp	r3, #96	; 0x60
 8004fe6:	d821      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004fe8:	2b40      	cmp	r3, #64	; 0x40
 8004fea:	d006      	beq.n	8004ffa <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004fec:	2b40      	cmp	r3, #64	; 0x40
 8004fee:	d81d      	bhi.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d009      	beq.n	8005008 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d010      	beq.n	800501a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004ff8:	e018      	b.n	800502c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ffa:	4b89      	ldr	r3, [pc, #548]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	4a88      	ldr	r2, [pc, #544]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005004:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005006:	e015      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	3304      	adds	r3, #4
 800500c:	2100      	movs	r1, #0
 800500e:	4618      	mov	r0, r3
 8005010:	f000 fb02 	bl	8005618 <RCCEx_PLLSAI1_Config>
 8005014:	4603      	mov	r3, r0
 8005016:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005018:	e00c      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3320      	adds	r3, #32
 800501e:	2100      	movs	r1, #0
 8005020:	4618      	mov	r0, r3
 8005022:	f000 fbed 	bl	8005800 <RCCEx_PLLSAI2_Config>
 8005026:	4603      	mov	r3, r0
 8005028:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800502a:	e003      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	74fb      	strb	r3, [r7, #19]
      break;
 8005030:	e000      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005032:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005034:	7cfb      	ldrb	r3, [r7, #19]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10b      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800503a:	4b79      	ldr	r3, [pc, #484]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800503c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005040:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005048:	4975      	ldr	r1, [pc, #468]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800504a:	4313      	orrs	r3, r2
 800504c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8005050:	e001      	b.n	8005056 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005052:	7cfb      	ldrb	r3, [r7, #19]
 8005054:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800505e:	2b00      	cmp	r3, #0
 8005060:	d047      	beq.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005066:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506a:	d030      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 800506c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005070:	d82a      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005076:	d02a      	beq.n	80050ce <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800507c:	d824      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800507e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005082:	d008      	beq.n	8005096 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005088:	d81e      	bhi.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800508a:	2b00      	cmp	r3, #0
 800508c:	d00a      	beq.n	80050a4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800508e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005092:	d010      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005094:	e018      	b.n	80050c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005096:	4b62      	ldr	r3, [pc, #392]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	4a61      	ldr	r2, [pc, #388]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800509c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050a0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050a2:	e015      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	3304      	adds	r3, #4
 80050a8:	2100      	movs	r1, #0
 80050aa:	4618      	mov	r0, r3
 80050ac:	f000 fab4 	bl	8005618 <RCCEx_PLLSAI1_Config>
 80050b0:	4603      	mov	r3, r0
 80050b2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050b4:	e00c      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	3320      	adds	r3, #32
 80050ba:	2100      	movs	r1, #0
 80050bc:	4618      	mov	r0, r3
 80050be:	f000 fb9f 	bl	8005800 <RCCEx_PLLSAI2_Config>
 80050c2:	4603      	mov	r3, r0
 80050c4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80050c6:	e003      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80050c8:	2301      	movs	r3, #1
 80050ca:	74fb      	strb	r3, [r7, #19]
      break;
 80050cc:	e000      	b.n	80050d0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80050ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80050d0:	7cfb      	ldrb	r3, [r7, #19]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d10b      	bne.n	80050ee <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80050d6:	4b52      	ldr	r3, [pc, #328]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e4:	494e      	ldr	r1, [pc, #312]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80050ec:	e001      	b.n	80050f2 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050ee:	7cfb      	ldrb	r3, [r7, #19]
 80050f0:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 809f 	beq.w	800523e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005100:	2300      	movs	r3, #0
 8005102:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005104:	4b46      	ldr	r3, [pc, #280]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d101      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005110:	2301      	movs	r3, #1
 8005112:	e000      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005114:	2300      	movs	r3, #0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d00d      	beq.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800511a:	4b41      	ldr	r3, [pc, #260]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800511c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800511e:	4a40      	ldr	r2, [pc, #256]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005124:	6593      	str	r3, [r2, #88]	; 0x58
 8005126:	4b3e      	ldr	r3, [pc, #248]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800512e:	60bb      	str	r3, [r7, #8]
 8005130:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005132:	2301      	movs	r3, #1
 8005134:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005136:	4b3b      	ldr	r3, [pc, #236]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a3a      	ldr	r2, [pc, #232]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800513c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005140:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005142:	f7fb fa47 	bl	80005d4 <HAL_GetTick>
 8005146:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005148:	e009      	b.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800514a:	f7fb fa43 	bl	80005d4 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b02      	cmp	r3, #2
 8005156:	d902      	bls.n	800515e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	74fb      	strb	r3, [r7, #19]
        break;
 800515c:	e005      	b.n	800516a <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800515e:	4b31      	ldr	r3, [pc, #196]	; (8005224 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005166:	2b00      	cmp	r3, #0
 8005168:	d0ef      	beq.n	800514a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800516a:	7cfb      	ldrb	r3, [r7, #19]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d15b      	bne.n	8005228 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005170:	4b2b      	ldr	r3, [pc, #172]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800517a:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d01f      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005188:	697a      	ldr	r2, [r7, #20]
 800518a:	429a      	cmp	r2, r3
 800518c:	d019      	beq.n	80051c2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800518e:	4b24      	ldr	r3, [pc, #144]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005194:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005198:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800519a:	4b21      	ldr	r3, [pc, #132]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800519c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051a0:	4a1f      	ldr	r2, [pc, #124]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80051a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80051aa:	4b1d      	ldr	r3, [pc, #116]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051b0:	4a1b      	ldr	r2, [pc, #108]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80051ba:	4a19      	ldr	r2, [pc, #100]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	f003 0301 	and.w	r3, r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d016      	beq.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051cc:	f7fb fa02 	bl	80005d4 <HAL_GetTick>
 80051d0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051d2:	e00b      	b.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051d4:	f7fb f9fe 	bl	80005d4 <HAL_GetTick>
 80051d8:	4602      	mov	r2, r0
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	1ad3      	subs	r3, r2, r3
 80051de:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d902      	bls.n	80051ec <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80051e6:	2303      	movs	r3, #3
 80051e8:	74fb      	strb	r3, [r7, #19]
            break;
 80051ea:	e006      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80051ec:	4b0c      	ldr	r3, [pc, #48]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80051ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0ec      	beq.n	80051d4 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80051fa:	7cfb      	ldrb	r3, [r7, #19]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d10c      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005200:	4b07      	ldr	r3, [pc, #28]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005206:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005210:	4903      	ldr	r1, [pc, #12]	; (8005220 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005212:	4313      	orrs	r3, r2
 8005214:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005218:	e008      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800521a:	7cfb      	ldrb	r3, [r7, #19]
 800521c:	74bb      	strb	r3, [r7, #18]
 800521e:	e005      	b.n	800522c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005220:	40021000 	.word	0x40021000
 8005224:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005228:	7cfb      	ldrb	r3, [r7, #19]
 800522a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800522c:	7c7b      	ldrb	r3, [r7, #17]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d105      	bne.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005232:	4ba0      	ldr	r3, [pc, #640]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005234:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005236:	4a9f      	ldr	r2, [pc, #636]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005238:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800523c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	f003 0301 	and.w	r3, r3, #1
 8005246:	2b00      	cmp	r3, #0
 8005248:	d00a      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800524a:	4b9a      	ldr	r3, [pc, #616]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800524c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005250:	f023 0203 	bic.w	r2, r3, #3
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005258:	4996      	ldr	r1, [pc, #600]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800525a:	4313      	orrs	r3, r2
 800525c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0302 	and.w	r3, r3, #2
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00a      	beq.n	8005282 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800526c:	4b91      	ldr	r3, [pc, #580]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800526e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005272:	f023 020c 	bic.w	r2, r3, #12
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	498e      	ldr	r1, [pc, #568]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800527c:	4313      	orrs	r3, r2
 800527e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0304 	and.w	r3, r3, #4
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800528e:	4b89      	ldr	r3, [pc, #548]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005290:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005294:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800529c:	4985      	ldr	r1, [pc, #532]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800529e:	4313      	orrs	r3, r2
 80052a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 0308 	and.w	r3, r3, #8
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00a      	beq.n	80052c6 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052b0:	4b80      	ldr	r3, [pc, #512]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052b6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052be:	497d      	ldr	r1, [pc, #500]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00a      	beq.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052d2:	4b78      	ldr	r3, [pc, #480]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052e0:	4974      	ldr	r1, [pc, #464]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052e2:	4313      	orrs	r3, r2
 80052e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d00a      	beq.n	800530a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80052f4:	4b6f      	ldr	r3, [pc, #444]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80052f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052fa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005302:	496c      	ldr	r1, [pc, #432]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005304:	4313      	orrs	r3, r2
 8005306:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00a      	beq.n	800532c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005316:	4b67      	ldr	r3, [pc, #412]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005318:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800531c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005324:	4963      	ldr	r1, [pc, #396]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005326:	4313      	orrs	r3, r2
 8005328:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005338:	4b5e      	ldr	r3, [pc, #376]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800533a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800533e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005346:	495b      	ldr	r1, [pc, #364]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005348:	4313      	orrs	r3, r2
 800534a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800535a:	4b56      	ldr	r3, [pc, #344]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800535c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005360:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005368:	4952      	ldr	r1, [pc, #328]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800536a:	4313      	orrs	r3, r2
 800536c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800537c:	4b4d      	ldr	r3, [pc, #308]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800537e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005382:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800538a:	494a      	ldr	r1, [pc, #296]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800538c:	4313      	orrs	r3, r2
 800538e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800539e:	4b45      	ldr	r3, [pc, #276]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053ac:	4941      	ldr	r1, [pc, #260]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053ae:	4313      	orrs	r3, r2
 80053b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80053c0:	4b3c      	ldr	r3, [pc, #240]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80053c6:	f023 0203 	bic.w	r2, r3, #3
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053ce:	4939      	ldr	r1, [pc, #228]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053d0:	4313      	orrs	r3, r2
 80053d2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d028      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80053e2:	4b34      	ldr	r3, [pc, #208]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053f0:	4930      	ldr	r1, [pc, #192]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005400:	d106      	bne.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005402:	4b2c      	ldr	r3, [pc, #176]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005404:	68db      	ldr	r3, [r3, #12]
 8005406:	4a2b      	ldr	r2, [pc, #172]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005408:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800540c:	60d3      	str	r3, [r2, #12]
 800540e:	e011      	b.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005414:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005418:	d10c      	bne.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	3304      	adds	r3, #4
 800541e:	2101      	movs	r1, #1
 8005420:	4618      	mov	r0, r3
 8005422:	f000 f8f9 	bl	8005618 <RCCEx_PLLSAI1_Config>
 8005426:	4603      	mov	r3, r0
 8005428:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800542a:	7cfb      	ldrb	r3, [r7, #19]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d001      	beq.n	8005434 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005430:	7cfb      	ldrb	r3, [r7, #19]
 8005432:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d04d      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005444:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005448:	d108      	bne.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800544a:	4b1a      	ldr	r3, [pc, #104]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800544c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005450:	4a18      	ldr	r2, [pc, #96]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005452:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005456:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800545a:	e012      	b.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 800545c:	4b15      	ldr	r3, [pc, #84]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800545e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005462:	4a14      	ldr	r2, [pc, #80]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005464:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005468:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800546c:	4b11      	ldr	r3, [pc, #68]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800546e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005472:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800547a:	490e      	ldr	r1, [pc, #56]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800547c:	4313      	orrs	r3, r2
 800547e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005486:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800548a:	d106      	bne.n	800549a <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800548c:	4b09      	ldr	r3, [pc, #36]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	4a08      	ldr	r2, [pc, #32]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005492:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005496:	60d3      	str	r3, [r2, #12]
 8005498:	e020      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800549e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80054a2:	d109      	bne.n	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80054a4:	4b03      	ldr	r3, [pc, #12]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	4a02      	ldr	r2, [pc, #8]	; (80054b4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80054aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80054ae:	60d3      	str	r3, [r2, #12]
 80054b0:	e014      	b.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x524>
 80054b2:	bf00      	nop
 80054b4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80054bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80054c0:	d10c      	bne.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	3304      	adds	r3, #4
 80054c6:	2101      	movs	r1, #1
 80054c8:	4618      	mov	r0, r3
 80054ca:	f000 f8a5 	bl	8005618 <RCCEx_PLLSAI1_Config>
 80054ce:	4603      	mov	r3, r0
 80054d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80054d2:	7cfb      	ldrb	r3, [r7, #19]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d001      	beq.n	80054dc <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80054d8:	7cfb      	ldrb	r3, [r7, #19]
 80054da:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d028      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80054e8:	4b4a      	ldr	r3, [pc, #296]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80054ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80054f6:	4947      	ldr	r1, [pc, #284]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054f8:	4313      	orrs	r3, r2
 80054fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005502:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005506:	d106      	bne.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005508:	4b42      	ldr	r3, [pc, #264]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	4a41      	ldr	r2, [pc, #260]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800550e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005512:	60d3      	str	r3, [r2, #12]
 8005514:	e011      	b.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800551a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800551e:	d10c      	bne.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	3304      	adds	r3, #4
 8005524:	2101      	movs	r1, #1
 8005526:	4618      	mov	r0, r3
 8005528:	f000 f876 	bl	8005618 <RCCEx_PLLSAI1_Config>
 800552c:	4603      	mov	r3, r0
 800552e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005530:	7cfb      	ldrb	r3, [r7, #19]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d001      	beq.n	800553a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005536:	7cfb      	ldrb	r3, [r7, #19]
 8005538:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005542:	2b00      	cmp	r3, #0
 8005544:	d01e      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005546:	4b33      	ldr	r3, [pc, #204]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005548:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800554c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005556:	492f      	ldr	r1, [pc, #188]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005564:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005568:	d10c      	bne.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	3304      	adds	r3, #4
 800556e:	2102      	movs	r1, #2
 8005570:	4618      	mov	r0, r3
 8005572:	f000 f851 	bl	8005618 <RCCEx_PLLSAI1_Config>
 8005576:	4603      	mov	r3, r0
 8005578:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800557a:	7cfb      	ldrb	r3, [r7, #19]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d001      	beq.n	8005584 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005580:	7cfb      	ldrb	r3, [r7, #19]
 8005582:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00b      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005590:	4b20      	ldr	r3, [pc, #128]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005592:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005596:	f023 0204 	bic.w	r2, r3, #4
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055a0:	491c      	ldr	r1, [pc, #112]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055a2:	4313      	orrs	r3, r2
 80055a4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d00b      	beq.n	80055cc <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80055b4:	4b17      	ldr	r3, [pc, #92]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055ba:	f023 0218 	bic.w	r2, r3, #24
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055c4:	4913      	ldr	r1, [pc, #76]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d017      	beq.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80055d8:	4b0e      	ldr	r3, [pc, #56]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055e8:	490a      	ldr	r1, [pc, #40]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80055f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80055fa:	d105      	bne.n	8005608 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80055fc:	4b05      	ldr	r3, [pc, #20]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	4a04      	ldr	r2, [pc, #16]	; (8005614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005602:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005606:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005608:	7cbb      	ldrb	r3, [r7, #18]
}
 800560a:	4618      	mov	r0, r3
 800560c:	3718      	adds	r7, #24
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}
 8005612:	bf00      	nop
 8005614:	40021000 	.word	0x40021000

08005618 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b084      	sub	sp, #16
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005622:	2300      	movs	r3, #0
 8005624:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005626:	4b72      	ldr	r3, [pc, #456]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005628:	68db      	ldr	r3, [r3, #12]
 800562a:	f003 0303 	and.w	r3, r3, #3
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00e      	beq.n	8005650 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005632:	4b6f      	ldr	r3, [pc, #444]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005634:	68db      	ldr	r3, [r3, #12]
 8005636:	f003 0203 	and.w	r2, r3, #3
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d103      	bne.n	800564a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
       ||
 8005646:	2b00      	cmp	r3, #0
 8005648:	d142      	bne.n	80056d0 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
 800564e:	e03f      	b.n	80056d0 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2b03      	cmp	r3, #3
 8005656:	d018      	beq.n	800568a <RCCEx_PLLSAI1_Config+0x72>
 8005658:	2b03      	cmp	r3, #3
 800565a:	d825      	bhi.n	80056a8 <RCCEx_PLLSAI1_Config+0x90>
 800565c:	2b01      	cmp	r3, #1
 800565e:	d002      	beq.n	8005666 <RCCEx_PLLSAI1_Config+0x4e>
 8005660:	2b02      	cmp	r3, #2
 8005662:	d009      	beq.n	8005678 <RCCEx_PLLSAI1_Config+0x60>
 8005664:	e020      	b.n	80056a8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005666:	4b62      	ldr	r3, [pc, #392]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0302 	and.w	r3, r3, #2
 800566e:	2b00      	cmp	r3, #0
 8005670:	d11d      	bne.n	80056ae <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005676:	e01a      	b.n	80056ae <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005678:	4b5d      	ldr	r3, [pc, #372]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005680:	2b00      	cmp	r3, #0
 8005682:	d116      	bne.n	80056b2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005688:	e013      	b.n	80056b2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800568a:	4b59      	ldr	r3, [pc, #356]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005692:	2b00      	cmp	r3, #0
 8005694:	d10f      	bne.n	80056b6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005696:	4b56      	ldr	r3, [pc, #344]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d109      	bne.n	80056b6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80056a2:	2301      	movs	r3, #1
 80056a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056a6:	e006      	b.n	80056b6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	73fb      	strb	r3, [r7, #15]
      break;
 80056ac:	e004      	b.n	80056b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80056ae:	bf00      	nop
 80056b0:	e002      	b.n	80056b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80056b2:	bf00      	nop
 80056b4:	e000      	b.n	80056b8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80056b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80056b8:	7bfb      	ldrb	r3, [r7, #15]
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d108      	bne.n	80056d0 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80056be:	4b4c      	ldr	r3, [pc, #304]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056c0:	68db      	ldr	r3, [r3, #12]
 80056c2:	f023 0203 	bic.w	r2, r3, #3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4949      	ldr	r1, [pc, #292]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	f040 8086 	bne.w	80057e4 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80056d8:	4b45      	ldr	r3, [pc, #276]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	4a44      	ldr	r2, [pc, #272]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80056de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80056e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056e4:	f7fa ff76 	bl	80005d4 <HAL_GetTick>
 80056e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80056ea:	e009      	b.n	8005700 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80056ec:	f7fa ff72 	bl	80005d4 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d902      	bls.n	8005700 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80056fa:	2303      	movs	r3, #3
 80056fc:	73fb      	strb	r3, [r7, #15]
        break;
 80056fe:	e005      	b.n	800570c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005700:	4b3b      	ldr	r3, [pc, #236]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d1ef      	bne.n	80056ec <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800570c:	7bfb      	ldrb	r3, [r7, #15]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d168      	bne.n	80057e4 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d113      	bne.n	8005740 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005718:	4b35      	ldr	r3, [pc, #212]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800571a:	691a      	ldr	r2, [r3, #16]
 800571c:	4b35      	ldr	r3, [pc, #212]	; (80057f4 <RCCEx_PLLSAI1_Config+0x1dc>)
 800571e:	4013      	ands	r3, r2
 8005720:	687a      	ldr	r2, [r7, #4]
 8005722:	6892      	ldr	r2, [r2, #8]
 8005724:	0211      	lsls	r1, r2, #8
 8005726:	687a      	ldr	r2, [r7, #4]
 8005728:	68d2      	ldr	r2, [r2, #12]
 800572a:	06d2      	lsls	r2, r2, #27
 800572c:	4311      	orrs	r1, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6852      	ldr	r2, [r2, #4]
 8005732:	3a01      	subs	r2, #1
 8005734:	0112      	lsls	r2, r2, #4
 8005736:	430a      	orrs	r2, r1
 8005738:	492d      	ldr	r1, [pc, #180]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800573a:	4313      	orrs	r3, r2
 800573c:	610b      	str	r3, [r1, #16]
 800573e:	e02d      	b.n	800579c <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b01      	cmp	r3, #1
 8005744:	d115      	bne.n	8005772 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005746:	4b2a      	ldr	r3, [pc, #168]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005748:	691a      	ldr	r2, [r3, #16]
 800574a:	4b2b      	ldr	r3, [pc, #172]	; (80057f8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800574c:	4013      	ands	r3, r2
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6892      	ldr	r2, [r2, #8]
 8005752:	0211      	lsls	r1, r2, #8
 8005754:	687a      	ldr	r2, [r7, #4]
 8005756:	6912      	ldr	r2, [r2, #16]
 8005758:	0852      	lsrs	r2, r2, #1
 800575a:	3a01      	subs	r2, #1
 800575c:	0552      	lsls	r2, r2, #21
 800575e:	4311      	orrs	r1, r2
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	6852      	ldr	r2, [r2, #4]
 8005764:	3a01      	subs	r2, #1
 8005766:	0112      	lsls	r2, r2, #4
 8005768:	430a      	orrs	r2, r1
 800576a:	4921      	ldr	r1, [pc, #132]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800576c:	4313      	orrs	r3, r2
 800576e:	610b      	str	r3, [r1, #16]
 8005770:	e014      	b.n	800579c <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005772:	4b1f      	ldr	r3, [pc, #124]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005774:	691a      	ldr	r2, [r3, #16]
 8005776:	4b21      	ldr	r3, [pc, #132]	; (80057fc <RCCEx_PLLSAI1_Config+0x1e4>)
 8005778:	4013      	ands	r3, r2
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	6892      	ldr	r2, [r2, #8]
 800577e:	0211      	lsls	r1, r2, #8
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	6952      	ldr	r2, [r2, #20]
 8005784:	0852      	lsrs	r2, r2, #1
 8005786:	3a01      	subs	r2, #1
 8005788:	0652      	lsls	r2, r2, #25
 800578a:	4311      	orrs	r1, r2
 800578c:	687a      	ldr	r2, [r7, #4]
 800578e:	6852      	ldr	r2, [r2, #4]
 8005790:	3a01      	subs	r2, #1
 8005792:	0112      	lsls	r2, r2, #4
 8005794:	430a      	orrs	r2, r1
 8005796:	4916      	ldr	r1, [pc, #88]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 8005798:	4313      	orrs	r3, r2
 800579a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800579c:	4b14      	ldr	r3, [pc, #80]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a13      	ldr	r2, [pc, #76]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057a2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057a6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057a8:	f7fa ff14 	bl	80005d4 <HAL_GetTick>
 80057ac:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057ae:	e009      	b.n	80057c4 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80057b0:	f7fa ff10 	bl	80005d4 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d902      	bls.n	80057c4 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	73fb      	strb	r3, [r7, #15]
          break;
 80057c2:	e005      	b.n	80057d0 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80057c4:	4b0a      	ldr	r3, [pc, #40]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d0ef      	beq.n	80057b0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d106      	bne.n	80057e4 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057d8:	691a      	ldr	r2, [r3, #16]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	699b      	ldr	r3, [r3, #24]
 80057de:	4904      	ldr	r1, [pc, #16]	; (80057f0 <RCCEx_PLLSAI1_Config+0x1d8>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3710      	adds	r7, #16
 80057ea:	46bd      	mov	sp, r7
 80057ec:	bd80      	pop	{r7, pc}
 80057ee:	bf00      	nop
 80057f0:	40021000 	.word	0x40021000
 80057f4:	07ff800f 	.word	0x07ff800f
 80057f8:	ff9f800f 	.word	0xff9f800f
 80057fc:	f9ff800f 	.word	0xf9ff800f

08005800 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
 8005808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800580a:	2300      	movs	r3, #0
 800580c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800580e:	4b72      	ldr	r3, [pc, #456]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00e      	beq.n	8005838 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800581a:	4b6f      	ldr	r3, [pc, #444]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f003 0203 	and.w	r2, r3, #3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	429a      	cmp	r2, r3
 8005828:	d103      	bne.n	8005832 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
       ||
 800582e:	2b00      	cmp	r3, #0
 8005830:	d142      	bne.n	80058b8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	73fb      	strb	r3, [r7, #15]
 8005836:	e03f      	b.n	80058b8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b03      	cmp	r3, #3
 800583e:	d018      	beq.n	8005872 <RCCEx_PLLSAI2_Config+0x72>
 8005840:	2b03      	cmp	r3, #3
 8005842:	d825      	bhi.n	8005890 <RCCEx_PLLSAI2_Config+0x90>
 8005844:	2b01      	cmp	r3, #1
 8005846:	d002      	beq.n	800584e <RCCEx_PLLSAI2_Config+0x4e>
 8005848:	2b02      	cmp	r3, #2
 800584a:	d009      	beq.n	8005860 <RCCEx_PLLSAI2_Config+0x60>
 800584c:	e020      	b.n	8005890 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800584e:	4b62      	ldr	r3, [pc, #392]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d11d      	bne.n	8005896 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800585e:	e01a      	b.n	8005896 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005860:	4b5d      	ldr	r3, [pc, #372]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005868:	2b00      	cmp	r3, #0
 800586a:	d116      	bne.n	800589a <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 800586c:	2301      	movs	r3, #1
 800586e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005870:	e013      	b.n	800589a <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005872:	4b59      	ldr	r3, [pc, #356]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587a:	2b00      	cmp	r3, #0
 800587c:	d10f      	bne.n	800589e <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800587e:	4b56      	ldr	r3, [pc, #344]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d109      	bne.n	800589e <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800588e:	e006      	b.n	800589e <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	73fb      	strb	r3, [r7, #15]
      break;
 8005894:	e004      	b.n	80058a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8005896:	bf00      	nop
 8005898:	e002      	b.n	80058a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800589a:	bf00      	nop
 800589c:	e000      	b.n	80058a0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800589e:	bf00      	nop
    }

    if(status == HAL_OK)
 80058a0:	7bfb      	ldrb	r3, [r7, #15]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d108      	bne.n	80058b8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80058a6:	4b4c      	ldr	r3, [pc, #304]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	f023 0203 	bic.w	r2, r3, #3
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4949      	ldr	r1, [pc, #292]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80058b8:	7bfb      	ldrb	r3, [r7, #15]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	f040 8086 	bne.w	80059cc <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80058c0:	4b45      	ldr	r3, [pc, #276]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	4a44      	ldr	r2, [pc, #272]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058cc:	f7fa fe82 	bl	80005d4 <HAL_GetTick>
 80058d0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058d2:	e009      	b.n	80058e8 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80058d4:	f7fa fe7e 	bl	80005d4 <HAL_GetTick>
 80058d8:	4602      	mov	r2, r0
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	1ad3      	subs	r3, r2, r3
 80058de:	2b02      	cmp	r3, #2
 80058e0:	d902      	bls.n	80058e8 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80058e2:	2303      	movs	r3, #3
 80058e4:	73fb      	strb	r3, [r7, #15]
        break;
 80058e6:	e005      	b.n	80058f4 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80058e8:	4b3b      	ldr	r3, [pc, #236]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d1ef      	bne.n	80058d4 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80058f4:	7bfb      	ldrb	r3, [r7, #15]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d168      	bne.n	80059cc <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d113      	bne.n	8005928 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005900:	4b35      	ldr	r3, [pc, #212]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005902:	695a      	ldr	r2, [r3, #20]
 8005904:	4b35      	ldr	r3, [pc, #212]	; (80059dc <RCCEx_PLLSAI2_Config+0x1dc>)
 8005906:	4013      	ands	r3, r2
 8005908:	687a      	ldr	r2, [r7, #4]
 800590a:	6892      	ldr	r2, [r2, #8]
 800590c:	0211      	lsls	r1, r2, #8
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68d2      	ldr	r2, [r2, #12]
 8005912:	06d2      	lsls	r2, r2, #27
 8005914:	4311      	orrs	r1, r2
 8005916:	687a      	ldr	r2, [r7, #4]
 8005918:	6852      	ldr	r2, [r2, #4]
 800591a:	3a01      	subs	r2, #1
 800591c:	0112      	lsls	r2, r2, #4
 800591e:	430a      	orrs	r2, r1
 8005920:	492d      	ldr	r1, [pc, #180]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005922:	4313      	orrs	r3, r2
 8005924:	614b      	str	r3, [r1, #20]
 8005926:	e02d      	b.n	8005984 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	2b01      	cmp	r3, #1
 800592c:	d115      	bne.n	800595a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800592e:	4b2a      	ldr	r3, [pc, #168]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005930:	695a      	ldr	r2, [r3, #20]
 8005932:	4b2b      	ldr	r3, [pc, #172]	; (80059e0 <RCCEx_PLLSAI2_Config+0x1e0>)
 8005934:	4013      	ands	r3, r2
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	6892      	ldr	r2, [r2, #8]
 800593a:	0211      	lsls	r1, r2, #8
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6912      	ldr	r2, [r2, #16]
 8005940:	0852      	lsrs	r2, r2, #1
 8005942:	3a01      	subs	r2, #1
 8005944:	0552      	lsls	r2, r2, #21
 8005946:	4311      	orrs	r1, r2
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	6852      	ldr	r2, [r2, #4]
 800594c:	3a01      	subs	r2, #1
 800594e:	0112      	lsls	r2, r2, #4
 8005950:	430a      	orrs	r2, r1
 8005952:	4921      	ldr	r1, [pc, #132]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005954:	4313      	orrs	r3, r2
 8005956:	614b      	str	r3, [r1, #20]
 8005958:	e014      	b.n	8005984 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800595a:	4b1f      	ldr	r3, [pc, #124]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800595c:	695a      	ldr	r2, [r3, #20]
 800595e:	4b21      	ldr	r3, [pc, #132]	; (80059e4 <RCCEx_PLLSAI2_Config+0x1e4>)
 8005960:	4013      	ands	r3, r2
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	6892      	ldr	r2, [r2, #8]
 8005966:	0211      	lsls	r1, r2, #8
 8005968:	687a      	ldr	r2, [r7, #4]
 800596a:	6952      	ldr	r2, [r2, #20]
 800596c:	0852      	lsrs	r2, r2, #1
 800596e:	3a01      	subs	r2, #1
 8005970:	0652      	lsls	r2, r2, #25
 8005972:	4311      	orrs	r1, r2
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6852      	ldr	r2, [r2, #4]
 8005978:	3a01      	subs	r2, #1
 800597a:	0112      	lsls	r2, r2, #4
 800597c:	430a      	orrs	r2, r1
 800597e:	4916      	ldr	r1, [pc, #88]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005980:	4313      	orrs	r3, r2
 8005982:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005984:	4b14      	ldr	r3, [pc, #80]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a13      	ldr	r2, [pc, #76]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 800598a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800598e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005990:	f7fa fe20 	bl	80005d4 <HAL_GetTick>
 8005994:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005996:	e009      	b.n	80059ac <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005998:	f7fa fe1c 	bl	80005d4 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	2b02      	cmp	r3, #2
 80059a4:	d902      	bls.n	80059ac <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80059a6:	2303      	movs	r3, #3
 80059a8:	73fb      	strb	r3, [r7, #15]
          break;
 80059aa:	e005      	b.n	80059b8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80059ac:	4b0a      	ldr	r3, [pc, #40]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d0ef      	beq.n	8005998 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80059be:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059c0:	695a      	ldr	r2, [r3, #20]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	4904      	ldr	r1, [pc, #16]	; (80059d8 <RCCEx_PLLSAI2_Config+0x1d8>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80059cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40021000 	.word	0x40021000
 80059dc:	07ff800f 	.word	0x07ff800f
 80059e0:	ff9f800f 	.word	0xff9f800f
 80059e4:	f9ff800f 	.word	0xf9ff800f

080059e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e049      	b.n	8005a8e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f006 fbb6 	bl	800c180 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2202      	movs	r2, #2
 8005a18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681a      	ldr	r2, [r3, #0]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	3304      	adds	r3, #4
 8005a24:	4619      	mov	r1, r3
 8005a26:	4610      	mov	r0, r2
 8005a28:	f000 fac0 	bl	8005fac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2201      	movs	r2, #1
 8005a70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2201      	movs	r2, #1
 8005a78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2201      	movs	r2, #1
 8005a80:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3708      	adds	r7, #8
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
	...

08005a98 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d001      	beq.n	8005ab0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e04f      	b.n	8005b50 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2202      	movs	r2, #2
 8005ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	68da      	ldr	r2, [r3, #12]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f042 0201 	orr.w	r2, r2, #1
 8005ac6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a23      	ldr	r2, [pc, #140]	; (8005b5c <HAL_TIM_Base_Start_IT+0xc4>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d01d      	beq.n	8005b0e <HAL_TIM_Base_Start_IT+0x76>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ada:	d018      	beq.n	8005b0e <HAL_TIM_Base_Start_IT+0x76>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a1f      	ldr	r2, [pc, #124]	; (8005b60 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d013      	beq.n	8005b0e <HAL_TIM_Base_Start_IT+0x76>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a1e      	ldr	r2, [pc, #120]	; (8005b64 <HAL_TIM_Base_Start_IT+0xcc>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d00e      	beq.n	8005b0e <HAL_TIM_Base_Start_IT+0x76>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a1c      	ldr	r2, [pc, #112]	; (8005b68 <HAL_TIM_Base_Start_IT+0xd0>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d009      	beq.n	8005b0e <HAL_TIM_Base_Start_IT+0x76>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a1b      	ldr	r2, [pc, #108]	; (8005b6c <HAL_TIM_Base_Start_IT+0xd4>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d004      	beq.n	8005b0e <HAL_TIM_Base_Start_IT+0x76>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a19      	ldr	r2, [pc, #100]	; (8005b70 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d115      	bne.n	8005b3a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	4b17      	ldr	r3, [pc, #92]	; (8005b74 <HAL_TIM_Base_Start_IT+0xdc>)
 8005b16:	4013      	ands	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b06      	cmp	r3, #6
 8005b1e:	d015      	beq.n	8005b4c <HAL_TIM_Base_Start_IT+0xb4>
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b26:	d011      	beq.n	8005b4c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	f042 0201 	orr.w	r2, r2, #1
 8005b36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b38:	e008      	b.n	8005b4c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f042 0201 	orr.w	r2, r2, #1
 8005b48:	601a      	str	r2, [r3, #0]
 8005b4a:	e000      	b.n	8005b4e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b4e:	2300      	movs	r3, #0
}
 8005b50:	4618      	mov	r0, r3
 8005b52:	3714      	adds	r7, #20
 8005b54:	46bd      	mov	sp, r7
 8005b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5a:	4770      	bx	lr
 8005b5c:	40012c00 	.word	0x40012c00
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800
 8005b68:	40000c00 	.word	0x40000c00
 8005b6c:	40013400 	.word	0x40013400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	00010007 	.word	0x00010007

08005b78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b082      	sub	sp, #8
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f003 0302 	and.w	r3, r3, #2
 8005b8a:	2b02      	cmp	r3, #2
 8005b8c:	d122      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68db      	ldr	r3, [r3, #12]
 8005b94:	f003 0302 	and.w	r3, r3, #2
 8005b98:	2b02      	cmp	r3, #2
 8005b9a:	d11b      	bne.n	8005bd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f06f 0202 	mvn.w	r2, #2
 8005ba4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	699b      	ldr	r3, [r3, #24]
 8005bb2:	f003 0303 	and.w	r3, r3, #3
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d003      	beq.n	8005bc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f000 f9d8 	bl	8005f70 <HAL_TIM_IC_CaptureCallback>
 8005bc0:	e005      	b.n	8005bce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f9ca 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f9db 	bl	8005f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	f003 0304 	and.w	r3, r3, #4
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d122      	bne.n	8005c28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f003 0304 	and.w	r3, r3, #4
 8005bec:	2b04      	cmp	r3, #4
 8005bee:	d11b      	bne.n	8005c28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f06f 0204 	mvn.w	r2, #4
 8005bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d003      	beq.n	8005c16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f000 f9ae 	bl	8005f70 <HAL_TIM_IC_CaptureCallback>
 8005c14:	e005      	b.n	8005c22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c16:	6878      	ldr	r0, [r7, #4]
 8005c18:	f000 f9a0 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c1c:	6878      	ldr	r0, [r7, #4]
 8005c1e:	f000 f9b1 	bl	8005f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	f003 0308 	and.w	r3, r3, #8
 8005c32:	2b08      	cmp	r3, #8
 8005c34:	d122      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	68db      	ldr	r3, [r3, #12]
 8005c3c:	f003 0308 	and.w	r3, r3, #8
 8005c40:	2b08      	cmp	r3, #8
 8005c42:	d11b      	bne.n	8005c7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f06f 0208 	mvn.w	r2, #8
 8005c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2204      	movs	r2, #4
 8005c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	69db      	ldr	r3, [r3, #28]
 8005c5a:	f003 0303 	and.w	r3, r3, #3
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d003      	beq.n	8005c6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f984 	bl	8005f70 <HAL_TIM_IC_CaptureCallback>
 8005c68:	e005      	b.n	8005c76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005c6a:	6878      	ldr	r0, [r7, #4]
 8005c6c:	f000 f976 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 f987 	bl	8005f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	f003 0310 	and.w	r3, r3, #16
 8005c86:	2b10      	cmp	r3, #16
 8005c88:	d122      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	f003 0310 	and.w	r3, r3, #16
 8005c94:	2b10      	cmp	r3, #16
 8005c96:	d11b      	bne.n	8005cd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f06f 0210 	mvn.w	r2, #16
 8005ca0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2208      	movs	r2, #8
 8005ca6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	69db      	ldr	r3, [r3, #28]
 8005cae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d003      	beq.n	8005cbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f95a 	bl	8005f70 <HAL_TIM_IC_CaptureCallback>
 8005cbc:	e005      	b.n	8005cca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f94c 	bl	8005f5c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 f95d 	bl	8005f84 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f003 0301 	and.w	r3, r3, #1
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d10e      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	f003 0301 	and.w	r3, r3, #1
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d107      	bne.n	8005cfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f06f 0201 	mvn.w	r2, #1
 8005cf4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005cf6:	6878      	ldr	r0, [r7, #4]
 8005cf8:	f000 f926 	bl	8005f48 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	691b      	ldr	r3, [r3, #16]
 8005d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d06:	2b80      	cmp	r3, #128	; 0x80
 8005d08:	d10e      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d14:	2b80      	cmp	r3, #128	; 0x80
 8005d16:	d107      	bne.n	8005d28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005d22:	6878      	ldr	r0, [r7, #4]
 8005d24:	f000 fb08 	bl	8006338 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d36:	d10e      	bne.n	8005d56 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d42:	2b80      	cmp	r3, #128	; 0x80
 8005d44:	d107      	bne.n	8005d56 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005d4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 fafb 	bl	800634c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d60:	2b40      	cmp	r3, #64	; 0x40
 8005d62:	d10e      	bne.n	8005d82 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d6e:	2b40      	cmp	r3, #64	; 0x40
 8005d70:	d107      	bne.n	8005d82 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005d7c:	6878      	ldr	r0, [r7, #4]
 8005d7e:	f000 f90b 	bl	8005f98 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	691b      	ldr	r3, [r3, #16]
 8005d88:	f003 0320 	and.w	r3, r3, #32
 8005d8c:	2b20      	cmp	r3, #32
 8005d8e:	d10e      	bne.n	8005dae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	68db      	ldr	r3, [r3, #12]
 8005d96:	f003 0320 	and.w	r3, r3, #32
 8005d9a:	2b20      	cmp	r3, #32
 8005d9c:	d107      	bne.n	8005dae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f06f 0220 	mvn.w	r2, #32
 8005da6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 fabb 	bl	8006324 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005dae:	bf00      	nop
 8005db0:	3708      	adds	r7, #8
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
 8005dbe:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d101      	bne.n	8005dd2 <HAL_TIM_ConfigClockSource+0x1c>
 8005dce:	2302      	movs	r3, #2
 8005dd0:	e0b6      	b.n	8005f40 <HAL_TIM_ConfigClockSource+0x18a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2201      	movs	r2, #1
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	689b      	ldr	r3, [r3, #8]
 8005de8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005df0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005df4:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dfc:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68ba      	ldr	r2, [r7, #8]
 8005e04:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e0e:	d03e      	beq.n	8005e8e <HAL_TIM_ConfigClockSource+0xd8>
 8005e10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e14:	f200 8087 	bhi.w	8005f26 <HAL_TIM_ConfigClockSource+0x170>
 8005e18:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e1c:	f000 8086 	beq.w	8005f2c <HAL_TIM_ConfigClockSource+0x176>
 8005e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e24:	d87f      	bhi.n	8005f26 <HAL_TIM_ConfigClockSource+0x170>
 8005e26:	2b70      	cmp	r3, #112	; 0x70
 8005e28:	d01a      	beq.n	8005e60 <HAL_TIM_ConfigClockSource+0xaa>
 8005e2a:	2b70      	cmp	r3, #112	; 0x70
 8005e2c:	d87b      	bhi.n	8005f26 <HAL_TIM_ConfigClockSource+0x170>
 8005e2e:	2b60      	cmp	r3, #96	; 0x60
 8005e30:	d050      	beq.n	8005ed4 <HAL_TIM_ConfigClockSource+0x11e>
 8005e32:	2b60      	cmp	r3, #96	; 0x60
 8005e34:	d877      	bhi.n	8005f26 <HAL_TIM_ConfigClockSource+0x170>
 8005e36:	2b50      	cmp	r3, #80	; 0x50
 8005e38:	d03c      	beq.n	8005eb4 <HAL_TIM_ConfigClockSource+0xfe>
 8005e3a:	2b50      	cmp	r3, #80	; 0x50
 8005e3c:	d873      	bhi.n	8005f26 <HAL_TIM_ConfigClockSource+0x170>
 8005e3e:	2b40      	cmp	r3, #64	; 0x40
 8005e40:	d058      	beq.n	8005ef4 <HAL_TIM_ConfigClockSource+0x13e>
 8005e42:	2b40      	cmp	r3, #64	; 0x40
 8005e44:	d86f      	bhi.n	8005f26 <HAL_TIM_ConfigClockSource+0x170>
 8005e46:	2b30      	cmp	r3, #48	; 0x30
 8005e48:	d064      	beq.n	8005f14 <HAL_TIM_ConfigClockSource+0x15e>
 8005e4a:	2b30      	cmp	r3, #48	; 0x30
 8005e4c:	d86b      	bhi.n	8005f26 <HAL_TIM_ConfigClockSource+0x170>
 8005e4e:	2b20      	cmp	r3, #32
 8005e50:	d060      	beq.n	8005f14 <HAL_TIM_ConfigClockSource+0x15e>
 8005e52:	2b20      	cmp	r3, #32
 8005e54:	d867      	bhi.n	8005f26 <HAL_TIM_ConfigClockSource+0x170>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d05c      	beq.n	8005f14 <HAL_TIM_ConfigClockSource+0x15e>
 8005e5a:	2b10      	cmp	r3, #16
 8005e5c:	d05a      	beq.n	8005f14 <HAL_TIM_ConfigClockSource+0x15e>
 8005e5e:	e062      	b.n	8005f26 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6818      	ldr	r0, [r3, #0]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	6899      	ldr	r1, [r3, #8]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	68db      	ldr	r3, [r3, #12]
 8005e70:	f000 f9b0 	bl	80061d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	689b      	ldr	r3, [r3, #8]
 8005e7a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e82:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68ba      	ldr	r2, [r7, #8]
 8005e8a:	609a      	str	r2, [r3, #8]
      break;
 8005e8c:	e04f      	b.n	8005f2e <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	6899      	ldr	r1, [r3, #8]
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685a      	ldr	r2, [r3, #4]
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f000 f999 	bl	80061d4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689a      	ldr	r2, [r3, #8]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005eb0:	609a      	str	r2, [r3, #8]
      break;
 8005eb2:	e03c      	b.n	8005f2e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6818      	ldr	r0, [r3, #0]
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	6859      	ldr	r1, [r3, #4]
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	f000 f90d 	bl	80060e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2150      	movs	r1, #80	; 0x50
 8005ecc:	4618      	mov	r0, r3
 8005ece:	f000 f966 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005ed2:	e02c      	b.n	8005f2e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6818      	ldr	r0, [r3, #0]
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	6859      	ldr	r1, [r3, #4]
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	68db      	ldr	r3, [r3, #12]
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f000 f92c 	bl	800613e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2160      	movs	r1, #96	; 0x60
 8005eec:	4618      	mov	r0, r3
 8005eee:	f000 f956 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005ef2:	e01c      	b.n	8005f2e <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	6859      	ldr	r1, [r3, #4]
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	68db      	ldr	r3, [r3, #12]
 8005f00:	461a      	mov	r2, r3
 8005f02:	f000 f8ed 	bl	80060e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2140      	movs	r1, #64	; 0x40
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f000 f946 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005f12:	e00c      	b.n	8005f2e <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	4610      	mov	r0, r2
 8005f20:	f000 f93d 	bl	800619e <TIM_ITRx_SetConfig>
      break;
 8005f24:	e003      	b.n	8005f2e <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
      break;
 8005f2a:	e000      	b.n	8005f2e <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005f2c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2201      	movs	r2, #1
 8005f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3710      	adds	r7, #16
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b083      	sub	sp, #12
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f64:	bf00      	nop
 8005f66:	370c      	adds	r7, #12
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6e:	4770      	bx	lr

08005f70 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f70:	b480      	push	{r7}
 8005f72:	b083      	sub	sp, #12
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f78:	bf00      	nop
 8005f7a:	370c      	adds	r7, #12
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f82:	4770      	bx	lr

08005f84 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b083      	sub	sp, #12
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f8c:	bf00      	nop
 8005f8e:	370c      	adds	r7, #12
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr

08005f98 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f98:	b480      	push	{r7}
 8005f9a:	b083      	sub	sp, #12
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005fa0:	bf00      	nop
 8005fa2:	370c      	adds	r7, #12
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005faa:	4770      	bx	lr

08005fac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005fac:	b480      	push	{r7}
 8005fae:	b085      	sub	sp, #20
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	4a40      	ldr	r2, [pc, #256]	; (80060c0 <TIM_Base_SetConfig+0x114>)
 8005fc0:	4293      	cmp	r3, r2
 8005fc2:	d013      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fca:	d00f      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	4a3d      	ldr	r2, [pc, #244]	; (80060c4 <TIM_Base_SetConfig+0x118>)
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d00b      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	4a3c      	ldr	r2, [pc, #240]	; (80060c8 <TIM_Base_SetConfig+0x11c>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d007      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a3b      	ldr	r2, [pc, #236]	; (80060cc <TIM_Base_SetConfig+0x120>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d003      	beq.n	8005fec <TIM_Base_SetConfig+0x40>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	4a3a      	ldr	r2, [pc, #232]	; (80060d0 <TIM_Base_SetConfig+0x124>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d108      	bne.n	8005ffe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ff2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	685b      	ldr	r3, [r3, #4]
 8005ff8:	68fa      	ldr	r2, [r7, #12]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a2f      	ldr	r2, [pc, #188]	; (80060c0 <TIM_Base_SetConfig+0x114>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d01f      	beq.n	8006046 <TIM_Base_SetConfig+0x9a>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800600c:	d01b      	beq.n	8006046 <TIM_Base_SetConfig+0x9a>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a2c      	ldr	r2, [pc, #176]	; (80060c4 <TIM_Base_SetConfig+0x118>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d017      	beq.n	8006046 <TIM_Base_SetConfig+0x9a>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a2b      	ldr	r2, [pc, #172]	; (80060c8 <TIM_Base_SetConfig+0x11c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <TIM_Base_SetConfig+0x9a>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	4a2a      	ldr	r2, [pc, #168]	; (80060cc <TIM_Base_SetConfig+0x120>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d00f      	beq.n	8006046 <TIM_Base_SetConfig+0x9a>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4a29      	ldr	r2, [pc, #164]	; (80060d0 <TIM_Base_SetConfig+0x124>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d00b      	beq.n	8006046 <TIM_Base_SetConfig+0x9a>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	4a28      	ldr	r2, [pc, #160]	; (80060d4 <TIM_Base_SetConfig+0x128>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d007      	beq.n	8006046 <TIM_Base_SetConfig+0x9a>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	4a27      	ldr	r2, [pc, #156]	; (80060d8 <TIM_Base_SetConfig+0x12c>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d003      	beq.n	8006046 <TIM_Base_SetConfig+0x9a>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	4a26      	ldr	r2, [pc, #152]	; (80060dc <TIM_Base_SetConfig+0x130>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d108      	bne.n	8006058 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	68fa      	ldr	r2, [r7, #12]
 8006054:	4313      	orrs	r3, r2
 8006056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	695b      	ldr	r3, [r3, #20]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	68fa      	ldr	r2, [r7, #12]
 800606a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	4a10      	ldr	r2, [pc, #64]	; (80060c0 <TIM_Base_SetConfig+0x114>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d00f      	beq.n	80060a4 <TIM_Base_SetConfig+0xf8>
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	4a12      	ldr	r2, [pc, #72]	; (80060d0 <TIM_Base_SetConfig+0x124>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d00b      	beq.n	80060a4 <TIM_Base_SetConfig+0xf8>
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	4a11      	ldr	r2, [pc, #68]	; (80060d4 <TIM_Base_SetConfig+0x128>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d007      	beq.n	80060a4 <TIM_Base_SetConfig+0xf8>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	4a10      	ldr	r2, [pc, #64]	; (80060d8 <TIM_Base_SetConfig+0x12c>)
 8006098:	4293      	cmp	r3, r2
 800609a:	d003      	beq.n	80060a4 <TIM_Base_SetConfig+0xf8>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	4a0f      	ldr	r2, [pc, #60]	; (80060dc <TIM_Base_SetConfig+0x130>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d103      	bne.n	80060ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	691a      	ldr	r2, [r3, #16]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2201      	movs	r2, #1
 80060b0:	615a      	str	r2, [r3, #20]
}
 80060b2:	bf00      	nop
 80060b4:	3714      	adds	r7, #20
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	40012c00 	.word	0x40012c00
 80060c4:	40000400 	.word	0x40000400
 80060c8:	40000800 	.word	0x40000800
 80060cc:	40000c00 	.word	0x40000c00
 80060d0:	40013400 	.word	0x40013400
 80060d4:	40014000 	.word	0x40014000
 80060d8:	40014400 	.word	0x40014400
 80060dc:	40014800 	.word	0x40014800

080060e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b087      	sub	sp, #28
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	60f8      	str	r0, [r7, #12]
 80060e8:	60b9      	str	r1, [r7, #8]
 80060ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	6a1b      	ldr	r3, [r3, #32]
 80060f6:	f023 0201 	bic.w	r2, r3, #1
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006104:	693b      	ldr	r3, [r7, #16]
 8006106:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800610a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	011b      	lsls	r3, r3, #4
 8006110:	693a      	ldr	r2, [r7, #16]
 8006112:	4313      	orrs	r3, r2
 8006114:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006116:	697b      	ldr	r3, [r7, #20]
 8006118:	f023 030a 	bic.w	r3, r3, #10
 800611c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800611e:	697a      	ldr	r2, [r7, #20]
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	4313      	orrs	r3, r2
 8006124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	693a      	ldr	r2, [r7, #16]
 800612a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	697a      	ldr	r2, [r7, #20]
 8006130:	621a      	str	r2, [r3, #32]
}
 8006132:	bf00      	nop
 8006134:	371c      	adds	r7, #28
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800613e:	b480      	push	{r7}
 8006140:	b087      	sub	sp, #28
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f023 0210 	bic.w	r2, r3, #16
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6a1b      	ldr	r3, [r3, #32]
 8006160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006168:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	031b      	lsls	r3, r3, #12
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006174:	693b      	ldr	r3, [r7, #16]
 8006176:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800617a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	011b      	lsls	r3, r3, #4
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	4313      	orrs	r3, r2
 8006184:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	697a      	ldr	r2, [r7, #20]
 800618a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	693a      	ldr	r2, [r7, #16]
 8006190:	621a      	str	r2, [r3, #32]
}
 8006192:	bf00      	nop
 8006194:	371c      	adds	r7, #28
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800619e:	b480      	push	{r7}
 80061a0:	b085      	sub	sp, #20
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
 80061a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80061b6:	683a      	ldr	r2, [r7, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	4313      	orrs	r3, r2
 80061bc:	f043 0307 	orr.w	r3, r3, #7
 80061c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	68fa      	ldr	r2, [r7, #12]
 80061c6:	609a      	str	r2, [r3, #8]
}
 80061c8:	bf00      	nop
 80061ca:	3714      	adds	r7, #20
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr

080061d4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
 80061e0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061ee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	021a      	lsls	r2, r3, #8
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	431a      	orrs	r2, r3
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4313      	orrs	r3, r2
 80061fc:	697a      	ldr	r2, [r7, #20]
 80061fe:	4313      	orrs	r3, r2
 8006200:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	697a      	ldr	r2, [r7, #20]
 8006206:	609a      	str	r2, [r3, #8]
}
 8006208:	bf00      	nop
 800620a:	371c      	adds	r7, #28
 800620c:	46bd      	mov	sp, r7
 800620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006212:	4770      	bx	lr

08006214 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
 800621a:	6078      	str	r0, [r7, #4]
 800621c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006228:	2302      	movs	r3, #2
 800622a:	e068      	b.n	80062fe <HAL_TIMEx_MasterConfigSynchronization+0xea>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2202      	movs	r2, #2
 8006238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4a2e      	ldr	r2, [pc, #184]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006252:	4293      	cmp	r3, r2
 8006254:	d004      	beq.n	8006260 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a2d      	ldr	r2, [pc, #180]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d108      	bne.n	8006272 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006266:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	4313      	orrs	r3, r2
 8006270:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006278:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68fa      	ldr	r2, [r7, #12]
 8006280:	4313      	orrs	r3, r2
 8006282:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68fa      	ldr	r2, [r7, #12]
 800628a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a1e      	ldr	r2, [pc, #120]	; (800630c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d01d      	beq.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800629e:	d018      	beq.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1b      	ldr	r2, [pc, #108]	; (8006314 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d013      	beq.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a1a      	ldr	r2, [pc, #104]	; (8006318 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d00e      	beq.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a18      	ldr	r2, [pc, #96]	; (800631c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d009      	beq.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a13      	ldr	r2, [pc, #76]	; (8006310 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d004      	beq.n	80062d2 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a14      	ldr	r2, [pc, #80]	; (8006320 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d10c      	bne.n	80062ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80062d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	4313      	orrs	r3, r2
 80062e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	68ba      	ldr	r2, [r7, #8]
 80062ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80062fc:	2300      	movs	r3, #0
}
 80062fe:	4618      	mov	r0, r3
 8006300:	3714      	adds	r7, #20
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	40012c00 	.word	0x40012c00
 8006310:	40013400 	.word	0x40013400
 8006314:	40000400 	.word	0x40000400
 8006318:	40000800 	.word	0x40000800
 800631c:	40000c00 	.word	0x40000c00
 8006320:	40014000 	.word	0x40014000

08006324 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006360:	b580      	push	{r7, lr}
 8006362:	b082      	sub	sp, #8
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d101      	bne.n	8006372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e042      	b.n	80063f8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006378:	2b00      	cmp	r3, #0
 800637a:	d106      	bne.n	800638a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f005 ff1f 	bl	800c1c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2224      	movs	r2, #36	; 0x24
 800638e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0201 	bic.w	r2, r2, #1
 80063a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 fc52 	bl	8006c4c <UART_SetConfig>
 80063a8:	4603      	mov	r3, r0
 80063aa:	2b01      	cmp	r3, #1
 80063ac:	d101      	bne.n	80063b2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e022      	b.n	80063f8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d002      	beq.n	80063c0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 ff42 	bl	8007244 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	685a      	ldr	r2, [r3, #4]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80063ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689a      	ldr	r2, [r3, #8]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80063de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f042 0201 	orr.w	r2, r2, #1
 80063ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 ffc9 	bl	8007388 <UART_CheckIdleState>
 80063f6:	4603      	mov	r3, r0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b08a      	sub	sp, #40	; 0x28
 8006404:	af02      	add	r7, sp, #8
 8006406:	60f8      	str	r0, [r7, #12]
 8006408:	60b9      	str	r1, [r7, #8]
 800640a:	603b      	str	r3, [r7, #0]
 800640c:	4613      	mov	r3, r2
 800640e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006416:	2b20      	cmp	r3, #32
 8006418:	f040 8084 	bne.w	8006524 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	2b00      	cmp	r3, #0
 8006420:	d002      	beq.n	8006428 <HAL_UART_Transmit+0x28>
 8006422:	88fb      	ldrh	r3, [r7, #6]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e07c      	b.n	8006526 <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006432:	2b01      	cmp	r3, #1
 8006434:	d101      	bne.n	800643a <HAL_UART_Transmit+0x3a>
 8006436:	2302      	movs	r3, #2
 8006438:	e075      	b.n	8006526 <HAL_UART_Transmit+0x126>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2201      	movs	r2, #1
 800643e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	2200      	movs	r2, #0
 8006446:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2221      	movs	r2, #33	; 0x21
 800644e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006452:	f7fa f8bf 	bl	80005d4 <HAL_GetTick>
 8006456:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	88fa      	ldrh	r2, [r7, #6]
 800645c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	88fa      	ldrh	r2, [r7, #6]
 8006464:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	689b      	ldr	r3, [r3, #8]
 800646c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006470:	d108      	bne.n	8006484 <HAL_UART_Transmit+0x84>
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	691b      	ldr	r3, [r3, #16]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d104      	bne.n	8006484 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800647a:	2300      	movs	r3, #0
 800647c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	61bb      	str	r3, [r7, #24]
 8006482:	e003      	b.n	800648c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006488:	2300      	movs	r3, #0
 800648a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	2200      	movs	r2, #0
 8006490:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8006494:	e02d      	b.n	80064f2 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	9300      	str	r3, [sp, #0]
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	2200      	movs	r2, #0
 800649e:	2180      	movs	r1, #128	; 0x80
 80064a0:	68f8      	ldr	r0, [r7, #12]
 80064a2:	f000 ffbc 	bl	800741e <UART_WaitOnFlagUntilTimeout>
 80064a6:	4603      	mov	r3, r0
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d001      	beq.n	80064b0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e03a      	b.n	8006526 <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d10b      	bne.n	80064ce <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80064b6:	69bb      	ldr	r3, [r7, #24]
 80064b8:	881a      	ldrh	r2, [r3, #0]
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064c2:	b292      	uxth	r2, r2
 80064c4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80064c6:	69bb      	ldr	r3, [r7, #24]
 80064c8:	3302      	adds	r3, #2
 80064ca:	61bb      	str	r3, [r7, #24]
 80064cc:	e008      	b.n	80064e0 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	781a      	ldrb	r2, [r3, #0]
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	b292      	uxth	r2, r2
 80064d8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80064da:	69fb      	ldr	r3, [r7, #28]
 80064dc:	3301      	adds	r3, #1
 80064de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80064e6:	b29b      	uxth	r3, r3
 80064e8:	3b01      	subs	r3, #1
 80064ea:	b29a      	uxth	r2, r3
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d1cb      	bne.n	8006496 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	9300      	str	r3, [sp, #0]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2200      	movs	r2, #0
 8006506:	2140      	movs	r1, #64	; 0x40
 8006508:	68f8      	ldr	r0, [r7, #12]
 800650a:	f000 ff88 	bl	800741e <UART_WaitOnFlagUntilTimeout>
 800650e:	4603      	mov	r3, r0
 8006510:	2b00      	cmp	r3, #0
 8006512:	d001      	beq.n	8006518 <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8006514:	2303      	movs	r3, #3
 8006516:	e006      	b.n	8006526 <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2220      	movs	r2, #32
 800651c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8006520:	2300      	movs	r3, #0
 8006522:	e000      	b.n	8006526 <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006524:	2302      	movs	r3, #2
  }
}
 8006526:	4618      	mov	r0, r3
 8006528:	3720      	adds	r7, #32
 800652a:	46bd      	mov	sp, r7
 800652c:	bd80      	pop	{r7, pc}
	...

08006530 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08a      	sub	sp, #40	; 0x28
 8006534:	af00      	add	r7, sp, #0
 8006536:	60f8      	str	r0, [r7, #12]
 8006538:	60b9      	str	r1, [r7, #8]
 800653a:	4613      	mov	r3, r2
 800653c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006544:	2b20      	cmp	r3, #32
 8006546:	d142      	bne.n	80065ce <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <HAL_UART_Receive_IT+0x24>
 800654e:	88fb      	ldrh	r3, [r7, #6]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d101      	bne.n	8006558 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006554:	2301      	movs	r3, #1
 8006556:	e03b      	b.n	80065d0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800655e:	2b01      	cmp	r3, #1
 8006560:	d101      	bne.n	8006566 <HAL_UART_Receive_IT+0x36>
 8006562:	2302      	movs	r3, #2
 8006564:	e034      	b.n	80065d0 <HAL_UART_Receive_IT+0xa0>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	2200      	movs	r2, #0
 8006572:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a17      	ldr	r2, [pc, #92]	; (80065d8 <HAL_UART_Receive_IT+0xa8>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d01f      	beq.n	80065be <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d018      	beq.n	80065be <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	e853 3f00 	ldrex	r3, [r3]
 8006598:	613b      	str	r3, [r7, #16]
   return(result);
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80065a0:	627b      	str	r3, [r7, #36]	; 0x24
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	461a      	mov	r2, r3
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	623b      	str	r3, [r7, #32]
 80065ac:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065ae:	69f9      	ldr	r1, [r7, #28]
 80065b0:	6a3a      	ldr	r2, [r7, #32]
 80065b2:	e841 2300 	strex	r3, r2, [r1]
 80065b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80065b8:	69bb      	ldr	r3, [r7, #24]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d1e6      	bne.n	800658c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80065be:	88fb      	ldrh	r3, [r7, #6]
 80065c0:	461a      	mov	r2, r3
 80065c2:	68b9      	ldr	r1, [r7, #8]
 80065c4:	68f8      	ldr	r0, [r7, #12]
 80065c6:	f000 fff3 	bl	80075b0 <UART_Start_Receive_IT>
 80065ca:	4603      	mov	r3, r0
 80065cc:	e000      	b.n	80065d0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80065ce:	2302      	movs	r3, #2
  }
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3728      	adds	r7, #40	; 0x28
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	40008000 	.word	0x40008000

080065dc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80065dc:	b580      	push	{r7, lr}
 80065de:	b0ba      	sub	sp, #232	; 0xe8
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006602:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006606:	f640 030f 	movw	r3, #2063	; 0x80f
 800660a:	4013      	ands	r3, r2
 800660c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006610:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006614:	2b00      	cmp	r3, #0
 8006616:	d11b      	bne.n	8006650 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800661c:	f003 0320 	and.w	r3, r3, #32
 8006620:	2b00      	cmp	r3, #0
 8006622:	d015      	beq.n	8006650 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006628:	f003 0320 	and.w	r3, r3, #32
 800662c:	2b00      	cmp	r3, #0
 800662e:	d105      	bne.n	800663c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006630:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006638:	2b00      	cmp	r3, #0
 800663a:	d009      	beq.n	8006650 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006640:	2b00      	cmp	r3, #0
 8006642:	f000 82d6 	beq.w	8006bf2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	4798      	blx	r3
      }
      return;
 800664e:	e2d0      	b.n	8006bf2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8006650:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006654:	2b00      	cmp	r3, #0
 8006656:	f000 811f 	beq.w	8006898 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800665a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800665e:	4b8b      	ldr	r3, [pc, #556]	; (800688c <HAL_UART_IRQHandler+0x2b0>)
 8006660:	4013      	ands	r3, r2
 8006662:	2b00      	cmp	r3, #0
 8006664:	d106      	bne.n	8006674 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006666:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800666a:	4b89      	ldr	r3, [pc, #548]	; (8006890 <HAL_UART_IRQHandler+0x2b4>)
 800666c:	4013      	ands	r3, r2
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 8112 	beq.w	8006898 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006678:	f003 0301 	and.w	r3, r3, #1
 800667c:	2b00      	cmp	r3, #0
 800667e:	d011      	beq.n	80066a4 <HAL_UART_IRQHandler+0xc8>
 8006680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006688:	2b00      	cmp	r3, #0
 800668a:	d00b      	beq.n	80066a4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	2201      	movs	r2, #1
 8006692:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800669a:	f043 0201 	orr.w	r2, r3, #1
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a8:	f003 0302 	and.w	r3, r3, #2
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d011      	beq.n	80066d4 <HAL_UART_IRQHandler+0xf8>
 80066b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066b4:	f003 0301 	and.w	r3, r3, #1
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00b      	beq.n	80066d4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2202      	movs	r2, #2
 80066c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066ca:	f043 0204 	orr.w	r2, r3, #4
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d011      	beq.n	8006704 <HAL_UART_IRQHandler+0x128>
 80066e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2204      	movs	r2, #4
 80066f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80066fa:	f043 0202 	orr.w	r2, r3, #2
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006708:	f003 0308 	and.w	r3, r3, #8
 800670c:	2b00      	cmp	r3, #0
 800670e:	d017      	beq.n	8006740 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006710:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006714:	f003 0320 	and.w	r3, r3, #32
 8006718:	2b00      	cmp	r3, #0
 800671a:	d105      	bne.n	8006728 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800671c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8006720:	4b5a      	ldr	r3, [pc, #360]	; (800688c <HAL_UART_IRQHandler+0x2b0>)
 8006722:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006724:	2b00      	cmp	r3, #0
 8006726:	d00b      	beq.n	8006740 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	2208      	movs	r2, #8
 800672e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006736:	f043 0208 	orr.w	r2, r3, #8
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006748:	2b00      	cmp	r3, #0
 800674a:	d012      	beq.n	8006772 <HAL_UART_IRQHandler+0x196>
 800674c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006750:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00c      	beq.n	8006772 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006760:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006768:	f043 0220 	orr.w	r2, r3, #32
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006778:	2b00      	cmp	r3, #0
 800677a:	f000 823c 	beq.w	8006bf6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800677e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d013      	beq.n	80067b2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800678a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800678e:	f003 0320 	and.w	r3, r3, #32
 8006792:	2b00      	cmp	r3, #0
 8006794:	d105      	bne.n	80067a2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006796:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800679a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d007      	beq.n	80067b2 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d003      	beq.n	80067b2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067ae:	6878      	ldr	r0, [r7, #4]
 80067b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80067b8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067c6:	2b40      	cmp	r3, #64	; 0x40
 80067c8:	d005      	beq.n	80067d6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80067ce:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d04f      	beq.n	8006876 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 f814 	bl	8007804 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e6:	2b40      	cmp	r3, #64	; 0x40
 80067e8:	d141      	bne.n	800686e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3308      	adds	r3, #8
 80067f0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80067f8:	e853 3f00 	ldrex	r3, [r3]
 80067fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006800:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006804:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006808:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	3308      	adds	r3, #8
 8006812:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006816:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800681a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800681e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006822:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006826:	e841 2300 	strex	r3, r2, [r1]
 800682a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800682e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1d9      	bne.n	80067ea <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800683a:	2b00      	cmp	r3, #0
 800683c:	d013      	beq.n	8006866 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006842:	4a14      	ldr	r2, [pc, #80]	; (8006894 <HAL_UART_IRQHandler+0x2b8>)
 8006844:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800684a:	4618      	mov	r0, r3
 800684c:	f7fb f869 	bl	8001922 <HAL_DMA_Abort_IT>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d017      	beq.n	8006886 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800685a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006860:	4610      	mov	r0, r2
 8006862:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006864:	e00f      	b.n	8006886 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 f9da 	bl	8006c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800686c:	e00b      	b.n	8006886 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f9d6 	bl	8006c20 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006874:	e007      	b.n	8006886 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f000 f9d2 	bl	8006c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2200      	movs	r2, #0
 8006880:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006884:	e1b7      	b.n	8006bf6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006886:	bf00      	nop
    return;
 8006888:	e1b5      	b.n	8006bf6 <HAL_UART_IRQHandler+0x61a>
 800688a:	bf00      	nop
 800688c:	10000001 	.word	0x10000001
 8006890:	04000120 	.word	0x04000120
 8006894:	080078d1 	.word	0x080078d1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800689c:	2b01      	cmp	r3, #1
 800689e:	f040 814a 	bne.w	8006b36 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068a6:	f003 0310 	and.w	r3, r3, #16
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	f000 8143 	beq.w	8006b36 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80068b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068b4:	f003 0310 	and.w	r3, r3, #16
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	f000 813c 	beq.w	8006b36 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	2210      	movs	r2, #16
 80068c4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068d0:	2b40      	cmp	r3, #64	; 0x40
 80068d2:	f040 80b5 	bne.w	8006a40 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80068e2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 8187 	beq.w	8006bfa <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80068f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80068f6:	429a      	cmp	r2, r3
 80068f8:	f080 817f 	bcs.w	8006bfa <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006902:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f003 0320 	and.w	r3, r3, #32
 8006912:	2b00      	cmp	r3, #0
 8006914:	f040 8086 	bne.w	8006a24 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006920:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006924:	e853 3f00 	ldrex	r3, [r3]
 8006928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800692c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006934:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	461a      	mov	r2, r3
 800693e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006942:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006946:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800694a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800694e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006952:	e841 2300 	strex	r3, r2, [r1]
 8006956:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800695a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800695e:	2b00      	cmp	r3, #0
 8006960:	d1da      	bne.n	8006918 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	3308      	adds	r3, #8
 8006968:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800696a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800696c:	e853 3f00 	ldrex	r3, [r3]
 8006970:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006972:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006974:	f023 0301 	bic.w	r3, r3, #1
 8006978:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	3308      	adds	r3, #8
 8006982:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006986:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800698a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800698c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800698e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006992:	e841 2300 	strex	r3, r2, [r1]
 8006996:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006998:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1e1      	bne.n	8006962 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3308      	adds	r3, #8
 80069a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069a8:	e853 3f00 	ldrex	r3, [r3]
 80069ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80069ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069b0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80069b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3308      	adds	r3, #8
 80069be:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80069c2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80069c4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80069c8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80069ca:	e841 2300 	strex	r3, r2, [r1]
 80069ce:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80069d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d1e3      	bne.n	800699e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2220      	movs	r2, #32
 80069da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069ec:	e853 3f00 	ldrex	r3, [r3]
 80069f0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80069f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069f4:	f023 0310 	bic.w	r3, r3, #16
 80069f8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	461a      	mov	r2, r3
 8006a02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006a06:	65bb      	str	r3, [r7, #88]	; 0x58
 8006a08:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a0a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006a0c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a0e:	e841 2300 	strex	r3, r2, [r1]
 8006a12:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d1e4      	bne.n	80069e4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fa ff23 	bl	800186a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	1ad3      	subs	r3, r2, r3
 8006a34:	b29b      	uxth	r3, r3
 8006a36:	4619      	mov	r1, r3
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 f8fb 	bl	8006c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a3e:	e0dc      	b.n	8006bfa <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	f000 80ce 	beq.w	8006bfe <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006a62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	f000 80c9 	beq.w	8006bfe <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a74:	e853 3f00 	ldrex	r3, [r3]
 8006a78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a7c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006a80:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	461a      	mov	r2, r3
 8006a8a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8006a90:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006a94:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006a9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e4      	bne.n	8006a6c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3308      	adds	r3, #8
 8006aa8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	623b      	str	r3, [r7, #32]
   return(result);
 8006ab2:	6a3b      	ldr	r3, [r7, #32]
 8006ab4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006ab8:	f023 0301 	bic.w	r3, r3, #1
 8006abc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3308      	adds	r3, #8
 8006ac6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006aca:	633a      	str	r2, [r7, #48]	; 0x30
 8006acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ace:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ad0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d1e1      	bne.n	8006aa2 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2200      	movs	r2, #0
 8006af0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	e853 3f00 	ldrex	r3, [r3]
 8006afe:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0310 	bic.w	r3, r3, #16
 8006b06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006b14:	61fb      	str	r3, [r7, #28]
 8006b16:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b18:	69b9      	ldr	r1, [r7, #24]
 8006b1a:	69fa      	ldr	r2, [r7, #28]
 8006b1c:	e841 2300 	strex	r3, r2, [r1]
 8006b20:	617b      	str	r3, [r7, #20]
   return(result);
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d1e4      	bne.n	8006af2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006b28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b2c:	4619      	mov	r1, r3
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f000 f880 	bl	8006c34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006b34:	e063      	b.n	8006bfe <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d00e      	beq.n	8006b60 <HAL_UART_IRQHandler+0x584>
 8006b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d008      	beq.n	8006b60 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b56:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006b58:	6878      	ldr	r0, [r7, #4]
 8006b5a:	f001 fb5f 	bl	800821c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006b5e:	e051      	b.n	8006c04 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006b60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d014      	beq.n	8006b96 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d105      	bne.n	8006b84 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006b78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d008      	beq.n	8006b96 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d03a      	beq.n	8006c02 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	4798      	blx	r3
    }
    return;
 8006b94:	e035      	b.n	8006c02 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006b96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d009      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x5da>
 8006ba2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d003      	beq.n	8006bb6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	f000 fea4 	bl	80078fc <UART_EndTransmit_IT>
    return;
 8006bb4:	e026      	b.n	8006c04 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006bb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d009      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x5fa>
 8006bc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bc6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d003      	beq.n	8006bd6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006bce:	6878      	ldr	r0, [r7, #4]
 8006bd0:	f001 fb38 	bl	8008244 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bd4:	e016      	b.n	8006c04 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006bd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d010      	beq.n	8006c04 <HAL_UART_IRQHandler+0x628>
 8006be2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	da0c      	bge.n	8006c04 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f001 fb20 	bl	8008230 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006bf0:	e008      	b.n	8006c04 <HAL_UART_IRQHandler+0x628>
      return;
 8006bf2:	bf00      	nop
 8006bf4:	e006      	b.n	8006c04 <HAL_UART_IRQHandler+0x628>
    return;
 8006bf6:	bf00      	nop
 8006bf8:	e004      	b.n	8006c04 <HAL_UART_IRQHandler+0x628>
      return;
 8006bfa:	bf00      	nop
 8006bfc:	e002      	b.n	8006c04 <HAL_UART_IRQHandler+0x628>
      return;
 8006bfe:	bf00      	nop
 8006c00:	e000      	b.n	8006c04 <HAL_UART_IRQHandler+0x628>
    return;
 8006c02:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006c04:	37e8      	adds	r7, #232	; 0xe8
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop

08006c0c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c14:	bf00      	nop
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr

08006c20 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c20:	b480      	push	{r7}
 8006c22:	b083      	sub	sp, #12
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006c28:	bf00      	nop
 8006c2a:	370c      	adds	r7, #12
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c32:	4770      	bx	lr

08006c34 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	460b      	mov	r3, r1
 8006c3e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c40:	bf00      	nop
 8006c42:	370c      	adds	r7, #12
 8006c44:	46bd      	mov	sp, r7
 8006c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4a:	4770      	bx	lr

08006c4c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c50:	b08c      	sub	sp, #48	; 0x30
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006c56:	2300      	movs	r3, #0
 8006c58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006c5c:	697b      	ldr	r3, [r7, #20]
 8006c5e:	689a      	ldr	r2, [r3, #8]
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	691b      	ldr	r3, [r3, #16]
 8006c64:	431a      	orrs	r2, r3
 8006c66:	697b      	ldr	r3, [r7, #20]
 8006c68:	695b      	ldr	r3, [r3, #20]
 8006c6a:	431a      	orrs	r2, r3
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	69db      	ldr	r3, [r3, #28]
 8006c70:	4313      	orrs	r3, r2
 8006c72:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006c74:	697b      	ldr	r3, [r7, #20]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	4baa      	ldr	r3, [pc, #680]	; (8006f24 <UART_SetConfig+0x2d8>)
 8006c7c:	4013      	ands	r3, r2
 8006c7e:	697a      	ldr	r2, [r7, #20]
 8006c80:	6812      	ldr	r2, [r2, #0]
 8006c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c84:	430b      	orrs	r3, r1
 8006c86:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c88:	697b      	ldr	r3, [r7, #20]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	68da      	ldr	r2, [r3, #12]
 8006c96:	697b      	ldr	r3, [r7, #20]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	430a      	orrs	r2, r1
 8006c9c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a9f      	ldr	r2, [pc, #636]	; (8006f28 <UART_SetConfig+0x2dc>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006cae:	697b      	ldr	r3, [r7, #20]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cb4:	4313      	orrs	r3, r2
 8006cb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006cc2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	6812      	ldr	r2, [r2, #0]
 8006cca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ccc:	430b      	orrs	r3, r1
 8006cce:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cd6:	f023 010f 	bic.w	r1, r3, #15
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006cde:	697b      	ldr	r3, [r7, #20]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	430a      	orrs	r2, r1
 8006ce4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ce6:	697b      	ldr	r3, [r7, #20]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a90      	ldr	r2, [pc, #576]	; (8006f2c <UART_SetConfig+0x2e0>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d125      	bne.n	8006d3c <UART_SetConfig+0xf0>
 8006cf0:	4b8f      	ldr	r3, [pc, #572]	; (8006f30 <UART_SetConfig+0x2e4>)
 8006cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006cf6:	f003 0303 	and.w	r3, r3, #3
 8006cfa:	2b03      	cmp	r3, #3
 8006cfc:	d81a      	bhi.n	8006d34 <UART_SetConfig+0xe8>
 8006cfe:	a201      	add	r2, pc, #4	; (adr r2, 8006d04 <UART_SetConfig+0xb8>)
 8006d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d04:	08006d15 	.word	0x08006d15
 8006d08:	08006d25 	.word	0x08006d25
 8006d0c:	08006d1d 	.word	0x08006d1d
 8006d10:	08006d2d 	.word	0x08006d2d
 8006d14:	2301      	movs	r3, #1
 8006d16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d1a:	e116      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d22:	e112      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006d24:	2304      	movs	r3, #4
 8006d26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d2a:	e10e      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006d2c:	2308      	movs	r3, #8
 8006d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d32:	e10a      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006d34:	2310      	movs	r3, #16
 8006d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d3a:	e106      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	4a7c      	ldr	r2, [pc, #496]	; (8006f34 <UART_SetConfig+0x2e8>)
 8006d42:	4293      	cmp	r3, r2
 8006d44:	d138      	bne.n	8006db8 <UART_SetConfig+0x16c>
 8006d46:	4b7a      	ldr	r3, [pc, #488]	; (8006f30 <UART_SetConfig+0x2e4>)
 8006d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d4c:	f003 030c 	and.w	r3, r3, #12
 8006d50:	2b0c      	cmp	r3, #12
 8006d52:	d82d      	bhi.n	8006db0 <UART_SetConfig+0x164>
 8006d54:	a201      	add	r2, pc, #4	; (adr r2, 8006d5c <UART_SetConfig+0x110>)
 8006d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d5a:	bf00      	nop
 8006d5c:	08006d91 	.word	0x08006d91
 8006d60:	08006db1 	.word	0x08006db1
 8006d64:	08006db1 	.word	0x08006db1
 8006d68:	08006db1 	.word	0x08006db1
 8006d6c:	08006da1 	.word	0x08006da1
 8006d70:	08006db1 	.word	0x08006db1
 8006d74:	08006db1 	.word	0x08006db1
 8006d78:	08006db1 	.word	0x08006db1
 8006d7c:	08006d99 	.word	0x08006d99
 8006d80:	08006db1 	.word	0x08006db1
 8006d84:	08006db1 	.word	0x08006db1
 8006d88:	08006db1 	.word	0x08006db1
 8006d8c:	08006da9 	.word	0x08006da9
 8006d90:	2300      	movs	r3, #0
 8006d92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d96:	e0d8      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006d98:	2302      	movs	r3, #2
 8006d9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006d9e:	e0d4      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006da0:	2304      	movs	r3, #4
 8006da2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006da6:	e0d0      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006da8:	2308      	movs	r3, #8
 8006daa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dae:	e0cc      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006db0:	2310      	movs	r3, #16
 8006db2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006db6:	e0c8      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	4a5e      	ldr	r2, [pc, #376]	; (8006f38 <UART_SetConfig+0x2ec>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d125      	bne.n	8006e0e <UART_SetConfig+0x1c2>
 8006dc2:	4b5b      	ldr	r3, [pc, #364]	; (8006f30 <UART_SetConfig+0x2e4>)
 8006dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006dc8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006dcc:	2b30      	cmp	r3, #48	; 0x30
 8006dce:	d016      	beq.n	8006dfe <UART_SetConfig+0x1b2>
 8006dd0:	2b30      	cmp	r3, #48	; 0x30
 8006dd2:	d818      	bhi.n	8006e06 <UART_SetConfig+0x1ba>
 8006dd4:	2b20      	cmp	r3, #32
 8006dd6:	d00a      	beq.n	8006dee <UART_SetConfig+0x1a2>
 8006dd8:	2b20      	cmp	r3, #32
 8006dda:	d814      	bhi.n	8006e06 <UART_SetConfig+0x1ba>
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d002      	beq.n	8006de6 <UART_SetConfig+0x19a>
 8006de0:	2b10      	cmp	r3, #16
 8006de2:	d008      	beq.n	8006df6 <UART_SetConfig+0x1aa>
 8006de4:	e00f      	b.n	8006e06 <UART_SetConfig+0x1ba>
 8006de6:	2300      	movs	r3, #0
 8006de8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dec:	e0ad      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006dee:	2302      	movs	r3, #2
 8006df0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006df4:	e0a9      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006df6:	2304      	movs	r3, #4
 8006df8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006dfc:	e0a5      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006dfe:	2308      	movs	r3, #8
 8006e00:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e04:	e0a1      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006e06:	2310      	movs	r3, #16
 8006e08:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e0c:	e09d      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a4a      	ldr	r2, [pc, #296]	; (8006f3c <UART_SetConfig+0x2f0>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d125      	bne.n	8006e64 <UART_SetConfig+0x218>
 8006e18:	4b45      	ldr	r3, [pc, #276]	; (8006f30 <UART_SetConfig+0x2e4>)
 8006e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006e22:	2bc0      	cmp	r3, #192	; 0xc0
 8006e24:	d016      	beq.n	8006e54 <UART_SetConfig+0x208>
 8006e26:	2bc0      	cmp	r3, #192	; 0xc0
 8006e28:	d818      	bhi.n	8006e5c <UART_SetConfig+0x210>
 8006e2a:	2b80      	cmp	r3, #128	; 0x80
 8006e2c:	d00a      	beq.n	8006e44 <UART_SetConfig+0x1f8>
 8006e2e:	2b80      	cmp	r3, #128	; 0x80
 8006e30:	d814      	bhi.n	8006e5c <UART_SetConfig+0x210>
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d002      	beq.n	8006e3c <UART_SetConfig+0x1f0>
 8006e36:	2b40      	cmp	r3, #64	; 0x40
 8006e38:	d008      	beq.n	8006e4c <UART_SetConfig+0x200>
 8006e3a:	e00f      	b.n	8006e5c <UART_SetConfig+0x210>
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e42:	e082      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006e44:	2302      	movs	r3, #2
 8006e46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e4a:	e07e      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006e4c:	2304      	movs	r3, #4
 8006e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e52:	e07a      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006e54:	2308      	movs	r3, #8
 8006e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e5a:	e076      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006e5c:	2310      	movs	r3, #16
 8006e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006e62:	e072      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	4a35      	ldr	r2, [pc, #212]	; (8006f40 <UART_SetConfig+0x2f4>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d12a      	bne.n	8006ec4 <UART_SetConfig+0x278>
 8006e6e:	4b30      	ldr	r3, [pc, #192]	; (8006f30 <UART_SetConfig+0x2e4>)
 8006e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e78:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e7c:	d01a      	beq.n	8006eb4 <UART_SetConfig+0x268>
 8006e7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e82:	d81b      	bhi.n	8006ebc <UART_SetConfig+0x270>
 8006e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e88:	d00c      	beq.n	8006ea4 <UART_SetConfig+0x258>
 8006e8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e8e:	d815      	bhi.n	8006ebc <UART_SetConfig+0x270>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d003      	beq.n	8006e9c <UART_SetConfig+0x250>
 8006e94:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006e98:	d008      	beq.n	8006eac <UART_SetConfig+0x260>
 8006e9a:	e00f      	b.n	8006ebc <UART_SetConfig+0x270>
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ea2:	e052      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006ea4:	2302      	movs	r3, #2
 8006ea6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eaa:	e04e      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006eac:	2304      	movs	r3, #4
 8006eae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eb2:	e04a      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006eb4:	2308      	movs	r3, #8
 8006eb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006eba:	e046      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006ebc:	2310      	movs	r3, #16
 8006ebe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006ec2:	e042      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006ec4:	697b      	ldr	r3, [r7, #20]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a17      	ldr	r2, [pc, #92]	; (8006f28 <UART_SetConfig+0x2dc>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d13a      	bne.n	8006f44 <UART_SetConfig+0x2f8>
 8006ece:	4b18      	ldr	r3, [pc, #96]	; (8006f30 <UART_SetConfig+0x2e4>)
 8006ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006ed4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006ed8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006edc:	d01a      	beq.n	8006f14 <UART_SetConfig+0x2c8>
 8006ede:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006ee2:	d81b      	bhi.n	8006f1c <UART_SetConfig+0x2d0>
 8006ee4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee8:	d00c      	beq.n	8006f04 <UART_SetConfig+0x2b8>
 8006eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eee:	d815      	bhi.n	8006f1c <UART_SetConfig+0x2d0>
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d003      	beq.n	8006efc <UART_SetConfig+0x2b0>
 8006ef4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ef8:	d008      	beq.n	8006f0c <UART_SetConfig+0x2c0>
 8006efa:	e00f      	b.n	8006f1c <UART_SetConfig+0x2d0>
 8006efc:	2300      	movs	r3, #0
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f02:	e022      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006f04:	2302      	movs	r3, #2
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f0a:	e01e      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f12:	e01a      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006f14:	2308      	movs	r3, #8
 8006f16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f1a:	e016      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006f22:	e012      	b.n	8006f4a <UART_SetConfig+0x2fe>
 8006f24:	cfff69f3 	.word	0xcfff69f3
 8006f28:	40008000 	.word	0x40008000
 8006f2c:	40013800 	.word	0x40013800
 8006f30:	40021000 	.word	0x40021000
 8006f34:	40004400 	.word	0x40004400
 8006f38:	40004800 	.word	0x40004800
 8006f3c:	40004c00 	.word	0x40004c00
 8006f40:	40005000 	.word	0x40005000
 8006f44:	2310      	movs	r3, #16
 8006f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	4aae      	ldr	r2, [pc, #696]	; (8007208 <UART_SetConfig+0x5bc>)
 8006f50:	4293      	cmp	r3, r2
 8006f52:	f040 8097 	bne.w	8007084 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006f56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006f5a:	2b08      	cmp	r3, #8
 8006f5c:	d823      	bhi.n	8006fa6 <UART_SetConfig+0x35a>
 8006f5e:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <UART_SetConfig+0x318>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006f89 	.word	0x08006f89
 8006f68:	08006fa7 	.word	0x08006fa7
 8006f6c:	08006f91 	.word	0x08006f91
 8006f70:	08006fa7 	.word	0x08006fa7
 8006f74:	08006f97 	.word	0x08006f97
 8006f78:	08006fa7 	.word	0x08006fa7
 8006f7c:	08006fa7 	.word	0x08006fa7
 8006f80:	08006fa7 	.word	0x08006fa7
 8006f84:	08006f9f 	.word	0x08006f9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f88:	f7fd ff2a 	bl	8004de0 <HAL_RCC_GetPCLK1Freq>
 8006f8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f8e:	e010      	b.n	8006fb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f90:	4b9e      	ldr	r3, [pc, #632]	; (800720c <UART_SetConfig+0x5c0>)
 8006f92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006f94:	e00d      	b.n	8006fb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f96:	f7fd fe8b 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 8006f9a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006f9c:	e009      	b.n	8006fb2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006fa4:	e005      	b.n	8006fb2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006faa:	2301      	movs	r3, #1
 8006fac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006fb0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	f000 8130 	beq.w	800721a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	4a94      	ldr	r2, [pc, #592]	; (8007210 <UART_SetConfig+0x5c4>)
 8006fc0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fc8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fcc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	685a      	ldr	r2, [r3, #4]
 8006fd2:	4613      	mov	r3, r2
 8006fd4:	005b      	lsls	r3, r3, #1
 8006fd6:	4413      	add	r3, r2
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	429a      	cmp	r2, r3
 8006fdc:	d305      	bcc.n	8006fea <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006fde:	697b      	ldr	r3, [r7, #20]
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006fe4:	69ba      	ldr	r2, [r7, #24]
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d903      	bls.n	8006ff2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8006fea:	2301      	movs	r3, #1
 8006fec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006ff0:	e113      	b.n	800721a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006ff2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	60bb      	str	r3, [r7, #8]
 8006ff8:	60fa      	str	r2, [r7, #12]
 8006ffa:	697b      	ldr	r3, [r7, #20]
 8006ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ffe:	4a84      	ldr	r2, [pc, #528]	; (8007210 <UART_SetConfig+0x5c4>)
 8007000:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007004:	b29b      	uxth	r3, r3
 8007006:	2200      	movs	r2, #0
 8007008:	603b      	str	r3, [r7, #0]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007010:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007014:	f7f9 f8f4 	bl	8000200 <__aeabi_uldivmod>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4610      	mov	r0, r2
 800701e:	4619      	mov	r1, r3
 8007020:	f04f 0200 	mov.w	r2, #0
 8007024:	f04f 0300 	mov.w	r3, #0
 8007028:	020b      	lsls	r3, r1, #8
 800702a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800702e:	0202      	lsls	r2, r0, #8
 8007030:	6979      	ldr	r1, [r7, #20]
 8007032:	6849      	ldr	r1, [r1, #4]
 8007034:	0849      	lsrs	r1, r1, #1
 8007036:	2000      	movs	r0, #0
 8007038:	460c      	mov	r4, r1
 800703a:	4605      	mov	r5, r0
 800703c:	eb12 0804 	adds.w	r8, r2, r4
 8007040:	eb43 0905 	adc.w	r9, r3, r5
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	469a      	mov	sl, r3
 800704c:	4693      	mov	fp, r2
 800704e:	4652      	mov	r2, sl
 8007050:	465b      	mov	r3, fp
 8007052:	4640      	mov	r0, r8
 8007054:	4649      	mov	r1, r9
 8007056:	f7f9 f8d3 	bl	8000200 <__aeabi_uldivmod>
 800705a:	4602      	mov	r2, r0
 800705c:	460b      	mov	r3, r1
 800705e:	4613      	mov	r3, r2
 8007060:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007062:	6a3b      	ldr	r3, [r7, #32]
 8007064:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007068:	d308      	bcc.n	800707c <UART_SetConfig+0x430>
 800706a:	6a3b      	ldr	r3, [r7, #32]
 800706c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007070:	d204      	bcs.n	800707c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	6a3a      	ldr	r2, [r7, #32]
 8007078:	60da      	str	r2, [r3, #12]
 800707a:	e0ce      	b.n	800721a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8007082:	e0ca      	b.n	800721a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007084:	697b      	ldr	r3, [r7, #20]
 8007086:	69db      	ldr	r3, [r3, #28]
 8007088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800708c:	d166      	bne.n	800715c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800708e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007092:	2b08      	cmp	r3, #8
 8007094:	d827      	bhi.n	80070e6 <UART_SetConfig+0x49a>
 8007096:	a201      	add	r2, pc, #4	; (adr r2, 800709c <UART_SetConfig+0x450>)
 8007098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709c:	080070c1 	.word	0x080070c1
 80070a0:	080070c9 	.word	0x080070c9
 80070a4:	080070d1 	.word	0x080070d1
 80070a8:	080070e7 	.word	0x080070e7
 80070ac:	080070d7 	.word	0x080070d7
 80070b0:	080070e7 	.word	0x080070e7
 80070b4:	080070e7 	.word	0x080070e7
 80070b8:	080070e7 	.word	0x080070e7
 80070bc:	080070df 	.word	0x080070df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80070c0:	f7fd fe8e 	bl	8004de0 <HAL_RCC_GetPCLK1Freq>
 80070c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070c6:	e014      	b.n	80070f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80070c8:	f7fd fea0 	bl	8004e0c <HAL_RCC_GetPCLK2Freq>
 80070cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070ce:	e010      	b.n	80070f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80070d0:	4b4e      	ldr	r3, [pc, #312]	; (800720c <UART_SetConfig+0x5c0>)
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070d4:	e00d      	b.n	80070f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80070d6:	f7fd fdeb 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 80070da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80070dc:	e009      	b.n	80070f2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80070de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80070e4:	e005      	b.n	80070f2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80070e6:	2300      	movs	r3, #0
 80070e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80070ea:	2301      	movs	r3, #1
 80070ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80070f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80070f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	f000 8090 	beq.w	800721a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070fa:	697b      	ldr	r3, [r7, #20]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	4a44      	ldr	r2, [pc, #272]	; (8007210 <UART_SetConfig+0x5c4>)
 8007100:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007104:	461a      	mov	r2, r3
 8007106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007108:	fbb3 f3f2 	udiv	r3, r3, r2
 800710c:	005a      	lsls	r2, r3, #1
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	085b      	lsrs	r3, r3, #1
 8007114:	441a      	add	r2, r3
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	fbb2 f3f3 	udiv	r3, r2, r3
 800711e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007120:	6a3b      	ldr	r3, [r7, #32]
 8007122:	2b0f      	cmp	r3, #15
 8007124:	d916      	bls.n	8007154 <UART_SetConfig+0x508>
 8007126:	6a3b      	ldr	r3, [r7, #32]
 8007128:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800712c:	d212      	bcs.n	8007154 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	b29b      	uxth	r3, r3
 8007132:	f023 030f 	bic.w	r3, r3, #15
 8007136:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007138:	6a3b      	ldr	r3, [r7, #32]
 800713a:	085b      	lsrs	r3, r3, #1
 800713c:	b29b      	uxth	r3, r3
 800713e:	f003 0307 	and.w	r3, r3, #7
 8007142:	b29a      	uxth	r2, r3
 8007144:	8bfb      	ldrh	r3, [r7, #30]
 8007146:	4313      	orrs	r3, r2
 8007148:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	8bfa      	ldrh	r2, [r7, #30]
 8007150:	60da      	str	r2, [r3, #12]
 8007152:	e062      	b.n	800721a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007154:	2301      	movs	r3, #1
 8007156:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800715a:	e05e      	b.n	800721a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800715c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007160:	2b08      	cmp	r3, #8
 8007162:	d828      	bhi.n	80071b6 <UART_SetConfig+0x56a>
 8007164:	a201      	add	r2, pc, #4	; (adr r2, 800716c <UART_SetConfig+0x520>)
 8007166:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800716a:	bf00      	nop
 800716c:	08007191 	.word	0x08007191
 8007170:	08007199 	.word	0x08007199
 8007174:	080071a1 	.word	0x080071a1
 8007178:	080071b7 	.word	0x080071b7
 800717c:	080071a7 	.word	0x080071a7
 8007180:	080071b7 	.word	0x080071b7
 8007184:	080071b7 	.word	0x080071b7
 8007188:	080071b7 	.word	0x080071b7
 800718c:	080071af 	.word	0x080071af
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007190:	f7fd fe26 	bl	8004de0 <HAL_RCC_GetPCLK1Freq>
 8007194:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8007196:	e014      	b.n	80071c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007198:	f7fd fe38 	bl	8004e0c <HAL_RCC_GetPCLK2Freq>
 800719c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800719e:	e010      	b.n	80071c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071a0:	4b1a      	ldr	r3, [pc, #104]	; (800720c <UART_SetConfig+0x5c0>)
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071a4:	e00d      	b.n	80071c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071a6:	f7fd fd83 	bl	8004cb0 <HAL_RCC_GetSysClockFreq>
 80071aa:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80071ac:	e009      	b.n	80071c2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80071b4:	e005      	b.n	80071c2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80071b6:	2300      	movs	r3, #0
 80071b8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80071ba:	2301      	movs	r3, #1
 80071bc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80071c0:	bf00      	nop
    }

    if (pclk != 0U)
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d028      	beq.n	800721a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071cc:	4a10      	ldr	r2, [pc, #64]	; (8007210 <UART_SetConfig+0x5c4>)
 80071ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071d2:	461a      	mov	r2, r3
 80071d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d6:	fbb3 f2f2 	udiv	r2, r3, r2
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	085b      	lsrs	r3, r3, #1
 80071e0:	441a      	add	r2, r3
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	685b      	ldr	r3, [r3, #4]
 80071e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80071ea:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071ec:	6a3b      	ldr	r3, [r7, #32]
 80071ee:	2b0f      	cmp	r3, #15
 80071f0:	d910      	bls.n	8007214 <UART_SetConfig+0x5c8>
 80071f2:	6a3b      	ldr	r3, [r7, #32]
 80071f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071f8:	d20c      	bcs.n	8007214 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80071fa:	6a3b      	ldr	r3, [r7, #32]
 80071fc:	b29a      	uxth	r2, r3
 80071fe:	697b      	ldr	r3, [r7, #20]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	60da      	str	r2, [r3, #12]
 8007204:	e009      	b.n	800721a <UART_SetConfig+0x5ce>
 8007206:	bf00      	nop
 8007208:	40008000 	.word	0x40008000
 800720c:	00f42400 	.word	0x00f42400
 8007210:	0800c5c0 	.word	0x0800c5c0
      }
      else
      {
        ret = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2201      	movs	r2, #1
 800721e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007222:	697b      	ldr	r3, [r7, #20]
 8007224:	2201      	movs	r2, #1
 8007226:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2200      	movs	r2, #0
 800722e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	2200      	movs	r2, #0
 8007234:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8007236:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800723a:	4618      	mov	r0, r3
 800723c:	3730      	adds	r7, #48	; 0x30
 800723e:	46bd      	mov	sp, r7
 8007240:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007244 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007250:	f003 0301 	and.w	r3, r3, #1
 8007254:	2b00      	cmp	r3, #0
 8007256:	d00a      	beq.n	800726e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	685b      	ldr	r3, [r3, #4]
 800725e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	430a      	orrs	r2, r1
 800726c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007272:	f003 0302 	and.w	r3, r3, #2
 8007276:	2b00      	cmp	r3, #0
 8007278:	d00a      	beq.n	8007290 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685b      	ldr	r3, [r3, #4]
 8007280:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007294:	f003 0304 	and.w	r3, r3, #4
 8007298:	2b00      	cmp	r3, #0
 800729a:	d00a      	beq.n	80072b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	685b      	ldr	r3, [r3, #4]
 80072a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	430a      	orrs	r2, r1
 80072b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072b6:	f003 0308 	and.w	r3, r3, #8
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	430a      	orrs	r2, r1
 80072d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d8:	f003 0310 	and.w	r3, r3, #16
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d00a      	beq.n	80072f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	689b      	ldr	r3, [r3, #8]
 80072e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	430a      	orrs	r2, r1
 80072f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072fa:	f003 0320 	and.w	r3, r3, #32
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00a      	beq.n	8007318 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	430a      	orrs	r2, r1
 8007316:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800731c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007320:	2b00      	cmp	r3, #0
 8007322:	d01a      	beq.n	800735a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	685b      	ldr	r3, [r3, #4]
 800732a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	430a      	orrs	r2, r1
 8007338:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800733e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007342:	d10a      	bne.n	800735a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	685b      	ldr	r3, [r3, #4]
 800734a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	430a      	orrs	r2, r1
 8007358:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800735e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007362:	2b00      	cmp	r3, #0
 8007364:	d00a      	beq.n	800737c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	605a      	str	r2, [r3, #4]
  }
}
 800737c:	bf00      	nop
 800737e:	370c      	adds	r7, #12
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b086      	sub	sp, #24
 800738c:	af02      	add	r7, sp, #8
 800738e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007398:	f7f9 f91c 	bl	80005d4 <HAL_GetTick>
 800739c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f003 0308 	and.w	r3, r3, #8
 80073a8:	2b08      	cmp	r3, #8
 80073aa:	d10e      	bne.n	80073ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073b0:	9300      	str	r3, [sp, #0]
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80073ba:	6878      	ldr	r0, [r7, #4]
 80073bc:	f000 f82f 	bl	800741e <UART_WaitOnFlagUntilTimeout>
 80073c0:	4603      	mov	r3, r0
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d001      	beq.n	80073ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073c6:	2303      	movs	r3, #3
 80073c8:	e025      	b.n	8007416 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0304 	and.w	r3, r3, #4
 80073d4:	2b04      	cmp	r3, #4
 80073d6:	d10e      	bne.n	80073f6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80073d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f819 	bl	800741e <UART_WaitOnFlagUntilTimeout>
 80073ec:	4603      	mov	r3, r0
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d001      	beq.n	80073f6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80073f2:	2303      	movs	r3, #3
 80073f4:	e00f      	b.n	8007416 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2220      	movs	r2, #32
 8007402:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2200      	movs	r2, #0
 800740a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2200      	movs	r2, #0
 8007410:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007414:	2300      	movs	r3, #0
}
 8007416:	4618      	mov	r0, r3
 8007418:	3710      	adds	r7, #16
 800741a:	46bd      	mov	sp, r7
 800741c:	bd80      	pop	{r7, pc}

0800741e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800741e:	b580      	push	{r7, lr}
 8007420:	b09c      	sub	sp, #112	; 0x70
 8007422:	af00      	add	r7, sp, #0
 8007424:	60f8      	str	r0, [r7, #12]
 8007426:	60b9      	str	r1, [r7, #8]
 8007428:	603b      	str	r3, [r7, #0]
 800742a:	4613      	mov	r3, r2
 800742c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800742e:	e0a9      	b.n	8007584 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007430:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	f000 80a5 	beq.w	8007584 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800743a:	f7f9 f8cb 	bl	80005d4 <HAL_GetTick>
 800743e:	4602      	mov	r2, r0
 8007440:	683b      	ldr	r3, [r7, #0]
 8007442:	1ad3      	subs	r3, r2, r3
 8007444:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007446:	429a      	cmp	r2, r3
 8007448:	d302      	bcc.n	8007450 <UART_WaitOnFlagUntilTimeout+0x32>
 800744a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800744c:	2b00      	cmp	r3, #0
 800744e:	d140      	bne.n	80074d2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007456:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007458:	e853 3f00 	ldrex	r3, [r3]
 800745c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800745e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007460:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007464:	667b      	str	r3, [r7, #100]	; 0x64
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800746e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007470:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007472:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007474:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007476:	e841 2300 	strex	r3, r2, [r1]
 800747a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800747c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800747e:	2b00      	cmp	r3, #0
 8007480:	d1e6      	bne.n	8007450 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	3308      	adds	r3, #8
 8007488:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800748c:	e853 3f00 	ldrex	r3, [r3]
 8007490:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007494:	f023 0301 	bic.w	r3, r3, #1
 8007498:	663b      	str	r3, [r7, #96]	; 0x60
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	3308      	adds	r3, #8
 80074a0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80074a2:	64ba      	str	r2, [r7, #72]	; 0x48
 80074a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80074a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80074aa:	e841 2300 	strex	r3, r2, [r1]
 80074ae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80074b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1e5      	bne.n	8007482 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	2220      	movs	r2, #32
 80074ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2220      	movs	r2, #32
 80074c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	2200      	movs	r2, #0
 80074ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80074ce:	2303      	movs	r3, #3
 80074d0:	e069      	b.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f003 0304 	and.w	r3, r3, #4
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d051      	beq.n	8007584 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	69db      	ldr	r3, [r3, #28]
 80074e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074ee:	d149      	bne.n	8007584 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80074f8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	e853 3f00 	ldrex	r3, [r3]
 8007506:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800750e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	461a      	mov	r2, r3
 8007516:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007518:	637b      	str	r3, [r7, #52]	; 0x34
 800751a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800751e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007520:	e841 2300 	strex	r3, r2, [r1]
 8007524:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007528:	2b00      	cmp	r3, #0
 800752a:	d1e6      	bne.n	80074fa <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	3308      	adds	r3, #8
 8007532:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007534:	697b      	ldr	r3, [r7, #20]
 8007536:	e853 3f00 	ldrex	r3, [r3]
 800753a:	613b      	str	r3, [r7, #16]
   return(result);
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f023 0301 	bic.w	r3, r3, #1
 8007542:	66bb      	str	r3, [r7, #104]	; 0x68
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3308      	adds	r3, #8
 800754a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800754c:	623a      	str	r2, [r7, #32]
 800754e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007550:	69f9      	ldr	r1, [r7, #28]
 8007552:	6a3a      	ldr	r2, [r7, #32]
 8007554:	e841 2300 	strex	r3, r2, [r1]
 8007558:	61bb      	str	r3, [r7, #24]
   return(result);
 800755a:	69bb      	ldr	r3, [r7, #24]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d1e5      	bne.n	800752c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2220      	movs	r2, #32
 8007564:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2220      	movs	r2, #32
 800756c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	2220      	movs	r2, #32
 8007574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	2200      	movs	r2, #0
 800757c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8007580:	2303      	movs	r3, #3
 8007582:	e010      	b.n	80075a6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	69da      	ldr	r2, [r3, #28]
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	4013      	ands	r3, r2
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	429a      	cmp	r2, r3
 8007592:	bf0c      	ite	eq
 8007594:	2301      	moveq	r3, #1
 8007596:	2300      	movne	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	461a      	mov	r2, r3
 800759c:	79fb      	ldrb	r3, [r7, #7]
 800759e:	429a      	cmp	r2, r3
 80075a0:	f43f af46 	beq.w	8007430 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3770      	adds	r7, #112	; 0x70
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
	...

080075b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b0a3      	sub	sp, #140	; 0x8c
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	4613      	mov	r3, r2
 80075bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	88fa      	ldrh	r2, [r7, #6]
 80075c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	88fa      	ldrh	r2, [r7, #6]
 80075d0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075e2:	d10e      	bne.n	8007602 <UART_Start_Receive_IT+0x52>
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d105      	bne.n	80075f8 <UART_Start_Receive_IT+0x48>
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f240 12ff 	movw	r2, #511	; 0x1ff
 80075f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80075f6:	e02d      	b.n	8007654 <UART_Start_Receive_IT+0xa4>
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	22ff      	movs	r2, #255	; 0xff
 80075fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007600:	e028      	b.n	8007654 <UART_Start_Receive_IT+0xa4>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d10d      	bne.n	8007626 <UART_Start_Receive_IT+0x76>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	691b      	ldr	r3, [r3, #16]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d104      	bne.n	800761c <UART_Start_Receive_IT+0x6c>
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	22ff      	movs	r2, #255	; 0xff
 8007616:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800761a:	e01b      	b.n	8007654 <UART_Start_Receive_IT+0xa4>
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	227f      	movs	r2, #127	; 0x7f
 8007620:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007624:	e016      	b.n	8007654 <UART_Start_Receive_IT+0xa4>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800762e:	d10d      	bne.n	800764c <UART_Start_Receive_IT+0x9c>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	691b      	ldr	r3, [r3, #16]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d104      	bne.n	8007642 <UART_Start_Receive_IT+0x92>
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	227f      	movs	r2, #127	; 0x7f
 800763c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8007640:	e008      	b.n	8007654 <UART_Start_Receive_IT+0xa4>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	223f      	movs	r2, #63	; 0x3f
 8007646:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800764a:	e003      	b.n	8007654 <UART_Start_Receive_IT+0xa4>
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	2200      	movs	r2, #0
 8007650:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2222      	movs	r2, #34	; 0x22
 8007660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3308      	adds	r3, #8
 800766a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800766c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800766e:	e853 3f00 	ldrex	r3, [r3]
 8007672:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007674:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007676:	f043 0301 	orr.w	r3, r3, #1
 800767a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	3308      	adds	r3, #8
 8007684:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8007688:	673a      	str	r2, [r7, #112]	; 0x70
 800768a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 800768e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007690:	e841 2300 	strex	r3, r2, [r1]
 8007694:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8007696:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e3      	bne.n	8007664 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80076a4:	d153      	bne.n	800774e <UART_Start_Receive_IT+0x19e>
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80076ac:	88fa      	ldrh	r2, [r7, #6]
 80076ae:	429a      	cmp	r2, r3
 80076b0:	d34d      	bcc.n	800774e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ba:	d107      	bne.n	80076cc <UART_Start_Receive_IT+0x11c>
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d103      	bne.n	80076cc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4a4b      	ldr	r2, [pc, #300]	; (80077f4 <UART_Start_Receive_IT+0x244>)
 80076c8:	671a      	str	r2, [r3, #112]	; 0x70
 80076ca:	e002      	b.n	80076d2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	4a4a      	ldr	r2, [pc, #296]	; (80077f8 <UART_Start_Receive_IT+0x248>)
 80076d0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	2200      	movs	r2, #0
 80076d6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	691b      	ldr	r3, [r3, #16]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d01a      	beq.n	8007718 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ea:	e853 3f00 	ldrex	r3, [r3]
 80076ee:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80076f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	461a      	mov	r2, r3
 8007700:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007706:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007708:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800770a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800770c:	e841 2300 	strex	r3, r2, [r1]
 8007710:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007712:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007714:	2b00      	cmp	r3, #0
 8007716:	d1e4      	bne.n	80076e2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3308      	adds	r3, #8
 800771e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007720:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007722:	e853 3f00 	ldrex	r3, [r3]
 8007726:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007728:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	3308      	adds	r3, #8
 8007736:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007738:	64ba      	str	r2, [r7, #72]	; 0x48
 800773a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800773c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800773e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007740:	e841 2300 	strex	r3, r2, [r1]
 8007744:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007746:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1e5      	bne.n	8007718 <UART_Start_Receive_IT+0x168>
 800774c:	e04a      	b.n	80077e4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	689b      	ldr	r3, [r3, #8]
 8007752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007756:	d107      	bne.n	8007768 <UART_Start_Receive_IT+0x1b8>
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	691b      	ldr	r3, [r3, #16]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d103      	bne.n	8007768 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	4a26      	ldr	r2, [pc, #152]	; (80077fc <UART_Start_Receive_IT+0x24c>)
 8007764:	671a      	str	r2, [r3, #112]	; 0x70
 8007766:	e002      	b.n	800776e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	4a25      	ldr	r2, [pc, #148]	; (8007800 <UART_Start_Receive_IT+0x250>)
 800776c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2200      	movs	r2, #0
 8007772:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	691b      	ldr	r3, [r3, #16]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d019      	beq.n	80077b2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	e853 3f00 	ldrex	r3, [r3]
 800778a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800778c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007792:	677b      	str	r3, [r7, #116]	; 0x74
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	461a      	mov	r2, r3
 800779a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800779c:	637b      	str	r3, [r7, #52]	; 0x34
 800779e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80077a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80077a4:	e841 2300 	strex	r3, r2, [r1]
 80077a8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80077aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1e6      	bne.n	800777e <UART_Start_Receive_IT+0x1ce>
 80077b0:	e018      	b.n	80077e4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	e853 3f00 	ldrex	r3, [r3]
 80077be:	613b      	str	r3, [r7, #16]
   return(result);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	f043 0320 	orr.w	r3, r3, #32
 80077c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	461a      	mov	r2, r3
 80077ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077d0:	623b      	str	r3, [r7, #32]
 80077d2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d4:	69f9      	ldr	r1, [r7, #28]
 80077d6:	6a3a      	ldr	r2, [r7, #32]
 80077d8:	e841 2300 	strex	r3, r2, [r1]
 80077dc:	61bb      	str	r3, [r7, #24]
   return(result);
 80077de:	69bb      	ldr	r3, [r7, #24]
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d1e6      	bne.n	80077b2 <UART_Start_Receive_IT+0x202>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80077e4:	2300      	movs	r3, #0
}
 80077e6:	4618      	mov	r0, r3
 80077e8:	378c      	adds	r7, #140	; 0x8c
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr
 80077f2:	bf00      	nop
 80077f4:	08007f19 	.word	0x08007f19
 80077f8:	08007c1d 	.word	0x08007c1d
 80077fc:	08007ab7 	.word	0x08007ab7
 8007800:	08007953 	.word	0x08007953

08007804 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007804:	b480      	push	{r7}
 8007806:	b095      	sub	sp, #84	; 0x54
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007812:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007814:	e853 3f00 	ldrex	r3, [r3]
 8007818:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800781a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007820:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	461a      	mov	r2, r3
 8007828:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800782a:	643b      	str	r3, [r7, #64]	; 0x40
 800782c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800782e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007830:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007832:	e841 2300 	strex	r3, r2, [r1]
 8007836:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007838:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800783a:	2b00      	cmp	r3, #0
 800783c:	d1e6      	bne.n	800780c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	3308      	adds	r3, #8
 8007844:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	e853 3f00 	ldrex	r3, [r3]
 800784c:	61fb      	str	r3, [r7, #28]
   return(result);
 800784e:	69fb      	ldr	r3, [r7, #28]
 8007850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007854:	f023 0301 	bic.w	r3, r3, #1
 8007858:	64bb      	str	r3, [r7, #72]	; 0x48
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3308      	adds	r3, #8
 8007860:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007862:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007864:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007868:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e3      	bne.n	800783e <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800787a:	2b01      	cmp	r3, #1
 800787c:	d118      	bne.n	80078b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	e853 3f00 	ldrex	r3, [r3]
 800788a:	60bb      	str	r3, [r7, #8]
   return(result);
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	f023 0310 	bic.w	r3, r3, #16
 8007892:	647b      	str	r3, [r7, #68]	; 0x44
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	461a      	mov	r2, r3
 800789a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800789c:	61bb      	str	r3, [r7, #24]
 800789e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a0:	6979      	ldr	r1, [r7, #20]
 80078a2:	69ba      	ldr	r2, [r7, #24]
 80078a4:	e841 2300 	strex	r3, r2, [r1]
 80078a8:	613b      	str	r3, [r7, #16]
   return(result);
 80078aa:	693b      	ldr	r3, [r7, #16]
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d1e6      	bne.n	800787e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2220      	movs	r2, #32
 80078b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2200      	movs	r2, #0
 80078c2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80078c4:	bf00      	nop
 80078c6:	3754      	adds	r7, #84	; 0x54
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078dc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	2200      	movs	r2, #0
 80078e2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078ee:	68f8      	ldr	r0, [r7, #12]
 80078f0:	f7ff f996 	bl	8006c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078f4:	bf00      	nop
 80078f6:	3710      	adds	r7, #16
 80078f8:	46bd      	mov	sp, r7
 80078fa:	bd80      	pop	{r7, pc}

080078fc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b088      	sub	sp, #32
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	e853 3f00 	ldrex	r3, [r3]
 8007910:	60bb      	str	r3, [r7, #8]
   return(result);
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007918:	61fb      	str	r3, [r7, #28]
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	61bb      	str	r3, [r7, #24]
 8007924:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007926:	6979      	ldr	r1, [r7, #20]
 8007928:	69ba      	ldr	r2, [r7, #24]
 800792a:	e841 2300 	strex	r3, r2, [r1]
 800792e:	613b      	str	r3, [r7, #16]
   return(result);
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d1e6      	bne.n	8007904 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2220      	movs	r2, #32
 800793a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2200      	movs	r2, #0
 8007942:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7ff f961 	bl	8006c0c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800794a:	bf00      	nop
 800794c:	3720      	adds	r7, #32
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}

08007952 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007952:	b580      	push	{r7, lr}
 8007954:	b096      	sub	sp, #88	; 0x58
 8007956:	af00      	add	r7, sp, #0
 8007958:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007960:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800796a:	2b22      	cmp	r3, #34	; 0x22
 800796c:	f040 8095 	bne.w	8007a9a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007976:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800797a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800797e:	b2d9      	uxtb	r1, r3
 8007980:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007984:	b2da      	uxtb	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800798a:	400a      	ands	r2, r1
 800798c:	b2d2      	uxtb	r2, r2
 800798e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007994:	1c5a      	adds	r2, r3, #1
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079a0:	b29b      	uxth	r3, r3
 80079a2:	3b01      	subs	r3, #1
 80079a4:	b29a      	uxth	r2, r3
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d17a      	bne.n	8007aae <UART_RxISR_8BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c0:	e853 3f00 	ldrex	r3, [r3]
 80079c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80079cc:	653b      	str	r3, [r7, #80]	; 0x50
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	461a      	mov	r2, r3
 80079d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079d6:	647b      	str	r3, [r7, #68]	; 0x44
 80079d8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079da:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079de:	e841 2300 	strex	r3, r2, [r1]
 80079e2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d1e6      	bne.n	80079b8 <UART_RxISR_8BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3308      	adds	r3, #8
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	623b      	str	r3, [r7, #32]
   return(result);
 80079fa:	6a3b      	ldr	r3, [r7, #32]
 80079fc:	f023 0301 	bic.w	r3, r3, #1
 8007a00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007a0a:	633a      	str	r2, [r7, #48]	; 0x30
 8007a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e5      	bne.n	80079ea <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2220      	movs	r2, #32
 8007a22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a30:	2b01      	cmp	r3, #1
 8007a32:	d12e      	bne.n	8007a92 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2200      	movs	r2, #0
 8007a38:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	e853 3f00 	ldrex	r3, [r3]
 8007a46:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	f023 0310 	bic.w	r3, r3, #16
 8007a4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	461a      	mov	r2, r3
 8007a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007a58:	61fb      	str	r3, [r7, #28]
 8007a5a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a5c:	69b9      	ldr	r1, [r7, #24]
 8007a5e:	69fa      	ldr	r2, [r7, #28]
 8007a60:	e841 2300 	strex	r3, r2, [r1]
 8007a64:	617b      	str	r3, [r7, #20]
   return(result);
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d1e6      	bne.n	8007a3a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	69db      	ldr	r3, [r3, #28]
 8007a72:	f003 0310 	and.w	r3, r3, #16
 8007a76:	2b10      	cmp	r3, #16
 8007a78:	d103      	bne.n	8007a82 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	2210      	movs	r2, #16
 8007a80:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007a88:	4619      	mov	r1, r3
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff f8d2 	bl	8006c34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a90:	e00d      	b.n	8007aae <UART_RxISR_8BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8007a92:	6878      	ldr	r0, [r7, #4]
 8007a94:	f002 fe5c 	bl	800a750 <HAL_UART_RxCpltCallback>
}
 8007a98:	e009      	b.n	8007aae <UART_RxISR_8BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	8b1b      	ldrh	r3, [r3, #24]
 8007aa0:	b29a      	uxth	r2, r3
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f042 0208 	orr.w	r2, r2, #8
 8007aaa:	b292      	uxth	r2, r2
 8007aac:	831a      	strh	r2, [r3, #24]
}
 8007aae:	bf00      	nop
 8007ab0:	3758      	adds	r7, #88	; 0x58
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	bd80      	pop	{r7, pc}

08007ab6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ab6:	b580      	push	{r7, lr}
 8007ab8:	b096      	sub	sp, #88	; 0x58
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007ac4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ace:	2b22      	cmp	r3, #34	; 0x22
 8007ad0:	f040 8095 	bne.w	8007bfe <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007ada:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ae2:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ae4:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007ae8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007aec:	4013      	ands	r3, r2
 8007aee:	b29a      	uxth	r2, r3
 8007af0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007af2:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007af8:	1c9a      	adds	r2, r3, #2
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b04:	b29b      	uxth	r3, r3
 8007b06:	3b01      	subs	r3, #1
 8007b08:	b29a      	uxth	r2, r3
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d17a      	bne.n	8007c12 <UART_RxISR_16BIT+0x15c>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b24:	e853 3f00 	ldrex	r3, [r3]
 8007b28:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007b30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	461a      	mov	r2, r3
 8007b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007b3a:	643b      	str	r3, [r7, #64]	; 0x40
 8007b3c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b3e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007b40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007b42:	e841 2300 	strex	r3, r2, [r1]
 8007b46:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d1e6      	bne.n	8007b1c <UART_RxISR_16BIT+0x66>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	3308      	adds	r3, #8
 8007b54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b56:	6a3b      	ldr	r3, [r7, #32]
 8007b58:	e853 3f00 	ldrex	r3, [r3]
 8007b5c:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	f023 0301 	bic.w	r3, r3, #1
 8007b64:	64bb      	str	r3, [r7, #72]	; 0x48
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	3308      	adds	r3, #8
 8007b6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007b6e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007b70:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b72:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007b74:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b76:	e841 2300 	strex	r3, r2, [r1]
 8007b7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1e5      	bne.n	8007b4e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2220      	movs	r2, #32
 8007b86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b94:	2b01      	cmp	r3, #1
 8007b96:	d12e      	bne.n	8007bf6 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	e853 3f00 	ldrex	r3, [r3]
 8007baa:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	f023 0310 	bic.w	r3, r3, #16
 8007bb2:	647b      	str	r3, [r7, #68]	; 0x44
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	461a      	mov	r2, r3
 8007bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007bbc:	61bb      	str	r3, [r7, #24]
 8007bbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bc0:	6979      	ldr	r1, [r7, #20]
 8007bc2:	69ba      	ldr	r2, [r7, #24]
 8007bc4:	e841 2300 	strex	r3, r2, [r1]
 8007bc8:	613b      	str	r3, [r7, #16]
   return(result);
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d1e6      	bne.n	8007b9e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	69db      	ldr	r3, [r3, #28]
 8007bd6:	f003 0310 	and.w	r3, r3, #16
 8007bda:	2b10      	cmp	r3, #16
 8007bdc:	d103      	bne.n	8007be6 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	2210      	movs	r2, #16
 8007be4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bec:	4619      	mov	r1, r3
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	f7ff f820 	bl	8006c34 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bf4:	e00d      	b.n	8007c12 <UART_RxISR_16BIT+0x15c>
        HAL_UART_RxCpltCallback(huart);
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f002 fdaa 	bl	800a750 <HAL_UART_RxCpltCallback>
}
 8007bfc:	e009      	b.n	8007c12 <UART_RxISR_16BIT+0x15c>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	8b1b      	ldrh	r3, [r3, #24]
 8007c04:	b29a      	uxth	r2, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f042 0208 	orr.w	r2, r2, #8
 8007c0e:	b292      	uxth	r2, r2
 8007c10:	831a      	strh	r2, [r3, #24]
}
 8007c12:	bf00      	nop
 8007c14:	3758      	adds	r7, #88	; 0x58
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b0a6      	sub	sp, #152	; 0x98
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007c2a:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69db      	ldr	r3, [r3, #28]
 8007c34:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	689b      	ldr	r3, [r3, #8]
 8007c48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c52:	2b22      	cmp	r3, #34	; 0x22
 8007c54:	f040 814f 	bne.w	8007ef6 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007c5e:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c62:	e0f6      	b.n	8007e52 <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007c6a:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c6e:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8007c72:	b2d9      	uxtb	r1, r3
 8007c74:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007c78:	b2da      	uxtb	r2, r3
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c7e:	400a      	ands	r2, r1
 8007c80:	b2d2      	uxtb	r2, r2
 8007c82:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c88:	1c5a      	adds	r2, r3, #1
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007c94:	b29b      	uxth	r3, r3
 8007c96:	3b01      	subs	r3, #1
 8007c98:	b29a      	uxth	r2, r3
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	69db      	ldr	r3, [r3, #28]
 8007ca6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007caa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007cae:	f003 0307 	and.w	r3, r3, #7
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d053      	beq.n	8007d5e <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cb6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007cba:	f003 0301 	and.w	r3, r3, #1
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d011      	beq.n	8007ce6 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007cc2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007cc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cdc:	f043 0201 	orr.w	r2, r3, #1
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ce6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d011      	beq.n	8007d16 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d00b      	beq.n	8007d16 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	2202      	movs	r2, #2
 8007d04:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d0c:	f043 0204 	orr.w	r2, r3, #4
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d16:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007d1a:	f003 0304 	and.w	r3, r3, #4
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d011      	beq.n	8007d46 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007d22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00b      	beq.n	8007d46 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	681b      	ldr	r3, [r3, #0]
 8007d32:	2204      	movs	r2, #4
 8007d34:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d3c:	f043 0202 	orr.w	r2, r3, #2
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d006      	beq.n	8007d5e <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7fe ff65 	bl	8006c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2200      	movs	r2, #0
 8007d5a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007d64:	b29b      	uxth	r3, r3
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d173      	bne.n	8007e52 <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d72:	e853 3f00 	ldrex	r3, [r3]
 8007d76:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007d78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d7e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8007d8e:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d90:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8007d92:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007d94:	e841 2300 	strex	r3, r2, [r1]
 8007d98:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007d9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d1e4      	bne.n	8007d6a <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	3308      	adds	r3, #8
 8007da6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007daa:	e853 3f00 	ldrex	r3, [r3]
 8007dae:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8007db0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007db2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007db6:	f023 0301 	bic.w	r3, r3, #1
 8007dba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3308      	adds	r3, #8
 8007dc2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007dc4:	657a      	str	r2, [r7, #84]	; 0x54
 8007dc6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007dca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e3      	bne.n	8007da0 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d12e      	bne.n	8007e4c <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2200      	movs	r2, #0
 8007df2:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dfc:	e853 3f00 	ldrex	r3, [r3]
 8007e00:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e04:	f023 0310 	bic.w	r3, r3, #16
 8007e08:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	461a      	mov	r2, r3
 8007e10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e12:	643b      	str	r3, [r7, #64]	; 0x40
 8007e14:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e16:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007e18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007e1a:	e841 2300 	strex	r3, r2, [r1]
 8007e1e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d1e6      	bne.n	8007df4 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	69db      	ldr	r3, [r3, #28]
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	2b10      	cmp	r3, #16
 8007e32:	d103      	bne.n	8007e3c <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	2210      	movs	r2, #16
 8007e3a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007e42:	4619      	mov	r1, r3
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7fe fef5 	bl	8006c34 <HAL_UARTEx_RxEventCallback>
 8007e4a:	e002      	b.n	8007e52 <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f002 fc7f 	bl	800a750 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d006      	beq.n	8007e68 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8007e5a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007e5e:	f003 0320 	and.w	r3, r3, #32
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	f47f aefe 	bne.w	8007c64 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e6e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e72:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d047      	beq.n	8007f0a <UART_RxISR_8BIT_FIFOEN+0x2ee>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007e80:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d240      	bcs.n	8007f0a <UART_RxISR_8BIT_FIFOEN+0x2ee>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	3308      	adds	r3, #8
 8007e8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e90:	6a3b      	ldr	r3, [r7, #32]
 8007e92:	e853 3f00 	ldrex	r3, [r3]
 8007e96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007e98:	69fb      	ldr	r3, [r7, #28]
 8007e9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e9e:	673b      	str	r3, [r7, #112]	; 0x70
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007ea8:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007eae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007eb0:	e841 2300 	strex	r3, r2, [r1]
 8007eb4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d1e5      	bne.n	8007e88 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	4a15      	ldr	r2, [pc, #84]	; (8007f14 <UART_RxISR_8BIT_FIFOEN+0x2f8>)
 8007ec0:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	e853 3f00 	ldrex	r3, [r3]
 8007ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	f043 0320 	orr.w	r3, r3, #32
 8007ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	461a      	mov	r2, r3
 8007ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ee0:	61bb      	str	r3, [r7, #24]
 8007ee2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ee4:	6979      	ldr	r1, [r7, #20]
 8007ee6:	69ba      	ldr	r2, [r7, #24]
 8007ee8:	e841 2300 	strex	r3, r2, [r1]
 8007eec:	613b      	str	r3, [r7, #16]
   return(result);
 8007eee:	693b      	ldr	r3, [r7, #16]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d1e6      	bne.n	8007ec2 <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007ef4:	e009      	b.n	8007f0a <UART_RxISR_8BIT_FIFOEN+0x2ee>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	8b1b      	ldrh	r3, [r3, #24]
 8007efc:	b29a      	uxth	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f042 0208 	orr.w	r2, r2, #8
 8007f06:	b292      	uxth	r2, r2
 8007f08:	831a      	strh	r2, [r3, #24]
}
 8007f0a:	bf00      	nop
 8007f0c:	3798      	adds	r7, #152	; 0x98
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	bd80      	pop	{r7, pc}
 8007f12:	bf00      	nop
 8007f14:	08007953 	.word	0x08007953

08007f18 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f18:	b580      	push	{r7, lr}
 8007f1a:	b0a8      	sub	sp, #160	; 0xa0
 8007f1c:	af00      	add	r7, sp, #0
 8007f1e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007f26:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69db      	ldr	r3, [r3, #28]
 8007f30:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	689b      	ldr	r3, [r3, #8]
 8007f44:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007f4e:	2b22      	cmp	r3, #34	; 0x22
 8007f50:	f040 8153 	bne.w	80081fa <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007f5a:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f5e:	e0fa      	b.n	8008156 <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8007f66:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f6e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8007f72:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8007f76:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	b29a      	uxth	r2, r3
 8007f7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007f82:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f88:	1c9a      	adds	r2, r3, #2
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007f94:	b29b      	uxth	r3, r3
 8007f96:	3b01      	subs	r3, #1
 8007f98:	b29a      	uxth	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	69db      	ldr	r3, [r3, #28]
 8007fa6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007faa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fae:	f003 0307 	and.w	r3, r3, #7
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d053      	beq.n	800805e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fb6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fba:	f003 0301 	and.w	r3, r3, #1
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d011      	beq.n	8007fe6 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007fc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007fc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00b      	beq.n	8007fe6 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fdc:	f043 0201 	orr.w	r2, r3, #1
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fe6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d011      	beq.n	8008016 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007ff2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007ff6:	f003 0301 	and.w	r3, r3, #1
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00b      	beq.n	8008016 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2202      	movs	r2, #2
 8008004:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800800c:	f043 0204 	orr.w	r2, r3, #4
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008016:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800801a:	f003 0304 	and.w	r3, r3, #4
 800801e:	2b00      	cmp	r3, #0
 8008020:	d011      	beq.n	8008046 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8008022:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008026:	f003 0301 	and.w	r3, r3, #1
 800802a:	2b00      	cmp	r3, #0
 800802c:	d00b      	beq.n	8008046 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2204      	movs	r2, #4
 8008034:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800803c:	f043 0202 	orr.w	r2, r3, #2
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800804c:	2b00      	cmp	r3, #0
 800804e:	d006      	beq.n	800805e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f7fe fde5 	bl	8006c20 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008064:	b29b      	uxth	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d175      	bne.n	8008156 <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008072:	e853 3f00 	ldrex	r3, [r3]
 8008076:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008078:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800807a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800807e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	461a      	mov	r2, r3
 8008088:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800808c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800808e:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008090:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008092:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008094:	e841 2300 	strex	r3, r2, [r1]
 8008098:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800809a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1e4      	bne.n	800806a <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	3308      	adds	r3, #8
 80080a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80080aa:	e853 3f00 	ldrex	r3, [r3]
 80080ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80080b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80080b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80080b6:	f023 0301 	bic.w	r3, r3, #1
 80080ba:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	3308      	adds	r3, #8
 80080c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80080c8:	65ba      	str	r2, [r7, #88]	; 0x58
 80080ca:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080cc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80080ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80080d0:	e841 2300 	strex	r3, r2, [r1]
 80080d4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80080d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d1e1      	bne.n	80080a0 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2220      	movs	r2, #32
 80080e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	d12e      	bne.n	8008150 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008100:	e853 3f00 	ldrex	r3, [r3]
 8008104:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008106:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008108:	f023 0310 	bic.w	r3, r3, #16
 800810c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	461a      	mov	r2, r3
 8008114:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008116:	647b      	str	r3, [r7, #68]	; 0x44
 8008118:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800811a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800811c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800811e:	e841 2300 	strex	r3, r2, [r1]
 8008122:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008124:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008126:	2b00      	cmp	r3, #0
 8008128:	d1e6      	bne.n	80080f8 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	69db      	ldr	r3, [r3, #28]
 8008130:	f003 0310 	and.w	r3, r3, #16
 8008134:	2b10      	cmp	r3, #16
 8008136:	d103      	bne.n	8008140 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	2210      	movs	r2, #16
 800813e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008146:	4619      	mov	r1, r3
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7fe fd73 	bl	8006c34 <HAL_UARTEx_RxEventCallback>
 800814e:	e002      	b.n	8008156 <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008150:	6878      	ldr	r0, [r7, #4]
 8008152:	f002 fafd 	bl	800a750 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008156:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800815a:	2b00      	cmp	r3, #0
 800815c:	d006      	beq.n	800816c <UART_RxISR_16BIT_FIFOEN+0x254>
 800815e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008162:	f003 0320 	and.w	r3, r3, #32
 8008166:	2b00      	cmp	r3, #0
 8008168:	f47f aefa 	bne.w	8007f60 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008172:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008176:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800817a:	2b00      	cmp	r3, #0
 800817c:	d047      	beq.n	800820e <UART_RxISR_16BIT_FIFOEN+0x2f6>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008184:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8008188:	429a      	cmp	r2, r3
 800818a:	d240      	bcs.n	800820e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	3308      	adds	r3, #8
 8008192:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008196:	e853 3f00 	ldrex	r3, [r3]
 800819a:	623b      	str	r3, [r7, #32]
   return(result);
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081a2:	677b      	str	r3, [r7, #116]	; 0x74
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3308      	adds	r3, #8
 80081aa:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80081ac:	633a      	str	r2, [r7, #48]	; 0x30
 80081ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80081b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80081b4:	e841 2300 	strex	r3, r2, [r1]
 80081b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80081ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d1e5      	bne.n	800818c <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	4a15      	ldr	r2, [pc, #84]	; (8008218 <UART_RxISR_16BIT_FIFOEN+0x300>)
 80081c4:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	e853 3f00 	ldrex	r3, [r3]
 80081d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f043 0320 	orr.w	r3, r3, #32
 80081da:	673b      	str	r3, [r7, #112]	; 0x70
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	461a      	mov	r2, r3
 80081e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80081e4:	61fb      	str	r3, [r7, #28]
 80081e6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081e8:	69b9      	ldr	r1, [r7, #24]
 80081ea:	69fa      	ldr	r2, [r7, #28]
 80081ec:	e841 2300 	strex	r3, r2, [r1]
 80081f0:	617b      	str	r3, [r7, #20]
   return(result);
 80081f2:	697b      	ldr	r3, [r7, #20]
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d1e6      	bne.n	80081c6 <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081f8:	e009      	b.n	800820e <UART_RxISR_16BIT_FIFOEN+0x2f6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	8b1b      	ldrh	r3, [r3, #24]
 8008200:	b29a      	uxth	r2, r3
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f042 0208 	orr.w	r2, r2, #8
 800820a:	b292      	uxth	r2, r2
 800820c:	831a      	strh	r2, [r3, #24]
}
 800820e:	bf00      	nop
 8008210:	37a0      	adds	r7, #160	; 0xa0
 8008212:	46bd      	mov	sp, r7
 8008214:	bd80      	pop	{r7, pc}
 8008216:	bf00      	nop
 8008218:	08007ab7 	.word	0x08007ab7

0800821c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800824c:	bf00      	nop
 800824e:	370c      	adds	r7, #12
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr

08008258 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008258:	b480      	push	{r7}
 800825a:	b085      	sub	sp, #20
 800825c:	af00      	add	r7, sp, #0
 800825e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <HAL_UARTEx_DisableFifoMode+0x16>
 800826a:	2302      	movs	r3, #2
 800826c:	e027      	b.n	80082be <HAL_UARTEx_DisableFifoMode+0x66>
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	2201      	movs	r2, #1
 8008272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2224      	movs	r2, #36	; 0x24
 800827a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	f022 0201 	bic.w	r2, r2, #1
 8008294:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800829c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68fa      	ldr	r2, [r7, #12]
 80082aa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2220      	movs	r2, #32
 80082b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr

080082ca <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082ca:	b580      	push	{r7, lr}
 80082cc:	b084      	sub	sp, #16
 80082ce:	af00      	add	r7, sp, #0
 80082d0:	6078      	str	r0, [r7, #4]
 80082d2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d101      	bne.n	80082e2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80082de:	2302      	movs	r3, #2
 80082e0:	e02d      	b.n	800833e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2224      	movs	r2, #36	; 0x24
 80082ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f022 0201 	bic.w	r2, r2, #1
 8008308:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	689b      	ldr	r3, [r3, #8]
 8008310:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	683a      	ldr	r2, [r7, #0]
 800831a:	430a      	orrs	r2, r1
 800831c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 f850 	bl	80083c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2220      	movs	r2, #32
 8008330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800833c:	2300      	movs	r3, #0
}
 800833e:	4618      	mov	r0, r3
 8008340:	3710      	adds	r7, #16
 8008342:	46bd      	mov	sp, r7
 8008344:	bd80      	pop	{r7, pc}

08008346 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008346:	b580      	push	{r7, lr}
 8008348:	b084      	sub	sp, #16
 800834a:	af00      	add	r7, sp, #0
 800834c:	6078      	str	r0, [r7, #4]
 800834e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008356:	2b01      	cmp	r3, #1
 8008358:	d101      	bne.n	800835e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800835a:	2302      	movs	r3, #2
 800835c:	e02d      	b.n	80083ba <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2224      	movs	r2, #36	; 0x24
 800836a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f022 0201 	bic.w	r2, r2, #1
 8008384:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	683a      	ldr	r2, [r7, #0]
 8008396:	430a      	orrs	r2, r1
 8008398:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f000 f812 	bl	80083c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2220      	movs	r2, #32
 80083ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	2200      	movs	r2, #0
 80083b4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80083b8:	2300      	movs	r3, #0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3710      	adds	r7, #16
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
	...

080083c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80083c4:	b480      	push	{r7}
 80083c6:	b085      	sub	sp, #20
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d108      	bne.n	80083e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80083e4:	e031      	b.n	800844a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80083e6:	2308      	movs	r3, #8
 80083e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80083ea:	2308      	movs	r3, #8
 80083ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	689b      	ldr	r3, [r3, #8]
 80083f4:	0e5b      	lsrs	r3, r3, #25
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	f003 0307 	and.w	r3, r3, #7
 80083fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	0f5b      	lsrs	r3, r3, #29
 8008406:	b2db      	uxtb	r3, r3
 8008408:	f003 0307 	and.w	r3, r3, #7
 800840c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800840e:	7bbb      	ldrb	r3, [r7, #14]
 8008410:	7b3a      	ldrb	r2, [r7, #12]
 8008412:	4911      	ldr	r1, [pc, #68]	; (8008458 <UARTEx_SetNbDataToProcess+0x94>)
 8008414:	5c8a      	ldrb	r2, [r1, r2]
 8008416:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800841a:	7b3a      	ldrb	r2, [r7, #12]
 800841c:	490f      	ldr	r1, [pc, #60]	; (800845c <UARTEx_SetNbDataToProcess+0x98>)
 800841e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008420:	fb93 f3f2 	sdiv	r3, r3, r2
 8008424:	b29a      	uxth	r2, r3
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800842c:	7bfb      	ldrb	r3, [r7, #15]
 800842e:	7b7a      	ldrb	r2, [r7, #13]
 8008430:	4909      	ldr	r1, [pc, #36]	; (8008458 <UARTEx_SetNbDataToProcess+0x94>)
 8008432:	5c8a      	ldrb	r2, [r1, r2]
 8008434:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008438:	7b7a      	ldrb	r2, [r7, #13]
 800843a:	4908      	ldr	r1, [pc, #32]	; (800845c <UARTEx_SetNbDataToProcess+0x98>)
 800843c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800843e:	fb93 f3f2 	sdiv	r3, r3, r2
 8008442:	b29a      	uxth	r2, r3
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800844a:	bf00      	nop
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr
 8008456:	bf00      	nop
 8008458:	0800c5d8 	.word	0x0800c5d8
 800845c:	0800c5e0 	.word	0x0800c5e0

08008460 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008460:	b480      	push	{r7}
 8008462:	b085      	sub	sp, #20
 8008464:	af00      	add	r7, sp, #0
 8008466:	4603      	mov	r3, r0
 8008468:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800846a:	2300      	movs	r3, #0
 800846c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800846e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008472:	2b84      	cmp	r3, #132	; 0x84
 8008474:	d005      	beq.n	8008482 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008476:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	4413      	add	r3, r2
 800847e:	3303      	adds	r3, #3
 8008480:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008482:	68fb      	ldr	r3, [r7, #12]
}
 8008484:	4618      	mov	r0, r3
 8008486:	3714      	adds	r7, #20
 8008488:	46bd      	mov	sp, r7
 800848a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848e:	4770      	bx	lr

08008490 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008494:	f000 fade 	bl	8008a54 <vTaskStartScheduler>
  
  return osOK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	bd80      	pop	{r7, pc}

0800849e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800849e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80084a0:	b089      	sub	sp, #36	; 0x24
 80084a2:	af04      	add	r7, sp, #16
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	695b      	ldr	r3, [r3, #20]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d020      	beq.n	80084f2 <osThreadCreate+0x54>
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	699b      	ldr	r3, [r3, #24]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d01c      	beq.n	80084f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	685c      	ldr	r4, [r3, #4]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681d      	ldr	r5, [r3, #0]
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691e      	ldr	r6, [r3, #16]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7ff ffc8 	bl	8008460 <makeFreeRtosPriority>
 80084d0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	687a      	ldr	r2, [r7, #4]
 80084d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084da:	9202      	str	r2, [sp, #8]
 80084dc:	9301      	str	r3, [sp, #4]
 80084de:	9100      	str	r1, [sp, #0]
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	4632      	mov	r2, r6
 80084e4:	4629      	mov	r1, r5
 80084e6:	4620      	mov	r0, r4
 80084e8:	f000 f8ed 	bl	80086c6 <xTaskCreateStatic>
 80084ec:	4603      	mov	r3, r0
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	e01c      	b.n	800852c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	685c      	ldr	r4, [r3, #4]
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80084fe:	b29e      	uxth	r6, r3
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008506:	4618      	mov	r0, r3
 8008508:	f7ff ffaa 	bl	8008460 <makeFreeRtosPriority>
 800850c:	4602      	mov	r2, r0
 800850e:	f107 030c 	add.w	r3, r7, #12
 8008512:	9301      	str	r3, [sp, #4]
 8008514:	9200      	str	r2, [sp, #0]
 8008516:	683b      	ldr	r3, [r7, #0]
 8008518:	4632      	mov	r2, r6
 800851a:	4629      	mov	r1, r5
 800851c:	4620      	mov	r0, r4
 800851e:	f000 f92f 	bl	8008780 <xTaskCreate>
 8008522:	4603      	mov	r3, r0
 8008524:	2b01      	cmp	r3, #1
 8008526:	d001      	beq.n	800852c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8008528:	2300      	movs	r3, #0
 800852a:	e000      	b.n	800852e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800852c:	68fb      	ldr	r3, [r7, #12]
}
 800852e:	4618      	mov	r0, r3
 8008530:	3714      	adds	r7, #20
 8008532:	46bd      	mov	sp, r7
 8008534:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008536 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008536:	b580      	push	{r7, lr}
 8008538:	b084      	sub	sp, #16
 800853a:	af00      	add	r7, sp, #0
 800853c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d001      	beq.n	800854c <osDelay+0x16>
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	e000      	b.n	800854e <osDelay+0x18>
 800854c:	2301      	movs	r3, #1
 800854e:	4618      	mov	r0, r3
 8008550:	f000 fa4c 	bl	80089ec <vTaskDelay>
  
  return osOK;
 8008554:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008556:	4618      	mov	r0, r3
 8008558:	3710      	adds	r7, #16
 800855a:	46bd      	mov	sp, r7
 800855c:	bd80      	pop	{r7, pc}

0800855e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800855e:	b480      	push	{r7}
 8008560:	b083      	sub	sp, #12
 8008562:	af00      	add	r7, sp, #0
 8008564:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	f103 0208 	add.w	r2, r3, #8
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	f04f 32ff 	mov.w	r2, #4294967295
 8008576:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f103 0208 	add.w	r2, r3, #8
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f103 0208 	add.w	r2, r3, #8
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008592:	bf00      	nop
 8008594:	370c      	adds	r7, #12
 8008596:	46bd      	mov	sp, r7
 8008598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800859c:	4770      	bx	lr

0800859e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800859e:	b480      	push	{r7}
 80085a0:	b083      	sub	sp, #12
 80085a2:	af00      	add	r7, sp, #0
 80085a4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80085ac:	bf00      	nop
 80085ae:	370c      	adds	r7, #12
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80085b8:	b480      	push	{r7}
 80085ba:	b085      	sub	sp, #20
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80085c8:	683b      	ldr	r3, [r7, #0]
 80085ca:	68fa      	ldr	r2, [r7, #12]
 80085cc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	689a      	ldr	r2, [r3, #8]
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	683a      	ldr	r2, [r7, #0]
 80085e2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	1c5a      	adds	r2, r3, #1
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	601a      	str	r2, [r3, #0]
}
 80085f4:	bf00      	nop
 80085f6:	3714      	adds	r7, #20
 80085f8:	46bd      	mov	sp, r7
 80085fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fe:	4770      	bx	lr

08008600 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
 8008608:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008616:	d103      	bne.n	8008620 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	691b      	ldr	r3, [r3, #16]
 800861c:	60fb      	str	r3, [r7, #12]
 800861e:	e00c      	b.n	800863a <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	3308      	adds	r3, #8
 8008624:	60fb      	str	r3, [r7, #12]
 8008626:	e002      	b.n	800862e <vListInsert+0x2e>
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	685b      	ldr	r3, [r3, #4]
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	685b      	ldr	r3, [r3, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	429a      	cmp	r2, r3
 8008638:	d2f6      	bcs.n	8008628 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	685a      	ldr	r2, [r3, #4]
 800863e:	683b      	ldr	r3, [r7, #0]
 8008640:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	683a      	ldr	r2, [r7, #0]
 8008648:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800864a:	683b      	ldr	r3, [r7, #0]
 800864c:	68fa      	ldr	r2, [r7, #12]
 800864e:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	683a      	ldr	r2, [r7, #0]
 8008654:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	687a      	ldr	r2, [r7, #4]
 800865a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	1c5a      	adds	r2, r3, #1
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	601a      	str	r2, [r3, #0]
}
 8008666:	bf00      	nop
 8008668:	3714      	adds	r7, #20
 800866a:	46bd      	mov	sp, r7
 800866c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008670:	4770      	bx	lr

08008672 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008672:	b480      	push	{r7}
 8008674:	b085      	sub	sp, #20
 8008676:	af00      	add	r7, sp, #0
 8008678:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	687a      	ldr	r2, [r7, #4]
 8008686:	6892      	ldr	r2, [r2, #8]
 8008688:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	689b      	ldr	r3, [r3, #8]
 800868e:	687a      	ldr	r2, [r7, #4]
 8008690:	6852      	ldr	r2, [r2, #4]
 8008692:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	685b      	ldr	r3, [r3, #4]
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	429a      	cmp	r2, r3
 800869c:	d103      	bne.n	80086a6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	689a      	ldr	r2, [r3, #8]
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	1e5a      	subs	r2, r3, #1
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3714      	adds	r7, #20
 80086be:	46bd      	mov	sp, r7
 80086c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c4:	4770      	bx	lr

080086c6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80086c6:	b580      	push	{r7, lr}
 80086c8:	b08e      	sub	sp, #56	; 0x38
 80086ca:	af04      	add	r7, sp, #16
 80086cc:	60f8      	str	r0, [r7, #12]
 80086ce:	60b9      	str	r1, [r7, #8]
 80086d0:	607a      	str	r2, [r7, #4]
 80086d2:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80086d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10a      	bne.n	80086f0 <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80086ec:	bf00      	nop
 80086ee:	e7fe      	b.n	80086ee <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10a      	bne.n	800870c <xTaskCreateStatic+0x46>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	61fb      	str	r3, [r7, #28]
}
 8008708:	bf00      	nop
 800870a:	e7fe      	b.n	800870a <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800870c:	2354      	movs	r3, #84	; 0x54
 800870e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	2b54      	cmp	r3, #84	; 0x54
 8008714:	d00a      	beq.n	800872c <xTaskCreateStatic+0x66>
	__asm volatile
 8008716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800871a:	f383 8811 	msr	BASEPRI, r3
 800871e:	f3bf 8f6f 	isb	sy
 8008722:	f3bf 8f4f 	dsb	sy
 8008726:	61bb      	str	r3, [r7, #24]
}
 8008728:	bf00      	nop
 800872a:	e7fe      	b.n	800872a <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800872c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800872e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008730:	2b00      	cmp	r3, #0
 8008732:	d01e      	beq.n	8008772 <xTaskCreateStatic+0xac>
 8008734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008736:	2b00      	cmp	r3, #0
 8008738:	d01b      	beq.n	8008772 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800873a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800873c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800873e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008740:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008742:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008746:	2202      	movs	r2, #2
 8008748:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800874c:	2300      	movs	r3, #0
 800874e:	9303      	str	r3, [sp, #12]
 8008750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008752:	9302      	str	r3, [sp, #8]
 8008754:	f107 0314 	add.w	r3, r7, #20
 8008758:	9301      	str	r3, [sp, #4]
 800875a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800875c:	9300      	str	r3, [sp, #0]
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	687a      	ldr	r2, [r7, #4]
 8008762:	68b9      	ldr	r1, [r7, #8]
 8008764:	68f8      	ldr	r0, [r7, #12]
 8008766:	f000 f850 	bl	800880a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800876a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800876c:	f000 f8d4 	bl	8008918 <prvAddNewTaskToReadyList>
 8008770:	e001      	b.n	8008776 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008772:	2300      	movs	r3, #0
 8008774:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008776:	697b      	ldr	r3, [r7, #20]
	}
 8008778:	4618      	mov	r0, r3
 800877a:	3728      	adds	r7, #40	; 0x28
 800877c:	46bd      	mov	sp, r7
 800877e:	bd80      	pop	{r7, pc}

08008780 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008780:	b580      	push	{r7, lr}
 8008782:	b08c      	sub	sp, #48	; 0x30
 8008784:	af04      	add	r7, sp, #16
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	4613      	mov	r3, r2
 800878e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008790:	88fb      	ldrh	r3, [r7, #6]
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4618      	mov	r0, r3
 8008796:	f000 fee7 	bl	8009568 <pvPortMalloc>
 800879a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d00e      	beq.n	80087c0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80087a2:	2054      	movs	r0, #84	; 0x54
 80087a4:	f000 fee0 	bl	8009568 <pvPortMalloc>
 80087a8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d003      	beq.n	80087b8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80087b0:	69fb      	ldr	r3, [r7, #28]
 80087b2:	697a      	ldr	r2, [r7, #20]
 80087b4:	631a      	str	r2, [r3, #48]	; 0x30
 80087b6:	e005      	b.n	80087c4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80087b8:	6978      	ldr	r0, [r7, #20]
 80087ba:	f000 ffa1 	bl	8009700 <vPortFree>
 80087be:	e001      	b.n	80087c4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80087c0:	2300      	movs	r3, #0
 80087c2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80087c4:	69fb      	ldr	r3, [r7, #28]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d017      	beq.n	80087fa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	2200      	movs	r2, #0
 80087ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087d2:	88fa      	ldrh	r2, [r7, #6]
 80087d4:	2300      	movs	r3, #0
 80087d6:	9303      	str	r3, [sp, #12]
 80087d8:	69fb      	ldr	r3, [r7, #28]
 80087da:	9302      	str	r3, [sp, #8]
 80087dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087de:	9301      	str	r3, [sp, #4]
 80087e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087e2:	9300      	str	r3, [sp, #0]
 80087e4:	683b      	ldr	r3, [r7, #0]
 80087e6:	68b9      	ldr	r1, [r7, #8]
 80087e8:	68f8      	ldr	r0, [r7, #12]
 80087ea:	f000 f80e 	bl	800880a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087ee:	69f8      	ldr	r0, [r7, #28]
 80087f0:	f000 f892 	bl	8008918 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087f4:	2301      	movs	r3, #1
 80087f6:	61bb      	str	r3, [r7, #24]
 80087f8:	e002      	b.n	8008800 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087fa:	f04f 33ff 	mov.w	r3, #4294967295
 80087fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008800:	69bb      	ldr	r3, [r7, #24]
	}
 8008802:	4618      	mov	r0, r3
 8008804:	3720      	adds	r7, #32
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b088      	sub	sp, #32
 800880e:	af00      	add	r7, sp, #0
 8008810:	60f8      	str	r0, [r7, #12]
 8008812:	60b9      	str	r1, [r7, #8]
 8008814:	607a      	str	r2, [r7, #4]
 8008816:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800881a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008822:	3b01      	subs	r3, #1
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	4413      	add	r3, r2
 8008828:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800882a:	69bb      	ldr	r3, [r7, #24]
 800882c:	f023 0307 	bic.w	r3, r3, #7
 8008830:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008832:	69bb      	ldr	r3, [r7, #24]
 8008834:	f003 0307 	and.w	r3, r3, #7
 8008838:	2b00      	cmp	r3, #0
 800883a:	d00a      	beq.n	8008852 <prvInitialiseNewTask+0x48>
	__asm volatile
 800883c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008840:	f383 8811 	msr	BASEPRI, r3
 8008844:	f3bf 8f6f 	isb	sy
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	617b      	str	r3, [r7, #20]
}
 800884e:	bf00      	nop
 8008850:	e7fe      	b.n	8008850 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d01f      	beq.n	8008898 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008858:	2300      	movs	r3, #0
 800885a:	61fb      	str	r3, [r7, #28]
 800885c:	e012      	b.n	8008884 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	4413      	add	r3, r2
 8008864:	7819      	ldrb	r1, [r3, #0]
 8008866:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	4413      	add	r3, r2
 800886c:	3334      	adds	r3, #52	; 0x34
 800886e:	460a      	mov	r2, r1
 8008870:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008872:	68ba      	ldr	r2, [r7, #8]
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	4413      	add	r3, r2
 8008878:	781b      	ldrb	r3, [r3, #0]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d006      	beq.n	800888c <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800887e:	69fb      	ldr	r3, [r7, #28]
 8008880:	3301      	adds	r3, #1
 8008882:	61fb      	str	r3, [r7, #28]
 8008884:	69fb      	ldr	r3, [r7, #28]
 8008886:	2b0f      	cmp	r3, #15
 8008888:	d9e9      	bls.n	800885e <prvInitialiseNewTask+0x54>
 800888a:	e000      	b.n	800888e <prvInitialiseNewTask+0x84>
			{
				break;
 800888c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800888e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008890:	2200      	movs	r2, #0
 8008892:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008896:	e003      	b.n	80088a0 <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800889a:	2200      	movs	r2, #0
 800889c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088a2:	2b06      	cmp	r3, #6
 80088a4:	d901      	bls.n	80088aa <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088a6:	2306      	movs	r3, #6
 80088a8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80088aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80088b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80088b4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	2200      	movs	r2, #0
 80088ba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088be:	3304      	adds	r3, #4
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7ff fe6c 	bl	800859e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80088c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c8:	3318      	adds	r3, #24
 80088ca:	4618      	mov	r0, r3
 80088cc:	f7ff fe67 	bl	800859e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80088d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088d8:	f1c3 0207 	rsb	r2, r3, #7
 80088dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088e8:	2200      	movs	r2, #0
 80088ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088ee:	2200      	movs	r2, #0
 80088f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088f4:	683a      	ldr	r2, [r7, #0]
 80088f6:	68f9      	ldr	r1, [r7, #12]
 80088f8:	69b8      	ldr	r0, [r7, #24]
 80088fa:	f000 fc23 	bl	8009144 <pxPortInitialiseStack>
 80088fe:	4602      	mov	r2, r0
 8008900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008902:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008906:	2b00      	cmp	r3, #0
 8008908:	d002      	beq.n	8008910 <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800890a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800890c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800890e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008910:	bf00      	nop
 8008912:	3720      	adds	r7, #32
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b082      	sub	sp, #8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008920:	f000 fd40 	bl	80093a4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008924:	4b2a      	ldr	r3, [pc, #168]	; (80089d0 <prvAddNewTaskToReadyList+0xb8>)
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3301      	adds	r3, #1
 800892a:	4a29      	ldr	r2, [pc, #164]	; (80089d0 <prvAddNewTaskToReadyList+0xb8>)
 800892c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800892e:	4b29      	ldr	r3, [pc, #164]	; (80089d4 <prvAddNewTaskToReadyList+0xbc>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d109      	bne.n	800894a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008936:	4a27      	ldr	r2, [pc, #156]	; (80089d4 <prvAddNewTaskToReadyList+0xbc>)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800893c:	4b24      	ldr	r3, [pc, #144]	; (80089d0 <prvAddNewTaskToReadyList+0xb8>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	2b01      	cmp	r3, #1
 8008942:	d110      	bne.n	8008966 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008944:	f000 fabc 	bl	8008ec0 <prvInitialiseTaskLists>
 8008948:	e00d      	b.n	8008966 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800894a:	4b23      	ldr	r3, [pc, #140]	; (80089d8 <prvAddNewTaskToReadyList+0xc0>)
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	2b00      	cmp	r3, #0
 8008950:	d109      	bne.n	8008966 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008952:	4b20      	ldr	r3, [pc, #128]	; (80089d4 <prvAddNewTaskToReadyList+0xbc>)
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800895c:	429a      	cmp	r2, r3
 800895e:	d802      	bhi.n	8008966 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008960:	4a1c      	ldr	r2, [pc, #112]	; (80089d4 <prvAddNewTaskToReadyList+0xbc>)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008966:	4b1d      	ldr	r3, [pc, #116]	; (80089dc <prvAddNewTaskToReadyList+0xc4>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3301      	adds	r3, #1
 800896c:	4a1b      	ldr	r2, [pc, #108]	; (80089dc <prvAddNewTaskToReadyList+0xc4>)
 800896e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008974:	2201      	movs	r2, #1
 8008976:	409a      	lsls	r2, r3
 8008978:	4b19      	ldr	r3, [pc, #100]	; (80089e0 <prvAddNewTaskToReadyList+0xc8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4313      	orrs	r3, r2
 800897e:	4a18      	ldr	r2, [pc, #96]	; (80089e0 <prvAddNewTaskToReadyList+0xc8>)
 8008980:	6013      	str	r3, [r2, #0]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	4a15      	ldr	r2, [pc, #84]	; (80089e4 <prvAddNewTaskToReadyList+0xcc>)
 8008990:	441a      	add	r2, r3
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	3304      	adds	r3, #4
 8008996:	4619      	mov	r1, r3
 8008998:	4610      	mov	r0, r2
 800899a:	f7ff fe0d 	bl	80085b8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800899e:	f000 fd31 	bl	8009404 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80089a2:	4b0d      	ldr	r3, [pc, #52]	; (80089d8 <prvAddNewTaskToReadyList+0xc0>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00e      	beq.n	80089c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80089aa:	4b0a      	ldr	r3, [pc, #40]	; (80089d4 <prvAddNewTaskToReadyList+0xbc>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b4:	429a      	cmp	r2, r3
 80089b6:	d207      	bcs.n	80089c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80089b8:	4b0b      	ldr	r3, [pc, #44]	; (80089e8 <prvAddNewTaskToReadyList+0xd0>)
 80089ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089be:	601a      	str	r2, [r3, #0]
 80089c0:	f3bf 8f4f 	dsb	sy
 80089c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089c8:	bf00      	nop
 80089ca:	3708      	adds	r7, #8
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}
 80089d0:	20000418 	.word	0x20000418
 80089d4:	20000318 	.word	0x20000318
 80089d8:	20000424 	.word	0x20000424
 80089dc:	20000434 	.word	0x20000434
 80089e0:	20000420 	.word	0x20000420
 80089e4:	2000031c 	.word	0x2000031c
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b084      	sub	sp, #16
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80089f4:	2300      	movs	r3, #0
 80089f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d017      	beq.n	8008a2e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80089fe:	4b13      	ldr	r3, [pc, #76]	; (8008a4c <vTaskDelay+0x60>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d00a      	beq.n	8008a1c <vTaskDelay+0x30>
	__asm volatile
 8008a06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0a:	f383 8811 	msr	BASEPRI, r3
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f3bf 8f4f 	dsb	sy
 8008a16:	60bb      	str	r3, [r7, #8]
}
 8008a18:	bf00      	nop
 8008a1a:	e7fe      	b.n	8008a1a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008a1c:	f000 f87a 	bl	8008b14 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008a20:	2100      	movs	r1, #0
 8008a22:	6878      	ldr	r0, [r7, #4]
 8008a24:	f000 fb28 	bl	8009078 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008a28:	f000 f882 	bl	8008b30 <xTaskResumeAll>
 8008a2c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d107      	bne.n	8008a44 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008a34:	4b06      	ldr	r3, [pc, #24]	; (8008a50 <vTaskDelay+0x64>)
 8008a36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a3a:	601a      	str	r2, [r3, #0]
 8008a3c:	f3bf 8f4f 	dsb	sy
 8008a40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008a44:	bf00      	nop
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20000440 	.word	0x20000440
 8008a50:	e000ed04 	.word	0xe000ed04

08008a54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08a      	sub	sp, #40	; 0x28
 8008a58:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008a62:	463a      	mov	r2, r7
 8008a64:	1d39      	adds	r1, r7, #4
 8008a66:	f107 0308 	add.w	r3, r7, #8
 8008a6a:	4618      	mov	r0, r3
 8008a6c:	f000 ff66 	bl	800993c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008a70:	6839      	ldr	r1, [r7, #0]
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	9202      	str	r2, [sp, #8]
 8008a78:	9301      	str	r3, [sp, #4]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	2300      	movs	r3, #0
 8008a80:	460a      	mov	r2, r1
 8008a82:	491e      	ldr	r1, [pc, #120]	; (8008afc <vTaskStartScheduler+0xa8>)
 8008a84:	481e      	ldr	r0, [pc, #120]	; (8008b00 <vTaskStartScheduler+0xac>)
 8008a86:	f7ff fe1e 	bl	80086c6 <xTaskCreateStatic>
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	4a1d      	ldr	r2, [pc, #116]	; (8008b04 <vTaskStartScheduler+0xb0>)
 8008a8e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008a90:	4b1c      	ldr	r3, [pc, #112]	; (8008b04 <vTaskStartScheduler+0xb0>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d002      	beq.n	8008a9e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	617b      	str	r3, [r7, #20]
 8008a9c:	e001      	b.n	8008aa2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d116      	bne.n	8008ad6 <vTaskStartScheduler+0x82>
	__asm volatile
 8008aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aac:	f383 8811 	msr	BASEPRI, r3
 8008ab0:	f3bf 8f6f 	isb	sy
 8008ab4:	f3bf 8f4f 	dsb	sy
 8008ab8:	613b      	str	r3, [r7, #16]
}
 8008aba:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008abc:	4b12      	ldr	r3, [pc, #72]	; (8008b08 <vTaskStartScheduler+0xb4>)
 8008abe:	f04f 32ff 	mov.w	r2, #4294967295
 8008ac2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ac4:	4b11      	ldr	r3, [pc, #68]	; (8008b0c <vTaskStartScheduler+0xb8>)
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008aca:	4b11      	ldr	r3, [pc, #68]	; (8008b10 <vTaskStartScheduler+0xbc>)
 8008acc:	2200      	movs	r2, #0
 8008ace:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ad0:	f000 fbc6 	bl	8009260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008ad4:	e00e      	b.n	8008af4 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008adc:	d10a      	bne.n	8008af4 <vTaskStartScheduler+0xa0>
	__asm volatile
 8008ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ae2:	f383 8811 	msr	BASEPRI, r3
 8008ae6:	f3bf 8f6f 	isb	sy
 8008aea:	f3bf 8f4f 	dsb	sy
 8008aee:	60fb      	str	r3, [r7, #12]
}
 8008af0:	bf00      	nop
 8008af2:	e7fe      	b.n	8008af2 <vTaskStartScheduler+0x9e>
}
 8008af4:	bf00      	nop
 8008af6:	3718      	adds	r7, #24
 8008af8:	46bd      	mov	sp, r7
 8008afa:	bd80      	pop	{r7, pc}
 8008afc:	0800c534 	.word	0x0800c534
 8008b00:	08008e91 	.word	0x08008e91
 8008b04:	2000043c 	.word	0x2000043c
 8008b08:	20000438 	.word	0x20000438
 8008b0c:	20000424 	.word	0x20000424
 8008b10:	2000041c 	.word	0x2000041c

08008b14 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008b14:	b480      	push	{r7}
 8008b16:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008b18:	4b04      	ldr	r3, [pc, #16]	; (8008b2c <vTaskSuspendAll+0x18>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	3301      	adds	r3, #1
 8008b1e:	4a03      	ldr	r2, [pc, #12]	; (8008b2c <vTaskSuspendAll+0x18>)
 8008b20:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008b22:	bf00      	nop
 8008b24:	46bd      	mov	sp, r7
 8008b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2a:	4770      	bx	lr
 8008b2c:	20000440 	.word	0x20000440

08008b30 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008b36:	2300      	movs	r3, #0
 8008b38:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008b3e:	4b41      	ldr	r3, [pc, #260]	; (8008c44 <xTaskResumeAll+0x114>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d10a      	bne.n	8008b5c <xTaskResumeAll+0x2c>
	__asm volatile
 8008b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b4a:	f383 8811 	msr	BASEPRI, r3
 8008b4e:	f3bf 8f6f 	isb	sy
 8008b52:	f3bf 8f4f 	dsb	sy
 8008b56:	603b      	str	r3, [r7, #0]
}
 8008b58:	bf00      	nop
 8008b5a:	e7fe      	b.n	8008b5a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008b5c:	f000 fc22 	bl	80093a4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008b60:	4b38      	ldr	r3, [pc, #224]	; (8008c44 <xTaskResumeAll+0x114>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	3b01      	subs	r3, #1
 8008b66:	4a37      	ldr	r2, [pc, #220]	; (8008c44 <xTaskResumeAll+0x114>)
 8008b68:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008b6a:	4b36      	ldr	r3, [pc, #216]	; (8008c44 <xTaskResumeAll+0x114>)
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d161      	bne.n	8008c36 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008b72:	4b35      	ldr	r3, [pc, #212]	; (8008c48 <xTaskResumeAll+0x118>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d05d      	beq.n	8008c36 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b7a:	e02e      	b.n	8008bda <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b7c:	4b33      	ldr	r3, [pc, #204]	; (8008c4c <xTaskResumeAll+0x11c>)
 8008b7e:	68db      	ldr	r3, [r3, #12]
 8008b80:	68db      	ldr	r3, [r3, #12]
 8008b82:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	3318      	adds	r3, #24
 8008b88:	4618      	mov	r0, r3
 8008b8a:	f7ff fd72 	bl	8008672 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	3304      	adds	r3, #4
 8008b92:	4618      	mov	r0, r3
 8008b94:	f7ff fd6d 	bl	8008672 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b9c:	2201      	movs	r2, #1
 8008b9e:	409a      	lsls	r2, r3
 8008ba0:	4b2b      	ldr	r3, [pc, #172]	; (8008c50 <xTaskResumeAll+0x120>)
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	4a2a      	ldr	r2, [pc, #168]	; (8008c50 <xTaskResumeAll+0x120>)
 8008ba8:	6013      	str	r3, [r2, #0]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bae:	4613      	mov	r3, r2
 8008bb0:	009b      	lsls	r3, r3, #2
 8008bb2:	4413      	add	r3, r2
 8008bb4:	009b      	lsls	r3, r3, #2
 8008bb6:	4a27      	ldr	r2, [pc, #156]	; (8008c54 <xTaskResumeAll+0x124>)
 8008bb8:	441a      	add	r2, r3
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	3304      	adds	r3, #4
 8008bbe:	4619      	mov	r1, r3
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	f7ff fcf9 	bl	80085b8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bca:	4b23      	ldr	r3, [pc, #140]	; (8008c58 <xTaskResumeAll+0x128>)
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd0:	429a      	cmp	r2, r3
 8008bd2:	d302      	bcc.n	8008bda <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8008bd4:	4b21      	ldr	r3, [pc, #132]	; (8008c5c <xTaskResumeAll+0x12c>)
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008bda:	4b1c      	ldr	r3, [pc, #112]	; (8008c4c <xTaskResumeAll+0x11c>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1cc      	bne.n	8008b7c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d001      	beq.n	8008bec <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008be8:	f000 fa08 	bl	8008ffc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008bec:	4b1c      	ldr	r3, [pc, #112]	; (8008c60 <xTaskResumeAll+0x130>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d010      	beq.n	8008c1a <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008bf8:	f000 f836 	bl	8008c68 <xTaskIncrementTick>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d002      	beq.n	8008c08 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8008c02:	4b16      	ldr	r3, [pc, #88]	; (8008c5c <xTaskResumeAll+0x12c>)
 8008c04:	2201      	movs	r2, #1
 8008c06:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	3b01      	subs	r3, #1
 8008c0c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d1f1      	bne.n	8008bf8 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8008c14:	4b12      	ldr	r3, [pc, #72]	; (8008c60 <xTaskResumeAll+0x130>)
 8008c16:	2200      	movs	r2, #0
 8008c18:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008c1a:	4b10      	ldr	r3, [pc, #64]	; (8008c5c <xTaskResumeAll+0x12c>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d009      	beq.n	8008c36 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008c22:	2301      	movs	r3, #1
 8008c24:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008c26:	4b0f      	ldr	r3, [pc, #60]	; (8008c64 <xTaskResumeAll+0x134>)
 8008c28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c2c:	601a      	str	r2, [r3, #0]
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008c36:	f000 fbe5 	bl	8009404 <vPortExitCritical>

	return xAlreadyYielded;
 8008c3a:	68bb      	ldr	r3, [r7, #8]
}
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	3710      	adds	r7, #16
 8008c40:	46bd      	mov	sp, r7
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	20000440 	.word	0x20000440
 8008c48:	20000418 	.word	0x20000418
 8008c4c:	200003d8 	.word	0x200003d8
 8008c50:	20000420 	.word	0x20000420
 8008c54:	2000031c 	.word	0x2000031c
 8008c58:	20000318 	.word	0x20000318
 8008c5c:	2000042c 	.word	0x2000042c
 8008c60:	20000428 	.word	0x20000428
 8008c64:	e000ed04 	.word	0xe000ed04

08008c68 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b086      	sub	sp, #24
 8008c6c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008c6e:	2300      	movs	r3, #0
 8008c70:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c72:	4b4e      	ldr	r3, [pc, #312]	; (8008dac <xTaskIncrementTick+0x144>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	f040 808e 	bne.w	8008d98 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c7c:	4b4c      	ldr	r3, [pc, #304]	; (8008db0 <xTaskIncrementTick+0x148>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	3301      	adds	r3, #1
 8008c82:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008c84:	4a4a      	ldr	r2, [pc, #296]	; (8008db0 <xTaskIncrementTick+0x148>)
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d120      	bne.n	8008cd2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008c90:	4b48      	ldr	r3, [pc, #288]	; (8008db4 <xTaskIncrementTick+0x14c>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <xTaskIncrementTick+0x48>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	603b      	str	r3, [r7, #0]
}
 8008cac:	bf00      	nop
 8008cae:	e7fe      	b.n	8008cae <xTaskIncrementTick+0x46>
 8008cb0:	4b40      	ldr	r3, [pc, #256]	; (8008db4 <xTaskIncrementTick+0x14c>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	60fb      	str	r3, [r7, #12]
 8008cb6:	4b40      	ldr	r3, [pc, #256]	; (8008db8 <xTaskIncrementTick+0x150>)
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a3e      	ldr	r2, [pc, #248]	; (8008db4 <xTaskIncrementTick+0x14c>)
 8008cbc:	6013      	str	r3, [r2, #0]
 8008cbe:	4a3e      	ldr	r2, [pc, #248]	; (8008db8 <xTaskIncrementTick+0x150>)
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	6013      	str	r3, [r2, #0]
 8008cc4:	4b3d      	ldr	r3, [pc, #244]	; (8008dbc <xTaskIncrementTick+0x154>)
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	3301      	adds	r3, #1
 8008cca:	4a3c      	ldr	r2, [pc, #240]	; (8008dbc <xTaskIncrementTick+0x154>)
 8008ccc:	6013      	str	r3, [r2, #0]
 8008cce:	f000 f995 	bl	8008ffc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008cd2:	4b3b      	ldr	r3, [pc, #236]	; (8008dc0 <xTaskIncrementTick+0x158>)
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d348      	bcc.n	8008d6e <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008cdc:	4b35      	ldr	r3, [pc, #212]	; (8008db4 <xTaskIncrementTick+0x14c>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d104      	bne.n	8008cf0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ce6:	4b36      	ldr	r3, [pc, #216]	; (8008dc0 <xTaskIncrementTick+0x158>)
 8008ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cec:	601a      	str	r2, [r3, #0]
					break;
 8008cee:	e03e      	b.n	8008d6e <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cf0:	4b30      	ldr	r3, [pc, #192]	; (8008db4 <xTaskIncrementTick+0x14c>)
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	68db      	ldr	r3, [r3, #12]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d203      	bcs.n	8008d10 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008d08:	4a2d      	ldr	r2, [pc, #180]	; (8008dc0 <xTaskIncrementTick+0x158>)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008d0e:	e02e      	b.n	8008d6e <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008d10:	68bb      	ldr	r3, [r7, #8]
 8008d12:	3304      	adds	r3, #4
 8008d14:	4618      	mov	r0, r3
 8008d16:	f7ff fcac 	bl	8008672 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d004      	beq.n	8008d2c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008d22:	68bb      	ldr	r3, [r7, #8]
 8008d24:	3318      	adds	r3, #24
 8008d26:	4618      	mov	r0, r3
 8008d28:	f7ff fca3 	bl	8008672 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008d2c:	68bb      	ldr	r3, [r7, #8]
 8008d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d30:	2201      	movs	r2, #1
 8008d32:	409a      	lsls	r2, r3
 8008d34:	4b23      	ldr	r3, [pc, #140]	; (8008dc4 <xTaskIncrementTick+0x15c>)
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	4a22      	ldr	r2, [pc, #136]	; (8008dc4 <xTaskIncrementTick+0x15c>)
 8008d3c:	6013      	str	r3, [r2, #0]
 8008d3e:	68bb      	ldr	r3, [r7, #8]
 8008d40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d42:	4613      	mov	r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4413      	add	r3, r2
 8008d48:	009b      	lsls	r3, r3, #2
 8008d4a:	4a1f      	ldr	r2, [pc, #124]	; (8008dc8 <xTaskIncrementTick+0x160>)
 8008d4c:	441a      	add	r2, r3
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	3304      	adds	r3, #4
 8008d52:	4619      	mov	r1, r3
 8008d54:	4610      	mov	r0, r2
 8008d56:	f7ff fc2f 	bl	80085b8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d5a:	68bb      	ldr	r3, [r7, #8]
 8008d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d5e:	4b1b      	ldr	r3, [pc, #108]	; (8008dcc <xTaskIncrementTick+0x164>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d64:	429a      	cmp	r2, r3
 8008d66:	d3b9      	bcc.n	8008cdc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008d68:	2301      	movs	r3, #1
 8008d6a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008d6c:	e7b6      	b.n	8008cdc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008d6e:	4b17      	ldr	r3, [pc, #92]	; (8008dcc <xTaskIncrementTick+0x164>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d74:	4914      	ldr	r1, [pc, #80]	; (8008dc8 <xTaskIncrementTick+0x160>)
 8008d76:	4613      	mov	r3, r2
 8008d78:	009b      	lsls	r3, r3, #2
 8008d7a:	4413      	add	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	440b      	add	r3, r1
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b01      	cmp	r3, #1
 8008d84:	d901      	bls.n	8008d8a <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8008d86:	2301      	movs	r3, #1
 8008d88:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008d8a:	4b11      	ldr	r3, [pc, #68]	; (8008dd0 <xTaskIncrementTick+0x168>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d007      	beq.n	8008da2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8008d92:	2301      	movs	r3, #1
 8008d94:	617b      	str	r3, [r7, #20]
 8008d96:	e004      	b.n	8008da2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008d98:	4b0e      	ldr	r3, [pc, #56]	; (8008dd4 <xTaskIncrementTick+0x16c>)
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	3301      	adds	r3, #1
 8008d9e:	4a0d      	ldr	r2, [pc, #52]	; (8008dd4 <xTaskIncrementTick+0x16c>)
 8008da0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008da2:	697b      	ldr	r3, [r7, #20]
}
 8008da4:	4618      	mov	r0, r3
 8008da6:	3718      	adds	r7, #24
 8008da8:	46bd      	mov	sp, r7
 8008daa:	bd80      	pop	{r7, pc}
 8008dac:	20000440 	.word	0x20000440
 8008db0:	2000041c 	.word	0x2000041c
 8008db4:	200003d0 	.word	0x200003d0
 8008db8:	200003d4 	.word	0x200003d4
 8008dbc:	20000430 	.word	0x20000430
 8008dc0:	20000438 	.word	0x20000438
 8008dc4:	20000420 	.word	0x20000420
 8008dc8:	2000031c 	.word	0x2000031c
 8008dcc:	20000318 	.word	0x20000318
 8008dd0:	2000042c 	.word	0x2000042c
 8008dd4:	20000428 	.word	0x20000428

08008dd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008dd8:	b480      	push	{r7}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008dde:	4b27      	ldr	r3, [pc, #156]	; (8008e7c <vTaskSwitchContext+0xa4>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008de6:	4b26      	ldr	r3, [pc, #152]	; (8008e80 <vTaskSwitchContext+0xa8>)
 8008de8:	2201      	movs	r2, #1
 8008dea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008dec:	e03f      	b.n	8008e6e <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 8008dee:	4b24      	ldr	r3, [pc, #144]	; (8008e80 <vTaskSwitchContext+0xa8>)
 8008df0:	2200      	movs	r2, #0
 8008df2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008df4:	4b23      	ldr	r3, [pc, #140]	; (8008e84 <vTaskSwitchContext+0xac>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	fab3 f383 	clz	r3, r3
 8008e00:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8008e02:	7afb      	ldrb	r3, [r7, #11]
 8008e04:	f1c3 031f 	rsb	r3, r3, #31
 8008e08:	617b      	str	r3, [r7, #20]
 8008e0a:	491f      	ldr	r1, [pc, #124]	; (8008e88 <vTaskSwitchContext+0xb0>)
 8008e0c:	697a      	ldr	r2, [r7, #20]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	009b      	lsls	r3, r3, #2
 8008e12:	4413      	add	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	440b      	add	r3, r1
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d10a      	bne.n	8008e34 <vTaskSwitchContext+0x5c>
	__asm volatile
 8008e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e22:	f383 8811 	msr	BASEPRI, r3
 8008e26:	f3bf 8f6f 	isb	sy
 8008e2a:	f3bf 8f4f 	dsb	sy
 8008e2e:	607b      	str	r3, [r7, #4]
}
 8008e30:	bf00      	nop
 8008e32:	e7fe      	b.n	8008e32 <vTaskSwitchContext+0x5a>
 8008e34:	697a      	ldr	r2, [r7, #20]
 8008e36:	4613      	mov	r3, r2
 8008e38:	009b      	lsls	r3, r3, #2
 8008e3a:	4413      	add	r3, r2
 8008e3c:	009b      	lsls	r3, r3, #2
 8008e3e:	4a12      	ldr	r2, [pc, #72]	; (8008e88 <vTaskSwitchContext+0xb0>)
 8008e40:	4413      	add	r3, r2
 8008e42:	613b      	str	r3, [r7, #16]
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	685a      	ldr	r2, [r3, #4]
 8008e4a:	693b      	ldr	r3, [r7, #16]
 8008e4c:	605a      	str	r2, [r3, #4]
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	685a      	ldr	r2, [r3, #4]
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	3308      	adds	r3, #8
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d104      	bne.n	8008e64 <vTaskSwitchContext+0x8c>
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	685b      	ldr	r3, [r3, #4]
 8008e5e:	685a      	ldr	r2, [r3, #4]
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	605a      	str	r2, [r3, #4]
 8008e64:	693b      	ldr	r3, [r7, #16]
 8008e66:	685b      	ldr	r3, [r3, #4]
 8008e68:	68db      	ldr	r3, [r3, #12]
 8008e6a:	4a08      	ldr	r2, [pc, #32]	; (8008e8c <vTaskSwitchContext+0xb4>)
 8008e6c:	6013      	str	r3, [r2, #0]
}
 8008e6e:	bf00      	nop
 8008e70:	371c      	adds	r7, #28
 8008e72:	46bd      	mov	sp, r7
 8008e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e78:	4770      	bx	lr
 8008e7a:	bf00      	nop
 8008e7c:	20000440 	.word	0x20000440
 8008e80:	2000042c 	.word	0x2000042c
 8008e84:	20000420 	.word	0x20000420
 8008e88:	2000031c 	.word	0x2000031c
 8008e8c:	20000318 	.word	0x20000318

08008e90 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008e98:	f000 f852 	bl	8008f40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008e9c:	4b06      	ldr	r3, [pc, #24]	; (8008eb8 <prvIdleTask+0x28>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d9f9      	bls.n	8008e98 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008ea4:	4b05      	ldr	r3, [pc, #20]	; (8008ebc <prvIdleTask+0x2c>)
 8008ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008eaa:	601a      	str	r2, [r3, #0]
 8008eac:	f3bf 8f4f 	dsb	sy
 8008eb0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008eb4:	e7f0      	b.n	8008e98 <prvIdleTask+0x8>
 8008eb6:	bf00      	nop
 8008eb8:	2000031c 	.word	0x2000031c
 8008ebc:	e000ed04 	.word	0xe000ed04

08008ec0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008ec0:	b580      	push	{r7, lr}
 8008ec2:	b082      	sub	sp, #8
 8008ec4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	607b      	str	r3, [r7, #4]
 8008eca:	e00c      	b.n	8008ee6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ecc:	687a      	ldr	r2, [r7, #4]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	009b      	lsls	r3, r3, #2
 8008ed2:	4413      	add	r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4a12      	ldr	r2, [pc, #72]	; (8008f20 <prvInitialiseTaskLists+0x60>)
 8008ed8:	4413      	add	r3, r2
 8008eda:	4618      	mov	r0, r3
 8008edc:	f7ff fb3f 	bl	800855e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	3301      	adds	r3, #1
 8008ee4:	607b      	str	r3, [r7, #4]
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	2b06      	cmp	r3, #6
 8008eea:	d9ef      	bls.n	8008ecc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008eec:	480d      	ldr	r0, [pc, #52]	; (8008f24 <prvInitialiseTaskLists+0x64>)
 8008eee:	f7ff fb36 	bl	800855e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ef2:	480d      	ldr	r0, [pc, #52]	; (8008f28 <prvInitialiseTaskLists+0x68>)
 8008ef4:	f7ff fb33 	bl	800855e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008ef8:	480c      	ldr	r0, [pc, #48]	; (8008f2c <prvInitialiseTaskLists+0x6c>)
 8008efa:	f7ff fb30 	bl	800855e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008efe:	480c      	ldr	r0, [pc, #48]	; (8008f30 <prvInitialiseTaskLists+0x70>)
 8008f00:	f7ff fb2d 	bl	800855e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008f04:	480b      	ldr	r0, [pc, #44]	; (8008f34 <prvInitialiseTaskLists+0x74>)
 8008f06:	f7ff fb2a 	bl	800855e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008f0a:	4b0b      	ldr	r3, [pc, #44]	; (8008f38 <prvInitialiseTaskLists+0x78>)
 8008f0c:	4a05      	ldr	r2, [pc, #20]	; (8008f24 <prvInitialiseTaskLists+0x64>)
 8008f0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008f10:	4b0a      	ldr	r3, [pc, #40]	; (8008f3c <prvInitialiseTaskLists+0x7c>)
 8008f12:	4a05      	ldr	r2, [pc, #20]	; (8008f28 <prvInitialiseTaskLists+0x68>)
 8008f14:	601a      	str	r2, [r3, #0]
}
 8008f16:	bf00      	nop
 8008f18:	3708      	adds	r7, #8
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}
 8008f1e:	bf00      	nop
 8008f20:	2000031c 	.word	0x2000031c
 8008f24:	200003a8 	.word	0x200003a8
 8008f28:	200003bc 	.word	0x200003bc
 8008f2c:	200003d8 	.word	0x200003d8
 8008f30:	200003ec 	.word	0x200003ec
 8008f34:	20000404 	.word	0x20000404
 8008f38:	200003d0 	.word	0x200003d0
 8008f3c:	200003d4 	.word	0x200003d4

08008f40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b082      	sub	sp, #8
 8008f44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f46:	e019      	b.n	8008f7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008f48:	f000 fa2c 	bl	80093a4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f4c:	4b10      	ldr	r3, [pc, #64]	; (8008f90 <prvCheckTasksWaitingTermination+0x50>)
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	3304      	adds	r3, #4
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7ff fb8a 	bl	8008672 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008f5e:	4b0d      	ldr	r3, [pc, #52]	; (8008f94 <prvCheckTasksWaitingTermination+0x54>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	3b01      	subs	r3, #1
 8008f64:	4a0b      	ldr	r2, [pc, #44]	; (8008f94 <prvCheckTasksWaitingTermination+0x54>)
 8008f66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008f68:	4b0b      	ldr	r3, [pc, #44]	; (8008f98 <prvCheckTasksWaitingTermination+0x58>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3b01      	subs	r3, #1
 8008f6e:	4a0a      	ldr	r2, [pc, #40]	; (8008f98 <prvCheckTasksWaitingTermination+0x58>)
 8008f70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008f72:	f000 fa47 	bl	8009404 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f000 f810 	bl	8008f9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008f7c:	4b06      	ldr	r3, [pc, #24]	; (8008f98 <prvCheckTasksWaitingTermination+0x58>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d1e1      	bne.n	8008f48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008f84:	bf00      	nop
 8008f86:	bf00      	nop
 8008f88:	3708      	adds	r7, #8
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
 8008f8e:	bf00      	nop
 8008f90:	200003ec 	.word	0x200003ec
 8008f94:	20000418 	.word	0x20000418
 8008f98:	20000400 	.word	0x20000400

08008f9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b084      	sub	sp, #16
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d108      	bne.n	8008fc0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	f000 fba4 	bl	8009700 <vPortFree>
				vPortFree( pxTCB );
 8008fb8:	6878      	ldr	r0, [r7, #4]
 8008fba:	f000 fba1 	bl	8009700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008fbe:	e018      	b.n	8008ff2 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d103      	bne.n	8008fd2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f000 fb98 	bl	8009700 <vPortFree>
	}
 8008fd0:	e00f      	b.n	8008ff2 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008fd8:	2b02      	cmp	r3, #2
 8008fda:	d00a      	beq.n	8008ff2 <prvDeleteTCB+0x56>
	__asm volatile
 8008fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fe0:	f383 8811 	msr	BASEPRI, r3
 8008fe4:	f3bf 8f6f 	isb	sy
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	60fb      	str	r3, [r7, #12]
}
 8008fee:	bf00      	nop
 8008ff0:	e7fe      	b.n	8008ff0 <prvDeleteTCB+0x54>
	}
 8008ff2:	bf00      	nop
 8008ff4:	3710      	adds	r7, #16
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
	...

08008ffc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009002:	4b0c      	ldr	r3, [pc, #48]	; (8009034 <prvResetNextTaskUnblockTime+0x38>)
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d104      	bne.n	8009016 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800900c:	4b0a      	ldr	r3, [pc, #40]	; (8009038 <prvResetNextTaskUnblockTime+0x3c>)
 800900e:	f04f 32ff 	mov.w	r2, #4294967295
 8009012:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009014:	e008      	b.n	8009028 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009016:	4b07      	ldr	r3, [pc, #28]	; (8009034 <prvResetNextTaskUnblockTime+0x38>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	685b      	ldr	r3, [r3, #4]
 8009024:	4a04      	ldr	r2, [pc, #16]	; (8009038 <prvResetNextTaskUnblockTime+0x3c>)
 8009026:	6013      	str	r3, [r2, #0]
}
 8009028:	bf00      	nop
 800902a:	370c      	adds	r7, #12
 800902c:	46bd      	mov	sp, r7
 800902e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009032:	4770      	bx	lr
 8009034:	200003d0 	.word	0x200003d0
 8009038:	20000438 	.word	0x20000438

0800903c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800903c:	b480      	push	{r7}
 800903e:	b083      	sub	sp, #12
 8009040:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009042:	4b0b      	ldr	r3, [pc, #44]	; (8009070 <xTaskGetSchedulerState+0x34>)
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d102      	bne.n	8009050 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800904a:	2301      	movs	r3, #1
 800904c:	607b      	str	r3, [r7, #4]
 800904e:	e008      	b.n	8009062 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009050:	4b08      	ldr	r3, [pc, #32]	; (8009074 <xTaskGetSchedulerState+0x38>)
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2b00      	cmp	r3, #0
 8009056:	d102      	bne.n	800905e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009058:	2302      	movs	r3, #2
 800905a:	607b      	str	r3, [r7, #4]
 800905c:	e001      	b.n	8009062 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800905e:	2300      	movs	r3, #0
 8009060:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009062:	687b      	ldr	r3, [r7, #4]
	}
 8009064:	4618      	mov	r0, r3
 8009066:	370c      	adds	r7, #12
 8009068:	46bd      	mov	sp, r7
 800906a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800906e:	4770      	bx	lr
 8009070:	20000424 	.word	0x20000424
 8009074:	20000440 	.word	0x20000440

08009078 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009082:	4b29      	ldr	r3, [pc, #164]	; (8009128 <prvAddCurrentTaskToDelayedList+0xb0>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009088:	4b28      	ldr	r3, [pc, #160]	; (800912c <prvAddCurrentTaskToDelayedList+0xb4>)
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	3304      	adds	r3, #4
 800908e:	4618      	mov	r0, r3
 8009090:	f7ff faef 	bl	8008672 <uxListRemove>
 8009094:	4603      	mov	r3, r0
 8009096:	2b00      	cmp	r3, #0
 8009098:	d10b      	bne.n	80090b2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800909a:	4b24      	ldr	r3, [pc, #144]	; (800912c <prvAddCurrentTaskToDelayedList+0xb4>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090a0:	2201      	movs	r2, #1
 80090a2:	fa02 f303 	lsl.w	r3, r2, r3
 80090a6:	43da      	mvns	r2, r3
 80090a8:	4b21      	ldr	r3, [pc, #132]	; (8009130 <prvAddCurrentTaskToDelayedList+0xb8>)
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	4013      	ands	r3, r2
 80090ae:	4a20      	ldr	r2, [pc, #128]	; (8009130 <prvAddCurrentTaskToDelayedList+0xb8>)
 80090b0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090b8:	d10a      	bne.n	80090d0 <prvAddCurrentTaskToDelayedList+0x58>
 80090ba:	683b      	ldr	r3, [r7, #0]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d007      	beq.n	80090d0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090c0:	4b1a      	ldr	r3, [pc, #104]	; (800912c <prvAddCurrentTaskToDelayedList+0xb4>)
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	3304      	adds	r3, #4
 80090c6:	4619      	mov	r1, r3
 80090c8:	481a      	ldr	r0, [pc, #104]	; (8009134 <prvAddCurrentTaskToDelayedList+0xbc>)
 80090ca:	f7ff fa75 	bl	80085b8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090ce:	e026      	b.n	800911e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090d0:	68fa      	ldr	r2, [r7, #12]
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	4413      	add	r3, r2
 80090d6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090d8:	4b14      	ldr	r3, [pc, #80]	; (800912c <prvAddCurrentTaskToDelayedList+0xb4>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	68ba      	ldr	r2, [r7, #8]
 80090de:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090e0:	68ba      	ldr	r2, [r7, #8]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d209      	bcs.n	80090fc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090e8:	4b13      	ldr	r3, [pc, #76]	; (8009138 <prvAddCurrentTaskToDelayedList+0xc0>)
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	4b0f      	ldr	r3, [pc, #60]	; (800912c <prvAddCurrentTaskToDelayedList+0xb4>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	3304      	adds	r3, #4
 80090f2:	4619      	mov	r1, r3
 80090f4:	4610      	mov	r0, r2
 80090f6:	f7ff fa83 	bl	8008600 <vListInsert>
}
 80090fa:	e010      	b.n	800911e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090fc:	4b0f      	ldr	r3, [pc, #60]	; (800913c <prvAddCurrentTaskToDelayedList+0xc4>)
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	4b0a      	ldr	r3, [pc, #40]	; (800912c <prvAddCurrentTaskToDelayedList+0xb4>)
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	3304      	adds	r3, #4
 8009106:	4619      	mov	r1, r3
 8009108:	4610      	mov	r0, r2
 800910a:	f7ff fa79 	bl	8008600 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800910e:	4b0c      	ldr	r3, [pc, #48]	; (8009140 <prvAddCurrentTaskToDelayedList+0xc8>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	68ba      	ldr	r2, [r7, #8]
 8009114:	429a      	cmp	r2, r3
 8009116:	d202      	bcs.n	800911e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8009118:	4a09      	ldr	r2, [pc, #36]	; (8009140 <prvAddCurrentTaskToDelayedList+0xc8>)
 800911a:	68bb      	ldr	r3, [r7, #8]
 800911c:	6013      	str	r3, [r2, #0]
}
 800911e:	bf00      	nop
 8009120:	3710      	adds	r7, #16
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	2000041c 	.word	0x2000041c
 800912c:	20000318 	.word	0x20000318
 8009130:	20000420 	.word	0x20000420
 8009134:	20000404 	.word	0x20000404
 8009138:	200003d4 	.word	0x200003d4
 800913c:	200003d0 	.word	0x200003d0
 8009140:	20000438 	.word	0x20000438

08009144 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	60f8      	str	r0, [r7, #12]
 800914c:	60b9      	str	r1, [r7, #8]
 800914e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	3b04      	subs	r3, #4
 8009154:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800915c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	3b04      	subs	r3, #4
 8009162:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f023 0201 	bic.w	r2, r3, #1
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	3b04      	subs	r3, #4
 8009172:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009174:	4a0c      	ldr	r2, [pc, #48]	; (80091a8 <pxPortInitialiseStack+0x64>)
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	3b14      	subs	r3, #20
 800917e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009180:	687a      	ldr	r2, [r7, #4]
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009186:	68fb      	ldr	r3, [r7, #12]
 8009188:	3b04      	subs	r3, #4
 800918a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	f06f 0202 	mvn.w	r2, #2
 8009192:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	3b20      	subs	r3, #32
 8009198:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800919a:	68fb      	ldr	r3, [r7, #12]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3714      	adds	r7, #20
 80091a0:	46bd      	mov	sp, r7
 80091a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a6:	4770      	bx	lr
 80091a8:	080091ad 	.word	0x080091ad

080091ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80091ac:	b480      	push	{r7}
 80091ae:	b085      	sub	sp, #20
 80091b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80091b2:	2300      	movs	r3, #0
 80091b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80091b6:	4b12      	ldr	r3, [pc, #72]	; (8009200 <prvTaskExitError+0x54>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091be:	d00a      	beq.n	80091d6 <prvTaskExitError+0x2a>
	__asm volatile
 80091c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091c4:	f383 8811 	msr	BASEPRI, r3
 80091c8:	f3bf 8f6f 	isb	sy
 80091cc:	f3bf 8f4f 	dsb	sy
 80091d0:	60fb      	str	r3, [r7, #12]
}
 80091d2:	bf00      	nop
 80091d4:	e7fe      	b.n	80091d4 <prvTaskExitError+0x28>
	__asm volatile
 80091d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091da:	f383 8811 	msr	BASEPRI, r3
 80091de:	f3bf 8f6f 	isb	sy
 80091e2:	f3bf 8f4f 	dsb	sy
 80091e6:	60bb      	str	r3, [r7, #8]
}
 80091e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80091ea:	bf00      	nop
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0fc      	beq.n	80091ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80091f2:	bf00      	nop
 80091f4:	bf00      	nop
 80091f6:	3714      	adds	r7, #20
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	20000008 	.word	0x20000008
	...

08009210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009210:	4b07      	ldr	r3, [pc, #28]	; (8009230 <pxCurrentTCBConst2>)
 8009212:	6819      	ldr	r1, [r3, #0]
 8009214:	6808      	ldr	r0, [r1, #0]
 8009216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800921a:	f380 8809 	msr	PSP, r0
 800921e:	f3bf 8f6f 	isb	sy
 8009222:	f04f 0000 	mov.w	r0, #0
 8009226:	f380 8811 	msr	BASEPRI, r0
 800922a:	4770      	bx	lr
 800922c:	f3af 8000 	nop.w

08009230 <pxCurrentTCBConst2>:
 8009230:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009234:	bf00      	nop
 8009236:	bf00      	nop

08009238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009238:	4808      	ldr	r0, [pc, #32]	; (800925c <prvPortStartFirstTask+0x24>)
 800923a:	6800      	ldr	r0, [r0, #0]
 800923c:	6800      	ldr	r0, [r0, #0]
 800923e:	f380 8808 	msr	MSP, r0
 8009242:	f04f 0000 	mov.w	r0, #0
 8009246:	f380 8814 	msr	CONTROL, r0
 800924a:	b662      	cpsie	i
 800924c:	b661      	cpsie	f
 800924e:	f3bf 8f4f 	dsb	sy
 8009252:	f3bf 8f6f 	isb	sy
 8009256:	df00      	svc	0
 8009258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800925a:	bf00      	nop
 800925c:	e000ed08 	.word	0xe000ed08

08009260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009266:	4b46      	ldr	r3, [pc, #280]	; (8009380 <xPortStartScheduler+0x120>)
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	4a46      	ldr	r2, [pc, #280]	; (8009384 <xPortStartScheduler+0x124>)
 800926c:	4293      	cmp	r3, r2
 800926e:	d10a      	bne.n	8009286 <xPortStartScheduler+0x26>
	__asm volatile
 8009270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009274:	f383 8811 	msr	BASEPRI, r3
 8009278:	f3bf 8f6f 	isb	sy
 800927c:	f3bf 8f4f 	dsb	sy
 8009280:	613b      	str	r3, [r7, #16]
}
 8009282:	bf00      	nop
 8009284:	e7fe      	b.n	8009284 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009286:	4b3e      	ldr	r3, [pc, #248]	; (8009380 <xPortStartScheduler+0x120>)
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	4a3f      	ldr	r2, [pc, #252]	; (8009388 <xPortStartScheduler+0x128>)
 800928c:	4293      	cmp	r3, r2
 800928e:	d10a      	bne.n	80092a6 <xPortStartScheduler+0x46>
	__asm volatile
 8009290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009294:	f383 8811 	msr	BASEPRI, r3
 8009298:	f3bf 8f6f 	isb	sy
 800929c:	f3bf 8f4f 	dsb	sy
 80092a0:	60fb      	str	r3, [r7, #12]
}
 80092a2:	bf00      	nop
 80092a4:	e7fe      	b.n	80092a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80092a6:	4b39      	ldr	r3, [pc, #228]	; (800938c <xPortStartScheduler+0x12c>)
 80092a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80092aa:	697b      	ldr	r3, [r7, #20]
 80092ac:	781b      	ldrb	r3, [r3, #0]
 80092ae:	b2db      	uxtb	r3, r3
 80092b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80092b2:	697b      	ldr	r3, [r7, #20]
 80092b4:	22ff      	movs	r2, #255	; 0xff
 80092b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	781b      	ldrb	r3, [r3, #0]
 80092bc:	b2db      	uxtb	r3, r3
 80092be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80092c0:	78fb      	ldrb	r3, [r7, #3]
 80092c2:	b2db      	uxtb	r3, r3
 80092c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	4b31      	ldr	r3, [pc, #196]	; (8009390 <xPortStartScheduler+0x130>)
 80092cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80092ce:	4b31      	ldr	r3, [pc, #196]	; (8009394 <xPortStartScheduler+0x134>)
 80092d0:	2207      	movs	r2, #7
 80092d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092d4:	e009      	b.n	80092ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80092d6:	4b2f      	ldr	r3, [pc, #188]	; (8009394 <xPortStartScheduler+0x134>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	3b01      	subs	r3, #1
 80092dc:	4a2d      	ldr	r2, [pc, #180]	; (8009394 <xPortStartScheduler+0x134>)
 80092de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80092e0:	78fb      	ldrb	r3, [r7, #3]
 80092e2:	b2db      	uxtb	r3, r3
 80092e4:	005b      	lsls	r3, r3, #1
 80092e6:	b2db      	uxtb	r3, r3
 80092e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80092ea:	78fb      	ldrb	r3, [r7, #3]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092f2:	2b80      	cmp	r3, #128	; 0x80
 80092f4:	d0ef      	beq.n	80092d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80092f6:	4b27      	ldr	r3, [pc, #156]	; (8009394 <xPortStartScheduler+0x134>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f1c3 0307 	rsb	r3, r3, #7
 80092fe:	2b04      	cmp	r3, #4
 8009300:	d00a      	beq.n	8009318 <xPortStartScheduler+0xb8>
	__asm volatile
 8009302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009306:	f383 8811 	msr	BASEPRI, r3
 800930a:	f3bf 8f6f 	isb	sy
 800930e:	f3bf 8f4f 	dsb	sy
 8009312:	60bb      	str	r3, [r7, #8]
}
 8009314:	bf00      	nop
 8009316:	e7fe      	b.n	8009316 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009318:	4b1e      	ldr	r3, [pc, #120]	; (8009394 <xPortStartScheduler+0x134>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	021b      	lsls	r3, r3, #8
 800931e:	4a1d      	ldr	r2, [pc, #116]	; (8009394 <xPortStartScheduler+0x134>)
 8009320:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009322:	4b1c      	ldr	r3, [pc, #112]	; (8009394 <xPortStartScheduler+0x134>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800932a:	4a1a      	ldr	r2, [pc, #104]	; (8009394 <xPortStartScheduler+0x134>)
 800932c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	b2da      	uxtb	r2, r3
 8009332:	697b      	ldr	r3, [r7, #20]
 8009334:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009336:	4b18      	ldr	r3, [pc, #96]	; (8009398 <xPortStartScheduler+0x138>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	4a17      	ldr	r2, [pc, #92]	; (8009398 <xPortStartScheduler+0x138>)
 800933c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009340:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009342:	4b15      	ldr	r3, [pc, #84]	; (8009398 <xPortStartScheduler+0x138>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a14      	ldr	r2, [pc, #80]	; (8009398 <xPortStartScheduler+0x138>)
 8009348:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800934c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800934e:	f000 f8dd 	bl	800950c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009352:	4b12      	ldr	r3, [pc, #72]	; (800939c <xPortStartScheduler+0x13c>)
 8009354:	2200      	movs	r2, #0
 8009356:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009358:	f000 f8fc 	bl	8009554 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800935c:	4b10      	ldr	r3, [pc, #64]	; (80093a0 <xPortStartScheduler+0x140>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4a0f      	ldr	r2, [pc, #60]	; (80093a0 <xPortStartScheduler+0x140>)
 8009362:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009366:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009368:	f7ff ff66 	bl	8009238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800936c:	f7ff fd34 	bl	8008dd8 <vTaskSwitchContext>
	prvTaskExitError();
 8009370:	f7ff ff1c 	bl	80091ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3718      	adds	r7, #24
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}
 800937e:	bf00      	nop
 8009380:	e000ed00 	.word	0xe000ed00
 8009384:	410fc271 	.word	0x410fc271
 8009388:	410fc270 	.word	0x410fc270
 800938c:	e000e400 	.word	0xe000e400
 8009390:	20000444 	.word	0x20000444
 8009394:	20000448 	.word	0x20000448
 8009398:	e000ed20 	.word	0xe000ed20
 800939c:	20000008 	.word	0x20000008
 80093a0:	e000ef34 	.word	0xe000ef34

080093a4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
	__asm volatile
 80093aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093ae:	f383 8811 	msr	BASEPRI, r3
 80093b2:	f3bf 8f6f 	isb	sy
 80093b6:	f3bf 8f4f 	dsb	sy
 80093ba:	607b      	str	r3, [r7, #4]
}
 80093bc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80093be:	4b0f      	ldr	r3, [pc, #60]	; (80093fc <vPortEnterCritical+0x58>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	3301      	adds	r3, #1
 80093c4:	4a0d      	ldr	r2, [pc, #52]	; (80093fc <vPortEnterCritical+0x58>)
 80093c6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80093c8:	4b0c      	ldr	r3, [pc, #48]	; (80093fc <vPortEnterCritical+0x58>)
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	2b01      	cmp	r3, #1
 80093ce:	d10f      	bne.n	80093f0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80093d0:	4b0b      	ldr	r3, [pc, #44]	; (8009400 <vPortEnterCritical+0x5c>)
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	b2db      	uxtb	r3, r3
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d00a      	beq.n	80093f0 <vPortEnterCritical+0x4c>
	__asm volatile
 80093da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093de:	f383 8811 	msr	BASEPRI, r3
 80093e2:	f3bf 8f6f 	isb	sy
 80093e6:	f3bf 8f4f 	dsb	sy
 80093ea:	603b      	str	r3, [r7, #0]
}
 80093ec:	bf00      	nop
 80093ee:	e7fe      	b.n	80093ee <vPortEnterCritical+0x4a>
	}
}
 80093f0:	bf00      	nop
 80093f2:	370c      	adds	r7, #12
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr
 80093fc:	20000008 	.word	0x20000008
 8009400:	e000ed04 	.word	0xe000ed04

08009404 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009404:	b480      	push	{r7}
 8009406:	b083      	sub	sp, #12
 8009408:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800940a:	4b12      	ldr	r3, [pc, #72]	; (8009454 <vPortExitCritical+0x50>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d10a      	bne.n	8009428 <vPortExitCritical+0x24>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	607b      	str	r3, [r7, #4]
}
 8009424:	bf00      	nop
 8009426:	e7fe      	b.n	8009426 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009428:	4b0a      	ldr	r3, [pc, #40]	; (8009454 <vPortExitCritical+0x50>)
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	3b01      	subs	r3, #1
 800942e:	4a09      	ldr	r2, [pc, #36]	; (8009454 <vPortExitCritical+0x50>)
 8009430:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009432:	4b08      	ldr	r3, [pc, #32]	; (8009454 <vPortExitCritical+0x50>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d105      	bne.n	8009446 <vPortExitCritical+0x42>
 800943a:	2300      	movs	r3, #0
 800943c:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009444:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009446:	bf00      	nop
 8009448:	370c      	adds	r7, #12
 800944a:	46bd      	mov	sp, r7
 800944c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009450:	4770      	bx	lr
 8009452:	bf00      	nop
 8009454:	20000008 	.word	0x20000008
	...

08009460 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009460:	f3ef 8009 	mrs	r0, PSP
 8009464:	f3bf 8f6f 	isb	sy
 8009468:	4b15      	ldr	r3, [pc, #84]	; (80094c0 <pxCurrentTCBConst>)
 800946a:	681a      	ldr	r2, [r3, #0]
 800946c:	f01e 0f10 	tst.w	lr, #16
 8009470:	bf08      	it	eq
 8009472:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009476:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800947a:	6010      	str	r0, [r2, #0]
 800947c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009480:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009484:	f380 8811 	msr	BASEPRI, r0
 8009488:	f3bf 8f4f 	dsb	sy
 800948c:	f3bf 8f6f 	isb	sy
 8009490:	f7ff fca2 	bl	8008dd8 <vTaskSwitchContext>
 8009494:	f04f 0000 	mov.w	r0, #0
 8009498:	f380 8811 	msr	BASEPRI, r0
 800949c:	bc09      	pop	{r0, r3}
 800949e:	6819      	ldr	r1, [r3, #0]
 80094a0:	6808      	ldr	r0, [r1, #0]
 80094a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a6:	f01e 0f10 	tst.w	lr, #16
 80094aa:	bf08      	it	eq
 80094ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80094b0:	f380 8809 	msr	PSP, r0
 80094b4:	f3bf 8f6f 	isb	sy
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	f3af 8000 	nop.w

080094c0 <pxCurrentTCBConst>:
 80094c0:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80094c4:	bf00      	nop
 80094c6:	bf00      	nop

080094c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
	__asm volatile
 80094ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094d2:	f383 8811 	msr	BASEPRI, r3
 80094d6:	f3bf 8f6f 	isb	sy
 80094da:	f3bf 8f4f 	dsb	sy
 80094de:	607b      	str	r3, [r7, #4]
}
 80094e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80094e2:	f7ff fbc1 	bl	8008c68 <xTaskIncrementTick>
 80094e6:	4603      	mov	r3, r0
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80094ec:	4b06      	ldr	r3, [pc, #24]	; (8009508 <xPortSysTickHandler+0x40>)
 80094ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094f2:	601a      	str	r2, [r3, #0]
 80094f4:	2300      	movs	r3, #0
 80094f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	f383 8811 	msr	BASEPRI, r3
}
 80094fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009500:	bf00      	nop
 8009502:	3708      	adds	r7, #8
 8009504:	46bd      	mov	sp, r7
 8009506:	bd80      	pop	{r7, pc}
 8009508:	e000ed04 	.word	0xe000ed04

0800950c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800950c:	b480      	push	{r7}
 800950e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009510:	4b0b      	ldr	r3, [pc, #44]	; (8009540 <vPortSetupTimerInterrupt+0x34>)
 8009512:	2200      	movs	r2, #0
 8009514:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009516:	4b0b      	ldr	r3, [pc, #44]	; (8009544 <vPortSetupTimerInterrupt+0x38>)
 8009518:	2200      	movs	r2, #0
 800951a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800951c:	4b0a      	ldr	r3, [pc, #40]	; (8009548 <vPortSetupTimerInterrupt+0x3c>)
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a0a      	ldr	r2, [pc, #40]	; (800954c <vPortSetupTimerInterrupt+0x40>)
 8009522:	fba2 2303 	umull	r2, r3, r2, r3
 8009526:	099b      	lsrs	r3, r3, #6
 8009528:	4a09      	ldr	r2, [pc, #36]	; (8009550 <vPortSetupTimerInterrupt+0x44>)
 800952a:	3b01      	subs	r3, #1
 800952c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800952e:	4b04      	ldr	r3, [pc, #16]	; (8009540 <vPortSetupTimerInterrupt+0x34>)
 8009530:	2207      	movs	r2, #7
 8009532:	601a      	str	r2, [r3, #0]
}
 8009534:	bf00      	nop
 8009536:	46bd      	mov	sp, r7
 8009538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953c:	4770      	bx	lr
 800953e:	bf00      	nop
 8009540:	e000e010 	.word	0xe000e010
 8009544:	e000e018 	.word	0xe000e018
 8009548:	200002d0 	.word	0x200002d0
 800954c:	10624dd3 	.word	0x10624dd3
 8009550:	e000e014 	.word	0xe000e014

08009554 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009554:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009564 <vPortEnableVFP+0x10>
 8009558:	6801      	ldr	r1, [r0, #0]
 800955a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800955e:	6001      	str	r1, [r0, #0]
 8009560:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009562:	bf00      	nop
 8009564:	e000ed88 	.word	0xe000ed88

08009568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b08a      	sub	sp, #40	; 0x28
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009570:	2300      	movs	r3, #0
 8009572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009574:	f7ff face 	bl	8008b14 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009578:	4b5b      	ldr	r3, [pc, #364]	; (80096e8 <pvPortMalloc+0x180>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009580:	f000 f920 	bl	80097c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009584:	4b59      	ldr	r3, [pc, #356]	; (80096ec <pvPortMalloc+0x184>)
 8009586:	681a      	ldr	r2, [r3, #0]
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	4013      	ands	r3, r2
 800958c:	2b00      	cmp	r3, #0
 800958e:	f040 8093 	bne.w	80096b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2b00      	cmp	r3, #0
 8009596:	d01d      	beq.n	80095d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009598:	2208      	movs	r2, #8
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	4413      	add	r3, r2
 800959e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	f003 0307 	and.w	r3, r3, #7
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d014      	beq.n	80095d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	f023 0307 	bic.w	r3, r3, #7
 80095b0:	3308      	adds	r3, #8
 80095b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	f003 0307 	and.w	r3, r3, #7
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00a      	beq.n	80095d4 <pvPortMalloc+0x6c>
	__asm volatile
 80095be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095c2:	f383 8811 	msr	BASEPRI, r3
 80095c6:	f3bf 8f6f 	isb	sy
 80095ca:	f3bf 8f4f 	dsb	sy
 80095ce:	617b      	str	r3, [r7, #20]
}
 80095d0:	bf00      	nop
 80095d2:	e7fe      	b.n	80095d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d06e      	beq.n	80096b8 <pvPortMalloc+0x150>
 80095da:	4b45      	ldr	r3, [pc, #276]	; (80096f0 <pvPortMalloc+0x188>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	687a      	ldr	r2, [r7, #4]
 80095e0:	429a      	cmp	r2, r3
 80095e2:	d869      	bhi.n	80096b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80095e4:	4b43      	ldr	r3, [pc, #268]	; (80096f4 <pvPortMalloc+0x18c>)
 80095e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80095e8:	4b42      	ldr	r3, [pc, #264]	; (80096f4 <pvPortMalloc+0x18c>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095ee:	e004      	b.n	80095fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80095f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80095f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80095fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095fc:	685b      	ldr	r3, [r3, #4]
 80095fe:	687a      	ldr	r2, [r7, #4]
 8009600:	429a      	cmp	r2, r3
 8009602:	d903      	bls.n	800960c <pvPortMalloc+0xa4>
 8009604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	2b00      	cmp	r3, #0
 800960a:	d1f1      	bne.n	80095f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800960c:	4b36      	ldr	r3, [pc, #216]	; (80096e8 <pvPortMalloc+0x180>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009612:	429a      	cmp	r2, r3
 8009614:	d050      	beq.n	80096b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009616:	6a3b      	ldr	r3, [r7, #32]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	2208      	movs	r2, #8
 800961c:	4413      	add	r3, r2
 800961e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009622:	681a      	ldr	r2, [r3, #0]
 8009624:	6a3b      	ldr	r3, [r7, #32]
 8009626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800962a:	685a      	ldr	r2, [r3, #4]
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	1ad2      	subs	r2, r2, r3
 8009630:	2308      	movs	r3, #8
 8009632:	005b      	lsls	r3, r3, #1
 8009634:	429a      	cmp	r2, r3
 8009636:	d91f      	bls.n	8009678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4413      	add	r3, r2
 800963e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009640:	69bb      	ldr	r3, [r7, #24]
 8009642:	f003 0307 	and.w	r3, r3, #7
 8009646:	2b00      	cmp	r3, #0
 8009648:	d00a      	beq.n	8009660 <pvPortMalloc+0xf8>
	__asm volatile
 800964a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800964e:	f383 8811 	msr	BASEPRI, r3
 8009652:	f3bf 8f6f 	isb	sy
 8009656:	f3bf 8f4f 	dsb	sy
 800965a:	613b      	str	r3, [r7, #16]
}
 800965c:	bf00      	nop
 800965e:	e7fe      	b.n	800965e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	1ad2      	subs	r2, r2, r3
 8009668:	69bb      	ldr	r3, [r7, #24]
 800966a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800966c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009672:	69b8      	ldr	r0, [r7, #24]
 8009674:	f000 f908 	bl	8009888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009678:	4b1d      	ldr	r3, [pc, #116]	; (80096f0 <pvPortMalloc+0x188>)
 800967a:	681a      	ldr	r2, [r3, #0]
 800967c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800967e:	685b      	ldr	r3, [r3, #4]
 8009680:	1ad3      	subs	r3, r2, r3
 8009682:	4a1b      	ldr	r2, [pc, #108]	; (80096f0 <pvPortMalloc+0x188>)
 8009684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009686:	4b1a      	ldr	r3, [pc, #104]	; (80096f0 <pvPortMalloc+0x188>)
 8009688:	681a      	ldr	r2, [r3, #0]
 800968a:	4b1b      	ldr	r3, [pc, #108]	; (80096f8 <pvPortMalloc+0x190>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	429a      	cmp	r2, r3
 8009690:	d203      	bcs.n	800969a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009692:	4b17      	ldr	r3, [pc, #92]	; (80096f0 <pvPortMalloc+0x188>)
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a18      	ldr	r2, [pc, #96]	; (80096f8 <pvPortMalloc+0x190>)
 8009698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800969a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800969c:	685a      	ldr	r2, [r3, #4]
 800969e:	4b13      	ldr	r3, [pc, #76]	; (80096ec <pvPortMalloc+0x184>)
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	431a      	orrs	r2, r3
 80096a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80096a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096aa:	2200      	movs	r2, #0
 80096ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80096ae:	4b13      	ldr	r3, [pc, #76]	; (80096fc <pvPortMalloc+0x194>)
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	3301      	adds	r3, #1
 80096b4:	4a11      	ldr	r2, [pc, #68]	; (80096fc <pvPortMalloc+0x194>)
 80096b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80096b8:	f7ff fa3a 	bl	8008b30 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	f003 0307 	and.w	r3, r3, #7
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d00a      	beq.n	80096dc <pvPortMalloc+0x174>
	__asm volatile
 80096c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096ca:	f383 8811 	msr	BASEPRI, r3
 80096ce:	f3bf 8f6f 	isb	sy
 80096d2:	f3bf 8f4f 	dsb	sy
 80096d6:	60fb      	str	r3, [r7, #12]
}
 80096d8:	bf00      	nop
 80096da:	e7fe      	b.n	80096da <pvPortMalloc+0x172>
	return pvReturn;
 80096dc:	69fb      	ldr	r3, [r7, #28]
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3728      	adds	r7, #40	; 0x28
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}
 80096e6:	bf00      	nop
 80096e8:	2000100c 	.word	0x2000100c
 80096ec:	20001020 	.word	0x20001020
 80096f0:	20001010 	.word	0x20001010
 80096f4:	20001004 	.word	0x20001004
 80096f8:	20001014 	.word	0x20001014
 80096fc:	20001018 	.word	0x20001018

08009700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b086      	sub	sp, #24
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d04d      	beq.n	80097ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009712:	2308      	movs	r3, #8
 8009714:	425b      	negs	r3, r3
 8009716:	697a      	ldr	r2, [r7, #20]
 8009718:	4413      	add	r3, r2
 800971a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009720:	693b      	ldr	r3, [r7, #16]
 8009722:	685a      	ldr	r2, [r3, #4]
 8009724:	4b24      	ldr	r3, [pc, #144]	; (80097b8 <vPortFree+0xb8>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4013      	ands	r3, r2
 800972a:	2b00      	cmp	r3, #0
 800972c:	d10a      	bne.n	8009744 <vPortFree+0x44>
	__asm volatile
 800972e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009732:	f383 8811 	msr	BASEPRI, r3
 8009736:	f3bf 8f6f 	isb	sy
 800973a:	f3bf 8f4f 	dsb	sy
 800973e:	60fb      	str	r3, [r7, #12]
}
 8009740:	bf00      	nop
 8009742:	e7fe      	b.n	8009742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2b00      	cmp	r3, #0
 800974a:	d00a      	beq.n	8009762 <vPortFree+0x62>
	__asm volatile
 800974c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009750:	f383 8811 	msr	BASEPRI, r3
 8009754:	f3bf 8f6f 	isb	sy
 8009758:	f3bf 8f4f 	dsb	sy
 800975c:	60bb      	str	r3, [r7, #8]
}
 800975e:	bf00      	nop
 8009760:	e7fe      	b.n	8009760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	685a      	ldr	r2, [r3, #4]
 8009766:	4b14      	ldr	r3, [pc, #80]	; (80097b8 <vPortFree+0xb8>)
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	4013      	ands	r3, r2
 800976c:	2b00      	cmp	r3, #0
 800976e:	d01e      	beq.n	80097ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d11a      	bne.n	80097ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	4b0e      	ldr	r3, [pc, #56]	; (80097b8 <vPortFree+0xb8>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	43db      	mvns	r3, r3
 8009782:	401a      	ands	r2, r3
 8009784:	693b      	ldr	r3, [r7, #16]
 8009786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009788:	f7ff f9c4 	bl	8008b14 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800978c:	693b      	ldr	r3, [r7, #16]
 800978e:	685a      	ldr	r2, [r3, #4]
 8009790:	4b0a      	ldr	r3, [pc, #40]	; (80097bc <vPortFree+0xbc>)
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4413      	add	r3, r2
 8009796:	4a09      	ldr	r2, [pc, #36]	; (80097bc <vPortFree+0xbc>)
 8009798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800979a:	6938      	ldr	r0, [r7, #16]
 800979c:	f000 f874 	bl	8009888 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80097a0:	4b07      	ldr	r3, [pc, #28]	; (80097c0 <vPortFree+0xc0>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3301      	adds	r3, #1
 80097a6:	4a06      	ldr	r2, [pc, #24]	; (80097c0 <vPortFree+0xc0>)
 80097a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80097aa:	f7ff f9c1 	bl	8008b30 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80097ae:	bf00      	nop
 80097b0:	3718      	adds	r7, #24
 80097b2:	46bd      	mov	sp, r7
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	bf00      	nop
 80097b8:	20001020 	.word	0x20001020
 80097bc:	20001010 	.word	0x20001010
 80097c0:	2000101c 	.word	0x2000101c

080097c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80097c4:	b480      	push	{r7}
 80097c6:	b085      	sub	sp, #20
 80097c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80097ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80097ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80097d0:	4b27      	ldr	r3, [pc, #156]	; (8009870 <prvHeapInit+0xac>)
 80097d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	f003 0307 	and.w	r3, r3, #7
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d00c      	beq.n	80097f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	3307      	adds	r3, #7
 80097e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	f023 0307 	bic.w	r3, r3, #7
 80097ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80097ec:	68ba      	ldr	r2, [r7, #8]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	1ad3      	subs	r3, r2, r3
 80097f2:	4a1f      	ldr	r2, [pc, #124]	; (8009870 <prvHeapInit+0xac>)
 80097f4:	4413      	add	r3, r2
 80097f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80097fc:	4a1d      	ldr	r2, [pc, #116]	; (8009874 <prvHeapInit+0xb0>)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009802:	4b1c      	ldr	r3, [pc, #112]	; (8009874 <prvHeapInit+0xb0>)
 8009804:	2200      	movs	r2, #0
 8009806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	68ba      	ldr	r2, [r7, #8]
 800980c:	4413      	add	r3, r2
 800980e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009810:	2208      	movs	r2, #8
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	1a9b      	subs	r3, r3, r2
 8009816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f023 0307 	bic.w	r3, r3, #7
 800981e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	4a15      	ldr	r2, [pc, #84]	; (8009878 <prvHeapInit+0xb4>)
 8009824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009826:	4b14      	ldr	r3, [pc, #80]	; (8009878 <prvHeapInit+0xb4>)
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	2200      	movs	r2, #0
 800982c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800982e:	4b12      	ldr	r3, [pc, #72]	; (8009878 <prvHeapInit+0xb4>)
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2200      	movs	r2, #0
 8009834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	68fa      	ldr	r2, [r7, #12]
 800983e:	1ad2      	subs	r2, r2, r3
 8009840:	683b      	ldr	r3, [r7, #0]
 8009842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009844:	4b0c      	ldr	r3, [pc, #48]	; (8009878 <prvHeapInit+0xb4>)
 8009846:	681a      	ldr	r2, [r3, #0]
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800984c:	683b      	ldr	r3, [r7, #0]
 800984e:	685b      	ldr	r3, [r3, #4]
 8009850:	4a0a      	ldr	r2, [pc, #40]	; (800987c <prvHeapInit+0xb8>)
 8009852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	4a09      	ldr	r2, [pc, #36]	; (8009880 <prvHeapInit+0xbc>)
 800985a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800985c:	4b09      	ldr	r3, [pc, #36]	; (8009884 <prvHeapInit+0xc0>)
 800985e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009862:	601a      	str	r2, [r3, #0]
}
 8009864:	bf00      	nop
 8009866:	3714      	adds	r7, #20
 8009868:	46bd      	mov	sp, r7
 800986a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986e:	4770      	bx	lr
 8009870:	2000044c 	.word	0x2000044c
 8009874:	20001004 	.word	0x20001004
 8009878:	2000100c 	.word	0x2000100c
 800987c:	20001014 	.word	0x20001014
 8009880:	20001010 	.word	0x20001010
 8009884:	20001020 	.word	0x20001020

08009888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009888:	b480      	push	{r7}
 800988a:	b085      	sub	sp, #20
 800988c:	af00      	add	r7, sp, #0
 800988e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009890:	4b28      	ldr	r3, [pc, #160]	; (8009934 <prvInsertBlockIntoFreeList+0xac>)
 8009892:	60fb      	str	r3, [r7, #12]
 8009894:	e002      	b.n	800989c <prvInsertBlockIntoFreeList+0x14>
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	60fb      	str	r3, [r7, #12]
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	687a      	ldr	r2, [r7, #4]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d8f7      	bhi.n	8009896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	685b      	ldr	r3, [r3, #4]
 80098ae:	68ba      	ldr	r2, [r7, #8]
 80098b0:	4413      	add	r3, r2
 80098b2:	687a      	ldr	r2, [r7, #4]
 80098b4:	429a      	cmp	r2, r3
 80098b6:	d108      	bne.n	80098ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	685a      	ldr	r2, [r3, #4]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	685b      	ldr	r3, [r3, #4]
 80098c0:	441a      	add	r2, r3
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	685b      	ldr	r3, [r3, #4]
 80098d2:	68ba      	ldr	r2, [r7, #8]
 80098d4:	441a      	add	r2, r3
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d118      	bne.n	8009910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	4b15      	ldr	r3, [pc, #84]	; (8009938 <prvInsertBlockIntoFreeList+0xb0>)
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	429a      	cmp	r2, r3
 80098e8:	d00d      	beq.n	8009906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	685a      	ldr	r2, [r3, #4]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	685b      	ldr	r3, [r3, #4]
 80098f4:	441a      	add	r2, r3
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	e008      	b.n	8009918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009906:	4b0c      	ldr	r3, [pc, #48]	; (8009938 <prvInsertBlockIntoFreeList+0xb0>)
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	601a      	str	r2, [r3, #0]
 800990e:	e003      	b.n	8009918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	681a      	ldr	r2, [r3, #0]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009918:	68fa      	ldr	r2, [r7, #12]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	429a      	cmp	r2, r3
 800991e:	d002      	beq.n	8009926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	687a      	ldr	r2, [r7, #4]
 8009924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009926:	bf00      	nop
 8009928:	3714      	adds	r7, #20
 800992a:	46bd      	mov	sp, r7
 800992c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009930:	4770      	bx	lr
 8009932:	bf00      	nop
 8009934:	20001004 	.word	0x20001004
 8009938:	2000100c 	.word	0x2000100c

0800993c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800993c:	b480      	push	{r7}
 800993e:	b085      	sub	sp, #20
 8009940:	af00      	add	r7, sp, #0
 8009942:	60f8      	str	r0, [r7, #12]
 8009944:	60b9      	str	r1, [r7, #8]
 8009946:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	4a07      	ldr	r2, [pc, #28]	; (8009968 <vApplicationGetIdleTaskMemory+0x2c>)
 800994c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	4a06      	ldr	r2, [pc, #24]	; (800996c <vApplicationGetIdleTaskMemory+0x30>)
 8009952:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2280      	movs	r2, #128	; 0x80
 8009958:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800995a:	bf00      	nop
 800995c:	3714      	adds	r7, #20
 800995e:	46bd      	mov	sp, r7
 8009960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009964:	4770      	bx	lr
 8009966:	bf00      	nop
 8009968:	20001024 	.word	0x20001024
 800996c:	20001078 	.word	0x20001078

08009970 <LSM6DSL_AccInit>:
/**
  * @brief  Set LSM6DSL Accelerometer Initialization.
  * @param  InitStruct: Init parameters
  */
void LSM6DSL_AccInit(uint16_t InitStruct)
{  
 8009970:	b580      	push	{r7, lr}
 8009972:	b084      	sub	sp, #16
 8009974:	af00      	add	r7, sp, #0
 8009976:	4603      	mov	r3, r0
 8009978:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 800997a:	2300      	movs	r3, #0
 800997c:	73fb      	strb	r3, [r7, #15]
  uint8_t tmp;

  /* Read CTRL1_XL */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 800997e:	2110      	movs	r1, #16
 8009980:	20d4      	movs	r0, #212	; 0xd4
 8009982:	f001 fc5d 	bl	800b240 <SENSOR_IO_Read>
 8009986:	4603      	mov	r3, r0
 8009988:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL1_XL register: FS and Data Rate */
  ctrl = (uint8_t) InitStruct;
 800998a:	88fb      	ldrh	r3, [r7, #6]
 800998c:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0xFC);
 800998e:	7bbb      	ldrb	r3, [r7, #14]
 8009990:	f003 0303 	and.w	r3, r3, #3
 8009994:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl;
 8009996:	7bba      	ldrb	r2, [r7, #14]
 8009998:	7bfb      	ldrb	r3, [r7, #15]
 800999a:	4313      	orrs	r3, r2
 800999c:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, tmp);
 800999e:	7bbb      	ldrb	r3, [r7, #14]
 80099a0:	461a      	mov	r2, r3
 80099a2:	2110      	movs	r1, #16
 80099a4:	20d4      	movs	r0, #212	; 0xd4
 80099a6:	f001 fc31 	bl	800b20c <SENSOR_IO_Write>

  /* Read CTRL3_C */
  tmp = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C);
 80099aa:	2112      	movs	r1, #18
 80099ac:	20d4      	movs	r0, #212	; 0xd4
 80099ae:	f001 fc47 	bl	800b240 <SENSOR_IO_Read>
 80099b2:	4603      	mov	r3, r0
 80099b4:	73bb      	strb	r3, [r7, #14]

  /* Write value to ACC MEMS CTRL3_C register: BDU and Auto-increment */
  ctrl = ((uint8_t) (InitStruct >> 8));
 80099b6:	88fb      	ldrh	r3, [r7, #6]
 80099b8:	0a1b      	lsrs	r3, r3, #8
 80099ba:	b29b      	uxth	r3, r3
 80099bc:	73fb      	strb	r3, [r7, #15]
  tmp &= ~(0x44);
 80099be:	7bbb      	ldrb	r3, [r7, #14]
 80099c0:	f023 0344 	bic.w	r3, r3, #68	; 0x44
 80099c4:	73bb      	strb	r3, [r7, #14]
  tmp |= ctrl; 
 80099c6:	7bba      	ldrb	r2, [r7, #14]
 80099c8:	7bfb      	ldrb	r3, [r7, #15]
 80099ca:	4313      	orrs	r3, r2
 80099cc:	73bb      	strb	r3, [r7, #14]
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL3_C, tmp);
 80099ce:	7bbb      	ldrb	r3, [r7, #14]
 80099d0:	461a      	mov	r2, r3
 80099d2:	2112      	movs	r1, #18
 80099d4:	20d4      	movs	r0, #212	; 0xd4
 80099d6:	f001 fc19 	bl	800b20c <SENSOR_IO_Write>
}
 80099da:	bf00      	nop
 80099dc:	3710      	adds	r7, #16
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <LSM6DSL_AccDeInit>:

/**
  * @brief  LSM6DSL Accelerometer De-initialization.
  */
void LSM6DSL_AccDeInit(void)
{
 80099e2:	b580      	push	{r7, lr}
 80099e4:	b082      	sub	sp, #8
 80099e6:	af00      	add	r7, sp, #0
  uint8_t ctrl = 0x00;
 80099e8:	2300      	movs	r3, #0
 80099ea:	71fb      	strb	r3, [r7, #7]
  
  /* Read control register 1 value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 80099ec:	2110      	movs	r1, #16
 80099ee:	20d4      	movs	r0, #212	; 0xd4
 80099f0:	f001 fc26 	bl	800b240 <SENSOR_IO_Read>
 80099f4:	4603      	mov	r3, r0
 80099f6:	71fb      	strb	r3, [r7, #7]

  /* Clear ODR bits */
  ctrl &= ~(LSM6DSL_ODR_BITPOSITION);
 80099f8:	79fb      	ldrb	r3, [r7, #7]
 80099fa:	f003 030f 	and.w	r3, r3, #15
 80099fe:	71fb      	strb	r3, [r7, #7]

  /* Set Power down */
  ctrl |= LSM6DSL_ODR_POWER_DOWN;
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL, ctrl);
 8009a00:	79fb      	ldrb	r3, [r7, #7]
 8009a02:	461a      	mov	r2, r3
 8009a04:	2110      	movs	r1, #16
 8009a06:	20d4      	movs	r0, #212	; 0xd4
 8009a08:	f001 fc00 	bl	800b20c <SENSOR_IO_Write>
}
 8009a0c:	bf00      	nop
 8009a0e:	3708      	adds	r7, #8
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <LSM6DSL_AccReadID>:
/**
  * @brief  Read LSM6DSL ID.
  * @retval ID 
  */
uint8_t LSM6DSL_AccReadID(void)
{  
 8009a14:	b580      	push	{r7, lr}
 8009a16:	af00      	add	r7, sp, #0
  /* IO interface initialization */
  SENSOR_IO_Init();
 8009a18:	f001 fbee 	bl	800b1f8 <SENSOR_IO_Init>
  /* Read value at Who am I register address */
  return (SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_WHO_AM_I_REG));
 8009a1c:	210f      	movs	r1, #15
 8009a1e:	20d4      	movs	r0, #212	; 0xd4
 8009a20:	f001 fc0e 	bl	800b240 <SENSOR_IO_Read>
 8009a24:	4603      	mov	r3, r0
}
 8009a26:	4618      	mov	r0, r3
 8009a28:	bd80      	pop	{r7, pc}

08009a2a <LSM6DSL_AccLowPower>:
/**
  * @brief  Set/Unset Accelerometer in low power mode.
  * @param  status 0 means disable Low Power Mode, otherwise Low Power Mode is enabled
  */
void LSM6DSL_AccLowPower(uint16_t status)
{
 8009a2a:	b580      	push	{r7, lr}
 8009a2c:	b084      	sub	sp, #16
 8009a2e:	af00      	add	r7, sp, #0
 8009a30:	4603      	mov	r3, r0
 8009a32:	80fb      	strh	r3, [r7, #6]
  uint8_t ctrl = 0x00;
 8009a34:	2300      	movs	r3, #0
 8009a36:	73fb      	strb	r3, [r7, #15]
  
  /* Read CTRL6_C value */
  ctrl = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C);
 8009a38:	2115      	movs	r1, #21
 8009a3a:	20d4      	movs	r0, #212	; 0xd4
 8009a3c:	f001 fc00 	bl	800b240 <SENSOR_IO_Read>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73fb      	strb	r3, [r7, #15]

  /* Clear Low Power Mode bit */
  ctrl &= ~(0x10);
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	f023 0310 	bic.w	r3, r3, #16
 8009a4a:	73fb      	strb	r3, [r7, #15]

  /* Set Low Power Mode */
  if(status)
 8009a4c:	88fb      	ldrh	r3, [r7, #6]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d003      	beq.n	8009a5a <LSM6DSL_AccLowPower+0x30>
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_ENABLED;
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	f043 0310 	orr.w	r3, r3, #16
 8009a58:	73fb      	strb	r3, [r7, #15]
  {
    ctrl |= LSM6DSL_ACC_GYRO_LP_XL_DISABLED;
  }
  
  /* write back control register */
  SENSOR_IO_Write(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL6_C, ctrl);
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	461a      	mov	r2, r3
 8009a5e:	2115      	movs	r1, #21
 8009a60:	20d4      	movs	r0, #212	; 0xd4
 8009a62:	f001 fbd3 	bl	800b20c <SENSOR_IO_Write>
}
 8009a66:	bf00      	nop
 8009a68:	3710      	adds	r7, #16
 8009a6a:	46bd      	mov	sp, r7
 8009a6c:	bd80      	pop	{r7, pc}
	...

08009a70 <LSM6DSL_AccReadXYZ>:
/**
  * @brief  Read X, Y & Z Acceleration values 
  * @param  pData: Data out pointer
  */
void LSM6DSL_AccReadXYZ(int16_t* pData)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b088      	sub	sp, #32
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
  int16_t pnRawData[3];
  uint8_t ctrlx= 0;
 8009a78:	2300      	movs	r3, #0
 8009a7a:	75fb      	strb	r3, [r7, #23]
  uint8_t buffer[6];
  uint8_t i = 0;
 8009a7c:	2300      	movs	r3, #0
 8009a7e:	77fb      	strb	r3, [r7, #31]
  float sensitivity = 0;
 8009a80:	f04f 0300 	mov.w	r3, #0
 8009a84:	61bb      	str	r3, [r7, #24]
  
  /* Read the acceleration control register content */
  ctrlx = SENSOR_IO_Read(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_CTRL1_XL);
 8009a86:	2110      	movs	r1, #16
 8009a88:	20d4      	movs	r0, #212	; 0xd4
 8009a8a:	f001 fbd9 	bl	800b240 <SENSOR_IO_Read>
 8009a8e:	4603      	mov	r3, r0
 8009a90:	75fb      	strb	r3, [r7, #23]
  
  /* Read output register X, Y & Z acceleration */
  SENSOR_IO_ReadMultiple(LSM6DSL_ACC_GYRO_I2C_ADDRESS_LOW, LSM6DSL_ACC_GYRO_OUTX_L_XL, buffer, 6);
 8009a92:	f107 0208 	add.w	r2, r7, #8
 8009a96:	2306      	movs	r3, #6
 8009a98:	2128      	movs	r1, #40	; 0x28
 8009a9a:	20d4      	movs	r0, #212	; 0xd4
 8009a9c:	f001 fbee 	bl	800b27c <SENSOR_IO_ReadMultiple>
  
  for(i=0; i<3; i++)
 8009aa0:	2300      	movs	r3, #0
 8009aa2:	77fb      	strb	r3, [r7, #31]
 8009aa4:	e01c      	b.n	8009ae0 <LSM6DSL_AccReadXYZ+0x70>
  {
    pnRawData[i]=((((uint16_t)buffer[2*i+1]) << 8) + (uint16_t)buffer[2*i]);
 8009aa6:	7ffb      	ldrb	r3, [r7, #31]
 8009aa8:	005b      	lsls	r3, r3, #1
 8009aaa:	3301      	adds	r3, #1
 8009aac:	3320      	adds	r3, #32
 8009aae:	443b      	add	r3, r7
 8009ab0:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009ab4:	b29b      	uxth	r3, r3
 8009ab6:	021b      	lsls	r3, r3, #8
 8009ab8:	b29a      	uxth	r2, r3
 8009aba:	7ffb      	ldrb	r3, [r7, #31]
 8009abc:	005b      	lsls	r3, r3, #1
 8009abe:	3320      	adds	r3, #32
 8009ac0:	443b      	add	r3, r7
 8009ac2:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	4413      	add	r3, r2
 8009aca:	b29a      	uxth	r2, r3
 8009acc:	7ffb      	ldrb	r3, [r7, #31]
 8009ace:	b212      	sxth	r2, r2
 8009ad0:	005b      	lsls	r3, r3, #1
 8009ad2:	3320      	adds	r3, #32
 8009ad4:	443b      	add	r3, r7
 8009ad6:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(i=0; i<3; i++)
 8009ada:	7ffb      	ldrb	r3, [r7, #31]
 8009adc:	3301      	adds	r3, #1
 8009ade:	77fb      	strb	r3, [r7, #31]
 8009ae0:	7ffb      	ldrb	r3, [r7, #31]
 8009ae2:	2b02      	cmp	r3, #2
 8009ae4:	d9df      	bls.n	8009aa6 <LSM6DSL_AccReadXYZ+0x36>
  }
  
  /* Normal mode */
  /* Switch the sensitivity value set in the CRTL1_XL */
  switch(ctrlx & 0x0C)
 8009ae6:	7dfb      	ldrb	r3, [r7, #23]
 8009ae8:	f003 030c 	and.w	r3, r3, #12
 8009aec:	2b0c      	cmp	r3, #12
 8009aee:	d829      	bhi.n	8009b44 <LSM6DSL_AccReadXYZ+0xd4>
 8009af0:	a201      	add	r2, pc, #4	; (adr r2, 8009af8 <LSM6DSL_AccReadXYZ+0x88>)
 8009af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009af6:	bf00      	nop
 8009af8:	08009b2d 	.word	0x08009b2d
 8009afc:	08009b45 	.word	0x08009b45
 8009b00:	08009b45 	.word	0x08009b45
 8009b04:	08009b45 	.word	0x08009b45
 8009b08:	08009b3f 	.word	0x08009b3f
 8009b0c:	08009b45 	.word	0x08009b45
 8009b10:	08009b45 	.word	0x08009b45
 8009b14:	08009b45 	.word	0x08009b45
 8009b18:	08009b33 	.word	0x08009b33
 8009b1c:	08009b45 	.word	0x08009b45
 8009b20:	08009b45 	.word	0x08009b45
 8009b24:	08009b45 	.word	0x08009b45
 8009b28:	08009b39 	.word	0x08009b39
  {
  case LSM6DSL_ACC_FULLSCALE_2G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_2G;
 8009b2c:	4b18      	ldr	r3, [pc, #96]	; (8009b90 <LSM6DSL_AccReadXYZ+0x120>)
 8009b2e:	61bb      	str	r3, [r7, #24]
    break;
 8009b30:	e008      	b.n	8009b44 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_4G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_4G;
 8009b32:	4b18      	ldr	r3, [pc, #96]	; (8009b94 <LSM6DSL_AccReadXYZ+0x124>)
 8009b34:	61bb      	str	r3, [r7, #24]
    break;
 8009b36:	e005      	b.n	8009b44 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_8G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_8G;
 8009b38:	4b17      	ldr	r3, [pc, #92]	; (8009b98 <LSM6DSL_AccReadXYZ+0x128>)
 8009b3a:	61bb      	str	r3, [r7, #24]
    break;
 8009b3c:	e002      	b.n	8009b44 <LSM6DSL_AccReadXYZ+0xd4>
  case LSM6DSL_ACC_FULLSCALE_16G:
    sensitivity = LSM6DSL_ACC_SENSITIVITY_16G;
 8009b3e:	4b17      	ldr	r3, [pc, #92]	; (8009b9c <LSM6DSL_AccReadXYZ+0x12c>)
 8009b40:	61bb      	str	r3, [r7, #24]
    break;    
 8009b42:	bf00      	nop
  }
  
  /* Obtain the mg value for the three axis */
  for(i=0; i<3; i++)
 8009b44:	2300      	movs	r3, #0
 8009b46:	77fb      	strb	r3, [r7, #31]
 8009b48:	e01a      	b.n	8009b80 <LSM6DSL_AccReadXYZ+0x110>
  {
    pData[i]=( int16_t )(pnRawData[i] * sensitivity);
 8009b4a:	7ffb      	ldrb	r3, [r7, #31]
 8009b4c:	005b      	lsls	r3, r3, #1
 8009b4e:	3320      	adds	r3, #32
 8009b50:	443b      	add	r3, r7
 8009b52:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8009b56:	ee07 3a90 	vmov	s15, r3
 8009b5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8009b5e:	edd7 7a06 	vldr	s15, [r7, #24]
 8009b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009b66:	7ffb      	ldrb	r3, [r7, #31]
 8009b68:	005b      	lsls	r3, r3, #1
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009b72:	ee17 2a90 	vmov	r2, s15
 8009b76:	b212      	sxth	r2, r2
 8009b78:	801a      	strh	r2, [r3, #0]
  for(i=0; i<3; i++)
 8009b7a:	7ffb      	ldrb	r3, [r7, #31]
 8009b7c:	3301      	adds	r3, #1
 8009b7e:	77fb      	strb	r3, [r7, #31]
 8009b80:	7ffb      	ldrb	r3, [r7, #31]
 8009b82:	2b02      	cmp	r3, #2
 8009b84:	d9e1      	bls.n	8009b4a <LSM6DSL_AccReadXYZ+0xda>
  }
}
 8009b86:	bf00      	nop
 8009b88:	bf00      	nop
 8009b8a:	3720      	adds	r7, #32
 8009b8c:	46bd      	mov	sp, r7
 8009b8e:	bd80      	pop	{r7, pc}
 8009b90:	3d79db23 	.word	0x3d79db23
 8009b94:	3df9db23 	.word	0x3df9db23
 8009b98:	3e79db23 	.word	0x3e79db23
 8009b9c:	3ef9db23 	.word	0x3ef9db23

08009ba0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8009ba0:	b5b0      	push	{r4, r5, r7, lr}
 8009ba2:	b098      	sub	sp, #96	; 0x60
 8009ba4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8009ba6:	f7f6 fcad 	bl	8000504 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8009baa:	f000 f8d5 	bl	8009d58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8009bae:	f000 fb21 	bl	800a1f4 <MX_GPIO_Init>
  MX_DMA_Init();
 8009bb2:	f000 faed 	bl	800a190 <MX_DMA_Init>
  MX_DAC1_Init();
 8009bb6:	f000 f921 	bl	8009dfc <MX_DAC1_Init>
  MX_TIM2_Init();
 8009bba:	f000 fa4f 	bl	800a05c <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8009bbe:	f000 f951 	bl	8009e64 <MX_DFSDM1_Init>
  MX_OCTOSPI1_Init();
 8009bc2:	f000 f9f5 	bl	8009fb0 <MX_OCTOSPI1_Init>
  MX_I2C2_Init();
 8009bc6:	f000 f9b3 	bl	8009f30 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8009bca:	f000 fa95 	bl	800a0f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  BSP_ACCELERO_Init();
 8009bce:	f001 fb73 	bl	800b2b8 <BSP_ACCELERO_Init>
  BSP_QSPI_Init();
 8009bd2:	f001 fbc7 	bl	800b364 <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8009bd6:	4851      	ldr	r0, [pc, #324]	; (8009d1c <main+0x17c>)
 8009bd8:	f7fb ff5e 	bl	8005a98 <HAL_TIM_Base_Start_IT>




  HAL_UART_Transmit(&huart1, clearCommand, sizeof(clearCommand), 100);//clear console
 8009bdc:	2364      	movs	r3, #100	; 0x64
 8009bde:	2205      	movs	r2, #5
 8009be0:	494f      	ldr	r1, [pc, #316]	; (8009d20 <main+0x180>)
 8009be2:	4850      	ldr	r0, [pc, #320]	; (8009d24 <main+0x184>)
 8009be4:	f7fc fc0c 	bl	8006400 <HAL_UART_Transmit>

  HAL_UART_Transmit(&huart1, startMessage, sizeof(startMessage), 100);// sent start message
 8009be8:	2364      	movs	r3, #100	; 0x64
 8009bea:	2245      	movs	r2, #69	; 0x45
 8009bec:	494e      	ldr	r1, [pc, #312]	; (8009d28 <main+0x188>)
 8009bee:	484d      	ldr	r0, [pc, #308]	; (8009d24 <main+0x184>)
 8009bf0:	f7fc fc06 	bl	8006400 <HAL_UART_Transmit>

  HAL_UART_Receive_IT(&huart1, start_yn, CHOICE);// get user 1 or 0
 8009bf4:	2202      	movs	r2, #2
 8009bf6:	494d      	ldr	r1, [pc, #308]	; (8009d2c <main+0x18c>)
 8009bf8:	484a      	ldr	r0, [pc, #296]	; (8009d24 <main+0x184>)
 8009bfa:	f7fc fc99 	bl	8006530 <HAL_UART_Receive_IT>

  if(actualRecorder && digitGame) { // 3 blocks per sound (digits OR seqDirections/speed)
 8009bfe:	4b4c      	ldr	r3, [pc, #304]	; (8009d30 <main+0x190>)
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d020      	beq.n	8009c48 <main+0xa8>
 8009c06:	4b4b      	ldr	r3, [pc, #300]	; (8009d34 <main+0x194>)
 8009c08:	781b      	ldrb	r3, [r3, #0]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d01c      	beq.n	8009c48 <main+0xa8>
	  //10 digits * 3 = 30 blocks to erase
	  //2 seqDirections (vertical/horizontal) + 2 speeds (fast/slow) = 4 *3 = 12
	  addr = 0x000000;
 8009c0e:	4b4a      	ldr	r3, [pc, #296]	; (8009d38 <main+0x198>)
 8009c10:	2200      	movs	r2, #0
 8009c12:	601a      	str	r2, [r3, #0]
	  for(int i = 1; i < 30; i++) {
 8009c14:	2301      	movs	r3, #1
 8009c16:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c18:	e012      	b.n	8009c40 <main+0xa0>
		  if(BSP_QSPI_Erase_Block((uint32_t) addr) != QSPI_OK)
 8009c1a:	4b47      	ldr	r3, [pc, #284]	; (8009d38 <main+0x198>)
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	4618      	mov	r0, r3
 8009c20:	f001 fcf6 	bl	800b610 <BSP_QSPI_Erase_Block>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d001      	beq.n	8009c2e <main+0x8e>
		  	Error_Handler();
 8009c2a:	f001 f9ed 	bl	800b008 <Error_Handler>
		  addr+= 0x010000;
 8009c2e:	4b42      	ldr	r3, [pc, #264]	; (8009d38 <main+0x198>)
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009c36:	4a40      	ldr	r2, [pc, #256]	; (8009d38 <main+0x198>)
 8009c38:	6013      	str	r3, [r2, #0]
	  for(int i = 1; i < 30; i++) {
 8009c3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c42:	2b1d      	cmp	r3, #29
 8009c44:	dde9      	ble.n	8009c1a <main+0x7a>
 8009c46:	e024      	b.n	8009c92 <main+0xf2>
	  }
  } else if( actualRecorder && directionGame) {
 8009c48:	4b39      	ldr	r3, [pc, #228]	; (8009d30 <main+0x190>)
 8009c4a:	781b      	ldrb	r3, [r3, #0]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d020      	beq.n	8009c92 <main+0xf2>
 8009c50:	4b3a      	ldr	r3, [pc, #232]	; (8009d3c <main+0x19c>)
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	2b00      	cmp	r3, #0
 8009c56:	d01c      	beq.n	8009c92 <main+0xf2>
	  addr = 0x1E0000;
 8009c58:	4b37      	ldr	r3, [pc, #220]	; (8009d38 <main+0x198>)
 8009c5a:	f44f 12f0 	mov.w	r2, #1966080	; 0x1e0000
 8009c5e:	601a      	str	r2, [r3, #0]
	  for(int i = 1; i < 12; i++) {
 8009c60:	2301      	movs	r3, #1
 8009c62:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c64:	e012      	b.n	8009c8c <main+0xec>
		  if(BSP_QSPI_Erase_Block((uint32_t) addr) != QSPI_OK)
 8009c66:	4b34      	ldr	r3, [pc, #208]	; (8009d38 <main+0x198>)
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	f001 fcd0 	bl	800b610 <BSP_QSPI_Erase_Block>
 8009c70:	4603      	mov	r3, r0
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d001      	beq.n	8009c7a <main+0xda>
		  	Error_Handler();
 8009c76:	f001 f9c7 	bl	800b008 <Error_Handler>
		  addr += 0x010000;
 8009c7a:	4b2f      	ldr	r3, [pc, #188]	; (8009d38 <main+0x198>)
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8009c82:	4a2d      	ldr	r2, [pc, #180]	; (8009d38 <main+0x198>)
 8009c84:	6013      	str	r3, [r2, #0]
	  for(int i = 1; i < 12; i++) {
 8009c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c88:	3301      	adds	r3, #1
 8009c8a:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009c8e:	2b0b      	cmp	r3, #11
 8009c90:	dde9      	ble.n	8009c66 <main+0xc6>
	  }
  }
  HAL_SuspendTick();
 8009c92:	f7f6 fccf 	bl	8000634 <HAL_SuspendTick>
  HAL_PWR_EnableSleepOnExit();
 8009c96:	f7fa f99b 	bl	8003fd0 <HAL_PWR_EnableSleepOnExit>
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8009c9a:	2101      	movs	r1, #1
 8009c9c:	2000      	movs	r0, #0
 8009c9e:	f7fa f963 	bl	8003f68 <HAL_PWR_EnterSLEEPMode>
  HAL_ResumeTick();
 8009ca2:	f7f6 fcd7 	bl	8000654 <HAL_ResumeTick>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of GetSpeedAndDir */
  osThreadDef(GetSpeedAndDir, StartGetSpeedAndDir, osPriorityNormal, 0, 128);
 8009ca6:	4b26      	ldr	r3, [pc, #152]	; (8009d40 <main+0x1a0>)
 8009ca8:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8009cac:	461d      	mov	r5, r3
 8009cae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cb2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009cb6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  GetSpeedAndDirHandle = osThreadCreate(osThread(GetSpeedAndDir), NULL);
 8009cba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8009cbe:	2100      	movs	r1, #0
 8009cc0:	4618      	mov	r0, r3
 8009cc2:	f7fe fbec 	bl	800849e <osThreadCreate>
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	4a1e      	ldr	r2, [pc, #120]	; (8009d44 <main+0x1a4>)
 8009cca:	6013      	str	r3, [r2, #0]

  /* definition and creation of AcceleroSensor */
  osThreadDef(AcceleroSensor, StartAcceleroSensor, osPriorityIdle, 0, 128);
 8009ccc:	4b1e      	ldr	r3, [pc, #120]	; (8009d48 <main+0x1a8>)
 8009cce:	f107 0420 	add.w	r4, r7, #32
 8009cd2:	461d      	mov	r5, r3
 8009cd4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cd8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009cdc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  AcceleroSensorHandle = osThreadCreate(osThread(AcceleroSensor), NULL);
 8009ce0:	f107 0320 	add.w	r3, r7, #32
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f7fe fbd9 	bl	800849e <osThreadCreate>
 8009cec:	4603      	mov	r3, r0
 8009cee:	4a17      	ldr	r2, [pc, #92]	; (8009d4c <main+0x1ac>)
 8009cf0:	6013      	str	r3, [r2, #0]

  /* definition and creation of CounterDirGame */
  osThreadDef(CounterDirGame, StartCounterDirGame, osPriorityIdle, 0, 128);
 8009cf2:	4b17      	ldr	r3, [pc, #92]	; (8009d50 <main+0x1b0>)
 8009cf4:	1d3c      	adds	r4, r7, #4
 8009cf6:	461d      	mov	r5, r3
 8009cf8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009cfa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009cfc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8009d00:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CounterDirGameHandle = osThreadCreate(osThread(CounterDirGame), NULL);
 8009d04:	1d3b      	adds	r3, r7, #4
 8009d06:	2100      	movs	r1, #0
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f7fe fbc8 	bl	800849e <osThreadCreate>
 8009d0e:	4603      	mov	r3, r0
 8009d10:	4a10      	ldr	r2, [pc, #64]	; (8009d54 <main+0x1b4>)
 8009d12:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8009d14:	f7fe fbbc 	bl	8008490 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8009d18:	e7fe      	b.n	8009d18 <main+0x178>
 8009d1a:	bf00      	nop
 8009d1c:	2000147c 	.word	0x2000147c
 8009d20:	200002c8 	.word	0x200002c8
 8009d24:	200014c8 	.word	0x200014c8
 8009d28:	2000008c 	.word	0x2000008c
 8009d2c:	2004f784 	.word	0x2004f784
 8009d30:	2004f76c 	.word	0x2004f76c
 8009d34:	2004f76b 	.word	0x2004f76b
 8009d38:	2004f770 	.word	0x2004f770
 8009d3c:	2004f76a 	.word	0x2004f76a
 8009d40:	0800c56c 	.word	0x0800c56c
 8009d44:	20001558 	.word	0x20001558
 8009d48:	0800c588 	.word	0x0800c588
 8009d4c:	2000155c 	.word	0x2000155c
 8009d50:	0800c5a4 	.word	0x0800c5a4
 8009d54:	20001560 	.word	0x20001560

08009d58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8009d58:	b580      	push	{r7, lr}
 8009d5a:	b096      	sub	sp, #88	; 0x58
 8009d5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8009d5e:	f107 0314 	add.w	r3, r7, #20
 8009d62:	2244      	movs	r2, #68	; 0x44
 8009d64:	2100      	movs	r1, #0
 8009d66:	4618      	mov	r0, r3
 8009d68:	f002 fbb4 	bl	800c4d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8009d6c:	463b      	mov	r3, r7
 8009d6e:	2200      	movs	r2, #0
 8009d70:	601a      	str	r2, [r3, #0]
 8009d72:	605a      	str	r2, [r3, #4]
 8009d74:	609a      	str	r2, [r3, #8]
 8009d76:	60da      	str	r2, [r3, #12]
 8009d78:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8009d7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8009d7e:	f7fa f957 	bl	8004030 <HAL_PWREx_ControlVoltageScaling>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d001      	beq.n	8009d8c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8009d88:	f001 f93e 	bl	800b008 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8009d8c:	2310      	movs	r3, #16
 8009d8e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8009d90:	2301      	movs	r3, #1
 8009d92:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8009d94:	2300      	movs	r3, #0
 8009d96:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8009d98:	2360      	movs	r3, #96	; 0x60
 8009d9a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8009d9c:	2302      	movs	r3, #2
 8009d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8009da0:	2301      	movs	r3, #1
 8009da2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8009da4:	2301      	movs	r3, #1
 8009da6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8009da8:	2328      	movs	r3, #40	; 0x28
 8009daa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8009dac:	2302      	movs	r3, #2
 8009dae:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8009db0:	2302      	movs	r3, #2
 8009db2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8009db4:	2302      	movs	r3, #2
 8009db6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8009db8:	f107 0314 	add.w	r3, r7, #20
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f7fa fa23 	bl	8004208 <HAL_RCC_OscConfig>
 8009dc2:	4603      	mov	r3, r0
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d001      	beq.n	8009dcc <SystemClock_Config+0x74>
  {
    Error_Handler();
 8009dc8:	f001 f91e 	bl	800b008 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8009dcc:	230f      	movs	r3, #15
 8009dce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8009dd8:	2300      	movs	r3, #0
 8009dda:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8009de0:	463b      	mov	r3, r7
 8009de2:	2103      	movs	r1, #3
 8009de4:	4618      	mov	r0, r3
 8009de6:	f7fa fe29 	bl	8004a3c <HAL_RCC_ClockConfig>
 8009dea:	4603      	mov	r3, r0
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d001      	beq.n	8009df4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8009df0:	f001 f90a 	bl	800b008 <Error_Handler>
  }
}
 8009df4:	bf00      	nop
 8009df6:	3758      	adds	r7, #88	; 0x58
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08a      	sub	sp, #40	; 0x28
 8009e00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8009e02:	463b      	mov	r3, r7
 8009e04:	2228      	movs	r2, #40	; 0x28
 8009e06:	2100      	movs	r1, #0
 8009e08:	4618      	mov	r0, r3
 8009e0a:	f002 fb63 	bl	800c4d4 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8009e0e:	4b13      	ldr	r3, [pc, #76]	; (8009e5c <MX_DAC1_Init+0x60>)
 8009e10:	4a13      	ldr	r2, [pc, #76]	; (8009e60 <MX_DAC1_Init+0x64>)
 8009e12:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8009e14:	4811      	ldr	r0, [pc, #68]	; (8009e5c <MX_DAC1_Init+0x60>)
 8009e16:	f7f6 fd3e 	bl	8000896 <HAL_DAC_Init>
 8009e1a:	4603      	mov	r3, r0
 8009e1c:	2b00      	cmp	r3, #0
 8009e1e:	d001      	beq.n	8009e24 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8009e20:	f001 f8f2 	bl	800b008 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8009e24:	2300      	movs	r3, #0
 8009e26:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8009e28:	230a      	movs	r3, #10
 8009e2a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8009e2c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e30:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8009e32:	2300      	movs	r3, #0
 8009e34:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8009e36:	2300      	movs	r3, #0
 8009e38:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8009e3e:	463b      	mov	r3, r7
 8009e40:	2200      	movs	r2, #0
 8009e42:	4619      	mov	r1, r3
 8009e44:	4805      	ldr	r0, [pc, #20]	; (8009e5c <MX_DAC1_Init+0x60>)
 8009e46:	f7f6 fe6f 	bl	8000b28 <HAL_DAC_ConfigChannel>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	d001      	beq.n	8009e54 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8009e50:	f001 f8da 	bl	800b008 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8009e54:	bf00      	nop
 8009e56:	3728      	adds	r7, #40	; 0x28
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	bd80      	pop	{r7, pc}
 8009e5c:	20001278 	.word	0x20001278
 8009e60:	40007400 	.word	0x40007400

08009e64 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8009e68:	4b2c      	ldr	r3, [pc, #176]	; (8009f1c <MX_DFSDM1_Init+0xb8>)
 8009e6a:	4a2d      	ldr	r2, [pc, #180]	; (8009f20 <MX_DFSDM1_Init+0xbc>)
 8009e6c:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8009e6e:	4b2b      	ldr	r3, [pc, #172]	; (8009f1c <MX_DFSDM1_Init+0xb8>)
 8009e70:	2200      	movs	r2, #0
 8009e72:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8009e74:	4b29      	ldr	r3, [pc, #164]	; (8009f1c <MX_DFSDM1_Init+0xb8>)
 8009e76:	2201      	movs	r2, #1
 8009e78:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8009e7a:	4b28      	ldr	r3, [pc, #160]	; (8009f1c <MX_DFSDM1_Init+0xb8>)
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8009e80:	4b26      	ldr	r3, [pc, #152]	; (8009f1c <MX_DFSDM1_Init+0xb8>)
 8009e82:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8009e86:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 118;
 8009e88:	4b24      	ldr	r3, [pc, #144]	; (8009f1c <MX_DFSDM1_Init+0xb8>)
 8009e8a:	2276      	movs	r2, #118	; 0x76
 8009e8c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8009e8e:	4b23      	ldr	r3, [pc, #140]	; (8009f1c <MX_DFSDM1_Init+0xb8>)
 8009e90:	2201      	movs	r2, #1
 8009e92:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8009e94:	4821      	ldr	r0, [pc, #132]	; (8009f1c <MX_DFSDM1_Init+0xb8>)
 8009e96:	f7f7 f8d1 	bl	800103c <HAL_DFSDM_FilterInit>
 8009e9a:	4603      	mov	r3, r0
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d001      	beq.n	8009ea4 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8009ea0:	f001 f8b2 	bl	800b008 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8009ea4:	4b1f      	ldr	r3, [pc, #124]	; (8009f24 <MX_DFSDM1_Init+0xc0>)
 8009ea6:	4a20      	ldr	r2, [pc, #128]	; (8009f28 <MX_DFSDM1_Init+0xc4>)
 8009ea8:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8009eaa:	4b1e      	ldr	r3, [pc, #120]	; (8009f24 <MX_DFSDM1_Init+0xc0>)
 8009eac:	2201      	movs	r2, #1
 8009eae:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8009eb0:	4b1c      	ldr	r3, [pc, #112]	; (8009f24 <MX_DFSDM1_Init+0xc0>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 8009eb6:	4b1b      	ldr	r3, [pc, #108]	; (8009f24 <MX_DFSDM1_Init+0xc0>)
 8009eb8:	2222      	movs	r2, #34	; 0x22
 8009eba:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8009ebc:	4b19      	ldr	r3, [pc, #100]	; (8009f24 <MX_DFSDM1_Init+0xc0>)
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8009ec2:	4b18      	ldr	r3, [pc, #96]	; (8009f24 <MX_DFSDM1_Init+0xc0>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8009ec8:	4b16      	ldr	r3, [pc, #88]	; (8009f24 <MX_DFSDM1_Init+0xc0>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8009ece:	4b15      	ldr	r3, [pc, #84]	; (8009f24 <MX_DFSDM1_Init+0xc0>)
 8009ed0:	2200      	movs	r2, #0
 8009ed2:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8009ed4:	4b13      	ldr	r3, [pc, #76]	; (8009f24 <MX_DFSDM1_Init+0xc0>)
 8009ed6:	2204      	movs	r2, #4
 8009ed8:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8009eda:	4b12      	ldr	r3, [pc, #72]	; (8009f24 <MX_DFSDM1_Init+0xc0>)
 8009edc:	2200      	movs	r2, #0
 8009ede:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8009ee0:	4b10      	ldr	r3, [pc, #64]	; (8009f24 <MX_DFSDM1_Init+0xc0>)
 8009ee2:	2201      	movs	r2, #1
 8009ee4:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8009ee6:	4b0f      	ldr	r3, [pc, #60]	; (8009f24 <MX_DFSDM1_Init+0xc0>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8009eec:	4b0d      	ldr	r3, [pc, #52]	; (8009f24 <MX_DFSDM1_Init+0xc0>)
 8009eee:	2200      	movs	r2, #0
 8009ef0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8009ef2:	480c      	ldr	r0, [pc, #48]	; (8009f24 <MX_DFSDM1_Init+0xc0>)
 8009ef4:	f7f6 ffe2 	bl	8000ebc <HAL_DFSDM_ChannelInit>
 8009ef8:	4603      	mov	r3, r0
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d001      	beq.n	8009f02 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8009efe:	f001 f883 	bl	800b008 <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8009f02:	2201      	movs	r2, #1
 8009f04:	4909      	ldr	r1, [pc, #36]	; (8009f2c <MX_DFSDM1_Init+0xc8>)
 8009f06:	4805      	ldr	r0, [pc, #20]	; (8009f1c <MX_DFSDM1_Init+0xb8>)
 8009f08:	f7f7 f972 	bl	80011f0 <HAL_DFSDM_FilterConfigRegChannel>
 8009f0c:	4603      	mov	r3, r0
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d001      	beq.n	8009f16 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8009f12:	f001 f879 	bl	800b008 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8009f16:	bf00      	nop
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	200012ec 	.word	0x200012ec
 8009f20:	40016100 	.word	0x40016100
 8009f24:	20001340 	.word	0x20001340
 8009f28:	40016040 	.word	0x40016040
 8009f2c:	00020004 	.word	0x00020004

08009f30 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8009f30:	b580      	push	{r7, lr}
 8009f32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8009f34:	4b1b      	ldr	r3, [pc, #108]	; (8009fa4 <MX_I2C2_Init+0x74>)
 8009f36:	4a1c      	ldr	r2, [pc, #112]	; (8009fa8 <MX_I2C2_Init+0x78>)
 8009f38:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8009f3a:	4b1a      	ldr	r3, [pc, #104]	; (8009fa4 <MX_I2C2_Init+0x74>)
 8009f3c:	4a1b      	ldr	r2, [pc, #108]	; (8009fac <MX_I2C2_Init+0x7c>)
 8009f3e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8009f40:	4b18      	ldr	r3, [pc, #96]	; (8009fa4 <MX_I2C2_Init+0x74>)
 8009f42:	2200      	movs	r2, #0
 8009f44:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8009f46:	4b17      	ldr	r3, [pc, #92]	; (8009fa4 <MX_I2C2_Init+0x74>)
 8009f48:	2201      	movs	r2, #1
 8009f4a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8009f4c:	4b15      	ldr	r3, [pc, #84]	; (8009fa4 <MX_I2C2_Init+0x74>)
 8009f4e:	2200      	movs	r2, #0
 8009f50:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8009f52:	4b14      	ldr	r3, [pc, #80]	; (8009fa4 <MX_I2C2_Init+0x74>)
 8009f54:	2200      	movs	r2, #0
 8009f56:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8009f58:	4b12      	ldr	r3, [pc, #72]	; (8009fa4 <MX_I2C2_Init+0x74>)
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8009f5e:	4b11      	ldr	r3, [pc, #68]	; (8009fa4 <MX_I2C2_Init+0x74>)
 8009f60:	2200      	movs	r2, #0
 8009f62:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8009f64:	4b0f      	ldr	r3, [pc, #60]	; (8009fa4 <MX_I2C2_Init+0x74>)
 8009f66:	2200      	movs	r2, #0
 8009f68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8009f6a:	480e      	ldr	r0, [pc, #56]	; (8009fa4 <MX_I2C2_Init+0x74>)
 8009f6c:	f7f8 f956 	bl	800221c <HAL_I2C_Init>
 8009f70:	4603      	mov	r3, r0
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d001      	beq.n	8009f7a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8009f76:	f001 f847 	bl	800b008 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	4809      	ldr	r0, [pc, #36]	; (8009fa4 <MX_I2C2_Init+0x74>)
 8009f7e:	f7f8 fedf 	bl	8002d40 <HAL_I2CEx_ConfigAnalogFilter>
 8009f82:	4603      	mov	r3, r0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d001      	beq.n	8009f8c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8009f88:	f001 f83e 	bl	800b008 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	4805      	ldr	r0, [pc, #20]	; (8009fa4 <MX_I2C2_Init+0x74>)
 8009f90:	f7f8 ff21 	bl	8002dd6 <HAL_I2CEx_ConfigDigitalFilter>
 8009f94:	4603      	mov	r3, r0
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d001      	beq.n	8009f9e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8009f9a:	f001 f835 	bl	800b008 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8009f9e:	bf00      	nop
 8009fa0:	bd80      	pop	{r7, pc}
 8009fa2:	bf00      	nop
 8009fa4:	200013d8 	.word	0x200013d8
 8009fa8:	40005800 	.word	0x40005800
 8009fac:	10909cec 	.word	0x10909cec

08009fb0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8009fb0:	b580      	push	{r7, lr}
 8009fb2:	b086      	sub	sp, #24
 8009fb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8009fb6:	1d3b      	adds	r3, r7, #4
 8009fb8:	2200      	movs	r2, #0
 8009fba:	601a      	str	r2, [r3, #0]
 8009fbc:	605a      	str	r2, [r3, #4]
 8009fbe:	609a      	str	r2, [r3, #8]
 8009fc0:	60da      	str	r2, [r3, #12]
 8009fc2:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8009fc4:	4b23      	ldr	r3, [pc, #140]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 8009fc6:	4a24      	ldr	r2, [pc, #144]	; (800a058 <MX_OCTOSPI1_Init+0xa8>)
 8009fc8:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8009fca:	4b22      	ldr	r3, [pc, #136]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 8009fcc:	2201      	movs	r2, #1
 8009fce:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8009fd0:	4b20      	ldr	r3, [pc, #128]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8009fd6:	4b1f      	ldr	r3, [pc, #124]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 8009fd8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009fdc:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8009fde:	4b1d      	ldr	r3, [pc, #116]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 8009fe0:	2220      	movs	r2, #32
 8009fe2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8009fe4:	4b1b      	ldr	r3, [pc, #108]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 8009fe6:	2201      	movs	r2, #1
 8009fe8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8009fea:	4b1a      	ldr	r3, [pc, #104]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 8009fec:	2200      	movs	r2, #0
 8009fee:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8009ff0:	4b18      	ldr	r3, [pc, #96]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8009ff6:	4b17      	ldr	r3, [pc, #92]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 8009ff8:	2201      	movs	r2, #1
 8009ffa:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8009ffc:	4b15      	ldr	r3, [pc, #84]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 8009ffe:	2200      	movs	r2, #0
 800a000:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 800a002:	4b14      	ldr	r3, [pc, #80]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 800a004:	2200      	movs	r2, #0
 800a006:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 800a008:	4b12      	ldr	r3, [pc, #72]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 800a00a:	2200      	movs	r2, #0
 800a00c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800a00e:	4b11      	ldr	r3, [pc, #68]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 800a010:	2208      	movs	r2, #8
 800a012:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 800a014:	480f      	ldr	r0, [pc, #60]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 800a016:	f7f8 ff2b 	bl	8002e70 <HAL_OSPI_Init>
 800a01a:	4603      	mov	r3, r0
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d001      	beq.n	800a024 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 800a020:	f000 fff2 	bl	800b008 <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 800a024:	2301      	movs	r3, #1
 800a026:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 800a028:	2301      	movs	r3, #1
 800a02a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800a02c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800a030:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800a032:	1d3b      	adds	r3, r7, #4
 800a034:	f241 3288 	movw	r2, #5000	; 0x1388
 800a038:	4619      	mov	r1, r3
 800a03a:	4806      	ldr	r0, [pc, #24]	; (800a054 <MX_OCTOSPI1_Init+0xa4>)
 800a03c:	f7f9 fa16 	bl	800346c <HAL_OSPIM_Config>
 800a040:	4603      	mov	r3, r0
 800a042:	2b00      	cmp	r3, #0
 800a044:	d001      	beq.n	800a04a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 800a046:	f000 ffdf 	bl	800b008 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800a04a:	bf00      	nop
 800a04c:	3718      	adds	r7, #24
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}
 800a052:	bf00      	nop
 800a054:	2000142c 	.word	0x2000142c
 800a058:	a0001000 	.word	0xa0001000

0800a05c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800a05c:	b580      	push	{r7, lr}
 800a05e:	b088      	sub	sp, #32
 800a060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800a062:	f107 0310 	add.w	r3, r7, #16
 800a066:	2200      	movs	r2, #0
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	605a      	str	r2, [r3, #4]
 800a06c:	609a      	str	r2, [r3, #8]
 800a06e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800a070:	1d3b      	adds	r3, r7, #4
 800a072:	2200      	movs	r2, #0
 800a074:	601a      	str	r2, [r3, #0]
 800a076:	605a      	str	r2, [r3, #4]
 800a078:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800a07a:	4b1e      	ldr	r3, [pc, #120]	; (800a0f4 <MX_TIM2_Init+0x98>)
 800a07c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800a080:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800a082:	4b1c      	ldr	r3, [pc, #112]	; (800a0f4 <MX_TIM2_Init+0x98>)
 800a084:	2200      	movs	r2, #0
 800a086:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800a088:	4b1a      	ldr	r3, [pc, #104]	; (800a0f4 <MX_TIM2_Init+0x98>)
 800a08a:	2200      	movs	r2, #0
 800a08c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 800a08e:	4b19      	ldr	r3, [pc, #100]	; (800a0f4 <MX_TIM2_Init+0x98>)
 800a090:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800a094:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800a096:	4b17      	ldr	r3, [pc, #92]	; (800a0f4 <MX_TIM2_Init+0x98>)
 800a098:	2200      	movs	r2, #0
 800a09a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800a09c:	4b15      	ldr	r3, [pc, #84]	; (800a0f4 <MX_TIM2_Init+0x98>)
 800a09e:	2280      	movs	r2, #128	; 0x80
 800a0a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800a0a2:	4814      	ldr	r0, [pc, #80]	; (800a0f4 <MX_TIM2_Init+0x98>)
 800a0a4:	f7fb fca0 	bl	80059e8 <HAL_TIM_Base_Init>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d001      	beq.n	800a0b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800a0ae:	f000 ffab 	bl	800b008 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800a0b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a0b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800a0b8:	f107 0310 	add.w	r3, r7, #16
 800a0bc:	4619      	mov	r1, r3
 800a0be:	480d      	ldr	r0, [pc, #52]	; (800a0f4 <MX_TIM2_Init+0x98>)
 800a0c0:	f7fb fe79 	bl	8005db6 <HAL_TIM_ConfigClockSource>
 800a0c4:	4603      	mov	r3, r0
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d001      	beq.n	800a0ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800a0ca:	f000 ff9d 	bl	800b008 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800a0ce:	2320      	movs	r3, #32
 800a0d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800a0d2:	2300      	movs	r3, #0
 800a0d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800a0d6:	1d3b      	adds	r3, r7, #4
 800a0d8:	4619      	mov	r1, r3
 800a0da:	4806      	ldr	r0, [pc, #24]	; (800a0f4 <MX_TIM2_Init+0x98>)
 800a0dc:	f7fc f89a 	bl	8006214 <HAL_TIMEx_MasterConfigSynchronization>
 800a0e0:	4603      	mov	r3, r0
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d001      	beq.n	800a0ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800a0e6:	f000 ff8f 	bl	800b008 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800a0ea:	bf00      	nop
 800a0ec:	3720      	adds	r7, #32
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	2000147c 	.word	0x2000147c

0800a0f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800a0f8:	b580      	push	{r7, lr}
 800a0fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800a0fc:	4b22      	ldr	r3, [pc, #136]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a0fe:	4a23      	ldr	r2, [pc, #140]	; (800a18c <MX_USART1_UART_Init+0x94>)
 800a100:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800a102:	4b21      	ldr	r3, [pc, #132]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a104:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800a108:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800a10a:	4b1f      	ldr	r3, [pc, #124]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a10c:	2200      	movs	r2, #0
 800a10e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800a110:	4b1d      	ldr	r3, [pc, #116]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a112:	2200      	movs	r2, #0
 800a114:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800a116:	4b1c      	ldr	r3, [pc, #112]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a118:	2200      	movs	r2, #0
 800a11a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800a11c:	4b1a      	ldr	r3, [pc, #104]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a11e:	220c      	movs	r2, #12
 800a120:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800a122:	4b19      	ldr	r3, [pc, #100]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a124:	2200      	movs	r2, #0
 800a126:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800a128:	4b17      	ldr	r3, [pc, #92]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a12a:	2200      	movs	r2, #0
 800a12c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800a12e:	4b16      	ldr	r3, [pc, #88]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a130:	2200      	movs	r2, #0
 800a132:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800a134:	4b14      	ldr	r3, [pc, #80]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a136:	2200      	movs	r2, #0
 800a138:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800a13a:	4b13      	ldr	r3, [pc, #76]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a13c:	2200      	movs	r2, #0
 800a13e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800a140:	4811      	ldr	r0, [pc, #68]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a142:	f7fc f90d 	bl	8006360 <HAL_UART_Init>
 800a146:	4603      	mov	r3, r0
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d001      	beq.n	800a150 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800a14c:	f000 ff5c 	bl	800b008 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a150:	2100      	movs	r1, #0
 800a152:	480d      	ldr	r0, [pc, #52]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a154:	f7fe f8b9 	bl	80082ca <HAL_UARTEx_SetTxFifoThreshold>
 800a158:	4603      	mov	r3, r0
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d001      	beq.n	800a162 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800a15e:	f000 ff53 	bl	800b008 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800a162:	2100      	movs	r1, #0
 800a164:	4808      	ldr	r0, [pc, #32]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a166:	f7fe f8ee 	bl	8008346 <HAL_UARTEx_SetRxFifoThreshold>
 800a16a:	4603      	mov	r3, r0
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d001      	beq.n	800a174 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800a170:	f000 ff4a 	bl	800b008 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800a174:	4804      	ldr	r0, [pc, #16]	; (800a188 <MX_USART1_UART_Init+0x90>)
 800a176:	f7fe f86f 	bl	8008258 <HAL_UARTEx_DisableFifoMode>
 800a17a:	4603      	mov	r3, r0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d001      	beq.n	800a184 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800a180:	f000 ff42 	bl	800b008 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800a184:	bf00      	nop
 800a186:	bd80      	pop	{r7, pc}
 800a188:	200014c8 	.word	0x200014c8
 800a18c:	40013800 	.word	0x40013800

0800a190 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800a190:	b580      	push	{r7, lr}
 800a192:	b082      	sub	sp, #8
 800a194:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800a196:	4b16      	ldr	r3, [pc, #88]	; (800a1f0 <MX_DMA_Init+0x60>)
 800a198:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a19a:	4a15      	ldr	r2, [pc, #84]	; (800a1f0 <MX_DMA_Init+0x60>)
 800a19c:	f043 0304 	orr.w	r3, r3, #4
 800a1a0:	6493      	str	r3, [r2, #72]	; 0x48
 800a1a2:	4b13      	ldr	r3, [pc, #76]	; (800a1f0 <MX_DMA_Init+0x60>)
 800a1a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1a6:	f003 0304 	and.w	r3, r3, #4
 800a1aa:	607b      	str	r3, [r7, #4]
 800a1ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800a1ae:	4b10      	ldr	r3, [pc, #64]	; (800a1f0 <MX_DMA_Init+0x60>)
 800a1b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1b2:	4a0f      	ldr	r2, [pc, #60]	; (800a1f0 <MX_DMA_Init+0x60>)
 800a1b4:	f043 0301 	orr.w	r3, r3, #1
 800a1b8:	6493      	str	r3, [r2, #72]	; 0x48
 800a1ba:	4b0d      	ldr	r3, [pc, #52]	; (800a1f0 <MX_DMA_Init+0x60>)
 800a1bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a1be:	f003 0301 	and.w	r3, r3, #1
 800a1c2:	603b      	str	r3, [r7, #0]
 800a1c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800a1c6:	2200      	movs	r2, #0
 800a1c8:	2105      	movs	r1, #5
 800a1ca:	200b      	movs	r0, #11
 800a1cc:	f7f6 fb2d 	bl	800082a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800a1d0:	200b      	movs	r0, #11
 800a1d2:	f7f6 fb46 	bl	8000862 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800a1d6:	2200      	movs	r2, #0
 800a1d8:	2105      	movs	r1, #5
 800a1da:	200c      	movs	r0, #12
 800a1dc:	f7f6 fb25 	bl	800082a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800a1e0:	200c      	movs	r0, #12
 800a1e2:	f7f6 fb3e 	bl	8000862 <HAL_NVIC_EnableIRQ>

}
 800a1e6:	bf00      	nop
 800a1e8:	3708      	adds	r7, #8
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	40021000 	.word	0x40021000

0800a1f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b08a      	sub	sp, #40	; 0x28
 800a1f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a1fa:	f107 0314 	add.w	r3, r7, #20
 800a1fe:	2200      	movs	r2, #0
 800a200:	601a      	str	r2, [r3, #0]
 800a202:	605a      	str	r2, [r3, #4]
 800a204:	609a      	str	r2, [r3, #8]
 800a206:	60da      	str	r2, [r3, #12]
 800a208:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800a20a:	4b39      	ldr	r3, [pc, #228]	; (800a2f0 <MX_GPIO_Init+0xfc>)
 800a20c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a20e:	4a38      	ldr	r2, [pc, #224]	; (800a2f0 <MX_GPIO_Init+0xfc>)
 800a210:	f043 0310 	orr.w	r3, r3, #16
 800a214:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a216:	4b36      	ldr	r3, [pc, #216]	; (800a2f0 <MX_GPIO_Init+0xfc>)
 800a218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a21a:	f003 0310 	and.w	r3, r3, #16
 800a21e:	613b      	str	r3, [r7, #16]
 800a220:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800a222:	4b33      	ldr	r3, [pc, #204]	; (800a2f0 <MX_GPIO_Init+0xfc>)
 800a224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a226:	4a32      	ldr	r2, [pc, #200]	; (800a2f0 <MX_GPIO_Init+0xfc>)
 800a228:	f043 0304 	orr.w	r3, r3, #4
 800a22c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a22e:	4b30      	ldr	r3, [pc, #192]	; (800a2f0 <MX_GPIO_Init+0xfc>)
 800a230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a232:	f003 0304 	and.w	r3, r3, #4
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800a23a:	4b2d      	ldr	r3, [pc, #180]	; (800a2f0 <MX_GPIO_Init+0xfc>)
 800a23c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a23e:	4a2c      	ldr	r2, [pc, #176]	; (800a2f0 <MX_GPIO_Init+0xfc>)
 800a240:	f043 0301 	orr.w	r3, r3, #1
 800a244:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a246:	4b2a      	ldr	r3, [pc, #168]	; (800a2f0 <MX_GPIO_Init+0xfc>)
 800a248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a24a:	f003 0301 	and.w	r3, r3, #1
 800a24e:	60bb      	str	r3, [r7, #8]
 800a250:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800a252:	4b27      	ldr	r3, [pc, #156]	; (800a2f0 <MX_GPIO_Init+0xfc>)
 800a254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a256:	4a26      	ldr	r2, [pc, #152]	; (800a2f0 <MX_GPIO_Init+0xfc>)
 800a258:	f043 0302 	orr.w	r3, r3, #2
 800a25c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a25e:	4b24      	ldr	r3, [pc, #144]	; (800a2f0 <MX_GPIO_Init+0xfc>)
 800a260:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a262:	f003 0302 	and.w	r3, r3, #2
 800a266:	607b      	str	r3, [r7, #4]
 800a268:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
 800a26a:	2200      	movs	r2, #0
 800a26c:	2108      	movs	r1, #8
 800a26e:	4821      	ldr	r0, [pc, #132]	; (800a2f4 <MX_GPIO_Init+0x100>)
 800a270:	f7f7 ff8a 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);
 800a274:	2200      	movs	r2, #0
 800a276:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a27a:	481f      	ldr	r0, [pc, #124]	; (800a2f8 <MX_GPIO_Init+0x104>)
 800a27c:	f7f7 ff84 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : redLED_Pin */
  GPIO_InitStruct.Pin = redLED_Pin;
 800a280:	2308      	movs	r3, #8
 800a282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a284:	2301      	movs	r3, #1
 800a286:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a288:	2300      	movs	r3, #0
 800a28a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a28c:	2300      	movs	r3, #0
 800a28e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(redLED_GPIO_Port, &GPIO_InitStruct);
 800a290:	f107 0314 	add.w	r3, r7, #20
 800a294:	4619      	mov	r1, r3
 800a296:	4817      	ldr	r0, [pc, #92]	; (800a2f4 <MX_GPIO_Init+0x100>)
 800a298:	f7f7 fcf2 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : pushButton_Pin */
  GPIO_InitStruct.Pin = pushButton_Pin;
 800a29c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a2a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800a2a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800a2a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pushButton_GPIO_Port, &GPIO_InitStruct);
 800a2ac:	f107 0314 	add.w	r3, r7, #20
 800a2b0:	4619      	mov	r1, r3
 800a2b2:	4812      	ldr	r0, [pc, #72]	; (800a2fc <MX_GPIO_Init+0x108>)
 800a2b4:	f7f7 fce4 	bl	8001c80 <HAL_GPIO_Init>

  /*Configure GPIO pin : greenLED_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin;
 800a2b8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800a2be:	2301      	movs	r3, #1
 800a2c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(greenLED_GPIO_Port, &GPIO_InitStruct);
 800a2ca:	f107 0314 	add.w	r3, r7, #20
 800a2ce:	4619      	mov	r1, r3
 800a2d0:	4809      	ldr	r0, [pc, #36]	; (800a2f8 <MX_GPIO_Init+0x104>)
 800a2d2:	f7f7 fcd5 	bl	8001c80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	2105      	movs	r1, #5
 800a2da:	2028      	movs	r0, #40	; 0x28
 800a2dc:	f7f6 faa5 	bl	800082a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800a2e0:	2028      	movs	r0, #40	; 0x28
 800a2e2:	f7f6 fabe 	bl	8000862 <HAL_NVIC_EnableIRQ>

}
 800a2e6:	bf00      	nop
 800a2e8:	3728      	adds	r7, #40	; 0x28
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop
 800a2f0:	40021000 	.word	0x40021000
 800a2f4:	48001000 	.word	0x48001000
 800a2f8:	48000400 	.word	0x48000400
 800a2fc:	48000800 	.word	0x48000800

0800a300 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800a300:	b580      	push	{r7, lr}
 800a302:	b082      	sub	sp, #8
 800a304:	af00      	add	r7, sp, #0
 800a306:	4603      	mov	r3, r0
 800a308:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == pushButton_Pin) {
 800a30a:	88fb      	ldrh	r3, [r7, #6]
 800a30c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a310:	d112      	bne.n	800a338 <HAL_GPIO_EXTI_Callback+0x38>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800a312:	2100      	movs	r1, #0
 800a314:	480a      	ldr	r0, [pc, #40]	; (800a340 <HAL_GPIO_EXTI_Callback+0x40>)
 800a316:	f7f6 fbad 	bl	8000a74 <HAL_DAC_Stop_DMA>
		HAL_GPIO_TogglePin(greenLED_GPIO_Port, greenLED_Pin);
 800a31a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800a31e:	4809      	ldr	r0, [pc, #36]	; (800a344 <HAL_GPIO_EXTI_Callback+0x44>)
 800a320:	f7f7 ff4a 	bl	80021b8 <HAL_GPIO_TogglePin>

		if(actualRecorder)
 800a324:	4b08      	ldr	r3, [pc, #32]	; (800a348 <HAL_GPIO_EXTI_Callback+0x48>)
 800a326:	781b      	ldrb	r3, [r3, #0]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d005      	beq.n	800a338 <HAL_GPIO_EXTI_Callback+0x38>
			HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, SEQUENCE, SEQUENCE_LENGTH);
 800a32c:	f649 4240 	movw	r2, #40000	; 0x9c40
 800a330:	4906      	ldr	r1, [pc, #24]	; (800a34c <HAL_GPIO_EXTI_Callback+0x4c>)
 800a332:	4807      	ldr	r0, [pc, #28]	; (800a350 <HAL_GPIO_EXTI_Callback+0x50>)
 800a334:	f7f6 ffa2 	bl	800127c <HAL_DFSDM_FilterRegularStart_DMA>
	}
}
 800a338:	bf00      	nop
 800a33a:	3708      	adds	r7, #8
 800a33c:	46bd      	mov	sp, r7
 800a33e:	bd80      	pop	{r7, pc}
 800a340:	20001278 	.word	0x20001278
 800a344:	48000400 	.word	0x48000400
 800a348:	2004f76c 	.word	0x2004f76c
 800a34c:	20001564 	.word	0x20001564
 800a350:	200012ec 	.word	0x200012ec

0800a354 <HAL_DAC_ConvCpltCallbackCh1>:


void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 800a354:	b580      	push	{r7, lr}
 800a356:	b084      	sub	sp, #16
 800a358:	af02      	add	r7, sp, #8
 800a35a:	6078      	str	r0, [r7, #4]
	if(player && digitGame) {
 800a35c:	4b67      	ldr	r3, [pc, #412]	; (800a4fc <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	2b00      	cmp	r3, #0
 800a362:	d035      	beq.n	800a3d0 <HAL_DAC_ConvCpltCallbackCh1+0x7c>
 800a364:	4b66      	ldr	r3, [pc, #408]	; (800a500 <HAL_DAC_ConvCpltCallbackCh1+0x1ac>)
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d031      	beq.n	800a3d0 <HAL_DAC_ConvCpltCallbackCh1+0x7c>
		addressDigitIndex = addressDigitIndex + 1;
 800a36c:	4b65      	ldr	r3, [pc, #404]	; (800a504 <HAL_DAC_ConvCpltCallbackCh1+0x1b0>)
 800a36e:	781b      	ldrb	r3, [r3, #0]
 800a370:	3301      	adds	r3, #1
 800a372:	b2da      	uxtb	r2, r3
 800a374:	4b63      	ldr	r3, [pc, #396]	; (800a504 <HAL_DAC_ConvCpltCallbackCh1+0x1b0>)
 800a376:	701a      	strb	r2, [r3, #0]
		if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDigits[seqDigits[addressDigitIndex]], sizeof(SEQUENCE)) != QSPI_OK)
 800a378:	4b62      	ldr	r3, [pc, #392]	; (800a504 <HAL_DAC_ConvCpltCallbackCh1+0x1b0>)
 800a37a:	781b      	ldrb	r3, [r3, #0]
 800a37c:	461a      	mov	r2, r3
 800a37e:	4b62      	ldr	r3, [pc, #392]	; (800a508 <HAL_DAC_ConvCpltCallbackCh1+0x1b4>)
 800a380:	5c9b      	ldrb	r3, [r3, r2]
 800a382:	461a      	mov	r2, r3
 800a384:	4b61      	ldr	r3, [pc, #388]	; (800a50c <HAL_DAC_ConvCpltCallbackCh1+0x1b8>)
 800a386:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a38a:	4a61      	ldr	r2, [pc, #388]	; (800a510 <HAL_DAC_ConvCpltCallbackCh1+0x1bc>)
 800a38c:	4619      	mov	r1, r3
 800a38e:	4861      	ldr	r0, [pc, #388]	; (800a514 <HAL_DAC_ConvCpltCallbackCh1+0x1c0>)
 800a390:	f001 f866 	bl	800b460 <BSP_QSPI_Read>
 800a394:	4603      	mov	r3, r0
 800a396:	2b00      	cmp	r3, #0
 800a398:	d001      	beq.n	800a39e <HAL_DAC_ConvCpltCallbackCh1+0x4a>
			Error_Handler();
 800a39a:	f000 fe35 	bl	800b008 <Error_Handler>
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800a39e:	2300      	movs	r3, #0
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	f649 4340 	movw	r3, #40000	; 0x9c40
 800a3a6:	4a5b      	ldr	r2, [pc, #364]	; (800a514 <HAL_DAC_ConvCpltCallbackCh1+0x1c0>)
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	485b      	ldr	r0, [pc, #364]	; (800a518 <HAL_DAC_ConvCpltCallbackCh1+0x1c4>)
 800a3ac:	f7f6 fa96 	bl	80008dc <HAL_DAC_Start_DMA>

		if (addressDigitIndex == NUMBER_OF_DIGITS) {
 800a3b0:	4b54      	ldr	r3, [pc, #336]	; (800a504 <HAL_DAC_ConvCpltCallbackCh1+0x1b0>)
 800a3b2:	781b      	ldrb	r3, [r3, #0]
 800a3b4:	2b05      	cmp	r3, #5
 800a3b6:	f040 809d 	bne.w	800a4f4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800a3ba:	2100      	movs	r1, #0
 800a3bc:	4856      	ldr	r0, [pc, #344]	; (800a518 <HAL_DAC_ConvCpltCallbackCh1+0x1c4>)
 800a3be:	f7f6 fb59 	bl	8000a74 <HAL_DAC_Stop_DMA>
			HAL_UART_Transmit(&huart1, startTypingMessage, sizeof(startTypingMessage), 100);
 800a3c2:	2364      	movs	r3, #100	; 0x64
 800a3c4:	221c      	movs	r2, #28
 800a3c6:	4955      	ldr	r1, [pc, #340]	; (800a51c <HAL_DAC_ConvCpltCallbackCh1+0x1c8>)
 800a3c8:	4855      	ldr	r0, [pc, #340]	; (800a520 <HAL_DAC_ConvCpltCallbackCh1+0x1cc>)
 800a3ca:	f7fc f819 	bl	8006400 <HAL_UART_Transmit>
		if (addressDigitIndex == NUMBER_OF_DIGITS) {
 800a3ce:	e091      	b.n	800a4f4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>
		}
	} else if (player && directionGame) {
 800a3d0:	4b4a      	ldr	r3, [pc, #296]	; (800a4fc <HAL_DAC_ConvCpltCallbackCh1+0x1a8>)
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f000 808d 	beq.w	800a4f4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>
 800a3da:	4b52      	ldr	r3, [pc, #328]	; (800a524 <HAL_DAC_ConvCpltCallbackCh1+0x1d0>)
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f000 8088 	beq.w	800a4f4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>
		addressDirectionIndex = addressDirectionIndex + 1;
 800a3e4:	4b50      	ldr	r3, [pc, #320]	; (800a528 <HAL_DAC_ConvCpltCallbackCh1+0x1d4>)
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	b2da      	uxtb	r2, r3
 800a3ec:	4b4e      	ldr	r3, [pc, #312]	; (800a528 <HAL_DAC_ConvCpltCallbackCh1+0x1d4>)
 800a3ee:	701a      	strb	r2, [r3, #0]
		if(seqDirections[addressDirectionIndex] == 'X') {
 800a3f0:	4b4d      	ldr	r3, [pc, #308]	; (800a528 <HAL_DAC_ConvCpltCallbackCh1+0x1d4>)
 800a3f2:	781b      	ldrb	r3, [r3, #0]
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	4b4d      	ldr	r3, [pc, #308]	; (800a52c <HAL_DAC_ConvCpltCallbackCh1+0x1d8>)
 800a3f8:	5c9b      	ldrb	r3, [r3, r2]
 800a3fa:	2b58      	cmp	r3, #88	; 0x58
 800a3fc:	d115      	bne.n	800a42a <HAL_DAC_ConvCpltCallbackCh1+0xd6>
			if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDirections[1], sizeof(SEQUENCE)) != QSPI_OK)
 800a3fe:	4b4c      	ldr	r3, [pc, #304]	; (800a530 <HAL_DAC_ConvCpltCallbackCh1+0x1dc>)
 800a400:	685b      	ldr	r3, [r3, #4]
 800a402:	4a43      	ldr	r2, [pc, #268]	; (800a510 <HAL_DAC_ConvCpltCallbackCh1+0x1bc>)
 800a404:	4619      	mov	r1, r3
 800a406:	4843      	ldr	r0, [pc, #268]	; (800a514 <HAL_DAC_ConvCpltCallbackCh1+0x1c0>)
 800a408:	f001 f82a 	bl	800b460 <BSP_QSPI_Read>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d001      	beq.n	800a416 <HAL_DAC_ConvCpltCallbackCh1+0xc2>
				Error_Handler();
 800a412:	f000 fdf9 	bl	800b008 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800a416:	2300      	movs	r3, #0
 800a418:	9300      	str	r3, [sp, #0]
 800a41a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800a41e:	4a3d      	ldr	r2, [pc, #244]	; (800a514 <HAL_DAC_ConvCpltCallbackCh1+0x1c0>)
 800a420:	2100      	movs	r1, #0
 800a422:	483d      	ldr	r0, [pc, #244]	; (800a518 <HAL_DAC_ConvCpltCallbackCh1+0x1c4>)
 800a424:	f7f6 fa5a 	bl	80008dc <HAL_DAC_Start_DMA>
 800a428:	e055      	b.n	800a4d6 <HAL_DAC_ConvCpltCallbackCh1+0x182>
		}else if(seqDirections[addressDirectionIndex] == 'Y') {
 800a42a:	4b3f      	ldr	r3, [pc, #252]	; (800a528 <HAL_DAC_ConvCpltCallbackCh1+0x1d4>)
 800a42c:	781b      	ldrb	r3, [r3, #0]
 800a42e:	461a      	mov	r2, r3
 800a430:	4b3e      	ldr	r3, [pc, #248]	; (800a52c <HAL_DAC_ConvCpltCallbackCh1+0x1d8>)
 800a432:	5c9b      	ldrb	r3, [r3, r2]
 800a434:	2b59      	cmp	r3, #89	; 0x59
 800a436:	d115      	bne.n	800a464 <HAL_DAC_ConvCpltCallbackCh1+0x110>
			if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDirections[3], sizeof(SEQUENCE)) != QSPI_OK)
 800a438:	4b3d      	ldr	r3, [pc, #244]	; (800a530 <HAL_DAC_ConvCpltCallbackCh1+0x1dc>)
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	4a34      	ldr	r2, [pc, #208]	; (800a510 <HAL_DAC_ConvCpltCallbackCh1+0x1bc>)
 800a43e:	4619      	mov	r1, r3
 800a440:	4834      	ldr	r0, [pc, #208]	; (800a514 <HAL_DAC_ConvCpltCallbackCh1+0x1c0>)
 800a442:	f001 f80d 	bl	800b460 <BSP_QSPI_Read>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d001      	beq.n	800a450 <HAL_DAC_ConvCpltCallbackCh1+0xfc>
				Error_Handler();
 800a44c:	f000 fddc 	bl	800b008 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800a450:	2300      	movs	r3, #0
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	f649 4340 	movw	r3, #40000	; 0x9c40
 800a458:	4a2e      	ldr	r2, [pc, #184]	; (800a514 <HAL_DAC_ConvCpltCallbackCh1+0x1c0>)
 800a45a:	2100      	movs	r1, #0
 800a45c:	482e      	ldr	r0, [pc, #184]	; (800a518 <HAL_DAC_ConvCpltCallbackCh1+0x1c4>)
 800a45e:	f7f6 fa3d 	bl	80008dc <HAL_DAC_Start_DMA>
 800a462:	e038      	b.n	800a4d6 <HAL_DAC_ConvCpltCallbackCh1+0x182>
		}else if(seqDirections[addressDirectionIndex] == 'x') {
 800a464:	4b30      	ldr	r3, [pc, #192]	; (800a528 <HAL_DAC_ConvCpltCallbackCh1+0x1d4>)
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	461a      	mov	r2, r3
 800a46a:	4b30      	ldr	r3, [pc, #192]	; (800a52c <HAL_DAC_ConvCpltCallbackCh1+0x1d8>)
 800a46c:	5c9b      	ldrb	r3, [r3, r2]
 800a46e:	2b78      	cmp	r3, #120	; 0x78
 800a470:	d115      	bne.n	800a49e <HAL_DAC_ConvCpltCallbackCh1+0x14a>
			if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDirections[0], sizeof(SEQUENCE)) != QSPI_OK)
 800a472:	4b2f      	ldr	r3, [pc, #188]	; (800a530 <HAL_DAC_ConvCpltCallbackCh1+0x1dc>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	4a26      	ldr	r2, [pc, #152]	; (800a510 <HAL_DAC_ConvCpltCallbackCh1+0x1bc>)
 800a478:	4619      	mov	r1, r3
 800a47a:	4826      	ldr	r0, [pc, #152]	; (800a514 <HAL_DAC_ConvCpltCallbackCh1+0x1c0>)
 800a47c:	f000 fff0 	bl	800b460 <BSP_QSPI_Read>
 800a480:	4603      	mov	r3, r0
 800a482:	2b00      	cmp	r3, #0
 800a484:	d001      	beq.n	800a48a <HAL_DAC_ConvCpltCallbackCh1+0x136>
				Error_Handler();
 800a486:	f000 fdbf 	bl	800b008 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800a48a:	2300      	movs	r3, #0
 800a48c:	9300      	str	r3, [sp, #0]
 800a48e:	f649 4340 	movw	r3, #40000	; 0x9c40
 800a492:	4a20      	ldr	r2, [pc, #128]	; (800a514 <HAL_DAC_ConvCpltCallbackCh1+0x1c0>)
 800a494:	2100      	movs	r1, #0
 800a496:	4820      	ldr	r0, [pc, #128]	; (800a518 <HAL_DAC_ConvCpltCallbackCh1+0x1c4>)
 800a498:	f7f6 fa20 	bl	80008dc <HAL_DAC_Start_DMA>
 800a49c:	e01b      	b.n	800a4d6 <HAL_DAC_ConvCpltCallbackCh1+0x182>
		}else if(seqDirections[addressDirectionIndex] == 'y') {
 800a49e:	4b22      	ldr	r3, [pc, #136]	; (800a528 <HAL_DAC_ConvCpltCallbackCh1+0x1d4>)
 800a4a0:	781b      	ldrb	r3, [r3, #0]
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	4b21      	ldr	r3, [pc, #132]	; (800a52c <HAL_DAC_ConvCpltCallbackCh1+0x1d8>)
 800a4a6:	5c9b      	ldrb	r3, [r3, r2]
 800a4a8:	2b79      	cmp	r3, #121	; 0x79
 800a4aa:	d114      	bne.n	800a4d6 <HAL_DAC_ConvCpltCallbackCh1+0x182>
			if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDirections[2], sizeof(SEQUENCE)) != QSPI_OK)
 800a4ac:	4b20      	ldr	r3, [pc, #128]	; (800a530 <HAL_DAC_ConvCpltCallbackCh1+0x1dc>)
 800a4ae:	689b      	ldr	r3, [r3, #8]
 800a4b0:	4a17      	ldr	r2, [pc, #92]	; (800a510 <HAL_DAC_ConvCpltCallbackCh1+0x1bc>)
 800a4b2:	4619      	mov	r1, r3
 800a4b4:	4817      	ldr	r0, [pc, #92]	; (800a514 <HAL_DAC_ConvCpltCallbackCh1+0x1c0>)
 800a4b6:	f000 ffd3 	bl	800b460 <BSP_QSPI_Read>
 800a4ba:	4603      	mov	r3, r0
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d001      	beq.n	800a4c4 <HAL_DAC_ConvCpltCallbackCh1+0x170>
				Error_Handler();
 800a4c0:	f000 fda2 	bl	800b008 <Error_Handler>
			HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	9300      	str	r3, [sp, #0]
 800a4c8:	f649 4340 	movw	r3, #40000	; 0x9c40
 800a4cc:	4a11      	ldr	r2, [pc, #68]	; (800a514 <HAL_DAC_ConvCpltCallbackCh1+0x1c0>)
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	4811      	ldr	r0, [pc, #68]	; (800a518 <HAL_DAC_ConvCpltCallbackCh1+0x1c4>)
 800a4d2:	f7f6 fa03 	bl	80008dc <HAL_DAC_Start_DMA>
		}
		if (addressDirectionIndex == NUMBER_OF_DIRECTION) {
 800a4d6:	4b14      	ldr	r3, [pc, #80]	; (800a528 <HAL_DAC_ConvCpltCallbackCh1+0x1d4>)
 800a4d8:	781b      	ldrb	r3, [r3, #0]
 800a4da:	2b04      	cmp	r3, #4
 800a4dc:	d10a      	bne.n	800a4f4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800a4de:	2100      	movs	r1, #0
 800a4e0:	480d      	ldr	r0, [pc, #52]	; (800a518 <HAL_DAC_ConvCpltCallbackCh1+0x1c4>)
 800a4e2:	f7f6 fac7 	bl	8000a74 <HAL_DAC_Stop_DMA>
			HAL_UART_Transmit(&huart1, startTypingMessage, sizeof(startTypingMessage), 100);
 800a4e6:	2364      	movs	r3, #100	; 0x64
 800a4e8:	221c      	movs	r2, #28
 800a4ea:	490c      	ldr	r1, [pc, #48]	; (800a51c <HAL_DAC_ConvCpltCallbackCh1+0x1c8>)
 800a4ec:	480c      	ldr	r0, [pc, #48]	; (800a520 <HAL_DAC_ConvCpltCallbackCh1+0x1cc>)
 800a4ee:	f7fb ff87 	bl	8006400 <HAL_UART_Transmit>
		}
	}
}
 800a4f2:	e7ff      	b.n	800a4f4 <HAL_DAC_ConvCpltCallbackCh1+0x1a0>
 800a4f4:	bf00      	nop
 800a4f6:	3708      	adds	r7, #8
 800a4f8:	46bd      	mov	sp, r7
 800a4fa:	bd80      	pop	{r7, pc}
 800a4fc:	2004f769 	.word	0x2004f769
 800a500:	2004f76b 	.word	0x2004f76b
 800a504:	2004f774 	.word	0x2004f774
 800a508:	20000078 	.word	0x20000078
 800a50c:	20000040 	.word	0x20000040
 800a510:	00027100 	.word	0x00027100
 800a514:	20028664 	.word	0x20028664
 800a518:	20001278 	.word	0x20001278
 800a51c:	20000224 	.word	0x20000224
 800a520:	200014c8 	.word	0x200014c8
 800a524:	2004f76a 	.word	0x2004f76a
 800a528:	2004f775 	.word	0x2004f775
 800a52c:	20000080 	.word	0x20000080
 800a530:	20000068 	.word	0x20000068

0800a534 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter ) {
 800a534:	b580      	push	{r7, lr}
 800a536:	b086      	sub	sp, #24
 800a538:	af02      	add	r7, sp, #8
 800a53a:	6078      	str	r0, [r7, #4]

	if(actualRecorder && digitGame) {
 800a53c:	4b78      	ldr	r3, [pc, #480]	; (800a720 <HAL_DFSDM_FilterRegConvCpltCallback+0x1ec>)
 800a53e:	781b      	ldrb	r3, [r3, #0]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d06f      	beq.n	800a624 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>
 800a544:	4b77      	ldr	r3, [pc, #476]	; (800a724 <HAL_DFSDM_FilterRegConvCpltCallback+0x1f0>)
 800a546:	781b      	ldrb	r3, [r3, #0]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d06b      	beq.n	800a624 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>
	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 800a54c:	4876      	ldr	r0, [pc, #472]	; (800a728 <HAL_DFSDM_FilterRegConvCpltCallback+0x1f4>)
 800a54e:	f7f6 ff17 	bl	8001380 <HAL_DFSDM_FilterRegularStop_DMA>
		for(uint32_t i = 0 ; i < SEQUENCE_LENGTH; i++ ){
 800a552:	2300      	movs	r3, #0
 800a554:	60fb      	str	r3, [r7, #12]
 800a556:	e02b      	b.n	800a5b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x7c>
			SEQUENCE[i] = SEQUENCE[i] >> 8; // 24 bit signed  :  −8,388,608 : 8,388,607
 800a558:	4a74      	ldr	r2, [pc, #464]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a560:	121a      	asrs	r2, r3, #8
 800a562:	4972      	ldr	r1, [pc, #456]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(SEQUENCE[i] < 0 ) {
 800a56a:	4a70      	ldr	r2, [pc, #448]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a572:	2b00      	cmp	r3, #0
 800a574:	da09      	bge.n	800a58a <HAL_DFSDM_FilterRegConvCpltCallback+0x56>
				SEQUENCE[i]= SEQUENCE[i]+ (1<<24);
 800a576:	4a6d      	ldr	r2, [pc, #436]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a57e:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 800a582:	496a      	ldr	r1, [pc, #424]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
			if( SEQUENCE[i] >= 4096) {
 800a58a:	4a68      	ldr	r2, [pc, #416]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a592:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a596:	db08      	blt.n	800a5aa <HAL_DFSDM_FilterRegConvCpltCallback+0x76>
				SEQUENCE[i] = SEQUENCE[i] >> 12;
 800a598:	4a64      	ldr	r2, [pc, #400]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a59a:	68fb      	ldr	r3, [r7, #12]
 800a59c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5a0:	131a      	asrs	r2, r3, #12
 800a5a2:	4962      	ldr	r1, [pc, #392]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(uint32_t i = 0 ; i < SEQUENCE_LENGTH; i++ ){
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	3301      	adds	r3, #1
 800a5ae:	60fb      	str	r3, [r7, #12]
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d9ce      	bls.n	800a558 <HAL_DFSDM_FilterRegConvCpltCallback+0x24>
			}
		}
		if(BSP_QSPI_Write((uint8_t *) SEQUENCE, (uint32_t) addressDigits[pushButtonCounter], sizeof(SEQUENCE)) != QSPI_OK){
 800a5ba:	4b5d      	ldr	r3, [pc, #372]	; (800a730 <HAL_DFSDM_FilterRegConvCpltCallback+0x1fc>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a5d      	ldr	r2, [pc, #372]	; (800a734 <HAL_DFSDM_FilterRegConvCpltCallback+0x200>)
 800a5c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5c4:	4a5c      	ldr	r2, [pc, #368]	; (800a738 <HAL_DFSDM_FilterRegConvCpltCallback+0x204>)
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	4858      	ldr	r0, [pc, #352]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a5ca:	f000 ff9b 	bl	800b504 <BSP_QSPI_Write>
 800a5ce:	4603      	mov	r3, r0
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d001      	beq.n	800a5d8 <HAL_DFSDM_FilterRegConvCpltCallback+0xa4>
			Error_Handler();
 800a5d4:	f000 fd18 	bl	800b008 <Error_Handler>
		}
		if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t) addressDigits[pushButtonCounter], sizeof(SEQUENCE)) != QSPI_OK){
 800a5d8:	4b55      	ldr	r3, [pc, #340]	; (800a730 <HAL_DFSDM_FilterRegConvCpltCallback+0x1fc>)
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a55      	ldr	r2, [pc, #340]	; (800a734 <HAL_DFSDM_FilterRegConvCpltCallback+0x200>)
 800a5de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5e2:	4a55      	ldr	r2, [pc, #340]	; (800a738 <HAL_DFSDM_FilterRegConvCpltCallback+0x204>)
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4855      	ldr	r0, [pc, #340]	; (800a73c <HAL_DFSDM_FilterRegConvCpltCallback+0x208>)
 800a5e8:	f000 ff3a 	bl	800b460 <BSP_QSPI_Read>
 800a5ec:	4603      	mov	r3, r0
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d001      	beq.n	800a5f6 <HAL_DFSDM_FilterRegConvCpltCallback+0xc2>
			Error_Handler();
 800a5f2:	f000 fd09 	bl	800b008 <Error_Handler>
		}
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	9300      	str	r3, [sp, #0]
 800a5fa:	f649 4340 	movw	r3, #40000	; 0x9c40
 800a5fe:	4a4f      	ldr	r2, [pc, #316]	; (800a73c <HAL_DFSDM_FilterRegConvCpltCallback+0x208>)
 800a600:	2100      	movs	r1, #0
 800a602:	484f      	ldr	r0, [pc, #316]	; (800a740 <HAL_DFSDM_FilterRegConvCpltCallback+0x20c>)
 800a604:	f7f6 f96a 	bl	80008dc <HAL_DAC_Start_DMA>
		pushButtonCounter = (pushButtonCounter + 1) % 10;
 800a608:	4b49      	ldr	r3, [pc, #292]	; (800a730 <HAL_DFSDM_FilterRegConvCpltCallback+0x1fc>)
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	1c59      	adds	r1, r3, #1
 800a60e:	4b4d      	ldr	r3, [pc, #308]	; (800a744 <HAL_DFSDM_FilterRegConvCpltCallback+0x210>)
 800a610:	fba3 2301 	umull	r2, r3, r3, r1
 800a614:	08da      	lsrs	r2, r3, #3
 800a616:	4613      	mov	r3, r2
 800a618:	009b      	lsls	r3, r3, #2
 800a61a:	4413      	add	r3, r2
 800a61c:	005b      	lsls	r3, r3, #1
 800a61e:	1aca      	subs	r2, r1, r3
 800a620:	4b43      	ldr	r3, [pc, #268]	; (800a730 <HAL_DFSDM_FilterRegConvCpltCallback+0x1fc>)
 800a622:	601a      	str	r2, [r3, #0]
	}


	if(actualRecorder && directionGame) {
 800a624:	4b3e      	ldr	r3, [pc, #248]	; (800a720 <HAL_DFSDM_FilterRegConvCpltCallback+0x1ec>)
 800a626:	781b      	ldrb	r3, [r3, #0]
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d074      	beq.n	800a716 <HAL_DFSDM_FilterRegConvCpltCallback+0x1e2>
 800a62c:	4b46      	ldr	r3, [pc, #280]	; (800a748 <HAL_DFSDM_FilterRegConvCpltCallback+0x214>)
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d070      	beq.n	800a716 <HAL_DFSDM_FilterRegConvCpltCallback+0x1e2>
	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 800a634:	483c      	ldr	r0, [pc, #240]	; (800a728 <HAL_DFSDM_FilterRegConvCpltCallback+0x1f4>)
 800a636:	f7f6 fea3 	bl	8001380 <HAL_DFSDM_FilterRegularStop_DMA>
		for(uint32_t i = 0 ; i < SEQUENCE_LENGTH; i++ ){
 800a63a:	2300      	movs	r3, #0
 800a63c:	60bb      	str	r3, [r7, #8]
 800a63e:	e037      	b.n	800a6b0 <HAL_DFSDM_FilterRegConvCpltCallback+0x17c>
			SEQUENCE[i] = SEQUENCE[i] >> 8; // 24 bit signed  :  −8,388,608 : 8,388,607
 800a640:	4a3a      	ldr	r2, [pc, #232]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a642:	68bb      	ldr	r3, [r7, #8]
 800a644:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a648:	121a      	asrs	r2, r3, #8
 800a64a:	4938      	ldr	r1, [pc, #224]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if(SEQUENCE[i] < 0 ) {
 800a652:	4a36      	ldr	r2, [pc, #216]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	da09      	bge.n	800a672 <HAL_DFSDM_FilterRegConvCpltCallback+0x13e>
				SEQUENCE[i]= SEQUENCE[i]+ (1<<24);
 800a65e:	4a33      	ldr	r2, [pc, #204]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a666:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 800a66a:	4930      	ldr	r1, [pc, #192]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
			if( SEQUENCE[i] >= 4096) {
 800a672:	4a2e      	ldr	r2, [pc, #184]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a67a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a67e:	db08      	blt.n	800a692 <HAL_DFSDM_FilterRegConvCpltCallback+0x15e>
				SEQUENCE[i] = SEQUENCE[i] >> 12;
 800a680:	4a2a      	ldr	r2, [pc, #168]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a688:	131a      	asrs	r2, r3, #12
 800a68a:	4928      	ldr	r1, [pc, #160]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a68c:	68bb      	ldr	r3, [r7, #8]
 800a68e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			}
			if(SEQUENCE[i] <=  4000) {
 800a692:	4a26      	ldr	r2, [pc, #152]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a694:	68bb      	ldr	r3, [r7, #8]
 800a696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a69a:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 800a69e:	dc04      	bgt.n	800a6aa <HAL_DFSDM_FilterRegConvCpltCallback+0x176>
				SEQUENCE[i] = 0;
 800a6a0:	4a22      	ldr	r2, [pc, #136]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(uint32_t i = 0 ; i < SEQUENCE_LENGTH; i++ ){
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	3301      	adds	r3, #1
 800a6ae:	60bb      	str	r3, [r7, #8]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	f649 423f 	movw	r2, #39999	; 0x9c3f
 800a6b6:	4293      	cmp	r3, r2
 800a6b8:	d9c2      	bls.n	800a640 <HAL_DFSDM_FilterRegConvCpltCallback+0x10c>
			}
		}
		if(BSP_QSPI_Write((uint8_t *) SEQUENCE, (uint32_t) addressDirections[pushButtonCounter], sizeof(SEQUENCE)) != QSPI_OK){
 800a6ba:	4b1d      	ldr	r3, [pc, #116]	; (800a730 <HAL_DFSDM_FilterRegConvCpltCallback+0x1fc>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	4a23      	ldr	r2, [pc, #140]	; (800a74c <HAL_DFSDM_FilterRegConvCpltCallback+0x218>)
 800a6c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6c4:	4a1c      	ldr	r2, [pc, #112]	; (800a738 <HAL_DFSDM_FilterRegConvCpltCallback+0x204>)
 800a6c6:	4619      	mov	r1, r3
 800a6c8:	4818      	ldr	r0, [pc, #96]	; (800a72c <HAL_DFSDM_FilterRegConvCpltCallback+0x1f8>)
 800a6ca:	f000 ff1b 	bl	800b504 <BSP_QSPI_Write>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d001      	beq.n	800a6d8 <HAL_DFSDM_FilterRegConvCpltCallback+0x1a4>
			Error_Handler();
 800a6d4:	f000 fc98 	bl	800b008 <Error_Handler>
		}
		if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t) addressDirections[pushButtonCounter], sizeof(SEQUENCE)) != QSPI_OK){
 800a6d8:	4b15      	ldr	r3, [pc, #84]	; (800a730 <HAL_DFSDM_FilterRegConvCpltCallback+0x1fc>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	4a1b      	ldr	r2, [pc, #108]	; (800a74c <HAL_DFSDM_FilterRegConvCpltCallback+0x218>)
 800a6de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6e2:	4a15      	ldr	r2, [pc, #84]	; (800a738 <HAL_DFSDM_FilterRegConvCpltCallback+0x204>)
 800a6e4:	4619      	mov	r1, r3
 800a6e6:	4815      	ldr	r0, [pc, #84]	; (800a73c <HAL_DFSDM_FilterRegConvCpltCallback+0x208>)
 800a6e8:	f000 feba 	bl	800b460 <BSP_QSPI_Read>
 800a6ec:	4603      	mov	r3, r0
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d001      	beq.n	800a6f6 <HAL_DFSDM_FilterRegConvCpltCallback+0x1c2>
			Error_Handler();
 800a6f2:	f000 fc89 	bl	800b008 <Error_Handler>
		}
		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	9300      	str	r3, [sp, #0]
 800a6fa:	f649 4340 	movw	r3, #40000	; 0x9c40
 800a6fe:	4a0f      	ldr	r2, [pc, #60]	; (800a73c <HAL_DFSDM_FilterRegConvCpltCallback+0x208>)
 800a700:	2100      	movs	r1, #0
 800a702:	480f      	ldr	r0, [pc, #60]	; (800a740 <HAL_DFSDM_FilterRegConvCpltCallback+0x20c>)
 800a704:	f7f6 f8ea 	bl	80008dc <HAL_DAC_Start_DMA>
		pushButtonCounter = (pushButtonCounter + 1) % 4;
 800a708:	4b09      	ldr	r3, [pc, #36]	; (800a730 <HAL_DFSDM_FilterRegConvCpltCallback+0x1fc>)
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	3301      	adds	r3, #1
 800a70e:	f003 0303 	and.w	r3, r3, #3
 800a712:	4a07      	ldr	r2, [pc, #28]	; (800a730 <HAL_DFSDM_FilterRegConvCpltCallback+0x1fc>)
 800a714:	6013      	str	r3, [r2, #0]
	}

}
 800a716:	bf00      	nop
 800a718:	3710      	adds	r7, #16
 800a71a:	46bd      	mov	sp, r7
 800a71c:	bd80      	pop	{r7, pc}
 800a71e:	bf00      	nop
 800a720:	2004f76c 	.word	0x2004f76c
 800a724:	2004f76b 	.word	0x2004f76b
 800a728:	200012ec 	.word	0x200012ec
 800a72c:	20001564 	.word	0x20001564
 800a730:	2004f764 	.word	0x2004f764
 800a734:	20000040 	.word	0x20000040
 800a738:	00027100 	.word	0x00027100
 800a73c:	20028664 	.word	0x20028664
 800a740:	20001278 	.word	0x20001278
 800a744:	cccccccd 	.word	0xcccccccd
 800a748:	2004f76a 	.word	0x2004f76a
 800a74c:	20000068 	.word	0x20000068

0800a750 <HAL_UART_RxCpltCallback>:

//get the data byte by byte
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800a750:	b580      	push	{r7, lr}
 800a752:	b088      	sub	sp, #32
 800a754:	af02      	add	r7, sp, #8
 800a756:	6078      	str	r0, [r7, #4]

  if (start_yn[0] == '0'){
 800a758:	4b89      	ldr	r3, [pc, #548]	; (800a980 <HAL_UART_RxCpltCallback+0x230>)
 800a75a:	781b      	ldrb	r3, [r3, #0]
 800a75c:	2b30      	cmp	r3, #48	; 0x30
 800a75e:	d115      	bne.n	800a78c <HAL_UART_RxCpltCallback+0x3c>
	  //you are a recorder (player 1)
	  recorder = 1;
 800a760:	4b88      	ldr	r3, [pc, #544]	; (800a984 <HAL_UART_RxCpltCallback+0x234>)
 800a762:	2201      	movs	r2, #1
 800a764:	701a      	strb	r2, [r3, #0]
	  player = 0;
 800a766:	4b88      	ldr	r3, [pc, #544]	; (800a988 <HAL_UART_RxCpltCallback+0x238>)
 800a768:	2200      	movs	r2, #0
 800a76a:	701a      	strb	r2, [r3, #0]
	  memset(start_yn,0,CHOICE);
 800a76c:	2202      	movs	r2, #2
 800a76e:	2100      	movs	r1, #0
 800a770:	4883      	ldr	r0, [pc, #524]	; (800a980 <HAL_UART_RxCpltCallback+0x230>)
 800a772:	f001 feaf 	bl	800c4d4 <memset>
	  // send player message
	  HAL_UART_Transmit(&huart1, chooseModeMessage, sizeof(chooseModeMessage), 100);
 800a776:	2364      	movs	r3, #100	; 0x64
 800a778:	2243      	movs	r2, #67	; 0x43
 800a77a:	4984      	ldr	r1, [pc, #528]	; (800a98c <HAL_UART_RxCpltCallback+0x23c>)
 800a77c:	4884      	ldr	r0, [pc, #528]	; (800a990 <HAL_UART_RxCpltCallback+0x240>)
 800a77e:	f7fb fe3f 	bl	8006400 <HAL_UART_Transmit>
	  //game mode 0 or 1
	  HAL_UART_Receive_IT(&huart1, recorder_game_mode, CHOICE);
 800a782:	2202      	movs	r2, #2
 800a784:	4983      	ldr	r1, [pc, #524]	; (800a994 <HAL_UART_RxCpltCallback+0x244>)
 800a786:	4882      	ldr	r0, [pc, #520]	; (800a990 <HAL_UART_RxCpltCallback+0x240>)
 800a788:	f7fb fed2 	bl	8006530 <HAL_UART_Receive_IT>
  }

  if (recorder_game_mode[0] == '1'){
 800a78c:	4b81      	ldr	r3, [pc, #516]	; (800a994 <HAL_UART_RxCpltCallback+0x244>)
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	2b31      	cmp	r3, #49	; 0x31
 800a792:	d110      	bne.n	800a7b6 <HAL_UART_RxCpltCallback+0x66>
	  directionGame = 1;
 800a794:	4b80      	ldr	r3, [pc, #512]	; (800a998 <HAL_UART_RxCpltCallback+0x248>)
 800a796:	2201      	movs	r2, #1
 800a798:	701a      	strb	r2, [r3, #0]
	  digitGame = 0;
 800a79a:	4b80      	ldr	r3, [pc, #512]	; (800a99c <HAL_UART_RxCpltCallback+0x24c>)
 800a79c:	2200      	movs	r2, #0
 800a79e:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, direcRecorderMessage, sizeof(direcRecorderMessage), 100);
 800a7a0:	2364      	movs	r3, #100	; 0x64
 800a7a2:	2240      	movs	r2, #64	; 0x40
 800a7a4:	497e      	ldr	r1, [pc, #504]	; (800a9a0 <HAL_UART_RxCpltCallback+0x250>)
 800a7a6:	487a      	ldr	r0, [pc, #488]	; (800a990 <HAL_UART_RxCpltCallback+0x240>)
 800a7a8:	f7fb fe2a 	bl	8006400 <HAL_UART_Transmit>
	  //receive the answer in direction_reply
	  HAL_UART_Receive_IT(&huart1, direction_reply, NUMBER_OF_DIRECTION+1);
 800a7ac:	2205      	movs	r2, #5
 800a7ae:	497d      	ldr	r1, [pc, #500]	; (800a9a4 <HAL_UART_RxCpltCallback+0x254>)
 800a7b0:	4877      	ldr	r0, [pc, #476]	; (800a990 <HAL_UART_RxCpltCallback+0x240>)
 800a7b2:	f7fb febd 	bl	8006530 <HAL_UART_Receive_IT>


  }

  if (direction_reply[0] != '\000'){
 800a7b6:	4b7b      	ldr	r3, [pc, #492]	; (800a9a4 <HAL_UART_RxCpltCallback+0x254>)
 800a7b8:	781b      	ldrb	r3, [r3, #0]
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f000 809d 	beq.w	800a8fa <HAL_UART_RxCpltCallback+0x1aa>

	  HAL_UART_Transmit(&huart1, clearCommand, sizeof(clearCommand), 100);
 800a7c0:	2364      	movs	r3, #100	; 0x64
 800a7c2:	2205      	movs	r2, #5
 800a7c4:	4978      	ldr	r1, [pc, #480]	; (800a9a8 <HAL_UART_RxCpltCallback+0x258>)
 800a7c6:	4872      	ldr	r0, [pc, #456]	; (800a990 <HAL_UART_RxCpltCallback+0x240>)
 800a7c8:	f7fb fe1a 	bl	8006400 <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart1, startPlayer2Message, sizeof(startPlayer2Message), 100);
 800a7cc:	2364      	movs	r3, #100	; 0x64
 800a7ce:	220c      	movs	r2, #12
 800a7d0:	4976      	ldr	r1, [pc, #472]	; (800a9ac <HAL_UART_RxCpltCallback+0x25c>)
 800a7d2:	486f      	ldr	r0, [pc, #444]	; (800a990 <HAL_UART_RxCpltCallback+0x240>)
 800a7d4:	f7fb fe14 	bl	8006400 <HAL_UART_Transmit>

	  for (int i=0 ; i<NUMBER_OF_DIRECTION; i++) {
 800a7d8:	2300      	movs	r3, #0
 800a7da:	617b      	str	r3, [r7, #20]
 800a7dc:	e00b      	b.n	800a7f6 <HAL_UART_RxCpltCallback+0xa6>
		  seqDirections[i] = direction_reply[i];
 800a7de:	4a71      	ldr	r2, [pc, #452]	; (800a9a4 <HAL_UART_RxCpltCallback+0x254>)
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	7819      	ldrb	r1, [r3, #0]
 800a7e6:	4a72      	ldr	r2, [pc, #456]	; (800a9b0 <HAL_UART_RxCpltCallback+0x260>)
 800a7e8:	697b      	ldr	r3, [r7, #20]
 800a7ea:	4413      	add	r3, r2
 800a7ec:	460a      	mov	r2, r1
 800a7ee:	701a      	strb	r2, [r3, #0]
	  for (int i=0 ; i<NUMBER_OF_DIRECTION; i++) {
 800a7f0:	697b      	ldr	r3, [r7, #20]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	617b      	str	r3, [r7, #20]
 800a7f6:	697b      	ldr	r3, [r7, #20]
 800a7f8:	2b03      	cmp	r3, #3
 800a7fa:	ddf0      	ble.n	800a7de <HAL_UART_RxCpltCallback+0x8e>
	  }

	  player = 1;
 800a7fc:	4b62      	ldr	r3, [pc, #392]	; (800a988 <HAL_UART_RxCpltCallback+0x238>)
 800a7fe:	2201      	movs	r2, #1
 800a800:	701a      	strb	r2, [r3, #0]
	  direction_reply[0] = '\000';
 800a802:	4b68      	ldr	r3, [pc, #416]	; (800a9a4 <HAL_UART_RxCpltCallback+0x254>)
 800a804:	2200      	movs	r2, #0
 800a806:	701a      	strb	r2, [r3, #0]

	  HAL_UART_Transmit(&huart1, waitForSpeakerDirectionMessage, sizeof(waitForSpeakerDirectionMessage), 100);
 800a808:	2364      	movs	r3, #100	; 0x64
 800a80a:	224e      	movs	r2, #78	; 0x4e
 800a80c:	4969      	ldr	r1, [pc, #420]	; (800a9b4 <HAL_UART_RxCpltCallback+0x264>)
 800a80e:	4860      	ldr	r0, [pc, #384]	; (800a990 <HAL_UART_RxCpltCallback+0x240>)
 800a810:	f7fb fdf6 	bl	8006400 <HAL_UART_Transmit>

	  //send to HAL_DAC...once cmplt user should move the board

	  if(seqDirections[addressDirectionIndex] == 'X') {
 800a814:	4b68      	ldr	r3, [pc, #416]	; (800a9b8 <HAL_UART_RxCpltCallback+0x268>)
 800a816:	781b      	ldrb	r3, [r3, #0]
 800a818:	461a      	mov	r2, r3
 800a81a:	4b65      	ldr	r3, [pc, #404]	; (800a9b0 <HAL_UART_RxCpltCallback+0x260>)
 800a81c:	5c9b      	ldrb	r3, [r3, r2]
 800a81e:	2b58      	cmp	r3, #88	; 0x58
 800a820:	d115      	bne.n	800a84e <HAL_UART_RxCpltCallback+0xfe>
	  		if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDirections[1], sizeof(SEQUENCE)) != QSPI_OK)
 800a822:	4b66      	ldr	r3, [pc, #408]	; (800a9bc <HAL_UART_RxCpltCallback+0x26c>)
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	4a66      	ldr	r2, [pc, #408]	; (800a9c0 <HAL_UART_RxCpltCallback+0x270>)
 800a828:	4619      	mov	r1, r3
 800a82a:	4866      	ldr	r0, [pc, #408]	; (800a9c4 <HAL_UART_RxCpltCallback+0x274>)
 800a82c:	f000 fe18 	bl	800b460 <BSP_QSPI_Read>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d001      	beq.n	800a83a <HAL_UART_RxCpltCallback+0xea>
	  			Error_Handler();
 800a836:	f000 fbe7 	bl	800b008 <Error_Handler>
	  		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800a83a:	2300      	movs	r3, #0
 800a83c:	9300      	str	r3, [sp, #0]
 800a83e:	f649 4340 	movw	r3, #40000	; 0x9c40
 800a842:	4a60      	ldr	r2, [pc, #384]	; (800a9c4 <HAL_UART_RxCpltCallback+0x274>)
 800a844:	2100      	movs	r1, #0
 800a846:	4860      	ldr	r0, [pc, #384]	; (800a9c8 <HAL_UART_RxCpltCallback+0x278>)
 800a848:	f7f6 f848 	bl	80008dc <HAL_DAC_Start_DMA>
 800a84c:	e055      	b.n	800a8fa <HAL_UART_RxCpltCallback+0x1aa>
	  }else if(seqDirections[addressDirectionIndex] == 'Y') {
 800a84e:	4b5a      	ldr	r3, [pc, #360]	; (800a9b8 <HAL_UART_RxCpltCallback+0x268>)
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	461a      	mov	r2, r3
 800a854:	4b56      	ldr	r3, [pc, #344]	; (800a9b0 <HAL_UART_RxCpltCallback+0x260>)
 800a856:	5c9b      	ldrb	r3, [r3, r2]
 800a858:	2b59      	cmp	r3, #89	; 0x59
 800a85a:	d115      	bne.n	800a888 <HAL_UART_RxCpltCallback+0x138>
	  		if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDirections[3], sizeof(SEQUENCE)) != QSPI_OK)
 800a85c:	4b57      	ldr	r3, [pc, #348]	; (800a9bc <HAL_UART_RxCpltCallback+0x26c>)
 800a85e:	68db      	ldr	r3, [r3, #12]
 800a860:	4a57      	ldr	r2, [pc, #348]	; (800a9c0 <HAL_UART_RxCpltCallback+0x270>)
 800a862:	4619      	mov	r1, r3
 800a864:	4857      	ldr	r0, [pc, #348]	; (800a9c4 <HAL_UART_RxCpltCallback+0x274>)
 800a866:	f000 fdfb 	bl	800b460 <BSP_QSPI_Read>
 800a86a:	4603      	mov	r3, r0
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <HAL_UART_RxCpltCallback+0x124>
	  			Error_Handler();
 800a870:	f000 fbca 	bl	800b008 <Error_Handler>
	  		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800a874:	2300      	movs	r3, #0
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	f649 4340 	movw	r3, #40000	; 0x9c40
 800a87c:	4a51      	ldr	r2, [pc, #324]	; (800a9c4 <HAL_UART_RxCpltCallback+0x274>)
 800a87e:	2100      	movs	r1, #0
 800a880:	4851      	ldr	r0, [pc, #324]	; (800a9c8 <HAL_UART_RxCpltCallback+0x278>)
 800a882:	f7f6 f82b 	bl	80008dc <HAL_DAC_Start_DMA>
 800a886:	e038      	b.n	800a8fa <HAL_UART_RxCpltCallback+0x1aa>
	  }else if(seqDirections[addressDirectionIndex] == 'x') {
 800a888:	4b4b      	ldr	r3, [pc, #300]	; (800a9b8 <HAL_UART_RxCpltCallback+0x268>)
 800a88a:	781b      	ldrb	r3, [r3, #0]
 800a88c:	461a      	mov	r2, r3
 800a88e:	4b48      	ldr	r3, [pc, #288]	; (800a9b0 <HAL_UART_RxCpltCallback+0x260>)
 800a890:	5c9b      	ldrb	r3, [r3, r2]
 800a892:	2b78      	cmp	r3, #120	; 0x78
 800a894:	d115      	bne.n	800a8c2 <HAL_UART_RxCpltCallback+0x172>
	  		if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDirections[0], sizeof(SEQUENCE)) != QSPI_OK)
 800a896:	4b49      	ldr	r3, [pc, #292]	; (800a9bc <HAL_UART_RxCpltCallback+0x26c>)
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	4a49      	ldr	r2, [pc, #292]	; (800a9c0 <HAL_UART_RxCpltCallback+0x270>)
 800a89c:	4619      	mov	r1, r3
 800a89e:	4849      	ldr	r0, [pc, #292]	; (800a9c4 <HAL_UART_RxCpltCallback+0x274>)
 800a8a0:	f000 fdde 	bl	800b460 <BSP_QSPI_Read>
 800a8a4:	4603      	mov	r3, r0
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d001      	beq.n	800a8ae <HAL_UART_RxCpltCallback+0x15e>
	  			Error_Handler();
 800a8aa:	f000 fbad 	bl	800b008 <Error_Handler>
	  		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800a8ae:	2300      	movs	r3, #0
 800a8b0:	9300      	str	r3, [sp, #0]
 800a8b2:	f649 4340 	movw	r3, #40000	; 0x9c40
 800a8b6:	4a43      	ldr	r2, [pc, #268]	; (800a9c4 <HAL_UART_RxCpltCallback+0x274>)
 800a8b8:	2100      	movs	r1, #0
 800a8ba:	4843      	ldr	r0, [pc, #268]	; (800a9c8 <HAL_UART_RxCpltCallback+0x278>)
 800a8bc:	f7f6 f80e 	bl	80008dc <HAL_DAC_Start_DMA>
 800a8c0:	e01b      	b.n	800a8fa <HAL_UART_RxCpltCallback+0x1aa>
	  }else if(seqDirections[addressDirectionIndex] == 'y') {
 800a8c2:	4b3d      	ldr	r3, [pc, #244]	; (800a9b8 <HAL_UART_RxCpltCallback+0x268>)
 800a8c4:	781b      	ldrb	r3, [r3, #0]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	4b39      	ldr	r3, [pc, #228]	; (800a9b0 <HAL_UART_RxCpltCallback+0x260>)
 800a8ca:	5c9b      	ldrb	r3, [r3, r2]
 800a8cc:	2b79      	cmp	r3, #121	; 0x79
 800a8ce:	d114      	bne.n	800a8fa <HAL_UART_RxCpltCallback+0x1aa>
	  		if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDirections[2], sizeof(SEQUENCE)) != QSPI_OK)
 800a8d0:	4b3a      	ldr	r3, [pc, #232]	; (800a9bc <HAL_UART_RxCpltCallback+0x26c>)
 800a8d2:	689b      	ldr	r3, [r3, #8]
 800a8d4:	4a3a      	ldr	r2, [pc, #232]	; (800a9c0 <HAL_UART_RxCpltCallback+0x270>)
 800a8d6:	4619      	mov	r1, r3
 800a8d8:	483a      	ldr	r0, [pc, #232]	; (800a9c4 <HAL_UART_RxCpltCallback+0x274>)
 800a8da:	f000 fdc1 	bl	800b460 <BSP_QSPI_Read>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d001      	beq.n	800a8e8 <HAL_UART_RxCpltCallback+0x198>
	  			Error_Handler();
 800a8e4:	f000 fb90 	bl	800b008 <Error_Handler>
	  		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	9300      	str	r3, [sp, #0]
 800a8ec:	f649 4340 	movw	r3, #40000	; 0x9c40
 800a8f0:	4a34      	ldr	r2, [pc, #208]	; (800a9c4 <HAL_UART_RxCpltCallback+0x274>)
 800a8f2:	2100      	movs	r1, #0
 800a8f4:	4834      	ldr	r0, [pc, #208]	; (800a9c8 <HAL_UART_RxCpltCallback+0x278>)
 800a8f6:	f7f5 fff1 	bl	80008dc <HAL_DAC_Start_DMA>
	  }
  }


  /////////////// Recorder Digits ////////////////////////
  if (recorder_game_mode[0] == '0'){
 800a8fa:	4b26      	ldr	r3, [pc, #152]	; (800a994 <HAL_UART_RxCpltCallback+0x244>)
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2b30      	cmp	r3, #48	; 0x30
 800a900:	d115      	bne.n	800a92e <HAL_UART_RxCpltCallback+0x1de>
	  memset(recorder_game_mode,0,2);
 800a902:	2202      	movs	r2, #2
 800a904:	2100      	movs	r1, #0
 800a906:	4823      	ldr	r0, [pc, #140]	; (800a994 <HAL_UART_RxCpltCallback+0x244>)
 800a908:	f001 fde4 	bl	800c4d4 <memset>
	  directionGame = 0;
 800a90c:	4b22      	ldr	r3, [pc, #136]	; (800a998 <HAL_UART_RxCpltCallback+0x248>)
 800a90e:	2200      	movs	r2, #0
 800a910:	701a      	strb	r2, [r3, #0]
	  digitGame = 1;
 800a912:	4b22      	ldr	r3, [pc, #136]	; (800a99c <HAL_UART_RxCpltCallback+0x24c>)
 800a914:	2201      	movs	r2, #1
 800a916:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, recorderMessage, sizeof(recorderMessage), 100);
 800a918:	2364      	movs	r3, #100	; 0x64
 800a91a:	223b      	movs	r2, #59	; 0x3b
 800a91c:	492b      	ldr	r1, [pc, #172]	; (800a9cc <HAL_UART_RxCpltCallback+0x27c>)
 800a91e:	481c      	ldr	r0, [pc, #112]	; (800a990 <HAL_UART_RxCpltCallback+0x240>)
 800a920:	f7fb fd6e 	bl	8006400 <HAL_UART_Transmit>
	  //receive the answer in digit_reply
	  HAL_UART_Receive_IT(&huart1, digit_reply, NUMBER_OF_DIGITS+1);
 800a924:	2206      	movs	r2, #6
 800a926:	492a      	ldr	r1, [pc, #168]	; (800a9d0 <HAL_UART_RxCpltCallback+0x280>)
 800a928:	4819      	ldr	r0, [pc, #100]	; (800a990 <HAL_UART_RxCpltCallback+0x240>)
 800a92a:	f7fb fe01 	bl	8006530 <HAL_UART_Receive_IT>
  }


  if (digit_reply[0] != '\000'){
 800a92e:	4b28      	ldr	r3, [pc, #160]	; (800a9d0 <HAL_UART_RxCpltCallback+0x280>)
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 8090 	beq.w	800aa58 <HAL_UART_RxCpltCallback+0x308>

	  HAL_UART_Transmit(&huart1, clearCommand, sizeof(clearCommand), 100);
 800a938:	2364      	movs	r3, #100	; 0x64
 800a93a:	2205      	movs	r2, #5
 800a93c:	491a      	ldr	r1, [pc, #104]	; (800a9a8 <HAL_UART_RxCpltCallback+0x258>)
 800a93e:	4814      	ldr	r0, [pc, #80]	; (800a990 <HAL_UART_RxCpltCallback+0x240>)
 800a940:	f7fb fd5e 	bl	8006400 <HAL_UART_Transmit>

	  HAL_UART_Transmit(&huart1, startPlayer2Message, sizeof(startPlayer2Message), 100);
 800a944:	2364      	movs	r3, #100	; 0x64
 800a946:	220c      	movs	r2, #12
 800a948:	4918      	ldr	r1, [pc, #96]	; (800a9ac <HAL_UART_RxCpltCallback+0x25c>)
 800a94a:	4811      	ldr	r0, [pc, #68]	; (800a990 <HAL_UART_RxCpltCallback+0x240>)
 800a94c:	f7fb fd58 	bl	8006400 <HAL_UART_Transmit>


	  for (int i = 0; i < (sizeof(digit_reply))/(sizeof(digit_reply[0])); i++){
 800a950:	2300      	movs	r3, #0
 800a952:	613b      	str	r3, [r7, #16]
 800a954:	e00d      	b.n	800a972 <HAL_UART_RxCpltCallback+0x222>
		  int_converter[i] = digit_reply[i] - '0';
 800a956:	4a1e      	ldr	r2, [pc, #120]	; (800a9d0 <HAL_UART_RxCpltCallback+0x280>)
 800a958:	693b      	ldr	r3, [r7, #16]
 800a95a:	4413      	add	r3, r2
 800a95c:	781b      	ldrb	r3, [r3, #0]
 800a95e:	3b30      	subs	r3, #48	; 0x30
 800a960:	b2d9      	uxtb	r1, r3
 800a962:	4a1c      	ldr	r2, [pc, #112]	; (800a9d4 <HAL_UART_RxCpltCallback+0x284>)
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	4413      	add	r3, r2
 800a968:	460a      	mov	r2, r1
 800a96a:	701a      	strb	r2, [r3, #0]
	  for (int i = 0; i < (sizeof(digit_reply))/(sizeof(digit_reply[0])); i++){
 800a96c:	693b      	ldr	r3, [r7, #16]
 800a96e:	3301      	adds	r3, #1
 800a970:	613b      	str	r3, [r7, #16]
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	2b05      	cmp	r3, #5
 800a976:	d9ee      	bls.n	800a956 <HAL_UART_RxCpltCallback+0x206>
   	  }

	  for (int i=0 ; i<NUMBER_OF_DIGITS; i++) {
 800a978:	2300      	movs	r3, #0
 800a97a:	60fb      	str	r3, [r7, #12]
 800a97c:	e038      	b.n	800a9f0 <HAL_UART_RxCpltCallback+0x2a0>
 800a97e:	bf00      	nop
 800a980:	2004f784 	.word	0x2004f784
 800a984:	2004f768 	.word	0x2004f768
 800a988:	2004f769 	.word	0x2004f769
 800a98c:	20000100 	.word	0x20000100
 800a990:	200014c8 	.word	0x200014c8
 800a994:	2004f78c 	.word	0x2004f78c
 800a998:	2004f76a 	.word	0x2004f76a
 800a99c:	2004f76b 	.word	0x2004f76b
 800a9a0:	20000288 	.word	0x20000288
 800a9a4:	2004f7a0 	.word	0x2004f7a0
 800a9a8:	200002c8 	.word	0x200002c8
 800a9ac:	20000240 	.word	0x20000240
 800a9b0:	20000080 	.word	0x20000080
 800a9b4:	20000188 	.word	0x20000188
 800a9b8:	2004f775 	.word	0x2004f775
 800a9bc:	20000068 	.word	0x20000068
 800a9c0:	00027100 	.word	0x00027100
 800a9c4:	20028664 	.word	0x20028664
 800a9c8:	20001278 	.word	0x20001278
 800a9cc:	2000024c 	.word	0x2000024c
 800a9d0:	2004f790 	.word	0x2004f790
 800a9d4:	2004f798 	.word	0x2004f798
	 		  seqDigits[i] = int_converter[i];
 800a9d8:	4aa8      	ldr	r2, [pc, #672]	; (800ac7c <HAL_UART_RxCpltCallback+0x52c>)
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	4413      	add	r3, r2
 800a9de:	7819      	ldrb	r1, [r3, #0]
 800a9e0:	4aa7      	ldr	r2, [pc, #668]	; (800ac80 <HAL_UART_RxCpltCallback+0x530>)
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	4413      	add	r3, r2
 800a9e6:	460a      	mov	r2, r1
 800a9e8:	701a      	strb	r2, [r3, #0]
	  for (int i=0 ; i<NUMBER_OF_DIGITS; i++) {
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2b04      	cmp	r3, #4
 800a9f4:	ddf0      	ble.n	800a9d8 <HAL_UART_RxCpltCallback+0x288>
	  }
	  strcpy(digit_answer,  digit_reply);
 800a9f6:	49a3      	ldr	r1, [pc, #652]	; (800ac84 <HAL_UART_RxCpltCallback+0x534>)
 800a9f8:	48a3      	ldr	r0, [pc, #652]	; (800ac88 <HAL_UART_RxCpltCallback+0x538>)
 800a9fa:	f001 fd73 	bl	800c4e4 <strcpy>

	  player = 1;
 800a9fe:	4ba3      	ldr	r3, [pc, #652]	; (800ac8c <HAL_UART_RxCpltCallback+0x53c>)
 800aa00:	2201      	movs	r2, #1
 800aa02:	701a      	strb	r2, [r3, #0]
	  digit_reply[0] = '\000';
 800aa04:	4b9f      	ldr	r3, [pc, #636]	; (800ac84 <HAL_UART_RxCpltCallback+0x534>)
 800aa06:	2200      	movs	r2, #0
 800aa08:	701a      	strb	r2, [r3, #0]

	  HAL_UART_Transmit(&huart1, waitForSpeakerDigitMessage, sizeof(waitForSpeakerDigitMessage), 100);
 800aa0a:	2364      	movs	r3, #100	; 0x64
 800aa0c:	2244      	movs	r2, #68	; 0x44
 800aa0e:	49a0      	ldr	r1, [pc, #640]	; (800ac90 <HAL_UART_RxCpltCallback+0x540>)
 800aa10:	48a0      	ldr	r0, [pc, #640]	; (800ac94 <HAL_UART_RxCpltCallback+0x544>)
 800aa12:	f7fb fcf5 	bl	8006400 <HAL_UART_Transmit>

	  //send to HAL_DAC...once cmplt should ask user to start typing
	  if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDigits[seqDigits[addressDigitIndex]], sizeof(SEQUENCE)) != QSPI_OK)
 800aa16:	4ba0      	ldr	r3, [pc, #640]	; (800ac98 <HAL_UART_RxCpltCallback+0x548>)
 800aa18:	781b      	ldrb	r3, [r3, #0]
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	4b98      	ldr	r3, [pc, #608]	; (800ac80 <HAL_UART_RxCpltCallback+0x530>)
 800aa1e:	5c9b      	ldrb	r3, [r3, r2]
 800aa20:	461a      	mov	r2, r3
 800aa22:	4b9e      	ldr	r3, [pc, #632]	; (800ac9c <HAL_UART_RxCpltCallback+0x54c>)
 800aa24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa28:	4a9d      	ldr	r2, [pc, #628]	; (800aca0 <HAL_UART_RxCpltCallback+0x550>)
 800aa2a:	4619      	mov	r1, r3
 800aa2c:	489d      	ldr	r0, [pc, #628]	; (800aca4 <HAL_UART_RxCpltCallback+0x554>)
 800aa2e:	f000 fd17 	bl	800b460 <BSP_QSPI_Read>
 800aa32:	4603      	mov	r3, r0
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d001      	beq.n	800aa3c <HAL_UART_RxCpltCallback+0x2ec>
	  		Error_Handler();
 800aa38:	f000 fae6 	bl	800b008 <Error_Handler>
	  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	f649 4340 	movw	r3, #40000	; 0x9c40
 800aa44:	4a97      	ldr	r2, [pc, #604]	; (800aca4 <HAL_UART_RxCpltCallback+0x554>)
 800aa46:	2100      	movs	r1, #0
 800aa48:	4897      	ldr	r0, [pc, #604]	; (800aca8 <HAL_UART_RxCpltCallback+0x558>)
 800aa4a:	f7f5 ff47 	bl	80008dc <HAL_DAC_Start_DMA>


	  HAL_UART_Receive_IT(&huart1, user_Digit_answer, NUMBER_OF_DIGITS+1);
 800aa4e:	2206      	movs	r2, #6
 800aa50:	4996      	ldr	r1, [pc, #600]	; (800acac <HAL_UART_RxCpltCallback+0x55c>)
 800aa52:	4890      	ldr	r0, [pc, #576]	; (800ac94 <HAL_UART_RxCpltCallback+0x544>)
 800aa54:	f7fb fd6c 	bl	8006530 <HAL_UART_Receive_IT>

  }
  /////////////////////////////////////////////////////////////


  if (start_yn[0] == '1'){
 800aa58:	4b95      	ldr	r3, [pc, #596]	; (800acb0 <HAL_UART_RxCpltCallback+0x560>)
 800aa5a:	781b      	ldrb	r3, [r3, #0]
 800aa5c:	2b31      	cmp	r3, #49	; 0x31
 800aa5e:	d11b      	bne.n	800aa98 <HAL_UART_RxCpltCallback+0x348>
	  //you are a player (player 2)
	  //game mode 0 or game mode 1
	  memset(start_yn,0,CHOICE);
 800aa60:	2202      	movs	r2, #2
 800aa62:	2100      	movs	r1, #0
 800aa64:	4892      	ldr	r0, [pc, #584]	; (800acb0 <HAL_UART_RxCpltCallback+0x560>)
 800aa66:	f001 fd35 	bl	800c4d4 <memset>
	  player = 1 ;
 800aa6a:	4b88      	ldr	r3, [pc, #544]	; (800ac8c <HAL_UART_RxCpltCallback+0x53c>)
 800aa6c:	2201      	movs	r2, #1
 800aa6e:	701a      	strb	r2, [r3, #0]
	  recorder = 0;
 800aa70:	4b90      	ldr	r3, [pc, #576]	; (800acb4 <HAL_UART_RxCpltCallback+0x564>)
 800aa72:	2200      	movs	r2, #0
 800aa74:	701a      	strb	r2, [r3, #0]
	  // send player message
	  HAL_UART_Transmit(&huart1, playerMessage, sizeof(playerMessage), 100);
 800aa76:	2364      	movs	r3, #100	; 0x64
 800aa78:	222a      	movs	r2, #42	; 0x2a
 800aa7a:	498f      	ldr	r1, [pc, #572]	; (800acb8 <HAL_UART_RxCpltCallback+0x568>)
 800aa7c:	4885      	ldr	r0, [pc, #532]	; (800ac94 <HAL_UART_RxCpltCallback+0x544>)
 800aa7e:	f7fb fcbf 	bl	8006400 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, chooseModeMessage, sizeof(chooseModeMessage), 100);
 800aa82:	2364      	movs	r3, #100	; 0x64
 800aa84:	2243      	movs	r2, #67	; 0x43
 800aa86:	498d      	ldr	r1, [pc, #564]	; (800acbc <HAL_UART_RxCpltCallback+0x56c>)
 800aa88:	4882      	ldr	r0, [pc, #520]	; (800ac94 <HAL_UART_RxCpltCallback+0x544>)
 800aa8a:	f7fb fcb9 	bl	8006400 <HAL_UART_Transmit>

	  HAL_UART_Receive_IT(&huart1, game_mode, CHOICE);
 800aa8e:	2202      	movs	r2, #2
 800aa90:	498b      	ldr	r1, [pc, #556]	; (800acc0 <HAL_UART_RxCpltCallback+0x570>)
 800aa92:	4880      	ldr	r0, [pc, #512]	; (800ac94 <HAL_UART_RxCpltCallback+0x544>)
 800aa94:	f7fb fd4c 	bl	8006530 <HAL_UART_Receive_IT>
  }


/////////////////////// PLAYER Digit ////////////////////////
  if (game_mode[0] == '0'){
 800aa98:	4b89      	ldr	r3, [pc, #548]	; (800acc0 <HAL_UART_RxCpltCallback+0x570>)
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b30      	cmp	r3, #48	; 0x30
 800aa9e:	d138      	bne.n	800ab12 <HAL_UART_RxCpltCallback+0x3c2>
	  //you chose game mode 0 (Digits)
	  //get ready to hear the digits
	  strcpy(digit_answer,  digits);
 800aaa0:	4988      	ldr	r1, [pc, #544]	; (800acc4 <HAL_UART_RxCpltCallback+0x574>)
 800aaa2:	4879      	ldr	r0, [pc, #484]	; (800ac88 <HAL_UART_RxCpltCallback+0x538>)
 800aaa4:	f001 fd1e 	bl	800c4e4 <strcpy>
	  seq = seqDigits;
 800aaa8:	4b87      	ldr	r3, [pc, #540]	; (800acc8 <HAL_UART_RxCpltCallback+0x578>)
 800aaaa:	4a75      	ldr	r2, [pc, #468]	; (800ac80 <HAL_UART_RxCpltCallback+0x530>)
 800aaac:	601a      	str	r2, [r3, #0]
	  directionGame = 0 ;
 800aaae:	4b87      	ldr	r3, [pc, #540]	; (800accc <HAL_UART_RxCpltCallback+0x57c>)
 800aab0:	2200      	movs	r2, #0
 800aab2:	701a      	strb	r2, [r3, #0]
	  digitGame = 1;
 800aab4:	4b86      	ldr	r3, [pc, #536]	; (800acd0 <HAL_UART_RxCpltCallback+0x580>)
 800aab6:	2201      	movs	r2, #1
 800aab8:	701a      	strb	r2, [r3, #0]
	  memset(game_mode,0,CHOICE);
 800aaba:	2202      	movs	r2, #2
 800aabc:	2100      	movs	r1, #0
 800aabe:	4880      	ldr	r0, [pc, #512]	; (800acc0 <HAL_UART_RxCpltCallback+0x570>)
 800aac0:	f001 fd08 	bl	800c4d4 <memset>
	  HAL_UART_Transmit(&huart1, waitForSpeakerDigitMessage, sizeof(waitForSpeakerDigitMessage), 100);
 800aac4:	2364      	movs	r3, #100	; 0x64
 800aac6:	2244      	movs	r2, #68	; 0x44
 800aac8:	4971      	ldr	r1, [pc, #452]	; (800ac90 <HAL_UART_RxCpltCallback+0x540>)
 800aaca:	4872      	ldr	r0, [pc, #456]	; (800ac94 <HAL_UART_RxCpltCallback+0x544>)
 800aacc:	f7fb fc98 	bl	8006400 <HAL_UART_Transmit>
//	  if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDigits[seq[0]], sizeof(SEQUENCE)) != QSPI_OK)
//	  					Error_Handler();
//	  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);


	  if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDigits[seqDigits[addressDigitIndex]], sizeof(SEQUENCE)) != QSPI_OK)
 800aad0:	4b71      	ldr	r3, [pc, #452]	; (800ac98 <HAL_UART_RxCpltCallback+0x548>)
 800aad2:	781b      	ldrb	r3, [r3, #0]
 800aad4:	461a      	mov	r2, r3
 800aad6:	4b6a      	ldr	r3, [pc, #424]	; (800ac80 <HAL_UART_RxCpltCallback+0x530>)
 800aad8:	5c9b      	ldrb	r3, [r3, r2]
 800aada:	461a      	mov	r2, r3
 800aadc:	4b6f      	ldr	r3, [pc, #444]	; (800ac9c <HAL_UART_RxCpltCallback+0x54c>)
 800aade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae2:	4a6f      	ldr	r2, [pc, #444]	; (800aca0 <HAL_UART_RxCpltCallback+0x550>)
 800aae4:	4619      	mov	r1, r3
 800aae6:	486f      	ldr	r0, [pc, #444]	; (800aca4 <HAL_UART_RxCpltCallback+0x554>)
 800aae8:	f000 fcba 	bl	800b460 <BSP_QSPI_Read>
 800aaec:	4603      	mov	r3, r0
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d001      	beq.n	800aaf6 <HAL_UART_RxCpltCallback+0x3a6>
	  		Error_Handler();
 800aaf2:	f000 fa89 	bl	800b008 <Error_Handler>
	  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	f649 4340 	movw	r3, #40000	; 0x9c40
 800aafe:	4a69      	ldr	r2, [pc, #420]	; (800aca4 <HAL_UART_RxCpltCallback+0x554>)
 800ab00:	2100      	movs	r1, #0
 800ab02:	4869      	ldr	r0, [pc, #420]	; (800aca8 <HAL_UART_RxCpltCallback+0x558>)
 800ab04:	f7f5 feea 	bl	80008dc <HAL_DAC_Start_DMA>

	  //HAL_UART_Transmit(&huart1, here, sizeof(here), 100);

	  HAL_UART_Receive_IT(&huart1, user_Digit_answer, NUMBER_OF_DIGITS+1);
 800ab08:	2206      	movs	r2, #6
 800ab0a:	4968      	ldr	r1, [pc, #416]	; (800acac <HAL_UART_RxCpltCallback+0x55c>)
 800ab0c:	4861      	ldr	r0, [pc, #388]	; (800ac94 <HAL_UART_RxCpltCallback+0x544>)
 800ab0e:	f7fb fd0f 	bl	8006530 <HAL_UART_Receive_IT>
  }


  //check the answer for digits
  if (user_Digit_answer[0] != '\000'){
 800ab12:	4b66      	ldr	r3, [pc, #408]	; (800acac <HAL_UART_RxCpltCallback+0x55c>)
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d022      	beq.n	800ab60 <HAL_UART_RxCpltCallback+0x410>

	  res= strncmp(user_Digit_answer, digit_answer, NUMBER_OF_DIGITS);
 800ab1a:	2205      	movs	r2, #5
 800ab1c:	495a      	ldr	r1, [pc, #360]	; (800ac88 <HAL_UART_RxCpltCallback+0x538>)
 800ab1e:	4863      	ldr	r0, [pc, #396]	; (800acac <HAL_UART_RxCpltCallback+0x55c>)
 800ab20:	f001 fce8 	bl	800c4f4 <strncmp>
 800ab24:	4603      	mov	r3, r0
 800ab26:	b2da      	uxtb	r2, r3
 800ab28:	4b6a      	ldr	r3, [pc, #424]	; (800acd4 <HAL_UART_RxCpltCallback+0x584>)
 800ab2a:	701a      	strb	r2, [r3, #0]
	  if (res == 0){
 800ab2c:	4b69      	ldr	r3, [pc, #420]	; (800acd4 <HAL_UART_RxCpltCallback+0x584>)
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d106      	bne.n	800ab42 <HAL_UART_RxCpltCallback+0x3f2>
		  HAL_UART_Transmit(&huart1, winMessage, sizeof(winMessage), 100);
 800ab34:	2364      	movs	r3, #100	; 0x64
 800ab36:	2215      	movs	r2, #21
 800ab38:	4967      	ldr	r1, [pc, #412]	; (800acd8 <HAL_UART_RxCpltCallback+0x588>)
 800ab3a:	4856      	ldr	r0, [pc, #344]	; (800ac94 <HAL_UART_RxCpltCallback+0x544>)
 800ab3c:	f7fb fc60 	bl	8006400 <HAL_UART_Transmit>
 800ab40:	e00b      	b.n	800ab5a <HAL_UART_RxCpltCallback+0x40a>
	  }
	  else{
		  HAL_UART_Transmit(&huart1, lossMessage, sizeof(lossMessage), 100);
 800ab42:	2364      	movs	r3, #100	; 0x64
 800ab44:	2232      	movs	r2, #50	; 0x32
 800ab46:	4965      	ldr	r1, [pc, #404]	; (800acdc <HAL_UART_RxCpltCallback+0x58c>)
 800ab48:	4852      	ldr	r0, [pc, #328]	; (800ac94 <HAL_UART_RxCpltCallback+0x544>)
 800ab4a:	f7fb fc59 	bl	8006400 <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, digit_answer, sizeof(digit_answer), 100);
 800ab4e:	2364      	movs	r3, #100	; 0x64
 800ab50:	2206      	movs	r2, #6
 800ab52:	494d      	ldr	r1, [pc, #308]	; (800ac88 <HAL_UART_RxCpltCallback+0x538>)
 800ab54:	484f      	ldr	r0, [pc, #316]	; (800ac94 <HAL_UART_RxCpltCallback+0x544>)
 800ab56:	f7fb fc53 	bl	8006400 <HAL_UART_Transmit>
	  }
	  user_Digit_answer[0] = '\000';
 800ab5a:	4b54      	ldr	r3, [pc, #336]	; (800acac <HAL_UART_RxCpltCallback+0x55c>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	701a      	strb	r2, [r3, #0]
  }

  ////////////////// PLATER Direction //////////////////////////////////////
  if (game_mode[0] == '1'){
 800ab60:	4b57      	ldr	r3, [pc, #348]	; (800acc0 <HAL_UART_RxCpltCallback+0x570>)
 800ab62:	781b      	ldrb	r3, [r3, #0]
 800ab64:	2b31      	cmp	r3, #49	; 0x31
 800ab66:	f040 8084 	bne.w	800ac72 <HAL_UART_RxCpltCallback+0x522>
	  //you chose game mode 1 (Directions)
	  //get ready to hear the seqDirections
	  memset(game_mode,0,2);
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	2100      	movs	r1, #0
 800ab6e:	4854      	ldr	r0, [pc, #336]	; (800acc0 <HAL_UART_RxCpltCallback+0x570>)
 800ab70:	f001 fcb0 	bl	800c4d4 <memset>
	  directionGame = 1;
 800ab74:	4b55      	ldr	r3, [pc, #340]	; (800accc <HAL_UART_RxCpltCallback+0x57c>)
 800ab76:	2201      	movs	r2, #1
 800ab78:	701a      	strb	r2, [r3, #0]
	  digitGame = 0;
 800ab7a:	4b55      	ldr	r3, [pc, #340]	; (800acd0 <HAL_UART_RxCpltCallback+0x580>)
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart1, waitForSpeakerDirectionMessage, sizeof(waitForSpeakerDirectionMessage), 100);
 800ab80:	2364      	movs	r3, #100	; 0x64
 800ab82:	224e      	movs	r2, #78	; 0x4e
 800ab84:	4956      	ldr	r1, [pc, #344]	; (800ace0 <HAL_UART_RxCpltCallback+0x590>)
 800ab86:	4843      	ldr	r0, [pc, #268]	; (800ac94 <HAL_UART_RxCpltCallback+0x544>)
 800ab88:	f7fb fc3a 	bl	8006400 <HAL_UART_Transmit>
	  if(seqDirections[addressDirectionIndex] == 'X') {
 800ab8c:	4b55      	ldr	r3, [pc, #340]	; (800ace4 <HAL_UART_RxCpltCallback+0x594>)
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	461a      	mov	r2, r3
 800ab92:	4b55      	ldr	r3, [pc, #340]	; (800ace8 <HAL_UART_RxCpltCallback+0x598>)
 800ab94:	5c9b      	ldrb	r3, [r3, r2]
 800ab96:	2b58      	cmp	r3, #88	; 0x58
 800ab98:	d115      	bne.n	800abc6 <HAL_UART_RxCpltCallback+0x476>
	  		if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDirections[1], sizeof(SEQUENCE)) != QSPI_OK)
 800ab9a:	4b54      	ldr	r3, [pc, #336]	; (800acec <HAL_UART_RxCpltCallback+0x59c>)
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	4a40      	ldr	r2, [pc, #256]	; (800aca0 <HAL_UART_RxCpltCallback+0x550>)
 800aba0:	4619      	mov	r1, r3
 800aba2:	4840      	ldr	r0, [pc, #256]	; (800aca4 <HAL_UART_RxCpltCallback+0x554>)
 800aba4:	f000 fc5c 	bl	800b460 <BSP_QSPI_Read>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <HAL_UART_RxCpltCallback+0x462>
	  			Error_Handler();
 800abae:	f000 fa2b 	bl	800b008 <Error_Handler>
	  		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800abb2:	2300      	movs	r3, #0
 800abb4:	9300      	str	r3, [sp, #0]
 800abb6:	f649 4340 	movw	r3, #40000	; 0x9c40
 800abba:	4a3a      	ldr	r2, [pc, #232]	; (800aca4 <HAL_UART_RxCpltCallback+0x554>)
 800abbc:	2100      	movs	r1, #0
 800abbe:	483a      	ldr	r0, [pc, #232]	; (800aca8 <HAL_UART_RxCpltCallback+0x558>)
 800abc0:	f7f5 fe8c 	bl	80008dc <HAL_DAC_Start_DMA>
	  }
  }

  ///// might not need this
  //check the answer for seqDirections
}
 800abc4:	e055      	b.n	800ac72 <HAL_UART_RxCpltCallback+0x522>
	  }else if(seqDirections[addressDirectionIndex] == 'Y') {
 800abc6:	4b47      	ldr	r3, [pc, #284]	; (800ace4 <HAL_UART_RxCpltCallback+0x594>)
 800abc8:	781b      	ldrb	r3, [r3, #0]
 800abca:	461a      	mov	r2, r3
 800abcc:	4b46      	ldr	r3, [pc, #280]	; (800ace8 <HAL_UART_RxCpltCallback+0x598>)
 800abce:	5c9b      	ldrb	r3, [r3, r2]
 800abd0:	2b59      	cmp	r3, #89	; 0x59
 800abd2:	d115      	bne.n	800ac00 <HAL_UART_RxCpltCallback+0x4b0>
	  		if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDirections[3], sizeof(SEQUENCE)) != QSPI_OK)
 800abd4:	4b45      	ldr	r3, [pc, #276]	; (800acec <HAL_UART_RxCpltCallback+0x59c>)
 800abd6:	68db      	ldr	r3, [r3, #12]
 800abd8:	4a31      	ldr	r2, [pc, #196]	; (800aca0 <HAL_UART_RxCpltCallback+0x550>)
 800abda:	4619      	mov	r1, r3
 800abdc:	4831      	ldr	r0, [pc, #196]	; (800aca4 <HAL_UART_RxCpltCallback+0x554>)
 800abde:	f000 fc3f 	bl	800b460 <BSP_QSPI_Read>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d001      	beq.n	800abec <HAL_UART_RxCpltCallback+0x49c>
	  			Error_Handler();
 800abe8:	f000 fa0e 	bl	800b008 <Error_Handler>
	  		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800abec:	2300      	movs	r3, #0
 800abee:	9300      	str	r3, [sp, #0]
 800abf0:	f649 4340 	movw	r3, #40000	; 0x9c40
 800abf4:	4a2b      	ldr	r2, [pc, #172]	; (800aca4 <HAL_UART_RxCpltCallback+0x554>)
 800abf6:	2100      	movs	r1, #0
 800abf8:	482b      	ldr	r0, [pc, #172]	; (800aca8 <HAL_UART_RxCpltCallback+0x558>)
 800abfa:	f7f5 fe6f 	bl	80008dc <HAL_DAC_Start_DMA>
}
 800abfe:	e038      	b.n	800ac72 <HAL_UART_RxCpltCallback+0x522>
	  }else if(seqDirections[addressDirectionIndex] == 'x') {
 800ac00:	4b38      	ldr	r3, [pc, #224]	; (800ace4 <HAL_UART_RxCpltCallback+0x594>)
 800ac02:	781b      	ldrb	r3, [r3, #0]
 800ac04:	461a      	mov	r2, r3
 800ac06:	4b38      	ldr	r3, [pc, #224]	; (800ace8 <HAL_UART_RxCpltCallback+0x598>)
 800ac08:	5c9b      	ldrb	r3, [r3, r2]
 800ac0a:	2b78      	cmp	r3, #120	; 0x78
 800ac0c:	d115      	bne.n	800ac3a <HAL_UART_RxCpltCallback+0x4ea>
	  		if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDirections[0], sizeof(SEQUENCE)) != QSPI_OK)
 800ac0e:	4b37      	ldr	r3, [pc, #220]	; (800acec <HAL_UART_RxCpltCallback+0x59c>)
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	4a23      	ldr	r2, [pc, #140]	; (800aca0 <HAL_UART_RxCpltCallback+0x550>)
 800ac14:	4619      	mov	r1, r3
 800ac16:	4823      	ldr	r0, [pc, #140]	; (800aca4 <HAL_UART_RxCpltCallback+0x554>)
 800ac18:	f000 fc22 	bl	800b460 <BSP_QSPI_Read>
 800ac1c:	4603      	mov	r3, r0
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d001      	beq.n	800ac26 <HAL_UART_RxCpltCallback+0x4d6>
	  			Error_Handler();
 800ac22:	f000 f9f1 	bl	800b008 <Error_Handler>
	  		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800ac26:	2300      	movs	r3, #0
 800ac28:	9300      	str	r3, [sp, #0]
 800ac2a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800ac2e:	4a1d      	ldr	r2, [pc, #116]	; (800aca4 <HAL_UART_RxCpltCallback+0x554>)
 800ac30:	2100      	movs	r1, #0
 800ac32:	481d      	ldr	r0, [pc, #116]	; (800aca8 <HAL_UART_RxCpltCallback+0x558>)
 800ac34:	f7f5 fe52 	bl	80008dc <HAL_DAC_Start_DMA>
}
 800ac38:	e01b      	b.n	800ac72 <HAL_UART_RxCpltCallback+0x522>
	  }else if(seqDirections[addressDirectionIndex] == 'y') {
 800ac3a:	4b2a      	ldr	r3, [pc, #168]	; (800ace4 <HAL_UART_RxCpltCallback+0x594>)
 800ac3c:	781b      	ldrb	r3, [r3, #0]
 800ac3e:	461a      	mov	r2, r3
 800ac40:	4b29      	ldr	r3, [pc, #164]	; (800ace8 <HAL_UART_RxCpltCallback+0x598>)
 800ac42:	5c9b      	ldrb	r3, [r3, r2]
 800ac44:	2b79      	cmp	r3, #121	; 0x79
 800ac46:	d114      	bne.n	800ac72 <HAL_UART_RxCpltCallback+0x522>
	  		if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  addressDirections[2], sizeof(SEQUENCE)) != QSPI_OK)
 800ac48:	4b28      	ldr	r3, [pc, #160]	; (800acec <HAL_UART_RxCpltCallback+0x59c>)
 800ac4a:	689b      	ldr	r3, [r3, #8]
 800ac4c:	4a14      	ldr	r2, [pc, #80]	; (800aca0 <HAL_UART_RxCpltCallback+0x550>)
 800ac4e:	4619      	mov	r1, r3
 800ac50:	4814      	ldr	r0, [pc, #80]	; (800aca4 <HAL_UART_RxCpltCallback+0x554>)
 800ac52:	f000 fc05 	bl	800b460 <BSP_QSPI_Read>
 800ac56:	4603      	mov	r3, r0
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d001      	beq.n	800ac60 <HAL_UART_RxCpltCallback+0x510>
	  			Error_Handler();
 800ac5c:	f000 f9d4 	bl	800b008 <Error_Handler>
	  		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800ac60:	2300      	movs	r3, #0
 800ac62:	9300      	str	r3, [sp, #0]
 800ac64:	f649 4340 	movw	r3, #40000	; 0x9c40
 800ac68:	4a0e      	ldr	r2, [pc, #56]	; (800aca4 <HAL_UART_RxCpltCallback+0x554>)
 800ac6a:	2100      	movs	r1, #0
 800ac6c:	480e      	ldr	r0, [pc, #56]	; (800aca8 <HAL_UART_RxCpltCallback+0x558>)
 800ac6e:	f7f5 fe35 	bl	80008dc <HAL_DAC_Start_DMA>
}
 800ac72:	bf00      	nop
 800ac74:	3718      	adds	r7, #24
 800ac76:	46bd      	mov	sp, r7
 800ac78:	bd80      	pop	{r7, pc}
 800ac7a:	bf00      	nop
 800ac7c:	2004f798 	.word	0x2004f798
 800ac80:	20000078 	.word	0x20000078
 800ac84:	2004f790 	.word	0x2004f790
 800ac88:	2004f77c 	.word	0x2004f77c
 800ac8c:	2004f769 	.word	0x2004f769
 800ac90:	20000144 	.word	0x20000144
 800ac94:	200014c8 	.word	0x200014c8
 800ac98:	2004f774 	.word	0x2004f774
 800ac9c:	20000040 	.word	0x20000040
 800aca0:	00027100 	.word	0x00027100
 800aca4:	20028664 	.word	0x20028664
 800aca8:	20001278 	.word	0x20001278
 800acac:	2004f7a8 	.word	0x2004f7a8
 800acb0:	2004f784 	.word	0x2004f784
 800acb4:	2004f768 	.word	0x2004f768
 800acb8:	200000d4 	.word	0x200000d4
 800acbc:	20000100 	.word	0x20000100
 800acc0:	2004f788 	.word	0x2004f788
 800acc4:	20000084 	.word	0x20000084
 800acc8:	2004f778 	.word	0x2004f778
 800accc:	2004f76a 	.word	0x2004f76a
 800acd0:	2004f76b 	.word	0x2004f76b
 800acd4:	2004f776 	.word	0x2004f776
 800acd8:	200001d8 	.word	0x200001d8
 800acdc:	200001f0 	.word	0x200001f0
 800ace0:	20000188 	.word	0x20000188
 800ace4:	2004f775 	.word	0x2004f775
 800ace8:	20000080 	.word	0x20000080
 800acec:	20000068 	.word	0x20000068

0800acf0 <StartGetSpeedAndDir>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartGetSpeedAndDir */
void StartGetSpeedAndDir(void const * argument)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b084      	sub	sp, #16
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800acf8:	2001      	movs	r0, #1
 800acfa:	f7fd fc1c 	bl	8008536 <osDelay>
    if(counterRestart == 30) {
 800acfe:	4b38      	ldr	r3, [pc, #224]	; (800ade0 <StartGetSpeedAndDir+0xf0>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	2b1e      	cmp	r3, #30
 800ad04:	d1f8      	bne.n	800acf8 <StartGetSpeedAndDir+0x8>
		for(int i = 0 ; i < arrayIndex; i ++) { //reinitializing arrays
 800ad06:	2300      	movs	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
 800ad0a:	e010      	b.n	800ad2e <StartGetSpeedAndDir+0x3e>
			arrayX[i] = 0;
 800ad0c:	4a35      	ldr	r2, [pc, #212]	; (800ade4 <StartGetSpeedAndDir+0xf4>)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	009b      	lsls	r3, r3, #2
 800ad12:	4413      	add	r3, r2
 800ad14:	f04f 0200 	mov.w	r2, #0
 800ad18:	601a      	str	r2, [r3, #0]
			arrayY[i] = 0;
 800ad1a:	4a33      	ldr	r2, [pc, #204]	; (800ade8 <StartGetSpeedAndDir+0xf8>)
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	4413      	add	r3, r2
 800ad22:	f04f 0200 	mov.w	r2, #0
 800ad26:	601a      	str	r2, [r3, #0]
		for(int i = 0 ; i < arrayIndex; i ++) { //reinitializing arrays
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	60fb      	str	r3, [r7, #12]
 800ad2e:	4b2f      	ldr	r3, [pc, #188]	; (800adec <StartGetSpeedAndDir+0xfc>)
 800ad30:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ad34:	461a      	mov	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	dbe7      	blt.n	800ad0c <StartGetSpeedAndDir+0x1c>
		}
		if(maxX2 > maxY2) {
 800ad3c:	4b2c      	ldr	r3, [pc, #176]	; (800adf0 <StartGetSpeedAndDir+0x100>)
 800ad3e:	ed93 7a00 	vldr	s14, [r3]
 800ad42:	4b2c      	ldr	r3, [pc, #176]	; (800adf4 <StartGetSpeedAndDir+0x104>)
 800ad44:	edd3 7a00 	vldr	s15, [r3]
 800ad48:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800ad4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad50:	dd19      	ble.n	800ad86 <StartGetSpeedAndDir+0x96>
			if(maxX2 > 500) {
 800ad52:	4b27      	ldr	r3, [pc, #156]	; (800adf0 <StartGetSpeedAndDir+0x100>)
 800ad54:	edd3 7a00 	vldr	s15, [r3]
 800ad58:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800adf8 <StartGetSpeedAndDir+0x108>
 800ad5c:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad64:	dd07      	ble.n	800ad76 <StartGetSpeedAndDir+0x86>
				directionResult[resultIndex] = 'X'; //fast horizontal
 800ad66:	4b25      	ldr	r3, [pc, #148]	; (800adfc <StartGetSpeedAndDir+0x10c>)
 800ad68:	f993 3000 	ldrsb.w	r3, [r3]
 800ad6c:	461a      	mov	r2, r3
 800ad6e:	4b24      	ldr	r3, [pc, #144]	; (800ae00 <StartGetSpeedAndDir+0x110>)
 800ad70:	2158      	movs	r1, #88	; 0x58
 800ad72:	5499      	strb	r1, [r3, r2]
 800ad74:	e020      	b.n	800adb8 <StartGetSpeedAndDir+0xc8>
			} else {
				directionResult[resultIndex] = 'x'; //slow horizontal
 800ad76:	4b21      	ldr	r3, [pc, #132]	; (800adfc <StartGetSpeedAndDir+0x10c>)
 800ad78:	f993 3000 	ldrsb.w	r3, [r3]
 800ad7c:	461a      	mov	r2, r3
 800ad7e:	4b20      	ldr	r3, [pc, #128]	; (800ae00 <StartGetSpeedAndDir+0x110>)
 800ad80:	2178      	movs	r1, #120	; 0x78
 800ad82:	5499      	strb	r1, [r3, r2]
 800ad84:	e018      	b.n	800adb8 <StartGetSpeedAndDir+0xc8>
			}
		} else {
			if(maxY2 > 500) {
 800ad86:	4b1b      	ldr	r3, [pc, #108]	; (800adf4 <StartGetSpeedAndDir+0x104>)
 800ad88:	edd3 7a00 	vldr	s15, [r3]
 800ad8c:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800adf8 <StartGetSpeedAndDir+0x108>
 800ad90:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ad94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad98:	dd07      	ble.n	800adaa <StartGetSpeedAndDir+0xba>
				directionResult[resultIndex] = 'Y'; //fast vertical
 800ad9a:	4b18      	ldr	r3, [pc, #96]	; (800adfc <StartGetSpeedAndDir+0x10c>)
 800ad9c:	f993 3000 	ldrsb.w	r3, [r3]
 800ada0:	461a      	mov	r2, r3
 800ada2:	4b17      	ldr	r3, [pc, #92]	; (800ae00 <StartGetSpeedAndDir+0x110>)
 800ada4:	2159      	movs	r1, #89	; 0x59
 800ada6:	5499      	strb	r1, [r3, r2]
 800ada8:	e006      	b.n	800adb8 <StartGetSpeedAndDir+0xc8>
			} else {
				directionResult[resultIndex] = 'y'; //slow vertical
 800adaa:	4b14      	ldr	r3, [pc, #80]	; (800adfc <StartGetSpeedAndDir+0x10c>)
 800adac:	f993 3000 	ldrsb.w	r3, [r3]
 800adb0:	461a      	mov	r2, r3
 800adb2:	4b13      	ldr	r3, [pc, #76]	; (800ae00 <StartGetSpeedAndDir+0x110>)
 800adb4:	2179      	movs	r1, #121	; 0x79
 800adb6:	5499      	strb	r1, [r3, r2]
			}
		}
		resultIndex++;
 800adb8:	4b10      	ldr	r3, [pc, #64]	; (800adfc <StartGetSpeedAndDir+0x10c>)
 800adba:	f993 3000 	ldrsb.w	r3, [r3]
 800adbe:	b2db      	uxtb	r3, r3
 800adc0:	3301      	adds	r3, #1
 800adc2:	b2db      	uxtb	r3, r3
 800adc4:	b25a      	sxtb	r2, r3
 800adc6:	4b0d      	ldr	r3, [pc, #52]	; (800adfc <StartGetSpeedAndDir+0x10c>)
 800adc8:	701a      	strb	r2, [r3, #0]
		arrayIndex = 0;
 800adca:	4b08      	ldr	r3, [pc, #32]	; (800adec <StartGetSpeedAndDir+0xfc>)
 800adcc:	2200      	movs	r2, #0
 800adce:	801a      	strh	r2, [r3, #0]
		startedMoving = 0;
 800add0:	4b0c      	ldr	r3, [pc, #48]	; (800ae04 <StartGetSpeedAndDir+0x114>)
 800add2:	2200      	movs	r2, #0
 800add4:	701a      	strb	r2, [r3, #0]
		counterRestart = 0;
 800add6:	4b02      	ldr	r3, [pc, #8]	; (800ade0 <StartGetSpeedAndDir+0xf0>)
 800add8:	2200      	movs	r2, #0
 800adda:	601a      	str	r2, [r3, #0]
    osDelay(1);
 800addc:	e78c      	b.n	800acf8 <StartGetSpeedAndDir+0x8>
 800adde:	bf00      	nop
 800ade0:	20053654 	.word	0x20053654
 800ade4:	2004f7c4 	.word	0x2004f7c4
 800ade8:	20051704 	.word	0x20051704
 800adec:	20053644 	.word	0x20053644
 800adf0:	2004f7bc 	.word	0x2004f7bc
 800adf4:	2004f7c0 	.word	0x2004f7c0
 800adf8:	43fa0000 	.word	0x43fa0000
 800adfc:	20053658 	.word	0x20053658
 800ae00:	20053650 	.word	0x20053650
 800ae04:	2005365a 	.word	0x2005365a

0800ae08 <StartAcceleroSensor>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartAcceleroSensor */
void StartAcceleroSensor(void const * argument)
{
 800ae08:	b580      	push	{r7, lr}
 800ae0a:	b082      	sub	sp, #8
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartAcceleroSensor */
  BSP_ACCELERO_Init();
 800ae10:	f000 fa52 	bl	800b2b8 <BSP_ACCELERO_Init>
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800ae14:	2001      	movs	r0, #1
 800ae16:	f7fd fb8e 	bl	8008536 <osDelay>
    if(player && directionGame && !counterInitial) {
 800ae1a:	4b59      	ldr	r3, [pc, #356]	; (800af80 <StartAcceleroSensor+0x178>)
 800ae1c:	781b      	ldrb	r3, [r3, #0]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d022      	beq.n	800ae68 <StartAcceleroSensor+0x60>
 800ae22:	4b58      	ldr	r3, [pc, #352]	; (800af84 <StartAcceleroSensor+0x17c>)
 800ae24:	781b      	ldrb	r3, [r3, #0]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d01e      	beq.n	800ae68 <StartAcceleroSensor+0x60>
 800ae2a:	4b57      	ldr	r3, [pc, #348]	; (800af88 <StartAcceleroSensor+0x180>)
 800ae2c:	f993 3000 	ldrsb.w	r3, [r3]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d119      	bne.n	800ae68 <StartAcceleroSensor+0x60>
    	  osDelay(10000);
 800ae34:	f242 7010 	movw	r0, #10000	; 0x2710
 800ae38:	f7fd fb7d 	bl	8008536 <osDelay>
   		  BSP_ACCELERO_AccGetXYZ(accelerometer);
 800ae3c:	4853      	ldr	r0, [pc, #332]	; (800af8c <StartAcceleroSensor+0x184>)
 800ae3e:	f000 fa79 	bl	800b334 <BSP_ACCELERO_AccGetXYZ>
   		  acc_x1 = accelerometer[0];
 800ae42:	4b52      	ldr	r3, [pc, #328]	; (800af8c <StartAcceleroSensor+0x184>)
 800ae44:	f9b3 2000 	ldrsh.w	r2, [r3]
 800ae48:	4b51      	ldr	r3, [pc, #324]	; (800af90 <StartAcceleroSensor+0x188>)
 800ae4a:	801a      	strh	r2, [r3, #0]
   		  acc_y1 = accelerometer[1];
 800ae4c:	4b4f      	ldr	r3, [pc, #316]	; (800af8c <StartAcceleroSensor+0x184>)
 800ae4e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800ae52:	4b50      	ldr	r3, [pc, #320]	; (800af94 <StartAcceleroSensor+0x18c>)
 800ae54:	801a      	strh	r2, [r3, #0]
   		  counterInitial++;
 800ae56:	4b4c      	ldr	r3, [pc, #304]	; (800af88 <StartAcceleroSensor+0x180>)
 800ae58:	f993 3000 	ldrsb.w	r3, [r3]
 800ae5c:	b2db      	uxtb	r3, r3
 800ae5e:	3301      	adds	r3, #1
 800ae60:	b2db      	uxtb	r3, r3
 800ae62:	b25a      	sxtb	r2, r3
 800ae64:	4b48      	ldr	r3, [pc, #288]	; (800af88 <StartAcceleroSensor+0x180>)
 800ae66:	701a      	strb	r2, [r3, #0]
   	  }
    if(player && directionGame && (resultIndex < NUMBER_OF_DIRECTION)) {
 800ae68:	4b45      	ldr	r3, [pc, #276]	; (800af80 <StartAcceleroSensor+0x178>)
 800ae6a:	781b      	ldrb	r3, [r3, #0]
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d057      	beq.n	800af20 <StartAcceleroSensor+0x118>
 800ae70:	4b44      	ldr	r3, [pc, #272]	; (800af84 <StartAcceleroSensor+0x17c>)
 800ae72:	781b      	ldrb	r3, [r3, #0]
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d053      	beq.n	800af20 <StartAcceleroSensor+0x118>
 800ae78:	4b47      	ldr	r3, [pc, #284]	; (800af98 <StartAcceleroSensor+0x190>)
 800ae7a:	f993 3000 	ldrsb.w	r3, [r3]
 800ae7e:	2b03      	cmp	r3, #3
 800ae80:	dc4e      	bgt.n	800af20 <StartAcceleroSensor+0x118>
   		BSP_ACCELERO_AccGetXYZ(accelerometer);
 800ae82:	4842      	ldr	r0, [pc, #264]	; (800af8c <StartAcceleroSensor+0x184>)
 800ae84:	f000 fa56 	bl	800b334 <BSP_ACCELERO_AccGetXYZ>
   		if(accelerometer[0]- acc_x1  > MOVEMENT_THRESHOLD || accelerometer[1] - acc_y1 > MOVEMENT_THRESHOLD) {
 800ae88:	4b40      	ldr	r3, [pc, #256]	; (800af8c <StartAcceleroSensor+0x184>)
 800ae8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae8e:	461a      	mov	r2, r3
 800ae90:	4b3f      	ldr	r3, [pc, #252]	; (800af90 <StartAcceleroSensor+0x188>)
 800ae92:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ae96:	1ad3      	subs	r3, r2, r3
 800ae98:	2b50      	cmp	r3, #80	; 0x50
 800ae9a:	dc09      	bgt.n	800aeb0 <StartAcceleroSensor+0xa8>
 800ae9c:	4b3b      	ldr	r3, [pc, #236]	; (800af8c <StartAcceleroSensor+0x184>)
 800ae9e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800aea2:	461a      	mov	r2, r3
 800aea4:	4b3b      	ldr	r3, [pc, #236]	; (800af94 <StartAcceleroSensor+0x18c>)
 800aea6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aeaa:	1ad3      	subs	r3, r2, r3
 800aeac:	2b50      	cmp	r3, #80	; 0x50
 800aeae:	dd37      	ble.n	800af20 <StartAcceleroSensor+0x118>
   		  arrayX[arrayIndex] = (float32_t) accelerometer[0];
 800aeb0:	4b36      	ldr	r3, [pc, #216]	; (800af8c <StartAcceleroSensor+0x184>)
 800aeb2:	f9b3 2000 	ldrsh.w	r2, [r3]
 800aeb6:	4b39      	ldr	r3, [pc, #228]	; (800af9c <StartAcceleroSensor+0x194>)
 800aeb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aebc:	ee07 2a90 	vmov	s15, r2
 800aec0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aec4:	4a36      	ldr	r2, [pc, #216]	; (800afa0 <StartAcceleroSensor+0x198>)
 800aec6:	009b      	lsls	r3, r3, #2
 800aec8:	4413      	add	r3, r2
 800aeca:	edc3 7a00 	vstr	s15, [r3]
   		  arrayY[arrayIndex] = (float32_t) accelerometer[1];
 800aece:	4b2f      	ldr	r3, [pc, #188]	; (800af8c <StartAcceleroSensor+0x184>)
 800aed0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800aed4:	4b31      	ldr	r3, [pc, #196]	; (800af9c <StartAcceleroSensor+0x194>)
 800aed6:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aeda:	ee07 2a90 	vmov	s15, r2
 800aede:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800aee2:	4a30      	ldr	r2, [pc, #192]	; (800afa4 <StartAcceleroSensor+0x19c>)
 800aee4:	009b      	lsls	r3, r3, #2
 800aee6:	4413      	add	r3, r2
 800aee8:	edc3 7a00 	vstr	s15, [r3]
   		  arrayIndex++;
 800aeec:	4b2b      	ldr	r3, [pc, #172]	; (800af9c <StartAcceleroSensor+0x194>)
 800aeee:	f9b3 3000 	ldrsh.w	r3, [r3]
 800aef2:	b29b      	uxth	r3, r3
 800aef4:	3301      	adds	r3, #1
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	b21a      	sxth	r2, r3
 800aefa:	4b28      	ldr	r3, [pc, #160]	; (800af9c <StartAcceleroSensor+0x194>)
 800aefc:	801a      	strh	r2, [r3, #0]
   		  arm_max_f32(&arrayX, (uint32_t) 2000,  &maxX2,  &maxIndexX);
 800aefe:	4b2a      	ldr	r3, [pc, #168]	; (800afa8 <StartAcceleroSensor+0x1a0>)
 800af00:	4a2a      	ldr	r2, [pc, #168]	; (800afac <StartAcceleroSensor+0x1a4>)
 800af02:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800af06:	4826      	ldr	r0, [pc, #152]	; (800afa0 <StartAcceleroSensor+0x198>)
 800af08:	f001 fa54 	bl	800c3b4 <arm_max_f32>
   		  arm_max_f32(&arrayY, (uint32_t) 2000,  &maxY2,  &maxIndexY);
 800af0c:	4b28      	ldr	r3, [pc, #160]	; (800afb0 <StartAcceleroSensor+0x1a8>)
 800af0e:	4a29      	ldr	r2, [pc, #164]	; (800afb4 <StartAcceleroSensor+0x1ac>)
 800af10:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 800af14:	4823      	ldr	r0, [pc, #140]	; (800afa4 <StartAcceleroSensor+0x19c>)
 800af16:	f001 fa4d 	bl	800c3b4 <arm_max_f32>
   		  startedMoving = 1;
 800af1a:	4b27      	ldr	r3, [pc, #156]	; (800afb8 <StartAcceleroSensor+0x1b0>)
 800af1c:	2201      	movs	r2, #1
 800af1e:	701a      	strb	r2, [r3, #0]
   		}
   	  }
    if (resultIndex == NUMBER_OF_DIRECTION){
 800af20:	4b1d      	ldr	r3, [pc, #116]	; (800af98 <StartAcceleroSensor+0x190>)
 800af22:	f993 3000 	ldrsb.w	r3, [r3]
 800af26:	2b04      	cmp	r3, #4
 800af28:	f47f af74 	bne.w	800ae14 <StartAcceleroSensor+0xc>
    	 res= strncmp(directionResult, seqDirections, NUMBER_OF_DIRECTION);
 800af2c:	2204      	movs	r2, #4
 800af2e:	4923      	ldr	r1, [pc, #140]	; (800afbc <StartAcceleroSensor+0x1b4>)
 800af30:	4823      	ldr	r0, [pc, #140]	; (800afc0 <StartAcceleroSensor+0x1b8>)
 800af32:	f001 fadf 	bl	800c4f4 <strncmp>
 800af36:	4603      	mov	r3, r0
 800af38:	b2da      	uxtb	r2, r3
 800af3a:	4b22      	ldr	r3, [pc, #136]	; (800afc4 <StartAcceleroSensor+0x1bc>)
 800af3c:	701a      	strb	r2, [r3, #0]
    	 if (res == 0){
 800af3e:	4b21      	ldr	r3, [pc, #132]	; (800afc4 <StartAcceleroSensor+0x1bc>)
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d106      	bne.n	800af54 <StartAcceleroSensor+0x14c>
    		  HAL_UART_Transmit(&huart1, winMessage, sizeof(winMessage), 100);
 800af46:	2364      	movs	r3, #100	; 0x64
 800af48:	2215      	movs	r2, #21
 800af4a:	491f      	ldr	r1, [pc, #124]	; (800afc8 <StartAcceleroSensor+0x1c0>)
 800af4c:	481f      	ldr	r0, [pc, #124]	; (800afcc <StartAcceleroSensor+0x1c4>)
 800af4e:	f7fb fa57 	bl	8006400 <HAL_UART_Transmit>
 800af52:	e00b      	b.n	800af6c <StartAcceleroSensor+0x164>
    	 }else{
    		  HAL_UART_Transmit(&huart1, lossMessage, sizeof(lossMessage), 100);
 800af54:	2364      	movs	r3, #100	; 0x64
 800af56:	2232      	movs	r2, #50	; 0x32
 800af58:	491d      	ldr	r1, [pc, #116]	; (800afd0 <StartAcceleroSensor+0x1c8>)
 800af5a:	481c      	ldr	r0, [pc, #112]	; (800afcc <StartAcceleroSensor+0x1c4>)
 800af5c:	f7fb fa50 	bl	8006400 <HAL_UART_Transmit>
    		  HAL_UART_Transmit(&huart1, seqDirections, sizeof(seqDirections), 100);
 800af60:	2364      	movs	r3, #100	; 0x64
 800af62:	2204      	movs	r2, #4
 800af64:	4915      	ldr	r1, [pc, #84]	; (800afbc <StartAcceleroSensor+0x1b4>)
 800af66:	4819      	ldr	r0, [pc, #100]	; (800afcc <StartAcceleroSensor+0x1c4>)
 800af68:	f7fb fa4a 	bl	8006400 <HAL_UART_Transmit>
    	 }
    	 resultIndex++;
 800af6c:	4b0a      	ldr	r3, [pc, #40]	; (800af98 <StartAcceleroSensor+0x190>)
 800af6e:	f993 3000 	ldrsb.w	r3, [r3]
 800af72:	b2db      	uxtb	r3, r3
 800af74:	3301      	adds	r3, #1
 800af76:	b2db      	uxtb	r3, r3
 800af78:	b25a      	sxtb	r2, r3
 800af7a:	4b07      	ldr	r3, [pc, #28]	; (800af98 <StartAcceleroSensor+0x190>)
 800af7c:	701a      	strb	r2, [r3, #0]
    osDelay(1);
 800af7e:	e749      	b.n	800ae14 <StartAcceleroSensor+0xc>
 800af80:	2004f769 	.word	0x2004f769
 800af84:	2004f76a 	.word	0x2004f76a
 800af88:	20053659 	.word	0x20053659
 800af8c:	2004f7b0 	.word	0x2004f7b0
 800af90:	2004f7b6 	.word	0x2004f7b6
 800af94:	2004f7b8 	.word	0x2004f7b8
 800af98:	20053658 	.word	0x20053658
 800af9c:	20053644 	.word	0x20053644
 800afa0:	2004f7c4 	.word	0x2004f7c4
 800afa4:	20051704 	.word	0x20051704
 800afa8:	20053648 	.word	0x20053648
 800afac:	2004f7bc 	.word	0x2004f7bc
 800afb0:	2005364c 	.word	0x2005364c
 800afb4:	2004f7c0 	.word	0x2004f7c0
 800afb8:	2005365a 	.word	0x2005365a
 800afbc:	20000080 	.word	0x20000080
 800afc0:	20053650 	.word	0x20053650
 800afc4:	2004f776 	.word	0x2004f776
 800afc8:	200001d8 	.word	0x200001d8
 800afcc:	200014c8 	.word	0x200014c8
 800afd0:	200001f0 	.word	0x200001f0

0800afd4 <StartCounterDirGame>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCounterDirGame */
void StartCounterDirGame(void const * argument)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	b082      	sub	sp, #8
 800afd8:	af00      	add	r7, sp, #0
 800afda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCounterDirGame */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800afdc:	2001      	movs	r0, #1
 800afde:	f7fd faaa 	bl	8008536 <osDelay>
    if(startedMoving) {
 800afe2:	4b07      	ldr	r3, [pc, #28]	; (800b000 <StartCounterDirGame+0x2c>)
 800afe4:	f993 3000 	ldrsb.w	r3, [r3]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d0f7      	beq.n	800afdc <StartCounterDirGame+0x8>
    	osDelay(100);
 800afec:	2064      	movs	r0, #100	; 0x64
 800afee:	f7fd faa2 	bl	8008536 <osDelay>
    	counterRestart++;
 800aff2:	4b04      	ldr	r3, [pc, #16]	; (800b004 <StartCounterDirGame+0x30>)
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	3301      	adds	r3, #1
 800aff8:	4a02      	ldr	r2, [pc, #8]	; (800b004 <StartCounterDirGame+0x30>)
 800affa:	6013      	str	r3, [r2, #0]
    osDelay(1);
 800affc:	e7ee      	b.n	800afdc <StartCounterDirGame+0x8>
 800affe:	bf00      	nop
 800b000:	2005365a 	.word	0x2005365a
 800b004:	20053654 	.word	0x20053654

0800b008 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800b008:	b480      	push	{r7}
 800b00a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
//	HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
	__BKPT();
 800b00c:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 800b00e:	bf00      	nop
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b08a      	sub	sp, #40	; 0x28
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  /*** Configure the GPIOs ***/
  /* Enable GPIO clock */
  DISCOVERY_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 800b020:	4b27      	ldr	r3, [pc, #156]	; (800b0c0 <I2Cx_MspInit+0xa8>)
 800b022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b024:	4a26      	ldr	r2, [pc, #152]	; (800b0c0 <I2Cx_MspInit+0xa8>)
 800b026:	f043 0302 	orr.w	r3, r3, #2
 800b02a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b02c:	4b24      	ldr	r3, [pc, #144]	; (800b0c0 <I2Cx_MspInit+0xa8>)
 800b02e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b030:	f003 0302 	and.w	r3, r3, #2
 800b034:	613b      	str	r3, [r7, #16]
 800b036:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = DISCOVERY_I2Cx_SCL_PIN | DISCOVERY_I2Cx_SDA_PIN;
 800b038:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800b03c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800b03e:	2312      	movs	r3, #18
 800b040:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull = GPIO_PULLUP;
 800b042:	2301      	movs	r3, #1
 800b044:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b046:	2303      	movs	r3, #3
 800b048:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 800b04a:	2304      	movs	r3, #4
 800b04c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b04e:	f107 0314 	add.w	r3, r7, #20
 800b052:	4619      	mov	r1, r3
 800b054:	481b      	ldr	r0, [pc, #108]	; (800b0c4 <I2Cx_MspInit+0xac>)
 800b056:	f7f6 fe13 	bl	8001c80 <HAL_GPIO_Init>

  HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800b05a:	f107 0314 	add.w	r3, r7, #20
 800b05e:	4619      	mov	r1, r3
 800b060:	4818      	ldr	r0, [pc, #96]	; (800b0c4 <I2Cx_MspInit+0xac>)
 800b062:	f7f6 fe0d 	bl	8001c80 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  DISCOVERY_I2Cx_CLK_ENABLE();
 800b066:	4b16      	ldr	r3, [pc, #88]	; (800b0c0 <I2Cx_MspInit+0xa8>)
 800b068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b06a:	4a15      	ldr	r2, [pc, #84]	; (800b0c0 <I2Cx_MspInit+0xa8>)
 800b06c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b070:	6593      	str	r3, [r2, #88]	; 0x58
 800b072:	4b13      	ldr	r3, [pc, #76]	; (800b0c0 <I2Cx_MspInit+0xa8>)
 800b074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b07a:	60fb      	str	r3, [r7, #12]
 800b07c:	68fb      	ldr	r3, [r7, #12]

  /* Force the I2C peripheral clock reset */
  DISCOVERY_I2Cx_FORCE_RESET();
 800b07e:	4b10      	ldr	r3, [pc, #64]	; (800b0c0 <I2Cx_MspInit+0xa8>)
 800b080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b082:	4a0f      	ldr	r2, [pc, #60]	; (800b0c0 <I2Cx_MspInit+0xa8>)
 800b084:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b088:	6393      	str	r3, [r2, #56]	; 0x38

  /* Release the I2C peripheral clock reset */
  DISCOVERY_I2Cx_RELEASE_RESET();
 800b08a:	4b0d      	ldr	r3, [pc, #52]	; (800b0c0 <I2Cx_MspInit+0xa8>)
 800b08c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b08e:	4a0c      	ldr	r2, [pc, #48]	; (800b0c0 <I2Cx_MspInit+0xa8>)
 800b090:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800b094:	6393      	str	r3, [r2, #56]	; 0x38

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 800b096:	2200      	movs	r2, #0
 800b098:	210f      	movs	r1, #15
 800b09a:	2021      	movs	r0, #33	; 0x21
 800b09c:	f7f5 fbc5 	bl	800082a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 800b0a0:	2021      	movs	r0, #33	; 0x21
 800b0a2:	f7f5 fbde 	bl	8000862 <HAL_NVIC_EnableIRQ>

  /* Enable and set I2Cx Interrupt to a lower priority */
  HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	210f      	movs	r1, #15
 800b0aa:	2022      	movs	r0, #34	; 0x22
 800b0ac:	f7f5 fbbd 	bl	800082a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);
 800b0b0:	2022      	movs	r0, #34	; 0x22
 800b0b2:	f7f5 fbd6 	bl	8000862 <HAL_NVIC_EnableIRQ>
}
 800b0b6:	bf00      	nop
 800b0b8:	3728      	adds	r7, #40	; 0x28
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	bd80      	pop	{r7, pc}
 800b0be:	bf00      	nop
 800b0c0:	40021000 	.word	0x40021000
 800b0c4:	48000400 	.word	0x48000400

0800b0c8 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler  I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b082      	sub	sp, #8
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  /* I2C configuration */
  i2c_handler->Instance              = DISCOVERY_I2Cx;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	4a12      	ldr	r2, [pc, #72]	; (800b11c <I2Cx_Init+0x54>)
 800b0d4:	601a      	str	r2, [r3, #0]
  i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	4a11      	ldr	r2, [pc, #68]	; (800b120 <I2Cx_Init+0x58>)
 800b0da:	605a      	str	r2, [r3, #4]
  i2c_handler->Init.OwnAddress1      = 0;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2200      	movs	r2, #0
 800b0e0:	609a      	str	r2, [r3, #8]
  i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	60da      	str	r2, [r3, #12]
  i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	2200      	movs	r2, #0
 800b0ec:	611a      	str	r2, [r3, #16]
  i2c_handler->Init.OwnAddress2      = 0;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	615a      	str	r2, [r3, #20]
  i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	61da      	str	r2, [r3, #28]
  i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	621a      	str	r2, [r3, #32]

  /* Init the I2C */
  I2Cx_MspInit(i2c_handler);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7ff ff89 	bl	800b018 <I2Cx_MspInit>
  HAL_I2C_Init(i2c_handler);
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7f7 f888 	bl	800221c <HAL_I2C_Init>
  
  /**Configure Analogue filter */
  HAL_I2CEx_ConfigAnalogFilter(i2c_handler, I2C_ANALOGFILTER_ENABLE);  
 800b10c:	2100      	movs	r1, #0
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7f7 fe16 	bl	8002d40 <HAL_I2CEx_ConfigAnalogFilter>
}
 800b114:	bf00      	nop
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}
 800b11c:	40005800 	.word	0x40005800
 800b120:	00702681 	.word	0x00702681

0800b124 <I2Cx_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_ReadMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800b124:	b580      	push	{r7, lr}
 800b126:	b08a      	sub	sp, #40	; 0x28
 800b128:	af04      	add	r7, sp, #16
 800b12a:	60f8      	str	r0, [r7, #12]
 800b12c:	4608      	mov	r0, r1
 800b12e:	4611      	mov	r1, r2
 800b130:	461a      	mov	r2, r3
 800b132:	4603      	mov	r3, r0
 800b134:	72fb      	strb	r3, [r7, #11]
 800b136:	460b      	mov	r3, r1
 800b138:	813b      	strh	r3, [r7, #8]
 800b13a:	4613      	mov	r3, r2
 800b13c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b142:	7afb      	ldrb	r3, [r7, #11]
 800b144:	b299      	uxth	r1, r3
 800b146:	88f8      	ldrh	r0, [r7, #6]
 800b148:	893a      	ldrh	r2, [r7, #8]
 800b14a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b14e:	9302      	str	r3, [sp, #8]
 800b150:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b152:	9301      	str	r3, [sp, #4]
 800b154:	6a3b      	ldr	r3, [r7, #32]
 800b156:	9300      	str	r3, [sp, #0]
 800b158:	4603      	mov	r3, r0
 800b15a:	68f8      	ldr	r0, [r7, #12]
 800b15c:	f7f7 fa30 	bl	80025c0 <HAL_I2C_Mem_Read>
 800b160:	4603      	mov	r3, r0
 800b162:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800b164:	7dfb      	ldrb	r3, [r7, #23]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d004      	beq.n	800b174 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 800b16a:	7afb      	ldrb	r3, [r7, #11]
 800b16c:	4619      	mov	r1, r3
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f000 f832 	bl	800b1d8 <I2Cx_Error>
  }
  return status;
 800b174:	7dfb      	ldrb	r3, [r7, #23]
}
 800b176:	4618      	mov	r0, r3
 800b178:	3718      	adds	r7, #24
 800b17a:	46bd      	mov	sp, r7
 800b17c:	bd80      	pop	{r7, pc}

0800b17e <I2Cx_WriteMultiple>:
  * @param  Buffer  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval HAL status
  */
static HAL_StatusTypeDef I2Cx_WriteMultiple(I2C_HandleTypeDef *i2c_handler, uint8_t Addr, uint16_t Reg, uint16_t MemAddress, uint8_t *Buffer, uint16_t Length)
{
 800b17e:	b580      	push	{r7, lr}
 800b180:	b08a      	sub	sp, #40	; 0x28
 800b182:	af04      	add	r7, sp, #16
 800b184:	60f8      	str	r0, [r7, #12]
 800b186:	4608      	mov	r0, r1
 800b188:	4611      	mov	r1, r2
 800b18a:	461a      	mov	r2, r3
 800b18c:	4603      	mov	r3, r0
 800b18e:	72fb      	strb	r3, [r7, #11]
 800b190:	460b      	mov	r3, r1
 800b192:	813b      	strh	r3, [r7, #8]
 800b194:	4613      	mov	r3, r2
 800b196:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800b198:	2300      	movs	r3, #0
 800b19a:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800b19c:	7afb      	ldrb	r3, [r7, #11]
 800b19e:	b299      	uxth	r1, r3
 800b1a0:	88f8      	ldrh	r0, [r7, #6]
 800b1a2:	893a      	ldrh	r2, [r7, #8]
 800b1a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b1a8:	9302      	str	r3, [sp, #8]
 800b1aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b1ac:	9301      	str	r3, [sp, #4]
 800b1ae:	6a3b      	ldr	r3, [r7, #32]
 800b1b0:	9300      	str	r3, [sp, #0]
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	68f8      	ldr	r0, [r7, #12]
 800b1b6:	f7f7 f8ef 	bl	8002398 <HAL_I2C_Mem_Write>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 800b1be:	7dfb      	ldrb	r3, [r7, #23]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d004      	beq.n	800b1ce <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800b1c4:	7afb      	ldrb	r3, [r7, #11]
 800b1c6:	4619      	mov	r1, r3
 800b1c8:	68f8      	ldr	r0, [r7, #12]
 800b1ca:	f000 f805 	bl	800b1d8 <I2Cx_Error>
  }
  return status;
 800b1ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1d0:	4618      	mov	r0, r3
 800b1d2:	3718      	adds	r7, #24
 800b1d4:	46bd      	mov	sp, r7
 800b1d6:	bd80      	pop	{r7, pc}

0800b1d8 <I2Cx_Error>:
  * @param  i2c_handler  I2C handler
  * @param  Addr  I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b082      	sub	sp, #8
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
 800b1e0:	460b      	mov	r3, r1
 800b1e2:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f7f7 f8a8 	bl	800233a <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff ff6c 	bl	800b0c8 <I2Cx_Init>
}
 800b1f0:	bf00      	nop
 800b1f2:	3708      	adds	r7, #8
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	bd80      	pop	{r7, pc}

0800b1f8 <SENSOR_IO_Init>:
/**
  * @brief  Initializes Sensors low level.
  * @retval None
  */
void SENSOR_IO_Init(void)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cHandler);
 800b1fc:	4802      	ldr	r0, [pc, #8]	; (800b208 <SENSOR_IO_Init+0x10>)
 800b1fe:	f7ff ff63 	bl	800b0c8 <I2Cx_Init>
}
 800b202:	bf00      	nop
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	2005365c 	.word	0x2005365c

0800b20c <SENSOR_IO_Write>:
  * @param  Reg  Reg address
  * @param  Value  Data to be written
  * @retval None
  */
void SENSOR_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af02      	add	r7, sp, #8
 800b212:	4603      	mov	r3, r0
 800b214:	71fb      	strb	r3, [r7, #7]
 800b216:	460b      	mov	r3, r1
 800b218:	71bb      	strb	r3, [r7, #6]
 800b21a:	4613      	mov	r3, r2
 800b21c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800b21e:	79bb      	ldrb	r3, [r7, #6]
 800b220:	b29a      	uxth	r2, r3
 800b222:	79f9      	ldrb	r1, [r7, #7]
 800b224:	2301      	movs	r3, #1
 800b226:	9301      	str	r3, [sp, #4]
 800b228:	1d7b      	adds	r3, r7, #5
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	2301      	movs	r3, #1
 800b22e:	4803      	ldr	r0, [pc, #12]	; (800b23c <SENSOR_IO_Write+0x30>)
 800b230:	f7ff ffa5 	bl	800b17e <I2Cx_WriteMultiple>
}
 800b234:	bf00      	nop
 800b236:	3708      	adds	r7, #8
 800b238:	46bd      	mov	sp, r7
 800b23a:	bd80      	pop	{r7, pc}
 800b23c:	2005365c 	.word	0x2005365c

0800b240 <SENSOR_IO_Read>:
  * @param  Addr  I2C address
  * @param  Reg  Reg address
  * @retval Data to be read
  */
uint8_t SENSOR_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b086      	sub	sp, #24
 800b244:	af02      	add	r7, sp, #8
 800b246:	4603      	mov	r3, r0
 800b248:	460a      	mov	r2, r1
 800b24a:	71fb      	strb	r3, [r7, #7]
 800b24c:	4613      	mov	r3, r2
 800b24e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800b250:	2300      	movs	r3, #0
 800b252:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800b254:	79bb      	ldrb	r3, [r7, #6]
 800b256:	b29a      	uxth	r2, r3
 800b258:	79f9      	ldrb	r1, [r7, #7]
 800b25a:	2301      	movs	r3, #1
 800b25c:	9301      	str	r3, [sp, #4]
 800b25e:	f107 030f 	add.w	r3, r7, #15
 800b262:	9300      	str	r3, [sp, #0]
 800b264:	2301      	movs	r3, #1
 800b266:	4804      	ldr	r0, [pc, #16]	; (800b278 <SENSOR_IO_Read+0x38>)
 800b268:	f7ff ff5c 	bl	800b124 <I2Cx_ReadMultiple>

  return read_value;
 800b26c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3710      	adds	r7, #16
 800b272:	46bd      	mov	sp, r7
 800b274:	bd80      	pop	{r7, pc}
 800b276:	bf00      	nop
 800b278:	2005365c 	.word	0x2005365c

0800b27c <SENSOR_IO_ReadMultiple>:
  * @param  Buffer  Pointer to data buffer
  * @param  Length  Length of the data
  * @retval HAL status
  */
uint16_t SENSOR_IO_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *Buffer, uint16_t Length)
{
 800b27c:	b580      	push	{r7, lr}
 800b27e:	b084      	sub	sp, #16
 800b280:	af02      	add	r7, sp, #8
 800b282:	603a      	str	r2, [r7, #0]
 800b284:	461a      	mov	r2, r3
 800b286:	4603      	mov	r3, r0
 800b288:	71fb      	strb	r3, [r7, #7]
 800b28a:	460b      	mov	r3, r1
 800b28c:	71bb      	strb	r3, [r7, #6]
 800b28e:	4613      	mov	r3, r2
 800b290:	80bb      	strh	r3, [r7, #4]
 return I2Cx_ReadMultiple(&hI2cHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, Buffer, Length);
 800b292:	79bb      	ldrb	r3, [r7, #6]
 800b294:	b29a      	uxth	r2, r3
 800b296:	79f9      	ldrb	r1, [r7, #7]
 800b298:	88bb      	ldrh	r3, [r7, #4]
 800b29a:	9301      	str	r3, [sp, #4]
 800b29c:	683b      	ldr	r3, [r7, #0]
 800b29e:	9300      	str	r3, [sp, #0]
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	4804      	ldr	r0, [pc, #16]	; (800b2b4 <SENSOR_IO_ReadMultiple+0x38>)
 800b2a4:	f7ff ff3e 	bl	800b124 <I2Cx_ReadMultiple>
 800b2a8:	4603      	mov	r3, r0
 800b2aa:	b29b      	uxth	r3, r3
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3708      	adds	r7, #8
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	bd80      	pop	{r7, pc}
 800b2b4:	2005365c 	.word	0x2005365c

0800b2b8 <BSP_ACCELERO_Init>:
/**
  * @brief  Initialize the ACCELERO.
  * @retval ACCELERO_OK or ACCELERO_ERROR
  */
ACCELERO_StatusTypeDef BSP_ACCELERO_Init(void)
{  
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
  ACCELERO_StatusTypeDef ret = ACCELERO_OK;
 800b2be:	2300      	movs	r3, #0
 800b2c0:	73fb      	strb	r3, [r7, #15]
  uint16_t ctrl = 0x0000;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	81bb      	strh	r3, [r7, #12]
  ACCELERO_InitTypeDef LSM6DSL_InitStructure;

  if(Lsm6dslAccDrv.ReadID() != LSM6DSL_ACC_GYRO_WHO_AM_I)
 800b2c6:	4b19      	ldr	r3, [pc, #100]	; (800b32c <BSP_ACCELERO_Init+0x74>)
 800b2c8:	689b      	ldr	r3, [r3, #8]
 800b2ca:	4798      	blx	r3
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	2b6a      	cmp	r3, #106	; 0x6a
 800b2d0:	d002      	beq.n	800b2d8 <BSP_ACCELERO_Init+0x20>
  {
    ret = ACCELERO_ERROR;
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	73fb      	strb	r3, [r7, #15]
 800b2d6:	e024      	b.n	800b322 <BSP_ACCELERO_Init+0x6a>
  }
  else
  {
    /* Initialize the ACCELERO accelerometer driver structure */
    AccelerometerDrv = &Lsm6dslAccDrv;
 800b2d8:	4b15      	ldr	r3, [pc, #84]	; (800b330 <BSP_ACCELERO_Init+0x78>)
 800b2da:	4a14      	ldr	r2, [pc, #80]	; (800b32c <BSP_ACCELERO_Init+0x74>)
 800b2dc:	601a      	str	r2, [r3, #0]
  
    /* MEMS configuration ------------------------------------------------------*/
    /* Fill the ACCELERO accelerometer structure */
    LSM6DSL_InitStructure.AccOutput_DataRate = LSM6DSL_ODR_52Hz;
 800b2de:	2330      	movs	r3, #48	; 0x30
 800b2e0:	717b      	strb	r3, [r7, #5]
    LSM6DSL_InitStructure.Axes_Enable = 0;
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	71bb      	strb	r3, [r7, #6]
    LSM6DSL_InitStructure.AccFull_Scale = LSM6DSL_ACC_FULLSCALE_16G;
 800b2e6:	2304      	movs	r3, #4
 800b2e8:	72bb      	strb	r3, [r7, #10]
    LSM6DSL_InitStructure.BlockData_Update = LSM6DSL_BDU_BLOCK_UPDATE;
 800b2ea:	2340      	movs	r3, #64	; 0x40
 800b2ec:	723b      	strb	r3, [r7, #8]
    LSM6DSL_InitStructure.High_Resolution = 0;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	71fb      	strb	r3, [r7, #7]
    LSM6DSL_InitStructure.Communication_Mode = 0;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	72fb      	strb	r3, [r7, #11]
        
    /* Configure MEMS: data rate, full scale  */
    ctrl =  (LSM6DSL_InitStructure.AccOutput_DataRate | LSM6DSL_InitStructure.AccFull_Scale);
 800b2f6:	797a      	ldrb	r2, [r7, #5]
 800b2f8:	7abb      	ldrb	r3, [r7, #10]
 800b2fa:	4313      	orrs	r3, r2
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	81bb      	strh	r3, [r7, #12]
    
    /* Configure MEMS: BDU and Auto-increment for multi read/write */
    ctrl |= ((LSM6DSL_InitStructure.BlockData_Update | LSM6DSL_ACC_GYRO_IF_INC_ENABLED) << 8);
 800b300:	7a3b      	ldrb	r3, [r7, #8]
 800b302:	f043 0304 	orr.w	r3, r3, #4
 800b306:	b2db      	uxtb	r3, r3
 800b308:	021b      	lsls	r3, r3, #8
 800b30a:	b21a      	sxth	r2, r3
 800b30c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b310:	4313      	orrs	r3, r2
 800b312:	b21b      	sxth	r3, r3
 800b314:	81bb      	strh	r3, [r7, #12]

    /* Configure the ACCELERO accelerometer main parameters */
    AccelerometerDrv->Init(ctrl);
 800b316:	4b06      	ldr	r3, [pc, #24]	; (800b330 <BSP_ACCELERO_Init+0x78>)
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	89ba      	ldrh	r2, [r7, #12]
 800b31e:	4610      	mov	r0, r2
 800b320:	4798      	blx	r3
  }  

  return ret;
 800b322:	7bfb      	ldrb	r3, [r7, #15]
}
 800b324:	4618      	mov	r0, r3
 800b326:	3710      	adds	r7, #16
 800b328:	46bd      	mov	sp, r7
 800b32a:	bd80      	pop	{r7, pc}
 800b32c:	2000000c 	.word	0x2000000c
 800b330:	200536b0 	.word	0x200536b0

0800b334 <BSP_ACCELERO_AccGetXYZ>:
  * @param  pDataXYZ Pointer on 3 angular accelerations table with  
  *                  pDataXYZ[0] = X axis, pDataXYZ[1] = Y axis, pDataXYZ[2] = Z axis
  * @retval None
  */
void BSP_ACCELERO_AccGetXYZ(int16_t *pDataXYZ)
{
 800b334:	b580      	push	{r7, lr}
 800b336:	b082      	sub	sp, #8
 800b338:	af00      	add	r7, sp, #0
 800b33a:	6078      	str	r0, [r7, #4]
  if(AccelerometerDrv != NULL)
 800b33c:	4b08      	ldr	r3, [pc, #32]	; (800b360 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	2b00      	cmp	r3, #0
 800b342:	d009      	beq.n	800b358 <BSP_ACCELERO_AccGetXYZ+0x24>
  {
    if(AccelerometerDrv->GetXYZ != NULL)
 800b344:	4b06      	ldr	r3, [pc, #24]	; (800b360 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d004      	beq.n	800b358 <BSP_ACCELERO_AccGetXYZ+0x24>
    {   
      AccelerometerDrv->GetXYZ(pDataXYZ);
 800b34e:	4b04      	ldr	r3, [pc, #16]	; (800b360 <BSP_ACCELERO_AccGetXYZ+0x2c>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	4798      	blx	r3
    }
  }
}
 800b358:	bf00      	nop
 800b35a:	3708      	adds	r7, #8
 800b35c:	46bd      	mov	sp, r7
 800b35e:	bd80      	pop	{r7, pc}
 800b360:	200536b0 	.word	0x200536b0

0800b364 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 800b364:	b580      	push	{r7, lr}
 800b366:	b084      	sub	sp, #16
 800b368:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 800b36a:	4b3b      	ldr	r3, [pc, #236]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b36c:	4a3b      	ldr	r2, [pc, #236]	; (800b45c <BSP_QSPI_Init+0xf8>)
 800b36e:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 800b370:	4839      	ldr	r0, [pc, #228]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b372:	f7f7 fe27 	bl	8002fc4 <HAL_OSPI_DeInit>
 800b376:	4603      	mov	r3, r0
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d001      	beq.n	800b380 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 800b37c:	2301      	movs	r3, #1
 800b37e:	e067      	b.n	800b450 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 800b380:	f000 f990 	bl	800b6a4 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 800b384:	4b34      	ldr	r3, [pc, #208]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b386:	2204      	movs	r2, #4
 800b388:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 800b38a:	4b33      	ldr	r3, [pc, #204]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b38c:	2200      	movs	r2, #0
 800b38e:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 800b390:	4b31      	ldr	r3, [pc, #196]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b392:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800b396:	60da      	str	r2, [r3, #12]
 800b398:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b39c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b39e:	68bb      	ldr	r3, [r7, #8]
 800b3a0:	fa93 f3a3 	rbit	r3, r3
 800b3a4:	607b      	str	r3, [r7, #4]
  return result;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d101      	bne.n	800b3b4 <BSP_QSPI_Init+0x50>
    return 32U;
 800b3b0:	2320      	movs	r3, #32
 800b3b2:	e003      	b.n	800b3bc <BSP_QSPI_Init+0x58>
  return __builtin_clz(value);
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	fab3 f383 	clz	r3, r3
 800b3ba:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 800b3bc:	461a      	mov	r2, r3
 800b3be:	4b26      	ldr	r3, [pc, #152]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b3c0:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 800b3c2:	4b25      	ldr	r3, [pc, #148]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b3c4:	2201      	movs	r2, #1
 800b3c6:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 800b3c8:	4b23      	ldr	r3, [pc, #140]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 800b3ce:	4b22      	ldr	r3, [pc, #136]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 800b3d4:	4b20      	ldr	r3, [pc, #128]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b3d6:	2204      	movs	r2, #4
 800b3d8:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800b3da:	4b1f      	ldr	r3, [pc, #124]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b3dc:	2200      	movs	r2, #0
 800b3de:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 800b3e0:	4b1d      	ldr	r3, [pc, #116]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b3e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3e6:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 800b3e8:	4b1b      	ldr	r3, [pc, #108]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 800b3ee:	4b1a      	ldr	r3, [pc, #104]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 800b3f4:	4818      	ldr	r0, [pc, #96]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b3f6:	f7f7 fd3b 	bl	8002e70 <HAL_OSPI_Init>
 800b3fa:	4603      	mov	r3, r0
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d001      	beq.n	800b404 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 800b400:	2301      	movs	r3, #1
 800b402:	e025      	b.n	800b450 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 800b404:	4814      	ldr	r0, [pc, #80]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b406:	f000 f98d 	bl	800b724 <QSPI_ResetMemory>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d001      	beq.n	800b414 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 800b410:	2304      	movs	r3, #4
 800b412:	e01d      	b.n	800b450 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 800b414:	2101      	movs	r1, #1
 800b416:	4810      	ldr	r0, [pc, #64]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b418:	f000 fa72 	bl	800b900 <QSPI_QuadMode>
 800b41c:	4603      	mov	r3, r0
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d001      	beq.n	800b426 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 800b422:	2301      	movs	r3, #1
 800b424:	e014      	b.n	800b450 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 800b426:	2101      	movs	r1, #1
 800b428:	480b      	ldr	r0, [pc, #44]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b42a:	f000 fb15 	bl	800ba58 <QSPI_HighPerfMode>
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 800b434:	2301      	movs	r3, #1
 800b436:	e00b      	b.n	800b450 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 800b438:	4b07      	ldr	r3, [pc, #28]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b43a:	2202      	movs	r2, #2
 800b43c:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 800b43e:	4806      	ldr	r0, [pc, #24]	; (800b458 <BSP_QSPI_Init+0xf4>)
 800b440:	f7f7 fd16 	bl	8002e70 <HAL_OSPI_Init>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	d001      	beq.n	800b44e <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 800b44a:	2301      	movs	r3, #1
 800b44c:	e000      	b.n	800b450 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 800b44e:	2300      	movs	r3, #0
}
 800b450:	4618      	mov	r0, r3
 800b452:	3710      	adds	r7, #16
 800b454:	46bd      	mov	sp, r7
 800b456:	bd80      	pop	{r7, pc}
 800b458:	200536b4 	.word	0x200536b4
 800b45c:	a0001000 	.word	0xa0001000

0800b460 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 800b460:	b580      	push	{r7, lr}
 800b462:	b098      	sub	sp, #96	; 0x60
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b46c:	2300      	movs	r3, #0
 800b46e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 800b470:	2300      	movs	r3, #0
 800b472:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 800b474:	23eb      	movs	r3, #235	; 0xeb
 800b476:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 800b478:	2301      	movs	r3, #1
 800b47a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 800b47c:	2300      	movs	r3, #0
 800b47e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b480:	2300      	movs	r3, #0
 800b482:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 800b484:	68bb      	ldr	r3, [r7, #8]
 800b486:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 800b488:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b48c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 800b48e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b492:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800b494:	2300      	movs	r3, #0
 800b496:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 800b498:	23aa      	movs	r3, #170	; 0xaa
 800b49a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 800b49c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 800b4a0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 800b4a2:	2300      	movs	r3, #0
 800b4a4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 800b4a6:	2300      	movs	r3, #0
 800b4a8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 800b4aa:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b4ae:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 800b4b8:	2304      	movs	r3, #4
 800b4ba:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b4c4:	f107 0310 	add.w	r3, r7, #16
 800b4c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4cc:	4619      	mov	r1, r3
 800b4ce:	480c      	ldr	r0, [pc, #48]	; (800b500 <BSP_QSPI_Read+0xa0>)
 800b4d0:	f7f7 fd9f 	bl	8003012 <HAL_OSPI_Command>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d001      	beq.n	800b4de <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800b4da:	2301      	movs	r3, #1
 800b4dc:	e00b      	b.n	800b4f6 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b4de:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4e2:	68f9      	ldr	r1, [r7, #12]
 800b4e4:	4806      	ldr	r0, [pc, #24]	; (800b500 <BSP_QSPI_Read+0xa0>)
 800b4e6:	f7f7 fe88 	bl	80031fa <HAL_OSPI_Receive>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 800b4f0:	2301      	movs	r3, #1
 800b4f2:	e000      	b.n	800b4f6 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 800b4f4:	2300      	movs	r3, #0
}
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	3760      	adds	r7, #96	; 0x60
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	bd80      	pop	{r7, pc}
 800b4fe:	bf00      	nop
 800b500:	200536b4 	.word	0x200536b4

0800b504 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 800b504:	b580      	push	{r7, lr}
 800b506:	b09c      	sub	sp, #112	; 0x70
 800b508:	af00      	add	r7, sp, #0
 800b50a:	60f8      	str	r0, [r7, #12]
 800b50c:	60b9      	str	r1, [r7, #8]
 800b50e:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	b2db      	uxtb	r3, r3
 800b514:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800b518:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800b51a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	429a      	cmp	r2, r3
 800b520:	d901      	bls.n	800b526 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 800b526:	68bb      	ldr	r3, [r7, #8]
 800b528:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	687b      	ldr	r3, [r7, #4]
 800b52e:	4413      	add	r3, r2
 800b530:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b532:	2300      	movs	r3, #0
 800b534:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b536:	2300      	movs	r3, #0
 800b538:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 800b53a:	2338      	movs	r3, #56	; 0x38
 800b53c:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800b53e:	2301      	movs	r3, #1
 800b540:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800b542:	2300      	movs	r3, #0
 800b544:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b546:	2300      	movs	r3, #0
 800b548:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 800b54a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800b54e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 800b550:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b554:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800b556:	2300      	movs	r3, #0
 800b558:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b55a:	2300      	movs	r3, #0
 800b55c:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 800b55e:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800b562:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800b564:	2300      	movs	r3, #0
 800b566:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 800b568:	2300      	movs	r3, #0
 800b56a:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b56c:	2300      	movs	r3, #0
 800b56e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b570:	2300      	movs	r3, #0
 800b572:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 800b574:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b576:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 800b578:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b57a:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 800b57c:	4823      	ldr	r0, [pc, #140]	; (800b60c <BSP_QSPI_Write+0x108>)
 800b57e:	f000 f918 	bl	800b7b2 <QSPI_WriteEnable>
 800b582:	4603      	mov	r3, r0
 800b584:	2b00      	cmp	r3, #0
 800b586:	d001      	beq.n	800b58c <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 800b588:	2301      	movs	r3, #1
 800b58a:	e03b      	b.n	800b604 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b58c:	f107 0314 	add.w	r3, r7, #20
 800b590:	f241 3288 	movw	r2, #5000	; 0x1388
 800b594:	4619      	mov	r1, r3
 800b596:	481d      	ldr	r0, [pc, #116]	; (800b60c <BSP_QSPI_Write+0x108>)
 800b598:	f7f7 fd3b 	bl	8003012 <HAL_OSPI_Command>
 800b59c:	4603      	mov	r3, r0
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d001      	beq.n	800b5a6 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 800b5a2:	2301      	movs	r3, #1
 800b5a4:	e02e      	b.n	800b604 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b5a6:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5aa:	68f9      	ldr	r1, [r7, #12]
 800b5ac:	4817      	ldr	r0, [pc, #92]	; (800b60c <BSP_QSPI_Write+0x108>)
 800b5ae:	f7f7 fdb1 	bl	8003114 <HAL_OSPI_Transmit>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d001      	beq.n	800b5bc <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e023      	b.n	800b604 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800b5bc:	f241 3188 	movw	r1, #5000	; 0x1388
 800b5c0:	4812      	ldr	r0, [pc, #72]	; (800b60c <BSP_QSPI_Write+0x108>)
 800b5c2:	f000 f952 	bl	800b86a <QSPI_AutoPollingMemReady>
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d001      	beq.n	800b5d0 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 800b5cc:	2301      	movs	r3, #1
 800b5ce:	e019      	b.n	800b604 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 800b5d0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5d4:	4413      	add	r3, r2
 800b5d6:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 800b5d8:	68fa      	ldr	r2, [r7, #12]
 800b5da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800b5dc:	4413      	add	r3, r2
 800b5de:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 800b5e0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5e2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800b5e6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b5e8:	429a      	cmp	r2, r3
 800b5ea:	d203      	bcs.n	800b5f4 <BSP_QSPI_Write+0xf0>
 800b5ec:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b5ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800b5f0:	1ad3      	subs	r3, r2, r3
 800b5f2:	e001      	b.n	800b5f8 <BSP_QSPI_Write+0xf4>
 800b5f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b5f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 800b5fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800b5fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b5fe:	429a      	cmp	r2, r3
 800b600:	d3b8      	bcc.n	800b574 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3770      	adds	r7, #112	; 0x70
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	200536b4 	.word	0x200536b4

0800b610 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b096      	sub	sp, #88	; 0x58
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b618:	2300      	movs	r3, #0
 800b61a:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b61c:	2300      	movs	r3, #0
 800b61e:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 800b620:	23d8      	movs	r3, #216	; 0xd8
 800b622:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800b624:	2301      	movs	r3, #1
 800b626:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800b628:	2300      	movs	r3, #0
 800b62a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b62c:	2300      	movs	r3, #0
 800b62e:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 800b634:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b638:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 800b63a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b63e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 800b640:	2300      	movs	r3, #0
 800b642:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b644:	2300      	movs	r3, #0
 800b646:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800b648:	2300      	movs	r3, #0
 800b64a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 800b64c:	2300      	movs	r3, #0
 800b64e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b650:	2300      	movs	r3, #0
 800b652:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b654:	2300      	movs	r3, #0
 800b656:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 800b658:	4811      	ldr	r0, [pc, #68]	; (800b6a0 <BSP_QSPI_Erase_Block+0x90>)
 800b65a:	f000 f8aa 	bl	800b7b2 <QSPI_WriteEnable>
 800b65e:	4603      	mov	r3, r0
 800b660:	2b00      	cmp	r3, #0
 800b662:	d001      	beq.n	800b668 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	e017      	b.n	800b698 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b668:	f107 0308 	add.w	r3, r7, #8
 800b66c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b670:	4619      	mov	r1, r3
 800b672:	480b      	ldr	r0, [pc, #44]	; (800b6a0 <BSP_QSPI_Erase_Block+0x90>)
 800b674:	f7f7 fccd 	bl	8003012 <HAL_OSPI_Command>
 800b678:	4603      	mov	r3, r0
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d001      	beq.n	800b682 <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e00a      	b.n	800b698 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 800b682:	f640 51ac 	movw	r1, #3500	; 0xdac
 800b686:	4806      	ldr	r0, [pc, #24]	; (800b6a0 <BSP_QSPI_Erase_Block+0x90>)
 800b688:	f000 f8ef 	bl	800b86a <QSPI_AutoPollingMemReady>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d001      	beq.n	800b696 <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 800b692:	2301      	movs	r3, #1
 800b694:	e000      	b.n	800b698 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 800b696:	2300      	movs	r3, #0
}
 800b698:	4618      	mov	r0, r3
 800b69a:	3758      	adds	r7, #88	; 0x58
 800b69c:	46bd      	mov	sp, r7
 800b69e:	bd80      	pop	{r7, pc}
 800b6a0:	200536b4 	.word	0x200536b4

0800b6a4 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 800b6a4:	b580      	push	{r7, lr}
 800b6a6:	b088      	sub	sp, #32
 800b6a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 800b6aa:	4b1c      	ldr	r3, [pc, #112]	; (800b71c <BSP_QSPI_MspInit+0x78>)
 800b6ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ae:	4a1b      	ldr	r2, [pc, #108]	; (800b71c <BSP_QSPI_MspInit+0x78>)
 800b6b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6b4:	6513      	str	r3, [r2, #80]	; 0x50
 800b6b6:	4b19      	ldr	r3, [pc, #100]	; (800b71c <BSP_QSPI_MspInit+0x78>)
 800b6b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b6be:	60bb      	str	r3, [r7, #8]
 800b6c0:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 800b6c2:	4b16      	ldr	r3, [pc, #88]	; (800b71c <BSP_QSPI_MspInit+0x78>)
 800b6c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6c6:	4a15      	ldr	r2, [pc, #84]	; (800b71c <BSP_QSPI_MspInit+0x78>)
 800b6c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b6cc:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 800b6ce:	4b13      	ldr	r3, [pc, #76]	; (800b71c <BSP_QSPI_MspInit+0x78>)
 800b6d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6d2:	4a12      	ldr	r2, [pc, #72]	; (800b71c <BSP_QSPI_MspInit+0x78>)
 800b6d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b6d8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800b6da:	4b10      	ldr	r3, [pc, #64]	; (800b71c <BSP_QSPI_MspInit+0x78>)
 800b6dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6de:	4a0f      	ldr	r2, [pc, #60]	; (800b71c <BSP_QSPI_MspInit+0x78>)
 800b6e0:	f043 0310 	orr.w	r3, r3, #16
 800b6e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b6e6:	4b0d      	ldr	r3, [pc, #52]	; (800b71c <BSP_QSPI_MspInit+0x78>)
 800b6e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6ea:	f003 0310 	and.w	r3, r3, #16
 800b6ee:	607b      	str	r3, [r7, #4]
 800b6f0:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 800b6f2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800b6f6:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800b6f8:	2302      	movs	r3, #2
 800b6fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800b700:	2303      	movs	r3, #3
 800b702:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800b704:	230a      	movs	r3, #10
 800b706:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800b708:	f107 030c 	add.w	r3, r7, #12
 800b70c:	4619      	mov	r1, r3
 800b70e:	4804      	ldr	r0, [pc, #16]	; (800b720 <BSP_QSPI_MspInit+0x7c>)
 800b710:	f7f6 fab6 	bl	8001c80 <HAL_GPIO_Init>
}
 800b714:	bf00      	nop
 800b716:	3720      	adds	r7, #32
 800b718:	46bd      	mov	sp, r7
 800b71a:	bd80      	pop	{r7, pc}
 800b71c:	40021000 	.word	0x40021000
 800b720:	48001000 	.word	0x48001000

0800b724 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b096      	sub	sp, #88	; 0x58
 800b728:	af00      	add	r7, sp, #0
 800b72a:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b72c:	2300      	movs	r3, #0
 800b72e:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b730:	2300      	movs	r3, #0
 800b732:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 800b734:	2366      	movs	r3, #102	; 0x66
 800b736:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800b738:	2301      	movs	r3, #1
 800b73a:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800b73c:	2300      	movs	r3, #0
 800b73e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b740:	2300      	movs	r3, #0
 800b742:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800b744:	2300      	movs	r3, #0
 800b746:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b748:	2300      	movs	r3, #0
 800b74a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800b74c:	2300      	movs	r3, #0
 800b74e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 800b750:	2300      	movs	r3, #0
 800b752:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b754:	2300      	movs	r3, #0
 800b756:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b758:	2300      	movs	r3, #0
 800b75a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b75c:	f107 0308 	add.w	r3, r7, #8
 800b760:	f241 3288 	movw	r2, #5000	; 0x1388
 800b764:	4619      	mov	r1, r3
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7f7 fc53 	bl	8003012 <HAL_OSPI_Command>
 800b76c:	4603      	mov	r3, r0
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d001      	beq.n	800b776 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 800b772:	2301      	movs	r3, #1
 800b774:	e019      	b.n	800b7aa <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 800b776:	2399      	movs	r3, #153	; 0x99
 800b778:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b77a:	f107 0308 	add.w	r3, r7, #8
 800b77e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b782:	4619      	mov	r1, r3
 800b784:	6878      	ldr	r0, [r7, #4]
 800b786:	f7f7 fc44 	bl	8003012 <HAL_OSPI_Command>
 800b78a:	4603      	mov	r3, r0
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d001      	beq.n	800b794 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 800b790:	2301      	movs	r3, #1
 800b792:	e00a      	b.n	800b7aa <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800b794:	f241 3188 	movw	r1, #5000	; 0x1388
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f000 f866 	bl	800b86a <QSPI_AutoPollingMemReady>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e000      	b.n	800b7aa <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 800b7a8:	2300      	movs	r3, #0
}
 800b7aa:	4618      	mov	r0, r3
 800b7ac:	3758      	adds	r7, #88	; 0x58
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b09c      	sub	sp, #112	; 0x70
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b7ba:	2300      	movs	r3, #0
 800b7bc:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b7be:	2300      	movs	r3, #0
 800b7c0:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 800b7c2:	2306      	movs	r3, #6
 800b7c4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800b7c6:	2301      	movs	r3, #1
 800b7c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800b7ca:	2300      	movs	r3, #0
 800b7cc:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b7ce:	2300      	movs	r3, #0
 800b7d0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800b7d2:	2300      	movs	r3, #0
 800b7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800b7da:	2300      	movs	r3, #0
 800b7dc:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b7ea:	f107 0320 	add.w	r3, r7, #32
 800b7ee:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7f2:	4619      	mov	r1, r3
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	f7f7 fc0c 	bl	8003012 <HAL_OSPI_Command>
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d001      	beq.n	800b804 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 800b800:	2301      	movs	r3, #1
 800b802:	e02e      	b.n	800b862 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 800b804:	2302      	movs	r3, #2
 800b806:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 800b808:	2302      	movs	r3, #2
 800b80a:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800b80c:	2300      	movs	r3, #0
 800b80e:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800b810:	2310      	movs	r3, #16
 800b812:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800b814:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b818:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800b81a:	2305      	movs	r3, #5
 800b81c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 800b81e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b822:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 800b824:	2301      	movs	r3, #1
 800b826:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 800b828:	2300      	movs	r3, #0
 800b82a:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b82c:	f107 0320 	add.w	r3, r7, #32
 800b830:	f241 3288 	movw	r2, #5000	; 0x1388
 800b834:	4619      	mov	r1, r3
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f7f7 fbeb 	bl	8003012 <HAL_OSPI_Command>
 800b83c:	4603      	mov	r3, r0
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d001      	beq.n	800b846 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	e00d      	b.n	800b862 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b846:	f107 030c 	add.w	r3, r7, #12
 800b84a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b84e:	4619      	mov	r1, r3
 800b850:	6878      	ldr	r0, [r7, #4]
 800b852:	f7f7 fd75 	bl	8003340 <HAL_OSPI_AutoPolling>
 800b856:	4603      	mov	r3, r0
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d001      	beq.n	800b860 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	e000      	b.n	800b862 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 800b860:	2300      	movs	r3, #0
}
 800b862:	4618      	mov	r0, r3
 800b864:	3770      	adds	r7, #112	; 0x70
 800b866:	46bd      	mov	sp, r7
 800b868:	bd80      	pop	{r7, pc}

0800b86a <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800b86a:	b580      	push	{r7, lr}
 800b86c:	b09c      	sub	sp, #112	; 0x70
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
 800b872:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b874:	2300      	movs	r3, #0
 800b876:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b878:	2300      	movs	r3, #0
 800b87a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800b87c:	2305      	movs	r3, #5
 800b87e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800b880:	2301      	movs	r3, #1
 800b882:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800b884:	2300      	movs	r3, #0
 800b886:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b888:	2300      	movs	r3, #0
 800b88a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800b88c:	2300      	movs	r3, #0
 800b88e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b890:	2300      	movs	r3, #0
 800b892:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800b894:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b898:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 800b89a:	2301      	movs	r3, #1
 800b89c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800b89e:	2300      	movs	r3, #0
 800b8a0:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 800b8b2:	2301      	movs	r3, #1
 800b8b4:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 800b8ba:	2310      	movs	r3, #16
 800b8bc:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 800b8be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b8c2:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b8c4:	f107 0320 	add.w	r3, r7, #32
 800b8c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7f7 fb9f 	bl	8003012 <HAL_OSPI_Command>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	d001      	beq.n	800b8de <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 800b8da:	2301      	movs	r3, #1
 800b8dc:	e00c      	b.n	800b8f8 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 800b8de:	f107 030c 	add.w	r3, r7, #12
 800b8e2:	683a      	ldr	r2, [r7, #0]
 800b8e4:	4619      	mov	r1, r3
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f7f7 fd2a 	bl	8003340 <HAL_OSPI_AutoPolling>
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d001      	beq.n	800b8f6 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 800b8f2:	2301      	movs	r3, #1
 800b8f4:	e000      	b.n	800b8f8 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3770      	adds	r7, #112	; 0x70
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}

0800b900 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b098      	sub	sp, #96	; 0x60
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
 800b908:	460b      	mov	r3, r1
 800b90a:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800b90c:	2300      	movs	r3, #0
 800b90e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800b910:	2300      	movs	r3, #0
 800b912:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800b914:	2305      	movs	r3, #5
 800b916:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800b918:	2301      	movs	r3, #1
 800b91a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800b91c:	2300      	movs	r3, #0
 800b91e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800b920:	2300      	movs	r3, #0
 800b922:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800b924:	2300      	movs	r3, #0
 800b926:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800b928:	2300      	movs	r3, #0
 800b92a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800b92c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b930:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800b932:	2300      	movs	r3, #0
 800b934:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800b936:	2300      	movs	r3, #0
 800b938:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800b93a:	2301      	movs	r3, #1
 800b93c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800b93e:	2300      	movs	r3, #0
 800b940:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800b942:	2300      	movs	r3, #0
 800b944:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b946:	f107 0310 	add.w	r3, r7, #16
 800b94a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b94e:	4619      	mov	r1, r3
 800b950:	6878      	ldr	r0, [r7, #4]
 800b952:	f7f7 fb5e 	bl	8003012 <HAL_OSPI_Command>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d001      	beq.n	800b960 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	e077      	b.n	800ba50 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b960:	f107 030f 	add.w	r3, r7, #15
 800b964:	f241 3288 	movw	r2, #5000	; 0x1388
 800b968:	4619      	mov	r1, r3
 800b96a:	6878      	ldr	r0, [r7, #4]
 800b96c:	f7f7 fc45 	bl	80031fa <HAL_OSPI_Receive>
 800b970:	4603      	mov	r3, r0
 800b972:	2b00      	cmp	r3, #0
 800b974:	d001      	beq.n	800b97a <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 800b976:	2301      	movs	r3, #1
 800b978:	e06a      	b.n	800ba50 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f7ff ff19 	bl	800b7b2 <QSPI_WriteEnable>
 800b980:	4603      	mov	r3, r0
 800b982:	2b00      	cmp	r3, #0
 800b984:	d001      	beq.n	800b98a <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 800b986:	2301      	movs	r3, #1
 800b988:	e062      	b.n	800ba50 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 800b98a:	78fb      	ldrb	r3, [r7, #3]
 800b98c:	2b01      	cmp	r3, #1
 800b98e:	d105      	bne.n	800b99c <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 800b990:	7bfb      	ldrb	r3, [r7, #15]
 800b992:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b996:	b2db      	uxtb	r3, r3
 800b998:	73fb      	strb	r3, [r7, #15]
 800b99a:	e004      	b.n	800b9a6 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 800b99c:	7bfb      	ldrb	r3, [r7, #15]
 800b99e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b9a2:	b2db      	uxtb	r3, r3
 800b9a4:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b9aa:	f107 0310 	add.w	r3, r7, #16
 800b9ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f7f7 fb2c 	bl	8003012 <HAL_OSPI_Command>
 800b9ba:	4603      	mov	r3, r0
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d001      	beq.n	800b9c4 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 800b9c0:	2301      	movs	r3, #1
 800b9c2:	e045      	b.n	800ba50 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b9c4:	f107 030f 	add.w	r3, r7, #15
 800b9c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9cc:	4619      	mov	r1, r3
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f7f7 fba0 	bl	8003114 <HAL_OSPI_Transmit>
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d001      	beq.n	800b9de <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 800b9da:	2301      	movs	r3, #1
 800b9dc:	e038      	b.n	800ba50 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800b9de:	f241 3188 	movw	r1, #5000	; 0x1388
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f7ff ff41 	bl	800b86a <QSPI_AutoPollingMemReady>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d001      	beq.n	800b9f2 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e02e      	b.n	800ba50 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 800b9f2:	2305      	movs	r3, #5
 800b9f4:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800b9f6:	f107 0310 	add.w	r3, r7, #16
 800b9fa:	f241 3288 	movw	r2, #5000	; 0x1388
 800b9fe:	4619      	mov	r1, r3
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f7f7 fb06 	bl	8003012 <HAL_OSPI_Command>
 800ba06:	4603      	mov	r3, r0
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d001      	beq.n	800ba10 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 800ba0c:	2301      	movs	r3, #1
 800ba0e:	e01f      	b.n	800ba50 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ba10:	f107 030f 	add.w	r3, r7, #15
 800ba14:	f241 3288 	movw	r2, #5000	; 0x1388
 800ba18:	4619      	mov	r1, r3
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	f7f7 fbed 	bl	80031fa <HAL_OSPI_Receive>
 800ba20:	4603      	mov	r3, r0
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d001      	beq.n	800ba2a <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 800ba26:	2301      	movs	r3, #1
 800ba28:	e012      	b.n	800ba50 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800ba2a:	7bfb      	ldrb	r3, [r7, #15]
 800ba2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d102      	bne.n	800ba3a <QSPI_QuadMode+0x13a>
 800ba34:	78fb      	ldrb	r3, [r7, #3]
 800ba36:	2b01      	cmp	r3, #1
 800ba38:	d007      	beq.n	800ba4a <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800ba3a:	7bfb      	ldrb	r3, [r7, #15]
 800ba3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 800ba40:	2b00      	cmp	r3, #0
 800ba42:	d004      	beq.n	800ba4e <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 800ba44:	78fb      	ldrb	r3, [r7, #3]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d101      	bne.n	800ba4e <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e000      	b.n	800ba50 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 800ba4e:	2300      	movs	r3, #0
}
 800ba50:	4618      	mov	r0, r3
 800ba52:	3760      	adds	r7, #96	; 0x60
 800ba54:	46bd      	mov	sp, r7
 800ba56:	bd80      	pop	{r7, pc}

0800ba58 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 800ba58:	b580      	push	{r7, lr}
 800ba5a:	b098      	sub	sp, #96	; 0x60
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
 800ba60:	460b      	mov	r3, r1
 800ba62:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800ba64:	2300      	movs	r3, #0
 800ba66:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800ba68:	2300      	movs	r3, #0
 800ba6a:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800ba6c:	2305      	movs	r3, #5
 800ba6e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800ba70:	2301      	movs	r3, #1
 800ba72:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800ba74:	2300      	movs	r3, #0
 800ba76:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800ba78:	2300      	movs	r3, #0
 800ba7a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 800ba80:	2300      	movs	r3, #0
 800ba82:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 800ba84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ba88:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800ba8a:	2300      	movs	r3, #0
 800ba8c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 800ba92:	2301      	movs	r3, #1
 800ba94:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 800ba96:	2300      	movs	r3, #0
 800ba98:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800ba9a:	2300      	movs	r3, #0
 800ba9c:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800ba9e:	f107 0310 	add.w	r3, r7, #16
 800baa2:	f241 3288 	movw	r2, #5000	; 0x1388
 800baa6:	4619      	mov	r1, r3
 800baa8:	6878      	ldr	r0, [r7, #4]
 800baaa:	f7f7 fab2 	bl	8003012 <HAL_OSPI_Command>
 800baae:	4603      	mov	r3, r0
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d001      	beq.n	800bab8 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 800bab4:	2301      	movs	r3, #1
 800bab6:	e09a      	b.n	800bbee <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bab8:	f107 030c 	add.w	r3, r7, #12
 800babc:	f241 3288 	movw	r2, #5000	; 0x1388
 800bac0:	4619      	mov	r1, r3
 800bac2:	6878      	ldr	r0, [r7, #4]
 800bac4:	f7f7 fb99 	bl	80031fa <HAL_OSPI_Receive>
 800bac8:	4603      	mov	r3, r0
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d001      	beq.n	800bad2 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 800bace:	2301      	movs	r3, #1
 800bad0:	e08d      	b.n	800bbee <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800bad2:	2315      	movs	r3, #21
 800bad4:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 800bad6:	2302      	movs	r3, #2
 800bad8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bada:	f107 0310 	add.w	r3, r7, #16
 800bade:	f241 3288 	movw	r2, #5000	; 0x1388
 800bae2:	4619      	mov	r1, r3
 800bae4:	6878      	ldr	r0, [r7, #4]
 800bae6:	f7f7 fa94 	bl	8003012 <HAL_OSPI_Command>
 800baea:	4603      	mov	r3, r0
 800baec:	2b00      	cmp	r3, #0
 800baee:	d001      	beq.n	800baf4 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 800baf0:	2301      	movs	r3, #1
 800baf2:	e07c      	b.n	800bbee <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800baf4:	f107 030c 	add.w	r3, r7, #12
 800baf8:	3301      	adds	r3, #1
 800bafa:	f241 3288 	movw	r2, #5000	; 0x1388
 800bafe:	4619      	mov	r1, r3
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	f7f7 fb7a 	bl	80031fa <HAL_OSPI_Receive>
 800bb06:	4603      	mov	r3, r0
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d001      	beq.n	800bb10 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	e06e      	b.n	800bbee <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f7ff fe4e 	bl	800b7b2 <QSPI_WriteEnable>
 800bb16:	4603      	mov	r3, r0
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d001      	beq.n	800bb20 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	e066      	b.n	800bbee <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 800bb20:	78fb      	ldrb	r3, [r7, #3]
 800bb22:	2b01      	cmp	r3, #1
 800bb24:	d105      	bne.n	800bb32 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800bb26:	7bbb      	ldrb	r3, [r7, #14]
 800bb28:	f043 0302 	orr.w	r3, r3, #2
 800bb2c:	b2db      	uxtb	r3, r3
 800bb2e:	73bb      	strb	r3, [r7, #14]
 800bb30:	e004      	b.n	800bb3c <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 800bb32:	7bbb      	ldrb	r3, [r7, #14]
 800bb34:	f023 0302 	bic.w	r3, r3, #2
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 800bb3c:	2301      	movs	r3, #1
 800bb3e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 800bb40:	2303      	movs	r3, #3
 800bb42:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bb44:	f107 0310 	add.w	r3, r7, #16
 800bb48:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb4c:	4619      	mov	r1, r3
 800bb4e:	6878      	ldr	r0, [r7, #4]
 800bb50:	f7f7 fa5f 	bl	8003012 <HAL_OSPI_Command>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d001      	beq.n	800bb5e <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	e047      	b.n	800bbee <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bb5e:	f107 030c 	add.w	r3, r7, #12
 800bb62:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb66:	4619      	mov	r1, r3
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f7f7 fad3 	bl	8003114 <HAL_OSPI_Transmit>
 800bb6e:	4603      	mov	r3, r0
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d001      	beq.n	800bb78 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 800bb74:	2301      	movs	r3, #1
 800bb76:	e03a      	b.n	800bbee <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800bb78:	f241 3188 	movw	r1, #5000	; 0x1388
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f7ff fe74 	bl	800b86a <QSPI_AutoPollingMemReady>
 800bb82:	4603      	mov	r3, r0
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d001      	beq.n	800bb8c <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e030      	b.n	800bbee <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 800bb8c:	2315      	movs	r3, #21
 800bb8e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 800bb90:	2302      	movs	r3, #2
 800bb92:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bb94:	f107 0310 	add.w	r3, r7, #16
 800bb98:	f241 3288 	movw	r2, #5000	; 0x1388
 800bb9c:	4619      	mov	r1, r3
 800bb9e:	6878      	ldr	r0, [r7, #4]
 800bba0:	f7f7 fa37 	bl	8003012 <HAL_OSPI_Command>
 800bba4:	4603      	mov	r3, r0
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d001      	beq.n	800bbae <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 800bbaa:	2301      	movs	r3, #1
 800bbac:	e01f      	b.n	800bbee <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800bbae:	f107 030c 	add.w	r3, r7, #12
 800bbb2:	f241 3288 	movw	r2, #5000	; 0x1388
 800bbb6:	4619      	mov	r1, r3
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f7f7 fb1e 	bl	80031fa <HAL_OSPI_Receive>
 800bbbe:	4603      	mov	r3, r0
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d001      	beq.n	800bbc8 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 800bbc4:	2301      	movs	r3, #1
 800bbc6:	e012      	b.n	800bbee <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800bbc8:	7b7b      	ldrb	r3, [r7, #13]
 800bbca:	f003 0302 	and.w	r3, r3, #2
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d102      	bne.n	800bbd8 <QSPI_HighPerfMode+0x180>
 800bbd2:	78fb      	ldrb	r3, [r7, #3]
 800bbd4:	2b01      	cmp	r3, #1
 800bbd6:	d007      	beq.n	800bbe8 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800bbd8:	7b7b      	ldrb	r3, [r7, #13]
 800bbda:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d004      	beq.n	800bbec <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 800bbe2:	78fb      	ldrb	r3, [r7, #3]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d101      	bne.n	800bbec <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	e000      	b.n	800bbee <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3760      	adds	r7, #96	; 0x60
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}
	...

0800bbf8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b082      	sub	sp, #8
 800bbfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800bbfe:	4b11      	ldr	r3, [pc, #68]	; (800bc44 <HAL_MspInit+0x4c>)
 800bc00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc02:	4a10      	ldr	r2, [pc, #64]	; (800bc44 <HAL_MspInit+0x4c>)
 800bc04:	f043 0301 	orr.w	r3, r3, #1
 800bc08:	6613      	str	r3, [r2, #96]	; 0x60
 800bc0a:	4b0e      	ldr	r3, [pc, #56]	; (800bc44 <HAL_MspInit+0x4c>)
 800bc0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc0e:	f003 0301 	and.w	r3, r3, #1
 800bc12:	607b      	str	r3, [r7, #4]
 800bc14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800bc16:	4b0b      	ldr	r3, [pc, #44]	; (800bc44 <HAL_MspInit+0x4c>)
 800bc18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc1a:	4a0a      	ldr	r2, [pc, #40]	; (800bc44 <HAL_MspInit+0x4c>)
 800bc1c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bc20:	6593      	str	r3, [r2, #88]	; 0x58
 800bc22:	4b08      	ldr	r3, [pc, #32]	; (800bc44 <HAL_MspInit+0x4c>)
 800bc24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bc2a:	603b      	str	r3, [r7, #0]
 800bc2c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800bc2e:	2200      	movs	r2, #0
 800bc30:	210f      	movs	r1, #15
 800bc32:	f06f 0001 	mvn.w	r0, #1
 800bc36:	f7f4 fdf8 	bl	800082a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800bc3a:	bf00      	nop
 800bc3c:	3708      	adds	r7, #8
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	40021000 	.word	0x40021000

0800bc48 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b08a      	sub	sp, #40	; 0x28
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bc50:	f107 0314 	add.w	r3, r7, #20
 800bc54:	2200      	movs	r2, #0
 800bc56:	601a      	str	r2, [r3, #0]
 800bc58:	605a      	str	r2, [r3, #4]
 800bc5a:	609a      	str	r2, [r3, #8]
 800bc5c:	60da      	str	r2, [r3, #12]
 800bc5e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a2b      	ldr	r2, [pc, #172]	; (800bd14 <HAL_DAC_MspInit+0xcc>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d14f      	bne.n	800bd0a <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800bc6a:	4b2b      	ldr	r3, [pc, #172]	; (800bd18 <HAL_DAC_MspInit+0xd0>)
 800bc6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc6e:	4a2a      	ldr	r2, [pc, #168]	; (800bd18 <HAL_DAC_MspInit+0xd0>)
 800bc70:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bc74:	6593      	str	r3, [r2, #88]	; 0x58
 800bc76:	4b28      	ldr	r3, [pc, #160]	; (800bd18 <HAL_DAC_MspInit+0xd0>)
 800bc78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bc7e:	613b      	str	r3, [r7, #16]
 800bc80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bc82:	4b25      	ldr	r3, [pc, #148]	; (800bd18 <HAL_DAC_MspInit+0xd0>)
 800bc84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc86:	4a24      	ldr	r2, [pc, #144]	; (800bd18 <HAL_DAC_MspInit+0xd0>)
 800bc88:	f043 0301 	orr.w	r3, r3, #1
 800bc8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bc8e:	4b22      	ldr	r3, [pc, #136]	; (800bd18 <HAL_DAC_MspInit+0xd0>)
 800bc90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc92:	f003 0301 	and.w	r3, r3, #1
 800bc96:	60fb      	str	r3, [r7, #12]
 800bc98:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800bc9a:	2310      	movs	r3, #16
 800bc9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bca2:	2300      	movs	r3, #0
 800bca4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bca6:	f107 0314 	add.w	r3, r7, #20
 800bcaa:	4619      	mov	r1, r3
 800bcac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800bcb0:	f7f5 ffe6 	bl	8001c80 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 800bcb4:	4b19      	ldr	r3, [pc, #100]	; (800bd1c <HAL_DAC_MspInit+0xd4>)
 800bcb6:	4a1a      	ldr	r2, [pc, #104]	; (800bd20 <HAL_DAC_MspInit+0xd8>)
 800bcb8:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 800bcba:	4b18      	ldr	r3, [pc, #96]	; (800bd1c <HAL_DAC_MspInit+0xd4>)
 800bcbc:	2206      	movs	r2, #6
 800bcbe:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800bcc0:	4b16      	ldr	r3, [pc, #88]	; (800bd1c <HAL_DAC_MspInit+0xd4>)
 800bcc2:	2210      	movs	r2, #16
 800bcc4:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800bcc6:	4b15      	ldr	r3, [pc, #84]	; (800bd1c <HAL_DAC_MspInit+0xd4>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800bccc:	4b13      	ldr	r3, [pc, #76]	; (800bd1c <HAL_DAC_MspInit+0xd4>)
 800bcce:	2280      	movs	r2, #128	; 0x80
 800bcd0:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800bcd2:	4b12      	ldr	r3, [pc, #72]	; (800bd1c <HAL_DAC_MspInit+0xd4>)
 800bcd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bcd8:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800bcda:	4b10      	ldr	r3, [pc, #64]	; (800bd1c <HAL_DAC_MspInit+0xd4>)
 800bcdc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bce0:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 800bce2:	4b0e      	ldr	r3, [pc, #56]	; (800bd1c <HAL_DAC_MspInit+0xd4>)
 800bce4:	2200      	movs	r2, #0
 800bce6:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800bce8:	4b0c      	ldr	r3, [pc, #48]	; (800bd1c <HAL_DAC_MspInit+0xd4>)
 800bcea:	2200      	movs	r2, #0
 800bcec:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800bcee:	480b      	ldr	r0, [pc, #44]	; (800bd1c <HAL_DAC_MspInit+0xd4>)
 800bcf0:	f7f5 fc98 	bl	8001624 <HAL_DMA_Init>
 800bcf4:	4603      	mov	r3, r0
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d001      	beq.n	800bcfe <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800bcfa:	f7ff f985 	bl	800b008 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	4a06      	ldr	r2, [pc, #24]	; (800bd1c <HAL_DAC_MspInit+0xd4>)
 800bd02:	609a      	str	r2, [r3, #8]
 800bd04:	4a05      	ldr	r2, [pc, #20]	; (800bd1c <HAL_DAC_MspInit+0xd4>)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800bd0a:	bf00      	nop
 800bd0c:	3728      	adds	r7, #40	; 0x28
 800bd0e:	46bd      	mov	sp, r7
 800bd10:	bd80      	pop	{r7, pc}
 800bd12:	bf00      	nop
 800bd14:	40007400 	.word	0x40007400
 800bd18:	40021000 	.word	0x40021000
 800bd1c:	2000128c 	.word	0x2000128c
 800bd20:	40020008 	.word	0x40020008

0800bd24 <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b0ae      	sub	sp, #184	; 0xb8
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800bd30:	2200      	movs	r2, #0
 800bd32:	601a      	str	r2, [r3, #0]
 800bd34:	605a      	str	r2, [r3, #4]
 800bd36:	609a      	str	r2, [r3, #8]
 800bd38:	60da      	str	r2, [r3, #12]
 800bd3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bd3c:	f107 0310 	add.w	r3, r7, #16
 800bd40:	2294      	movs	r2, #148	; 0x94
 800bd42:	2100      	movs	r1, #0
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 fbc5 	bl	800c4d4 <memset>
  if(DFSDM1_Init == 0)
 800bd4a:	4b45      	ldr	r3, [pc, #276]	; (800be60 <HAL_DFSDM_FilterMspInit+0x13c>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d14b      	bne.n	800bdea <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800bd52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800bd56:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800bd58:	2300      	movs	r3, #0
 800bd5a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bd5e:	f107 0310 	add.w	r3, r7, #16
 800bd62:	4618      	mov	r0, r3
 800bd64:	f7f9 f928 	bl	8004fb8 <HAL_RCCEx_PeriphCLKConfig>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d001      	beq.n	800bd72 <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 800bd6e:	f7ff f94b 	bl	800b008 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800bd72:	4b3c      	ldr	r3, [pc, #240]	; (800be64 <HAL_DFSDM_FilterMspInit+0x140>)
 800bd74:	681b      	ldr	r3, [r3, #0]
 800bd76:	3301      	adds	r3, #1
 800bd78:	4a3a      	ldr	r2, [pc, #232]	; (800be64 <HAL_DFSDM_FilterMspInit+0x140>)
 800bd7a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800bd7c:	4b39      	ldr	r3, [pc, #228]	; (800be64 <HAL_DFSDM_FilterMspInit+0x140>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b01      	cmp	r3, #1
 800bd82:	d10b      	bne.n	800bd9c <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800bd84:	4b38      	ldr	r3, [pc, #224]	; (800be68 <HAL_DFSDM_FilterMspInit+0x144>)
 800bd86:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd88:	4a37      	ldr	r2, [pc, #220]	; (800be68 <HAL_DFSDM_FilterMspInit+0x144>)
 800bd8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bd8e:	6613      	str	r3, [r2, #96]	; 0x60
 800bd90:	4b35      	ldr	r3, [pc, #212]	; (800be68 <HAL_DFSDM_FilterMspInit+0x144>)
 800bd92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd94:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bd98:	60fb      	str	r3, [r7, #12]
 800bd9a:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800bd9c:	4b32      	ldr	r3, [pc, #200]	; (800be68 <HAL_DFSDM_FilterMspInit+0x144>)
 800bd9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bda0:	4a31      	ldr	r2, [pc, #196]	; (800be68 <HAL_DFSDM_FilterMspInit+0x144>)
 800bda2:	f043 0310 	orr.w	r3, r3, #16
 800bda6:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bda8:	4b2f      	ldr	r3, [pc, #188]	; (800be68 <HAL_DFSDM_FilterMspInit+0x144>)
 800bdaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bdac:	f003 0310 	and.w	r3, r3, #16
 800bdb0:	60bb      	str	r3, [r7, #8]
 800bdb2:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800bdb4:	f44f 7320 	mov.w	r3, #640	; 0x280
 800bdb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bdbc:	2302      	movs	r3, #2
 800bdbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bdc8:	2300      	movs	r3, #0
 800bdca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800bdce:	2306      	movs	r3, #6
 800bdd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bdd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800bdd8:	4619      	mov	r1, r3
 800bdda:	4824      	ldr	r0, [pc, #144]	; (800be6c <HAL_DFSDM_FilterMspInit+0x148>)
 800bddc:	f7f5 ff50 	bl	8001c80 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800bde0:	4b1f      	ldr	r3, [pc, #124]	; (800be60 <HAL_DFSDM_FilterMspInit+0x13c>)
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	3301      	adds	r3, #1
 800bde6:	4a1e      	ldr	r2, [pc, #120]	; (800be60 <HAL_DFSDM_FilterMspInit+0x13c>)
 800bde8:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	4a20      	ldr	r2, [pc, #128]	; (800be70 <HAL_DFSDM_FilterMspInit+0x14c>)
 800bdf0:	4293      	cmp	r3, r2
 800bdf2:	d130      	bne.n	800be56 <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 800bdf4:	4b1f      	ldr	r3, [pc, #124]	; (800be74 <HAL_DFSDM_FilterMspInit+0x150>)
 800bdf6:	4a20      	ldr	r2, [pc, #128]	; (800be78 <HAL_DFSDM_FilterMspInit+0x154>)
 800bdf8:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 800bdfa:	4b1e      	ldr	r3, [pc, #120]	; (800be74 <HAL_DFSDM_FilterMspInit+0x150>)
 800bdfc:	2256      	movs	r2, #86	; 0x56
 800bdfe:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800be00:	4b1c      	ldr	r3, [pc, #112]	; (800be74 <HAL_DFSDM_FilterMspInit+0x150>)
 800be02:	2200      	movs	r2, #0
 800be04:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 800be06:	4b1b      	ldr	r3, [pc, #108]	; (800be74 <HAL_DFSDM_FilterMspInit+0x150>)
 800be08:	2200      	movs	r2, #0
 800be0a:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 800be0c:	4b19      	ldr	r3, [pc, #100]	; (800be74 <HAL_DFSDM_FilterMspInit+0x150>)
 800be0e:	2280      	movs	r2, #128	; 0x80
 800be10:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800be12:	4b18      	ldr	r3, [pc, #96]	; (800be74 <HAL_DFSDM_FilterMspInit+0x150>)
 800be14:	f44f 7200 	mov.w	r2, #512	; 0x200
 800be18:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800be1a:	4b16      	ldr	r3, [pc, #88]	; (800be74 <HAL_DFSDM_FilterMspInit+0x150>)
 800be1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800be20:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 800be22:	4b14      	ldr	r3, [pc, #80]	; (800be74 <HAL_DFSDM_FilterMspInit+0x150>)
 800be24:	2200      	movs	r2, #0
 800be26:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 800be28:	4b12      	ldr	r3, [pc, #72]	; (800be74 <HAL_DFSDM_FilterMspInit+0x150>)
 800be2a:	2200      	movs	r2, #0
 800be2c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 800be2e:	4811      	ldr	r0, [pc, #68]	; (800be74 <HAL_DFSDM_FilterMspInit+0x150>)
 800be30:	f7f5 fbf8 	bl	8001624 <HAL_DMA_Init>
 800be34:	4603      	mov	r3, r0
 800be36:	2b00      	cmp	r3, #0
 800be38:	d001      	beq.n	800be3e <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 800be3a:	f7ff f8e5 	bl	800b008 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	4a0c      	ldr	r2, [pc, #48]	; (800be74 <HAL_DFSDM_FilterMspInit+0x150>)
 800be42:	62da      	str	r2, [r3, #44]	; 0x2c
 800be44:	4a0b      	ldr	r2, [pc, #44]	; (800be74 <HAL_DFSDM_FilterMspInit+0x150>)
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	4a09      	ldr	r2, [pc, #36]	; (800be74 <HAL_DFSDM_FilterMspInit+0x150>)
 800be4e:	629a      	str	r2, [r3, #40]	; 0x28
 800be50:	4a08      	ldr	r2, [pc, #32]	; (800be74 <HAL_DFSDM_FilterMspInit+0x150>)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 800be56:	bf00      	nop
 800be58:	37b8      	adds	r7, #184	; 0xb8
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bd80      	pop	{r7, pc}
 800be5e:	bf00      	nop
 800be60:	20053708 	.word	0x20053708
 800be64:	20053704 	.word	0x20053704
 800be68:	40021000 	.word	0x40021000
 800be6c:	48001000 	.word	0x48001000
 800be70:	40016100 	.word	0x40016100
 800be74:	20001378 	.word	0x20001378
 800be78:	4002001c 	.word	0x4002001c

0800be7c <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 800be7c:	b580      	push	{r7, lr}
 800be7e:	b0ae      	sub	sp, #184	; 0xb8
 800be80:	af00      	add	r7, sp, #0
 800be82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800be84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800be88:	2200      	movs	r2, #0
 800be8a:	601a      	str	r2, [r3, #0]
 800be8c:	605a      	str	r2, [r3, #4]
 800be8e:	609a      	str	r2, [r3, #8]
 800be90:	60da      	str	r2, [r3, #12]
 800be92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800be94:	f107 0310 	add.w	r3, r7, #16
 800be98:	2294      	movs	r2, #148	; 0x94
 800be9a:	2100      	movs	r1, #0
 800be9c:	4618      	mov	r0, r3
 800be9e:	f000 fb19 	bl	800c4d4 <memset>
  if(DFSDM1_Init == 0)
 800bea2:	4b2a      	ldr	r3, [pc, #168]	; (800bf4c <HAL_DFSDM_ChannelMspInit+0xd0>)
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d14b      	bne.n	800bf42 <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 800beaa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800beae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 800beb0:	2300      	movs	r3, #0
 800beb2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800beb6:	f107 0310 	add.w	r3, r7, #16
 800beba:	4618      	mov	r0, r3
 800bebc:	f7f9 f87c 	bl	8004fb8 <HAL_RCCEx_PeriphCLKConfig>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d001      	beq.n	800beca <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800bec6:	f7ff f89f 	bl	800b008 <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 800beca:	4b21      	ldr	r3, [pc, #132]	; (800bf50 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800becc:	681b      	ldr	r3, [r3, #0]
 800bece:	3301      	adds	r3, #1
 800bed0:	4a1f      	ldr	r2, [pc, #124]	; (800bf50 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800bed2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800bed4:	4b1e      	ldr	r3, [pc, #120]	; (800bf50 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2b01      	cmp	r3, #1
 800beda:	d10b      	bne.n	800bef4 <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 800bedc:	4b1d      	ldr	r3, [pc, #116]	; (800bf54 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800bede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bee0:	4a1c      	ldr	r2, [pc, #112]	; (800bf54 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800bee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bee6:	6613      	str	r3, [r2, #96]	; 0x60
 800bee8:	4b1a      	ldr	r3, [pc, #104]	; (800bf54 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800beea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800beec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800bef0:	60fb      	str	r3, [r7, #12]
 800bef2:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800bef4:	4b17      	ldr	r3, [pc, #92]	; (800bf54 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800bef6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bef8:	4a16      	ldr	r2, [pc, #88]	; (800bf54 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800befa:	f043 0310 	orr.w	r3, r3, #16
 800befe:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bf00:	4b14      	ldr	r3, [pc, #80]	; (800bf54 <HAL_DFSDM_ChannelMspInit+0xd8>)
 800bf02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf04:	f003 0310 	and.w	r3, r3, #16
 800bf08:	60bb      	str	r3, [r7, #8]
 800bf0a:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 800bf0c:	f44f 7320 	mov.w	r3, #640	; 0x280
 800bf10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bf14:	2302      	movs	r3, #2
 800bf16:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800bf20:	2300      	movs	r3, #0
 800bf22:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800bf26:	2306      	movs	r3, #6
 800bf28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800bf2c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800bf30:	4619      	mov	r1, r3
 800bf32:	4809      	ldr	r0, [pc, #36]	; (800bf58 <HAL_DFSDM_ChannelMspInit+0xdc>)
 800bf34:	f7f5 fea4 	bl	8001c80 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 800bf38:	4b04      	ldr	r3, [pc, #16]	; (800bf4c <HAL_DFSDM_ChannelMspInit+0xd0>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	3301      	adds	r3, #1
 800bf3e:	4a03      	ldr	r2, [pc, #12]	; (800bf4c <HAL_DFSDM_ChannelMspInit+0xd0>)
 800bf40:	6013      	str	r3, [r2, #0]
  }

}
 800bf42:	bf00      	nop
 800bf44:	37b8      	adds	r7, #184	; 0xb8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}
 800bf4a:	bf00      	nop
 800bf4c:	20053708 	.word	0x20053708
 800bf50:	20053704 	.word	0x20053704
 800bf54:	40021000 	.word	0x40021000
 800bf58:	48001000 	.word	0x48001000

0800bf5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b0ae      	sub	sp, #184	; 0xb8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bf64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800bf68:	2200      	movs	r2, #0
 800bf6a:	601a      	str	r2, [r3, #0]
 800bf6c:	605a      	str	r2, [r3, #4]
 800bf6e:	609a      	str	r2, [r3, #8]
 800bf70:	60da      	str	r2, [r3, #12]
 800bf72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800bf74:	f107 0310 	add.w	r3, r7, #16
 800bf78:	2294      	movs	r2, #148	; 0x94
 800bf7a:	2100      	movs	r1, #0
 800bf7c:	4618      	mov	r0, r3
 800bf7e:	f000 faa9 	bl	800c4d4 <memset>
  if(hi2c->Instance==I2C2)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	4a21      	ldr	r2, [pc, #132]	; (800c00c <HAL_I2C_MspInit+0xb0>)
 800bf88:	4293      	cmp	r3, r2
 800bf8a:	d13b      	bne.n	800c004 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800bf8c:	2380      	movs	r3, #128	; 0x80
 800bf8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800bf90:	2300      	movs	r3, #0
 800bf92:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800bf94:	f107 0310 	add.w	r3, r7, #16
 800bf98:	4618      	mov	r0, r3
 800bf9a:	f7f9 f80d 	bl	8004fb8 <HAL_RCCEx_PeriphCLKConfig>
 800bf9e:	4603      	mov	r3, r0
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d001      	beq.n	800bfa8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800bfa4:	f7ff f830 	bl	800b008 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800bfa8:	4b19      	ldr	r3, [pc, #100]	; (800c010 <HAL_I2C_MspInit+0xb4>)
 800bfaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfac:	4a18      	ldr	r2, [pc, #96]	; (800c010 <HAL_I2C_MspInit+0xb4>)
 800bfae:	f043 0302 	orr.w	r3, r3, #2
 800bfb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bfb4:	4b16      	ldr	r3, [pc, #88]	; (800c010 <HAL_I2C_MspInit+0xb4>)
 800bfb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bfb8:	f003 0302 	and.w	r3, r3, #2
 800bfbc:	60fb      	str	r3, [r7, #12]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800bfc0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800bfc4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800bfc8:	2312      	movs	r3, #18
 800bfca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bfce:	2300      	movs	r3, #0
 800bfd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bfd4:	2303      	movs	r3, #3
 800bfd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800bfda:	2304      	movs	r3, #4
 800bfdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800bfe0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800bfe4:	4619      	mov	r1, r3
 800bfe6:	480b      	ldr	r0, [pc, #44]	; (800c014 <HAL_I2C_MspInit+0xb8>)
 800bfe8:	f7f5 fe4a 	bl	8001c80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800bfec:	4b08      	ldr	r3, [pc, #32]	; (800c010 <HAL_I2C_MspInit+0xb4>)
 800bfee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bff0:	4a07      	ldr	r2, [pc, #28]	; (800c010 <HAL_I2C_MspInit+0xb4>)
 800bff2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bff6:	6593      	str	r3, [r2, #88]	; 0x58
 800bff8:	4b05      	ldr	r3, [pc, #20]	; (800c010 <HAL_I2C_MspInit+0xb4>)
 800bffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bffc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c000:	60bb      	str	r3, [r7, #8]
 800c002:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800c004:	bf00      	nop
 800c006:	37b8      	adds	r7, #184	; 0xb8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	40005800 	.word	0x40005800
 800c010:	40021000 	.word	0x40021000
 800c014:	48000400 	.word	0x48000400

0800c018 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b082      	sub	sp, #8
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C2)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a0b      	ldr	r2, [pc, #44]	; (800c054 <HAL_I2C_MspDeInit+0x3c>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d10f      	bne.n	800c04a <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 800c02a:	4b0b      	ldr	r3, [pc, #44]	; (800c058 <HAL_I2C_MspDeInit+0x40>)
 800c02c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c02e:	4a0a      	ldr	r2, [pc, #40]	; (800c058 <HAL_I2C_MspDeInit+0x40>)
 800c030:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800c034:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_10);
 800c036:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c03a:	4808      	ldr	r0, [pc, #32]	; (800c05c <HAL_I2C_MspDeInit+0x44>)
 800c03c:	f7f5 ffb2 	bl	8001fa4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_11);
 800c040:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800c044:	4805      	ldr	r0, [pc, #20]	; (800c05c <HAL_I2C_MspDeInit+0x44>)
 800c046:	f7f5 ffad 	bl	8001fa4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
  }

}
 800c04a:	bf00      	nop
 800c04c:	3708      	adds	r7, #8
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}
 800c052:	bf00      	nop
 800c054:	40005800 	.word	0x40005800
 800c058:	40021000 	.word	0x40021000
 800c05c:	48000400 	.word	0x48000400

0800c060 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 800c060:	b580      	push	{r7, lr}
 800c062:	b0b0      	sub	sp, #192	; 0xc0
 800c064:	af00      	add	r7, sp, #0
 800c066:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c068:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c06c:	2200      	movs	r2, #0
 800c06e:	601a      	str	r2, [r3, #0]
 800c070:	605a      	str	r2, [r3, #4]
 800c072:	609a      	str	r2, [r3, #8]
 800c074:	60da      	str	r2, [r3, #12]
 800c076:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c078:	f107 0318 	add.w	r3, r7, #24
 800c07c:	2294      	movs	r2, #148	; 0x94
 800c07e:	2100      	movs	r1, #0
 800c080:	4618      	mov	r0, r3
 800c082:	f000 fa27 	bl	800c4d4 <memset>
  if(hospi->Instance==OCTOSPI1)
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	4a28      	ldr	r2, [pc, #160]	; (800c12c <HAL_OSPI_MspInit+0xcc>)
 800c08c:	4293      	cmp	r3, r2
 800c08e:	d149      	bne.n	800c124 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 800c090:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800c094:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800c096:	2300      	movs	r3, #0
 800c098:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c09c:	f107 0318 	add.w	r3, r7, #24
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	f7f8 ff89 	bl	8004fb8 <HAL_RCCEx_PeriphCLKConfig>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d001      	beq.n	800c0b0 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 800c0ac:	f7fe ffac 	bl	800b008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 800c0b0:	4b1f      	ldr	r3, [pc, #124]	; (800c130 <HAL_OSPI_MspInit+0xd0>)
 800c0b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0b4:	4a1e      	ldr	r2, [pc, #120]	; (800c130 <HAL_OSPI_MspInit+0xd0>)
 800c0b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c0ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c0bc:	4b1c      	ldr	r3, [pc, #112]	; (800c130 <HAL_OSPI_MspInit+0xd0>)
 800c0be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c0c4:	617b      	str	r3, [r7, #20]
 800c0c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 800c0c8:	4b19      	ldr	r3, [pc, #100]	; (800c130 <HAL_OSPI_MspInit+0xd0>)
 800c0ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0cc:	4a18      	ldr	r2, [pc, #96]	; (800c130 <HAL_OSPI_MspInit+0xd0>)
 800c0ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c0d2:	6513      	str	r3, [r2, #80]	; 0x50
 800c0d4:	4b16      	ldr	r3, [pc, #88]	; (800c130 <HAL_OSPI_MspInit+0xd0>)
 800c0d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c0dc:	613b      	str	r3, [r7, #16]
 800c0de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800c0e0:	4b13      	ldr	r3, [pc, #76]	; (800c130 <HAL_OSPI_MspInit+0xd0>)
 800c0e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0e4:	4a12      	ldr	r2, [pc, #72]	; (800c130 <HAL_OSPI_MspInit+0xd0>)
 800c0e6:	f043 0310 	orr.w	r3, r3, #16
 800c0ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c0ec:	4b10      	ldr	r3, [pc, #64]	; (800c130 <HAL_OSPI_MspInit+0xd0>)
 800c0ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c0f0:	f003 0310 	and.w	r3, r3, #16
 800c0f4:	60fb      	str	r3, [r7, #12]
 800c0f6:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800c0f8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 800c0fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c100:	2302      	movs	r3, #2
 800c102:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c106:	2300      	movs	r3, #0
 800c108:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c10c:	2303      	movs	r3, #3
 800c10e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 800c112:	230a      	movs	r3, #10
 800c114:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800c118:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800c11c:	4619      	mov	r1, r3
 800c11e:	4805      	ldr	r0, [pc, #20]	; (800c134 <HAL_OSPI_MspInit+0xd4>)
 800c120:	f7f5 fdae 	bl	8001c80 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 800c124:	bf00      	nop
 800c126:	37c0      	adds	r7, #192	; 0xc0
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}
 800c12c:	a0001000 	.word	0xa0001000
 800c130:	40021000 	.word	0x40021000
 800c134:	48001000 	.word	0x48001000

0800c138 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 800c138:	b580      	push	{r7, lr}
 800c13a:	b082      	sub	sp, #8
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	4a0b      	ldr	r2, [pc, #44]	; (800c174 <HAL_OSPI_MspDeInit+0x3c>)
 800c146:	4293      	cmp	r3, r2
 800c148:	d110      	bne.n	800c16c <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 800c14a:	4b0b      	ldr	r3, [pc, #44]	; (800c178 <HAL_OSPI_MspDeInit+0x40>)
 800c14c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c14e:	4a0a      	ldr	r2, [pc, #40]	; (800c178 <HAL_OSPI_MspDeInit+0x40>)
 800c150:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c154:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800c156:	4b08      	ldr	r3, [pc, #32]	; (800c178 <HAL_OSPI_MspDeInit+0x40>)
 800c158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c15a:	4a07      	ldr	r2, [pc, #28]	; (800c178 <HAL_OSPI_MspDeInit+0x40>)
 800c15c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c160:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 800c162:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800c166:	4805      	ldr	r0, [pc, #20]	; (800c17c <HAL_OSPI_MspDeInit+0x44>)
 800c168:	f7f5 ff1c 	bl	8001fa4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 800c16c:	bf00      	nop
 800c16e:	3708      	adds	r7, #8
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}
 800c174:	a0001000 	.word	0xa0001000
 800c178:	40021000 	.word	0x40021000
 800c17c:	48001000 	.word	0x48001000

0800c180 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800c180:	b580      	push	{r7, lr}
 800c182:	b084      	sub	sp, #16
 800c184:	af00      	add	r7, sp, #0
 800c186:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c190:	d113      	bne.n	800c1ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c192:	4b0c      	ldr	r3, [pc, #48]	; (800c1c4 <HAL_TIM_Base_MspInit+0x44>)
 800c194:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c196:	4a0b      	ldr	r2, [pc, #44]	; (800c1c4 <HAL_TIM_Base_MspInit+0x44>)
 800c198:	f043 0301 	orr.w	r3, r3, #1
 800c19c:	6593      	str	r3, [r2, #88]	; 0x58
 800c19e:	4b09      	ldr	r3, [pc, #36]	; (800c1c4 <HAL_TIM_Base_MspInit+0x44>)
 800c1a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c1a2:	f003 0301 	and.w	r3, r3, #1
 800c1a6:	60fb      	str	r3, [r7, #12]
 800c1a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800c1aa:	2200      	movs	r2, #0
 800c1ac:	2105      	movs	r1, #5
 800c1ae:	201c      	movs	r0, #28
 800c1b0:	f7f4 fb3b 	bl	800082a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c1b4:	201c      	movs	r0, #28
 800c1b6:	f7f4 fb54 	bl	8000862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800c1ba:	bf00      	nop
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}
 800c1c2:	bf00      	nop
 800c1c4:	40021000 	.word	0x40021000

0800c1c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800c1c8:	b580      	push	{r7, lr}
 800c1ca:	b0ae      	sub	sp, #184	; 0xb8
 800c1cc:	af00      	add	r7, sp, #0
 800c1ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c1d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c1d4:	2200      	movs	r2, #0
 800c1d6:	601a      	str	r2, [r3, #0]
 800c1d8:	605a      	str	r2, [r3, #4]
 800c1da:	609a      	str	r2, [r3, #8]
 800c1dc:	60da      	str	r2, [r3, #12]
 800c1de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800c1e0:	f107 0310 	add.w	r3, r7, #16
 800c1e4:	2294      	movs	r2, #148	; 0x94
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	f000 f973 	bl	800c4d4 <memset>
  if(huart->Instance==USART1)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	4a25      	ldr	r2, [pc, #148]	; (800c288 <HAL_UART_MspInit+0xc0>)
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	d142      	bne.n	800c27e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800c1f8:	2301      	movs	r3, #1
 800c1fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800c200:	f107 0310 	add.w	r3, r7, #16
 800c204:	4618      	mov	r0, r3
 800c206:	f7f8 fed7 	bl	8004fb8 <HAL_RCCEx_PeriphCLKConfig>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d001      	beq.n	800c214 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800c210:	f7fe fefa 	bl	800b008 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800c214:	4b1d      	ldr	r3, [pc, #116]	; (800c28c <HAL_UART_MspInit+0xc4>)
 800c216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c218:	4a1c      	ldr	r2, [pc, #112]	; (800c28c <HAL_UART_MspInit+0xc4>)
 800c21a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c21e:	6613      	str	r3, [r2, #96]	; 0x60
 800c220:	4b1a      	ldr	r3, [pc, #104]	; (800c28c <HAL_UART_MspInit+0xc4>)
 800c222:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c228:	60fb      	str	r3, [r7, #12]
 800c22a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800c22c:	4b17      	ldr	r3, [pc, #92]	; (800c28c <HAL_UART_MspInit+0xc4>)
 800c22e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c230:	4a16      	ldr	r2, [pc, #88]	; (800c28c <HAL_UART_MspInit+0xc4>)
 800c232:	f043 0302 	orr.w	r3, r3, #2
 800c236:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c238:	4b14      	ldr	r3, [pc, #80]	; (800c28c <HAL_UART_MspInit+0xc4>)
 800c23a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c23c:	f003 0302 	and.w	r3, r3, #2
 800c240:	60bb      	str	r3, [r7, #8]
 800c242:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800c244:	23c0      	movs	r3, #192	; 0xc0
 800c246:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c24a:	2302      	movs	r3, #2
 800c24c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c250:	2300      	movs	r3, #0
 800c252:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c256:	2303      	movs	r3, #3
 800c258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800c25c:	2307      	movs	r3, #7
 800c25e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800c262:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800c266:	4619      	mov	r1, r3
 800c268:	4809      	ldr	r0, [pc, #36]	; (800c290 <HAL_UART_MspInit+0xc8>)
 800c26a:	f7f5 fd09 	bl	8001c80 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800c26e:	2200      	movs	r2, #0
 800c270:	2105      	movs	r1, #5
 800c272:	2025      	movs	r0, #37	; 0x25
 800c274:	f7f4 fad9 	bl	800082a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800c278:	2025      	movs	r0, #37	; 0x25
 800c27a:	f7f4 faf2 	bl	8000862 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800c27e:	bf00      	nop
 800c280:	37b8      	adds	r7, #184	; 0xb8
 800c282:	46bd      	mov	sp, r7
 800c284:	bd80      	pop	{r7, pc}
 800c286:	bf00      	nop
 800c288:	40013800 	.word	0x40013800
 800c28c:	40021000 	.word	0x40021000
 800c290:	48000400 	.word	0x48000400

0800c294 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800c294:	b480      	push	{r7}
 800c296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800c298:	e7fe      	b.n	800c298 <NMI_Handler+0x4>

0800c29a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800c29a:	b480      	push	{r7}
 800c29c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800c29e:	e7fe      	b.n	800c29e <HardFault_Handler+0x4>

0800c2a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800c2a4:	e7fe      	b.n	800c2a4 <MemManage_Handler+0x4>

0800c2a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800c2a6:	b480      	push	{r7}
 800c2a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800c2aa:	e7fe      	b.n	800c2aa <BusFault_Handler+0x4>

0800c2ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800c2ac:	b480      	push	{r7}
 800c2ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800c2b0:	e7fe      	b.n	800c2b0 <UsageFault_Handler+0x4>

0800c2b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800c2b2:	b480      	push	{r7}
 800c2b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800c2b6:	bf00      	nop
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2be:	4770      	bx	lr

0800c2c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800c2c4:	f7f4 f972 	bl	80005ac <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800c2c8:	f7fc feb8 	bl	800903c <xTaskGetSchedulerState>
 800c2cc:	4603      	mov	r3, r0
 800c2ce:	2b01      	cmp	r3, #1
 800c2d0:	d001      	beq.n	800c2d6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800c2d2:	f7fd f8f9 	bl	80094c8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800c2d6:	bf00      	nop
 800c2d8:	bd80      	pop	{r7, pc}
	...

0800c2dc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800c2dc:	b580      	push	{r7, lr}
 800c2de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800c2e0:	4802      	ldr	r0, [pc, #8]	; (800c2ec <DMA1_Channel1_IRQHandler+0x10>)
 800c2e2:	f7f5 fb7d 	bl	80019e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800c2e6:	bf00      	nop
 800c2e8:	bd80      	pop	{r7, pc}
 800c2ea:	bf00      	nop
 800c2ec:	2000128c 	.word	0x2000128c

0800c2f0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800c2f0:	b580      	push	{r7, lr}
 800c2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800c2f4:	4802      	ldr	r0, [pc, #8]	; (800c300 <DMA1_Channel2_IRQHandler+0x10>)
 800c2f6:	f7f5 fb73 	bl	80019e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800c2fa:	bf00      	nop
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	20001378 	.word	0x20001378

0800c304 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800c304:	b580      	push	{r7, lr}
 800c306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800c308:	4802      	ldr	r0, [pc, #8]	; (800c314 <TIM2_IRQHandler+0x10>)
 800c30a:	f7f9 fc35 	bl	8005b78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800c30e:	bf00      	nop
 800c310:	bd80      	pop	{r7, pc}
 800c312:	bf00      	nop
 800c314:	2000147c 	.word	0x2000147c

0800c318 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800c31c:	4802      	ldr	r0, [pc, #8]	; (800c328 <USART1_IRQHandler+0x10>)
 800c31e:	f7fa f95d 	bl	80065dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800c322:	bf00      	nop
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	200014c8 	.word	0x200014c8

0800c32c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pushButton_Pin);
 800c330:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c334:	f7f5 ff5a 	bl	80021ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800c338:	bf00      	nop
 800c33a:	bd80      	pop	{r7, pc}

0800c33c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800c33c:	b480      	push	{r7}
 800c33e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800c340:	4b06      	ldr	r3, [pc, #24]	; (800c35c <SystemInit+0x20>)
 800c342:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c346:	4a05      	ldr	r2, [pc, #20]	; (800c35c <SystemInit+0x20>)
 800c348:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c34c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800c350:	bf00      	nop
 800c352:	46bd      	mov	sp, r7
 800c354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c358:	4770      	bx	lr
 800c35a:	bf00      	nop
 800c35c:	e000ed00 	.word	0xe000ed00

0800c360 <Reset_Handler>:
 800c360:	f8df d034 	ldr.w	sp, [pc, #52]	; 800c398 <LoopForever+0x2>
 800c364:	f7ff ffea 	bl	800c33c <SystemInit>
 800c368:	480c      	ldr	r0, [pc, #48]	; (800c39c <LoopForever+0x6>)
 800c36a:	490d      	ldr	r1, [pc, #52]	; (800c3a0 <LoopForever+0xa>)
 800c36c:	4a0d      	ldr	r2, [pc, #52]	; (800c3a4 <LoopForever+0xe>)
 800c36e:	2300      	movs	r3, #0
 800c370:	e002      	b.n	800c378 <LoopCopyDataInit>

0800c372 <CopyDataInit>:
 800c372:	58d4      	ldr	r4, [r2, r3]
 800c374:	50c4      	str	r4, [r0, r3]
 800c376:	3304      	adds	r3, #4

0800c378 <LoopCopyDataInit>:
 800c378:	18c4      	adds	r4, r0, r3
 800c37a:	428c      	cmp	r4, r1
 800c37c:	d3f9      	bcc.n	800c372 <CopyDataInit>
 800c37e:	4a0a      	ldr	r2, [pc, #40]	; (800c3a8 <LoopForever+0x12>)
 800c380:	4c0a      	ldr	r4, [pc, #40]	; (800c3ac <LoopForever+0x16>)
 800c382:	2300      	movs	r3, #0
 800c384:	e001      	b.n	800c38a <LoopFillZerobss>

0800c386 <FillZerobss>:
 800c386:	6013      	str	r3, [r2, #0]
 800c388:	3204      	adds	r2, #4

0800c38a <LoopFillZerobss>:
 800c38a:	42a2      	cmp	r2, r4
 800c38c:	d3fb      	bcc.n	800c386 <FillZerobss>
 800c38e:	f000 f87d 	bl	800c48c <__libc_init_array>
 800c392:	f7fd fc05 	bl	8009ba0 <main>

0800c396 <LoopForever>:
 800c396:	e7fe      	b.n	800c396 <LoopForever>
 800c398:	200a0000 	.word	0x200a0000
 800c39c:	20000000 	.word	0x20000000
 800c3a0:	200002d4 	.word	0x200002d4
 800c3a4:	0800c640 	.word	0x0800c640
 800c3a8:	200002d4 	.word	0x200002d4
 800c3ac:	2005370c 	.word	0x2005370c

0800c3b0 <ADC1_IRQHandler>:
 800c3b0:	e7fe      	b.n	800c3b0 <ADC1_IRQHandler>
	...

0800c3b4 <arm_max_f32>:
 800c3b4:	f101 3cff 	add.w	ip, r1, #4294967295
 800c3b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3ba:	4607      	mov	r7, r0
 800c3bc:	ea5f 0e9c 	movs.w	lr, ip, lsr #2
 800c3c0:	ecf7 7a01 	vldmia	r7!, {s15}
 800c3c4:	d060      	beq.n	800c488 <arm_max_f32+0xd4>
 800c3c6:	2400      	movs	r4, #0
 800c3c8:	3014      	adds	r0, #20
 800c3ca:	4625      	mov	r5, r4
 800c3cc:	ea4f 068e 	mov.w	r6, lr, lsl #2
 800c3d0:	ed10 7a04 	vldr	s14, [r0, #-16]
 800c3d4:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3dc:	bf48      	it	mi
 800c3de:	eef0 7a47 	vmovmi.f32	s15, s14
 800c3e2:	ed10 7a03 	vldr	s14, [r0, #-12]
 800c3e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c3ea:	bf48      	it	mi
 800c3ec:	1c65      	addmi	r5, r4, #1
 800c3ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3f2:	bf48      	it	mi
 800c3f4:	eef0 7a47 	vmovmi.f32	s15, s14
 800c3f8:	ed10 7a02 	vldr	s14, [r0, #-8]
 800c3fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c400:	bf48      	it	mi
 800c402:	1ca5      	addmi	r5, r4, #2
 800c404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c408:	bf48      	it	mi
 800c40a:	eef0 7a47 	vmovmi.f32	s15, s14
 800c40e:	ed10 7a01 	vldr	s14, [r0, #-4]
 800c412:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c416:	bf48      	it	mi
 800c418:	1ce5      	addmi	r5, r4, #3
 800c41a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c41e:	f104 0404 	add.w	r4, r4, #4
 800c422:	bf44      	itt	mi
 800c424:	eef0 7a47 	vmovmi.f32	s15, s14
 800c428:	4625      	movmi	r5, r4
 800c42a:	42a6      	cmp	r6, r4
 800c42c:	f100 0010 	add.w	r0, r0, #16
 800c430:	d1ce      	bne.n	800c3d0 <arm_max_f32+0x1c>
 800c432:	eb07 170e 	add.w	r7, r7, lr, lsl #4
 800c436:	f01c 0003 	ands.w	r0, ip, #3
 800c43a:	d021      	beq.n	800c480 <arm_max_f32+0xcc>
 800c43c:	ed97 7a00 	vldr	s14, [r7]
 800c440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c448:	bfc4      	itt	gt
 800c44a:	eef0 7a47 	vmovgt.f32	s15, s14
 800c44e:	1a0d      	subgt	r5, r1, r0
 800c450:	3801      	subs	r0, #1
 800c452:	d015      	beq.n	800c480 <arm_max_f32+0xcc>
 800c454:	ed97 7a01 	vldr	s14, [r7, #4]
 800c458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800c45c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c460:	bf44      	itt	mi
 800c462:	eef0 7a47 	vmovmi.f32	s15, s14
 800c466:	1a0d      	submi	r5, r1, r0
 800c468:	2801      	cmp	r0, #1
 800c46a:	d009      	beq.n	800c480 <arm_max_f32+0xcc>
 800c46c:	ed97 7a02 	vldr	s14, [r7, #8]
 800c470:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800c474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c478:	bfc4      	itt	gt
 800c47a:	eef0 7a47 	vmovgt.f32	s15, s14
 800c47e:	4665      	movgt	r5, ip
 800c480:	edc2 7a00 	vstr	s15, [r2]
 800c484:	601d      	str	r5, [r3, #0]
 800c486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c488:	4675      	mov	r5, lr
 800c48a:	e7d4      	b.n	800c436 <arm_max_f32+0x82>

0800c48c <__libc_init_array>:
 800c48c:	b570      	push	{r4, r5, r6, lr}
 800c48e:	4d0d      	ldr	r5, [pc, #52]	; (800c4c4 <__libc_init_array+0x38>)
 800c490:	4c0d      	ldr	r4, [pc, #52]	; (800c4c8 <__libc_init_array+0x3c>)
 800c492:	1b64      	subs	r4, r4, r5
 800c494:	10a4      	asrs	r4, r4, #2
 800c496:	2600      	movs	r6, #0
 800c498:	42a6      	cmp	r6, r4
 800c49a:	d109      	bne.n	800c4b0 <__libc_init_array+0x24>
 800c49c:	4d0b      	ldr	r5, [pc, #44]	; (800c4cc <__libc_init_array+0x40>)
 800c49e:	4c0c      	ldr	r4, [pc, #48]	; (800c4d0 <__libc_init_array+0x44>)
 800c4a0:	f000 f83c 	bl	800c51c <_init>
 800c4a4:	1b64      	subs	r4, r4, r5
 800c4a6:	10a4      	asrs	r4, r4, #2
 800c4a8:	2600      	movs	r6, #0
 800c4aa:	42a6      	cmp	r6, r4
 800c4ac:	d105      	bne.n	800c4ba <__libc_init_array+0x2e>
 800c4ae:	bd70      	pop	{r4, r5, r6, pc}
 800c4b0:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4b4:	4798      	blx	r3
 800c4b6:	3601      	adds	r6, #1
 800c4b8:	e7ee      	b.n	800c498 <__libc_init_array+0xc>
 800c4ba:	f855 3b04 	ldr.w	r3, [r5], #4
 800c4be:	4798      	blx	r3
 800c4c0:	3601      	adds	r6, #1
 800c4c2:	e7f2      	b.n	800c4aa <__libc_init_array+0x1e>
 800c4c4:	0800c638 	.word	0x0800c638
 800c4c8:	0800c638 	.word	0x0800c638
 800c4cc:	0800c638 	.word	0x0800c638
 800c4d0:	0800c63c 	.word	0x0800c63c

0800c4d4 <memset>:
 800c4d4:	4402      	add	r2, r0
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	4293      	cmp	r3, r2
 800c4da:	d100      	bne.n	800c4de <memset+0xa>
 800c4dc:	4770      	bx	lr
 800c4de:	f803 1b01 	strb.w	r1, [r3], #1
 800c4e2:	e7f9      	b.n	800c4d8 <memset+0x4>

0800c4e4 <strcpy>:
 800c4e4:	4603      	mov	r3, r0
 800c4e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c4ea:	f803 2b01 	strb.w	r2, [r3], #1
 800c4ee:	2a00      	cmp	r2, #0
 800c4f0:	d1f9      	bne.n	800c4e6 <strcpy+0x2>
 800c4f2:	4770      	bx	lr

0800c4f4 <strncmp>:
 800c4f4:	b510      	push	{r4, lr}
 800c4f6:	b17a      	cbz	r2, 800c518 <strncmp+0x24>
 800c4f8:	4603      	mov	r3, r0
 800c4fa:	3901      	subs	r1, #1
 800c4fc:	1884      	adds	r4, r0, r2
 800c4fe:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c502:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c506:	4290      	cmp	r0, r2
 800c508:	d101      	bne.n	800c50e <strncmp+0x1a>
 800c50a:	42a3      	cmp	r3, r4
 800c50c:	d101      	bne.n	800c512 <strncmp+0x1e>
 800c50e:	1a80      	subs	r0, r0, r2
 800c510:	bd10      	pop	{r4, pc}
 800c512:	2800      	cmp	r0, #0
 800c514:	d1f3      	bne.n	800c4fe <strncmp+0xa>
 800c516:	e7fa      	b.n	800c50e <strncmp+0x1a>
 800c518:	4610      	mov	r0, r2
 800c51a:	e7f9      	b.n	800c510 <strncmp+0x1c>

0800c51c <_init>:
 800c51c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c51e:	bf00      	nop
 800c520:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c522:	bc08      	pop	{r3}
 800c524:	469e      	mov	lr, r3
 800c526:	4770      	bx	lr

0800c528 <_fini>:
 800c528:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c52a:	bf00      	nop
 800c52c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c52e:	bc08      	pop	{r3}
 800c530:	469e      	mov	lr, r3
 800c532:	4770      	bx	lr
