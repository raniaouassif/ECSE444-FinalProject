
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008374  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008530  08008530  00018530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080085a0  080085a0  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  080085a0  080085a0  000185a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080085a8  080085a8  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080085a8  080085a8  000185a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080085ac  080085ac  000185ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080085b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004e590  20000040  080085f0  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2004e5d0  080085f0  0002e5d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ed6d  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033ac  00000000  00000000  0003eddd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001928  00000000  00000000  00042190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000017f0  00000000  00000000  00043ab8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c4fc  00000000  00000000  000452a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d750  00000000  00000000  000717a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001147ca  00000000  00000000  0008eef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a36be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006cb8  00000000  00000000  001a3710  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20000040 	.word	0x20000040
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08008518 	.word	0x08008518

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000044 	.word	0x20000044
 80001f8:	08008518 	.word	0x08008518

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000210:	f000 b974 	b.w	80004fc <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	4604      	mov	r4, r0
 8000234:	468e      	mov	lr, r1
 8000236:	2b00      	cmp	r3, #0
 8000238:	d14d      	bne.n	80002d6 <__udivmoddi4+0xaa>
 800023a:	428a      	cmp	r2, r1
 800023c:	4694      	mov	ip, r2
 800023e:	d969      	bls.n	8000314 <__udivmoddi4+0xe8>
 8000240:	fab2 f282 	clz	r2, r2
 8000244:	b152      	cbz	r2, 800025c <__udivmoddi4+0x30>
 8000246:	fa01 f302 	lsl.w	r3, r1, r2
 800024a:	f1c2 0120 	rsb	r1, r2, #32
 800024e:	fa20 f101 	lsr.w	r1, r0, r1
 8000252:	fa0c fc02 	lsl.w	ip, ip, r2
 8000256:	ea41 0e03 	orr.w	lr, r1, r3
 800025a:	4094      	lsls	r4, r2
 800025c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000260:	0c21      	lsrs	r1, r4, #16
 8000262:	fbbe f6f8 	udiv	r6, lr, r8
 8000266:	fa1f f78c 	uxth.w	r7, ip
 800026a:	fb08 e316 	mls	r3, r8, r6, lr
 800026e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000272:	fb06 f107 	mul.w	r1, r6, r7
 8000276:	4299      	cmp	r1, r3
 8000278:	d90a      	bls.n	8000290 <__udivmoddi4+0x64>
 800027a:	eb1c 0303 	adds.w	r3, ip, r3
 800027e:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000282:	f080 811f 	bcs.w	80004c4 <__udivmoddi4+0x298>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 811c 	bls.w	80004c4 <__udivmoddi4+0x298>
 800028c:	3e02      	subs	r6, #2
 800028e:	4463      	add	r3, ip
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0f8 	udiv	r0, r3, r8
 8000298:	fb08 3310 	mls	r3, r8, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 f707 	mul.w	r7, r0, r7
 80002a4:	42a7      	cmp	r7, r4
 80002a6:	d90a      	bls.n	80002be <__udivmoddi4+0x92>
 80002a8:	eb1c 0404 	adds.w	r4, ip, r4
 80002ac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002b0:	f080 810a 	bcs.w	80004c8 <__udivmoddi4+0x29c>
 80002b4:	42a7      	cmp	r7, r4
 80002b6:	f240 8107 	bls.w	80004c8 <__udivmoddi4+0x29c>
 80002ba:	4464      	add	r4, ip
 80002bc:	3802      	subs	r0, #2
 80002be:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c2:	1be4      	subs	r4, r4, r7
 80002c4:	2600      	movs	r6, #0
 80002c6:	b11d      	cbz	r5, 80002d0 <__udivmoddi4+0xa4>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c5 4300 	strd	r4, r3, [r5]
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xc2>
 80002da:	2d00      	cmp	r5, #0
 80002dc:	f000 80ef 	beq.w	80004be <__udivmoddi4+0x292>
 80002e0:	2600      	movs	r6, #0
 80002e2:	e9c5 0100 	strd	r0, r1, [r5]
 80002e6:	4630      	mov	r0, r6
 80002e8:	4631      	mov	r1, r6
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f683 	clz	r6, r3
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	d14a      	bne.n	800038c <__udivmoddi4+0x160>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd4>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80f9 	bhi.w	80004f2 <__udivmoddi4+0x2c6>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	469e      	mov	lr, r3
 800030a:	2d00      	cmp	r5, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa4>
 800030e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa4>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xec>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 8092 	bne.w	8000446 <__udivmoddi4+0x21a>
 8000322:	eba1 010c 	sub.w	r1, r1, ip
 8000326:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800032a:	fa1f fe8c 	uxth.w	lr, ip
 800032e:	2601      	movs	r6, #1
 8000330:	0c20      	lsrs	r0, r4, #16
 8000332:	fbb1 f3f7 	udiv	r3, r1, r7
 8000336:	fb07 1113 	mls	r1, r7, r3, r1
 800033a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033e:	fb0e f003 	mul.w	r0, lr, r3
 8000342:	4288      	cmp	r0, r1
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x12c>
 8000346:	eb1c 0101 	adds.w	r1, ip, r1
 800034a:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x12a>
 8000350:	4288      	cmp	r0, r1
 8000352:	f200 80cb 	bhi.w	80004ec <__udivmoddi4+0x2c0>
 8000356:	4643      	mov	r3, r8
 8000358:	1a09      	subs	r1, r1, r0
 800035a:	b2a4      	uxth	r4, r4
 800035c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000360:	fb07 1110 	mls	r1, r7, r0, r1
 8000364:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000368:	fb0e fe00 	mul.w	lr, lr, r0
 800036c:	45a6      	cmp	lr, r4
 800036e:	d908      	bls.n	8000382 <__udivmoddi4+0x156>
 8000370:	eb1c 0404 	adds.w	r4, ip, r4
 8000374:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000378:	d202      	bcs.n	8000380 <__udivmoddi4+0x154>
 800037a:	45a6      	cmp	lr, r4
 800037c:	f200 80bb 	bhi.w	80004f6 <__udivmoddi4+0x2ca>
 8000380:	4608      	mov	r0, r1
 8000382:	eba4 040e 	sub.w	r4, r4, lr
 8000386:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800038a:	e79c      	b.n	80002c6 <__udivmoddi4+0x9a>
 800038c:	f1c6 0720 	rsb	r7, r6, #32
 8000390:	40b3      	lsls	r3, r6
 8000392:	fa22 fc07 	lsr.w	ip, r2, r7
 8000396:	ea4c 0c03 	orr.w	ip, ip, r3
 800039a:	fa20 f407 	lsr.w	r4, r0, r7
 800039e:	fa01 f306 	lsl.w	r3, r1, r6
 80003a2:	431c      	orrs	r4, r3
 80003a4:	40f9      	lsrs	r1, r7
 80003a6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003aa:	fa00 f306 	lsl.w	r3, r0, r6
 80003ae:	fbb1 f8f9 	udiv	r8, r1, r9
 80003b2:	0c20      	lsrs	r0, r4, #16
 80003b4:	fa1f fe8c 	uxth.w	lr, ip
 80003b8:	fb09 1118 	mls	r1, r9, r8, r1
 80003bc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c0:	fb08 f00e 	mul.w	r0, r8, lr
 80003c4:	4288      	cmp	r0, r1
 80003c6:	fa02 f206 	lsl.w	r2, r2, r6
 80003ca:	d90b      	bls.n	80003e4 <__udivmoddi4+0x1b8>
 80003cc:	eb1c 0101 	adds.w	r1, ip, r1
 80003d0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d4:	f080 8088 	bcs.w	80004e8 <__udivmoddi4+0x2bc>
 80003d8:	4288      	cmp	r0, r1
 80003da:	f240 8085 	bls.w	80004e8 <__udivmoddi4+0x2bc>
 80003de:	f1a8 0802 	sub.w	r8, r8, #2
 80003e2:	4461      	add	r1, ip
 80003e4:	1a09      	subs	r1, r1, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb1 f0f9 	udiv	r0, r1, r9
 80003ec:	fb09 1110 	mls	r1, r9, r0, r1
 80003f0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f4:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f8:	458e      	cmp	lr, r1
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x1e2>
 80003fc:	eb1c 0101 	adds.w	r1, ip, r1
 8000400:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000404:	d26c      	bcs.n	80004e0 <__udivmoddi4+0x2b4>
 8000406:	458e      	cmp	lr, r1
 8000408:	d96a      	bls.n	80004e0 <__udivmoddi4+0x2b4>
 800040a:	3802      	subs	r0, #2
 800040c:	4461      	add	r1, ip
 800040e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000412:	fba0 9402 	umull	r9, r4, r0, r2
 8000416:	eba1 010e 	sub.w	r1, r1, lr
 800041a:	42a1      	cmp	r1, r4
 800041c:	46c8      	mov	r8, r9
 800041e:	46a6      	mov	lr, r4
 8000420:	d356      	bcc.n	80004d0 <__udivmoddi4+0x2a4>
 8000422:	d053      	beq.n	80004cc <__udivmoddi4+0x2a0>
 8000424:	b15d      	cbz	r5, 800043e <__udivmoddi4+0x212>
 8000426:	ebb3 0208 	subs.w	r2, r3, r8
 800042a:	eb61 010e 	sbc.w	r1, r1, lr
 800042e:	fa01 f707 	lsl.w	r7, r1, r7
 8000432:	fa22 f306 	lsr.w	r3, r2, r6
 8000436:	40f1      	lsrs	r1, r6
 8000438:	431f      	orrs	r7, r3
 800043a:	e9c5 7100 	strd	r7, r1, [r5]
 800043e:	2600      	movs	r6, #0
 8000440:	4631      	mov	r1, r6
 8000442:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000446:	f1c2 0320 	rsb	r3, r2, #32
 800044a:	40d8      	lsrs	r0, r3
 800044c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000450:	fa21 f303 	lsr.w	r3, r1, r3
 8000454:	4091      	lsls	r1, r2
 8000456:	4301      	orrs	r1, r0
 8000458:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800045c:	fa1f fe8c 	uxth.w	lr, ip
 8000460:	fbb3 f0f7 	udiv	r0, r3, r7
 8000464:	fb07 3610 	mls	r6, r7, r0, r3
 8000468:	0c0b      	lsrs	r3, r1, #16
 800046a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046e:	fb00 f60e 	mul.w	r6, r0, lr
 8000472:	429e      	cmp	r6, r3
 8000474:	fa04 f402 	lsl.w	r4, r4, r2
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0x260>
 800047a:	eb1c 0303 	adds.w	r3, ip, r3
 800047e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000482:	d22f      	bcs.n	80004e4 <__udivmoddi4+0x2b8>
 8000484:	429e      	cmp	r6, r3
 8000486:	d92d      	bls.n	80004e4 <__udivmoddi4+0x2b8>
 8000488:	3802      	subs	r0, #2
 800048a:	4463      	add	r3, ip
 800048c:	1b9b      	subs	r3, r3, r6
 800048e:	b289      	uxth	r1, r1
 8000490:	fbb3 f6f7 	udiv	r6, r3, r7
 8000494:	fb07 3316 	mls	r3, r7, r6, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb06 f30e 	mul.w	r3, r6, lr
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d908      	bls.n	80004b6 <__udivmoddi4+0x28a>
 80004a4:	eb1c 0101 	adds.w	r1, ip, r1
 80004a8:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004ac:	d216      	bcs.n	80004dc <__udivmoddi4+0x2b0>
 80004ae:	428b      	cmp	r3, r1
 80004b0:	d914      	bls.n	80004dc <__udivmoddi4+0x2b0>
 80004b2:	3e02      	subs	r6, #2
 80004b4:	4461      	add	r1, ip
 80004b6:	1ac9      	subs	r1, r1, r3
 80004b8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004bc:	e738      	b.n	8000330 <__udivmoddi4+0x104>
 80004be:	462e      	mov	r6, r5
 80004c0:	4628      	mov	r0, r5
 80004c2:	e705      	b.n	80002d0 <__udivmoddi4+0xa4>
 80004c4:	4606      	mov	r6, r0
 80004c6:	e6e3      	b.n	8000290 <__udivmoddi4+0x64>
 80004c8:	4618      	mov	r0, r3
 80004ca:	e6f8      	b.n	80002be <__udivmoddi4+0x92>
 80004cc:	454b      	cmp	r3, r9
 80004ce:	d2a9      	bcs.n	8000424 <__udivmoddi4+0x1f8>
 80004d0:	ebb9 0802 	subs.w	r8, r9, r2
 80004d4:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d8:	3801      	subs	r0, #1
 80004da:	e7a3      	b.n	8000424 <__udivmoddi4+0x1f8>
 80004dc:	4646      	mov	r6, r8
 80004de:	e7ea      	b.n	80004b6 <__udivmoddi4+0x28a>
 80004e0:	4620      	mov	r0, r4
 80004e2:	e794      	b.n	800040e <__udivmoddi4+0x1e2>
 80004e4:	4640      	mov	r0, r8
 80004e6:	e7d1      	b.n	800048c <__udivmoddi4+0x260>
 80004e8:	46d0      	mov	r8, sl
 80004ea:	e77b      	b.n	80003e4 <__udivmoddi4+0x1b8>
 80004ec:	3b02      	subs	r3, #2
 80004ee:	4461      	add	r1, ip
 80004f0:	e732      	b.n	8000358 <__udivmoddi4+0x12c>
 80004f2:	4630      	mov	r0, r6
 80004f4:	e709      	b.n	800030a <__udivmoddi4+0xde>
 80004f6:	4464      	add	r4, ip
 80004f8:	3802      	subs	r0, #2
 80004fa:	e742      	b.n	8000382 <__udivmoddi4+0x156>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000506:	2300      	movs	r3, #0
 8000508:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800050a:	2003      	movs	r0, #3
 800050c:	f000 f960 	bl	80007d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000510:	2000      	movs	r0, #0
 8000512:	f000 f80d 	bl	8000530 <HAL_InitTick>
 8000516:	4603      	mov	r3, r0
 8000518:	2b00      	cmp	r3, #0
 800051a:	d002      	beq.n	8000522 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800051c:	2301      	movs	r3, #1
 800051e:	71fb      	strb	r3, [r7, #7]
 8000520:	e001      	b.n	8000526 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000522:	f007 fc11 	bl	8007d48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000526:	79fb      	ldrb	r3, [r7, #7]
}
 8000528:	4618      	mov	r0, r3
 800052a:	3708      	adds	r7, #8
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b084      	sub	sp, #16
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000538:	2300      	movs	r3, #0
 800053a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800053c:	4b17      	ldr	r3, [pc, #92]	; (800059c <HAL_InitTick+0x6c>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	2b00      	cmp	r3, #0
 8000542:	d023      	beq.n	800058c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000544:	4b16      	ldr	r3, [pc, #88]	; (80005a0 <HAL_InitTick+0x70>)
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <HAL_InitTick+0x6c>)
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	4619      	mov	r1, r3
 800054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000552:	fbb3 f3f1 	udiv	r3, r3, r1
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	4618      	mov	r0, r3
 800055c:	f000 f96d 	bl	800083a <HAL_SYSTICK_Config>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d10f      	bne.n	8000586 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	2b0f      	cmp	r3, #15
 800056a:	d809      	bhi.n	8000580 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800056c:	2200      	movs	r2, #0
 800056e:	6879      	ldr	r1, [r7, #4]
 8000570:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000574:	f000 f937 	bl	80007e6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000578:	4a0a      	ldr	r2, [pc, #40]	; (80005a4 <HAL_InitTick+0x74>)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	6013      	str	r3, [r2, #0]
 800057e:	e007      	b.n	8000590 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000580:	2301      	movs	r3, #1
 8000582:	73fb      	strb	r3, [r7, #15]
 8000584:	e004      	b.n	8000590 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000586:	2301      	movs	r3, #1
 8000588:	73fb      	strb	r3, [r7, #15]
 800058a:	e001      	b.n	8000590 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800058c:	2301      	movs	r3, #1
 800058e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000590:	7bfb      	ldrb	r3, [r7, #15]
}
 8000592:	4618      	mov	r0, r3
 8000594:	3710      	adds	r7, #16
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	bf00      	nop
 800059c:	20000004 	.word	0x20000004
 80005a0:	2000003c 	.word	0x2000003c
 80005a4:	20000000 	.word	0x20000000

080005a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a8:	b480      	push	{r7}
 80005aa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005ac:	4b06      	ldr	r3, [pc, #24]	; (80005c8 <HAL_IncTick+0x20>)
 80005ae:	781b      	ldrb	r3, [r3, #0]
 80005b0:	461a      	mov	r2, r3
 80005b2:	4b06      	ldr	r3, [pc, #24]	; (80005cc <HAL_IncTick+0x24>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	4413      	add	r3, r2
 80005b8:	4a04      	ldr	r2, [pc, #16]	; (80005cc <HAL_IncTick+0x24>)
 80005ba:	6013      	str	r3, [r2, #0]
}
 80005bc:	bf00      	nop
 80005be:	46bd      	mov	sp, r7
 80005c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c4:	4770      	bx	lr
 80005c6:	bf00      	nop
 80005c8:	20000004 	.word	0x20000004
 80005cc:	2000005c 	.word	0x2000005c

080005d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005d0:	b480      	push	{r7}
 80005d2:	af00      	add	r7, sp, #0
  return uwTick;
 80005d4:	4b03      	ldr	r3, [pc, #12]	; (80005e4 <HAL_GetTick+0x14>)
 80005d6:	681b      	ldr	r3, [r3, #0]
}
 80005d8:	4618      	mov	r0, r3
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop
 80005e4:	2000005c 	.word	0x2000005c

080005e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005f0:	f7ff ffee 	bl	80005d0 <HAL_GetTick>
 80005f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000600:	d005      	beq.n	800060e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000602:	4b0a      	ldr	r3, [pc, #40]	; (800062c <HAL_Delay+0x44>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800060e:	bf00      	nop
 8000610:	f7ff ffde 	bl	80005d0 <HAL_GetTick>
 8000614:	4602      	mov	r2, r0
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	1ad3      	subs	r3, r2, r3
 800061a:	68fa      	ldr	r2, [r7, #12]
 800061c:	429a      	cmp	r2, r3
 800061e:	d8f7      	bhi.n	8000610 <HAL_Delay+0x28>
  {
  }
}
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	3710      	adds	r7, #16
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000004 	.word	0x20000004

08000630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000630:	b480      	push	{r7}
 8000632:	b085      	sub	sp, #20
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	f003 0307 	and.w	r3, r3, #7
 800063e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000646:	68ba      	ldr	r2, [r7, #8]
 8000648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800064c:	4013      	ands	r3, r2
 800064e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800065c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000662:	4a04      	ldr	r2, [pc, #16]	; (8000674 <__NVIC_SetPriorityGrouping+0x44>)
 8000664:	68bb      	ldr	r3, [r7, #8]
 8000666:	60d3      	str	r3, [r2, #12]
}
 8000668:	bf00      	nop
 800066a:	3714      	adds	r7, #20
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000678:	b480      	push	{r7}
 800067a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800067c:	4b04      	ldr	r3, [pc, #16]	; (8000690 <__NVIC_GetPriorityGrouping+0x18>)
 800067e:	68db      	ldr	r3, [r3, #12]
 8000680:	0a1b      	lsrs	r3, r3, #8
 8000682:	f003 0307 	and.w	r3, r3, #7
}
 8000686:	4618      	mov	r0, r3
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr
 8000690:	e000ed00 	.word	0xe000ed00

08000694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0
 800069a:	4603      	mov	r3, r0
 800069c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db0b      	blt.n	80006be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f003 021f 	and.w	r2, r3, #31
 80006ac:	4907      	ldr	r1, [pc, #28]	; (80006cc <__NVIC_EnableIRQ+0x38>)
 80006ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b2:	095b      	lsrs	r3, r3, #5
 80006b4:	2001      	movs	r0, #1
 80006b6:	fa00 f202 	lsl.w	r2, r0, r2
 80006ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80006be:	bf00      	nop
 80006c0:	370c      	adds	r7, #12
 80006c2:	46bd      	mov	sp, r7
 80006c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c8:	4770      	bx	lr
 80006ca:	bf00      	nop
 80006cc:	e000e100 	.word	0xe000e100

080006d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	4603      	mov	r3, r0
 80006d8:	6039      	str	r1, [r7, #0]
 80006da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	db0a      	blt.n	80006fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e4:	683b      	ldr	r3, [r7, #0]
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	490c      	ldr	r1, [pc, #48]	; (800071c <__NVIC_SetPriority+0x4c>)
 80006ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ee:	0112      	lsls	r2, r2, #4
 80006f0:	b2d2      	uxtb	r2, r2
 80006f2:	440b      	add	r3, r1
 80006f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006f8:	e00a      	b.n	8000710 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006fa:	683b      	ldr	r3, [r7, #0]
 80006fc:	b2da      	uxtb	r2, r3
 80006fe:	4908      	ldr	r1, [pc, #32]	; (8000720 <__NVIC_SetPriority+0x50>)
 8000700:	79fb      	ldrb	r3, [r7, #7]
 8000702:	f003 030f 	and.w	r3, r3, #15
 8000706:	3b04      	subs	r3, #4
 8000708:	0112      	lsls	r2, r2, #4
 800070a:	b2d2      	uxtb	r2, r2
 800070c:	440b      	add	r3, r1
 800070e:	761a      	strb	r2, [r3, #24]
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	e000e100 	.word	0xe000e100
 8000720:	e000ed00 	.word	0xe000ed00

08000724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000724:	b480      	push	{r7}
 8000726:	b089      	sub	sp, #36	; 0x24
 8000728:	af00      	add	r7, sp, #0
 800072a:	60f8      	str	r0, [r7, #12]
 800072c:	60b9      	str	r1, [r7, #8]
 800072e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	f003 0307 	and.w	r3, r3, #7
 8000736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000738:	69fb      	ldr	r3, [r7, #28]
 800073a:	f1c3 0307 	rsb	r3, r3, #7
 800073e:	2b04      	cmp	r3, #4
 8000740:	bf28      	it	cs
 8000742:	2304      	movcs	r3, #4
 8000744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000746:	69fb      	ldr	r3, [r7, #28]
 8000748:	3304      	adds	r3, #4
 800074a:	2b06      	cmp	r3, #6
 800074c:	d902      	bls.n	8000754 <NVIC_EncodePriority+0x30>
 800074e:	69fb      	ldr	r3, [r7, #28]
 8000750:	3b03      	subs	r3, #3
 8000752:	e000      	b.n	8000756 <NVIC_EncodePriority+0x32>
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000758:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800075c:	69bb      	ldr	r3, [r7, #24]
 800075e:	fa02 f303 	lsl.w	r3, r2, r3
 8000762:	43da      	mvns	r2, r3
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	401a      	ands	r2, r3
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800076c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000770:	697b      	ldr	r3, [r7, #20]
 8000772:	fa01 f303 	lsl.w	r3, r1, r3
 8000776:	43d9      	mvns	r1, r3
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800077c:	4313      	orrs	r3, r2
         );
}
 800077e:	4618      	mov	r0, r3
 8000780:	3724      	adds	r7, #36	; 0x24
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
	...

0800078c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	3b01      	subs	r3, #1
 8000798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800079c:	d301      	bcc.n	80007a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800079e:	2301      	movs	r3, #1
 80007a0:	e00f      	b.n	80007c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007a2:	4a0a      	ldr	r2, [pc, #40]	; (80007cc <SysTick_Config+0x40>)
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	3b01      	subs	r3, #1
 80007a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007aa:	210f      	movs	r1, #15
 80007ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007b0:	f7ff ff8e 	bl	80006d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <SysTick_Config+0x40>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007ba:	4b04      	ldr	r3, [pc, #16]	; (80007cc <SysTick_Config+0x40>)
 80007bc:	2207      	movs	r2, #7
 80007be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	e000e010 	.word	0xe000e010

080007d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff29 	bl	8000630 <__NVIC_SetPriorityGrouping>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	4603      	mov	r3, r0
 80007ee:	60b9      	str	r1, [r7, #8]
 80007f0:	607a      	str	r2, [r7, #4]
 80007f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007f4:	2300      	movs	r3, #0
 80007f6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007f8:	f7ff ff3e 	bl	8000678 <__NVIC_GetPriorityGrouping>
 80007fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007fe:	687a      	ldr	r2, [r7, #4]
 8000800:	68b9      	ldr	r1, [r7, #8]
 8000802:	6978      	ldr	r0, [r7, #20]
 8000804:	f7ff ff8e 	bl	8000724 <NVIC_EncodePriority>
 8000808:	4602      	mov	r2, r0
 800080a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800080e:	4611      	mov	r1, r2
 8000810:	4618      	mov	r0, r3
 8000812:	f7ff ff5d 	bl	80006d0 <__NVIC_SetPriority>
}
 8000816:	bf00      	nop
 8000818:	3718      	adds	r7, #24
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b082      	sub	sp, #8
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800082c:	4618      	mov	r0, r3
 800082e:	f7ff ff31 	bl	8000694 <__NVIC_EnableIRQ>
}
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}

0800083a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800083a:	b580      	push	{r7, lr}
 800083c:	b082      	sub	sp, #8
 800083e:	af00      	add	r7, sp, #0
 8000840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000842:	6878      	ldr	r0, [r7, #4]
 8000844:	f7ff ffa2 	bl	800078c <SysTick_Config>
 8000848:	4603      	mov	r3, r0
}
 800084a:	4618      	mov	r0, r3
 800084c:	3708      	adds	r7, #8
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}

08000852 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000852:	b580      	push	{r7, lr}
 8000854:	b082      	sub	sp, #8
 8000856:	af00      	add	r7, sp, #0
 8000858:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	2b00      	cmp	r3, #0
 800085e:	d101      	bne.n	8000864 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000860:	2301      	movs	r3, #1
 8000862:	e014      	b.n	800088e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	791b      	ldrb	r3, [r3, #4]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d105      	bne.n	800087a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	2200      	movs	r2, #0
 8000872:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f007 fa8b 	bl	8007d90 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	2202      	movs	r2, #2
 800087e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2201      	movs	r2, #1
 800088a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800088c:	2300      	movs	r3, #0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b086      	sub	sp, #24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
 80008a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	795b      	ldrb	r3, [r3, #5]
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d101      	bne.n	80008b6 <HAL_DAC_Start_DMA+0x1e>
 80008b2:	2302      	movs	r3, #2
 80008b4:	e0ab      	b.n	8000a0e <HAL_DAC_Start_DMA+0x176>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2201      	movs	r2, #1
 80008ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80008bc:	68fb      	ldr	r3, [r7, #12]
 80008be:	2202      	movs	r2, #2
 80008c0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d12f      	bne.n	8000928 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	689b      	ldr	r3, [r3, #8]
 80008cc:	4a52      	ldr	r2, [pc, #328]	; (8000a18 <HAL_DAC_Start_DMA+0x180>)
 80008ce:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	689b      	ldr	r3, [r3, #8]
 80008d4:	4a51      	ldr	r2, [pc, #324]	; (8000a1c <HAL_DAC_Start_DMA+0x184>)
 80008d6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	689b      	ldr	r3, [r3, #8]
 80008dc:	4a50      	ldr	r2, [pc, #320]	; (8000a20 <HAL_DAC_Start_DMA+0x188>)
 80008de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	681a      	ldr	r2, [r3, #0]
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80008ee:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80008f0:	6a3b      	ldr	r3, [r7, #32]
 80008f2:	2b08      	cmp	r3, #8
 80008f4:	d013      	beq.n	800091e <HAL_DAC_Start_DMA+0x86>
 80008f6:	6a3b      	ldr	r3, [r7, #32]
 80008f8:	2b08      	cmp	r3, #8
 80008fa:	d845      	bhi.n	8000988 <HAL_DAC_Start_DMA+0xf0>
 80008fc:	6a3b      	ldr	r3, [r7, #32]
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d003      	beq.n	800090a <HAL_DAC_Start_DMA+0x72>
 8000902:	6a3b      	ldr	r3, [r7, #32]
 8000904:	2b04      	cmp	r3, #4
 8000906:	d005      	beq.n	8000914 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8000908:	e03e      	b.n	8000988 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800090a:	68fb      	ldr	r3, [r7, #12]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	3308      	adds	r3, #8
 8000910:	613b      	str	r3, [r7, #16]
        break;
 8000912:	e03c      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	330c      	adds	r3, #12
 800091a:	613b      	str	r3, [r7, #16]
        break;
 800091c:	e037      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	3310      	adds	r3, #16
 8000924:	613b      	str	r3, [r7, #16]
        break;
 8000926:	e032      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	4a3d      	ldr	r2, [pc, #244]	; (8000a24 <HAL_DAC_Start_DMA+0x18c>)
 800092e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	68db      	ldr	r3, [r3, #12]
 8000934:	4a3c      	ldr	r2, [pc, #240]	; (8000a28 <HAL_DAC_Start_DMA+0x190>)
 8000936:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	4a3b      	ldr	r2, [pc, #236]	; (8000a2c <HAL_DAC_Start_DMA+0x194>)
 800093e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	681a      	ldr	r2, [r3, #0]
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800094e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000950:	6a3b      	ldr	r3, [r7, #32]
 8000952:	2b08      	cmp	r3, #8
 8000954:	d013      	beq.n	800097e <HAL_DAC_Start_DMA+0xe6>
 8000956:	6a3b      	ldr	r3, [r7, #32]
 8000958:	2b08      	cmp	r3, #8
 800095a:	d817      	bhi.n	800098c <HAL_DAC_Start_DMA+0xf4>
 800095c:	6a3b      	ldr	r3, [r7, #32]
 800095e:	2b00      	cmp	r3, #0
 8000960:	d003      	beq.n	800096a <HAL_DAC_Start_DMA+0xd2>
 8000962:	6a3b      	ldr	r3, [r7, #32]
 8000964:	2b04      	cmp	r3, #4
 8000966:	d005      	beq.n	8000974 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000968:	e010      	b.n	800098c <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	3314      	adds	r3, #20
 8000970:	613b      	str	r3, [r7, #16]
        break;
 8000972:	e00c      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	3318      	adds	r3, #24
 800097a:	613b      	str	r3, [r7, #16]
        break;
 800097c:	e007      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	681b      	ldr	r3, [r3, #0]
 8000982:	331c      	adds	r3, #28
 8000984:	613b      	str	r3, [r7, #16]
        break;
 8000986:	e002      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        break;
 8000988:	bf00      	nop
 800098a:	e000      	b.n	800098e <HAL_DAC_Start_DMA+0xf6>
        break;
 800098c:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	2b00      	cmp	r3, #0
 8000992:	d111      	bne.n	80009b8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80009a2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	6898      	ldr	r0, [r3, #8]
 80009a8:	6879      	ldr	r1, [r7, #4]
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	693a      	ldr	r2, [r7, #16]
 80009ae:	f000 febf 	bl	8001730 <HAL_DMA_Start_IT>
 80009b2:	4603      	mov	r3, r0
 80009b4:	75fb      	strb	r3, [r7, #23]
 80009b6:	e010      	b.n	80009da <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	681a      	ldr	r2, [r3, #0]
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80009c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	68d8      	ldr	r0, [r3, #12]
 80009cc:	6879      	ldr	r1, [r7, #4]
 80009ce:	683b      	ldr	r3, [r7, #0]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	f000 fead 	bl	8001730 <HAL_DMA_Start_IT>
 80009d6:	4603      	mov	r3, r0
 80009d8:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2200      	movs	r2, #0
 80009de:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80009e0:	7dfb      	ldrb	r3, [r7, #23]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d10c      	bne.n	8000a00 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	6819      	ldr	r1, [r3, #0]
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	f003 0310 	and.w	r3, r3, #16
 80009f2:	2201      	movs	r2, #1
 80009f4:	409a      	lsls	r2, r3
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	430a      	orrs	r2, r1
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	e005      	b.n	8000a0c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	691b      	ldr	r3, [r3, #16]
 8000a04:	f043 0204 	orr.w	r2, r3, #4
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000a0c:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3718      	adds	r7, #24
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	08000d65 	.word	0x08000d65
 8000a1c:	08000d87 	.word	0x08000d87
 8000a20:	08000da3 	.word	0x08000da3
 8000a24:	08000e0d 	.word	0x08000e0d
 8000a28:	08000e2f 	.word	0x08000e2f
 8000a2c:	08000e4b 	.word	0x08000e4b

08000a30 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
 8000a38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	681b      	ldr	r3, [r3, #0]
 8000a3e:	6819      	ldr	r1, [r3, #0]
 8000a40:	683b      	ldr	r3, [r7, #0]
 8000a42:	f003 0310 	and.w	r3, r3, #16
 8000a46:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43da      	mvns	r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	400a      	ands	r2, r1
 8000a56:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	6819      	ldr	r1, [r3, #0]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	f003 0310 	and.w	r3, r3, #16
 8000a64:	2201      	movs	r2, #1
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43da      	mvns	r2, r3
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	400a      	ands	r2, r1
 8000a72:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10d      	bne.n	8000a96 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	689b      	ldr	r3, [r3, #8]
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f000 fed1 	bl	8001826 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	e00c      	b.n	8000ab0 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	68db      	ldr	r3, [r3, #12]
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 fec3 	bl	8001826 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000aae:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8000ab0:	2300      	movs	r3, #0
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3708      	adds	r7, #8
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}

08000aba <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000aba:	b480      	push	{r7}
 8000abc:	b083      	sub	sp, #12
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000ac2:	bf00      	nop
 8000ac4:	370c      	adds	r7, #12
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr

08000ace <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
	...

08000ae4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	795b      	ldrb	r3, [r3, #5]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d101      	bne.n	8000b00 <HAL_DAC_ConfigChannel+0x1c>
 8000afc:	2302      	movs	r3, #2
 8000afe:	e12a      	b.n	8000d56 <HAL_DAC_ConfigChannel+0x272>
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	2201      	movs	r2, #1
 8000b04:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	2202      	movs	r2, #2
 8000b0a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000b0c:	68bb      	ldr	r3, [r7, #8]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b04      	cmp	r3, #4
 8000b12:	d174      	bne.n	8000bfe <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000b14:	f7ff fd5c 	bl	80005d0 <HAL_GetTick>
 8000b18:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d134      	bne.n	8000b8a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b20:	e011      	b.n	8000b46 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b22:	f7ff fd55 	bl	80005d0 <HAL_GetTick>
 8000b26:	4602      	mov	r2, r0
 8000b28:	69bb      	ldr	r3, [r7, #24]
 8000b2a:	1ad3      	subs	r3, r2, r3
 8000b2c:	2b01      	cmp	r3, #1
 8000b2e:	d90a      	bls.n	8000b46 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	691b      	ldr	r3, [r3, #16]
 8000b34:	f043 0208 	orr.w	r2, r3, #8
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	2203      	movs	r2, #3
 8000b40:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b42:	2303      	movs	r3, #3
 8000b44:	e107      	b.n	8000d56 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1e6      	bne.n	8000b22 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000b54:	2001      	movs	r0, #1
 8000b56:	f7ff fd47 	bl	80005e8 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	68ba      	ldr	r2, [r7, #8]
 8000b60:	69d2      	ldr	r2, [r2, #28]
 8000b62:	641a      	str	r2, [r3, #64]	; 0x40
 8000b64:	e01e      	b.n	8000ba4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000b66:	f7ff fd33 	bl	80005d0 <HAL_GetTick>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	69bb      	ldr	r3, [r7, #24]
 8000b6e:	1ad3      	subs	r3, r2, r3
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d90a      	bls.n	8000b8a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	691b      	ldr	r3, [r3, #16]
 8000b78:	f043 0208 	orr.w	r2, r3, #8
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	2203      	movs	r2, #3
 8000b84:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000b86:	2303      	movs	r3, #3
 8000b88:	e0e5      	b.n	8000d56 <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	681b      	ldr	r3, [r3, #0]
 8000b8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	dbe8      	blt.n	8000b66 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000b94:	2001      	movs	r0, #1
 8000b96:	f7ff fd27 	bl	80005e8 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	68ba      	ldr	r2, [r7, #8]
 8000ba0:	69d2      	ldr	r2, [r2, #28]
 8000ba2:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f003 0310 	and.w	r3, r3, #16
 8000bb0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb8:	43db      	mvns	r3, r3
 8000bba:	ea02 0103 	and.w	r1, r2, r3
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	6a1a      	ldr	r2, [r3, #32]
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f003 0310 	and.w	r3, r3, #16
 8000bc8:	409a      	lsls	r2, r3
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	430a      	orrs	r2, r1
 8000bd0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0310 	and.w	r3, r3, #16
 8000bde:	21ff      	movs	r1, #255	; 0xff
 8000be0:	fa01 f303 	lsl.w	r3, r1, r3
 8000be4:	43db      	mvns	r3, r3
 8000be6:	ea02 0103 	and.w	r1, r2, r3
 8000bea:	68bb      	ldr	r3, [r7, #8]
 8000bec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	f003 0310 	and.w	r3, r3, #16
 8000bf4:	409a      	lsls	r2, r3
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000bfe:	68bb      	ldr	r3, [r7, #8]
 8000c00:	695b      	ldr	r3, [r3, #20]
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d11d      	bne.n	8000c42 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c0c:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	f003 0310 	and.w	r3, r3, #16
 8000c14:	221f      	movs	r2, #31
 8000c16:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1a:	43db      	mvns	r3, r3
 8000c1c:	69fa      	ldr	r2, [r7, #28]
 8000c1e:	4013      	ands	r3, r2
 8000c20:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000c22:	68bb      	ldr	r3, [r7, #8]
 8000c24:	699b      	ldr	r3, [r3, #24]
 8000c26:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	697a      	ldr	r2, [r7, #20]
 8000c30:	fa02 f303 	lsl.w	r3, r2, r3
 8000c34:	69fa      	ldr	r2, [r7, #28]
 8000c36:	4313      	orrs	r3, r2
 8000c38:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	69fa      	ldr	r2, [r7, #28]
 8000c40:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c48:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	f003 0310 	and.w	r3, r3, #16
 8000c50:	2207      	movs	r2, #7
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	69fa      	ldr	r2, [r7, #28]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	685a      	ldr	r2, [r3, #4]
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	68db      	ldr	r3, [r3, #12]
 8000c66:	431a      	orrs	r2, r3
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	691b      	ldr	r3, [r3, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f003 0310 	and.w	r3, r3, #16
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69fa      	ldr	r2, [r7, #28]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000c82:	68fb      	ldr	r3, [r7, #12]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	69fa      	ldr	r2, [r7, #28]
 8000c88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	6819      	ldr	r1, [r3, #0]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	f003 0310 	and.w	r3, r3, #16
 8000c96:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43da      	mvns	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	400a      	ands	r2, r1
 8000ca6:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f003 0310 	and.w	r3, r3, #16
 8000cb6:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000cba:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbe:	43db      	mvns	r3, r3
 8000cc0:	69fa      	ldr	r2, [r7, #28]
 8000cc2:	4013      	ands	r3, r2
 8000cc4:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	f003 0310 	and.w	r3, r3, #16
 8000cd2:	697a      	ldr	r2, [r7, #20]
 8000cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd8:	69fa      	ldr	r2, [r7, #28]
 8000cda:	4313      	orrs	r3, r2
 8000cdc:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ce6:	d104      	bne.n	8000cf2 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000ce8:	69fb      	ldr	r3, [r7, #28]
 8000cea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cee:	61fb      	str	r3, [r7, #28]
 8000cf0:	e018      	b.n	8000d24 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000cf2:	68bb      	ldr	r3, [r7, #8]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d104      	bne.n	8000d04 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000cfa:	69fb      	ldr	r3, [r7, #28]
 8000cfc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d00:	61fb      	str	r3, [r7, #28]
 8000d02:	e00f      	b.n	8000d24 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000d04:	f003 faae 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 8000d08:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <HAL_DAC_ConfigChannel+0x27c>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d904      	bls.n	8000d1c <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000d12:	69fb      	ldr	r3, [r7, #28]
 8000d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e003      	b.n	8000d24 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000d22:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	69fa      	ldr	r2, [r7, #28]
 8000d2a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	6819      	ldr	r1, [r3, #0]
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f003 0310 	and.w	r3, r3, #16
 8000d38:	22c0      	movs	r2, #192	; 0xc0
 8000d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d3e:	43da      	mvns	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	400a      	ands	r2, r1
 8000d46:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d48:	68fb      	ldr	r3, [r7, #12]
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2200      	movs	r2, #0
 8000d52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3720      	adds	r7, #32
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	04c4b400 	.word	0x04c4b400

08000d64 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b084      	sub	sp, #16
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d70:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000d72:	68f8      	ldr	r0, [r7, #12]
 8000d74:	f006 fabc 	bl	80072f0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	711a      	strb	r2, [r3, #4]
}
 8000d7e:	bf00      	nop
 8000d80:	3710      	adds	r7, #16
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b084      	sub	sp, #16
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d92:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	f7ff fe90 	bl	8000aba <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000d9a:	bf00      	nop
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000da2:	b580      	push	{r7, lr}
 8000da4:	b084      	sub	sp, #16
 8000da6:	af00      	add	r7, sp, #0
 8000da8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	691b      	ldr	r3, [r3, #16]
 8000db4:	f043 0204 	orr.w	r2, r3, #4
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f7ff fe86 	bl	8000ace <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	711a      	strb	r2, [r3, #4]
}
 8000dc8:	bf00      	nop
 8000dca:	3710      	adds	r7, #16
 8000dcc:	46bd      	mov	sp, r7
 8000dce:	bd80      	pop	{r7, pc}

08000dd0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000dec:	bf00      	nop
 8000dee:	370c      	adds	r7, #12
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000e00:	bf00      	nop
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e18:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000e1a:	68f8      	ldr	r0, [r7, #12]
 8000e1c:	f7ff ffd8 	bl	8000dd0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	2201      	movs	r2, #1
 8000e24:	711a      	strb	r2, [r3, #4]
}
 8000e26:	bf00      	nop
 8000e28:	3710      	adds	r7, #16
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000e2e:	b580      	push	{r7, lr}
 8000e30:	b084      	sub	sp, #16
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e3a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000e3c:	68f8      	ldr	r0, [r7, #12]
 8000e3e:	f7ff ffd1 	bl	8000de4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b084      	sub	sp, #16
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e56:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	f043 0204 	orr.w	r2, r3, #4
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000e64:	68f8      	ldr	r0, [r7, #12]
 8000e66:	f7ff ffc7 	bl	8000df8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	711a      	strb	r2, [r3, #4]
}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d101      	bne.n	8000e8a <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	e0ac      	b.n	8000fe4 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f000 fab6 	bl	8001400 <DFSDM_GetChannelFromInstance>
 8000e94:	4603      	mov	r3, r0
 8000e96:	4a55      	ldr	r2, [pc, #340]	; (8000fec <HAL_DFSDM_ChannelInit+0x174>)
 8000e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000ea0:	2301      	movs	r3, #1
 8000ea2:	e09f      	b.n	8000fe4 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f007 f88d 	bl	8007fc4 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000eaa:	4b51      	ldr	r3, [pc, #324]	; (8000ff0 <HAL_DFSDM_ChannelInit+0x178>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	3301      	adds	r3, #1
 8000eb0:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <HAL_DFSDM_ChannelInit+0x178>)
 8000eb2:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000eb4:	4b4e      	ldr	r3, [pc, #312]	; (8000ff0 <HAL_DFSDM_ChannelInit+0x178>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d125      	bne.n	8000f08 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000ebc:	4b4d      	ldr	r3, [pc, #308]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a4c      	ldr	r2, [pc, #304]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ec2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000ec6:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000ec8:	4b4a      	ldr	r3, [pc, #296]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000eca:	681a      	ldr	r2, [r3, #0]
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	4948      	ldr	r1, [pc, #288]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000ed6:	4b47      	ldr	r3, [pc, #284]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	4a46      	ldr	r2, [pc, #280]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000edc:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000ee0:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	791b      	ldrb	r3, [r3, #4]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d108      	bne.n	8000efc <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000eea:	4b42      	ldr	r3, [pc, #264]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	68db      	ldr	r3, [r3, #12]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	041b      	lsls	r3, r3, #16
 8000ef6:	493f      	ldr	r1, [pc, #252]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000efc:	4b3d      	ldr	r3, [pc, #244]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a3c      	ldr	r2, [pc, #240]	; (8000ff4 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f06:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000f16:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6819      	ldr	r1, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f26:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000f2c:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	430a      	orrs	r2, r1
 8000f34:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	681b      	ldr	r3, [r3, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	f022 020f 	bic.w	r2, r2, #15
 8000f44:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	6819      	ldr	r1, [r3, #0]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000f54:	431a      	orrs	r2, r3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	689a      	ldr	r2, [r3, #8]
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8000f6c:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	6899      	ldr	r1, [r3, #8]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f7c:	3b01      	subs	r3, #1
 8000f7e:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8000f80:	431a      	orrs	r2, r3
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	430a      	orrs	r2, r1
 8000f88:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	685a      	ldr	r2, [r3, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f002 0207 	and.w	r2, r2, #7
 8000f98:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	6859      	ldr	r1, [r3, #4]
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa4:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8000fac:	431a      	orrs	r2, r3
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	430a      	orrs	r2, r1
 8000fb4:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681a      	ldr	r2, [r3, #0]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000fc4:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	2201      	movs	r2, #1
 8000fca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 fa14 	bl	8001400 <DFSDM_GetChannelFromInstance>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	4904      	ldr	r1, [pc, #16]	; (8000fec <HAL_DFSDM_ChannelInit+0x174>)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8000fe2:	2300      	movs	r3, #0
}
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	3708      	adds	r7, #8
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	20000064 	.word	0x20000064
 8000ff0:	20000060 	.word	0x20000060
 8000ff4:	40016000 	.word	0x40016000

08000ff8 <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b082      	sub	sp, #8
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d101      	bne.n	800100a <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e0ca      	b.n	80011a0 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4a66      	ldr	r2, [pc, #408]	; (80011a8 <HAL_DFSDM_FilterInit+0x1b0>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d109      	bne.n	8001028 <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 8001018:	2b01      	cmp	r3, #1
 800101a:	d003      	beq.n	8001024 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 8001020:	2b01      	cmp	r3, #1
 8001022:	d101      	bne.n	8001028 <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 8001024:	2301      	movs	r3, #1
 8001026:	e0bb      	b.n	80011a0 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2201      	movs	r2, #1
 8001032:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2201      	movs	r2, #1
 8001038:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2200      	movs	r2, #0
 800103e:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f006 ff13 	bl	8007e6c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	681a      	ldr	r2, [r3, #0]
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001054:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	7a1b      	ldrb	r3, [r3, #8]
 800105a:	2b01      	cmp	r3, #1
 800105c:	d108      	bne.n	8001070 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	e007      	b.n	8001080 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800107e:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	7a5b      	ldrb	r3, [r3, #9]
 8001084:	2b01      	cmp	r3, #1
 8001086:	d108      	bne.n	800109a <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681a      	ldr	r2, [r3, #0]
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	e007      	b.n	80010aa <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681a      	ldr	r2, [r3, #0]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 80010a8:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	6812      	ldr	r2, [r2, #0]
 80010b4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80010b8:	f023 0308 	bic.w	r3, r3, #8
 80010bc:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d108      	bne.n	80010d8 <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	6819      	ldr	r1, [r3, #0]
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	695a      	ldr	r2, [r3, #20]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	7c1b      	ldrb	r3, [r3, #16]
 80010dc:	2b01      	cmp	r3, #1
 80010de:	d108      	bne.n	80010f2 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f042 0210 	orr.w	r2, r2, #16
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	e007      	b.n	8001102 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	681a      	ldr	r2, [r3, #0]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 0210 	bic.w	r2, r2, #16
 8001100:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	7c5b      	ldrb	r3, [r3, #17]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d108      	bne.n	800111c <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f042 0220 	orr.w	r2, r2, #32
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e007      	b.n	800112c <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f022 0220 	bic.w	r2, r2, #32
 800112a:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	6812      	ldr	r2, [r2, #0]
 8001136:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 800113a:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 800113e:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	6959      	ldr	r1, [r3, #20]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	6a1b      	ldr	r3, [r3, #32]
 800114e:	3b01      	subs	r3, #1
 8001150:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001152:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800115a:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	430a      	orrs	r2, r1
 8001162:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685a      	ldr	r2, [r3, #4]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	68da      	ldr	r2, [r3, #12]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	699a      	ldr	r2, [r3, #24]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	7c1a      	ldrb	r2, [r3, #16]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f042 0201 	orr.w	r2, r2, #1
 8001194:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2201      	movs	r2, #1
 800119a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40016100 	.word	0x40016100

080011ac <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	60f8      	str	r0, [r7, #12]
 80011b4:	60b9      	str	r1, [r7, #8]
 80011b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d02e      	beq.n	8001224 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 80011cc:	2bff      	cmp	r3, #255	; 0xff
 80011ce:	d029      	beq.n	8001224 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	6812      	ldr	r2, [r2, #0]
 80011da:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80011de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011e2:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d10d      	bne.n	8001206 <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 80011ea:	68fb      	ldr	r3, [r7, #12]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80011f8:	431a      	orrs	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	e00a      	b.n	800121c <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	6819      	ldr	r1, [r3, #0]
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	021b      	lsls	r3, r3, #8
 8001210:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	687a      	ldr	r2, [r7, #4]
 8001220:	631a      	str	r2, [r3, #48]	; 0x30
 8001222:	e001      	b.n	8001228 <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 8001228:	7dfb      	ldrb	r3, [r7, #23]
}
 800122a:	4618      	mov	r0, r3
 800122c:	371c      	adds	r7, #28
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
	...

08001238 <HAL_DFSDM_FilterRegularStart_DMA>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStart_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   int32_t                    *pData,
                                                   uint32_t                    Length)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b086      	sub	sp, #24
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001244:	2300      	movs	r3, #0
 8001246:	75fb      	strb	r3, [r7, #23]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check destination address and length */
  if ((pData == NULL) || (Length == 0U))
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d002      	beq.n	8001254 <HAL_DFSDM_FilterRegularStart_DMA+0x1c>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d102      	bne.n	800125a <HAL_DFSDM_FilterRegularStart_DMA+0x22>
  {
    status = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	75fb      	strb	r3, [r7, #23]
 8001258:	e064      	b.n	8001324 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check that DMA is enabled for regular conversion */
  else if ((hdfsdm_filter->Instance->FLTCR1 & DFSDM_FLTCR1_RDMAEN) != DFSDM_FLTCR1_RDMAEN)
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001264:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001268:	d002      	beq.n	8001270 <HAL_DFSDM_FilterRegularStart_DMA+0x38>
  {
    status = HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	75fb      	strb	r3, [r7, #23]
 800126e:	e059      	b.n	8001324 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check parameters compatibility */
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001274:	2b00      	cmp	r3, #0
 8001276:	d10e      	bne.n	8001296 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001278:	68fb      	ldr	r3, [r7, #12]
 800127a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 800127c:	2b00      	cmp	r3, #0
 800127e:	d10a      	bne.n	8001296 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001284:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 8001286:	2b00      	cmp	r3, #0
 8001288:	d105      	bne.n	8001296 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_NORMAL) && \
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d002      	beq.n	8001296 <HAL_DFSDM_FilterRegularStart_DMA+0x5e>
           (Length != 1U))
  {
    status = HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	75fb      	strb	r3, [r7, #23]
 8001294:	e046      	b.n	8001324 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10b      	bne.n	80012b6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  else if ((hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER) && \
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d107      	bne.n	80012b6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
           (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR))
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012aa:	69db      	ldr	r3, [r3, #28]
           (hdfsdm_filter->RegularContMode == DFSDM_CONTINUOUS_CONV_OFF) && \
 80012ac:	2b20      	cmp	r3, #32
 80012ae:	d102      	bne.n	80012b6 <HAL_DFSDM_FilterRegularStart_DMA+0x7e>
  {
    status = HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	75fb      	strb	r3, [r7, #23]
 80012b4:	e036      	b.n	8001324 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
  }
  /* Check DFSDM filter state */
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d004      	beq.n	80012ca <HAL_DFSDM_FilterRegularStart_DMA+0x92>
           (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ))
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  else if ((hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) || \
 80012c6:	2b03      	cmp	r3, #3
 80012c8:	d12a      	bne.n	8001320 <HAL_DFSDM_FilterRegularStart_DMA+0xe8>
  {
    /* Set callbacks on DMA handler */
    hdfsdm_filter->hdmaReg->XferCpltCallback = DFSDM_DMARegularConvCplt;
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ce:	4a18      	ldr	r2, [pc, #96]	; (8001330 <HAL_DFSDM_FilterRegularStart_DMA+0xf8>)
 80012d0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdfsdm_filter->hdmaReg->XferErrorCallback = DFSDM_DMAError;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	4a17      	ldr	r2, [pc, #92]	; (8001334 <HAL_DFSDM_FilterRegularStart_DMA+0xfc>)
 80012d8:	635a      	str	r2, [r3, #52]	; 0x34
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012de:	69db      	ldr	r3, [r3, #28]
                                                   DFSDM_DMARegularHalfConvCplt : NULL;
 80012e0:	2b20      	cmp	r3, #32
 80012e2:	d101      	bne.n	80012e8 <HAL_DFSDM_FilterRegularStart_DMA+0xb0>
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <HAL_DFSDM_FilterRegularStart_DMA+0x100>)
 80012e6:	e000      	b.n	80012ea <HAL_DFSDM_FilterRegularStart_DMA+0xb2>
 80012e8:	2200      	movs	r2, #0
    hdfsdm_filter->hdmaReg->XferHalfCpltCallback = (hdfsdm_filter->hdmaReg->Init.Mode == DMA_CIRCULAR) ? \
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012ee:	631a      	str	r2, [r3, #48]	; 0x30

    /* Start DMA in interrupt mode */
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	331c      	adds	r3, #28
 80012fa:	4619      	mov	r1, r3
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	f000 fa16 	bl	8001730 <HAL_DMA_Start_IT>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d006      	beq.n	8001318 <HAL_DFSDM_FilterRegularStart_DMA+0xe0>
                         (uint32_t) pData, Length) != HAL_OK)
    {
      /* Set DFSDM filter in error state */
      hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_ERROR;
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	22ff      	movs	r2, #255	; 0xff
 800130e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      status = HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	75fb      	strb	r3, [r7, #23]
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 8001316:	e005      	b.n	8001324 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
    else
    {
      /* Start regular conversion */
      DFSDM_RegConvStart(hdfsdm_filter);
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	f000 f8bd 	bl	8001498 <DFSDM_RegConvStart>
    if (HAL_DMA_Start_IT(hdfsdm_filter->hdmaReg, (uint32_t)&hdfsdm_filter->Instance->FLTRDATAR, \
 800131e:	e001      	b.n	8001324 <HAL_DFSDM_FilterRegularStart_DMA+0xec>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001320:	2301      	movs	r3, #1
 8001322:	75fb      	strb	r3, [r7, #23]
  }
  /* Return function status */
  return status;
 8001324:	7dfb      	ldrb	r3, [r7, #23]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	080013c1 	.word	0x080013c1
 8001334:	080013dd 	.word	0x080013dd
 8001338:	080013a5 	.word	0x080013a5

0800133c <HAL_DFSDM_FilterRegularStop_DMA>:
  * @note   This function should be called only if regular conversion is ongoing.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterRegularStop_DMA(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	73fb      	strb	r3, [r7, #15]

  /* Check parameters */
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800134e:	2b02      	cmp	r3, #2
 8001350:	d007      	beq.n	8001362 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG_INJ))
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_REG) && \
 8001358:	2b04      	cmp	r3, #4
 800135a:	d002      	beq.n	8001362 <HAL_DFSDM_FilterRegularStop_DMA+0x26>
  {
    /* Return error status */
    status = HAL_ERROR;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e007      	b.n	8001372 <HAL_DFSDM_FilterRegularStop_DMA+0x36>
  else
  {
    /* Stop current DMA transfer */
    /* No need to check the returned value of HAL_DMA_Abort. */
    /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for DFSDM. */
    (void) HAL_DMA_Abort(hdfsdm_filter->hdmaReg);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fa5d 	bl	8001826 <HAL_DMA_Abort>

    /* Stop regular conversion */
    DFSDM_RegConvStop(hdfsdm_filter);
 800136c:	6878      	ldr	r0, [r7, #4]
 800136e:	f000 f8e9 	bl	8001544 <DFSDM_RegConvStop>
  }
  /* Return function status */
  return status;
 8001372:	7bfb      	ldrb	r3, [r7, #15]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3710      	adds	r7, #16
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <HAL_DFSDM_FilterRegConvHalfCpltCallback>:
  * @brief  Half regular conversion complete callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterRegConvHalfCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterRegConvHalfCpltCallback could be implemented in the user file.
   */
}
 8001384:	bf00      	nop
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <HAL_DFSDM_FilterErrorCallback>:
  * @brief  Error callback.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
__weak void HAL_DFSDM_FilterErrorCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  UNUSED(hdfsdm_filter);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DFSDM_FilterErrorCallback could be implemented in the user file.
   */
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <DFSDM_DMARegularHalfConvCplt>:
  * @brief  DMA half transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b084      	sub	sp, #16
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013b0:	60fb      	str	r3, [r7, #12]

  /* Call regular half conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvHalfCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvHalfCpltCallback(hdfsdm_filter);
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f7ff ffe2 	bl	800137c <HAL_DFSDM_FilterRegConvHalfCpltCallback>
#endif
}
 80013b8:	bf00      	nop
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <DFSDM_DMARegularConvCplt>:
  * @brief  DMA transfer complete callback for regular conversion.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMARegularConvCplt(DMA_HandleTypeDef *hdma)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013cc:	60fb      	str	r3, [r7, #12]

  /* Call regular conversion complete callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->RegConvCpltCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterRegConvCpltCallback(hdfsdm_filter);
 80013ce:	68f8      	ldr	r0, [r7, #12]
 80013d0:	f005 ffe0 	bl	8007394 <HAL_DFSDM_FilterRegConvCpltCallback>
#endif
}
 80013d4:	bf00      	nop
 80013d6:	3710      	adds	r7, #16
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}

080013dc <DFSDM_DMAError>:
  * @brief  DMA error callback.
  * @param  hdma DMA handle.
  * @retval None
  */
static void DFSDM_DMAError(DMA_HandleTypeDef *hdma)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b084      	sub	sp, #16
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Get DFSDM filter handle */
  DFSDM_Filter_HandleTypeDef *hdfsdm_filter = (DFSDM_Filter_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013e8:	60fb      	str	r3, [r7, #12]

  /* Update error code */
  hdfsdm_filter->ErrorCode = DFSDM_FILTER_ERROR_DMA;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	2203      	movs	r2, #3
 80013ee:	651a      	str	r2, [r3, #80]	; 0x50

  /* Call error callback */
#if (USE_HAL_DFSDM_REGISTER_CALLBACKS == 1)
  hdfsdm_filter->ErrorCallback(hdfsdm_filter);
#else
  HAL_DFSDM_FilterErrorCallback(hdfsdm_filter);
 80013f0:	68f8      	ldr	r0, [r7, #12]
 80013f2:	f7ff ffcd 	bl	8001390 <HAL_DFSDM_FilterErrorCallback>
#endif
}
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
	...

08001400 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a1c      	ldr	r2, [pc, #112]	; (800147c <DFSDM_GetChannelFromInstance+0x7c>)
 800140c:	4293      	cmp	r3, r2
 800140e:	d102      	bne.n	8001416 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	60fb      	str	r3, [r7, #12]
 8001414:	e02b      	b.n	800146e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a19      	ldr	r2, [pc, #100]	; (8001480 <DFSDM_GetChannelFromInstance+0x80>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d102      	bne.n	8001424 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800141e:	2301      	movs	r3, #1
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	e024      	b.n	800146e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a17      	ldr	r2, [pc, #92]	; (8001484 <DFSDM_GetChannelFromInstance+0x84>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d102      	bne.n	8001432 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	60fb      	str	r3, [r7, #12]
 8001430:	e01d      	b.n	800146e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a14      	ldr	r2, [pc, #80]	; (8001488 <DFSDM_GetChannelFromInstance+0x88>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d102      	bne.n	8001440 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 800143a:	2304      	movs	r3, #4
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	e016      	b.n	800146e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <DFSDM_GetChannelFromInstance+0x8c>)
 8001444:	4293      	cmp	r3, r2
 8001446:	d102      	bne.n	800144e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001448:	2305      	movs	r3, #5
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e00f      	b.n	800146e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	4a0f      	ldr	r2, [pc, #60]	; (8001490 <DFSDM_GetChannelFromInstance+0x90>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d102      	bne.n	800145c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001456:	2306      	movs	r3, #6
 8001458:	60fb      	str	r3, [r7, #12]
 800145a:	e008      	b.n	800146e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	4a0d      	ldr	r2, [pc, #52]	; (8001494 <DFSDM_GetChannelFromInstance+0x94>)
 8001460:	4293      	cmp	r3, r2
 8001462:	d102      	bne.n	800146a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001464:	2307      	movs	r3, #7
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	e001      	b.n	800146e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 800146a:	2303      	movs	r3, #3
 800146c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3714      	adds	r7, #20
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40016000 	.word	0x40016000
 8001480:	40016020 	.word	0x40016020
 8001484:	40016040 	.word	0x40016040
 8001488:	40016080 	.word	0x40016080
 800148c:	400160a0 	.word	0x400160a0
 8001490:	400160c0 	.word	0x400160c0
 8001494:	400160e0 	.word	0x400160e0

08001498 <DFSDM_RegConvStart>:
  * @brief  This function allows to really start regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStart(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check regular trigger */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SW_TRIGGER)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d108      	bne.n	80014ba <DFSDM_RegConvStart+0x22>
  {
    /* Software start of regular conversion */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSWSTART;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	681a      	ldr	r2, [r3, #0]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	e033      	b.n	8001522 <DFSDM_RegConvStart+0x8a>
  }
  else /* synchronous trigger */
  {
    /* Disable DFSDM filter */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	681a      	ldr	r2, [r3, #0]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f022 0201 	bic.w	r2, r2, #1
 80014c8:	601a      	str	r2, [r3, #0]

    /* Set RSYNC bit in DFSDM_FLTCR1 register */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RSYNC;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 80014d8:	601a      	str	r2, [r3, #0]

    /* Enable DFSDM  filter */
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f042 0201 	orr.w	r2, r2, #1
 80014e8:	601a      	str	r2, [r3, #0]

    /* If injected conversion was in progress, restart it */
    if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_INJ)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d116      	bne.n	8001522 <DFSDM_RegConvStart+0x8a>
    {
      if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d107      	bne.n	800150c <DFSDM_RegConvStart+0x74>
      {
        hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	681a      	ldr	r2, [r3, #0]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f042 0202 	orr.w	r2, r2, #2
 800150a:	601a      	str	r2, [r3, #0]
      }
      /* Update remaining injected conversions */
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                        hdfsdm_filter->InjectedChannelsNbr : 1U;
 8001512:	2b01      	cmp	r3, #1
 8001514:	d102      	bne.n	800151c <DFSDM_RegConvStart+0x84>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	e000      	b.n	800151e <DFSDM_RegConvStart+0x86>
 800151c:	2301      	movs	r3, #1
      hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6493      	str	r3, [r2, #72]	; 0x48
    }
  }
  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_REG : HAL_DFSDM_FILTER_STATE_REG_INJ;
 8001528:	2b01      	cmp	r3, #1
 800152a:	d101      	bne.n	8001530 <DFSDM_RegConvStart+0x98>
 800152c:	2202      	movs	r2, #2
 800152e:	e000      	b.n	8001532 <DFSDM_RegConvStart+0x9a>
 8001530:	2204      	movs	r2, #4
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_READY) ? \
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <DFSDM_RegConvStop>:
  * @brief  This function allows to really stop regular conversion.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval None
  */
static void DFSDM_RegConvStop(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 8001544:	b480      	push	{r7}
 8001546:	b083      	sub	sp, #12
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  /* Disable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_DFEN);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0201 	bic.w	r2, r2, #1
 800155a:	601a      	str	r2, [r3, #0]

  /* If regular trigger was synchronous, reset RSYNC bit in DFSDM_FLTCR1 register */
  if (hdfsdm_filter->RegularTrigger == DFSDM_FILTER_SYNC_TRIGGER)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001560:	2b01      	cmp	r3, #1
 8001562:	d107      	bne.n	8001574 <DFSDM_RegConvStop+0x30>
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681a      	ldr	r2, [r3, #0]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001572:	601a      	str	r2, [r3, #0]
  }

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f042 0201 	orr.w	r2, r2, #1
 8001582:	601a      	str	r2, [r3, #0]

  /* If injected conversion was in progress, restart it */
  if (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG_INJ)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800158a:	2b04      	cmp	r3, #4
 800158c:	d116      	bne.n	80015bc <DFSDM_RegConvStop+0x78>
  {
    if (hdfsdm_filter->InjectedTrigger == DFSDM_FILTER_SW_TRIGGER)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001592:	2b00      	cmp	r3, #0
 8001594:	d107      	bne.n	80015a6 <DFSDM_RegConvStop+0x62>
    {
      hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSWSTART;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f042 0202 	orr.w	r2, r2, #2
 80015a4:	601a      	str	r2, [r3, #0]
    }
    /* Update remaining injected conversions */
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                                      hdfsdm_filter->InjectedChannelsNbr : 1U;
 80015ac:	2b01      	cmp	r3, #1
 80015ae:	d102      	bne.n	80015b6 <DFSDM_RegConvStop+0x72>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015b4:	e000      	b.n	80015b8 <DFSDM_RegConvStop+0x74>
 80015b6:	2301      	movs	r3, #1
    hdfsdm_filter->InjConvRemaining = (hdfsdm_filter->InjectedScanMode == ENABLE) ? \
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	6493      	str	r3, [r2, #72]	; 0x48
  }

  /* Update DFSDM filter state */
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
                         HAL_DFSDM_FILTER_STATE_READY : HAL_DFSDM_FILTER_STATE_INJ;
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d101      	bne.n	80015ca <DFSDM_RegConvStop+0x86>
 80015c6:	2201      	movs	r2, #1
 80015c8:	e000      	b.n	80015cc <DFSDM_RegConvStop+0x88>
 80015ca:	2203      	movs	r2, #3
  hdfsdm_filter->State = (hdfsdm_filter->State == HAL_DFSDM_FILTER_STATE_REG) ? \
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
}
 80015d2:	bf00      	nop
 80015d4:	370c      	adds	r7, #12
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr
	...

080015e0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d101      	bne.n	80015f2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015ee:	2301      	movs	r3, #1
 80015f0:	e08d      	b.n	800170e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	461a      	mov	r2, r3
 80015f8:	4b47      	ldr	r3, [pc, #284]	; (8001718 <HAL_DMA_Init+0x138>)
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d80f      	bhi.n	800161e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	461a      	mov	r2, r3
 8001604:	4b45      	ldr	r3, [pc, #276]	; (800171c <HAL_DMA_Init+0x13c>)
 8001606:	4413      	add	r3, r2
 8001608:	4a45      	ldr	r2, [pc, #276]	; (8001720 <HAL_DMA_Init+0x140>)
 800160a:	fba2 2303 	umull	r2, r3, r2, r3
 800160e:	091b      	lsrs	r3, r3, #4
 8001610:	009a      	lsls	r2, r3, #2
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a42      	ldr	r2, [pc, #264]	; (8001724 <HAL_DMA_Init+0x144>)
 800161a:	641a      	str	r2, [r3, #64]	; 0x40
 800161c:	e00e      	b.n	800163c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	461a      	mov	r2, r3
 8001624:	4b40      	ldr	r3, [pc, #256]	; (8001728 <HAL_DMA_Init+0x148>)
 8001626:	4413      	add	r3, r2
 8001628:	4a3d      	ldr	r2, [pc, #244]	; (8001720 <HAL_DMA_Init+0x140>)
 800162a:	fba2 2303 	umull	r2, r3, r2, r3
 800162e:	091b      	lsrs	r3, r3, #4
 8001630:	009a      	lsls	r2, r3, #2
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a3c      	ldr	r2, [pc, #240]	; (800172c <HAL_DMA_Init+0x14c>)
 800163a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001652:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001656:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001660:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	691b      	ldr	r3, [r3, #16]
 8001666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800166c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	699b      	ldr	r3, [r3, #24]
 8001672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001678:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	6a1b      	ldr	r3, [r3, #32]
 800167e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4313      	orrs	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 fa72 	bl	8001b78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	689b      	ldr	r3, [r3, #8]
 8001698:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800169c:	d102      	bne.n	80016a4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ac:	b2d2      	uxtb	r2, r2
 80016ae:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016b8:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d010      	beq.n	80016e4 <HAL_DMA_Init+0x104>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b04      	cmp	r3, #4
 80016c8:	d80c      	bhi.n	80016e4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80016ca:	6878      	ldr	r0, [r7, #4]
 80016cc:	f000 fa92 	bl	8001bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	e008      	b.n	80016f6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	2200      	movs	r2, #0
 80016ee:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2200      	movs	r2, #0
 80016f4:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2201      	movs	r2, #1
 8001700:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2200      	movs	r2, #0
 8001708:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40020407 	.word	0x40020407
 800171c:	bffdfff8 	.word	0xbffdfff8
 8001720:	cccccccd 	.word	0xcccccccd
 8001724:	40020000 	.word	0x40020000
 8001728:	bffdfbf8 	.word	0xbffdfbf8
 800172c:	40020400 	.word	0x40020400

08001730 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	60f8      	str	r0, [r7, #12]
 8001738:	60b9      	str	r1, [r7, #8]
 800173a:	607a      	str	r2, [r7, #4]
 800173c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800173e:	2300      	movs	r3, #0
 8001740:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_DMA_Start_IT+0x20>
 800174c:	2302      	movs	r3, #2
 800174e:	e066      	b.n	800181e <HAL_DMA_Start_IT+0xee>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b01      	cmp	r3, #1
 8001762:	d155      	bne.n	8001810 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2200      	movs	r2, #0
 8001770:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f022 0201 	bic.w	r2, r2, #1
 8001780:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	68b9      	ldr	r1, [r7, #8]
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 f9b6 	bl	8001afa <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	2b00      	cmp	r3, #0
 8001794:	d008      	beq.n	80017a8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f042 020e 	orr.w	r2, r2, #14
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	e00f      	b.n	80017c8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681a      	ldr	r2, [r3, #0]
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f022 0204 	bic.w	r2, r2, #4
 80017b6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f042 020a 	orr.w	r2, r2, #10
 80017c6:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d007      	beq.n	80017e6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	68fb      	ldr	r3, [r7, #12]
 80017de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017e4:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80017f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80017fc:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f042 0201 	orr.w	r2, r2, #1
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	e005      	b.n	800181c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2200      	movs	r2, #0
 8001814:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8001818:	2302      	movs	r3, #2
 800181a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800181c:	7dfb      	ldrb	r3, [r7, #23]
}
 800181e:	4618      	mov	r0, r3
 8001820:	3718      	adds	r7, #24
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001826:	b480      	push	{r7}
 8001828:	b085      	sub	sp, #20
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800182e:	2300      	movs	r3, #0
 8001830:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001838:	b2db      	uxtb	r3, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d008      	beq.n	8001850 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2204      	movs	r2, #4
 8001842:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	2200      	movs	r2, #0
 8001848:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e040      	b.n	80018d2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f022 020e 	bic.w	r2, r2, #14
 800185e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800186a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800186e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001884:	f003 021c 	and.w	r2, r3, #28
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	2101      	movs	r1, #1
 800188e:	fa01 f202 	lsl.w	r2, r1, r2
 8001892:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800189c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d00c      	beq.n	80018c0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018aa:	681a      	ldr	r2, [r3, #0]
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ba:	687a      	ldr	r2, [r7, #4]
 80018bc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018be:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2201      	movs	r2, #1
 80018c4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3714      	adds	r7, #20
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr

080018de <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b084      	sub	sp, #16
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80018e6:	2300      	movs	r3, #0
 80018e8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d005      	beq.n	8001902 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2204      	movs	r2, #4
 80018fa:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	73fb      	strb	r3, [r7, #15]
 8001900:	e047      	b.n	8001992 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 020e 	bic.w	r2, r2, #14
 8001910:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681a      	ldr	r2, [r3, #0]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f022 0201 	bic.w	r2, r2, #1
 8001920:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800192c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001930:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f003 021c 	and.w	r2, r3, #28
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193e:	2101      	movs	r1, #1
 8001940:	fa01 f202 	lsl.w	r2, r1, r2
 8001944:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800194e:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00c      	beq.n	8001972 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800195c:	681a      	ldr	r2, [r3, #0]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001962:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001966:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001970:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	2201      	movs	r2, #1
 8001976:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	4798      	blx	r3
    }
  }
  return status;
 8001992:	7bfb      	ldrb	r3, [r7, #15]
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b8:	f003 031c 	and.w	r3, r3, #28
 80019bc:	2204      	movs	r2, #4
 80019be:	409a      	lsls	r2, r3
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	4013      	ands	r3, r2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d026      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x7a>
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	f003 0304 	and.w	r3, r3, #4
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d021      	beq.n	8001a16 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0320 	and.w	r3, r3, #32
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d107      	bne.n	80019f0 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0204 	bic.w	r2, r2, #4
 80019ee:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	f003 021c 	and.w	r2, r3, #28
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	2104      	movs	r1, #4
 80019fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001a02:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d071      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	6878      	ldr	r0, [r7, #4]
 8001a12:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8001a14:	e06c      	b.n	8001af0 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f003 031c 	and.w	r3, r3, #28
 8001a1e:	2202      	movs	r2, #2
 8001a20:	409a      	lsls	r2, r3
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d02e      	beq.n	8001a88 <HAL_DMA_IRQHandler+0xec>
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d029      	beq.n	8001a88 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0320 	and.w	r3, r3, #32
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d10b      	bne.n	8001a5a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681a      	ldr	r2, [r3, #0]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f022 020a 	bic.w	r2, r2, #10
 8001a50:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2201      	movs	r2, #1
 8001a56:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f003 021c 	and.w	r2, r3, #28
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	2102      	movs	r1, #2
 8001a68:	fa01 f202 	lsl.w	r2, r1, r2
 8001a6c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d038      	beq.n	8001af0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001a86:	e033      	b.n	8001af0 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8c:	f003 031c 	and.w	r3, r3, #28
 8001a90:	2208      	movs	r2, #8
 8001a92:	409a      	lsls	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4013      	ands	r3, r2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d02a      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x156>
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d025      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681a      	ldr	r2, [r3, #0]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f022 020e 	bic.w	r2, r2, #14
 8001ab4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f003 021c 	and.w	r2, r3, #28
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d004      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001af0:	bf00      	nop
 8001af2:	bf00      	nop
}
 8001af4:	3710      	adds	r7, #16
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}

08001afa <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b085      	sub	sp, #20
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	60f8      	str	r0, [r7, #12]
 8001b02:	60b9      	str	r1, [r7, #8]
 8001b04:	607a      	str	r2, [r7, #4]
 8001b06:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001b10:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d004      	beq.n	8001b24 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b1e:	68fa      	ldr	r2, [r7, #12]
 8001b20:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b22:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	f003 021c 	and.w	r2, r3, #28
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	2101      	movs	r1, #1
 8001b32:	fa01 f202 	lsl.w	r2, r1, r2
 8001b36:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	683a      	ldr	r2, [r7, #0]
 8001b3e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b10      	cmp	r3, #16
 8001b46:	d108      	bne.n	8001b5a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	687a      	ldr	r2, [r7, #4]
 8001b4e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	68ba      	ldr	r2, [r7, #8]
 8001b56:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b58:	e007      	b.n	8001b6a <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	68ba      	ldr	r2, [r7, #8]
 8001b60:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	687a      	ldr	r2, [r7, #4]
 8001b68:	60da      	str	r2, [r3, #12]
}
 8001b6a:	bf00      	nop
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
	...

08001b78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b085      	sub	sp, #20
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b17      	ldr	r3, [pc, #92]	; (8001be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d80a      	bhi.n	8001ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b90:	089b      	lsrs	r3, r3, #2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001b98:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	6493      	str	r3, [r2, #72]	; 0x48
 8001ba0:	e007      	b.n	8001bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	089b      	lsrs	r3, r3, #2
 8001ba8:	009a      	lsls	r2, r3, #2
 8001baa:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001bac:	4413      	add	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	3b08      	subs	r3, #8
 8001bba:	4a0c      	ldr	r2, [pc, #48]	; (8001bec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc0:	091b      	lsrs	r3, r3, #4
 8001bc2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001bc8:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	2201      	movs	r2, #1
 8001bd2:	409a      	lsls	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001bd8:	bf00      	nop
 8001bda:	3714      	adds	r7, #20
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be2:	4770      	bx	lr
 8001be4:	40020407 	.word	0x40020407
 8001be8:	4002081c 	.word	0x4002081c
 8001bec:	cccccccd 	.word	0xcccccccd
 8001bf0:	40020880 	.word	0x40020880

08001bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b085      	sub	sp, #20
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a08      	ldr	r2, [pc, #32]	; (8001c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001c16:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	3b01      	subs	r3, #1
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2201      	movs	r2, #1
 8001c22:	409a      	lsls	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c28:	bf00      	nop
 8001c2a:	3714      	adds	r7, #20
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr
 8001c34:	1000823f 	.word	0x1000823f
 8001c38:	40020940 	.word	0x40020940

08001c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b087      	sub	sp, #28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c4a:	e166      	b.n	8001f1a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	2101      	movs	r1, #1
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	4013      	ands	r3, r2
 8001c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 8158 	beq.w	8001f14 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b01      	cmp	r3, #1
 8001c6e:	d005      	beq.n	8001c7c <HAL_GPIO_Init+0x40>
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 0303 	and.w	r3, r3, #3
 8001c78:	2b02      	cmp	r3, #2
 8001c7a:	d130      	bne.n	8001cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	2203      	movs	r2, #3
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4013      	ands	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	68da      	ldr	r2, [r3, #12]
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	005b      	lsls	r3, r3, #1
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	693a      	ldr	r2, [r7, #16]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	693a      	ldr	r2, [r7, #16]
 8001caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cba:	43db      	mvns	r3, r3
 8001cbc:	693a      	ldr	r2, [r7, #16]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	091b      	lsrs	r3, r3, #4
 8001cc8:	f003 0201 	and.w	r2, r3, #1
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	693a      	ldr	r2, [r7, #16]
 8001cdc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	f003 0303 	and.w	r3, r3, #3
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d017      	beq.n	8001d1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	2203      	movs	r2, #3
 8001cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfa:	43db      	mvns	r3, r3
 8001cfc:	693a      	ldr	r2, [r7, #16]
 8001cfe:	4013      	ands	r3, r2
 8001d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0e:	693a      	ldr	r2, [r7, #16]
 8001d10:	4313      	orrs	r3, r2
 8001d12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	693a      	ldr	r2, [r7, #16]
 8001d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1a:	683b      	ldr	r3, [r7, #0]
 8001d1c:	685b      	ldr	r3, [r3, #4]
 8001d1e:	f003 0303 	and.w	r3, r3, #3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d123      	bne.n	8001d6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	08da      	lsrs	r2, r3, #3
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	3208      	adds	r2, #8
 8001d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f003 0307 	and.w	r3, r3, #7
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	220f      	movs	r2, #15
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43db      	mvns	r3, r3
 8001d44:	693a      	ldr	r2, [r7, #16]
 8001d46:	4013      	ands	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d4a:	683b      	ldr	r3, [r7, #0]
 8001d4c:	691a      	ldr	r2, [r3, #16]
 8001d4e:	697b      	ldr	r3, [r7, #20]
 8001d50:	f003 0307 	and.w	r3, r3, #7
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5a:	693a      	ldr	r2, [r7, #16]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	08da      	lsrs	r2, r3, #3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	3208      	adds	r2, #8
 8001d68:	6939      	ldr	r1, [r7, #16]
 8001d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	2203      	movs	r2, #3
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	693a      	ldr	r2, [r7, #16]
 8001d82:	4013      	ands	r3, r2
 8001d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f003 0203 	and.w	r2, r3, #3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	693a      	ldr	r2, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	693a      	ldr	r2, [r7, #16]
 8001da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001da2:	683b      	ldr	r3, [r7, #0]
 8001da4:	685b      	ldr	r3, [r3, #4]
 8001da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 80b2 	beq.w	8001f14 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db0:	4b61      	ldr	r3, [pc, #388]	; (8001f38 <HAL_GPIO_Init+0x2fc>)
 8001db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db4:	4a60      	ldr	r2, [pc, #384]	; (8001f38 <HAL_GPIO_Init+0x2fc>)
 8001db6:	f043 0301 	orr.w	r3, r3, #1
 8001dba:	6613      	str	r3, [r2, #96]	; 0x60
 8001dbc:	4b5e      	ldr	r3, [pc, #376]	; (8001f38 <HAL_GPIO_Init+0x2fc>)
 8001dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dc0:	f003 0301 	and.w	r3, r3, #1
 8001dc4:	60bb      	str	r3, [r7, #8]
 8001dc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dc8:	4a5c      	ldr	r2, [pc, #368]	; (8001f3c <HAL_GPIO_Init+0x300>)
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	089b      	lsrs	r3, r3, #2
 8001dce:	3302      	adds	r3, #2
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	f003 0303 	and.w	r3, r3, #3
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	220f      	movs	r2, #15
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	43db      	mvns	r3, r3
 8001de6:	693a      	ldr	r2, [r7, #16]
 8001de8:	4013      	ands	r3, r2
 8001dea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001df2:	d02b      	beq.n	8001e4c <HAL_GPIO_Init+0x210>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a52      	ldr	r2, [pc, #328]	; (8001f40 <HAL_GPIO_Init+0x304>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d025      	beq.n	8001e48 <HAL_GPIO_Init+0x20c>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a51      	ldr	r2, [pc, #324]	; (8001f44 <HAL_GPIO_Init+0x308>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d01f      	beq.n	8001e44 <HAL_GPIO_Init+0x208>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a50      	ldr	r2, [pc, #320]	; (8001f48 <HAL_GPIO_Init+0x30c>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d019      	beq.n	8001e40 <HAL_GPIO_Init+0x204>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a4f      	ldr	r2, [pc, #316]	; (8001f4c <HAL_GPIO_Init+0x310>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d013      	beq.n	8001e3c <HAL_GPIO_Init+0x200>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	4a4e      	ldr	r2, [pc, #312]	; (8001f50 <HAL_GPIO_Init+0x314>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d00d      	beq.n	8001e38 <HAL_GPIO_Init+0x1fc>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	4a4d      	ldr	r2, [pc, #308]	; (8001f54 <HAL_GPIO_Init+0x318>)
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d007      	beq.n	8001e34 <HAL_GPIO_Init+0x1f8>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	4a4c      	ldr	r2, [pc, #304]	; (8001f58 <HAL_GPIO_Init+0x31c>)
 8001e28:	4293      	cmp	r3, r2
 8001e2a:	d101      	bne.n	8001e30 <HAL_GPIO_Init+0x1f4>
 8001e2c:	2307      	movs	r3, #7
 8001e2e:	e00e      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e30:	2308      	movs	r3, #8
 8001e32:	e00c      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e34:	2306      	movs	r3, #6
 8001e36:	e00a      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e38:	2305      	movs	r3, #5
 8001e3a:	e008      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e3c:	2304      	movs	r3, #4
 8001e3e:	e006      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e40:	2303      	movs	r3, #3
 8001e42:	e004      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e44:	2302      	movs	r3, #2
 8001e46:	e002      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e000      	b.n	8001e4e <HAL_GPIO_Init+0x212>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	f002 0203 	and.w	r2, r2, #3
 8001e54:	0092      	lsls	r2, r2, #2
 8001e56:	4093      	lsls	r3, r2
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e5e:	4937      	ldr	r1, [pc, #220]	; (8001f3c <HAL_GPIO_Init+0x300>)
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	089b      	lsrs	r3, r3, #2
 8001e64:	3302      	adds	r3, #2
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e6c:	4b3b      	ldr	r3, [pc, #236]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	43db      	mvns	r3, r3
 8001e76:	693a      	ldr	r2, [r7, #16]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	685b      	ldr	r3, [r3, #4]
 8001e80:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d003      	beq.n	8001e90 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001e88:	693a      	ldr	r2, [r7, #16]
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e90:	4a32      	ldr	r2, [pc, #200]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e96:	4b31      	ldr	r3, [pc, #196]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	43db      	mvns	r3, r3
 8001ea0:	693a      	ldr	r2, [r7, #16]
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d003      	beq.n	8001eba <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001eba:	4a28      	ldr	r2, [pc, #160]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001ec0:	4b26      	ldr	r3, [pc, #152]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	693a      	ldr	r2, [r7, #16]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d003      	beq.n	8001ee4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ee4:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001eea:	4b1c      	ldr	r3, [pc, #112]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	43db      	mvns	r3, r3
 8001ef4:	693a      	ldr	r2, [r7, #16]
 8001ef6:	4013      	ands	r3, r2
 8001ef8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001f06:	693a      	ldr	r2, [r7, #16]
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f0e:	4a13      	ldr	r2, [pc, #76]	; (8001f5c <HAL_GPIO_Init+0x320>)
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	3301      	adds	r3, #1
 8001f18:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	fa22 f303 	lsr.w	r3, r2, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f47f ae91 	bne.w	8001c4c <HAL_GPIO_Init+0x10>
  }
}
 8001f2a:	bf00      	nop
 8001f2c:	bf00      	nop
 8001f2e:	371c      	adds	r7, #28
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	40010000 	.word	0x40010000
 8001f40:	48000400 	.word	0x48000400
 8001f44:	48000800 	.word	0x48000800
 8001f48:	48000c00 	.word	0x48000c00
 8001f4c:	48001000 	.word	0x48001000
 8001f50:	48001400 	.word	0x48001400
 8001f54:	48001800 	.word	0x48001800
 8001f58:	48001c00 	.word	0x48001c00
 8001f5c:	40010400 	.word	0x40010400

08001f60 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b087      	sub	sp, #28
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
 8001f68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001f6e:	e0c9      	b.n	8002104 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001f70:	2201      	movs	r2, #1
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 80bc 	beq.w	80020fe <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001f86:	4a66      	ldr	r2, [pc, #408]	; (8002120 <HAL_GPIO_DeInit+0x1c0>)
 8001f88:	697b      	ldr	r3, [r7, #20]
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f92:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001f94:	697b      	ldr	r3, [r7, #20]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	68fa      	ldr	r2, [r7, #12]
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fae:	d02b      	beq.n	8002008 <HAL_GPIO_DeInit+0xa8>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a5c      	ldr	r2, [pc, #368]	; (8002124 <HAL_GPIO_DeInit+0x1c4>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d025      	beq.n	8002004 <HAL_GPIO_DeInit+0xa4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a5b      	ldr	r2, [pc, #364]	; (8002128 <HAL_GPIO_DeInit+0x1c8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d01f      	beq.n	8002000 <HAL_GPIO_DeInit+0xa0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a5a      	ldr	r2, [pc, #360]	; (800212c <HAL_GPIO_DeInit+0x1cc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d019      	beq.n	8001ffc <HAL_GPIO_DeInit+0x9c>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a59      	ldr	r2, [pc, #356]	; (8002130 <HAL_GPIO_DeInit+0x1d0>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d013      	beq.n	8001ff8 <HAL_GPIO_DeInit+0x98>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	4a58      	ldr	r2, [pc, #352]	; (8002134 <HAL_GPIO_DeInit+0x1d4>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_GPIO_DeInit+0x94>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	4a57      	ldr	r2, [pc, #348]	; (8002138 <HAL_GPIO_DeInit+0x1d8>)
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d007      	beq.n	8001ff0 <HAL_GPIO_DeInit+0x90>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a56      	ldr	r2, [pc, #344]	; (800213c <HAL_GPIO_DeInit+0x1dc>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d101      	bne.n	8001fec <HAL_GPIO_DeInit+0x8c>
 8001fe8:	2307      	movs	r3, #7
 8001fea:	e00e      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8001fec:	2308      	movs	r3, #8
 8001fee:	e00c      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8001ff0:	2306      	movs	r3, #6
 8001ff2:	e00a      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8001ff4:	2305      	movs	r3, #5
 8001ff6:	e008      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8001ff8:	2304      	movs	r3, #4
 8001ffa:	e006      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e004      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8002000:	2302      	movs	r3, #2
 8002002:	e002      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8002004:	2301      	movs	r3, #1
 8002006:	e000      	b.n	800200a <HAL_GPIO_DeInit+0xaa>
 8002008:	2300      	movs	r3, #0
 800200a:	697a      	ldr	r2, [r7, #20]
 800200c:	f002 0203 	and.w	r2, r2, #3
 8002010:	0092      	lsls	r2, r2, #2
 8002012:	4093      	lsls	r3, r2
 8002014:	68fa      	ldr	r2, [r7, #12]
 8002016:	429a      	cmp	r2, r3
 8002018:	d132      	bne.n	8002080 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800201a:	4b49      	ldr	r3, [pc, #292]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 800201c:	681a      	ldr	r2, [r3, #0]
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	43db      	mvns	r3, r3
 8002022:	4947      	ldr	r1, [pc, #284]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 8002024:	4013      	ands	r3, r2
 8002026:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002028:	4b45      	ldr	r3, [pc, #276]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 800202a:	685a      	ldr	r2, [r3, #4]
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	43db      	mvns	r3, r3
 8002030:	4943      	ldr	r1, [pc, #268]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 8002032:	4013      	ands	r3, r2
 8002034:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8002036:	4b42      	ldr	r3, [pc, #264]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 8002038:	68da      	ldr	r2, [r3, #12]
 800203a:	693b      	ldr	r3, [r7, #16]
 800203c:	43db      	mvns	r3, r3
 800203e:	4940      	ldr	r1, [pc, #256]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 8002040:	4013      	ands	r3, r2
 8002042:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8002044:	4b3e      	ldr	r3, [pc, #248]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 8002046:	689a      	ldr	r2, [r3, #8]
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	43db      	mvns	r3, r3
 800204c:	493c      	ldr	r1, [pc, #240]	; (8002140 <HAL_GPIO_DeInit+0x1e0>)
 800204e:	4013      	ands	r3, r2
 8002050:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	f003 0303 	and.w	r3, r3, #3
 8002058:	009b      	lsls	r3, r3, #2
 800205a:	220f      	movs	r2, #15
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002062:	4a2f      	ldr	r2, [pc, #188]	; (8002120 <HAL_GPIO_DeInit+0x1c0>)
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	3302      	adds	r3, #2
 800206a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	43da      	mvns	r2, r3
 8002072:	482b      	ldr	r0, [pc, #172]	; (8002120 <HAL_GPIO_DeInit+0x1c0>)
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	400a      	ands	r2, r1
 800207a:	3302      	adds	r3, #2
 800207c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	005b      	lsls	r3, r3, #1
 8002088:	2103      	movs	r1, #3
 800208a:	fa01 f303 	lsl.w	r3, r1, r3
 800208e:	431a      	orrs	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	08da      	lsrs	r2, r3, #3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	3208      	adds	r2, #8
 800209c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	f003 0307 	and.w	r3, r3, #7
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	220f      	movs	r2, #15
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	43db      	mvns	r3, r3
 80020b0:	697a      	ldr	r2, [r7, #20]
 80020b2:	08d2      	lsrs	r2, r2, #3
 80020b4:	4019      	ands	r1, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	3208      	adds	r2, #8
 80020ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	689a      	ldr	r2, [r3, #8]
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	2103      	movs	r1, #3
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	2101      	movs	r1, #1
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	fa01 f303 	lsl.w	r3, r1, r3
 80020e0:	43db      	mvns	r3, r3
 80020e2:	401a      	ands	r2, r3
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	68da      	ldr	r2, [r3, #12]
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	005b      	lsls	r3, r3, #1
 80020f0:	2103      	movs	r1, #3
 80020f2:	fa01 f303 	lsl.w	r3, r1, r3
 80020f6:	43db      	mvns	r3, r3
 80020f8:	401a      	ands	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	3301      	adds	r3, #1
 8002102:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8002104:	683a      	ldr	r2, [r7, #0]
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	fa22 f303 	lsr.w	r3, r2, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	f47f af2f 	bne.w	8001f70 <HAL_GPIO_DeInit+0x10>
  }
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	371c      	adds	r7, #28
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40010000 	.word	0x40010000
 8002124:	48000400 	.word	0x48000400
 8002128:	48000800 	.word	0x48000800
 800212c:	48000c00 	.word	0x48000c00
 8002130:	48001000 	.word	0x48001000
 8002134:	48001400 	.word	0x48001400
 8002138:	48001800 	.word	0x48001800
 800213c:	48001c00 	.word	0x48001c00
 8002140:	40010400 	.word	0x40010400

08002144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
 800214c:	460b      	mov	r3, r1
 800214e:	807b      	strh	r3, [r7, #2]
 8002150:	4613      	mov	r3, r2
 8002152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002154:	787b      	ldrb	r3, [r7, #1]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d003      	beq.n	8002162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800215a:	887a      	ldrh	r2, [r7, #2]
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002160:	e002      	b.n	8002168 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002162:	887a      	ldrh	r2, [r7, #2]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
 800217c:	460b      	mov	r3, r1
 800217e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002186:	887a      	ldrh	r2, [r7, #2]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	4013      	ands	r3, r2
 800218c:	041a      	lsls	r2, r3, #16
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	43d9      	mvns	r1, r3
 8002192:	887b      	ldrh	r3, [r7, #2]
 8002194:	400b      	ands	r3, r1
 8002196:	431a      	orrs	r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	619a      	str	r2, [r3, #24]
}
 800219c:	bf00      	nop
 800219e:	3714      	adds	r7, #20
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	4603      	mov	r3, r0
 80021b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80021b2:	4b08      	ldr	r3, [pc, #32]	; (80021d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021b4:	695a      	ldr	r2, [r3, #20]
 80021b6:	88fb      	ldrh	r3, [r7, #6]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d006      	beq.n	80021cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80021c0:	88fb      	ldrh	r3, [r7, #6]
 80021c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80021c4:	88fb      	ldrh	r3, [r7, #6]
 80021c6:	4618      	mov	r0, r3
 80021c8:	f005 f82e 	bl	8007228 <HAL_GPIO_EXTI_Callback>
  }
}
 80021cc:	bf00      	nop
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40010400 	.word	0x40010400

080021d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d101      	bne.n	80021ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e081      	b.n	80022ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d106      	bne.n	8002204 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	2200      	movs	r2, #0
 80021fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f005 ff50 	bl	80080a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2224      	movs	r2, #36	; 0x24
 8002208:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f022 0201 	bic.w	r2, r2, #1
 800221a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	685a      	ldr	r2, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002228:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002238:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d107      	bne.n	8002252 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	689a      	ldr	r2, [r3, #8]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800224e:	609a      	str	r2, [r3, #8]
 8002250:	e006      	b.n	8002260 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800225e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b02      	cmp	r3, #2
 8002266:	d104      	bne.n	8002272 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002270:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	6812      	ldr	r2, [r2, #0]
 800227c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002280:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002284:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002294:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691a      	ldr	r2, [r3, #16]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	699b      	ldr	r3, [r3, #24]
 80022a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	430a      	orrs	r2, r1
 80022ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	69d9      	ldr	r1, [r3, #28]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1a      	ldr	r2, [r3, #32]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681a      	ldr	r2, [r3, #0]
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f042 0201 	orr.w	r2, r2, #1
 80022ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2200      	movs	r2, #0
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2220      	movs	r2, #32
 80022da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2200      	movs	r2, #0
 80022e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b20      	cmp	r3, #32
 800230a:	d138      	bne.n	800237e <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002312:	2b01      	cmp	r3, #1
 8002314:	d101      	bne.n	800231a <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002316:	2302      	movs	r3, #2
 8002318:	e032      	b.n	8002380 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2201      	movs	r2, #1
 800231e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2224      	movs	r2, #36	; 0x24
 8002326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f022 0201 	bic.w	r2, r2, #1
 8002338:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002348:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	6819      	ldr	r1, [r3, #0]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	430a      	orrs	r2, r1
 8002358:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 0201 	orr.w	r2, r2, #1
 8002368:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2220      	movs	r2, #32
 800236e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800237a:	2300      	movs	r3, #0
 800237c:	e000      	b.n	8002380 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800237e:	2302      	movs	r3, #2
  }
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b20      	cmp	r3, #32
 80023a0:	d139      	bne.n	8002416 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d101      	bne.n	80023b0 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80023ac:	2302      	movs	r3, #2
 80023ae:	e033      	b.n	8002418 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2201      	movs	r2, #1
 80023b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2224      	movs	r2, #36	; 0x24
 80023bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f022 0201 	bic.w	r2, r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80023de:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	021b      	lsls	r3, r3, #8
 80023e4:	68fa      	ldr	r2, [r7, #12]
 80023e6:	4313      	orrs	r3, r2
 80023e8:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68fa      	ldr	r2, [r7, #12]
 80023f0:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f042 0201 	orr.w	r2, r2, #1
 8002400:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2220      	movs	r2, #32
 8002406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002412:	2300      	movs	r3, #0
 8002414:	e000      	b.n	8002418 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002416:	2302      	movs	r3, #2
  }
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af02      	add	r7, sp, #8
 800242a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800242c:	2300      	movs	r3, #0
 800242e:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8002430:	f7fe f8ce 	bl	80005d0 <HAL_GetTick>
 8002434:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	73fb      	strb	r3, [r7, #15]
 8002440:	e092      	b.n	8002568 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	2200      	movs	r2, #0
 8002446:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	2b00      	cmp	r3, #0
 800244e:	f040 808b 	bne.w	8002568 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f005 fe84 	bl	8008160 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8002458:	f241 3188 	movw	r1, #5000	; 0x1388
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fad0 	bl	8002a02 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	689a      	ldr	r2, [r3, #8]
 8002468:	4b42      	ldr	r3, [pc, #264]	; (8002574 <HAL_OSPI_Init+0x150>)
 800246a:	4013      	ands	r3, r2
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68d1      	ldr	r1, [r2, #12]
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	6912      	ldr	r2, [r2, #16]
 8002474:	3a01      	subs	r2, #1
 8002476:	0412      	lsls	r2, r2, #16
 8002478:	4311      	orrs	r1, r2
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6952      	ldr	r2, [r2, #20]
 800247e:	3a01      	subs	r2, #1
 8002480:	0212      	lsls	r2, r2, #8
 8002482:	4311      	orrs	r1, r2
 8002484:	687a      	ldr	r2, [r7, #4]
 8002486:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002488:	4311      	orrs	r1, r2
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	69d2      	ldr	r2, [r2, #28]
 800248e:	4311      	orrs	r1, r2
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6812      	ldr	r2, [r2, #0]
 8002494:	430b      	orrs	r3, r1
 8002496:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	0412      	lsls	r2, r2, #16
 80024a2:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	3b01      	subs	r3, #1
 80024b4:	021a      	lsls	r2, r3, #8
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	430a      	orrs	r2, r1
 80024bc:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c2:	9300      	str	r3, [sp, #0]
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	2200      	movs	r2, #0
 80024c8:	2120      	movs	r1, #32
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fddc 	bl	8003088 <OSPI_WaitFlagStateUntilTimeout>
 80024d0:	4603      	mov	r3, r0
 80024d2:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 80024d4:	7bfb      	ldrb	r3, [r7, #15]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d146      	bne.n	8002568 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a1b      	ldr	r3, [r3, #32]
 80024e8:	1e5a      	subs	r2, r3, #1
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	430a      	orrs	r2, r1
 80024f0:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689a      	ldr	r2, [r3, #8]
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002510:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800251c:	431a      	orrs	r2, r3
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	430a      	orrs	r2, r1
 8002524:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f042 0201 	orr.w	r2, r2, #1
 8002536:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	2b02      	cmp	r3, #2
 800253e:	d107      	bne.n	8002550 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	689a      	ldr	r2, [r3, #8]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0202 	orr.w	r2, r2, #2
 800254e:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002558:	d103      	bne.n	8002562 <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	645a      	str	r2, [r3, #68]	; 0x44
 8002560:	e002      	b.n	8002568 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2202      	movs	r2, #2
 8002566:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	f8e0f8f4 	.word	0xf8e0f8f4

08002578 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002580:	2300      	movs	r3, #0
 8002582:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d102      	bne.n	8002590 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	73fb      	strb	r3, [r7, #15]
 800258e:	e015      	b.n	80025bc <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0201 	bic.w	r2, r2, #1
 800259e:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	689a      	ldr	r2, [r3, #8]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f022 0202 	bic.w	r2, r2, #2
 80025ae:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f005 fe41 	bl	8008238 <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80025be:	4618      	mov	r0, r3
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}

080025c6 <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 80025c6:	b580      	push	{r7, lr}
 80025c8:	b08a      	sub	sp, #40	; 0x28
 80025ca:	af02      	add	r7, sp, #8
 80025cc:	60f8      	str	r0, [r7, #12]
 80025ce:	60b9      	str	r1, [r7, #8]
 80025d0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 80025d2:	f7fd fffd 	bl	80005d0 <HAL_GetTick>
 80025d6:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025dc:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	2b02      	cmp	r3, #2
 80025e8:	d104      	bne.n	80025f4 <HAL_OSPI_Command+0x2e>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025f2:	d10d      	bne.n	8002610 <HAL_OSPI_Command+0x4a>
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	2b14      	cmp	r3, #20
 80025f8:	d103      	bne.n	8002602 <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d006      	beq.n	8002610 <HAL_OSPI_Command+0x4a>
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	2b24      	cmp	r3, #36	; 0x24
 8002606:	d153      	bne.n	80026b0 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2b01      	cmp	r3, #1
 800260e:	d14f      	bne.n	80026b0 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	9300      	str	r3, [sp, #0]
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	2200      	movs	r2, #0
 8002618:	2120      	movs	r1, #32
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 fd34 	bl	8003088 <OSPI_WaitFlagStateUntilTimeout>
 8002620:	4603      	mov	r3, r0
 8002622:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8002624:	7ffb      	ldrb	r3, [r7, #31]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d148      	bne.n	80026bc <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8002630:	68b9      	ldr	r1, [r7, #8]
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 fd60 	bl	80030f8 <OSPI_ConfigCmd>
 8002638:	4603      	mov	r3, r0
 800263a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800263c:	7ffb      	ldrb	r3, [r7, #31]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d13c      	bne.n	80026bc <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 8002642:	68bb      	ldr	r3, [r7, #8]
 8002644:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002646:	2b00      	cmp	r3, #0
 8002648:	d10e      	bne.n	8002668 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	9300      	str	r3, [sp, #0]
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2201      	movs	r2, #1
 8002652:	2102      	movs	r1, #2
 8002654:	68f8      	ldr	r0, [r7, #12]
 8002656:	f000 fd17 	bl	8003088 <OSPI_WaitFlagStateUntilTimeout>
 800265a:	4603      	mov	r3, r0
 800265c:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2202      	movs	r2, #2
 8002664:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 8002666:	e029      	b.n	80026bc <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d103      	bne.n	8002678 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	2204      	movs	r2, #4
 8002674:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002676:	e021      	b.n	80026bc <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d10b      	bne.n	8002698 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002684:	2b24      	cmp	r3, #36	; 0x24
 8002686:	d103      	bne.n	8002690 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	2204      	movs	r2, #4
 800268c:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 800268e:	e015      	b.n	80026bc <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	2214      	movs	r2, #20
 8002694:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002696:	e011      	b.n	80026bc <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800269c:	2b14      	cmp	r3, #20
 800269e:	d103      	bne.n	80026a8 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2204      	movs	r2, #4
 80026a4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80026a6:	e009      	b.n	80026bc <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	2224      	movs	r2, #36	; 0x24
 80026ac:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80026ae:	e005      	b.n	80026bc <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80026b0:	2301      	movs	r3, #1
 80026b2:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	2210      	movs	r2, #16
 80026b8:	649a      	str	r2, [r3, #72]	; 0x48
 80026ba:	e000      	b.n	80026be <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 80026bc:	bf00      	nop
  }

  /* Return function status */
  return status;
 80026be:	7ffb      	ldrb	r3, [r7, #31]
}
 80026c0:	4618      	mov	r0, r3
 80026c2:	3720      	adds	r7, #32
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bd80      	pop	{r7, pc}

080026c8 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b08a      	sub	sp, #40	; 0x28
 80026cc:	af02      	add	r7, sp, #8
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80026d4:	f7fd ff7c 	bl	80005d0 <HAL_GetTick>
 80026d8:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	3350      	adds	r3, #80	; 0x50
 80026e0:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d105      	bne.n	80026f4 <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	2208      	movs	r2, #8
 80026f0:	649a      	str	r2, [r3, #72]	; 0x48
 80026f2:	e057      	b.n	80027a4 <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f8:	2b04      	cmp	r3, #4
 80026fa:	d14e      	bne.n	800279a <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	1c5a      	adds	r2, r3, #1
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	68ba      	ldr	r2, [r7, #8]
 8002714:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002724:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	2201      	movs	r2, #1
 800272e:	2104      	movs	r1, #4
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 fca9 	bl	8003088 <OSPI_WaitFlagStateUntilTimeout>
 8002736:	4603      	mov	r3, r0
 8002738:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 800273a:	7ffb      	ldrb	r3, [r7, #31]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d113      	bne.n	8002768 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002744:	781a      	ldrb	r2, [r3, #0]
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002758:	1e5a      	subs	r2, r3, #1
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1df      	bne.n	8002726 <HAL_OSPI_Transmit+0x5e>
 8002766:	e000      	b.n	800276a <HAL_OSPI_Transmit+0xa2>
          break;
 8002768:	bf00      	nop

      if (status == HAL_OK)
 800276a:	7ffb      	ldrb	r3, [r7, #31]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d119      	bne.n	80027a4 <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	69bb      	ldr	r3, [r7, #24]
 8002776:	2201      	movs	r2, #1
 8002778:	2102      	movs	r1, #2
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 fc84 	bl	8003088 <OSPI_WaitFlagStateUntilTimeout>
 8002780:	4603      	mov	r3, r0
 8002782:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8002784:	7ffb      	ldrb	r3, [r7, #31]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10c      	bne.n	80027a4 <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2202      	movs	r2, #2
 8002790:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	2202      	movs	r2, #2
 8002796:	645a      	str	r2, [r3, #68]	; 0x44
 8002798:	e004      	b.n	80027a4 <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2210      	movs	r2, #16
 80027a2:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80027a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3720      	adds	r7, #32
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}

080027ae <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 80027ae:	b580      	push	{r7, lr}
 80027b0:	b08c      	sub	sp, #48	; 0x30
 80027b2:	af02      	add	r7, sp, #8
 80027b4:	60f8      	str	r0, [r7, #12]
 80027b6:	60b9      	str	r1, [r7, #8]
 80027b8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80027ba:	f7fd ff09 	bl	80005d0 <HAL_GetTick>
 80027be:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	3350      	adds	r3, #80	; 0x50
 80027c6:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027ce:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 80027d8:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d106      	bne.n	80027ee <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	2208      	movs	r2, #8
 80027ea:	649a      	str	r2, [r3, #72]	; 0x48
 80027ec:	e07c      	b.n	80028e8 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f2:	2b04      	cmp	r3, #4
 80027f4:	d172      	bne.n	80028dc <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fc:	1c5a      	adds	r2, r3, #1
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002822:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	68db      	ldr	r3, [r3, #12]
 8002828:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800282c:	d104      	bne.n	8002838 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	649a      	str	r2, [r3, #72]	; 0x48
 8002836:	e011      	b.n	800285c <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002840:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002844:	2b00      	cmp	r3, #0
 8002846:	d004      	beq.n	8002852 <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	69ba      	ldr	r2, [r7, #24]
 800284e:	649a      	str	r2, [r3, #72]	; 0x48
 8002850:	e004      	b.n	800285c <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	9300      	str	r3, [sp, #0]
 8002860:	6a3b      	ldr	r3, [r7, #32]
 8002862:	2201      	movs	r2, #1
 8002864:	2106      	movs	r1, #6
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	f000 fc0e 	bl	8003088 <OSPI_WaitFlagStateUntilTimeout>
 800286c:	4603      	mov	r3, r0
 800286e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 8002872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002876:	2b00      	cmp	r3, #0
 8002878:	d114      	bne.n	80028a4 <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287e:	69fa      	ldr	r2, [r7, #28]
 8002880:	7812      	ldrb	r2, [r2, #0]
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800288a:	1c5a      	adds	r2, r3, #1
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002894:	1e5a      	subs	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d1dc      	bne.n	800285c <HAL_OSPI_Receive+0xae>
 80028a2:	e000      	b.n	80028a6 <HAL_OSPI_Receive+0xf8>
          break;
 80028a4:	bf00      	nop

      if (status == HAL_OK)
 80028a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d11c      	bne.n	80028e8 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	9300      	str	r3, [sp, #0]
 80028b2:	6a3b      	ldr	r3, [r7, #32]
 80028b4:	2201      	movs	r2, #1
 80028b6:	2102      	movs	r1, #2
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 fbe5 	bl	8003088 <OSPI_WaitFlagStateUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 80028c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d10d      	bne.n	80028e8 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	2202      	movs	r2, #2
 80028d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	2202      	movs	r2, #2
 80028d8:	645a      	str	r2, [r3, #68]	; 0x44
 80028da:	e005      	b.n	80028e8 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2210      	movs	r2, #16
 80028e6:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80028e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80028ec:	4618      	mov	r0, r3
 80028ee:	3728      	adds	r7, #40	; 0x28
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}

080028f4 <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b08a      	sub	sp, #40	; 0x28
 80028f8:	af02      	add	r7, sp, #8
 80028fa:	60f8      	str	r0, [r7, #12]
 80028fc:	60b9      	str	r1, [r7, #8]
 80028fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002900:	f7fd fe66 	bl	80005d0 <HAL_GetTick>
 8002904:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800290c:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002916:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	2b04      	cmp	r3, #4
 800291e:	d164      	bne.n	80029ea <HAL_OSPI_AutoPolling+0xf6>
 8002920:	68bb      	ldr	r3, [r7, #8]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002928:	d15f      	bne.n	80029ea <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2200      	movs	r2, #0
 8002932:	2120      	movs	r1, #32
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f000 fba7 	bl	8003088 <OSPI_WaitFlagStateUntilTimeout>
 800293a:	4603      	mov	r3, r0
 800293c:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800293e:	7ffb      	ldrb	r3, [r7, #31]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d158      	bne.n	80029f6 <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68ba      	ldr	r2, [r7, #8]
 800294a:	6812      	ldr	r2, [r2, #0]
 800294c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	6852      	ldr	r2, [r2, #4]
 8002958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	68ba      	ldr	r2, [r7, #8]
 8002962:	6912      	ldr	r2, [r2, #16]
 8002964:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 8002972:	68bb      	ldr	r3, [r7, #8]
 8002974:	6899      	ldr	r1, [r3, #8]
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	68db      	ldr	r3, [r3, #12]
 800297a:	430b      	orrs	r3, r1
 800297c:	431a      	orrs	r2, r3
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002986:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002990:	d104      	bne.n	800299c <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	697a      	ldr	r2, [r7, #20]
 8002998:	649a      	str	r2, [r3, #72]	; 0x48
 800299a:	e011      	b.n	80029c0 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80029a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	649a      	str	r2, [r3, #72]	; 0x48
 80029b4:	e004      	b.n	80029c0 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	693a      	ldr	r2, [r7, #16]
 80029bc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	9300      	str	r3, [sp, #0]
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2201      	movs	r2, #1
 80029c8:	2108      	movs	r1, #8
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fb5c 	bl	8003088 <OSPI_WaitFlagStateUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 80029d4:	7ffb      	ldrb	r3, [r7, #31]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d10d      	bne.n	80029f6 <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2208      	movs	r2, #8
 80029e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2202      	movs	r2, #2
 80029e6:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80029e8:	e005      	b.n	80029f6 <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2210      	movs	r2, #16
 80029f2:	649a      	str	r2, [r3, #72]	; 0x48
 80029f4:	e000      	b.n	80029f8 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 80029f6:	bf00      	nop
  }

  /* Return function status */
  return status;
 80029f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}

08002a02 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b083      	sub	sp, #12
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
 8002a0a:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	683a      	ldr	r2, [r7, #0]
 8002a10:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 8002a12:	2300      	movs	r3, #0
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	370c      	adds	r7, #12
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b092      	sub	sp, #72	; 0x48
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	60f8      	str	r0, [r7, #12]
 8002a28:	60b9      	str	r1, [r7, #8]
 8002a2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 8002a32:	2300      	movs	r3, #0
 8002a34:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a08      	ldr	r2, [pc, #32]	; (8002a60 <HAL_OSPIM_Config+0x40>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d105      	bne.n	8002a4e <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 8002a46:	2301      	movs	r3, #1
 8002a48:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002a4c:	e004      	b.n	8002a58 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002a58:	2300      	movs	r3, #0
 8002a5a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002a5e:	e01f      	b.n	8002aa0 <HAL_OSPIM_Config+0x80>
 8002a60:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 8002a64:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a68:	3301      	adds	r3, #1
 8002a6a:	b2d8      	uxtb	r0, r3
 8002a6c:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002a70:	f107 0114 	add.w	r1, r7, #20
 8002a74:	4613      	mov	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	4413      	add	r3, r2
 8002a7a:	009b      	lsls	r3, r3, #2
 8002a7c:	440b      	add	r3, r1
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f000 fc9c 	bl	80033bc <OSPIM_GetConfig>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2208      	movs	r2, #8
 8002a94:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 8002a96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002aa0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002aa4:	2b01      	cmp	r3, #1
 8002aa6:	d9dd      	bls.n	8002a64 <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8002aa8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	f040 82de 	bne.w	800306e <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 8002ab2:	4bc6      	ldr	r3, [pc, #792]	; (8002dcc <HAL_OSPIM_Config+0x3ac>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00b      	beq.n	8002ad6 <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002abe:	4bc3      	ldr	r3, [pc, #780]	; (8002dcc <HAL_OSPIM_Config+0x3ac>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4ac2      	ldr	r2, [pc, #776]	; (8002dcc <HAL_OSPIM_Config+0x3ac>)
 8002ac4:	f023 0301 	bic.w	r3, r3, #1
 8002ac8:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002aca:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002ace:	f043 0301 	orr.w	r3, r3, #1
 8002ad2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 8002ad6:	4bbe      	ldr	r3, [pc, #760]	; (8002dd0 <HAL_OSPIM_Config+0x3b0>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00b      	beq.n	8002afa <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002ae2:	4bbb      	ldr	r3, [pc, #748]	; (8002dd0 <HAL_OSPIM_Config+0x3b0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4aba      	ldr	r2, [pc, #744]	; (8002dd0 <HAL_OSPIM_Config+0x3b0>)
 8002ae8:	f023 0301 	bic.w	r3, r3, #1
 8002aec:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002aee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002af2:	f043 0302 	orr.w	r3, r3, #2
 8002af6:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002afa:	49b6      	ldr	r1, [pc, #728]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002afc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	3348      	adds	r3, #72	; 0x48
 8002b08:	443b      	add	r3, r7
 8002b0a:	3b2c      	subs	r3, #44	; 0x2c
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	6859      	ldr	r1, [r3, #4]
 8002b16:	48af      	ldr	r0, [pc, #700]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002b18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	3348      	adds	r3, #72	; 0x48
 8002b24:	443b      	add	r3, r7
 8002b26:	3b2c      	subs	r3, #44	; 0x2c
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	4403      	add	r3, r0
 8002b34:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 8002b36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b38:	4613      	mov	r3, r2
 8002b3a:	009b      	lsls	r3, r3, #2
 8002b3c:	4413      	add	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	3348      	adds	r3, #72	; 0x48
 8002b42:	443b      	add	r3, r7
 8002b44:	3b34      	subs	r3, #52	; 0x34
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 80a1 	beq.w	8002c90 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8002b4e:	49a1      	ldr	r1, [pc, #644]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002b50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b52:	4613      	mov	r3, r2
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	4413      	add	r3, r2
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	3348      	adds	r3, #72	; 0x48
 8002b5c:	443b      	add	r3, r7
 8002b5e:	3b34      	subs	r3, #52	; 0x34
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	3b01      	subs	r3, #1
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	6859      	ldr	r1, [r3, #4]
 8002b6a:	489a      	ldr	r0, [pc, #616]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002b6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	3348      	adds	r3, #72	; 0x48
 8002b78:	443b      	add	r3, r7
 8002b7a:	3b34      	subs	r3, #52	; 0x34
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3b01      	subs	r3, #1
 8002b80:	f021 0201 	bic.w	r2, r1, #1
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	4403      	add	r3, r0
 8002b88:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 8002b8a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002b8c:	4613      	mov	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	4413      	add	r3, r2
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	3348      	adds	r3, #72	; 0x48
 8002b96:	443b      	add	r3, r7
 8002b98:	3b30      	subs	r3, #48	; 0x30
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d01d      	beq.n	8002bdc <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8002ba0:	498c      	ldr	r1, [pc, #560]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002ba2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ba4:	4613      	mov	r3, r2
 8002ba6:	009b      	lsls	r3, r3, #2
 8002ba8:	4413      	add	r3, r2
 8002baa:	009b      	lsls	r3, r3, #2
 8002bac:	3348      	adds	r3, #72	; 0x48
 8002bae:	443b      	add	r3, r7
 8002bb0:	3b30      	subs	r3, #48	; 0x30
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	3b01      	subs	r3, #1
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	6859      	ldr	r1, [r3, #4]
 8002bbc:	4885      	ldr	r0, [pc, #532]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002bbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	4413      	add	r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	3348      	adds	r3, #72	; 0x48
 8002bca:	443b      	add	r3, r7
 8002bcc:	3b30      	subs	r3, #48	; 0x30
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	f021 0210 	bic.w	r2, r1, #16
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	4403      	add	r3, r0
 8002bda:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002bdc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bde:	4613      	mov	r3, r2
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	4413      	add	r3, r2
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	3348      	adds	r3, #72	; 0x48
 8002be8:	443b      	add	r3, r7
 8002bea:	3b28      	subs	r3, #40	; 0x28
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d021      	beq.n	8002c36 <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 8002bf2:	4978      	ldr	r1, [pc, #480]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002bf4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	3348      	adds	r3, #72	; 0x48
 8002c00:	443b      	add	r3, r7
 8002c02:	3b28      	subs	r3, #40	; 0x28
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	3b01      	subs	r3, #1
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	440b      	add	r3, r1
 8002c10:	6859      	ldr	r1, [r3, #4]
 8002c12:	4870      	ldr	r0, [pc, #448]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002c14:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c16:	4613      	mov	r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	4413      	add	r3, r2
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	3348      	adds	r3, #72	; 0x48
 8002c20:	443b      	add	r3, r7
 8002c22:	3b28      	subs	r3, #40	; 0x28
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	3b01      	subs	r3, #1
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4403      	add	r3, r0
 8002c34:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002c36:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	3348      	adds	r3, #72	; 0x48
 8002c42:	443b      	add	r3, r7
 8002c44:	3b24      	subs	r3, #36	; 0x24
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d021      	beq.n	8002c90 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 8002c4c:	4961      	ldr	r1, [pc, #388]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002c4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c50:	4613      	mov	r3, r2
 8002c52:	009b      	lsls	r3, r3, #2
 8002c54:	4413      	add	r3, r2
 8002c56:	009b      	lsls	r3, r3, #2
 8002c58:	3348      	adds	r3, #72	; 0x48
 8002c5a:	443b      	add	r3, r7
 8002c5c:	3b24      	subs	r3, #36	; 0x24
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	3b01      	subs	r3, #1
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	440b      	add	r3, r1
 8002c6a:	6859      	ldr	r1, [r3, #4]
 8002c6c:	4859      	ldr	r0, [pc, #356]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002c6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c70:	4613      	mov	r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	4413      	add	r3, r2
 8002c76:	009b      	lsls	r3, r3, #2
 8002c78:	3348      	adds	r3, #72	; 0x48
 8002c7a:	443b      	add	r3, r7
 8002c7c:	3b24      	subs	r3, #36	; 0x24
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	3b01      	subs	r3, #1
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	4403      	add	r3, r0
 8002c8e:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	6819      	ldr	r1, [r3, #0]
 8002c94:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002c98:	4613      	mov	r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	3348      	adds	r3, #72	; 0x48
 8002ca2:	443b      	add	r3, r7
 8002ca4:	3b34      	subs	r3, #52	; 0x34
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4299      	cmp	r1, r3
 8002caa:	d038      	beq.n	8002d1e <HAL_OSPIM_Config+0x2fe>
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	6859      	ldr	r1, [r3, #4]
 8002cb0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	4413      	add	r3, r2
 8002cba:	009b      	lsls	r3, r3, #2
 8002cbc:	3348      	adds	r3, #72	; 0x48
 8002cbe:	443b      	add	r3, r7
 8002cc0:	3b30      	subs	r3, #48	; 0x30
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4299      	cmp	r1, r3
 8002cc6:	d02a      	beq.n	8002d1e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002cc8:	68bb      	ldr	r3, [r7, #8]
 8002cca:	6899      	ldr	r1, [r3, #8]
 8002ccc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	009b      	lsls	r3, r3, #2
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	3348      	adds	r3, #72	; 0x48
 8002cda:	443b      	add	r3, r7
 8002cdc:	3b2c      	subs	r3, #44	; 0x2c
 8002cde:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002ce0:	4299      	cmp	r1, r3
 8002ce2:	d01c      	beq.n	8002d1e <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002ce4:	68bb      	ldr	r3, [r7, #8]
 8002ce6:	68d9      	ldr	r1, [r3, #12]
 8002ce8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002cec:	4613      	mov	r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	3348      	adds	r3, #72	; 0x48
 8002cf6:	443b      	add	r3, r7
 8002cf8:	3b28      	subs	r3, #40	; 0x28
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4299      	cmp	r1, r3
 8002cfe:	d00e      	beq.n	8002d1e <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	6919      	ldr	r1, [r3, #16]
 8002d04:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002d08:	4613      	mov	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4413      	add	r3, r2
 8002d0e:	009b      	lsls	r3, r3, #2
 8002d10:	3348      	adds	r3, #72	; 0x48
 8002d12:	443b      	add	r3, r7
 8002d14:	3b24      	subs	r3, #36	; 0x24
 8002d16:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002d18:	4299      	cmp	r1, r3
 8002d1a:	f040 80d3 	bne.w	8002ec4 <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8002d1e:	492d      	ldr	r1, [pc, #180]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002d20:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002d24:	4613      	mov	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4413      	add	r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	3348      	adds	r3, #72	; 0x48
 8002d2e:	443b      	add	r3, r7
 8002d30:	3b34      	subs	r3, #52	; 0x34
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	440b      	add	r3, r1
 8002d3a:	6859      	ldr	r1, [r3, #4]
 8002d3c:	4825      	ldr	r0, [pc, #148]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002d3e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	3348      	adds	r3, #72	; 0x48
 8002d4c:	443b      	add	r3, r7
 8002d4e:	3b34      	subs	r3, #52	; 0x34
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	f021 0201 	bic.w	r2, r1, #1
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4403      	add	r3, r0
 8002d5c:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 8002d5e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002d62:	4613      	mov	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	4413      	add	r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	3348      	adds	r3, #72	; 0x48
 8002d6c:	443b      	add	r3, r7
 8002d6e:	3b30      	subs	r3, #48	; 0x30
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d01f      	beq.n	8002db6 <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 8002d76:	4917      	ldr	r1, [pc, #92]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002d78:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4413      	add	r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	3348      	adds	r3, #72	; 0x48
 8002d86:	443b      	add	r3, r7
 8002d88:	3b30      	subs	r3, #48	; 0x30
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	6859      	ldr	r1, [r3, #4]
 8002d94:	480f      	ldr	r0, [pc, #60]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002d96:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	3348      	adds	r3, #72	; 0x48
 8002da4:	443b      	add	r3, r7
 8002da6:	3b30      	subs	r3, #48	; 0x30
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	f021 0210 	bic.w	r2, r1, #16
 8002db0:	009b      	lsls	r3, r3, #2
 8002db2:	4403      	add	r3, r0
 8002db4:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002db6:	4907      	ldr	r1, [pc, #28]	; (8002dd4 <HAL_OSPIM_Config+0x3b4>)
 8002db8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	3348      	adds	r3, #72	; 0x48
 8002dc6:	443b      	add	r3, r7
 8002dc8:	3b2c      	subs	r3, #44	; 0x2c
 8002dca:	e005      	b.n	8002dd8 <HAL_OSPIM_Config+0x3b8>
 8002dcc:	a0001000 	.word	0xa0001000
 8002dd0:	a0001400 	.word	0xa0001400
 8002dd4:	50061c00 	.word	0x50061c00
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	3b01      	subs	r3, #1
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	6859      	ldr	r1, [r3, #4]
 8002de2:	48a6      	ldr	r0, [pc, #664]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002de4:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002de8:	4613      	mov	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	3348      	adds	r3, #72	; 0x48
 8002df2:	443b      	add	r3, r7
 8002df4:	3b2c      	subs	r3, #44	; 0x2c
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	4403      	add	r3, r0
 8002e02:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002e04:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	3348      	adds	r3, #72	; 0x48
 8002e12:	443b      	add	r3, r7
 8002e14:	3b28      	subs	r3, #40	; 0x28
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d023      	beq.n	8002e64 <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002e1c:	4997      	ldr	r1, [pc, #604]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002e1e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002e22:	4613      	mov	r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4413      	add	r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	3348      	adds	r3, #72	; 0x48
 8002e2c:	443b      	add	r3, r7
 8002e2e:	3b28      	subs	r3, #40	; 0x28
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	6859      	ldr	r1, [r3, #4]
 8002e3e:	488f      	ldr	r0, [pc, #572]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002e40:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002e44:	4613      	mov	r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	4413      	add	r3, r2
 8002e4a:	009b      	lsls	r3, r3, #2
 8002e4c:	3348      	adds	r3, #72	; 0x48
 8002e4e:	443b      	add	r3, r7
 8002e50:	3b28      	subs	r3, #40	; 0x28
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3b01      	subs	r3, #1
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4403      	add	r3, r0
 8002e62:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002e64:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002e68:	4613      	mov	r3, r2
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	4413      	add	r3, r2
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	3348      	adds	r3, #72	; 0x48
 8002e72:	443b      	add	r3, r7
 8002e74:	3b24      	subs	r3, #36	; 0x24
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d023      	beq.n	8002ec4 <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002e7c:	497f      	ldr	r1, [pc, #508]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002e7e:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002e82:	4613      	mov	r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	4413      	add	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	3348      	adds	r3, #72	; 0x48
 8002e8c:	443b      	add	r3, r7
 8002e8e:	3b24      	subs	r3, #36	; 0x24
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	3b01      	subs	r3, #1
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	4877      	ldr	r0, [pc, #476]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002ea0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	4413      	add	r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	3348      	adds	r3, #72	; 0x48
 8002eae:	443b      	add	r3, r7
 8002eb0:	3b24      	subs	r3, #36	; 0x24
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	f003 0301 	and.w	r3, r3, #1
 8002eba:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	4403      	add	r3, r0
 8002ec2:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002ec4:	4a6d      	ldr	r2, [pc, #436]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002ec6:	68bb      	ldr	r3, [r7, #8]
 8002ec8:	689b      	ldr	r3, [r3, #8]
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ed6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ed8:	025b      	lsls	r3, r3, #9
 8002eda:	431a      	orrs	r2, r3
 8002edc:	4967      	ldr	r1, [pc, #412]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	3b01      	subs	r3, #1
 8002ee4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002eee:	4a63      	ldr	r2, [pc, #396]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3b01      	subs	r3, #1
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4413      	add	r3, r2
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f023 0203 	bic.w	r2, r3, #3
 8002f00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	431a      	orrs	r2, r3
 8002f06:	495d      	ldr	r1, [pc, #372]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	440b      	add	r3, r1
 8002f16:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d014      	beq.n	8002f4a <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8002f20:	4a56      	ldr	r2, [pc, #344]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f34:	015b      	lsls	r3, r3, #5
 8002f36:	431a      	orrs	r2, r3
 8002f38:	4950      	ldr	r1, [pc, #320]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	f042 0210 	orr.w	r2, r2, #16
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d019      	beq.n	8002f8a <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002f56:	4a49      	ldr	r2, [pc, #292]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	4413      	add	r3, r2
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f6e:	049b      	lsls	r3, r3, #18
 8002f70:	431a      	orrs	r2, r3
 8002f72:	4942      	ldr	r1, [pc, #264]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002f74:	68bb      	ldr	r3, [r7, #8]
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	3b01      	subs	r3, #1
 8002f7a:	f003 0301 	and.w	r3, r3, #1
 8002f7e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	e01c      	b.n	8002fc4 <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	68db      	ldr	r3, [r3, #12]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d018      	beq.n	8002fc4 <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002f92:	4a3a      	ldr	r2, [pc, #232]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002faa:	069b      	lsls	r3, r3, #26
 8002fac:	431a      	orrs	r2, r3
 8002fae:	4933      	ldr	r1, [pc, #204]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	440b      	add	r3, r1
 8002fc2:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d019      	beq.n	8003004 <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002fd0:	4a2a      	ldr	r2, [pc, #168]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	3b01      	subs	r3, #1
 8002fd8:	f003 0301 	and.w	r3, r3, #1
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	4413      	add	r3, r2
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002fe6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe8:	049b      	lsls	r3, r3, #18
 8002fea:	431a      	orrs	r2, r3
 8002fec:	4923      	ldr	r1, [pc, #140]	; (800307c <HAL_OSPIM_Config+0x65c>)
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	691b      	ldr	r3, [r3, #16]
 8002ff2:	3b01      	subs	r3, #1
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	605a      	str	r2, [r3, #4]
 8003002:	e01c      	b.n	800303e <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	691b      	ldr	r3, [r3, #16]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d018      	beq.n	800303e <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 800300c:	4a1b      	ldr	r2, [pc, #108]	; (800307c <HAL_OSPIM_Config+0x65c>)
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	3b01      	subs	r3, #1
 8003014:	f003 0301 	and.w	r3, r3, #1
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	4413      	add	r3, r2
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8003022:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003024:	069b      	lsls	r3, r3, #26
 8003026:	431a      	orrs	r2, r3
 8003028:	4914      	ldr	r1, [pc, #80]	; (800307c <HAL_OSPIM_Config+0x65c>)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	691b      	ldr	r3, [r3, #16]
 800302e:	3b01      	subs	r3, #1
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 800303e:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8003042:	f003 0301 	and.w	r3, r3, #1
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 800304a:	4b0d      	ldr	r3, [pc, #52]	; (8003080 <HAL_OSPIM_Config+0x660>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a0c      	ldr	r2, [pc, #48]	; (8003080 <HAL_OSPIM_Config+0x660>)
 8003050:	f043 0301 	orr.w	r3, r3, #1
 8003054:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8003056:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800305a:	f003 0302 	and.w	r3, r3, #2
 800305e:	2b00      	cmp	r3, #0
 8003060:	d005      	beq.n	800306e <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8003062:	4b08      	ldr	r3, [pc, #32]	; (8003084 <HAL_OSPIM_Config+0x664>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4a07      	ldr	r2, [pc, #28]	; (8003084 <HAL_OSPIM_Config+0x664>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 800306e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8003072:	4618      	mov	r0, r3
 8003074:	3748      	adds	r7, #72	; 0x48
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	50061c00 	.word	0x50061c00
 8003080:	a0001000 	.word	0xa0001000
 8003084:	a0001400 	.word	0xa0001400

08003088 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60f8      	str	r0, [r7, #12]
 8003090:	60b9      	str	r1, [r7, #8]
 8003092:	603b      	str	r3, [r7, #0]
 8003094:	4613      	mov	r3, r2
 8003096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8003098:	e01a      	b.n	80030d0 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800309a:	69bb      	ldr	r3, [r7, #24]
 800309c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80030a0:	d016      	beq.n	80030d0 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030a2:	f7fd fa95 	bl	80005d0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d302      	bcc.n	80030b8 <OSPI_WaitFlagStateUntilTimeout+0x30>
 80030b2:	69bb      	ldr	r3, [r7, #24]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10b      	bne.n	80030d0 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030be:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030c4:	f043 0201 	orr.w	r2, r3, #1
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 80030cc:	2301      	movs	r3, #1
 80030ce:	e00e      	b.n	80030ee <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6a1a      	ldr	r2, [r3, #32]
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	bf14      	ite	ne
 80030de:	2301      	movne	r3, #1
 80030e0:	2300      	moveq	r3, #0
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	461a      	mov	r2, r3
 80030e6:	79fb      	ldrb	r3, [r7, #7]
 80030e8:	429a      	cmp	r2, r3
 80030ea:	d1d6      	bne.n	800309a <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80030ec:	2300      	movs	r3, #0
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3710      	adds	r7, #16
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bd80      	pop	{r7, pc}
	...

080030f8 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	; 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	681a      	ldr	r2, [r3, #0]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003114:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d10a      	bne.n	8003134 <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	430a      	orrs	r2, r1
 8003132:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2b02      	cmp	r3, #2
 800313a:	d114      	bne.n	8003166 <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003144:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800314e:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8003158:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8003162:	60fb      	str	r3, [r7, #12]
 8003164:	e013      	b.n	800318e <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800316e:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8003178:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8003182:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f503 7390 	add.w	r3, r3, #288	; 0x120
 800318c:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003196:	431a      	orrs	r2, r3
 8003198:	69bb      	ldr	r3, [r7, #24]
 800319a:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d012      	beq.n	80031ca <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031bc:	4319      	orrs	r1, r3
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031c2:	430b      	orrs	r3, r1
 80031c4:	431a      	orrs	r2, r3
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f023 021f 	bic.w	r2, r3, #31
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d6:	431a      	orrs	r2, r3
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d009      	beq.n	80031f8 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	3a01      	subs	r2, #1
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	68db      	ldr	r3, [r3, #12]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	f000 8099 	beq.w	8003334 <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	69db      	ldr	r3, [r3, #28]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d055      	beq.n	80032b6 <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800320e:	2b00      	cmp	r3, #0
 8003210:	d01e      	beq.n	8003250 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	4b68      	ldr	r3, [pc, #416]	; (80033b8 <OSPI_ConfigCmd+0x2c0>)
 8003218:	4013      	ands	r3, r2
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	68d1      	ldr	r1, [r2, #12]
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	6952      	ldr	r2, [r2, #20]
 8003222:	4311      	orrs	r1, r2
 8003224:	683a      	ldr	r2, [r7, #0]
 8003226:	6912      	ldr	r2, [r2, #16]
 8003228:	4311      	orrs	r1, r2
 800322a:	683a      	ldr	r2, [r7, #0]
 800322c:	69d2      	ldr	r2, [r2, #28]
 800322e:	4311      	orrs	r1, r2
 8003230:	683a      	ldr	r2, [r7, #0]
 8003232:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003234:	4311      	orrs	r1, r2
 8003236:	683a      	ldr	r2, [r7, #0]
 8003238:	6a12      	ldr	r2, [r2, #32]
 800323a:	4311      	orrs	r1, r2
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003240:	4311      	orrs	r1, r2
 8003242:	683a      	ldr	r2, [r7, #0]
 8003244:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003246:	430a      	orrs	r2, r1
 8003248:	431a      	orrs	r2, r3
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	601a      	str	r2, [r3, #0]
 800324e:	e028      	b.n	80032a2 <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003258:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	68d1      	ldr	r1, [r2, #12]
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	6952      	ldr	r2, [r2, #20]
 8003264:	4311      	orrs	r1, r2
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	6912      	ldr	r2, [r2, #16]
 800326a:	4311      	orrs	r1, r2
 800326c:	683a      	ldr	r2, [r7, #0]
 800326e:	69d2      	ldr	r2, [r2, #28]
 8003270:	4311      	orrs	r1, r2
 8003272:	683a      	ldr	r2, [r7, #0]
 8003274:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003276:	4311      	orrs	r1, r2
 8003278:	683a      	ldr	r2, [r7, #0]
 800327a:	6a12      	ldr	r2, [r2, #32]
 800327c:	430a      	orrs	r2, r1
 800327e:	431a      	orrs	r2, r3
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003288:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800328c:	d109      	bne.n	80032a2 <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8003292:	2b08      	cmp	r3, #8
 8003294:	d105      	bne.n	80032a2 <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689a      	ldr	r2, [r3, #8]
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	683a      	ldr	r2, [r7, #0]
 80032b0:	6992      	ldr	r2, [r2, #24]
 80032b2:	649a      	str	r2, [r3, #72]	; 0x48
 80032b4:	e078      	b.n	80033a8 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d017      	beq.n	80032ee <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 80032c6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80032ca:	683a      	ldr	r2, [r7, #0]
 80032cc:	68d1      	ldr	r1, [r2, #12]
 80032ce:	683a      	ldr	r2, [r7, #0]
 80032d0:	6952      	ldr	r2, [r2, #20]
 80032d2:	4311      	orrs	r1, r2
 80032d4:	683a      	ldr	r2, [r7, #0]
 80032d6:	6912      	ldr	r2, [r2, #16]
 80032d8:	4311      	orrs	r1, r2
 80032da:	683a      	ldr	r2, [r7, #0]
 80032dc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80032de:	4311      	orrs	r1, r2
 80032e0:	683a      	ldr	r2, [r7, #0]
 80032e2:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80032e4:	430a      	orrs	r2, r1
 80032e6:	431a      	orrs	r2, r3
 80032e8:	69bb      	ldr	r3, [r7, #24]
 80032ea:	601a      	str	r2, [r3, #0]
 80032ec:	e01d      	b.n	800332a <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68d9      	ldr	r1, [r3, #12]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	4319      	orrs	r1, r3
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	691b      	ldr	r3, [r3, #16]
 8003304:	430b      	orrs	r3, r1
 8003306:	431a      	orrs	r2, r3
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003310:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003314:	d109      	bne.n	800332a <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 800331a:	2b08      	cmp	r3, #8
 800331c:	d105      	bne.n	800332a <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	689a      	ldr	r2, [r3, #8]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	e039      	b.n	80033a8 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d030      	beq.n	800339e <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	2b00      	cmp	r3, #0
 8003342:	d017      	beq.n	8003374 <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 800334c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003350:	683a      	ldr	r2, [r7, #0]
 8003352:	69d1      	ldr	r1, [r2, #28]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003358:	4311      	orrs	r1, r2
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	6a12      	ldr	r2, [r2, #32]
 800335e:	4311      	orrs	r1, r2
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003364:	4311      	orrs	r1, r2
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800336a:	430a      	orrs	r2, r1
 800336c:	431a      	orrs	r2, r3
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	601a      	str	r2, [r3, #0]
 8003372:	e00e      	b.n	8003392 <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	69d9      	ldr	r1, [r3, #28]
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	4319      	orrs	r1, r3
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	6a1b      	ldr	r3, [r3, #32]
 800338a:	430b      	orrs	r3, r1
 800338c:	431a      	orrs	r2, r3
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	683a      	ldr	r2, [r7, #0]
 8003398:	6992      	ldr	r2, [r2, #24]
 800339a:	649a      	str	r2, [r3, #72]	; 0x48
 800339c:	e004      	b.n	80033a8 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2208      	movs	r2, #8
 80033a6:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80033a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3724      	adds	r7, #36	; 0x24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
 80033b6:	bf00      	nop
 80033b8:	f0ffc0c0 	.word	0xf0ffc0c0

080033bc <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	4603      	mov	r3, r0
 80033c4:	6039      	str	r1, [r7, #0]
 80033c6:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 80033c8:	2300      	movs	r3, #0
 80033ca:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 80033cc:	2300      	movs	r3, #0
 80033ce:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 80033d0:	79fb      	ldrb	r3, [r7, #7]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d005      	beq.n	80033e2 <OSPIM_GetConfig+0x26>
 80033d6:	79fb      	ldrb	r3, [r7, #7]
 80033d8:	2b02      	cmp	r3, #2
 80033da:	d802      	bhi.n	80033e2 <OSPIM_GetConfig+0x26>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d102      	bne.n	80033e8 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	75fb      	strb	r3, [r7, #23]
 80033e6:	e08e      	b.n	8003506 <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	2200      	movs	r2, #0
 80033f2:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2200      	movs	r2, #0
 80033f8:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	2200      	movs	r2, #0
 80033fe:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	2b02      	cmp	r3, #2
 800340a:	d101      	bne.n	8003410 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 800340c:	4b41      	ldr	r3, [pc, #260]	; (8003514 <OSPIM_GetConfig+0x158>)
 800340e:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003410:	2300      	movs	r3, #0
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	e074      	b.n	8003500 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8003416:	4a40      	ldr	r2, [pc, #256]	; (8003518 <OSPIM_GetConfig+0x15c>)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8003422:	68bb      	ldr	r3, [r7, #8]
 8003424:	f003 0301 	and.w	r3, r3, #1
 8003428:	2b00      	cmp	r3, #0
 800342a:	d00a      	beq.n	8003442 <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 800342c:	68ba      	ldr	r2, [r7, #8]
 800342e:	693b      	ldr	r3, [r7, #16]
 8003430:	4053      	eors	r3, r2
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d103      	bne.n	8003442 <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	1c5a      	adds	r2, r3, #1
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	f003 0310 	and.w	r3, r3, #16
 8003448:	2b00      	cmp	r3, #0
 800344a:	d00a      	beq.n	8003462 <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 800344c:	68ba      	ldr	r2, [r7, #8]
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	4053      	eors	r3, r2
 8003452:	f003 0320 	and.w	r3, r3, #32
 8003456:	2b00      	cmp	r3, #0
 8003458:	d103      	bne.n	8003462 <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	1c5a      	adds	r2, r3, #1
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4053      	eors	r3, r2
 8003472:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003476:	2b00      	cmp	r3, #0
 8003478:	d103      	bne.n	8003482 <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003488:	2b00      	cmp	r3, #0
 800348a:	d018      	beq.n	80034be <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 800348c:	68ba      	ldr	r2, [r7, #8]
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	4053      	eors	r3, r2
 8003492:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d111      	bne.n	80034be <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d106      	bne.n	80034b2 <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	3301      	adds	r3, #1
 80034a8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	60da      	str	r2, [r3, #12]
 80034b0:	e005      	b.n	80034be <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3301      	adds	r3, #1
 80034b6:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d018      	beq.n	80034fa <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 80034c8:	68ba      	ldr	r2, [r7, #8]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	4053      	eors	r3, r2
 80034ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d111      	bne.n	80034fa <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 80034d6:	68bb      	ldr	r3, [r7, #8]
 80034d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d106      	bne.n	80034ee <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3301      	adds	r3, #1
 80034e4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	611a      	str	r2, [r3, #16]
 80034ec:	e005      	b.n	80034fa <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3301      	adds	r3, #1
 80034f2:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	3301      	adds	r3, #1
 80034fe:	60fb      	str	r3, [r7, #12]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2b01      	cmp	r3, #1
 8003504:	d987      	bls.n	8003416 <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 8003506:	7dfb      	ldrb	r3, [r7, #23]
}
 8003508:	4618      	mov	r0, r3
 800350a:	371c      	adds	r7, #28
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	04040222 	.word	0x04040222
 8003518:	50061c00 	.word	0x50061c00

0800351c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800351c:	b480      	push	{r7}
 800351e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003520:	4b0d      	ldr	r3, [pc, #52]	; (8003558 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003528:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800352c:	d102      	bne.n	8003534 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800352e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003532:	e00b      	b.n	800354c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_PWREx_GetVoltageRange+0x3c>)
 8003536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003542:	d102      	bne.n	800354a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8003544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003548:	e000      	b.n	800354c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800354a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40007000 	.word	0x40007000

0800355c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d141      	bne.n	80035ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800356a:	4b4b      	ldr	r3, [pc, #300]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003576:	d131      	bne.n	80035dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003578:	4b47      	ldr	r3, [pc, #284]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800357a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800357e:	4a46      	ldr	r2, [pc, #280]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003580:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003584:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003588:	4b43      	ldr	r3, [pc, #268]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003590:	4a41      	ldr	r2, [pc, #260]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003592:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003596:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003598:	4b40      	ldr	r3, [pc, #256]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	2232      	movs	r2, #50	; 0x32
 800359e:	fb02 f303 	mul.w	r3, r2, r3
 80035a2:	4a3f      	ldr	r2, [pc, #252]	; (80036a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035a4:	fba2 2303 	umull	r2, r3, r2, r3
 80035a8:	0c9b      	lsrs	r3, r3, #18
 80035aa:	3301      	adds	r3, #1
 80035ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ae:	e002      	b.n	80035b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035b6:	4b38      	ldr	r3, [pc, #224]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c2:	d102      	bne.n	80035ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f2      	bne.n	80035b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ca:	4b33      	ldr	r3, [pc, #204]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035d6:	d158      	bne.n	800368a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e057      	b.n	800368c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035dc:	4b2e      	ldr	r3, [pc, #184]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035e2:	4a2d      	ldr	r2, [pc, #180]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035e8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80035ec:	e04d      	b.n	800368a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035f4:	d141      	bne.n	800367a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80035f6:	4b28      	ldr	r3, [pc, #160]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003602:	d131      	bne.n	8003668 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003604:	4b24      	ldr	r3, [pc, #144]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800360a:	4a23      	ldr	r2, [pc, #140]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800360c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003610:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003614:	4b20      	ldr	r3, [pc, #128]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800361c:	4a1e      	ldr	r2, [pc, #120]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800361e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003622:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8003624:	4b1d      	ldr	r3, [pc, #116]	; (800369c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2232      	movs	r2, #50	; 0x32
 800362a:	fb02 f303 	mul.w	r3, r2, r3
 800362e:	4a1c      	ldr	r2, [pc, #112]	; (80036a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003630:	fba2 2303 	umull	r2, r3, r2, r3
 8003634:	0c9b      	lsrs	r3, r3, #18
 8003636:	3301      	adds	r3, #1
 8003638:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800363a:	e002      	b.n	8003642 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	3b01      	subs	r3, #1
 8003640:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003642:	4b15      	ldr	r3, [pc, #84]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364e:	d102      	bne.n	8003656 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d1f2      	bne.n	800363c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003656:	4b10      	ldr	r3, [pc, #64]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003658:	695b      	ldr	r3, [r3, #20]
 800365a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003662:	d112      	bne.n	800368a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e011      	b.n	800368c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800366a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800366e:	4a0a      	ldr	r2, [pc, #40]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003674:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003678:	e007      	b.n	800368a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800367a:	4b07      	ldr	r3, [pc, #28]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003682:	4a05      	ldr	r2, [pc, #20]	; (8003698 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003684:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003688:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800368a:	2300      	movs	r3, #0
}
 800368c:	4618      	mov	r0, r3
 800368e:	3714      	adds	r7, #20
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	40007000 	.word	0x40007000
 800369c:	2000003c 	.word	0x2000003c
 80036a0:	431bde83 	.word	0x431bde83

080036a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d102      	bne.n	80036b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	f000 bc08 	b.w	8003ec8 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80036b8:	4b96      	ldr	r3, [pc, #600]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80036c2:	4b94      	ldr	r3, [pc, #592]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0310 	and.w	r3, r3, #16
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f000 80e4 	beq.w	80038a2 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80036da:	69bb      	ldr	r3, [r7, #24]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <HAL_RCC_OscConfig+0x4c>
 80036e0:	69bb      	ldr	r3, [r7, #24]
 80036e2:	2b0c      	cmp	r3, #12
 80036e4:	f040 808b 	bne.w	80037fe <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	f040 8087 	bne.w	80037fe <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80036f0:	4b88      	ldr	r3, [pc, #544]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d005      	beq.n	8003708 <HAL_RCC_OscConfig+0x64>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	699b      	ldr	r3, [r3, #24]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8003704:	2301      	movs	r3, #1
 8003706:	e3df      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6a1a      	ldr	r2, [r3, #32]
 800370c:	4b81      	ldr	r3, [pc, #516]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <HAL_RCC_OscConfig+0x7e>
 8003718:	4b7e      	ldr	r3, [pc, #504]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003720:	e005      	b.n	800372e <HAL_RCC_OscConfig+0x8a>
 8003722:	4b7c      	ldr	r3, [pc, #496]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003724:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003728:	091b      	lsrs	r3, r3, #4
 800372a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800372e:	4293      	cmp	r3, r2
 8003730:	d223      	bcs.n	800377a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	4618      	mov	r0, r3
 8003738:	f000 fdcc 	bl	80042d4 <RCC_SetFlashLatencyFromMSIRange>
 800373c:	4603      	mov	r3, r0
 800373e:	2b00      	cmp	r3, #0
 8003740:	d001      	beq.n	8003746 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8003742:	2301      	movs	r3, #1
 8003744:	e3c0      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003746:	4b73      	ldr	r3, [pc, #460]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4a72      	ldr	r2, [pc, #456]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 800374c:	f043 0308 	orr.w	r3, r3, #8
 8003750:	6013      	str	r3, [r2, #0]
 8003752:	4b70      	ldr	r3, [pc, #448]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	496d      	ldr	r1, [pc, #436]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003760:	4313      	orrs	r3, r2
 8003762:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003764:	4b6b      	ldr	r3, [pc, #428]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	021b      	lsls	r3, r3, #8
 8003772:	4968      	ldr	r1, [pc, #416]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003774:	4313      	orrs	r3, r2
 8003776:	604b      	str	r3, [r1, #4]
 8003778:	e025      	b.n	80037c6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800377a:	4b66      	ldr	r3, [pc, #408]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a65      	ldr	r2, [pc, #404]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003780:	f043 0308 	orr.w	r3, r3, #8
 8003784:	6013      	str	r3, [r2, #0]
 8003786:	4b63      	ldr	r3, [pc, #396]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	4960      	ldr	r1, [pc, #384]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003794:	4313      	orrs	r3, r2
 8003796:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003798:	4b5e      	ldr	r3, [pc, #376]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	021b      	lsls	r3, r3, #8
 80037a6:	495b      	ldr	r1, [pc, #364]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80037ac:	69bb      	ldr	r3, [r7, #24]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d109      	bne.n	80037c6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fd8c 	bl	80042d4 <RCC_SetFlashLatencyFromMSIRange>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e380      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80037c6:	f000 fcc1 	bl	800414c <HAL_RCC_GetSysClockFreq>
 80037ca:	4602      	mov	r2, r0
 80037cc:	4b51      	ldr	r3, [pc, #324]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	091b      	lsrs	r3, r3, #4
 80037d2:	f003 030f 	and.w	r3, r3, #15
 80037d6:	4950      	ldr	r1, [pc, #320]	; (8003918 <HAL_RCC_OscConfig+0x274>)
 80037d8:	5ccb      	ldrb	r3, [r1, r3]
 80037da:	f003 031f 	and.w	r3, r3, #31
 80037de:	fa22 f303 	lsr.w	r3, r2, r3
 80037e2:	4a4e      	ldr	r2, [pc, #312]	; (800391c <HAL_RCC_OscConfig+0x278>)
 80037e4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80037e6:	4b4e      	ldr	r3, [pc, #312]	; (8003920 <HAL_RCC_OscConfig+0x27c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4618      	mov	r0, r3
 80037ec:	f7fc fea0 	bl	8000530 <HAL_InitTick>
 80037f0:	4603      	mov	r3, r0
 80037f2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80037f4:	7bfb      	ldrb	r3, [r7, #15]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d052      	beq.n	80038a0 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	e364      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d032      	beq.n	800386c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003806:	4b43      	ldr	r3, [pc, #268]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a42      	ldr	r2, [pc, #264]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 800380c:	f043 0301 	orr.w	r3, r3, #1
 8003810:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003812:	f7fc fedd 	bl	80005d0 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003818:	e008      	b.n	800382c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800381a:	f7fc fed9 	bl	80005d0 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d901      	bls.n	800382c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e34d      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800382c:	4b39      	ldr	r3, [pc, #228]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d0f0      	beq.n	800381a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003838:	4b36      	ldr	r3, [pc, #216]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a35      	ldr	r2, [pc, #212]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 800383e:	f043 0308 	orr.w	r3, r3, #8
 8003842:	6013      	str	r3, [r2, #0]
 8003844:	4b33      	ldr	r3, [pc, #204]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	4930      	ldr	r1, [pc, #192]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003852:	4313      	orrs	r3, r2
 8003854:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003856:	4b2f      	ldr	r3, [pc, #188]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	021b      	lsls	r3, r3, #8
 8003864:	492b      	ldr	r1, [pc, #172]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003866:	4313      	orrs	r3, r2
 8003868:	604b      	str	r3, [r1, #4]
 800386a:	e01a      	b.n	80038a2 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800386c:	4b29      	ldr	r3, [pc, #164]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	4a28      	ldr	r2, [pc, #160]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003872:	f023 0301 	bic.w	r3, r3, #1
 8003876:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003878:	f7fc feaa 	bl	80005d0 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003880:	f7fc fea6 	bl	80005d0 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e31a      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003892:	4b20      	ldr	r3, [pc, #128]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x1dc>
 800389e:	e000      	b.n	80038a2 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80038a0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d073      	beq.n	8003996 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b08      	cmp	r3, #8
 80038b2:	d005      	beq.n	80038c0 <HAL_RCC_OscConfig+0x21c>
 80038b4:	69bb      	ldr	r3, [r7, #24]
 80038b6:	2b0c      	cmp	r3, #12
 80038b8:	d10e      	bne.n	80038d8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d10b      	bne.n	80038d8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038c0:	4b14      	ldr	r3, [pc, #80]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d063      	beq.n	8003994 <HAL_RCC_OscConfig+0x2f0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d15f      	bne.n	8003994 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e2f7      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038e0:	d106      	bne.n	80038f0 <HAL_RCC_OscConfig+0x24c>
 80038e2:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a0b      	ldr	r2, [pc, #44]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 80038e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038ec:	6013      	str	r3, [r2, #0]
 80038ee:	e025      	b.n	800393c <HAL_RCC_OscConfig+0x298>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80038f8:	d114      	bne.n	8003924 <HAL_RCC_OscConfig+0x280>
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a05      	ldr	r2, [pc, #20]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003900:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003904:	6013      	str	r3, [r2, #0]
 8003906:	4b03      	ldr	r3, [pc, #12]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a02      	ldr	r2, [pc, #8]	; (8003914 <HAL_RCC_OscConfig+0x270>)
 800390c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003910:	6013      	str	r3, [r2, #0]
 8003912:	e013      	b.n	800393c <HAL_RCC_OscConfig+0x298>
 8003914:	40021000 	.word	0x40021000
 8003918:	08008558 	.word	0x08008558
 800391c:	2000003c 	.word	0x2000003c
 8003920:	20000000 	.word	0x20000000
 8003924:	4ba0      	ldr	r3, [pc, #640]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a9f      	ldr	r2, [pc, #636]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 800392a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b9d      	ldr	r3, [pc, #628]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a9c      	ldr	r2, [pc, #624]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003936:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800393a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d013      	beq.n	800396c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003944:	f7fc fe44 	bl	80005d0 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394c:	f7fc fe40 	bl	80005d0 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	; 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e2b4      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800395e:	4b92      	ldr	r3, [pc, #584]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0x2a8>
 800396a:	e014      	b.n	8003996 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800396c:	f7fc fe30 	bl	80005d0 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7fc fe2c 	bl	80005d0 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	; 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e2a0      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003986:	4b88      	ldr	r3, [pc, #544]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x2d0>
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d060      	beq.n	8003a64 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80039a2:	69bb      	ldr	r3, [r7, #24]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d005      	beq.n	80039b4 <HAL_RCC_OscConfig+0x310>
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b0c      	cmp	r3, #12
 80039ac:	d119      	bne.n	80039e2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d116      	bne.n	80039e2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039b4:	4b7c      	ldr	r3, [pc, #496]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d005      	beq.n	80039cc <HAL_RCC_OscConfig+0x328>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	68db      	ldr	r3, [r3, #12]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d101      	bne.n	80039cc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e27d      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039cc:	4b76      	ldr	r3, [pc, #472]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	691b      	ldr	r3, [r3, #16]
 80039d8:	061b      	lsls	r3, r3, #24
 80039da:	4973      	ldr	r1, [pc, #460]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80039e0:	e040      	b.n	8003a64 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	68db      	ldr	r3, [r3, #12]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d023      	beq.n	8003a32 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039ea:	4b6f      	ldr	r3, [pc, #444]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4a6e      	ldr	r2, [pc, #440]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 80039f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f6:	f7fc fdeb 	bl	80005d0 <HAL_GetTick>
 80039fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80039fc:	e008      	b.n	8003a10 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80039fe:	f7fc fde7 	bl	80005d0 <HAL_GetTick>
 8003a02:	4602      	mov	r2, r0
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	1ad3      	subs	r3, r2, r3
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d901      	bls.n	8003a10 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	e25b      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a10:	4b65      	ldr	r3, [pc, #404]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d0f0      	beq.n	80039fe <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a1c:	4b62      	ldr	r3, [pc, #392]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	691b      	ldr	r3, [r3, #16]
 8003a28:	061b      	lsls	r3, r3, #24
 8003a2a:	495f      	ldr	r1, [pc, #380]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	604b      	str	r3, [r1, #4]
 8003a30:	e018      	b.n	8003a64 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a32:	4b5d      	ldr	r3, [pc, #372]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a5c      	ldr	r2, [pc, #368]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a3c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a3e:	f7fc fdc7 	bl	80005d0 <HAL_GetTick>
 8003a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a44:	e008      	b.n	8003a58 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a46:	f7fc fdc3 	bl	80005d0 <HAL_GetTick>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	1ad3      	subs	r3, r2, r3
 8003a50:	2b02      	cmp	r3, #2
 8003a52:	d901      	bls.n	8003a58 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003a54:	2303      	movs	r3, #3
 8003a56:	e237      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003a58:	4b53      	ldr	r3, [pc, #332]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d1f0      	bne.n	8003a46 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0308 	and.w	r3, r3, #8
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d03c      	beq.n	8003aea <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	695b      	ldr	r3, [r3, #20]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d01c      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a78:	4b4b      	ldr	r3, [pc, #300]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003a7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003a7e:	4a4a      	ldr	r2, [pc, #296]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a88:	f7fc fda2 	bl	80005d0 <HAL_GetTick>
 8003a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003a8e:	e008      	b.n	8003aa2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a90:	f7fc fd9e 	bl	80005d0 <HAL_GetTick>
 8003a94:	4602      	mov	r2, r0
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	1ad3      	subs	r3, r2, r3
 8003a9a:	2b02      	cmp	r3, #2
 8003a9c:	d901      	bls.n	8003aa2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	e212      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003aa2:	4b41      	ldr	r3, [pc, #260]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003aa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d0ef      	beq.n	8003a90 <HAL_RCC_OscConfig+0x3ec>
 8003ab0:	e01b      	b.n	8003aea <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab2:	4b3d      	ldr	r3, [pc, #244]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003ab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ab8:	4a3b      	ldr	r2, [pc, #236]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003aba:	f023 0301 	bic.w	r3, r3, #1
 8003abe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ac2:	f7fc fd85 	bl	80005d0 <HAL_GetTick>
 8003ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ac8:	e008      	b.n	8003adc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003aca:	f7fc fd81 	bl	80005d0 <HAL_GetTick>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	2b02      	cmp	r3, #2
 8003ad6:	d901      	bls.n	8003adc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	e1f5      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003adc:	4b32      	ldr	r3, [pc, #200]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1ef      	bne.n	8003aca <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0304 	and.w	r3, r3, #4
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	f000 80a6 	beq.w	8003c44 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003af8:	2300      	movs	r3, #0
 8003afa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003afc:	4b2a      	ldr	r3, [pc, #168]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003afe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d10d      	bne.n	8003b24 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b08:	4b27      	ldr	r3, [pc, #156]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003b0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b0c:	4a26      	ldr	r2, [pc, #152]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003b0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b12:	6593      	str	r3, [r2, #88]	; 0x58
 8003b14:	4b24      	ldr	r3, [pc, #144]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003b16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b20:	2301      	movs	r3, #1
 8003b22:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b24:	4b21      	ldr	r3, [pc, #132]	; (8003bac <HAL_RCC_OscConfig+0x508>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d118      	bne.n	8003b62 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b30:	4b1e      	ldr	r3, [pc, #120]	; (8003bac <HAL_RCC_OscConfig+0x508>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a1d      	ldr	r2, [pc, #116]	; (8003bac <HAL_RCC_OscConfig+0x508>)
 8003b36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b3a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3c:	f7fc fd48 	bl	80005d0 <HAL_GetTick>
 8003b40:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b42:	e008      	b.n	8003b56 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b44:	f7fc fd44 	bl	80005d0 <HAL_GetTick>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	2b02      	cmp	r3, #2
 8003b50:	d901      	bls.n	8003b56 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003b52:	2303      	movs	r3, #3
 8003b54:	e1b8      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003b56:	4b15      	ldr	r3, [pc, #84]	; (8003bac <HAL_RCC_OscConfig+0x508>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d0f0      	beq.n	8003b44 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d108      	bne.n	8003b7c <HAL_RCC_OscConfig+0x4d8>
 8003b6a:	4b0f      	ldr	r3, [pc, #60]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003b6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b70:	4a0d      	ldr	r2, [pc, #52]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b7a:	e029      	b.n	8003bd0 <HAL_RCC_OscConfig+0x52c>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	2b05      	cmp	r3, #5
 8003b82:	d115      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x50c>
 8003b84:	4b08      	ldr	r3, [pc, #32]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b8a:	4a07      	ldr	r2, [pc, #28]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003b8c:	f043 0304 	orr.w	r3, r3, #4
 8003b90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003b94:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b9a:	4a03      	ldr	r2, [pc, #12]	; (8003ba8 <HAL_RCC_OscConfig+0x504>)
 8003b9c:	f043 0301 	orr.w	r3, r3, #1
 8003ba0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ba4:	e014      	b.n	8003bd0 <HAL_RCC_OscConfig+0x52c>
 8003ba6:	bf00      	nop
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	40007000 	.word	0x40007000
 8003bb0:	4b9d      	ldr	r3, [pc, #628]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb6:	4a9c      	ldr	r2, [pc, #624]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003bb8:	f023 0301 	bic.w	r3, r3, #1
 8003bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003bc0:	4b99      	ldr	r3, [pc, #612]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc6:	4a98      	ldr	r2, [pc, #608]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003bc8:	f023 0304 	bic.w	r3, r3, #4
 8003bcc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d016      	beq.n	8003c06 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd8:	f7fc fcfa 	bl	80005d0 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bde:	e00a      	b.n	8003bf6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be0:	f7fc fcf6 	bl	80005d0 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d901      	bls.n	8003bf6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e168      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003bf6:	4b8c      	ldr	r3, [pc, #560]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d0ed      	beq.n	8003be0 <HAL_RCC_OscConfig+0x53c>
 8003c04:	e015      	b.n	8003c32 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c06:	f7fc fce3 	bl	80005d0 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c0c:	e00a      	b.n	8003c24 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c0e:	f7fc fcdf 	bl	80005d0 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e151      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003c24:	4b80      	ldr	r3, [pc, #512]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003c26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1ed      	bne.n	8003c0e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003c32:	7ffb      	ldrb	r3, [r7, #31]
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d105      	bne.n	8003c44 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c38:	4b7b      	ldr	r3, [pc, #492]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c3c:	4a7a      	ldr	r2, [pc, #488]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c42:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f003 0320 	and.w	r3, r3, #32
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d03c      	beq.n	8003cca <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d01c      	beq.n	8003c92 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003c58:	4b73      	ldr	r3, [pc, #460]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c5e:	4a72      	ldr	r2, [pc, #456]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003c60:	f043 0301 	orr.w	r3, r3, #1
 8003c64:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c68:	f7fc fcb2 	bl	80005d0 <HAL_GetTick>
 8003c6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c6e:	e008      	b.n	8003c82 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003c70:	f7fc fcae 	bl	80005d0 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d901      	bls.n	8003c82 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	e122      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003c82:	4b69      	ldr	r3, [pc, #420]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003c84:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c88:	f003 0302 	and.w	r3, r3, #2
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d0ef      	beq.n	8003c70 <HAL_RCC_OscConfig+0x5cc>
 8003c90:	e01b      	b.n	8003cca <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003c92:	4b65      	ldr	r3, [pc, #404]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003c98:	4a63      	ldr	r2, [pc, #396]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003c9a:	f023 0301 	bic.w	r3, r3, #1
 8003c9e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ca2:	f7fc fc95 	bl	80005d0 <HAL_GetTick>
 8003ca6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003ca8:	e008      	b.n	8003cbc <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003caa:	f7fc fc91 	bl	80005d0 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d901      	bls.n	8003cbc <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e105      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003cbc:	4b5a      	ldr	r3, [pc, #360]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003cbe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d1ef      	bne.n	8003caa <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80f9 	beq.w	8003ec6 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	f040 80cf 	bne.w	8003e7c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003cde:	4b52      	ldr	r3, [pc, #328]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	f003 0203 	and.w	r2, r3, #3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d12c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cfc:	3b01      	subs	r3, #1
 8003cfe:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d123      	bne.n	8003d4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d0e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d11b      	bne.n	8003d4c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d113      	bne.n	8003d4c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d2e:	085b      	lsrs	r3, r3, #1
 8003d30:	3b01      	subs	r3, #1
 8003d32:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d109      	bne.n	8003d4c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003d38:	697b      	ldr	r3, [r7, #20]
 8003d3a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d42:	085b      	lsrs	r3, r3, #1
 8003d44:	3b01      	subs	r3, #1
 8003d46:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d071      	beq.n	8003e30 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	2b0c      	cmp	r3, #12
 8003d50:	d068      	beq.n	8003e24 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003d52:	4b35      	ldr	r3, [pc, #212]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d105      	bne.n	8003d6a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003d5e:	4b32      	ldr	r3, [pc, #200]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d001      	beq.n	8003d6e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e0ac      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003d6e:	4b2e      	ldr	r3, [pc, #184]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4a2d      	ldr	r2, [pc, #180]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003d74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d78:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003d7a:	f7fc fc29 	bl	80005d0 <HAL_GetTick>
 8003d7e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d80:	e008      	b.n	8003d94 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d82:	f7fc fc25 	bl	80005d0 <HAL_GetTick>
 8003d86:	4602      	mov	r2, r0
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	1ad3      	subs	r3, r2, r3
 8003d8c:	2b02      	cmp	r3, #2
 8003d8e:	d901      	bls.n	8003d94 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8003d90:	2303      	movs	r3, #3
 8003d92:	e099      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003d94:	4b24      	ldr	r3, [pc, #144]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d1f0      	bne.n	8003d82 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003da0:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	4b21      	ldr	r3, [pc, #132]	; (8003e2c <HAL_RCC_OscConfig+0x788>)
 8003da6:	4013      	ands	r3, r2
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003db0:	3a01      	subs	r2, #1
 8003db2:	0112      	lsls	r2, r2, #4
 8003db4:	4311      	orrs	r1, r2
 8003db6:	687a      	ldr	r2, [r7, #4]
 8003db8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003dba:	0212      	lsls	r2, r2, #8
 8003dbc:	4311      	orrs	r1, r2
 8003dbe:	687a      	ldr	r2, [r7, #4]
 8003dc0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003dc2:	0852      	lsrs	r2, r2, #1
 8003dc4:	3a01      	subs	r2, #1
 8003dc6:	0552      	lsls	r2, r2, #21
 8003dc8:	4311      	orrs	r1, r2
 8003dca:	687a      	ldr	r2, [r7, #4]
 8003dcc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003dce:	0852      	lsrs	r2, r2, #1
 8003dd0:	3a01      	subs	r2, #1
 8003dd2:	0652      	lsls	r2, r2, #25
 8003dd4:	4311      	orrs	r1, r2
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003dda:	06d2      	lsls	r2, r2, #27
 8003ddc:	430a      	orrs	r2, r1
 8003dde:	4912      	ldr	r1, [pc, #72]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003de0:	4313      	orrs	r3, r2
 8003de2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003de4:	4b10      	ldr	r3, [pc, #64]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a0f      	ldr	r2, [pc, #60]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003dea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003df0:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	4a0c      	ldr	r2, [pc, #48]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003df6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003dfa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003dfc:	f7fc fbe8 	bl	80005d0 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e04:	f7fc fbe4 	bl	80005d0 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e058      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e16:	4b04      	ldr	r3, [pc, #16]	; (8003e28 <HAL_RCC_OscConfig+0x784>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d0f0      	beq.n	8003e04 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e22:	e050      	b.n	8003ec6 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e04f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
 8003e28:	40021000 	.word	0x40021000
 8003e2c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e30:	4b27      	ldr	r3, [pc, #156]	; (8003ed0 <HAL_RCC_OscConfig+0x82c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d144      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003e3c:	4b24      	ldr	r3, [pc, #144]	; (8003ed0 <HAL_RCC_OscConfig+0x82c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a23      	ldr	r2, [pc, #140]	; (8003ed0 <HAL_RCC_OscConfig+0x82c>)
 8003e42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e46:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e48:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <HAL_RCC_OscConfig+0x82c>)
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	4a20      	ldr	r2, [pc, #128]	; (8003ed0 <HAL_RCC_OscConfig+0x82c>)
 8003e4e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e52:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003e54:	f7fc fbbc 	bl	80005d0 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e5c:	f7fc fbb8 	bl	80005d0 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b02      	cmp	r3, #2
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e02c      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6e:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <HAL_RCC_OscConfig+0x82c>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0x7b8>
 8003e7a:	e024      	b.n	8003ec6 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b0c      	cmp	r3, #12
 8003e80:	d01f      	beq.n	8003ec2 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e82:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <HAL_RCC_OscConfig+0x82c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a12      	ldr	r2, [pc, #72]	; (8003ed0 <HAL_RCC_OscConfig+0x82c>)
 8003e88:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e8e:	f7fc fb9f 	bl	80005d0 <HAL_GetTick>
 8003e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e94:	e008      	b.n	8003ea8 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e96:	f7fc fb9b 	bl	80005d0 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	693b      	ldr	r3, [r7, #16]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	2b02      	cmp	r3, #2
 8003ea2:	d901      	bls.n	8003ea8 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	e00f      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea8:	4b09      	ldr	r3, [pc, #36]	; (8003ed0 <HAL_RCC_OscConfig+0x82c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1f0      	bne.n	8003e96 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003eb4:	4b06      	ldr	r3, [pc, #24]	; (8003ed0 <HAL_RCC_OscConfig+0x82c>)
 8003eb6:	68da      	ldr	r2, [r3, #12]
 8003eb8:	4905      	ldr	r1, [pc, #20]	; (8003ed0 <HAL_RCC_OscConfig+0x82c>)
 8003eba:	4b06      	ldr	r3, [pc, #24]	; (8003ed4 <HAL_RCC_OscConfig+0x830>)
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	60cb      	str	r3, [r1, #12]
 8003ec0:	e001      	b.n	8003ec6 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e000      	b.n	8003ec8 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003ec6:	2300      	movs	r3, #0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3720      	adds	r7, #32
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	40021000 	.word	0x40021000
 8003ed4:	feeefffc 	.word	0xfeeefffc

08003ed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b086      	sub	sp, #24
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d101      	bne.n	8003ef0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003eec:	2301      	movs	r3, #1
 8003eee:	e11d      	b.n	800412c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ef0:	4b90      	ldr	r3, [pc, #576]	; (8004134 <HAL_RCC_ClockConfig+0x25c>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f003 030f 	and.w	r3, r3, #15
 8003ef8:	683a      	ldr	r2, [r7, #0]
 8003efa:	429a      	cmp	r2, r3
 8003efc:	d910      	bls.n	8003f20 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003efe:	4b8d      	ldr	r3, [pc, #564]	; (8004134 <HAL_RCC_ClockConfig+0x25c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f023 020f 	bic.w	r2, r3, #15
 8003f06:	498b      	ldr	r1, [pc, #556]	; (8004134 <HAL_RCC_ClockConfig+0x25c>)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f0e:	4b89      	ldr	r3, [pc, #548]	; (8004134 <HAL_RCC_ClockConfig+0x25c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 030f 	and.w	r3, r3, #15
 8003f16:	683a      	ldr	r2, [r7, #0]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d001      	beq.n	8003f20 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	e105      	b.n	800412c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0302 	and.w	r3, r3, #2
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d010      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	689a      	ldr	r2, [r3, #8]
 8003f30:	4b81      	ldr	r3, [pc, #516]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d908      	bls.n	8003f4e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	4b7e      	ldr	r3, [pc, #504]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	497b      	ldr	r1, [pc, #492]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d079      	beq.n	800404e <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b03      	cmp	r3, #3
 8003f60:	d11e      	bne.n	8003fa0 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003f62:	4b75      	ldr	r3, [pc, #468]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d101      	bne.n	8003f72 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e0dc      	b.n	800412c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003f72:	f000 fa09 	bl	8004388 <RCC_GetSysClockFreqFromPLLSource>
 8003f76:	4603      	mov	r3, r0
 8003f78:	4a70      	ldr	r2, [pc, #448]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d946      	bls.n	800400c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003f7e:	4b6e      	ldr	r3, [pc, #440]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d140      	bne.n	800400c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003f8a:	4b6b      	ldr	r3, [pc, #428]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003f8c:	689b      	ldr	r3, [r3, #8]
 8003f8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f92:	4a69      	ldr	r2, [pc, #420]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003f94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	617b      	str	r3, [r7, #20]
 8003f9e:	e035      	b.n	800400c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d107      	bne.n	8003fb8 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fa8:	4b63      	ldr	r3, [pc, #396]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d115      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e0b9      	b.n	800412c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d107      	bne.n	8003fd0 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003fc0:	4b5d      	ldr	r3, [pc, #372]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d109      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e0ad      	b.n	800412c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003fd0:	4b59      	ldr	r3, [pc, #356]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d101      	bne.n	8003fe0 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	e0a5      	b.n	800412c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003fe0:	f000 f8b4 	bl	800414c <HAL_RCC_GetSysClockFreq>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	4a55      	ldr	r2, [pc, #340]	; (800413c <HAL_RCC_ClockConfig+0x264>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d90f      	bls.n	800400c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003fec:	4b52      	ldr	r3, [pc, #328]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d109      	bne.n	800400c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ff8:	4b4f      	ldr	r3, [pc, #316]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004000:	4a4d      	ldr	r2, [pc, #308]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8004002:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004006:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800400c:	4b4a      	ldr	r3, [pc, #296]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f023 0203 	bic.w	r2, r3, #3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	4947      	ldr	r1, [pc, #284]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 800401a:	4313      	orrs	r3, r2
 800401c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800401e:	f7fc fad7 	bl	80005d0 <HAL_GetTick>
 8004022:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004024:	e00a      	b.n	800403c <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004026:	f7fc fad3 	bl	80005d0 <HAL_GetTick>
 800402a:	4602      	mov	r2, r0
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	1ad3      	subs	r3, r2, r3
 8004030:	f241 3288 	movw	r2, #5000	; 0x1388
 8004034:	4293      	cmp	r3, r2
 8004036:	d901      	bls.n	800403c <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e077      	b.n	800412c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800403c:	4b3e      	ldr	r3, [pc, #248]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	f003 020c 	and.w	r2, r3, #12
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	009b      	lsls	r3, r3, #2
 800404a:	429a      	cmp	r2, r3
 800404c:	d1eb      	bne.n	8004026 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	2b80      	cmp	r3, #128	; 0x80
 8004052:	d105      	bne.n	8004060 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004054:	4b38      	ldr	r3, [pc, #224]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	4a37      	ldr	r2, [pc, #220]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 800405a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800405e:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f003 0302 	and.w	r3, r3, #2
 8004068:	2b00      	cmp	r3, #0
 800406a:	d010      	beq.n	800408e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	4b31      	ldr	r3, [pc, #196]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004078:	429a      	cmp	r2, r3
 800407a:	d208      	bcs.n	800408e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800407c:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	492b      	ldr	r1, [pc, #172]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 800408a:	4313      	orrs	r3, r2
 800408c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800408e:	4b29      	ldr	r3, [pc, #164]	; (8004134 <HAL_RCC_ClockConfig+0x25c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d210      	bcs.n	80040be <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800409c:	4b25      	ldr	r3, [pc, #148]	; (8004134 <HAL_RCC_ClockConfig+0x25c>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f023 020f 	bic.w	r2, r3, #15
 80040a4:	4923      	ldr	r1, [pc, #140]	; (8004134 <HAL_RCC_ClockConfig+0x25c>)
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040ac:	4b21      	ldr	r3, [pc, #132]	; (8004134 <HAL_RCC_ClockConfig+0x25c>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f003 030f 	and.w	r3, r3, #15
 80040b4:	683a      	ldr	r2, [r7, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d001      	beq.n	80040be <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e036      	b.n	800412c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0304 	and.w	r3, r3, #4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d008      	beq.n	80040dc <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040ca:	4b1b      	ldr	r3, [pc, #108]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68db      	ldr	r3, [r3, #12]
 80040d6:	4918      	ldr	r1, [pc, #96]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 80040d8:	4313      	orrs	r3, r2
 80040da:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f003 0308 	and.w	r3, r3, #8
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040e8:	4b13      	ldr	r3, [pc, #76]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 80040ea:	689b      	ldr	r3, [r3, #8]
 80040ec:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	00db      	lsls	r3, r3, #3
 80040f6:	4910      	ldr	r1, [pc, #64]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 80040f8:	4313      	orrs	r3, r2
 80040fa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80040fc:	f000 f826 	bl	800414c <HAL_RCC_GetSysClockFreq>
 8004100:	4602      	mov	r2, r0
 8004102:	4b0d      	ldr	r3, [pc, #52]	; (8004138 <HAL_RCC_ClockConfig+0x260>)
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	091b      	lsrs	r3, r3, #4
 8004108:	f003 030f 	and.w	r3, r3, #15
 800410c:	490c      	ldr	r1, [pc, #48]	; (8004140 <HAL_RCC_ClockConfig+0x268>)
 800410e:	5ccb      	ldrb	r3, [r1, r3]
 8004110:	f003 031f 	and.w	r3, r3, #31
 8004114:	fa22 f303 	lsr.w	r3, r2, r3
 8004118:	4a0a      	ldr	r2, [pc, #40]	; (8004144 <HAL_RCC_ClockConfig+0x26c>)
 800411a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <HAL_RCC_ClockConfig+0x270>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	4618      	mov	r0, r3
 8004122:	f7fc fa05 	bl	8000530 <HAL_InitTick>
 8004126:	4603      	mov	r3, r0
 8004128:	73fb      	strb	r3, [r7, #15]

  return status;
 800412a:	7bfb      	ldrb	r3, [r7, #15]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40022000 	.word	0x40022000
 8004138:	40021000 	.word	0x40021000
 800413c:	04c4b400 	.word	0x04c4b400
 8004140:	08008558 	.word	0x08008558
 8004144:	2000003c 	.word	0x2000003c
 8004148:	20000000 	.word	0x20000000

0800414c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800414c:	b480      	push	{r7}
 800414e:	b089      	sub	sp, #36	; 0x24
 8004150:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	2300      	movs	r3, #0
 8004158:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800415a:	4b3e      	ldr	r3, [pc, #248]	; (8004254 <HAL_RCC_GetSysClockFreq+0x108>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004164:	4b3b      	ldr	r3, [pc, #236]	; (8004254 <HAL_RCC_GetSysClockFreq+0x108>)
 8004166:	68db      	ldr	r3, [r3, #12]
 8004168:	f003 0303 	and.w	r3, r3, #3
 800416c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d005      	beq.n	8004180 <HAL_RCC_GetSysClockFreq+0x34>
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	2b0c      	cmp	r3, #12
 8004178:	d121      	bne.n	80041be <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b01      	cmp	r3, #1
 800417e:	d11e      	bne.n	80041be <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004180:	4b34      	ldr	r3, [pc, #208]	; (8004254 <HAL_RCC_GetSysClockFreq+0x108>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f003 0308 	and.w	r3, r3, #8
 8004188:	2b00      	cmp	r3, #0
 800418a:	d107      	bne.n	800419c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800418c:	4b31      	ldr	r3, [pc, #196]	; (8004254 <HAL_RCC_GetSysClockFreq+0x108>)
 800418e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	61fb      	str	r3, [r7, #28]
 800419a:	e005      	b.n	80041a8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800419c:	4b2d      	ldr	r3, [pc, #180]	; (8004254 <HAL_RCC_GetSysClockFreq+0x108>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041a8:	4a2b      	ldr	r2, [pc, #172]	; (8004258 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041aa:	69fb      	ldr	r3, [r7, #28]
 80041ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10d      	bne.n	80041d4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041b8:	69fb      	ldr	r3, [r7, #28]
 80041ba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041bc:	e00a      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d102      	bne.n	80041ca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041c4:	4b25      	ldr	r3, [pc, #148]	; (800425c <HAL_RCC_GetSysClockFreq+0x110>)
 80041c6:	61bb      	str	r3, [r7, #24]
 80041c8:	e004      	b.n	80041d4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	2b08      	cmp	r3, #8
 80041ce:	d101      	bne.n	80041d4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041d0:	4b23      	ldr	r3, [pc, #140]	; (8004260 <HAL_RCC_GetSysClockFreq+0x114>)
 80041d2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041d4:	693b      	ldr	r3, [r7, #16]
 80041d6:	2b0c      	cmp	r3, #12
 80041d8:	d134      	bne.n	8004244 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041da:	4b1e      	ldr	r3, [pc, #120]	; (8004254 <HAL_RCC_GetSysClockFreq+0x108>)
 80041dc:	68db      	ldr	r3, [r3, #12]
 80041de:	f003 0303 	and.w	r3, r3, #3
 80041e2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d003      	beq.n	80041f2 <HAL_RCC_GetSysClockFreq+0xa6>
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	2b03      	cmp	r3, #3
 80041ee:	d003      	beq.n	80041f8 <HAL_RCC_GetSysClockFreq+0xac>
 80041f0:	e005      	b.n	80041fe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041f2:	4b1a      	ldr	r3, [pc, #104]	; (800425c <HAL_RCC_GetSysClockFreq+0x110>)
 80041f4:	617b      	str	r3, [r7, #20]
      break;
 80041f6:	e005      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80041f8:	4b19      	ldr	r3, [pc, #100]	; (8004260 <HAL_RCC_GetSysClockFreq+0x114>)
 80041fa:	617b      	str	r3, [r7, #20]
      break;
 80041fc:	e002      	b.n	8004204 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	617b      	str	r3, [r7, #20]
      break;
 8004202:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004204:	4b13      	ldr	r3, [pc, #76]	; (8004254 <HAL_RCC_GetSysClockFreq+0x108>)
 8004206:	68db      	ldr	r3, [r3, #12]
 8004208:	091b      	lsrs	r3, r3, #4
 800420a:	f003 030f 	and.w	r3, r3, #15
 800420e:	3301      	adds	r3, #1
 8004210:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004212:	4b10      	ldr	r3, [pc, #64]	; (8004254 <HAL_RCC_GetSysClockFreq+0x108>)
 8004214:	68db      	ldr	r3, [r3, #12]
 8004216:	0a1b      	lsrs	r3, r3, #8
 8004218:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800421c:	697a      	ldr	r2, [r7, #20]
 800421e:	fb03 f202 	mul.w	r2, r3, r2
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800422a:	4b0a      	ldr	r3, [pc, #40]	; (8004254 <HAL_RCC_GetSysClockFreq+0x108>)
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	0e5b      	lsrs	r3, r3, #25
 8004230:	f003 0303 	and.w	r3, r3, #3
 8004234:	3301      	adds	r3, #1
 8004236:	005b      	lsls	r3, r3, #1
 8004238:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004242:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004244:	69bb      	ldr	r3, [r7, #24]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3724      	adds	r7, #36	; 0x24
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	40021000 	.word	0x40021000
 8004258:	08008570 	.word	0x08008570
 800425c:	00f42400 	.word	0x00f42400
 8004260:	007a1200 	.word	0x007a1200

08004264 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004268:	4b03      	ldr	r3, [pc, #12]	; (8004278 <HAL_RCC_GetHCLKFreq+0x14>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	2000003c 	.word	0x2000003c

0800427c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004280:	f7ff fff0 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 8004284:	4602      	mov	r2, r0
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	0a1b      	lsrs	r3, r3, #8
 800428c:	f003 0307 	and.w	r3, r3, #7
 8004290:	4904      	ldr	r1, [pc, #16]	; (80042a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004292:	5ccb      	ldrb	r3, [r1, r3]
 8004294:	f003 031f 	and.w	r3, r3, #31
 8004298:	fa22 f303 	lsr.w	r3, r2, r3
}
 800429c:	4618      	mov	r0, r3
 800429e:	bd80      	pop	{r7, pc}
 80042a0:	40021000 	.word	0x40021000
 80042a4:	08008568 	.word	0x08008568

080042a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042ac:	f7ff ffda 	bl	8004264 <HAL_RCC_GetHCLKFreq>
 80042b0:	4602      	mov	r2, r0
 80042b2:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	0adb      	lsrs	r3, r3, #11
 80042b8:	f003 0307 	and.w	r3, r3, #7
 80042bc:	4904      	ldr	r1, [pc, #16]	; (80042d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042be:	5ccb      	ldrb	r3, [r1, r3]
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	bd80      	pop	{r7, pc}
 80042cc:	40021000 	.word	0x40021000
 80042d0:	08008568 	.word	0x08008568

080042d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b086      	sub	sp, #24
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042dc:	2300      	movs	r3, #0
 80042de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042e0:	4b27      	ldr	r3, [pc, #156]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80042e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d003      	beq.n	80042f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042ec:	f7ff f916 	bl	800351c <HAL_PWREx_GetVoltageRange>
 80042f0:	6178      	str	r0, [r7, #20]
 80042f2:	e014      	b.n	800431e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042f4:	4b22      	ldr	r3, [pc, #136]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80042f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042f8:	4a21      	ldr	r2, [pc, #132]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80042fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004300:	4b1f      	ldr	r3, [pc, #124]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004302:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004304:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004308:	60fb      	str	r3, [r7, #12]
 800430a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800430c:	f7ff f906 	bl	800351c <HAL_PWREx_GetVoltageRange>
 8004310:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004312:	4b1b      	ldr	r3, [pc, #108]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004316:	4a1a      	ldr	r2, [pc, #104]	; (8004380 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8004318:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800431c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004324:	d10b      	bne.n	800433e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b80      	cmp	r3, #128	; 0x80
 800432a:	d913      	bls.n	8004354 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2ba0      	cmp	r3, #160	; 0xa0
 8004330:	d902      	bls.n	8004338 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004332:	2302      	movs	r3, #2
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	e00d      	b.n	8004354 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004338:	2301      	movs	r3, #1
 800433a:	613b      	str	r3, [r7, #16]
 800433c:	e00a      	b.n	8004354 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2b7f      	cmp	r3, #127	; 0x7f
 8004342:	d902      	bls.n	800434a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8004344:	2302      	movs	r3, #2
 8004346:	613b      	str	r3, [r7, #16]
 8004348:	e004      	b.n	8004354 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2b70      	cmp	r3, #112	; 0x70
 800434e:	d101      	bne.n	8004354 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004350:	2301      	movs	r3, #1
 8004352:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004354:	4b0b      	ldr	r3, [pc, #44]	; (8004384 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f023 020f 	bic.w	r2, r3, #15
 800435c:	4909      	ldr	r1, [pc, #36]	; (8004384 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	4313      	orrs	r3, r2
 8004362:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004364:	4b07      	ldr	r3, [pc, #28]	; (8004384 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 030f 	and.w	r3, r3, #15
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	429a      	cmp	r2, r3
 8004370:	d001      	beq.n	8004376 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8004376:	2300      	movs	r3, #0
}
 8004378:	4618      	mov	r0, r3
 800437a:	3718      	adds	r7, #24
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}
 8004380:	40021000 	.word	0x40021000
 8004384:	40022000 	.word	0x40022000

08004388 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004388:	b480      	push	{r7}
 800438a:	b087      	sub	sp, #28
 800438c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800438e:	4b2d      	ldr	r3, [pc, #180]	; (8004444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	f003 0303 	and.w	r3, r3, #3
 8004396:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	2b03      	cmp	r3, #3
 800439c:	d00b      	beq.n	80043b6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	2b03      	cmp	r3, #3
 80043a2:	d825      	bhi.n	80043f0 <RCC_GetSysClockFreqFromPLLSource+0x68>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d008      	beq.n	80043bc <RCC_GetSysClockFreqFromPLLSource+0x34>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d11f      	bne.n	80043f0 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 80043b0:	4b25      	ldr	r3, [pc, #148]	; (8004448 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 80043b2:	613b      	str	r3, [r7, #16]
    break;
 80043b4:	e01f      	b.n	80043f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 80043b6:	4b25      	ldr	r3, [pc, #148]	; (800444c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 80043b8:	613b      	str	r3, [r7, #16]
    break;
 80043ba:	e01c      	b.n	80043f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043bc:	4b21      	ldr	r3, [pc, #132]	; (8004444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0308 	and.w	r3, r3, #8
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d107      	bne.n	80043d8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043c8:	4b1e      	ldr	r3, [pc, #120]	; (8004444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80043ce:	0a1b      	lsrs	r3, r3, #8
 80043d0:	f003 030f 	and.w	r3, r3, #15
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e005      	b.n	80043e4 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043d8:	4b1a      	ldr	r3, [pc, #104]	; (8004444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	091b      	lsrs	r3, r3, #4
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 80043e4:	4a1a      	ldr	r2, [pc, #104]	; (8004450 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80043ec:	613b      	str	r3, [r7, #16]
    break;
 80043ee:	e002      	b.n	80043f6 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 80043f0:	2300      	movs	r3, #0
 80043f2:	613b      	str	r3, [r7, #16]
    break;
 80043f4:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80043f6:	4b13      	ldr	r3, [pc, #76]	; (8004444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	091b      	lsrs	r3, r3, #4
 80043fc:	f003 030f 	and.w	r3, r3, #15
 8004400:	3301      	adds	r3, #1
 8004402:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004404:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8004406:	68db      	ldr	r3, [r3, #12]
 8004408:	0a1b      	lsrs	r3, r3, #8
 800440a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	fb03 f202 	mul.w	r2, r3, r2
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	fbb2 f3f3 	udiv	r3, r2, r3
 800441a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800441c:	4b09      	ldr	r3, [pc, #36]	; (8004444 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800441e:	68db      	ldr	r3, [r3, #12]
 8004420:	0e5b      	lsrs	r3, r3, #25
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	3301      	adds	r3, #1
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8004436:	683b      	ldr	r3, [r7, #0]
}
 8004438:	4618      	mov	r0, r3
 800443a:	371c      	adds	r7, #28
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr
 8004444:	40021000 	.word	0x40021000
 8004448:	00f42400 	.word	0x00f42400
 800444c:	007a1200 	.word	0x007a1200
 8004450:	08008570 	.word	0x08008570

08004454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800445c:	2300      	movs	r3, #0
 800445e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004460:	2300      	movs	r3, #0
 8004462:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800446c:	2b00      	cmp	r3, #0
 800446e:	d040      	beq.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004474:	2b80      	cmp	r3, #128	; 0x80
 8004476:	d02a      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004478:	2b80      	cmp	r3, #128	; 0x80
 800447a:	d825      	bhi.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800447c:	2b60      	cmp	r3, #96	; 0x60
 800447e:	d026      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8004480:	2b60      	cmp	r3, #96	; 0x60
 8004482:	d821      	bhi.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8004484:	2b40      	cmp	r3, #64	; 0x40
 8004486:	d006      	beq.n	8004496 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8004488:	2b40      	cmp	r3, #64	; 0x40
 800448a:	d81d      	bhi.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800448c:	2b00      	cmp	r3, #0
 800448e:	d009      	beq.n	80044a4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8004490:	2b20      	cmp	r3, #32
 8004492:	d010      	beq.n	80044b6 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8004494:	e018      	b.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004496:	4b89      	ldr	r3, [pc, #548]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004498:	68db      	ldr	r3, [r3, #12]
 800449a:	4a88      	ldr	r2, [pc, #544]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800449c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a0:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044a2:	e015      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	3304      	adds	r3, #4
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fb02 	bl	8004ab4 <RCCEx_PLLSAI1_Config>
 80044b0:	4603      	mov	r3, r0
 80044b2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044b4:	e00c      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3320      	adds	r3, #32
 80044ba:	2100      	movs	r1, #0
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fbed 	bl	8004c9c <RCCEx_PLLSAI2_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80044c6:	e003      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	74fb      	strb	r3, [r7, #19]
      break;
 80044cc:	e000      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 80044ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044d0:	7cfb      	ldrb	r3, [r7, #19]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10b      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80044d6:	4b79      	ldr	r3, [pc, #484]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044d8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80044dc:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80044e4:	4975      	ldr	r1, [pc, #468]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80044ec:	e001      	b.n	80044f2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044ee:	7cfb      	ldrb	r3, [r7, #19]
 80044f0:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d047      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004502:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004506:	d030      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004508:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800450c:	d82a      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800450e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004512:	d02a      	beq.n	800456a <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004514:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004518:	d824      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800451a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800451e:	d008      	beq.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004520:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004524:	d81e      	bhi.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004526:	2b00      	cmp	r3, #0
 8004528:	d00a      	beq.n	8004540 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800452a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800452e:	d010      	beq.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004530:	e018      	b.n	8004564 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004532:	4b62      	ldr	r3, [pc, #392]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004534:	68db      	ldr	r3, [r3, #12]
 8004536:	4a61      	ldr	r2, [pc, #388]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800453c:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800453e:	e015      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	3304      	adds	r3, #4
 8004544:	2100      	movs	r1, #0
 8004546:	4618      	mov	r0, r3
 8004548:	f000 fab4 	bl	8004ab4 <RCCEx_PLLSAI1_Config>
 800454c:	4603      	mov	r3, r0
 800454e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004550:	e00c      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	3320      	adds	r3, #32
 8004556:	2100      	movs	r1, #0
 8004558:	4618      	mov	r0, r3
 800455a:	f000 fb9f 	bl	8004c9c <RCCEx_PLLSAI2_Config>
 800455e:	4603      	mov	r3, r0
 8004560:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004562:	e003      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	74fb      	strb	r3, [r7, #19]
      break;
 8004568:	e000      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 800456a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800456c:	7cfb      	ldrb	r3, [r7, #19]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d10b      	bne.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004572:	4b52      	ldr	r3, [pc, #328]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004578:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004580:	494e      	ldr	r1, [pc, #312]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004582:	4313      	orrs	r3, r2
 8004584:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004588:	e001      	b.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800458a:	7cfb      	ldrb	r3, [r7, #19]
 800458c:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 809f 	beq.w	80046da <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800459c:	2300      	movs	r3, #0
 800459e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80045a0:	4b46      	ldr	r3, [pc, #280]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80045b0:	2300      	movs	r3, #0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00d      	beq.n	80045d2 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80045b6:	4b41      	ldr	r3, [pc, #260]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ba:	4a40      	ldr	r2, [pc, #256]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045c0:	6593      	str	r3, [r2, #88]	; 0x58
 80045c2:	4b3e      	ldr	r3, [pc, #248]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80045c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045ca:	60bb      	str	r3, [r7, #8]
 80045cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045ce:	2301      	movs	r3, #1
 80045d0:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045d2:	4b3b      	ldr	r3, [pc, #236]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	4a3a      	ldr	r2, [pc, #232]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045dc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045de:	f7fb fff7 	bl	80005d0 <HAL_GetTick>
 80045e2:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045e4:	e009      	b.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045e6:	f7fb fff3 	bl	80005d0 <HAL_GetTick>
 80045ea:	4602      	mov	r2, r0
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	1ad3      	subs	r3, r2, r3
 80045f0:	2b02      	cmp	r3, #2
 80045f2:	d902      	bls.n	80045fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 80045f4:	2303      	movs	r3, #3
 80045f6:	74fb      	strb	r3, [r7, #19]
        break;
 80045f8:	e005      	b.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80045fa:	4b31      	ldr	r3, [pc, #196]	; (80046c0 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0ef      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8004606:	7cfb      	ldrb	r3, [r7, #19]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d15b      	bne.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800460c:	4b2b      	ldr	r3, [pc, #172]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004612:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004616:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d01f      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	429a      	cmp	r2, r3
 8004628:	d019      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800462a:	4b24      	ldr	r3, [pc, #144]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800462c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004630:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004634:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004636:	4b21      	ldr	r3, [pc, #132]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800463c:	4a1f      	ldr	r2, [pc, #124]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800463e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004646:	4b1d      	ldr	r3, [pc, #116]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004648:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800464c:	4a1b      	ldr	r2, [pc, #108]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800464e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004652:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004656:	4a19      	ldr	r2, [pc, #100]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f003 0301 	and.w	r3, r3, #1
 8004664:	2b00      	cmp	r3, #0
 8004666:	d016      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004668:	f7fb ffb2 	bl	80005d0 <HAL_GetTick>
 800466c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800466e:	e00b      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fb ffae 	bl	80005d0 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	; 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d902      	bls.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	74fb      	strb	r3, [r7, #19]
            break;
 8004686:	e006      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004688:	4b0c      	ldr	r3, [pc, #48]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800468a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800468e:	f003 0302 	and.w	r3, r3, #2
 8004692:	2b00      	cmp	r3, #0
 8004694:	d0ec      	beq.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8004696:	7cfb      	ldrb	r3, [r7, #19]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10c      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800469c:	4b07      	ldr	r3, [pc, #28]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800469e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ac:	4903      	ldr	r1, [pc, #12]	; (80046bc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80046b4:	e008      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046b6:	7cfb      	ldrb	r3, [r7, #19]
 80046b8:	74bb      	strb	r3, [r7, #18]
 80046ba:	e005      	b.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x274>
 80046bc:	40021000 	.word	0x40021000
 80046c0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c4:	7cfb      	ldrb	r3, [r7, #19]
 80046c6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046c8:	7c7b      	ldrb	r3, [r7, #17]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d105      	bne.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ce:	4ba0      	ldr	r3, [pc, #640]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046d2:	4a9f      	ldr	r2, [pc, #636]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046d8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80046e6:	4b9a      	ldr	r3, [pc, #616]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046ec:	f023 0203 	bic.w	r2, r3, #3
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046f4:	4996      	ldr	r1, [pc, #600]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f003 0302 	and.w	r3, r3, #2
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004708:	4b91      	ldr	r3, [pc, #580]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800470a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800470e:	f023 020c 	bic.w	r2, r3, #12
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004716:	498e      	ldr	r1, [pc, #568]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0304 	and.w	r3, r3, #4
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800472a:	4b89      	ldr	r3, [pc, #548]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800472c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004730:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004738:	4985      	ldr	r1, [pc, #532]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0308 	and.w	r3, r3, #8
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800474c:	4b80      	ldr	r3, [pc, #512]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800474e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004752:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800475a:	497d      	ldr	r1, [pc, #500]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0310 	and.w	r3, r3, #16
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00a      	beq.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800476e:	4b78      	ldr	r3, [pc, #480]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004770:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004774:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800477c:	4974      	ldr	r1, [pc, #464]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0320 	and.w	r3, r3, #32
 800478c:	2b00      	cmp	r3, #0
 800478e:	d00a      	beq.n	80047a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004790:	4b6f      	ldr	r3, [pc, #444]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004796:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479e:	496c      	ldr	r1, [pc, #432]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047a0:	4313      	orrs	r3, r2
 80047a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00a      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047b2:	4b67      	ldr	r3, [pc, #412]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047c0:	4963      	ldr	r1, [pc, #396]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047c2:	4313      	orrs	r3, r2
 80047c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d00a      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80047d4:	4b5e      	ldr	r3, [pc, #376]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047da:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047e2:	495b      	ldr	r1, [pc, #364]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047e4:	4313      	orrs	r3, r2
 80047e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d00a      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80047f6:	4b56      	ldr	r3, [pc, #344]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80047f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004804:	4952      	ldr	r1, [pc, #328]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00a      	beq.n	800482e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004818:	4b4d      	ldr	r3, [pc, #308]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800481a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800481e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004826:	494a      	ldr	r1, [pc, #296]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004828:	4313      	orrs	r3, r2
 800482a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800483a:	4b45      	ldr	r3, [pc, #276]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800483c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004840:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004848:	4941      	ldr	r1, [pc, #260]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800484a:	4313      	orrs	r3, r2
 800484c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00a      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800485c:	4b3c      	ldr	r3, [pc, #240]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800485e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004862:	f023 0203 	bic.w	r2, r3, #3
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800486a:	4939      	ldr	r1, [pc, #228]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800486c:	4313      	orrs	r3, r2
 800486e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d028      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800487e:	4b34      	ldr	r3, [pc, #208]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004880:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004884:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488c:	4930      	ldr	r1, [pc, #192]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800488e:	4313      	orrs	r3, r2
 8004890:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004898:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800489c:	d106      	bne.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800489e:	4b2c      	ldr	r3, [pc, #176]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	4a2b      	ldr	r2, [pc, #172]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80048a8:	60d3      	str	r3, [r2, #12]
 80048aa:	e011      	b.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80048b4:	d10c      	bne.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	3304      	adds	r3, #4
 80048ba:	2101      	movs	r1, #1
 80048bc:	4618      	mov	r0, r3
 80048be:	f000 f8f9 	bl	8004ab4 <RCCEx_PLLSAI1_Config>
 80048c2:	4603      	mov	r3, r0
 80048c4:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80048c6:	7cfb      	ldrb	r3, [r7, #19]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d001      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 80048cc:	7cfb      	ldrb	r3, [r7, #19]
 80048ce:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d04d      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048e4:	d108      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 80048e6:	4b1a      	ldr	r3, [pc, #104]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048ec:	4a18      	ldr	r2, [pc, #96]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80048f6:	e012      	b.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 80048f8:	4b15      	ldr	r3, [pc, #84]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80048fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80048fe:	4a14      	ldr	r2, [pc, #80]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004900:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004904:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004908:	4b11      	ldr	r3, [pc, #68]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800490a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800490e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004916:	490e      	ldr	r1, [pc, #56]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004918:	4313      	orrs	r3, r2
 800491a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004922:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004926:	d106      	bne.n	8004936 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004928:	4b09      	ldr	r3, [pc, #36]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	4a08      	ldr	r2, [pc, #32]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800492e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004932:	60d3      	str	r3, [r2, #12]
 8004934:	e020      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800493a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800493e:	d109      	bne.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004940:	4b03      	ldr	r3, [pc, #12]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	4a02      	ldr	r2, [pc, #8]	; (8004950 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004946:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800494a:	60d3      	str	r3, [r2, #12]
 800494c:	e014      	b.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800494e:	bf00      	nop
 8004950:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004958:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800495c:	d10c      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	3304      	adds	r3, #4
 8004962:	2101      	movs	r1, #1
 8004964:	4618      	mov	r0, r3
 8004966:	f000 f8a5 	bl	8004ab4 <RCCEx_PLLSAI1_Config>
 800496a:	4603      	mov	r3, r0
 800496c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800496e:	7cfb      	ldrb	r3, [r7, #19]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d001      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8004974:	7cfb      	ldrb	r3, [r7, #19]
 8004976:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d028      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004984:	4b4a      	ldr	r3, [pc, #296]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004992:	4947      	ldr	r1, [pc, #284]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800499e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049a2:	d106      	bne.n	80049b2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049a4:	4b42      	ldr	r3, [pc, #264]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4a41      	ldr	r2, [pc, #260]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ae:	60d3      	str	r3, [r2, #12]
 80049b0:	e011      	b.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80049b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80049ba:	d10c      	bne.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3304      	adds	r3, #4
 80049c0:	2101      	movs	r1, #1
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 f876 	bl	8004ab4 <RCCEx_PLLSAI1_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80049cc:	7cfb      	ldrb	r3, [r7, #19]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 80049d2:	7cfb      	ldrb	r3, [r7, #19]
 80049d4:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d01e      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80049e2:	4b33      	ldr	r3, [pc, #204]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049e8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049f2:	492f      	ldr	r1, [pc, #188]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80049f4:	4313      	orrs	r3, r2
 80049f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a00:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a04:	d10c      	bne.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	3304      	adds	r3, #4
 8004a0a:	2102      	movs	r1, #2
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	f000 f851 	bl	8004ab4 <RCCEx_PLLSAI1_Config>
 8004a12:	4603      	mov	r3, r0
 8004a14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a16:	7cfb      	ldrb	r3, [r7, #19]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004a1c:	7cfb      	ldrb	r3, [r7, #19]
 8004a1e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00b      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a2c:	4b20      	ldr	r3, [pc, #128]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a2e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a32:	f023 0204 	bic.w	r2, r3, #4
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004a3c:	491c      	ldr	r1, [pc, #112]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a3e:	4313      	orrs	r3, r2
 8004a40:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00b      	beq.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a50:	4b17      	ldr	r3, [pc, #92]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a52:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a56:	f023 0218 	bic.w	r2, r3, #24
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a60:	4913      	ldr	r1, [pc, #76]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d017      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8004a74:	4b0e      	ldr	r3, [pc, #56]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a76:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a7a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a84:	490a      	ldr	r1, [pc, #40]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a86:	4313      	orrs	r3, r2
 8004a88:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a92:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a96:	d105      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004a9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aa2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004aa4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000

08004ab4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004ac2:	4b72      	ldr	r3, [pc, #456]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	f003 0303 	and.w	r3, r3, #3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00e      	beq.n	8004aec <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004ace:	4b6f      	ldr	r3, [pc, #444]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004ad0:	68db      	ldr	r3, [r3, #12]
 8004ad2:	f003 0203 	and.w	r2, r3, #3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d103      	bne.n	8004ae6 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
       ||
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d142      	bne.n	8004b6c <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	73fb      	strb	r3, [r7, #15]
 8004aea:	e03f      	b.n	8004b6c <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b03      	cmp	r3, #3
 8004af2:	d018      	beq.n	8004b26 <RCCEx_PLLSAI1_Config+0x72>
 8004af4:	2b03      	cmp	r3, #3
 8004af6:	d825      	bhi.n	8004b44 <RCCEx_PLLSAI1_Config+0x90>
 8004af8:	2b01      	cmp	r3, #1
 8004afa:	d002      	beq.n	8004b02 <RCCEx_PLLSAI1_Config+0x4e>
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d009      	beq.n	8004b14 <RCCEx_PLLSAI1_Config+0x60>
 8004b00:	e020      	b.n	8004b44 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004b02:	4b62      	ldr	r3, [pc, #392]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f003 0302 	and.w	r3, r3, #2
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d11d      	bne.n	8004b4a <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b12:	e01a      	b.n	8004b4a <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004b14:	4b5d      	ldr	r3, [pc, #372]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d116      	bne.n	8004b4e <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b24:	e013      	b.n	8004b4e <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b26:	4b59      	ldr	r3, [pc, #356]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d10f      	bne.n	8004b52 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b32:	4b56      	ldr	r3, [pc, #344]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d109      	bne.n	8004b52 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004b3e:	2301      	movs	r3, #1
 8004b40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b42:	e006      	b.n	8004b52 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	73fb      	strb	r3, [r7, #15]
      break;
 8004b48:	e004      	b.n	8004b54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004b4a:	bf00      	nop
 8004b4c:	e002      	b.n	8004b54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004b4e:	bf00      	nop
 8004b50:	e000      	b.n	8004b54 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8004b52:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b54:	7bfb      	ldrb	r3, [r7, #15]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d108      	bne.n	8004b6c <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8004b5a:	4b4c      	ldr	r3, [pc, #304]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f023 0203 	bic.w	r2, r3, #3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4949      	ldr	r1, [pc, #292]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004b6c:	7bfb      	ldrb	r3, [r7, #15]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	f040 8086 	bne.w	8004c80 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004b74:	4b45      	ldr	r3, [pc, #276]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a44      	ldr	r2, [pc, #272]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b7a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004b7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b80:	f7fb fd26 	bl	80005d0 <HAL_GetTick>
 8004b84:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b86:	e009      	b.n	8004b9c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004b88:	f7fb fd22 	bl	80005d0 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b02      	cmp	r3, #2
 8004b94:	d902      	bls.n	8004b9c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	73fb      	strb	r3, [r7, #15]
        break;
 8004b9a:	e005      	b.n	8004ba8 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004b9c:	4b3b      	ldr	r3, [pc, #236]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1ef      	bne.n	8004b88 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004ba8:	7bfb      	ldrb	r3, [r7, #15]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d168      	bne.n	8004c80 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004bae:	683b      	ldr	r3, [r7, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d113      	bne.n	8004bdc <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004bb4:	4b35      	ldr	r3, [pc, #212]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bb6:	691a      	ldr	r2, [r3, #16]
 8004bb8:	4b35      	ldr	r3, [pc, #212]	; (8004c90 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004bba:	4013      	ands	r3, r2
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6892      	ldr	r2, [r2, #8]
 8004bc0:	0211      	lsls	r1, r2, #8
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	68d2      	ldr	r2, [r2, #12]
 8004bc6:	06d2      	lsls	r2, r2, #27
 8004bc8:	4311      	orrs	r1, r2
 8004bca:	687a      	ldr	r2, [r7, #4]
 8004bcc:	6852      	ldr	r2, [r2, #4]
 8004bce:	3a01      	subs	r2, #1
 8004bd0:	0112      	lsls	r2, r2, #4
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	492d      	ldr	r1, [pc, #180]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	610b      	str	r3, [r1, #16]
 8004bda:	e02d      	b.n	8004c38 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d115      	bne.n	8004c0e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004be2:	4b2a      	ldr	r3, [pc, #168]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004be4:	691a      	ldr	r2, [r3, #16]
 8004be6:	4b2b      	ldr	r3, [pc, #172]	; (8004c94 <RCCEx_PLLSAI1_Config+0x1e0>)
 8004be8:	4013      	ands	r3, r2
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	6892      	ldr	r2, [r2, #8]
 8004bee:	0211      	lsls	r1, r2, #8
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	6912      	ldr	r2, [r2, #16]
 8004bf4:	0852      	lsrs	r2, r2, #1
 8004bf6:	3a01      	subs	r2, #1
 8004bf8:	0552      	lsls	r2, r2, #21
 8004bfa:	4311      	orrs	r1, r2
 8004bfc:	687a      	ldr	r2, [r7, #4]
 8004bfe:	6852      	ldr	r2, [r2, #4]
 8004c00:	3a01      	subs	r2, #1
 8004c02:	0112      	lsls	r2, r2, #4
 8004c04:	430a      	orrs	r2, r1
 8004c06:	4921      	ldr	r1, [pc, #132]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c08:	4313      	orrs	r3, r2
 8004c0a:	610b      	str	r3, [r1, #16]
 8004c0c:	e014      	b.n	8004c38 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004c0e:	4b1f      	ldr	r3, [pc, #124]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c10:	691a      	ldr	r2, [r3, #16]
 8004c12:	4b21      	ldr	r3, [pc, #132]	; (8004c98 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c14:	4013      	ands	r3, r2
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6892      	ldr	r2, [r2, #8]
 8004c1a:	0211      	lsls	r1, r2, #8
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6952      	ldr	r2, [r2, #20]
 8004c20:	0852      	lsrs	r2, r2, #1
 8004c22:	3a01      	subs	r2, #1
 8004c24:	0652      	lsls	r2, r2, #25
 8004c26:	4311      	orrs	r1, r2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6852      	ldr	r2, [r2, #4]
 8004c2c:	3a01      	subs	r2, #1
 8004c2e:	0112      	lsls	r2, r2, #4
 8004c30:	430a      	orrs	r2, r1
 8004c32:	4916      	ldr	r1, [pc, #88]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c34:	4313      	orrs	r3, r2
 8004c36:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004c38:	4b14      	ldr	r3, [pc, #80]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a13      	ldr	r2, [pc, #76]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c3e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c42:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c44:	f7fb fcc4 	bl	80005d0 <HAL_GetTick>
 8004c48:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c4a:	e009      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004c4c:	f7fb fcc0 	bl	80005d0 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d902      	bls.n	8004c60 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	73fb      	strb	r3, [r7, #15]
          break;
 8004c5e:	e005      	b.n	8004c6c <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004c60:	4b0a      	ldr	r3, [pc, #40]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d0ef      	beq.n	8004c4c <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004c6c:	7bfb      	ldrb	r3, [r7, #15]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d106      	bne.n	8004c80 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004c72:	4b06      	ldr	r3, [pc, #24]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c74:	691a      	ldr	r2, [r3, #16]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	699b      	ldr	r3, [r3, #24]
 8004c7a:	4904      	ldr	r1, [pc, #16]	; (8004c8c <RCCEx_PLLSAI1_Config+0x1d8>)
 8004c7c:	4313      	orrs	r3, r2
 8004c7e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c82:	4618      	mov	r0, r3
 8004c84:	3710      	adds	r7, #16
 8004c86:	46bd      	mov	sp, r7
 8004c88:	bd80      	pop	{r7, pc}
 8004c8a:	bf00      	nop
 8004c8c:	40021000 	.word	0x40021000
 8004c90:	07ff800f 	.word	0x07ff800f
 8004c94:	ff9f800f 	.word	0xff9f800f
 8004c98:	f9ff800f 	.word	0xf9ff800f

08004c9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004caa:	4b72      	ldr	r3, [pc, #456]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cac:	68db      	ldr	r3, [r3, #12]
 8004cae:	f003 0303 	and.w	r3, r3, #3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00e      	beq.n	8004cd4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004cb6:	4b6f      	ldr	r3, [pc, #444]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	f003 0203 	and.w	r2, r3, #3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	429a      	cmp	r2, r3
 8004cc4:	d103      	bne.n	8004cce <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
       ||
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d142      	bne.n	8004d54 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
 8004cd2:	e03f      	b.n	8004d54 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	2b03      	cmp	r3, #3
 8004cda:	d018      	beq.n	8004d0e <RCCEx_PLLSAI2_Config+0x72>
 8004cdc:	2b03      	cmp	r3, #3
 8004cde:	d825      	bhi.n	8004d2c <RCCEx_PLLSAI2_Config+0x90>
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d002      	beq.n	8004cea <RCCEx_PLLSAI2_Config+0x4e>
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d009      	beq.n	8004cfc <RCCEx_PLLSAI2_Config+0x60>
 8004ce8:	e020      	b.n	8004d2c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004cea:	4b62      	ldr	r3, [pc, #392]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0302 	and.w	r3, r3, #2
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d11d      	bne.n	8004d32 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cfa:	e01a      	b.n	8004d32 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004cfc:	4b5d      	ldr	r3, [pc, #372]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d116      	bne.n	8004d36 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d0c:	e013      	b.n	8004d36 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004d0e:	4b59      	ldr	r3, [pc, #356]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d10f      	bne.n	8004d3a <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004d1a:	4b56      	ldr	r3, [pc, #344]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d109      	bne.n	8004d3a <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8004d26:	2301      	movs	r3, #1
 8004d28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004d2a:	e006      	b.n	8004d3a <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d30:	e004      	b.n	8004d3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d32:	bf00      	nop
 8004d34:	e002      	b.n	8004d3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d36:	bf00      	nop
 8004d38:	e000      	b.n	8004d3c <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004d3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8004d3c:	7bfb      	ldrb	r3, [r7, #15]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d108      	bne.n	8004d54 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8004d42:	4b4c      	ldr	r3, [pc, #304]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d44:	68db      	ldr	r3, [r3, #12]
 8004d46:	f023 0203 	bic.w	r2, r3, #3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4949      	ldr	r1, [pc, #292]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8004d54:	7bfb      	ldrb	r3, [r7, #15]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f040 8086 	bne.w	8004e68 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004d5c:	4b45      	ldr	r3, [pc, #276]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	4a44      	ldr	r2, [pc, #272]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d68:	f7fb fc32 	bl	80005d0 <HAL_GetTick>
 8004d6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d6e:	e009      	b.n	8004d84 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004d70:	f7fb fc2e 	bl	80005d0 <HAL_GetTick>
 8004d74:	4602      	mov	r2, r0
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	2b02      	cmp	r3, #2
 8004d7c:	d902      	bls.n	8004d84 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8004d7e:	2303      	movs	r3, #3
 8004d80:	73fb      	strb	r3, [r7, #15]
        break;
 8004d82:	e005      	b.n	8004d90 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004d84:	4b3b      	ldr	r3, [pc, #236]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d1ef      	bne.n	8004d70 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d168      	bne.n	8004e68 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d113      	bne.n	8004dc4 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004d9c:	4b35      	ldr	r3, [pc, #212]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004d9e:	695a      	ldr	r2, [r3, #20]
 8004da0:	4b35      	ldr	r3, [pc, #212]	; (8004e78 <RCCEx_PLLSAI2_Config+0x1dc>)
 8004da2:	4013      	ands	r3, r2
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	6892      	ldr	r2, [r2, #8]
 8004da8:	0211      	lsls	r1, r2, #8
 8004daa:	687a      	ldr	r2, [r7, #4]
 8004dac:	68d2      	ldr	r2, [r2, #12]
 8004dae:	06d2      	lsls	r2, r2, #27
 8004db0:	4311      	orrs	r1, r2
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	6852      	ldr	r2, [r2, #4]
 8004db6:	3a01      	subs	r2, #1
 8004db8:	0112      	lsls	r2, r2, #4
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	492d      	ldr	r1, [pc, #180]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	614b      	str	r3, [r1, #20]
 8004dc2:	e02d      	b.n	8004e20 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d115      	bne.n	8004df6 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004dca:	4b2a      	ldr	r3, [pc, #168]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	4b2b      	ldr	r3, [pc, #172]	; (8004e7c <RCCEx_PLLSAI2_Config+0x1e0>)
 8004dd0:	4013      	ands	r3, r2
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6892      	ldr	r2, [r2, #8]
 8004dd6:	0211      	lsls	r1, r2, #8
 8004dd8:	687a      	ldr	r2, [r7, #4]
 8004dda:	6912      	ldr	r2, [r2, #16]
 8004ddc:	0852      	lsrs	r2, r2, #1
 8004dde:	3a01      	subs	r2, #1
 8004de0:	0552      	lsls	r2, r2, #21
 8004de2:	4311      	orrs	r1, r2
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6852      	ldr	r2, [r2, #4]
 8004de8:	3a01      	subs	r2, #1
 8004dea:	0112      	lsls	r2, r2, #4
 8004dec:	430a      	orrs	r2, r1
 8004dee:	4921      	ldr	r1, [pc, #132]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004df0:	4313      	orrs	r3, r2
 8004df2:	614b      	str	r3, [r1, #20]
 8004df4:	e014      	b.n	8004e20 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004df6:	4b1f      	ldr	r3, [pc, #124]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004df8:	695a      	ldr	r2, [r3, #20]
 8004dfa:	4b21      	ldr	r3, [pc, #132]	; (8004e80 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	6892      	ldr	r2, [r2, #8]
 8004e02:	0211      	lsls	r1, r2, #8
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	6952      	ldr	r2, [r2, #20]
 8004e08:	0852      	lsrs	r2, r2, #1
 8004e0a:	3a01      	subs	r2, #1
 8004e0c:	0652      	lsls	r2, r2, #25
 8004e0e:	4311      	orrs	r1, r2
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6852      	ldr	r2, [r2, #4]
 8004e14:	3a01      	subs	r2, #1
 8004e16:	0112      	lsls	r2, r2, #4
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	4916      	ldr	r1, [pc, #88]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004e20:	4b14      	ldr	r3, [pc, #80]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	4a13      	ldr	r2, [pc, #76]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e2a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e2c:	f7fb fbd0 	bl	80005d0 <HAL_GetTick>
 8004e30:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e32:	e009      	b.n	8004e48 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e34:	f7fb fbcc 	bl	80005d0 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d902      	bls.n	8004e48 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	73fb      	strb	r3, [r7, #15]
          break;
 8004e46:	e005      	b.n	8004e54 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004e48:	4b0a      	ldr	r3, [pc, #40]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0ef      	beq.n	8004e34 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8004e54:	7bfb      	ldrb	r3, [r7, #15]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d106      	bne.n	8004e68 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004e5a:	4b06      	ldr	r3, [pc, #24]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e5c:	695a      	ldr	r2, [r3, #20]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	4904      	ldr	r1, [pc, #16]	; (8004e74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8004e64:	4313      	orrs	r3, r2
 8004e66:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3710      	adds	r7, #16
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	40021000 	.word	0x40021000
 8004e78:	07ff800f 	.word	0x07ff800f
 8004e7c:	ff9f800f 	.word	0xff9f800f
 8004e80:	f9ff800f 	.word	0xf9ff800f

08004e84 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b082      	sub	sp, #8
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e049      	b.n	8004f2a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d106      	bne.n	8004eb0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f003 f9e8 	bl	8008280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	3304      	adds	r3, #4
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	f000 fac0 	bl	8005448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f28:	2300      	movs	r3, #0
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3708      	adds	r7, #8
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}
	...

08004f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b085      	sub	sp, #20
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	2b01      	cmp	r3, #1
 8004f46:	d001      	beq.n	8004f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e04f      	b.n	8004fec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2202      	movs	r2, #2
 8004f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	68da      	ldr	r2, [r3, #12]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f042 0201 	orr.w	r2, r2, #1
 8004f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a23      	ldr	r2, [pc, #140]	; (8004ff8 <HAL_TIM_Base_Start_IT+0xc4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d01d      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0x76>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f76:	d018      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0x76>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a1f      	ldr	r2, [pc, #124]	; (8004ffc <HAL_TIM_Base_Start_IT+0xc8>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d013      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0x76>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a1e      	ldr	r2, [pc, #120]	; (8005000 <HAL_TIM_Base_Start_IT+0xcc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00e      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0x76>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a1c      	ldr	r2, [pc, #112]	; (8005004 <HAL_TIM_Base_Start_IT+0xd0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d009      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0x76>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1b      	ldr	r2, [pc, #108]	; (8005008 <HAL_TIM_Base_Start_IT+0xd4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d004      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0x76>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a19      	ldr	r2, [pc, #100]	; (800500c <HAL_TIM_Base_Start_IT+0xd8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d115      	bne.n	8004fd6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	4b17      	ldr	r3, [pc, #92]	; (8005010 <HAL_TIM_Base_Start_IT+0xdc>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b06      	cmp	r3, #6
 8004fba:	d015      	beq.n	8004fe8 <HAL_TIM_Base_Start_IT+0xb4>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc2:	d011      	beq.n	8004fe8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd4:	e008      	b.n	8004fe8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	e000      	b.n	8004fea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3714      	adds	r7, #20
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr
 8004ff8:	40012c00 	.word	0x40012c00
 8004ffc:	40000400 	.word	0x40000400
 8005000:	40000800 	.word	0x40000800
 8005004:	40000c00 	.word	0x40000c00
 8005008:	40013400 	.word	0x40013400
 800500c:	40014000 	.word	0x40014000
 8005010:	00010007 	.word	0x00010007

08005014 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	691b      	ldr	r3, [r3, #16]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b02      	cmp	r3, #2
 8005028:	d122      	bne.n	8005070 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b02      	cmp	r3, #2
 8005036:	d11b      	bne.n	8005070 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f06f 0202 	mvn.w	r2, #2
 8005040:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2201      	movs	r2, #1
 8005046:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	2b00      	cmp	r3, #0
 8005054:	d003      	beq.n	800505e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f9d8 	bl	800540c <HAL_TIM_IC_CaptureCallback>
 800505c:	e005      	b.n	800506a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f9ca 	bl	80053f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f000 f9db 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	f003 0304 	and.w	r3, r3, #4
 800507a:	2b04      	cmp	r3, #4
 800507c:	d122      	bne.n	80050c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	68db      	ldr	r3, [r3, #12]
 8005084:	f003 0304 	and.w	r3, r3, #4
 8005088:	2b04      	cmp	r3, #4
 800508a:	d11b      	bne.n	80050c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f06f 0204 	mvn.w	r2, #4
 8005094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2202      	movs	r2, #2
 800509a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d003      	beq.n	80050b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050aa:	6878      	ldr	r0, [r7, #4]
 80050ac:	f000 f9ae 	bl	800540c <HAL_TIM_IC_CaptureCallback>
 80050b0:	e005      	b.n	80050be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f9a0 	bl	80053f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050b8:	6878      	ldr	r0, [r7, #4]
 80050ba:	f000 f9b1 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2200      	movs	r2, #0
 80050c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	f003 0308 	and.w	r3, r3, #8
 80050ce:	2b08      	cmp	r3, #8
 80050d0:	d122      	bne.n	8005118 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b08      	cmp	r3, #8
 80050de:	d11b      	bne.n	8005118 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0208 	mvn.w	r2, #8
 80050e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2204      	movs	r2, #4
 80050ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 f984 	bl	800540c <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f976 	bl	80053f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 f987 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	691b      	ldr	r3, [r3, #16]
 800511e:	f003 0310 	and.w	r3, r3, #16
 8005122:	2b10      	cmp	r3, #16
 8005124:	d122      	bne.n	800516c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	f003 0310 	and.w	r3, r3, #16
 8005130:	2b10      	cmp	r3, #16
 8005132:	d11b      	bne.n	800516c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f06f 0210 	mvn.w	r2, #16
 800513c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2208      	movs	r2, #8
 8005142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 f95a 	bl	800540c <HAL_TIM_IC_CaptureCallback>
 8005158:	e005      	b.n	8005166 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f94c 	bl	80053f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f95d 	bl	8005420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	f003 0301 	and.w	r3, r3, #1
 8005176:	2b01      	cmp	r3, #1
 8005178:	d10e      	bne.n	8005198 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f003 0301 	and.w	r3, r3, #1
 8005184:	2b01      	cmp	r3, #1
 8005186:	d107      	bne.n	8005198 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f06f 0201 	mvn.w	r2, #1
 8005190:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f926 	bl	80053e4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b80      	cmp	r3, #128	; 0x80
 80051a4:	d10e      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	68db      	ldr	r3, [r3, #12]
 80051ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b0:	2b80      	cmp	r3, #128	; 0x80
 80051b2:	d107      	bne.n	80051c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f000 fb08 	bl	80057d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051d2:	d10e      	bne.n	80051f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68db      	ldr	r3, [r3, #12]
 80051da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051de:	2b80      	cmp	r3, #128	; 0x80
 80051e0:	d107      	bne.n	80051f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fafb 	bl	80057e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051fc:	2b40      	cmp	r3, #64	; 0x40
 80051fe:	d10e      	bne.n	800521e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68db      	ldr	r3, [r3, #12]
 8005206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800520a:	2b40      	cmp	r3, #64	; 0x40
 800520c:	d107      	bne.n	800521e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005218:	6878      	ldr	r0, [r7, #4]
 800521a:	f000 f90b 	bl	8005434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b20      	cmp	r3, #32
 800522a:	d10e      	bne.n	800524a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f003 0320 	and.w	r3, r3, #32
 8005236:	2b20      	cmp	r3, #32
 8005238:	d107      	bne.n	800524a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f06f 0220 	mvn.w	r2, #32
 8005242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fabb 	bl	80057c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800524a:	bf00      	nop
 800524c:	3708      	adds	r7, #8
 800524e:	46bd      	mov	sp, r7
 8005250:	bd80      	pop	{r7, pc}

08005252 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005252:	b580      	push	{r7, lr}
 8005254:	b084      	sub	sp, #16
 8005256:	af00      	add	r7, sp, #0
 8005258:	6078      	str	r0, [r7, #4]
 800525a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800525c:	2300      	movs	r3, #0
 800525e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005266:	2b01      	cmp	r3, #1
 8005268:	d101      	bne.n	800526e <HAL_TIM_ConfigClockSource+0x1c>
 800526a:	2302      	movs	r3, #2
 800526c:	e0b6      	b.n	80053dc <HAL_TIM_ConfigClockSource+0x18a>
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2201      	movs	r2, #1
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	2202      	movs	r2, #2
 800527a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800528c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005290:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005298:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68ba      	ldr	r2, [r7, #8]
 80052a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052aa:	d03e      	beq.n	800532a <HAL_TIM_ConfigClockSource+0xd8>
 80052ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80052b0:	f200 8087 	bhi.w	80053c2 <HAL_TIM_ConfigClockSource+0x170>
 80052b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052b8:	f000 8086 	beq.w	80053c8 <HAL_TIM_ConfigClockSource+0x176>
 80052bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052c0:	d87f      	bhi.n	80053c2 <HAL_TIM_ConfigClockSource+0x170>
 80052c2:	2b70      	cmp	r3, #112	; 0x70
 80052c4:	d01a      	beq.n	80052fc <HAL_TIM_ConfigClockSource+0xaa>
 80052c6:	2b70      	cmp	r3, #112	; 0x70
 80052c8:	d87b      	bhi.n	80053c2 <HAL_TIM_ConfigClockSource+0x170>
 80052ca:	2b60      	cmp	r3, #96	; 0x60
 80052cc:	d050      	beq.n	8005370 <HAL_TIM_ConfigClockSource+0x11e>
 80052ce:	2b60      	cmp	r3, #96	; 0x60
 80052d0:	d877      	bhi.n	80053c2 <HAL_TIM_ConfigClockSource+0x170>
 80052d2:	2b50      	cmp	r3, #80	; 0x50
 80052d4:	d03c      	beq.n	8005350 <HAL_TIM_ConfigClockSource+0xfe>
 80052d6:	2b50      	cmp	r3, #80	; 0x50
 80052d8:	d873      	bhi.n	80053c2 <HAL_TIM_ConfigClockSource+0x170>
 80052da:	2b40      	cmp	r3, #64	; 0x40
 80052dc:	d058      	beq.n	8005390 <HAL_TIM_ConfigClockSource+0x13e>
 80052de:	2b40      	cmp	r3, #64	; 0x40
 80052e0:	d86f      	bhi.n	80053c2 <HAL_TIM_ConfigClockSource+0x170>
 80052e2:	2b30      	cmp	r3, #48	; 0x30
 80052e4:	d064      	beq.n	80053b0 <HAL_TIM_ConfigClockSource+0x15e>
 80052e6:	2b30      	cmp	r3, #48	; 0x30
 80052e8:	d86b      	bhi.n	80053c2 <HAL_TIM_ConfigClockSource+0x170>
 80052ea:	2b20      	cmp	r3, #32
 80052ec:	d060      	beq.n	80053b0 <HAL_TIM_ConfigClockSource+0x15e>
 80052ee:	2b20      	cmp	r3, #32
 80052f0:	d867      	bhi.n	80053c2 <HAL_TIM_ConfigClockSource+0x170>
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d05c      	beq.n	80053b0 <HAL_TIM_ConfigClockSource+0x15e>
 80052f6:	2b10      	cmp	r3, #16
 80052f8:	d05a      	beq.n	80053b0 <HAL_TIM_ConfigClockSource+0x15e>
 80052fa:	e062      	b.n	80053c2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6818      	ldr	r0, [r3, #0]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	6899      	ldr	r1, [r3, #8]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f000 f9b0 	bl	8005670 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800531e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68ba      	ldr	r2, [r7, #8]
 8005326:	609a      	str	r2, [r3, #8]
      break;
 8005328:	e04f      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6818      	ldr	r0, [r3, #0]
 800532e:	683b      	ldr	r3, [r7, #0]
 8005330:	6899      	ldr	r1, [r3, #8]
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	685a      	ldr	r2, [r3, #4]
 8005336:	683b      	ldr	r3, [r7, #0]
 8005338:	68db      	ldr	r3, [r3, #12]
 800533a:	f000 f999 	bl	8005670 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	689a      	ldr	r2, [r3, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800534c:	609a      	str	r2, [r3, #8]
      break;
 800534e:	e03c      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	6859      	ldr	r1, [r3, #4]
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	461a      	mov	r2, r3
 800535e:	f000 f90d 	bl	800557c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2150      	movs	r1, #80	; 0x50
 8005368:	4618      	mov	r0, r3
 800536a:	f000 f966 	bl	800563a <TIM_ITRx_SetConfig>
      break;
 800536e:	e02c      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	6859      	ldr	r1, [r3, #4]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	461a      	mov	r2, r3
 800537e:	f000 f92c 	bl	80055da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2160      	movs	r1, #96	; 0x60
 8005388:	4618      	mov	r0, r3
 800538a:	f000 f956 	bl	800563a <TIM_ITRx_SetConfig>
      break;
 800538e:	e01c      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6818      	ldr	r0, [r3, #0]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	6859      	ldr	r1, [r3, #4]
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	461a      	mov	r2, r3
 800539e:	f000 f8ed 	bl	800557c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2140      	movs	r1, #64	; 0x40
 80053a8:	4618      	mov	r0, r3
 80053aa:	f000 f946 	bl	800563a <TIM_ITRx_SetConfig>
      break;
 80053ae:	e00c      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4619      	mov	r1, r3
 80053ba:	4610      	mov	r0, r2
 80053bc:	f000 f93d 	bl	800563a <TIM_ITRx_SetConfig>
      break;
 80053c0:	e003      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 80053c2:	2301      	movs	r3, #1
 80053c4:	73fb      	strb	r3, [r7, #15]
      break;
 80053c6:	e000      	b.n	80053ca <HAL_TIM_ConfigClockSource+0x178>
      break;
 80053c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80053da:	7bfb      	ldrb	r3, [r7, #15]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3710      	adds	r7, #16
 80053e0:	46bd      	mov	sp, r7
 80053e2:	bd80      	pop	{r7, pc}

080053e4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005434:	b480      	push	{r7}
 8005436:	b083      	sub	sp, #12
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800543c:	bf00      	nop
 800543e:	370c      	adds	r7, #12
 8005440:	46bd      	mov	sp, r7
 8005442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005446:	4770      	bx	lr

08005448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]
 8005450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a40      	ldr	r2, [pc, #256]	; (800555c <TIM_Base_SetConfig+0x114>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d013      	beq.n	8005488 <TIM_Base_SetConfig+0x40>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005466:	d00f      	beq.n	8005488 <TIM_Base_SetConfig+0x40>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a3d      	ldr	r2, [pc, #244]	; (8005560 <TIM_Base_SetConfig+0x118>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d00b      	beq.n	8005488 <TIM_Base_SetConfig+0x40>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a3c      	ldr	r2, [pc, #240]	; (8005564 <TIM_Base_SetConfig+0x11c>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d007      	beq.n	8005488 <TIM_Base_SetConfig+0x40>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	4a3b      	ldr	r2, [pc, #236]	; (8005568 <TIM_Base_SetConfig+0x120>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d003      	beq.n	8005488 <TIM_Base_SetConfig+0x40>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	4a3a      	ldr	r2, [pc, #232]	; (800556c <TIM_Base_SetConfig+0x124>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d108      	bne.n	800549a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800548e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	68fa      	ldr	r2, [r7, #12]
 8005496:	4313      	orrs	r3, r2
 8005498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2f      	ldr	r2, [pc, #188]	; (800555c <TIM_Base_SetConfig+0x114>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d01f      	beq.n	80054e2 <TIM_Base_SetConfig+0x9a>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054a8:	d01b      	beq.n	80054e2 <TIM_Base_SetConfig+0x9a>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a2c      	ldr	r2, [pc, #176]	; (8005560 <TIM_Base_SetConfig+0x118>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d017      	beq.n	80054e2 <TIM_Base_SetConfig+0x9a>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a2b      	ldr	r2, [pc, #172]	; (8005564 <TIM_Base_SetConfig+0x11c>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d013      	beq.n	80054e2 <TIM_Base_SetConfig+0x9a>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a2a      	ldr	r2, [pc, #168]	; (8005568 <TIM_Base_SetConfig+0x120>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d00f      	beq.n	80054e2 <TIM_Base_SetConfig+0x9a>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a29      	ldr	r2, [pc, #164]	; (800556c <TIM_Base_SetConfig+0x124>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00b      	beq.n	80054e2 <TIM_Base_SetConfig+0x9a>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a28      	ldr	r2, [pc, #160]	; (8005570 <TIM_Base_SetConfig+0x128>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d007      	beq.n	80054e2 <TIM_Base_SetConfig+0x9a>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a27      	ldr	r2, [pc, #156]	; (8005574 <TIM_Base_SetConfig+0x12c>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d003      	beq.n	80054e2 <TIM_Base_SetConfig+0x9a>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a26      	ldr	r2, [pc, #152]	; (8005578 <TIM_Base_SetConfig+0x130>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d108      	bne.n	80054f4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054ea:	683b      	ldr	r3, [r7, #0]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	68fa      	ldr	r2, [r7, #12]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	695b      	ldr	r3, [r3, #20]
 80054fe:	4313      	orrs	r3, r2
 8005500:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	689a      	ldr	r2, [r3, #8]
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a10      	ldr	r2, [pc, #64]	; (800555c <TIM_Base_SetConfig+0x114>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d00f      	beq.n	8005540 <TIM_Base_SetConfig+0xf8>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a12      	ldr	r2, [pc, #72]	; (800556c <TIM_Base_SetConfig+0x124>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d00b      	beq.n	8005540 <TIM_Base_SetConfig+0xf8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a11      	ldr	r2, [pc, #68]	; (8005570 <TIM_Base_SetConfig+0x128>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d007      	beq.n	8005540 <TIM_Base_SetConfig+0xf8>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a10      	ldr	r2, [pc, #64]	; (8005574 <TIM_Base_SetConfig+0x12c>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d003      	beq.n	8005540 <TIM_Base_SetConfig+0xf8>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a0f      	ldr	r2, [pc, #60]	; (8005578 <TIM_Base_SetConfig+0x130>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d103      	bne.n	8005548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	691a      	ldr	r2, [r3, #16]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	615a      	str	r2, [r3, #20]
}
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	40012c00 	.word	0x40012c00
 8005560:	40000400 	.word	0x40000400
 8005564:	40000800 	.word	0x40000800
 8005568:	40000c00 	.word	0x40000c00
 800556c:	40013400 	.word	0x40013400
 8005570:	40014000 	.word	0x40014000
 8005574:	40014400 	.word	0x40014400
 8005578:	40014800 	.word	0x40014800

0800557c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800557c:	b480      	push	{r7}
 800557e:	b087      	sub	sp, #28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	6a1b      	ldr	r3, [r3, #32]
 800558c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a1b      	ldr	r3, [r3, #32]
 8005592:	f023 0201 	bic.w	r2, r3, #1
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	699b      	ldr	r3, [r3, #24]
 800559e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f023 030a 	bic.w	r3, r3, #10
 80055b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80055ba:	697a      	ldr	r2, [r7, #20]
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	4313      	orrs	r3, r2
 80055c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	693a      	ldr	r2, [r7, #16]
 80055c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	621a      	str	r2, [r3, #32]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d8:	4770      	bx	lr

080055da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055da:	b480      	push	{r7}
 80055dc:	b087      	sub	sp, #28
 80055de:	af00      	add	r7, sp, #0
 80055e0:	60f8      	str	r0, [r7, #12]
 80055e2:	60b9      	str	r1, [r7, #8]
 80055e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	6a1b      	ldr	r3, [r3, #32]
 80055ea:	f023 0210 	bic.w	r2, r3, #16
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	699b      	ldr	r3, [r3, #24]
 80055f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055fe:	697b      	ldr	r3, [r7, #20]
 8005600:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005604:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	031b      	lsls	r3, r3, #12
 800560a:	697a      	ldr	r2, [r7, #20]
 800560c:	4313      	orrs	r3, r2
 800560e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005616:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	693a      	ldr	r2, [r7, #16]
 800561e:	4313      	orrs	r3, r2
 8005620:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	697a      	ldr	r2, [r7, #20]
 8005626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005650:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4313      	orrs	r3, r2
 8005658:	f043 0307 	orr.w	r3, r3, #7
 800565c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	609a      	str	r2, [r3, #8]
}
 8005664:	bf00      	nop
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr

08005670 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	60f8      	str	r0, [r7, #12]
 8005678:	60b9      	str	r1, [r7, #8]
 800567a:	607a      	str	r2, [r7, #4]
 800567c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800568a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	021a      	lsls	r2, r3, #8
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	431a      	orrs	r2, r3
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	4313      	orrs	r3, r2
 8005698:	697a      	ldr	r2, [r7, #20]
 800569a:	4313      	orrs	r3, r2
 800569c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	697a      	ldr	r2, [r7, #20]
 80056a2:	609a      	str	r2, [r3, #8]
}
 80056a4:	bf00      	nop
 80056a6:	371c      	adds	r7, #28
 80056a8:	46bd      	mov	sp, r7
 80056aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ae:	4770      	bx	lr

080056b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e068      	b.n	800579a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a2e      	ldr	r2, [pc, #184]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d004      	beq.n	80056fc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a2d      	ldr	r2, [pc, #180]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d108      	bne.n	800570e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005702:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	4313      	orrs	r3, r2
 800570c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005714:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a1e      	ldr	r2, [pc, #120]	; (80057a8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800572e:	4293      	cmp	r3, r2
 8005730:	d01d      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573a:	d018      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a1b      	ldr	r2, [pc, #108]	; (80057b0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005742:	4293      	cmp	r3, r2
 8005744:	d013      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a1a      	ldr	r2, [pc, #104]	; (80057b4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d00e      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	4a18      	ldr	r2, [pc, #96]	; (80057b8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005756:	4293      	cmp	r3, r2
 8005758:	d009      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a13      	ldr	r2, [pc, #76]	; (80057ac <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d004      	beq.n	800576e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	4a14      	ldr	r2, [pc, #80]	; (80057bc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d10c      	bne.n	8005788 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005774:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005776:	683b      	ldr	r3, [r7, #0]
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	4313      	orrs	r3, r2
 800577e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	68ba      	ldr	r2, [r7, #8]
 8005786:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2201      	movs	r2, #1
 800578c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	40012c00 	.word	0x40012c00
 80057ac:	40013400 	.word	0x40013400
 80057b0:	40000400 	.word	0x40000400
 80057b4:	40000800 	.word	0x40000800
 80057b8:	40000c00 	.word	0x40000c00
 80057bc:	40014000 	.word	0x40014000

080057c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b082      	sub	sp, #8
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d101      	bne.n	800580e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800580a:	2301      	movs	r3, #1
 800580c:	e042      	b.n	8005894 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005814:	2b00      	cmp	r3, #0
 8005816:	d106      	bne.n	8005826 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f002 fd51 	bl	80082c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2224      	movs	r2, #36	; 0x24
 800582a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	f022 0201 	bic.w	r2, r2, #1
 800583c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 fb64 	bl	8005f0c <UART_SetConfig>
 8005844:	4603      	mov	r3, r0
 8005846:	2b01      	cmp	r3, #1
 8005848:	d101      	bne.n	800584e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e022      	b.n	8005894 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005852:	2b00      	cmp	r3, #0
 8005854:	d002      	beq.n	800585c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005856:	6878      	ldr	r0, [r7, #4]
 8005858:	f000 fe54 	bl	8006504 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	685a      	ldr	r2, [r3, #4]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800586a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	689a      	ldr	r2, [r3, #8]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800587a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f042 0201 	orr.w	r2, r2, #1
 800588a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f000 fedb 	bl	8006648 <UART_CheckIdleState>
 8005892:	4603      	mov	r3, r0
}
 8005894:	4618      	mov	r0, r3
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b0ba      	sub	sp, #232	; 0xe8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	69db      	ldr	r3, [r3, #28]
 80058aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	689b      	ldr	r3, [r3, #8]
 80058be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80058c2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80058c6:	f640 030f 	movw	r3, #2063	; 0x80f
 80058ca:	4013      	ands	r3, r2
 80058cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80058d0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d11b      	bne.n	8005910 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80058d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80058dc:	f003 0320 	and.w	r3, r3, #32
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d015      	beq.n	8005910 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80058e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d105      	bne.n	80058fc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80058f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80058f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d009      	beq.n	8005910 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005900:	2b00      	cmp	r3, #0
 8005902:	f000 82d6 	beq.w	8005eb2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	4798      	blx	r3
      }
      return;
 800590e:	e2d0      	b.n	8005eb2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005910:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 811f 	beq.w	8005b58 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800591a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800591e:	4b8b      	ldr	r3, [pc, #556]	; (8005b4c <HAL_UART_IRQHandler+0x2b0>)
 8005920:	4013      	ands	r3, r2
 8005922:	2b00      	cmp	r3, #0
 8005924:	d106      	bne.n	8005934 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005926:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800592a:	4b89      	ldr	r3, [pc, #548]	; (8005b50 <HAL_UART_IRQHandler+0x2b4>)
 800592c:	4013      	ands	r3, r2
 800592e:	2b00      	cmp	r3, #0
 8005930:	f000 8112 	beq.w	8005b58 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005938:	f003 0301 	and.w	r3, r3, #1
 800593c:	2b00      	cmp	r3, #0
 800593e:	d011      	beq.n	8005964 <HAL_UART_IRQHandler+0xc8>
 8005940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005948:	2b00      	cmp	r3, #0
 800594a:	d00b      	beq.n	8005964 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	2201      	movs	r2, #1
 8005952:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800595a:	f043 0201 	orr.w	r2, r3, #1
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d011      	beq.n	8005994 <HAL_UART_IRQHandler+0xf8>
 8005970:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005974:	f003 0301 	and.w	r3, r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00b      	beq.n	8005994 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2202      	movs	r2, #2
 8005982:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800598a:	f043 0204 	orr.w	r2, r3, #4
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005998:	f003 0304 	and.w	r3, r3, #4
 800599c:	2b00      	cmp	r3, #0
 800599e:	d011      	beq.n	80059c4 <HAL_UART_IRQHandler+0x128>
 80059a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80059a4:	f003 0301 	and.w	r3, r3, #1
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d00b      	beq.n	80059c4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2204      	movs	r2, #4
 80059b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059ba:	f043 0202 	orr.w	r2, r3, #2
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80059c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80059c8:	f003 0308 	and.w	r3, r3, #8
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d017      	beq.n	8005a00 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059d4:	f003 0320 	and.w	r3, r3, #32
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d105      	bne.n	80059e8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80059dc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80059e0:	4b5a      	ldr	r3, [pc, #360]	; (8005b4c <HAL_UART_IRQHandler+0x2b0>)
 80059e2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00b      	beq.n	8005a00 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	2208      	movs	r2, #8
 80059ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059f6:	f043 0208 	orr.w	r2, r3, #8
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d012      	beq.n	8005a32 <HAL_UART_IRQHandler+0x196>
 8005a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a10:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d00c      	beq.n	8005a32 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005a20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a28:	f043 0220 	orr.w	r2, r3, #32
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 823c 	beq.w	8005eb6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005a3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a42:	f003 0320 	and.w	r3, r3, #32
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d013      	beq.n	8005a72 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005a4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a4e:	f003 0320 	and.w	r3, r3, #32
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d105      	bne.n	8005a62 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005a56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d007      	beq.n	8005a72 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d003      	beq.n	8005a72 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a78:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a86:	2b40      	cmp	r3, #64	; 0x40
 8005a88:	d005      	beq.n	8005a96 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005a8e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d04f      	beq.n	8005b36 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f000 fee9 	bl	800686e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aa6:	2b40      	cmp	r3, #64	; 0x40
 8005aa8:	d141      	bne.n	8005b2e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3308      	adds	r3, #8
 8005ab0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005ab8:	e853 3f00 	ldrex	r3, [r3]
 8005abc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005ac0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ac4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ac8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	3308      	adds	r3, #8
 8005ad2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005ad6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ade:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005ae2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005aee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d1d9      	bne.n	8005aaa <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d013      	beq.n	8005b26 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b02:	4a14      	ldr	r2, [pc, #80]	; (8005b54 <HAL_UART_IRQHandler+0x2b8>)
 8005b04:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f7fb fee7 	bl	80018de <HAL_DMA_Abort_IT>
 8005b10:	4603      	mov	r3, r0
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d017      	beq.n	8005b46 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1c:	687a      	ldr	r2, [r7, #4]
 8005b1e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005b20:	4610      	mov	r0, r2
 8005b22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b24:	e00f      	b.n	8005b46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f9da 	bl	8005ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b2c:	e00b      	b.n	8005b46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f9d6 	bl	8005ee0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b34:	e007      	b.n	8005b46 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 f9d2 	bl	8005ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2200      	movs	r2, #0
 8005b40:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005b44:	e1b7      	b.n	8005eb6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b46:	bf00      	nop
    return;
 8005b48:	e1b5      	b.n	8005eb6 <HAL_UART_IRQHandler+0x61a>
 8005b4a:	bf00      	nop
 8005b4c:	10000001 	.word	0x10000001
 8005b50:	04000120 	.word	0x04000120
 8005b54:	0800693b 	.word	0x0800693b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	f040 814a 	bne.w	8005df6 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	f000 8143 	beq.w	8005df6 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005b70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005b74:	f003 0310 	and.w	r3, r3, #16
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 813c 	beq.w	8005df6 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2210      	movs	r2, #16
 8005b84:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b90:	2b40      	cmp	r3, #64	; 0x40
 8005b92:	f040 80b5 	bne.w	8005d00 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005ba2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	f000 8187 	beq.w	8005eba <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005bb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bb6:	429a      	cmp	r2, r3
 8005bb8:	f080 817f 	bcs.w	8005eba <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005bc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f003 0320 	and.w	r3, r3, #32
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	f040 8086 	bne.w	8005ce4 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005bec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005bf0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bf4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c02:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005c06:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005c0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005c1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d1da      	bne.n	8005bd8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	3308      	adds	r3, #8
 8005c28:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c2c:	e853 3f00 	ldrex	r3, [r3]
 8005c30:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005c32:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005c34:	f023 0301 	bic.w	r3, r3, #1
 8005c38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	3308      	adds	r3, #8
 8005c42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005c46:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005c4a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005c4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005c52:	e841 2300 	strex	r3, r2, [r1]
 8005c56:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005c58:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d1e1      	bne.n	8005c22 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	3308      	adds	r3, #8
 8005c64:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005c68:	e853 3f00 	ldrex	r3, [r3]
 8005c6c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005c6e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005c70:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	3308      	adds	r3, #8
 8005c7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005c82:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005c84:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c86:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005c88:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005c8a:	e841 2300 	strex	r3, r2, [r1]
 8005c8e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005c90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1e3      	bne.n	8005c5e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cac:	e853 3f00 	ldrex	r3, [r3]
 8005cb0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005cb4:	f023 0310 	bic.w	r3, r3, #16
 8005cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005cc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005cc8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ccc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005cce:	e841 2300 	strex	r3, r2, [r1]
 8005cd2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005cd4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d1e4      	bne.n	8005ca4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fb fda1 	bl	8001826 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	1ad3      	subs	r3, r2, r3
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f8fb 	bl	8005ef4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005cfe:	e0dc      	b.n	8005eba <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	1ad3      	subs	r3, r2, r3
 8005d10:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005d1a:	b29b      	uxth	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	f000 80ce 	beq.w	8005ebe <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005d22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	f000 80c9 	beq.w	8005ebe <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d40:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	461a      	mov	r2, r3
 8005d4a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005d4e:	647b      	str	r3, [r7, #68]	; 0x44
 8005d50:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d52:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d56:	e841 2300 	strex	r3, r2, [r1]
 8005d5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005d5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d1e4      	bne.n	8005d2c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3308      	adds	r3, #8
 8005d68:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	e853 3f00 	ldrex	r3, [r3]
 8005d70:	623b      	str	r3, [r7, #32]
   return(result);
 8005d72:	6a3b      	ldr	r3, [r7, #32]
 8005d74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d78:	f023 0301 	bic.w	r3, r3, #1
 8005d7c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	3308      	adds	r3, #8
 8005d86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005d8a:	633a      	str	r2, [r7, #48]	; 0x30
 8005d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d92:	e841 2300 	strex	r3, r2, [r1]
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1e1      	bne.n	8005d62 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2220      	movs	r2, #32
 8005da2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2200      	movs	r2, #0
 8005daa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	693b      	ldr	r3, [r7, #16]
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	60fb      	str	r3, [r7, #12]
   return(result);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f023 0310 	bic.w	r3, r3, #16
 8005dc6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005dd4:	61fb      	str	r3, [r7, #28]
 8005dd6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd8:	69b9      	ldr	r1, [r7, #24]
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	e841 2300 	strex	r3, r2, [r1]
 8005de0:	617b      	str	r3, [r7, #20]
   return(result);
 8005de2:	697b      	ldr	r3, [r7, #20]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d1e4      	bne.n	8005db2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005de8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005dec:	4619      	mov	r1, r3
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f000 f880 	bl	8005ef4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005df4:	e063      	b.n	8005ebe <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d00e      	beq.n	8005e20 <HAL_UART_IRQHandler+0x584>
 8005e02:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d008      	beq.n	8005e20 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005e16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fdcf 	bl	80069bc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e1e:	e051      	b.n	8005ec4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d014      	beq.n	8005e56 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d105      	bne.n	8005e44 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005e3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d008      	beq.n	8005e56 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d03a      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	4798      	blx	r3
    }
    return;
 8005e54:	e035      	b.n	8005ec2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d009      	beq.n	8005e76 <HAL_UART_IRQHandler+0x5da>
 8005e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d003      	beq.n	8005e76 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f000 fd79 	bl	8006966 <UART_EndTransmit_IT>
    return;
 8005e74:	e026      	b.n	8005ec4 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e7a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d009      	beq.n	8005e96 <HAL_UART_IRQHandler+0x5fa>
 8005e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e86:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d003      	beq.n	8005e96 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fda8 	bl	80069e4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005e94:	e016      	b.n	8005ec4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005e96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005e9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d010      	beq.n	8005ec4 <HAL_UART_IRQHandler+0x628>
 8005ea2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	da0c      	bge.n	8005ec4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f000 fd90 	bl	80069d0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005eb0:	e008      	b.n	8005ec4 <HAL_UART_IRQHandler+0x628>
      return;
 8005eb2:	bf00      	nop
 8005eb4:	e006      	b.n	8005ec4 <HAL_UART_IRQHandler+0x628>
    return;
 8005eb6:	bf00      	nop
 8005eb8:	e004      	b.n	8005ec4 <HAL_UART_IRQHandler+0x628>
      return;
 8005eba:	bf00      	nop
 8005ebc:	e002      	b.n	8005ec4 <HAL_UART_IRQHandler+0x628>
      return;
 8005ebe:	bf00      	nop
 8005ec0:	e000      	b.n	8005ec4 <HAL_UART_IRQHandler+0x628>
    return;
 8005ec2:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005ec4:	37e8      	adds	r7, #232	; 0xe8
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}
 8005eca:	bf00      	nop

08005ecc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005ed4:	bf00      	nop
 8005ed6:	370c      	adds	r7, #12
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ede:	4770      	bx	lr

08005ee0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ee0:	b480      	push	{r7}
 8005ee2:	b083      	sub	sp, #12
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005ee8:	bf00      	nop
 8005eea:	370c      	adds	r7, #12
 8005eec:	46bd      	mov	sp, r7
 8005eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef2:	4770      	bx	lr

08005ef4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005ef4:	b480      	push	{r7}
 8005ef6:	b083      	sub	sp, #12
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
 8005efc:	460b      	mov	r3, r1
 8005efe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f00:	bf00      	nop
 8005f02:	370c      	adds	r7, #12
 8005f04:	46bd      	mov	sp, r7
 8005f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0a:	4770      	bx	lr

08005f0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005f10:	b08c      	sub	sp, #48	; 0x30
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f16:	2300      	movs	r3, #0
 8005f18:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	689a      	ldr	r2, [r3, #8]
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	431a      	orrs	r2, r3
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	695b      	ldr	r3, [r3, #20]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	69db      	ldr	r3, [r3, #28]
 8005f30:	4313      	orrs	r3, r2
 8005f32:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	681a      	ldr	r2, [r3, #0]
 8005f3a:	4baa      	ldr	r3, [pc, #680]	; (80061e4 <UART_SetConfig+0x2d8>)
 8005f3c:	4013      	ands	r3, r2
 8005f3e:	697a      	ldr	r2, [r7, #20]
 8005f40:	6812      	ldr	r2, [r2, #0]
 8005f42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f44:	430b      	orrs	r3, r1
 8005f46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	68da      	ldr	r2, [r3, #12]
 8005f56:	697b      	ldr	r3, [r7, #20]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	430a      	orrs	r2, r1
 8005f5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f5e:	697b      	ldr	r3, [r7, #20]
 8005f60:	699b      	ldr	r3, [r3, #24]
 8005f62:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f64:	697b      	ldr	r3, [r7, #20]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a9f      	ldr	r2, [pc, #636]	; (80061e8 <UART_SetConfig+0x2dc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d004      	beq.n	8005f78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f6e:	697b      	ldr	r3, [r7, #20]
 8005f70:	6a1b      	ldr	r3, [r3, #32]
 8005f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005f74:	4313      	orrs	r3, r2
 8005f76:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005f82:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	6812      	ldr	r2, [r2, #0]
 8005f8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005f8c:	430b      	orrs	r3, r1
 8005f8e:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f96:	f023 010f 	bic.w	r1, r3, #15
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	430a      	orrs	r2, r1
 8005fa4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fa6:	697b      	ldr	r3, [r7, #20]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	4a90      	ldr	r2, [pc, #576]	; (80061ec <UART_SetConfig+0x2e0>)
 8005fac:	4293      	cmp	r3, r2
 8005fae:	d125      	bne.n	8005ffc <UART_SetConfig+0xf0>
 8005fb0:	4b8f      	ldr	r3, [pc, #572]	; (80061f0 <UART_SetConfig+0x2e4>)
 8005fb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb6:	f003 0303 	and.w	r3, r3, #3
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d81a      	bhi.n	8005ff4 <UART_SetConfig+0xe8>
 8005fbe:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <UART_SetConfig+0xb8>)
 8005fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc4:	08005fd5 	.word	0x08005fd5
 8005fc8:	08005fe5 	.word	0x08005fe5
 8005fcc:	08005fdd 	.word	0x08005fdd
 8005fd0:	08005fed 	.word	0x08005fed
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fda:	e116      	b.n	800620a <UART_SetConfig+0x2fe>
 8005fdc:	2302      	movs	r3, #2
 8005fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fe2:	e112      	b.n	800620a <UART_SetConfig+0x2fe>
 8005fe4:	2304      	movs	r3, #4
 8005fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fea:	e10e      	b.n	800620a <UART_SetConfig+0x2fe>
 8005fec:	2308      	movs	r3, #8
 8005fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ff2:	e10a      	b.n	800620a <UART_SetConfig+0x2fe>
 8005ff4:	2310      	movs	r3, #16
 8005ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ffa:	e106      	b.n	800620a <UART_SetConfig+0x2fe>
 8005ffc:	697b      	ldr	r3, [r7, #20]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a7c      	ldr	r2, [pc, #496]	; (80061f4 <UART_SetConfig+0x2e8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d138      	bne.n	8006078 <UART_SetConfig+0x16c>
 8006006:	4b7a      	ldr	r3, [pc, #488]	; (80061f0 <UART_SetConfig+0x2e4>)
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600c:	f003 030c 	and.w	r3, r3, #12
 8006010:	2b0c      	cmp	r3, #12
 8006012:	d82d      	bhi.n	8006070 <UART_SetConfig+0x164>
 8006014:	a201      	add	r2, pc, #4	; (adr r2, 800601c <UART_SetConfig+0x110>)
 8006016:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601a:	bf00      	nop
 800601c:	08006051 	.word	0x08006051
 8006020:	08006071 	.word	0x08006071
 8006024:	08006071 	.word	0x08006071
 8006028:	08006071 	.word	0x08006071
 800602c:	08006061 	.word	0x08006061
 8006030:	08006071 	.word	0x08006071
 8006034:	08006071 	.word	0x08006071
 8006038:	08006071 	.word	0x08006071
 800603c:	08006059 	.word	0x08006059
 8006040:	08006071 	.word	0x08006071
 8006044:	08006071 	.word	0x08006071
 8006048:	08006071 	.word	0x08006071
 800604c:	08006069 	.word	0x08006069
 8006050:	2300      	movs	r3, #0
 8006052:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006056:	e0d8      	b.n	800620a <UART_SetConfig+0x2fe>
 8006058:	2302      	movs	r3, #2
 800605a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800605e:	e0d4      	b.n	800620a <UART_SetConfig+0x2fe>
 8006060:	2304      	movs	r3, #4
 8006062:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006066:	e0d0      	b.n	800620a <UART_SetConfig+0x2fe>
 8006068:	2308      	movs	r3, #8
 800606a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800606e:	e0cc      	b.n	800620a <UART_SetConfig+0x2fe>
 8006070:	2310      	movs	r3, #16
 8006072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006076:	e0c8      	b.n	800620a <UART_SetConfig+0x2fe>
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a5e      	ldr	r2, [pc, #376]	; (80061f8 <UART_SetConfig+0x2ec>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d125      	bne.n	80060ce <UART_SetConfig+0x1c2>
 8006082:	4b5b      	ldr	r3, [pc, #364]	; (80061f0 <UART_SetConfig+0x2e4>)
 8006084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006088:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800608c:	2b30      	cmp	r3, #48	; 0x30
 800608e:	d016      	beq.n	80060be <UART_SetConfig+0x1b2>
 8006090:	2b30      	cmp	r3, #48	; 0x30
 8006092:	d818      	bhi.n	80060c6 <UART_SetConfig+0x1ba>
 8006094:	2b20      	cmp	r3, #32
 8006096:	d00a      	beq.n	80060ae <UART_SetConfig+0x1a2>
 8006098:	2b20      	cmp	r3, #32
 800609a:	d814      	bhi.n	80060c6 <UART_SetConfig+0x1ba>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d002      	beq.n	80060a6 <UART_SetConfig+0x19a>
 80060a0:	2b10      	cmp	r3, #16
 80060a2:	d008      	beq.n	80060b6 <UART_SetConfig+0x1aa>
 80060a4:	e00f      	b.n	80060c6 <UART_SetConfig+0x1ba>
 80060a6:	2300      	movs	r3, #0
 80060a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060ac:	e0ad      	b.n	800620a <UART_SetConfig+0x2fe>
 80060ae:	2302      	movs	r3, #2
 80060b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060b4:	e0a9      	b.n	800620a <UART_SetConfig+0x2fe>
 80060b6:	2304      	movs	r3, #4
 80060b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060bc:	e0a5      	b.n	800620a <UART_SetConfig+0x2fe>
 80060be:	2308      	movs	r3, #8
 80060c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060c4:	e0a1      	b.n	800620a <UART_SetConfig+0x2fe>
 80060c6:	2310      	movs	r3, #16
 80060c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80060cc:	e09d      	b.n	800620a <UART_SetConfig+0x2fe>
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a4a      	ldr	r2, [pc, #296]	; (80061fc <UART_SetConfig+0x2f0>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d125      	bne.n	8006124 <UART_SetConfig+0x218>
 80060d8:	4b45      	ldr	r3, [pc, #276]	; (80061f0 <UART_SetConfig+0x2e4>)
 80060da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060e2:	2bc0      	cmp	r3, #192	; 0xc0
 80060e4:	d016      	beq.n	8006114 <UART_SetConfig+0x208>
 80060e6:	2bc0      	cmp	r3, #192	; 0xc0
 80060e8:	d818      	bhi.n	800611c <UART_SetConfig+0x210>
 80060ea:	2b80      	cmp	r3, #128	; 0x80
 80060ec:	d00a      	beq.n	8006104 <UART_SetConfig+0x1f8>
 80060ee:	2b80      	cmp	r3, #128	; 0x80
 80060f0:	d814      	bhi.n	800611c <UART_SetConfig+0x210>
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d002      	beq.n	80060fc <UART_SetConfig+0x1f0>
 80060f6:	2b40      	cmp	r3, #64	; 0x40
 80060f8:	d008      	beq.n	800610c <UART_SetConfig+0x200>
 80060fa:	e00f      	b.n	800611c <UART_SetConfig+0x210>
 80060fc:	2300      	movs	r3, #0
 80060fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006102:	e082      	b.n	800620a <UART_SetConfig+0x2fe>
 8006104:	2302      	movs	r3, #2
 8006106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800610a:	e07e      	b.n	800620a <UART_SetConfig+0x2fe>
 800610c:	2304      	movs	r3, #4
 800610e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006112:	e07a      	b.n	800620a <UART_SetConfig+0x2fe>
 8006114:	2308      	movs	r3, #8
 8006116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800611a:	e076      	b.n	800620a <UART_SetConfig+0x2fe>
 800611c:	2310      	movs	r3, #16
 800611e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006122:	e072      	b.n	800620a <UART_SetConfig+0x2fe>
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	4a35      	ldr	r2, [pc, #212]	; (8006200 <UART_SetConfig+0x2f4>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d12a      	bne.n	8006184 <UART_SetConfig+0x278>
 800612e:	4b30      	ldr	r3, [pc, #192]	; (80061f0 <UART_SetConfig+0x2e4>)
 8006130:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006134:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006138:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800613c:	d01a      	beq.n	8006174 <UART_SetConfig+0x268>
 800613e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006142:	d81b      	bhi.n	800617c <UART_SetConfig+0x270>
 8006144:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006148:	d00c      	beq.n	8006164 <UART_SetConfig+0x258>
 800614a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800614e:	d815      	bhi.n	800617c <UART_SetConfig+0x270>
 8006150:	2b00      	cmp	r3, #0
 8006152:	d003      	beq.n	800615c <UART_SetConfig+0x250>
 8006154:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006158:	d008      	beq.n	800616c <UART_SetConfig+0x260>
 800615a:	e00f      	b.n	800617c <UART_SetConfig+0x270>
 800615c:	2300      	movs	r3, #0
 800615e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006162:	e052      	b.n	800620a <UART_SetConfig+0x2fe>
 8006164:	2302      	movs	r3, #2
 8006166:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800616a:	e04e      	b.n	800620a <UART_SetConfig+0x2fe>
 800616c:	2304      	movs	r3, #4
 800616e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006172:	e04a      	b.n	800620a <UART_SetConfig+0x2fe>
 8006174:	2308      	movs	r3, #8
 8006176:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800617a:	e046      	b.n	800620a <UART_SetConfig+0x2fe>
 800617c:	2310      	movs	r3, #16
 800617e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006182:	e042      	b.n	800620a <UART_SetConfig+0x2fe>
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a17      	ldr	r2, [pc, #92]	; (80061e8 <UART_SetConfig+0x2dc>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d13a      	bne.n	8006204 <UART_SetConfig+0x2f8>
 800618e:	4b18      	ldr	r3, [pc, #96]	; (80061f0 <UART_SetConfig+0x2e4>)
 8006190:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006194:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006198:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800619c:	d01a      	beq.n	80061d4 <UART_SetConfig+0x2c8>
 800619e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80061a2:	d81b      	bhi.n	80061dc <UART_SetConfig+0x2d0>
 80061a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061a8:	d00c      	beq.n	80061c4 <UART_SetConfig+0x2b8>
 80061aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061ae:	d815      	bhi.n	80061dc <UART_SetConfig+0x2d0>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <UART_SetConfig+0x2b0>
 80061b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80061b8:	d008      	beq.n	80061cc <UART_SetConfig+0x2c0>
 80061ba:	e00f      	b.n	80061dc <UART_SetConfig+0x2d0>
 80061bc:	2300      	movs	r3, #0
 80061be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061c2:	e022      	b.n	800620a <UART_SetConfig+0x2fe>
 80061c4:	2302      	movs	r3, #2
 80061c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061ca:	e01e      	b.n	800620a <UART_SetConfig+0x2fe>
 80061cc:	2304      	movs	r3, #4
 80061ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061d2:	e01a      	b.n	800620a <UART_SetConfig+0x2fe>
 80061d4:	2308      	movs	r3, #8
 80061d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061da:	e016      	b.n	800620a <UART_SetConfig+0x2fe>
 80061dc:	2310      	movs	r3, #16
 80061de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80061e2:	e012      	b.n	800620a <UART_SetConfig+0x2fe>
 80061e4:	cfff69f3 	.word	0xcfff69f3
 80061e8:	40008000 	.word	0x40008000
 80061ec:	40013800 	.word	0x40013800
 80061f0:	40021000 	.word	0x40021000
 80061f4:	40004400 	.word	0x40004400
 80061f8:	40004800 	.word	0x40004800
 80061fc:	40004c00 	.word	0x40004c00
 8006200:	40005000 	.word	0x40005000
 8006204:	2310      	movs	r3, #16
 8006206:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4aae      	ldr	r2, [pc, #696]	; (80064c8 <UART_SetConfig+0x5bc>)
 8006210:	4293      	cmp	r3, r2
 8006212:	f040 8097 	bne.w	8006344 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006216:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800621a:	2b08      	cmp	r3, #8
 800621c:	d823      	bhi.n	8006266 <UART_SetConfig+0x35a>
 800621e:	a201      	add	r2, pc, #4	; (adr r2, 8006224 <UART_SetConfig+0x318>)
 8006220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006224:	08006249 	.word	0x08006249
 8006228:	08006267 	.word	0x08006267
 800622c:	08006251 	.word	0x08006251
 8006230:	08006267 	.word	0x08006267
 8006234:	08006257 	.word	0x08006257
 8006238:	08006267 	.word	0x08006267
 800623c:	08006267 	.word	0x08006267
 8006240:	08006267 	.word	0x08006267
 8006244:	0800625f 	.word	0x0800625f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006248:	f7fe f818 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 800624c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800624e:	e010      	b.n	8006272 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006250:	4b9e      	ldr	r3, [pc, #632]	; (80064cc <UART_SetConfig+0x5c0>)
 8006252:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006254:	e00d      	b.n	8006272 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006256:	f7fd ff79 	bl	800414c <HAL_RCC_GetSysClockFreq>
 800625a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800625c:	e009      	b.n	8006272 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800625e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006262:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006264:	e005      	b.n	8006272 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006270:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006274:	2b00      	cmp	r3, #0
 8006276:	f000 8130 	beq.w	80064da <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800627e:	4a94      	ldr	r2, [pc, #592]	; (80064d0 <UART_SetConfig+0x5c4>)
 8006280:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006284:	461a      	mov	r2, r3
 8006286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006288:	fbb3 f3f2 	udiv	r3, r3, r2
 800628c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	685a      	ldr	r2, [r3, #4]
 8006292:	4613      	mov	r3, r2
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	4413      	add	r3, r2
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	429a      	cmp	r2, r3
 800629c:	d305      	bcc.n	80062aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d903      	bls.n	80062b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80062b0:	e113      	b.n	80064da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	2200      	movs	r2, #0
 80062b6:	60bb      	str	r3, [r7, #8]
 80062b8:	60fa      	str	r2, [r7, #12]
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062be:	4a84      	ldr	r2, [pc, #528]	; (80064d0 <UART_SetConfig+0x5c4>)
 80062c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	2200      	movs	r2, #0
 80062c8:	603b      	str	r3, [r7, #0]
 80062ca:	607a      	str	r2, [r7, #4]
 80062cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80062d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80062d4:	f7f9 ff92 	bl	80001fc <__aeabi_uldivmod>
 80062d8:	4602      	mov	r2, r0
 80062da:	460b      	mov	r3, r1
 80062dc:	4610      	mov	r0, r2
 80062de:	4619      	mov	r1, r3
 80062e0:	f04f 0200 	mov.w	r2, #0
 80062e4:	f04f 0300 	mov.w	r3, #0
 80062e8:	020b      	lsls	r3, r1, #8
 80062ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80062ee:	0202      	lsls	r2, r0, #8
 80062f0:	6979      	ldr	r1, [r7, #20]
 80062f2:	6849      	ldr	r1, [r1, #4]
 80062f4:	0849      	lsrs	r1, r1, #1
 80062f6:	2000      	movs	r0, #0
 80062f8:	460c      	mov	r4, r1
 80062fa:	4605      	mov	r5, r0
 80062fc:	eb12 0804 	adds.w	r8, r2, r4
 8006300:	eb43 0905 	adc.w	r9, r3, r5
 8006304:	697b      	ldr	r3, [r7, #20]
 8006306:	685b      	ldr	r3, [r3, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	469a      	mov	sl, r3
 800630c:	4693      	mov	fp, r2
 800630e:	4652      	mov	r2, sl
 8006310:	465b      	mov	r3, fp
 8006312:	4640      	mov	r0, r8
 8006314:	4649      	mov	r1, r9
 8006316:	f7f9 ff71 	bl	80001fc <__aeabi_uldivmod>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4613      	mov	r3, r2
 8006320:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006322:	6a3b      	ldr	r3, [r7, #32]
 8006324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006328:	d308      	bcc.n	800633c <UART_SetConfig+0x430>
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006330:	d204      	bcs.n	800633c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	6a3a      	ldr	r2, [r7, #32]
 8006338:	60da      	str	r2, [r3, #12]
 800633a:	e0ce      	b.n	80064da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006342:	e0ca      	b.n	80064da <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006344:	697b      	ldr	r3, [r7, #20]
 8006346:	69db      	ldr	r3, [r3, #28]
 8006348:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800634c:	d166      	bne.n	800641c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800634e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006352:	2b08      	cmp	r3, #8
 8006354:	d827      	bhi.n	80063a6 <UART_SetConfig+0x49a>
 8006356:	a201      	add	r2, pc, #4	; (adr r2, 800635c <UART_SetConfig+0x450>)
 8006358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800635c:	08006381 	.word	0x08006381
 8006360:	08006389 	.word	0x08006389
 8006364:	08006391 	.word	0x08006391
 8006368:	080063a7 	.word	0x080063a7
 800636c:	08006397 	.word	0x08006397
 8006370:	080063a7 	.word	0x080063a7
 8006374:	080063a7 	.word	0x080063a7
 8006378:	080063a7 	.word	0x080063a7
 800637c:	0800639f 	.word	0x0800639f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006380:	f7fd ff7c 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8006384:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006386:	e014      	b.n	80063b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006388:	f7fd ff8e 	bl	80042a8 <HAL_RCC_GetPCLK2Freq>
 800638c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800638e:	e010      	b.n	80063b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006390:	4b4e      	ldr	r3, [pc, #312]	; (80064cc <UART_SetConfig+0x5c0>)
 8006392:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006394:	e00d      	b.n	80063b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006396:	f7fd fed9 	bl	800414c <HAL_RCC_GetSysClockFreq>
 800639a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800639c:	e009      	b.n	80063b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800639e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80063a4:	e005      	b.n	80063b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80063a6:	2300      	movs	r3, #0
 80063a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80063aa:	2301      	movs	r3, #1
 80063ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80063b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80063b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 8090 	beq.w	80064da <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063be:	4a44      	ldr	r2, [pc, #272]	; (80064d0 <UART_SetConfig+0x5c4>)
 80063c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80063c4:	461a      	mov	r2, r3
 80063c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80063cc:	005a      	lsls	r2, r3, #1
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	085b      	lsrs	r3, r3, #1
 80063d4:	441a      	add	r2, r3
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	685b      	ldr	r3, [r3, #4]
 80063da:	fbb2 f3f3 	udiv	r3, r2, r3
 80063de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063e0:	6a3b      	ldr	r3, [r7, #32]
 80063e2:	2b0f      	cmp	r3, #15
 80063e4:	d916      	bls.n	8006414 <UART_SetConfig+0x508>
 80063e6:	6a3b      	ldr	r3, [r7, #32]
 80063e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80063ec:	d212      	bcs.n	8006414 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80063ee:	6a3b      	ldr	r3, [r7, #32]
 80063f0:	b29b      	uxth	r3, r3
 80063f2:	f023 030f 	bic.w	r3, r3, #15
 80063f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80063f8:	6a3b      	ldr	r3, [r7, #32]
 80063fa:	085b      	lsrs	r3, r3, #1
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	f003 0307 	and.w	r3, r3, #7
 8006402:	b29a      	uxth	r2, r3
 8006404:	8bfb      	ldrh	r3, [r7, #30]
 8006406:	4313      	orrs	r3, r2
 8006408:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	8bfa      	ldrh	r2, [r7, #30]
 8006410:	60da      	str	r2, [r3, #12]
 8006412:	e062      	b.n	80064da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800641a:	e05e      	b.n	80064da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800641c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006420:	2b08      	cmp	r3, #8
 8006422:	d828      	bhi.n	8006476 <UART_SetConfig+0x56a>
 8006424:	a201      	add	r2, pc, #4	; (adr r2, 800642c <UART_SetConfig+0x520>)
 8006426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800642a:	bf00      	nop
 800642c:	08006451 	.word	0x08006451
 8006430:	08006459 	.word	0x08006459
 8006434:	08006461 	.word	0x08006461
 8006438:	08006477 	.word	0x08006477
 800643c:	08006467 	.word	0x08006467
 8006440:	08006477 	.word	0x08006477
 8006444:	08006477 	.word	0x08006477
 8006448:	08006477 	.word	0x08006477
 800644c:	0800646f 	.word	0x0800646f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006450:	f7fd ff14 	bl	800427c <HAL_RCC_GetPCLK1Freq>
 8006454:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006456:	e014      	b.n	8006482 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006458:	f7fd ff26 	bl	80042a8 <HAL_RCC_GetPCLK2Freq>
 800645c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800645e:	e010      	b.n	8006482 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006460:	4b1a      	ldr	r3, [pc, #104]	; (80064cc <UART_SetConfig+0x5c0>)
 8006462:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006464:	e00d      	b.n	8006482 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006466:	f7fd fe71 	bl	800414c <HAL_RCC_GetSysClockFreq>
 800646a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800646c:	e009      	b.n	8006482 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800646e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006472:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006474:	e005      	b.n	8006482 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006476:	2300      	movs	r3, #0
 8006478:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006480:	bf00      	nop
    }

    if (pclk != 0U)
 8006482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006484:	2b00      	cmp	r3, #0
 8006486:	d028      	beq.n	80064da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006488:	697b      	ldr	r3, [r7, #20]
 800648a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800648c:	4a10      	ldr	r2, [pc, #64]	; (80064d0 <UART_SetConfig+0x5c4>)
 800648e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006492:	461a      	mov	r2, r3
 8006494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006496:	fbb3 f2f2 	udiv	r2, r3, r2
 800649a:	697b      	ldr	r3, [r7, #20]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	085b      	lsrs	r3, r3, #1
 80064a0:	441a      	add	r2, r3
 80064a2:	697b      	ldr	r3, [r7, #20]
 80064a4:	685b      	ldr	r3, [r3, #4]
 80064a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80064aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	2b0f      	cmp	r3, #15
 80064b0:	d910      	bls.n	80064d4 <UART_SetConfig+0x5c8>
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80064b8:	d20c      	bcs.n	80064d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80064ba:	6a3b      	ldr	r3, [r7, #32]
 80064bc:	b29a      	uxth	r2, r3
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	60da      	str	r2, [r3, #12]
 80064c4:	e009      	b.n	80064da <UART_SetConfig+0x5ce>
 80064c6:	bf00      	nop
 80064c8:	40008000 	.word	0x40008000
 80064cc:	00f42400 	.word	0x00f42400
 80064d0:	08008530 	.word	0x08008530
      }
      else
      {
        ret = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	2201      	movs	r2, #1
 80064de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	2200      	movs	r2, #0
 80064ee:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2200      	movs	r2, #0
 80064f4:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80064f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3730      	adds	r7, #48	; 0x30
 80064fe:	46bd      	mov	sp, r7
 8006500:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006504 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006504:	b480      	push	{r7}
 8006506:	b083      	sub	sp, #12
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00a      	beq.n	800652e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006532:	f003 0302 	and.w	r3, r3, #2
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00a      	beq.n	8006550 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006554:	f003 0304 	and.w	r3, r3, #4
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00a      	beq.n	8006572 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	685b      	ldr	r3, [r3, #4]
 8006562:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	430a      	orrs	r2, r1
 8006570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d00a      	beq.n	8006594 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006598:	f003 0310 	and.w	r3, r3, #16
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00a      	beq.n	80065b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	689b      	ldr	r3, [r3, #8]
 80065a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065ba:	f003 0320 	and.w	r3, r3, #32
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00a      	beq.n	80065d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	430a      	orrs	r2, r1
 80065d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d01a      	beq.n	800661a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	430a      	orrs	r2, r1
 80065f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006602:	d10a      	bne.n	800661a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006622:	2b00      	cmp	r3, #0
 8006624:	d00a      	beq.n	800663c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	430a      	orrs	r2, r1
 800663a:	605a      	str	r2, [r3, #4]
  }
}
 800663c:	bf00      	nop
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b086      	sub	sp, #24
 800664c:	af02      	add	r7, sp, #8
 800664e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006658:	f7f9 ffba 	bl	80005d0 <HAL_GetTick>
 800665c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f003 0308 	and.w	r3, r3, #8
 8006668:	2b08      	cmp	r3, #8
 800666a:	d10e      	bne.n	800668a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800666c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	2200      	movs	r2, #0
 8006676:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f000 f82f 	bl	80066de <UART_WaitOnFlagUntilTimeout>
 8006680:	4603      	mov	r3, r0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d001      	beq.n	800668a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006686:	2303      	movs	r3, #3
 8006688:	e025      	b.n	80066d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b04      	cmp	r3, #4
 8006696:	d10e      	bne.n	80066b6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006698:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800669c:	9300      	str	r3, [sp, #0]
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2200      	movs	r2, #0
 80066a2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80066a6:	6878      	ldr	r0, [r7, #4]
 80066a8:	f000 f819 	bl	80066de <UART_WaitOnFlagUntilTimeout>
 80066ac:	4603      	mov	r3, r0
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d001      	beq.n	80066b6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e00f      	b.n	80066d6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2220      	movs	r2, #32
 80066ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	2220      	movs	r2, #32
 80066c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80066d4:	2300      	movs	r3, #0
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80066de:	b580      	push	{r7, lr}
 80066e0:	b09c      	sub	sp, #112	; 0x70
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	60f8      	str	r0, [r7, #12]
 80066e6:	60b9      	str	r1, [r7, #8]
 80066e8:	603b      	str	r3, [r7, #0]
 80066ea:	4613      	mov	r3, r2
 80066ec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80066ee:	e0a9      	b.n	8006844 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066f6:	f000 80a5 	beq.w	8006844 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066fa:	f7f9 ff69 	bl	80005d0 <HAL_GetTick>
 80066fe:	4602      	mov	r2, r0
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	1ad3      	subs	r3, r2, r3
 8006704:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006706:	429a      	cmp	r2, r3
 8006708:	d302      	bcc.n	8006710 <UART_WaitOnFlagUntilTimeout+0x32>
 800670a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800670c:	2b00      	cmp	r3, #0
 800670e:	d140      	bne.n	8006792 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006716:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006718:	e853 3f00 	ldrex	r3, [r3]
 800671c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800671e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006720:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006724:	667b      	str	r3, [r7, #100]	; 0x64
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	461a      	mov	r2, r3
 800672c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800672e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006730:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006732:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006734:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006736:	e841 2300 	strex	r3, r2, [r1]
 800673a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800673c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800673e:	2b00      	cmp	r3, #0
 8006740:	d1e6      	bne.n	8006710 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	3308      	adds	r3, #8
 8006748:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800674a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800674c:	e853 3f00 	ldrex	r3, [r3]
 8006750:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006752:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006754:	f023 0301 	bic.w	r3, r3, #1
 8006758:	663b      	str	r3, [r7, #96]	; 0x60
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	3308      	adds	r3, #8
 8006760:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006762:	64ba      	str	r2, [r7, #72]	; 0x48
 8006764:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006766:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006768:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800676a:	e841 2300 	strex	r3, r2, [r1]
 800676e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006770:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006772:	2b00      	cmp	r3, #0
 8006774:	d1e5      	bne.n	8006742 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2220      	movs	r2, #32
 800677a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2220      	movs	r2, #32
 8006782:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2200      	movs	r2, #0
 800678a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800678e:	2303      	movs	r3, #3
 8006790:	e069      	b.n	8006866 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f003 0304 	and.w	r3, r3, #4
 800679c:	2b00      	cmp	r3, #0
 800679e:	d051      	beq.n	8006844 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	69db      	ldr	r3, [r3, #28]
 80067a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067ae:	d149      	bne.n	8006844 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067b8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067c2:	e853 3f00 	ldrex	r3, [r3]
 80067c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80067c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80067ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	461a      	mov	r2, r3
 80067d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80067d8:	637b      	str	r3, [r7, #52]	; 0x34
 80067da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80067de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80067e0:	e841 2300 	strex	r3, r2, [r1]
 80067e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80067e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1e6      	bne.n	80067ba <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	3308      	adds	r3, #8
 80067f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	e853 3f00 	ldrex	r3, [r3]
 80067fa:	613b      	str	r3, [r7, #16]
   return(result);
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f023 0301 	bic.w	r3, r3, #1
 8006802:	66bb      	str	r3, [r7, #104]	; 0x68
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3308      	adds	r3, #8
 800680a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800680c:	623a      	str	r2, [r7, #32]
 800680e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006810:	69f9      	ldr	r1, [r7, #28]
 8006812:	6a3a      	ldr	r2, [r7, #32]
 8006814:	e841 2300 	strex	r3, r2, [r1]
 8006818:	61bb      	str	r3, [r7, #24]
   return(result);
 800681a:	69bb      	ldr	r3, [r7, #24]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e5      	bne.n	80067ec <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2220      	movs	r2, #32
 8006824:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	2220      	movs	r2, #32
 800682c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	2220      	movs	r2, #32
 8006834:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006840:	2303      	movs	r3, #3
 8006842:	e010      	b.n	8006866 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	69da      	ldr	r2, [r3, #28]
 800684a:	68bb      	ldr	r3, [r7, #8]
 800684c:	4013      	ands	r3, r2
 800684e:	68ba      	ldr	r2, [r7, #8]
 8006850:	429a      	cmp	r2, r3
 8006852:	bf0c      	ite	eq
 8006854:	2301      	moveq	r3, #1
 8006856:	2300      	movne	r3, #0
 8006858:	b2db      	uxtb	r3, r3
 800685a:	461a      	mov	r2, r3
 800685c:	79fb      	ldrb	r3, [r7, #7]
 800685e:	429a      	cmp	r2, r3
 8006860:	f43f af46 	beq.w	80066f0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006864:	2300      	movs	r3, #0
}
 8006866:	4618      	mov	r0, r3
 8006868:	3770      	adds	r7, #112	; 0x70
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}

0800686e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800686e:	b480      	push	{r7}
 8006870:	b095      	sub	sp, #84	; 0x54
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800687c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687e:	e853 3f00 	ldrex	r3, [r3]
 8006882:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006886:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800688a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	461a      	mov	r2, r3
 8006892:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006894:	643b      	str	r3, [r7, #64]	; 0x40
 8006896:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006898:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800689a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800689c:	e841 2300 	strex	r3, r2, [r1]
 80068a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80068a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d1e6      	bne.n	8006876 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	3308      	adds	r3, #8
 80068ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	e853 3f00 	ldrex	r3, [r3]
 80068b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068be:	f023 0301 	bic.w	r3, r3, #1
 80068c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3308      	adds	r3, #8
 80068ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80068cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80068ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80068d4:	e841 2300 	strex	r3, r2, [r1]
 80068d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1e3      	bne.n	80068a8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80068e4:	2b01      	cmp	r3, #1
 80068e6:	d118      	bne.n	800691a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	e853 3f00 	ldrex	r3, [r3]
 80068f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	f023 0310 	bic.w	r3, r3, #16
 80068fc:	647b      	str	r3, [r7, #68]	; 0x44
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	461a      	mov	r2, r3
 8006904:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006906:	61bb      	str	r3, [r7, #24]
 8006908:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800690a:	6979      	ldr	r1, [r7, #20]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	e841 2300 	strex	r3, r2, [r1]
 8006912:	613b      	str	r3, [r7, #16]
   return(result);
 8006914:	693b      	ldr	r3, [r7, #16]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d1e6      	bne.n	80068e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2220      	movs	r2, #32
 800691e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2200      	movs	r2, #0
 800692c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800692e:	bf00      	nop
 8006930:	3754      	adds	r7, #84	; 0x54
 8006932:	46bd      	mov	sp, r7
 8006934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006938:	4770      	bx	lr

0800693a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b084      	sub	sp, #16
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006946:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2200      	movs	r2, #0
 800694c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2200      	movs	r2, #0
 8006954:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f7ff fac1 	bl	8005ee0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800695e:	bf00      	nop
 8006960:	3710      	adds	r7, #16
 8006962:	46bd      	mov	sp, r7
 8006964:	bd80      	pop	{r7, pc}

08006966 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006966:	b580      	push	{r7, lr}
 8006968:	b088      	sub	sp, #32
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	e853 3f00 	ldrex	r3, [r3]
 800697a:	60bb      	str	r3, [r7, #8]
   return(result);
 800697c:	68bb      	ldr	r3, [r7, #8]
 800697e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006982:	61fb      	str	r3, [r7, #28]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	461a      	mov	r2, r3
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	61bb      	str	r3, [r7, #24]
 800698e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006990:	6979      	ldr	r1, [r7, #20]
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	e841 2300 	strex	r3, r2, [r1]
 8006998:	613b      	str	r3, [r7, #16]
   return(result);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1e6      	bne.n	800696e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2220      	movs	r2, #32
 80069a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7ff fa8c 	bl	8005ecc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80069b4:	bf00      	nop
 80069b6:	3720      	adds	r7, #32
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80069c4:	bf00      	nop
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b083      	sub	sp, #12
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80069d8:	bf00      	nop
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80069ec:	bf00      	nop
 80069ee:	370c      	adds	r7, #12
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b085      	sub	sp, #20
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a06:	2b01      	cmp	r3, #1
 8006a08:	d101      	bne.n	8006a0e <HAL_UARTEx_DisableFifoMode+0x16>
 8006a0a:	2302      	movs	r3, #2
 8006a0c:	e027      	b.n	8006a5e <HAL_UARTEx_DisableFifoMode+0x66>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2201      	movs	r2, #1
 8006a12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2224      	movs	r2, #36	; 0x24
 8006a1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f022 0201 	bic.w	r2, r2, #1
 8006a34:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006a3c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2220      	movs	r2, #32
 8006a50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3714      	adds	r7, #20
 8006a62:	46bd      	mov	sp, r7
 8006a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a68:	4770      	bx	lr

08006a6a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006a6a:	b580      	push	{r7, lr}
 8006a6c:	b084      	sub	sp, #16
 8006a6e:	af00      	add	r7, sp, #0
 8006a70:	6078      	str	r0, [r7, #4]
 8006a72:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d101      	bne.n	8006a82 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e02d      	b.n	8006ade <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2201      	movs	r2, #1
 8006a86:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2224      	movs	r2, #36	; 0x24
 8006a8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	681a      	ldr	r2, [r3, #0]
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f022 0201 	bic.w	r2, r2, #1
 8006aa8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	683a      	ldr	r2, [r7, #0]
 8006aba:	430a      	orrs	r2, r1
 8006abc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 f850 	bl	8006b64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68fa      	ldr	r2, [r7, #12]
 8006aca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2220      	movs	r2, #32
 8006ad0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006adc:	2300      	movs	r3, #0
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}

08006ae6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006ae6:	b580      	push	{r7, lr}
 8006ae8:	b084      	sub	sp, #16
 8006aea:	af00      	add	r7, sp, #0
 8006aec:	6078      	str	r0, [r7, #4]
 8006aee:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006af6:	2b01      	cmp	r3, #1
 8006af8:	d101      	bne.n	8006afe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006afa:	2302      	movs	r3, #2
 8006afc:	e02d      	b.n	8006b5a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2224      	movs	r2, #36	; 0x24
 8006b0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f022 0201 	bic.w	r2, r2, #1
 8006b24:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	683a      	ldr	r2, [r7, #0]
 8006b36:	430a      	orrs	r2, r1
 8006b38:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f812 	bl	8006b64 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	68fa      	ldr	r2, [r7, #12]
 8006b46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2220      	movs	r2, #32
 8006b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3710      	adds	r7, #16
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	bd80      	pop	{r7, pc}
	...

08006b64 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d108      	bne.n	8006b86 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2201      	movs	r2, #1
 8006b78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006b84:	e031      	b.n	8006bea <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006b86:	2308      	movs	r3, #8
 8006b88:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006b8a:	2308      	movs	r3, #8
 8006b8c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	0e5b      	lsrs	r3, r3, #25
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	f003 0307 	and.w	r3, r3, #7
 8006b9c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	689b      	ldr	r3, [r3, #8]
 8006ba4:	0f5b      	lsrs	r3, r3, #29
 8006ba6:	b2db      	uxtb	r3, r3
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bae:	7bbb      	ldrb	r3, [r7, #14]
 8006bb0:	7b3a      	ldrb	r2, [r7, #12]
 8006bb2:	4911      	ldr	r1, [pc, #68]	; (8006bf8 <UARTEx_SetNbDataToProcess+0x94>)
 8006bb4:	5c8a      	ldrb	r2, [r1, r2]
 8006bb6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006bba:	7b3a      	ldrb	r2, [r7, #12]
 8006bbc:	490f      	ldr	r1, [pc, #60]	; (8006bfc <UARTEx_SetNbDataToProcess+0x98>)
 8006bbe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006bc0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bcc:	7bfb      	ldrb	r3, [r7, #15]
 8006bce:	7b7a      	ldrb	r2, [r7, #13]
 8006bd0:	4909      	ldr	r1, [pc, #36]	; (8006bf8 <UARTEx_SetNbDataToProcess+0x94>)
 8006bd2:	5c8a      	ldrb	r2, [r1, r2]
 8006bd4:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006bd8:	7b7a      	ldrb	r2, [r7, #13]
 8006bda:	4908      	ldr	r1, [pc, #32]	; (8006bfc <UARTEx_SetNbDataToProcess+0x98>)
 8006bdc:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006bde:	fb93 f3f2 	sdiv	r3, r3, r2
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006bea:	bf00      	nop
 8006bec:	3714      	adds	r7, #20
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf4:	4770      	bx	lr
 8006bf6:	bf00      	nop
 8006bf8:	08008548 	.word	0x08008548
 8006bfc:	08008550 	.word	0x08008550

08006c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006c06:	f7f9 fc7b 	bl	8000500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006c0a:	f000 f839 	bl	8006c80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006c0e:	f000 fa85 	bl	800711c <MX_GPIO_Init>
  MX_DMA_Init();
 8006c12:	f000 fa51 	bl	80070b8 <MX_DMA_Init>
  MX_DAC1_Init();
 8006c16:	f000 f885 	bl	8006d24 <MX_DAC1_Init>
  MX_TIM2_Init();
 8006c1a:	f000 f9b3 	bl	8006f84 <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8006c1e:	f000 f8b5 	bl	8006d8c <MX_DFSDM1_Init>
  MX_OCTOSPI1_Init();
 8006c22:	f000 f959 	bl	8006ed8 <MX_OCTOSPI1_Init>
  MX_I2C2_Init();
 8006c26:	f000 f917 	bl	8006e58 <MX_I2C2_Init>
  MX_USART1_UART_Init();
 8006c2a:	f000 f9f9 	bl	8007020 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_QSPI_Init();
 8006c2e:	f000 fc41 	bl	80074b4 <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8006c32:	4810      	ldr	r0, [pc, #64]	; (8006c74 <main+0x74>)
 8006c34:	f7fe f97e 	bl	8004f34 <HAL_TIM_Base_Start_IT>

  if(recorder) {
 8006c38:	4b0f      	ldr	r3, [pc, #60]	; (8006c78 <main+0x78>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d017      	beq.n	8006c70 <main+0x70>
	  for(int i = 1; i < 30; i++) {
 8006c40:	2301      	movs	r3, #1
 8006c42:	607b      	str	r3, [r7, #4]
 8006c44:	e011      	b.n	8006c6a <main+0x6a>
		  if(BSP_QSPI_Erase_Block((uint32_t) addr) != QSPI_OK)
 8006c46:	4b0d      	ldr	r3, [pc, #52]	; (8006c7c <main+0x7c>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	f000 fd88 	bl	8007760 <BSP_QSPI_Erase_Block>
 8006c50:	4603      	mov	r3, r0
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d001      	beq.n	8006c5a <main+0x5a>
		  	Error_Handler();
 8006c56:	f000 fc21 	bl	800749c <Error_Handler>
		  addr = 0x010000*i;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	041b      	lsls	r3, r3, #16
 8006c5e:	461a      	mov	r2, r3
 8006c60:	4b06      	ldr	r3, [pc, #24]	; (8006c7c <main+0x7c>)
 8006c62:	601a      	str	r2, [r3, #0]
	  for(int i = 1; i < 30; i++) {
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	3301      	adds	r3, #1
 8006c68:	607b      	str	r3, [r7, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2b1d      	cmp	r3, #29
 8006c6e:	ddea      	ble.n	8006c46 <main+0x46>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8006c70:	e7fe      	b.n	8006c70 <main+0x70>
 8006c72:	bf00      	nop
 8006c74:	20000288 	.word	0x20000288
 8006c78:	2004e568 	.word	0x2004e568
 8006c7c:	2004e570 	.word	0x2004e570

08006c80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b096      	sub	sp, #88	; 0x58
 8006c84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006c86:	f107 0314 	add.w	r3, r7, #20
 8006c8a:	2244      	movs	r2, #68	; 0x44
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f001 fc3a 	bl	8008508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006c94:	463b      	mov	r3, r7
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	605a      	str	r2, [r3, #4]
 8006c9c:	609a      	str	r2, [r3, #8]
 8006c9e:	60da      	str	r2, [r3, #12]
 8006ca0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006ca2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006ca6:	f7fc fc59 	bl	800355c <HAL_PWREx_ControlVoltageScaling>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d001      	beq.n	8006cb4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8006cb0:	f000 fbf4 	bl	800749c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006cb4:	2310      	movs	r3, #16
 8006cb6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006cc0:	2360      	movs	r3, #96	; 0x60
 8006cc2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006cc4:	2302      	movs	r3, #2
 8006cc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006cc8:	2301      	movs	r3, #1
 8006cca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8006cd0:	2328      	movs	r3, #40	; 0x28
 8006cd2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006cd8:	2302      	movs	r3, #2
 8006cda:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006cdc:	2302      	movs	r3, #2
 8006cde:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006ce0:	f107 0314 	add.w	r3, r7, #20
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7fc fcdd 	bl	80036a4 <HAL_RCC_OscConfig>
 8006cea:	4603      	mov	r3, r0
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d001      	beq.n	8006cf4 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8006cf0:	f000 fbd4 	bl	800749c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006cf4:	230f      	movs	r3, #15
 8006cf6:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006cf8:	2303      	movs	r3, #3
 8006cfa:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006cfc:	2300      	movs	r3, #0
 8006cfe:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006d04:	2300      	movs	r3, #0
 8006d06:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006d08:	463b      	mov	r3, r7
 8006d0a:	2103      	movs	r1, #3
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fd f8e3 	bl	8003ed8 <HAL_RCC_ClockConfig>
 8006d12:	4603      	mov	r3, r0
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d001      	beq.n	8006d1c <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8006d18:	f000 fbc0 	bl	800749c <Error_Handler>
  }
}
 8006d1c:	bf00      	nop
 8006d1e:	3758      	adds	r7, #88	; 0x58
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b08a      	sub	sp, #40	; 0x28
 8006d28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8006d2a:	463b      	mov	r3, r7
 8006d2c:	2228      	movs	r2, #40	; 0x28
 8006d2e:	2100      	movs	r1, #0
 8006d30:	4618      	mov	r0, r3
 8006d32:	f001 fbe9 	bl	8008508 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8006d36:	4b13      	ldr	r3, [pc, #76]	; (8006d84 <MX_DAC1_Init+0x60>)
 8006d38:	4a13      	ldr	r2, [pc, #76]	; (8006d88 <MX_DAC1_Init+0x64>)
 8006d3a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006d3c:	4811      	ldr	r0, [pc, #68]	; (8006d84 <MX_DAC1_Init+0x60>)
 8006d3e:	f7f9 fd88 	bl	8000852 <HAL_DAC_Init>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006d48:	f000 fba8 	bl	800749c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8006d50:	230a      	movs	r3, #10
 8006d52:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006d54:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006d58:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006d62:	2300      	movs	r3, #0
 8006d64:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006d66:	463b      	mov	r3, r7
 8006d68:	2200      	movs	r2, #0
 8006d6a:	4619      	mov	r1, r3
 8006d6c:	4805      	ldr	r0, [pc, #20]	; (8006d84 <MX_DAC1_Init+0x60>)
 8006d6e:	f7f9 feb9 	bl	8000ae4 <HAL_DAC_ConfigChannel>
 8006d72:	4603      	mov	r3, r0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d001      	beq.n	8006d7c <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8006d78:	f000 fb90 	bl	800749c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8006d7c:	bf00      	nop
 8006d7e:	3728      	adds	r7, #40	; 0x28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	20000084 	.word	0x20000084
 8006d88:	40007400 	.word	0x40007400

08006d8c <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8006d90:	4b2c      	ldr	r3, [pc, #176]	; (8006e44 <MX_DFSDM1_Init+0xb8>)
 8006d92:	4a2d      	ldr	r2, [pc, #180]	; (8006e48 <MX_DFSDM1_Init+0xbc>)
 8006d94:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8006d96:	4b2b      	ldr	r3, [pc, #172]	; (8006e44 <MX_DFSDM1_Init+0xb8>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8006d9c:	4b29      	ldr	r3, [pc, #164]	; (8006e44 <MX_DFSDM1_Init+0xb8>)
 8006d9e:	2201      	movs	r2, #1
 8006da0:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8006da2:	4b28      	ldr	r3, [pc, #160]	; (8006e44 <MX_DFSDM1_Init+0xb8>)
 8006da4:	2201      	movs	r2, #1
 8006da6:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8006da8:	4b26      	ldr	r3, [pc, #152]	; (8006e44 <MX_DFSDM1_Init+0xb8>)
 8006daa:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8006dae:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 118;
 8006db0:	4b24      	ldr	r3, [pc, #144]	; (8006e44 <MX_DFSDM1_Init+0xb8>)
 8006db2:	2276      	movs	r2, #118	; 0x76
 8006db4:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 8006db6:	4b23      	ldr	r3, [pc, #140]	; (8006e44 <MX_DFSDM1_Init+0xb8>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8006dbc:	4821      	ldr	r0, [pc, #132]	; (8006e44 <MX_DFSDM1_Init+0xb8>)
 8006dbe:	f7fa f91b 	bl	8000ff8 <HAL_DFSDM_FilterInit>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d001      	beq.n	8006dcc <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8006dc8:	f000 fb68 	bl	800749c <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8006dcc:	4b1f      	ldr	r3, [pc, #124]	; (8006e4c <MX_DFSDM1_Init+0xc0>)
 8006dce:	4a20      	ldr	r2, [pc, #128]	; (8006e50 <MX_DFSDM1_Init+0xc4>)
 8006dd0:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 8006dd2:	4b1e      	ldr	r3, [pc, #120]	; (8006e4c <MX_DFSDM1_Init+0xc0>)
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8006dd8:	4b1c      	ldr	r3, [pc, #112]	; (8006e4c <MX_DFSDM1_Init+0xc0>)
 8006dda:	2200      	movs	r2, #0
 8006ddc:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 8006dde:	4b1b      	ldr	r3, [pc, #108]	; (8006e4c <MX_DFSDM1_Init+0xc0>)
 8006de0:	2222      	movs	r2, #34	; 0x22
 8006de2:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8006de4:	4b19      	ldr	r3, [pc, #100]	; (8006e4c <MX_DFSDM1_Init+0xc0>)
 8006de6:	2200      	movs	r2, #0
 8006de8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8006dea:	4b18      	ldr	r3, [pc, #96]	; (8006e4c <MX_DFSDM1_Init+0xc0>)
 8006dec:	2200      	movs	r2, #0
 8006dee:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8006df0:	4b16      	ldr	r3, [pc, #88]	; (8006e4c <MX_DFSDM1_Init+0xc0>)
 8006df2:	2200      	movs	r2, #0
 8006df4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8006df6:	4b15      	ldr	r3, [pc, #84]	; (8006e4c <MX_DFSDM1_Init+0xc0>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8006dfc:	4b13      	ldr	r3, [pc, #76]	; (8006e4c <MX_DFSDM1_Init+0xc0>)
 8006dfe:	2204      	movs	r2, #4
 8006e00:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8006e02:	4b12      	ldr	r3, [pc, #72]	; (8006e4c <MX_DFSDM1_Init+0xc0>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8006e08:	4b10      	ldr	r3, [pc, #64]	; (8006e4c <MX_DFSDM1_Init+0xc0>)
 8006e0a:	2201      	movs	r2, #1
 8006e0c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8006e0e:	4b0f      	ldr	r3, [pc, #60]	; (8006e4c <MX_DFSDM1_Init+0xc0>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8006e14:	4b0d      	ldr	r3, [pc, #52]	; (8006e4c <MX_DFSDM1_Init+0xc0>)
 8006e16:	2200      	movs	r2, #0
 8006e18:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8006e1a:	480c      	ldr	r0, [pc, #48]	; (8006e4c <MX_DFSDM1_Init+0xc0>)
 8006e1c:	f7fa f82c 	bl	8000e78 <HAL_DFSDM_ChannelInit>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d001      	beq.n	8006e2a <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 8006e26:	f000 fb39 	bl	800749c <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8006e2a:	2201      	movs	r2, #1
 8006e2c:	4909      	ldr	r1, [pc, #36]	; (8006e54 <MX_DFSDM1_Init+0xc8>)
 8006e2e:	4805      	ldr	r0, [pc, #20]	; (8006e44 <MX_DFSDM1_Init+0xb8>)
 8006e30:	f7fa f9bc 	bl	80011ac <HAL_DFSDM_FilterConfigRegChannel>
 8006e34:	4603      	mov	r3, r0
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8006e3a:	f000 fb2f 	bl	800749c <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8006e3e:	bf00      	nop
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	200000f8 	.word	0x200000f8
 8006e48:	40016100 	.word	0x40016100
 8006e4c:	2000014c 	.word	0x2000014c
 8006e50:	40016040 	.word	0x40016040
 8006e54:	00020004 	.word	0x00020004

08006e58 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8006e58:	b580      	push	{r7, lr}
 8006e5a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006e5c:	4b1b      	ldr	r3, [pc, #108]	; (8006ecc <MX_I2C2_Init+0x74>)
 8006e5e:	4a1c      	ldr	r2, [pc, #112]	; (8006ed0 <MX_I2C2_Init+0x78>)
 8006e60:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10909CEC;
 8006e62:	4b1a      	ldr	r3, [pc, #104]	; (8006ecc <MX_I2C2_Init+0x74>)
 8006e64:	4a1b      	ldr	r2, [pc, #108]	; (8006ed4 <MX_I2C2_Init+0x7c>)
 8006e66:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006e68:	4b18      	ldr	r3, [pc, #96]	; (8006ecc <MX_I2C2_Init+0x74>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006e6e:	4b17      	ldr	r3, [pc, #92]	; (8006ecc <MX_I2C2_Init+0x74>)
 8006e70:	2201      	movs	r2, #1
 8006e72:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006e74:	4b15      	ldr	r3, [pc, #84]	; (8006ecc <MX_I2C2_Init+0x74>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006e7a:	4b14      	ldr	r3, [pc, #80]	; (8006ecc <MX_I2C2_Init+0x74>)
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006e80:	4b12      	ldr	r3, [pc, #72]	; (8006ecc <MX_I2C2_Init+0x74>)
 8006e82:	2200      	movs	r2, #0
 8006e84:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006e86:	4b11      	ldr	r3, [pc, #68]	; (8006ecc <MX_I2C2_Init+0x74>)
 8006e88:	2200      	movs	r2, #0
 8006e8a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006e8c:	4b0f      	ldr	r3, [pc, #60]	; (8006ecc <MX_I2C2_Init+0x74>)
 8006e8e:	2200      	movs	r2, #0
 8006e90:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006e92:	480e      	ldr	r0, [pc, #56]	; (8006ecc <MX_I2C2_Init+0x74>)
 8006e94:	f7fb f9a0 	bl	80021d8 <HAL_I2C_Init>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006e9e:	f000 fafd 	bl	800749c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	4809      	ldr	r0, [pc, #36]	; (8006ecc <MX_I2C2_Init+0x74>)
 8006ea6:	f7fb fa26 	bl	80022f6 <HAL_I2CEx_ConfigAnalogFilter>
 8006eaa:	4603      	mov	r3, r0
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d001      	beq.n	8006eb4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006eb0:	f000 faf4 	bl	800749c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	4805      	ldr	r0, [pc, #20]	; (8006ecc <MX_I2C2_Init+0x74>)
 8006eb8:	f7fb fa68 	bl	800238c <HAL_I2CEx_ConfigDigitalFilter>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d001      	beq.n	8006ec6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006ec2:	f000 faeb 	bl	800749c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006ec6:	bf00      	nop
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	200001e4 	.word	0x200001e4
 8006ed0:	40005800 	.word	0x40005800
 8006ed4:	10909cec 	.word	0x10909cec

08006ed8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b086      	sub	sp, #24
 8006edc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 8006ede:	1d3b      	adds	r3, r7, #4
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	601a      	str	r2, [r3, #0]
 8006ee4:	605a      	str	r2, [r3, #4]
 8006ee6:	609a      	str	r2, [r3, #8]
 8006ee8:	60da      	str	r2, [r3, #12]
 8006eea:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 8006eec:	4b23      	ldr	r3, [pc, #140]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006eee:	4a24      	ldr	r2, [pc, #144]	; (8006f80 <MX_OCTOSPI1_Init+0xa8>)
 8006ef0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 8006ef2:	4b22      	ldr	r3, [pc, #136]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 8006ef8:	4b20      	ldr	r3, [pc, #128]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006efa:	2200      	movs	r2, #0
 8006efc:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 8006efe:	4b1f      	ldr	r3, [pc, #124]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006f00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f04:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 8006f06:	4b1d      	ldr	r3, [pc, #116]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006f08:	2220      	movs	r2, #32
 8006f0a:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 8006f0c:	4b1b      	ldr	r3, [pc, #108]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006f0e:	2201      	movs	r2, #1
 8006f10:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8006f12:	4b1a      	ldr	r3, [pc, #104]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006f14:	2200      	movs	r2, #0
 8006f16:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8006f18:	4b18      	ldr	r3, [pc, #96]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 8006f1e:	4b17      	ldr	r3, [pc, #92]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006f20:	2201      	movs	r2, #1
 8006f22:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8006f24:	4b15      	ldr	r3, [pc, #84]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006f26:	2200      	movs	r2, #0
 8006f28:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8006f2a:	4b14      	ldr	r3, [pc, #80]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8006f30:	4b12      	ldr	r3, [pc, #72]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006f32:	2200      	movs	r2, #0
 8006f34:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 8006f36:	4b11      	ldr	r3, [pc, #68]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006f38:	2208      	movs	r2, #8
 8006f3a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8006f3c:	480f      	ldr	r0, [pc, #60]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006f3e:	f7fb fa71 	bl	8002424 <HAL_OSPI_Init>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8006f48:	f000 faa8 	bl	800749c <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8006f50:	2301      	movs	r3, #1
 8006f52:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 8006f54:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8006f58:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006f5a:	1d3b      	adds	r3, r7, #4
 8006f5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f60:	4619      	mov	r1, r3
 8006f62:	4806      	ldr	r0, [pc, #24]	; (8006f7c <MX_OCTOSPI1_Init+0xa4>)
 8006f64:	f7fb fd5c 	bl	8002a20 <HAL_OSPIM_Config>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8006f6e:	f000 fa95 	bl	800749c <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8006f72:	bf00      	nop
 8006f74:	3718      	adds	r7, #24
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000238 	.word	0x20000238
 8006f80:	a0001000 	.word	0xa0001000

08006f84 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b088      	sub	sp, #32
 8006f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006f8a:	f107 0310 	add.w	r3, r7, #16
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	605a      	str	r2, [r3, #4]
 8006f94:	609a      	str	r2, [r3, #8]
 8006f96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006f98:	1d3b      	adds	r3, r7, #4
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	601a      	str	r2, [r3, #0]
 8006f9e:	605a      	str	r2, [r3, #4]
 8006fa0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006fa2:	4b1e      	ldr	r3, [pc, #120]	; (800701c <MX_TIM2_Init+0x98>)
 8006fa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006fa8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8006faa:	4b1c      	ldr	r3, [pc, #112]	; (800701c <MX_TIM2_Init+0x98>)
 8006fac:	2200      	movs	r2, #0
 8006fae:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006fb0:	4b1a      	ldr	r3, [pc, #104]	; (800701c <MX_TIM2_Init+0x98>)
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 8006fb6:	4b19      	ldr	r3, [pc, #100]	; (800701c <MX_TIM2_Init+0x98>)
 8006fb8:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8006fbc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006fbe:	4b17      	ldr	r3, [pc, #92]	; (800701c <MX_TIM2_Init+0x98>)
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006fc4:	4b15      	ldr	r3, [pc, #84]	; (800701c <MX_TIM2_Init+0x98>)
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006fca:	4814      	ldr	r0, [pc, #80]	; (800701c <MX_TIM2_Init+0x98>)
 8006fcc:	f7fd ff5a 	bl	8004e84 <HAL_TIM_Base_Init>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d001      	beq.n	8006fda <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8006fd6:	f000 fa61 	bl	800749c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006fda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006fde:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006fe0:	f107 0310 	add.w	r3, r7, #16
 8006fe4:	4619      	mov	r1, r3
 8006fe6:	480d      	ldr	r0, [pc, #52]	; (800701c <MX_TIM2_Init+0x98>)
 8006fe8:	f7fe f933 	bl	8005252 <HAL_TIM_ConfigClockSource>
 8006fec:	4603      	mov	r3, r0
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d001      	beq.n	8006ff6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8006ff2:	f000 fa53 	bl	800749c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006ff6:	2320      	movs	r3, #32
 8006ff8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006ffe:	1d3b      	adds	r3, r7, #4
 8007000:	4619      	mov	r1, r3
 8007002:	4806      	ldr	r0, [pc, #24]	; (800701c <MX_TIM2_Init+0x98>)
 8007004:	f7fe fb54 	bl	80056b0 <HAL_TIMEx_MasterConfigSynchronization>
 8007008:	4603      	mov	r3, r0
 800700a:	2b00      	cmp	r3, #0
 800700c:	d001      	beq.n	8007012 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800700e:	f000 fa45 	bl	800749c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007012:	bf00      	nop
 8007014:	3720      	adds	r7, #32
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}
 800701a:	bf00      	nop
 800701c:	20000288 	.word	0x20000288

08007020 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007024:	4b22      	ldr	r3, [pc, #136]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 8007026:	4a23      	ldr	r2, [pc, #140]	; (80070b4 <MX_USART1_UART_Init+0x94>)
 8007028:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800702a:	4b21      	ldr	r3, [pc, #132]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 800702c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007030:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007032:	4b1f      	ldr	r3, [pc, #124]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 8007034:	2200      	movs	r2, #0
 8007036:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007038:	4b1d      	ldr	r3, [pc, #116]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 800703a:	2200      	movs	r2, #0
 800703c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800703e:	4b1c      	ldr	r3, [pc, #112]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 8007040:	2200      	movs	r2, #0
 8007042:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007044:	4b1a      	ldr	r3, [pc, #104]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 8007046:	220c      	movs	r2, #12
 8007048:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800704a:	4b19      	ldr	r3, [pc, #100]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 800704c:	2200      	movs	r2, #0
 800704e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007050:	4b17      	ldr	r3, [pc, #92]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 8007052:	2200      	movs	r2, #0
 8007054:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007056:	4b16      	ldr	r3, [pc, #88]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 8007058:	2200      	movs	r2, #0
 800705a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800705c:	4b14      	ldr	r3, [pc, #80]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 800705e:	2200      	movs	r2, #0
 8007060:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007062:	4b13      	ldr	r3, [pc, #76]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 8007064:	2200      	movs	r2, #0
 8007066:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007068:	4811      	ldr	r0, [pc, #68]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 800706a:	f7fe fbc7 	bl	80057fc <HAL_UART_Init>
 800706e:	4603      	mov	r3, r0
 8007070:	2b00      	cmp	r3, #0
 8007072:	d001      	beq.n	8007078 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8007074:	f000 fa12 	bl	800749c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007078:	2100      	movs	r1, #0
 800707a:	480d      	ldr	r0, [pc, #52]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 800707c:	f7ff fcf5 	bl	8006a6a <HAL_UARTEx_SetTxFifoThreshold>
 8007080:	4603      	mov	r3, r0
 8007082:	2b00      	cmp	r3, #0
 8007084:	d001      	beq.n	800708a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8007086:	f000 fa09 	bl	800749c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800708a:	2100      	movs	r1, #0
 800708c:	4808      	ldr	r0, [pc, #32]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 800708e:	f7ff fd2a 	bl	8006ae6 <HAL_UARTEx_SetRxFifoThreshold>
 8007092:	4603      	mov	r3, r0
 8007094:	2b00      	cmp	r3, #0
 8007096:	d001      	beq.n	800709c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007098:	f000 fa00 	bl	800749c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800709c:	4804      	ldr	r0, [pc, #16]	; (80070b0 <MX_USART1_UART_Init+0x90>)
 800709e:	f7ff fcab 	bl	80069f8 <HAL_UARTEx_DisableFifoMode>
 80070a2:	4603      	mov	r3, r0
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d001      	beq.n	80070ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80070a8:	f000 f9f8 	bl	800749c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80070ac:	bf00      	nop
 80070ae:	bd80      	pop	{r7, pc}
 80070b0:	200002d4 	.word	0x200002d4
 80070b4:	40013800 	.word	0x40013800

080070b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	b082      	sub	sp, #8
 80070bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80070be:	4b16      	ldr	r3, [pc, #88]	; (8007118 <MX_DMA_Init+0x60>)
 80070c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070c2:	4a15      	ldr	r2, [pc, #84]	; (8007118 <MX_DMA_Init+0x60>)
 80070c4:	f043 0304 	orr.w	r3, r3, #4
 80070c8:	6493      	str	r3, [r2, #72]	; 0x48
 80070ca:	4b13      	ldr	r3, [pc, #76]	; (8007118 <MX_DMA_Init+0x60>)
 80070cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070ce:	f003 0304 	and.w	r3, r3, #4
 80070d2:	607b      	str	r3, [r7, #4]
 80070d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80070d6:	4b10      	ldr	r3, [pc, #64]	; (8007118 <MX_DMA_Init+0x60>)
 80070d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070da:	4a0f      	ldr	r2, [pc, #60]	; (8007118 <MX_DMA_Init+0x60>)
 80070dc:	f043 0301 	orr.w	r3, r3, #1
 80070e0:	6493      	str	r3, [r2, #72]	; 0x48
 80070e2:	4b0d      	ldr	r3, [pc, #52]	; (8007118 <MX_DMA_Init+0x60>)
 80070e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	603b      	str	r3, [r7, #0]
 80070ec:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80070ee:	2200      	movs	r2, #0
 80070f0:	2100      	movs	r1, #0
 80070f2:	200b      	movs	r0, #11
 80070f4:	f7f9 fb77 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80070f8:	200b      	movs	r0, #11
 80070fa:	f7f9 fb90 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80070fe:	2200      	movs	r2, #0
 8007100:	2100      	movs	r1, #0
 8007102:	200c      	movs	r0, #12
 8007104:	f7f9 fb6f 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8007108:	200c      	movs	r0, #12
 800710a:	f7f9 fb88 	bl	800081e <HAL_NVIC_EnableIRQ>

}
 800710e:	bf00      	nop
 8007110:	3708      	adds	r7, #8
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	40021000 	.word	0x40021000

0800711c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b08a      	sub	sp, #40	; 0x28
 8007120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007122:	f107 0314 	add.w	r3, r7, #20
 8007126:	2200      	movs	r2, #0
 8007128:	601a      	str	r2, [r3, #0]
 800712a:	605a      	str	r2, [r3, #4]
 800712c:	609a      	str	r2, [r3, #8]
 800712e:	60da      	str	r2, [r3, #12]
 8007130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007132:	4b39      	ldr	r3, [pc, #228]	; (8007218 <MX_GPIO_Init+0xfc>)
 8007134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007136:	4a38      	ldr	r2, [pc, #224]	; (8007218 <MX_GPIO_Init+0xfc>)
 8007138:	f043 0310 	orr.w	r3, r3, #16
 800713c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800713e:	4b36      	ldr	r3, [pc, #216]	; (8007218 <MX_GPIO_Init+0xfc>)
 8007140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007142:	f003 0310 	and.w	r3, r3, #16
 8007146:	613b      	str	r3, [r7, #16]
 8007148:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800714a:	4b33      	ldr	r3, [pc, #204]	; (8007218 <MX_GPIO_Init+0xfc>)
 800714c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800714e:	4a32      	ldr	r2, [pc, #200]	; (8007218 <MX_GPIO_Init+0xfc>)
 8007150:	f043 0304 	orr.w	r3, r3, #4
 8007154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007156:	4b30      	ldr	r3, [pc, #192]	; (8007218 <MX_GPIO_Init+0xfc>)
 8007158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800715a:	f003 0304 	and.w	r3, r3, #4
 800715e:	60fb      	str	r3, [r7, #12]
 8007160:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007162:	4b2d      	ldr	r3, [pc, #180]	; (8007218 <MX_GPIO_Init+0xfc>)
 8007164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007166:	4a2c      	ldr	r2, [pc, #176]	; (8007218 <MX_GPIO_Init+0xfc>)
 8007168:	f043 0301 	orr.w	r3, r3, #1
 800716c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800716e:	4b2a      	ldr	r3, [pc, #168]	; (8007218 <MX_GPIO_Init+0xfc>)
 8007170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	60bb      	str	r3, [r7, #8]
 8007178:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800717a:	4b27      	ldr	r3, [pc, #156]	; (8007218 <MX_GPIO_Init+0xfc>)
 800717c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800717e:	4a26      	ldr	r2, [pc, #152]	; (8007218 <MX_GPIO_Init+0xfc>)
 8007180:	f043 0302 	orr.w	r3, r3, #2
 8007184:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007186:	4b24      	ldr	r3, [pc, #144]	; (8007218 <MX_GPIO_Init+0xfc>)
 8007188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800718a:	f003 0302 	and.w	r3, r3, #2
 800718e:	607b      	str	r3, [r7, #4]
 8007190:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
 8007192:	2200      	movs	r2, #0
 8007194:	2108      	movs	r1, #8
 8007196:	4821      	ldr	r0, [pc, #132]	; (800721c <MX_GPIO_Init+0x100>)
 8007198:	f7fa ffd4 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);
 800719c:	2200      	movs	r2, #0
 800719e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80071a2:	481f      	ldr	r0, [pc, #124]	; (8007220 <MX_GPIO_Init+0x104>)
 80071a4:	f7fa ffce 	bl	8002144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : redLED_Pin */
  GPIO_InitStruct.Pin = redLED_Pin;
 80071a8:	2308      	movs	r3, #8
 80071aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071ac:	2301      	movs	r3, #1
 80071ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071b0:	2300      	movs	r3, #0
 80071b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071b4:	2300      	movs	r3, #0
 80071b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(redLED_GPIO_Port, &GPIO_InitStruct);
 80071b8:	f107 0314 	add.w	r3, r7, #20
 80071bc:	4619      	mov	r1, r3
 80071be:	4817      	ldr	r0, [pc, #92]	; (800721c <MX_GPIO_Init+0x100>)
 80071c0:	f7fa fd3c 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : pushButton_Pin */
  GPIO_InitStruct.Pin = pushButton_Pin;
 80071c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80071c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80071ca:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80071ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pushButton_GPIO_Port, &GPIO_InitStruct);
 80071d4:	f107 0314 	add.w	r3, r7, #20
 80071d8:	4619      	mov	r1, r3
 80071da:	4812      	ldr	r0, [pc, #72]	; (8007224 <MX_GPIO_Init+0x108>)
 80071dc:	f7fa fd2e 	bl	8001c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : greenLED_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin;
 80071e0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80071e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80071e6:	2301      	movs	r3, #1
 80071e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80071ea:	2300      	movs	r3, #0
 80071ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80071ee:	2300      	movs	r3, #0
 80071f0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(greenLED_GPIO_Port, &GPIO_InitStruct);
 80071f2:	f107 0314 	add.w	r3, r7, #20
 80071f6:	4619      	mov	r1, r3
 80071f8:	4809      	ldr	r0, [pc, #36]	; (8007220 <MX_GPIO_Init+0x104>)
 80071fa:	f7fa fd1f 	bl	8001c3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80071fe:	2200      	movs	r2, #0
 8007200:	2100      	movs	r1, #0
 8007202:	2028      	movs	r0, #40	; 0x28
 8007204:	f7f9 faef 	bl	80007e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007208:	2028      	movs	r0, #40	; 0x28
 800720a:	f7f9 fb08 	bl	800081e <HAL_NVIC_EnableIRQ>

}
 800720e:	bf00      	nop
 8007210:	3728      	adds	r7, #40	; 0x28
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}
 8007216:	bf00      	nop
 8007218:	40021000 	.word	0x40021000
 800721c:	48001000 	.word	0x48001000
 8007220:	48000400 	.word	0x48000400
 8007224:	48000800 	.word	0x48000800

08007228 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af02      	add	r7, sp, #8
 800722e:	4603      	mov	r3, r0
 8007230:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == pushButton_Pin) {
 8007232:	88fb      	ldrh	r3, [r7, #6]
 8007234:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007238:	d13e      	bne.n	80072b8 <HAL_GPIO_EXTI_Callback+0x90>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800723a:	2100      	movs	r1, #0
 800723c:	4820      	ldr	r0, [pc, #128]	; (80072c0 <HAL_GPIO_EXTI_Callback+0x98>)
 800723e:	f7f9 fbf7 	bl	8000a30 <HAL_DAC_Stop_DMA>
		HAL_GPIO_TogglePin(greenLED_GPIO_Port, greenLED_Pin);
 8007242:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007246:	481f      	ldr	r0, [pc, #124]	; (80072c4 <HAL_GPIO_EXTI_Callback+0x9c>)
 8007248:	f7fa ff94 	bl	8002174 <HAL_GPIO_TogglePin>

		if(recorder)
 800724c:	4b1e      	ldr	r3, [pc, #120]	; (80072c8 <HAL_GPIO_EXTI_Callback+0xa0>)
 800724e:	781b      	ldrb	r3, [r3, #0]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <HAL_GPIO_EXTI_Callback+0x38>
			HAL_DFSDM_FilterRegularStart_DMA(&hdfsdm1_filter0, SEQUENCE, SEQUENCE_LENGTH);
 8007254:	f649 4240 	movw	r2, #40000	; 0x9c40
 8007258:	491c      	ldr	r1, [pc, #112]	; (80072cc <HAL_GPIO_EXTI_Callback+0xa4>)
 800725a:	481d      	ldr	r0, [pc, #116]	; (80072d0 <HAL_GPIO_EXTI_Callback+0xa8>)
 800725c:	f7f9 ffec 	bl	8001238 <HAL_DFSDM_FilterRegularStart_DMA>

		if(player) {
 8007260:	4b1c      	ldr	r3, [pc, #112]	; (80072d4 <HAL_GPIO_EXTI_Callback+0xac>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d027      	beq.n	80072b8 <HAL_GPIO_EXTI_Callback+0x90>
				test = address[seq[j]];
 8007268:	4b1b      	ldr	r3, [pc, #108]	; (80072d8 <HAL_GPIO_EXTI_Callback+0xb0>)
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	461a      	mov	r2, r3
 800726e:	4b1b      	ldr	r3, [pc, #108]	; (80072dc <HAL_GPIO_EXTI_Callback+0xb4>)
 8007270:	5c9b      	ldrb	r3, [r3, r2]
 8007272:	461a      	mov	r2, r3
 8007274:	4b1a      	ldr	r3, [pc, #104]	; (80072e0 <HAL_GPIO_EXTI_Callback+0xb8>)
 8007276:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800727a:	461a      	mov	r2, r3
 800727c:	4b19      	ldr	r3, [pc, #100]	; (80072e4 <HAL_GPIO_EXTI_Callback+0xbc>)
 800727e:	601a      	str	r2, [r3, #0]
				if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  address[seq[j]], sizeof(SEQUENCE)) != QSPI_OK)
 8007280:	4b15      	ldr	r3, [pc, #84]	; (80072d8 <HAL_GPIO_EXTI_Callback+0xb0>)
 8007282:	781b      	ldrb	r3, [r3, #0]
 8007284:	461a      	mov	r2, r3
 8007286:	4b15      	ldr	r3, [pc, #84]	; (80072dc <HAL_GPIO_EXTI_Callback+0xb4>)
 8007288:	5c9b      	ldrb	r3, [r3, r2]
 800728a:	461a      	mov	r2, r3
 800728c:	4b14      	ldr	r3, [pc, #80]	; (80072e0 <HAL_GPIO_EXTI_Callback+0xb8>)
 800728e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007292:	4a15      	ldr	r2, [pc, #84]	; (80072e8 <HAL_GPIO_EXTI_Callback+0xc0>)
 8007294:	4619      	mov	r1, r3
 8007296:	4815      	ldr	r0, [pc, #84]	; (80072ec <HAL_GPIO_EXTI_Callback+0xc4>)
 8007298:	f000 f98a 	bl	80075b0 <BSP_QSPI_Read>
 800729c:	4603      	mov	r3, r0
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d001      	beq.n	80072a6 <HAL_GPIO_EXTI_Callback+0x7e>
					Error_Handler();
 80072a2:	f000 f8fb 	bl	800749c <Error_Handler>
				HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 80072a6:	2300      	movs	r3, #0
 80072a8:	9300      	str	r3, [sp, #0]
 80072aa:	f649 4340 	movw	r3, #40000	; 0x9c40
 80072ae:	4a0f      	ldr	r2, [pc, #60]	; (80072ec <HAL_GPIO_EXTI_Callback+0xc4>)
 80072b0:	2100      	movs	r1, #0
 80072b2:	4803      	ldr	r0, [pc, #12]	; (80072c0 <HAL_GPIO_EXTI_Callback+0x98>)
 80072b4:	f7f9 faf0 	bl	8000898 <HAL_DAC_Start_DMA>

		}
	}
}
 80072b8:	bf00      	nop
 80072ba:	3708      	adds	r7, #8
 80072bc:	46bd      	mov	sp, r7
 80072be:	bd80      	pop	{r7, pc}
 80072c0:	20000084 	.word	0x20000084
 80072c4:	48000400 	.word	0x48000400
 80072c8:	2004e568 	.word	0x2004e568
 80072cc:	20000364 	.word	0x20000364
 80072d0:	200000f8 	.word	0x200000f8
 80072d4:	20000030 	.word	0x20000030
 80072d8:	2004e574 	.word	0x2004e574
 80072dc:	20000034 	.word	0x20000034
 80072e0:	20000008 	.word	0x20000008
 80072e4:	2004e56c 	.word	0x2004e56c
 80072e8:	00027100 	.word	0x00027100
 80072ec:	20027464 	.word	0x20027464

080072f0 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af02      	add	r7, sp, #8
 80072f6:	6078      	str	r0, [r7, #4]

	if(player) {
 80072f8:	4b1e      	ldr	r3, [pc, #120]	; (8007374 <HAL_DAC_ConvCpltCallbackCh1+0x84>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d035      	beq.n	800736c <HAL_DAC_ConvCpltCallbackCh1+0x7c>
	j = j + 1;
 8007300:	4b1d      	ldr	r3, [pc, #116]	; (8007378 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 8007302:	781b      	ldrb	r3, [r3, #0]
 8007304:	3301      	adds	r3, #1
 8007306:	b2da      	uxtb	r2, r3
 8007308:	4b1b      	ldr	r3, [pc, #108]	; (8007378 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 800730a:	701a      	strb	r2, [r3, #0]
	test = address[seq[j]];
 800730c:	4b1a      	ldr	r3, [pc, #104]	; (8007378 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	461a      	mov	r2, r3
 8007312:	4b1a      	ldr	r3, [pc, #104]	; (800737c <HAL_DAC_ConvCpltCallbackCh1+0x8c>)
 8007314:	5c9b      	ldrb	r3, [r3, r2]
 8007316:	461a      	mov	r2, r3
 8007318:	4b19      	ldr	r3, [pc, #100]	; (8007380 <HAL_DAC_ConvCpltCallbackCh1+0x90>)
 800731a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800731e:	461a      	mov	r2, r3
 8007320:	4b18      	ldr	r3, [pc, #96]	; (8007384 <HAL_DAC_ConvCpltCallbackCh1+0x94>)
 8007322:	601a      	str	r2, [r3, #0]
	if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  address[seq[j]], sizeof(SEQUENCE)) != QSPI_OK)
 8007324:	4b14      	ldr	r3, [pc, #80]	; (8007378 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	461a      	mov	r2, r3
 800732a:	4b14      	ldr	r3, [pc, #80]	; (800737c <HAL_DAC_ConvCpltCallbackCh1+0x8c>)
 800732c:	5c9b      	ldrb	r3, [r3, r2]
 800732e:	461a      	mov	r2, r3
 8007330:	4b13      	ldr	r3, [pc, #76]	; (8007380 <HAL_DAC_ConvCpltCallbackCh1+0x90>)
 8007332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007336:	4a14      	ldr	r2, [pc, #80]	; (8007388 <HAL_DAC_ConvCpltCallbackCh1+0x98>)
 8007338:	4619      	mov	r1, r3
 800733a:	4814      	ldr	r0, [pc, #80]	; (800738c <HAL_DAC_ConvCpltCallbackCh1+0x9c>)
 800733c:	f000 f938 	bl	80075b0 <BSP_QSPI_Read>
 8007340:	4603      	mov	r3, r0
 8007342:	2b00      	cmp	r3, #0
 8007344:	d001      	beq.n	800734a <HAL_DAC_ConvCpltCallbackCh1+0x5a>
		Error_Handler();
 8007346:	f000 f8a9 	bl	800749c <Error_Handler>

	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800734a:	2300      	movs	r3, #0
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007352:	4a0e      	ldr	r2, [pc, #56]	; (800738c <HAL_DAC_ConvCpltCallbackCh1+0x9c>)
 8007354:	2100      	movs	r1, #0
 8007356:	480e      	ldr	r0, [pc, #56]	; (8007390 <HAL_DAC_ConvCpltCallbackCh1+0xa0>)
 8007358:	f7f9 fa9e 	bl	8000898 <HAL_DAC_Start_DMA>

	if (j == 5) {
 800735c:	4b06      	ldr	r3, [pc, #24]	; (8007378 <HAL_DAC_ConvCpltCallbackCh1+0x88>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b05      	cmp	r3, #5
 8007362:	d103      	bne.n	800736c <HAL_DAC_ConvCpltCallbackCh1+0x7c>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8007364:	2100      	movs	r1, #0
 8007366:	480a      	ldr	r0, [pc, #40]	; (8007390 <HAL_DAC_ConvCpltCallbackCh1+0xa0>)
 8007368:	f7f9 fb62 	bl	8000a30 <HAL_DAC_Stop_DMA>
	}
	}

}
 800736c:	bf00      	nop
 800736e:	3708      	adds	r7, #8
 8007370:	46bd      	mov	sp, r7
 8007372:	bd80      	pop	{r7, pc}
 8007374:	20000030 	.word	0x20000030
 8007378:	2004e574 	.word	0x2004e574
 800737c:	20000034 	.word	0x20000034
 8007380:	20000008 	.word	0x20000008
 8007384:	2004e56c 	.word	0x2004e56c
 8007388:	00027100 	.word	0x00027100
 800738c:	20027464 	.word	0x20027464
 8007390:	20000084 	.word	0x20000084

08007394 <HAL_DFSDM_FilterRegConvCpltCallback>:

void HAL_DFSDM_FilterRegConvCpltCallback(DFSDM_Filter_HandleTypeDef *hdfsdm_filter ) {
 8007394:	b580      	push	{r7, lr}
 8007396:	b086      	sub	sp, #24
 8007398:	af02      	add	r7, sp, #8
 800739a:	6078      	str	r0, [r7, #4]

	HAL_DFSDM_FilterRegularStop_DMA(&hdfsdm1_filter0);
 800739c:	4837      	ldr	r0, [pc, #220]	; (800747c <HAL_DFSDM_FilterRegConvCpltCallback+0xe8>)
 800739e:	f7f9 ffcd 	bl	800133c <HAL_DFSDM_FilterRegularStop_DMA>
	for(uint32_t i = 0 ; i < SEQUENCE_LENGTH; i++ ){
 80073a2:	2300      	movs	r3, #0
 80073a4:	60fb      	str	r3, [r7, #12]
 80073a6:	e02b      	b.n	8007400 <HAL_DFSDM_FilterRegConvCpltCallback+0x6c>
		SEQUENCE[i] = SEQUENCE[i] >> 8; // 24 bit signed  :  −8,388,608 : 8,388,607
 80073a8:	4a35      	ldr	r2, [pc, #212]	; (8007480 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073b0:	121a      	asrs	r2, r3, #8
 80073b2:	4933      	ldr	r1, [pc, #204]	; (8007480 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		if(SEQUENCE[i] < 0 ) {
 80073ba:	4a31      	ldr	r2, [pc, #196]	; (8007480 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	da09      	bge.n	80073da <HAL_DFSDM_FilterRegConvCpltCallback+0x46>
			SEQUENCE[i]= SEQUENCE[i]+ (1<<24);
 80073c6:	4a2e      	ldr	r2, [pc, #184]	; (8007480 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073ce:	f103 7280 	add.w	r2, r3, #16777216	; 0x1000000
 80073d2:	492b      	ldr	r1, [pc, #172]	; (8007480 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		}
		if( SEQUENCE[i] >= 4096) {
 80073da:	4a29      	ldr	r2, [pc, #164]	; (8007480 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80073e6:	db08      	blt.n	80073fa <HAL_DFSDM_FilterRegConvCpltCallback+0x66>
			SEQUENCE[i] = SEQUENCE[i] >> 12;
 80073e8:	4a25      	ldr	r2, [pc, #148]	; (8007480 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073f0:	131a      	asrs	r2, r3, #12
 80073f2:	4923      	ldr	r1, [pc, #140]	; (8007480 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(uint32_t i = 0 ; i < SEQUENCE_LENGTH; i++ ){
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	3301      	adds	r3, #1
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8007406:	4293      	cmp	r3, r2
 8007408:	d9ce      	bls.n	80073a8 <HAL_DFSDM_FilterRegConvCpltCallback+0x14>
		}
	}
	if(BSP_QSPI_Write((uint8_t *) SEQUENCE, (uint32_t) address[pushButtonCounter], sizeof(SEQUENCE)) != QSPI_OK){
 800740a:	4b1e      	ldr	r3, [pc, #120]	; (8007484 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4a1e      	ldr	r2, [pc, #120]	; (8007488 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 8007410:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007414:	4a1d      	ldr	r2, [pc, #116]	; (800748c <HAL_DFSDM_FilterRegConvCpltCallback+0xf8>)
 8007416:	4619      	mov	r1, r3
 8007418:	4819      	ldr	r0, [pc, #100]	; (8007480 <HAL_DFSDM_FilterRegConvCpltCallback+0xec>)
 800741a:	f000 f91b 	bl	8007654 <BSP_QSPI_Write>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <HAL_DFSDM_FilterRegConvCpltCallback+0x94>
		Error_Handler();
 8007424:	f000 f83a 	bl	800749c <Error_Handler>
	}
	if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t) address[pushButtonCounter], sizeof(SEQUENCE)) != QSPI_OK){
 8007428:	4b16      	ldr	r3, [pc, #88]	; (8007484 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a16      	ldr	r2, [pc, #88]	; (8007488 <HAL_DFSDM_FilterRegConvCpltCallback+0xf4>)
 800742e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007432:	4a16      	ldr	r2, [pc, #88]	; (800748c <HAL_DFSDM_FilterRegConvCpltCallback+0xf8>)
 8007434:	4619      	mov	r1, r3
 8007436:	4816      	ldr	r0, [pc, #88]	; (8007490 <HAL_DFSDM_FilterRegConvCpltCallback+0xfc>)
 8007438:	f000 f8ba 	bl	80075b0 <BSP_QSPI_Read>
 800743c:	4603      	mov	r3, r0
 800743e:	2b00      	cmp	r3, #0
 8007440:	d001      	beq.n	8007446 <HAL_DFSDM_FilterRegConvCpltCallback+0xb2>
		Error_Handler();
 8007442:	f000 f82b 	bl	800749c <Error_Handler>
	}
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 8007446:	2300      	movs	r3, #0
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	f649 4340 	movw	r3, #40000	; 0x9c40
 800744e:	4a10      	ldr	r2, [pc, #64]	; (8007490 <HAL_DFSDM_FilterRegConvCpltCallback+0xfc>)
 8007450:	2100      	movs	r1, #0
 8007452:	4810      	ldr	r0, [pc, #64]	; (8007494 <HAL_DFSDM_FilterRegConvCpltCallback+0x100>)
 8007454:	f7f9 fa20 	bl	8000898 <HAL_DAC_Start_DMA>
	pushButtonCounter = (pushButtonCounter + 1) % 10;
 8007458:	4b0a      	ldr	r3, [pc, #40]	; (8007484 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	1c59      	adds	r1, r3, #1
 800745e:	4b0e      	ldr	r3, [pc, #56]	; (8007498 <HAL_DFSDM_FilterRegConvCpltCallback+0x104>)
 8007460:	fba3 2301 	umull	r2, r3, r3, r1
 8007464:	08da      	lsrs	r2, r3, #3
 8007466:	4613      	mov	r3, r2
 8007468:	009b      	lsls	r3, r3, #2
 800746a:	4413      	add	r3, r2
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	1aca      	subs	r2, r1, r3
 8007470:	4b04      	ldr	r3, [pc, #16]	; (8007484 <HAL_DFSDM_FilterRegConvCpltCallback+0xf0>)
 8007472:	601a      	str	r2, [r3, #0]

}
 8007474:	bf00      	nop
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	200000f8 	.word	0x200000f8
 8007480:	20000364 	.word	0x20000364
 8007484:	2004e564 	.word	0x2004e564
 8007488:	20000008 	.word	0x20000008
 800748c:	00027100 	.word	0x00027100
 8007490:	20027464 	.word	0x20027464
 8007494:	20000084 	.word	0x20000084
 8007498:	cccccccd 	.word	0xcccccccd

0800749c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
 80074a0:	2200      	movs	r2, #0
 80074a2:	2108      	movs	r1, #8
 80074a4:	4802      	ldr	r0, [pc, #8]	; (80074b0 <Error_Handler+0x14>)
 80074a6:	f7fa fe4d 	bl	8002144 <HAL_GPIO_WritePin>
	__BKPT();
 80074aa:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 80074ac:	bf00      	nop
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	48001000 	.word	0x48001000

080074b4 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b084      	sub	sp, #16
 80074b8:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 80074ba:	4b3b      	ldr	r3, [pc, #236]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 80074bc:	4a3b      	ldr	r2, [pc, #236]	; (80075ac <BSP_QSPI_Init+0xf8>)
 80074be:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 80074c0:	4839      	ldr	r0, [pc, #228]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 80074c2:	f7fb f859 	bl	8002578 <HAL_OSPI_DeInit>
 80074c6:	4603      	mov	r3, r0
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e067      	b.n	80075a0 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 80074d0:	f000 f990 	bl	80077f4 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 80074d4:	4b34      	ldr	r3, [pc, #208]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 80074d6:	2204      	movs	r2, #4
 80074d8:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 80074da:	4b33      	ldr	r3, [pc, #204]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 80074dc:	2200      	movs	r2, #0
 80074de:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 80074e0:	4b31      	ldr	r3, [pc, #196]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 80074e2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80074e6:	60da      	str	r2, [r3, #12]
 80074e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 80074ec:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	fa93 f3a3 	rbit	r3, r3
 80074f4:	607b      	str	r3, [r7, #4]
  return result;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d101      	bne.n	8007504 <BSP_QSPI_Init+0x50>
    return 32U;
 8007500:	2320      	movs	r3, #32
 8007502:	e003      	b.n	800750c <BSP_QSPI_Init+0x58>
  return __builtin_clz(value);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	fab3 f383 	clz	r3, r3
 800750a:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 800750c:	461a      	mov	r2, r3
 800750e:	4b26      	ldr	r3, [pc, #152]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 8007510:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8007512:	4b25      	ldr	r3, [pc, #148]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 8007514:	2201      	movs	r2, #1
 8007516:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8007518:	4b23      	ldr	r3, [pc, #140]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 800751a:	2200      	movs	r2, #0
 800751c:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 800751e:	4b22      	ldr	r3, [pc, #136]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 8007520:	2200      	movs	r2, #0
 8007522:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8007524:	4b20      	ldr	r3, [pc, #128]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 8007526:	2204      	movs	r2, #4
 8007528:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800752a:	4b1f      	ldr	r3, [pc, #124]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 800752c:	2200      	movs	r2, #0
 800752e:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8007530:	4b1d      	ldr	r3, [pc, #116]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 8007532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007536:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8007538:	4b1b      	ldr	r3, [pc, #108]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 800753a:	2200      	movs	r2, #0
 800753c:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 800753e:	4b1a      	ldr	r3, [pc, #104]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 8007540:	2200      	movs	r2, #0
 8007542:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8007544:	4818      	ldr	r0, [pc, #96]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 8007546:	f7fa ff6d 	bl	8002424 <HAL_OSPI_Init>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d001      	beq.n	8007554 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e025      	b.n	80075a0 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8007554:	4814      	ldr	r0, [pc, #80]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 8007556:	f000 f98d 	bl	8007874 <QSPI_ResetMemory>
 800755a:	4603      	mov	r3, r0
 800755c:	2b00      	cmp	r3, #0
 800755e:	d001      	beq.n	8007564 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 8007560:	2304      	movs	r3, #4
 8007562:	e01d      	b.n	80075a0 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 8007564:	2101      	movs	r1, #1
 8007566:	4810      	ldr	r0, [pc, #64]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 8007568:	f000 fa72 	bl	8007a50 <QSPI_QuadMode>
 800756c:	4603      	mov	r3, r0
 800756e:	2b00      	cmp	r3, #0
 8007570:	d001      	beq.n	8007576 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 8007572:	2301      	movs	r3, #1
 8007574:	e014      	b.n	80075a0 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 8007576:	2101      	movs	r1, #1
 8007578:	480b      	ldr	r0, [pc, #44]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 800757a:	f000 fb15 	bl	8007ba8 <QSPI_HighPerfMode>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e00b      	b.n	80075a0 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 8007588:	4b07      	ldr	r3, [pc, #28]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 800758a:	2202      	movs	r2, #2
 800758c:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 800758e:	4806      	ldr	r0, [pc, #24]	; (80075a8 <BSP_QSPI_Init+0xf4>)
 8007590:	f7fa ff48 	bl	8002424 <HAL_OSPI_Init>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 800759a:	2301      	movs	r3, #1
 800759c:	e000      	b.n	80075a0 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 800759e:	2300      	movs	r3, #0
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}
 80075a8:	2004e578 	.word	0x2004e578
 80075ac:	a0001000 	.word	0xa0001000

080075b0 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b098      	sub	sp, #96	; 0x60
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	60f8      	str	r0, [r7, #12]
 80075b8:	60b9      	str	r1, [r7, #8]
 80075ba:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 80075bc:	2300      	movs	r3, #0
 80075be:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 80075c0:	2300      	movs	r3, #0
 80075c2:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 80075c4:	23eb      	movs	r3, #235	; 0xeb
 80075c6:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 80075c8:	2301      	movs	r3, #1
 80075ca:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 80075cc:	2300      	movs	r3, #0
 80075ce:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80075d0:	2300      	movs	r3, #0
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 80075d8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80075dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 80075de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80075e2:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80075e4:	2300      	movs	r3, #0
 80075e6:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 80075e8:	23aa      	movs	r3, #170	; 0xaa
 80075ea:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 80075ec:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 80075f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 80075f2:	2300      	movs	r3, #0
 80075f4:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 80075f6:	2300      	movs	r3, #0
 80075f8:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 80075fa:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80075fe:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8007604:	2300      	movs	r3, #0
 8007606:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8007608:	2304      	movs	r3, #4
 800760a:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 800760c:	2300      	movs	r3, #0
 800760e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007610:	2300      	movs	r3, #0
 8007612:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007614:	f107 0310 	add.w	r3, r7, #16
 8007618:	f241 3288 	movw	r2, #5000	; 0x1388
 800761c:	4619      	mov	r1, r3
 800761e:	480c      	ldr	r0, [pc, #48]	; (8007650 <BSP_QSPI_Read+0xa0>)
 8007620:	f7fa ffd1 	bl	80025c6 <HAL_OSPI_Command>
 8007624:	4603      	mov	r3, r0
 8007626:	2b00      	cmp	r3, #0
 8007628:	d001      	beq.n	800762e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	e00b      	b.n	8007646 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800762e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007632:	68f9      	ldr	r1, [r7, #12]
 8007634:	4806      	ldr	r0, [pc, #24]	; (8007650 <BSP_QSPI_Read+0xa0>)
 8007636:	f7fb f8ba 	bl	80027ae <HAL_OSPI_Receive>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d001      	beq.n	8007644 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8007640:	2301      	movs	r3, #1
 8007642:	e000      	b.n	8007646 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8007644:	2300      	movs	r3, #0
}
 8007646:	4618      	mov	r0, r3
 8007648:	3760      	adds	r7, #96	; 0x60
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	2004e578 	.word	0x2004e578

08007654 <BSP_QSPI_Write>:
  * @param  WriteAddr : Write start address
  * @param  Size      : Size of data to write    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Write(uint8_t* pData, uint32_t WriteAddr, uint32_t Size)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b09c      	sub	sp, #112	; 0x70
 8007658:	af00      	add	r7, sp, #0
 800765a:	60f8      	str	r0, [r7, #12]
 800765c:	60b9      	str	r1, [r7, #8]
 800765e:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  uint32_t end_addr, current_size, current_addr;

  /* Calculation of the size between the write address and the end of the page */
  current_size = MX25R6435F_PAGE_SIZE - (WriteAddr % MX25R6435F_PAGE_SIZE);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	b2db      	uxtb	r3, r3
 8007664:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8007668:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* Check if the size of the data is less than the remaining place in the page */
  if (current_size > Size)
 800766a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	429a      	cmp	r2, r3
 8007670:	d901      	bls.n	8007676 <BSP_QSPI_Write+0x22>
  {
    current_size = Size;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	66fb      	str	r3, [r7, #108]	; 0x6c
  }

  /* Initialize the adress variables */
  current_addr = WriteAddr;
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	66bb      	str	r3, [r7, #104]	; 0x68
  end_addr = WriteAddr + Size;
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4413      	add	r3, r2
 8007680:	667b      	str	r3, [r7, #100]	; 0x64

  /* Initialize the program command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007682:	2300      	movs	r3, #0
 8007684:	617b      	str	r3, [r7, #20]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007686:	2300      	movs	r3, #0
 8007688:	61bb      	str	r3, [r7, #24]
  sCommand.Instruction        = QUAD_PAGE_PROG_CMD;
 800768a:	2338      	movs	r3, #56	; 0x38
 800768c:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 800768e:	2301      	movs	r3, #1
 8007690:	623b      	str	r3, [r7, #32]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007692:	2300      	movs	r3, #0
 8007694:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007696:	2300      	movs	r3, #0
 8007698:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_4_LINES;
 800769a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800769e:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 80076a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80076a4:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 80076a6:	2300      	movs	r3, #0
 80076a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80076aa:	2300      	movs	r3, #0
 80076ac:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DataMode           = HAL_OSPI_DATA_4_LINES;
 80076ae:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 80076b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80076b4:	2300      	movs	r3, #0
 80076b6:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DummyCycles        = 0;
 80076b8:	2300      	movs	r3, #0
 80076ba:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80076bc:	2300      	movs	r3, #0
 80076be:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80076c0:	2300      	movs	r3, #0
 80076c2:	663b      	str	r3, [r7, #96]	; 0x60
  
  /* Perform the write page by page */
  do
  {
    sCommand.Address = current_addr;
 80076c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80076c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    sCommand.NbData  = current_size;
 80076c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80076ca:	653b      	str	r3, [r7, #80]	; 0x50

    /* Enable write operations */
    if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 80076cc:	4823      	ldr	r0, [pc, #140]	; (800775c <BSP_QSPI_Write+0x108>)
 80076ce:	f000 f918 	bl	8007902 <QSPI_WriteEnable>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d001      	beq.n	80076dc <BSP_QSPI_Write+0x88>
    {
      return QSPI_ERROR;
 80076d8:	2301      	movs	r3, #1
 80076da:	e03b      	b.n	8007754 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure the command */
    if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80076dc:	f107 0314 	add.w	r3, r7, #20
 80076e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80076e4:	4619      	mov	r1, r3
 80076e6:	481d      	ldr	r0, [pc, #116]	; (800775c <BSP_QSPI_Write+0x108>)
 80076e8:	f7fa ff6d 	bl	80025c6 <HAL_OSPI_Command>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <BSP_QSPI_Write+0xa2>
    {
      return QSPI_ERROR;
 80076f2:	2301      	movs	r3, #1
 80076f4:	e02e      	b.n	8007754 <BSP_QSPI_Write+0x100>
    }
    
    /* Transmission of the data */
    if (HAL_OSPI_Transmit(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80076f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80076fa:	68f9      	ldr	r1, [r7, #12]
 80076fc:	4817      	ldr	r0, [pc, #92]	; (800775c <BSP_QSPI_Write+0x108>)
 80076fe:	f7fa ffe3 	bl	80026c8 <HAL_OSPI_Transmit>
 8007702:	4603      	mov	r3, r0
 8007704:	2b00      	cmp	r3, #0
 8007706:	d001      	beq.n	800770c <BSP_QSPI_Write+0xb8>
    {
      return QSPI_ERROR;
 8007708:	2301      	movs	r3, #1
 800770a:	e023      	b.n	8007754 <BSP_QSPI_Write+0x100>
    }
    
    /* Configure automatic polling mode to wait for end of program */  
    if (QSPI_AutoPollingMemReady(&OSPIHandle, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 800770c:	f241 3188 	movw	r1, #5000	; 0x1388
 8007710:	4812      	ldr	r0, [pc, #72]	; (800775c <BSP_QSPI_Write+0x108>)
 8007712:	f000 f952 	bl	80079ba <QSPI_AutoPollingMemReady>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d001      	beq.n	8007720 <BSP_QSPI_Write+0xcc>
    {
      return QSPI_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	e019      	b.n	8007754 <BSP_QSPI_Write+0x100>
    }
    
    /* Update the address and size variables for next page programming */
    current_addr += current_size;
 8007720:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007724:	4413      	add	r3, r2
 8007726:	66bb      	str	r3, [r7, #104]	; 0x68
    pData += current_size;
 8007728:	68fa      	ldr	r2, [r7, #12]
 800772a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800772c:	4413      	add	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]
    current_size = ((current_addr + MX25R6435F_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MX25R6435F_PAGE_SIZE;
 8007730:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007732:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8007736:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007738:	429a      	cmp	r2, r3
 800773a:	d203      	bcs.n	8007744 <BSP_QSPI_Write+0xf0>
 800773c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800773e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	e001      	b.n	8007748 <BSP_QSPI_Write+0xf4>
 8007744:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007748:	66fb      	str	r3, [r7, #108]	; 0x6c
  } while (current_addr < end_addr);
 800774a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800774c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800774e:	429a      	cmp	r2, r3
 8007750:	d3b8      	bcc.n	80076c4 <BSP_QSPI_Write+0x70>
  
  return QSPI_OK;
 8007752:	2300      	movs	r3, #0
}
 8007754:	4618      	mov	r0, r3
 8007756:	3770      	adds	r7, #112	; 0x70
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}
 800775c:	2004e578 	.word	0x2004e578

08007760 <BSP_QSPI_Erase_Block>:
  * @brief  Erases the specified block of the QSPI memory. 
  * @param  BlockAddress : Block address to erase  
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Erase_Block(uint32_t BlockAddress)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b096      	sub	sp, #88	; 0x58
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the erase command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007768:	2300      	movs	r3, #0
 800776a:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800776c:	2300      	movs	r3, #0
 800776e:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = BLOCK_ERASE_CMD;
 8007770:	23d8      	movs	r3, #216	; 0xd8
 8007772:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007774:	2301      	movs	r3, #1
 8007776:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007778:	2300      	movs	r3, #0
 800777a:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800777c:	2300      	movs	r3, #0
 800777e:	61fb      	str	r3, [r7, #28]
  sCommand.Address            = BlockAddress;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	623b      	str	r3, [r7, #32]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_1_LINE;
 8007784:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007788:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressSize        = HAL_OSPI_ADDRESS_24_BITS;
 800778a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800778e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressDtrMode     = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007790:	2300      	movs	r3, #0
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007794:	2300      	movs	r3, #0
 8007796:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 8007798:	2300      	movs	r3, #0
 800779a:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 800779c:	2300      	movs	r3, #0
 800779e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80077a0:	2300      	movs	r3, #0
 80077a2:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80077a4:	2300      	movs	r3, #0
 80077a6:	657b      	str	r3, [r7, #84]	; 0x54

  /* Enable write operations */
  if (QSPI_WriteEnable(&OSPIHandle) != QSPI_OK)
 80077a8:	4811      	ldr	r0, [pc, #68]	; (80077f0 <BSP_QSPI_Erase_Block+0x90>)
 80077aa:	f000 f8aa 	bl	8007902 <QSPI_WriteEnable>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <BSP_QSPI_Erase_Block+0x58>
  {
    return QSPI_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e017      	b.n	80077e8 <BSP_QSPI_Erase_Block+0x88>
  }

  /* Send the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80077b8:	f107 0308 	add.w	r3, r7, #8
 80077bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80077c0:	4619      	mov	r1, r3
 80077c2:	480b      	ldr	r0, [pc, #44]	; (80077f0 <BSP_QSPI_Erase_Block+0x90>)
 80077c4:	f7fa feff 	bl	80025c6 <HAL_OSPI_Command>
 80077c8:	4603      	mov	r3, r0
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d001      	beq.n	80077d2 <BSP_QSPI_Erase_Block+0x72>
  {
    return QSPI_ERROR;
 80077ce:	2301      	movs	r3, #1
 80077d0:	e00a      	b.n	80077e8 <BSP_QSPI_Erase_Block+0x88>
  }
  
  /* Configure automatic polling mode to wait for end of erase */  
  if (QSPI_AutoPollingMemReady(&OSPIHandle, MX25R6435F_BLOCK_ERASE_MAX_TIME) != QSPI_OK)
 80077d2:	f640 51ac 	movw	r1, #3500	; 0xdac
 80077d6:	4806      	ldr	r0, [pc, #24]	; (80077f0 <BSP_QSPI_Erase_Block+0x90>)
 80077d8:	f000 f8ef 	bl	80079ba <QSPI_AutoPollingMemReady>
 80077dc:	4603      	mov	r3, r0
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d001      	beq.n	80077e6 <BSP_QSPI_Erase_Block+0x86>
  {
    return QSPI_ERROR;
 80077e2:	2301      	movs	r3, #1
 80077e4:	e000      	b.n	80077e8 <BSP_QSPI_Erase_Block+0x88>
  }

  return QSPI_OK;
 80077e6:	2300      	movs	r3, #0
}
 80077e8:	4618      	mov	r0, r3
 80077ea:	3758      	adds	r7, #88	; 0x58
 80077ec:	46bd      	mov	sp, r7
 80077ee:	bd80      	pop	{r7, pc}
 80077f0:	2004e578 	.word	0x2004e578

080077f4 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b088      	sub	sp, #32
 80077f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 80077fa:	4b1c      	ldr	r3, [pc, #112]	; (800786c <BSP_QSPI_MspInit+0x78>)
 80077fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077fe:	4a1b      	ldr	r2, [pc, #108]	; (800786c <BSP_QSPI_MspInit+0x78>)
 8007800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007804:	6513      	str	r3, [r2, #80]	; 0x50
 8007806:	4b19      	ldr	r3, [pc, #100]	; (800786c <BSP_QSPI_MspInit+0x78>)
 8007808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800780a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800780e:	60bb      	str	r3, [r7, #8]
 8007810:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 8007812:	4b16      	ldr	r3, [pc, #88]	; (800786c <BSP_QSPI_MspInit+0x78>)
 8007814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007816:	4a15      	ldr	r2, [pc, #84]	; (800786c <BSP_QSPI_MspInit+0x78>)
 8007818:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800781c:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 800781e:	4b13      	ldr	r3, [pc, #76]	; (800786c <BSP_QSPI_MspInit+0x78>)
 8007820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007822:	4a12      	ldr	r2, [pc, #72]	; (800786c <BSP_QSPI_MspInit+0x78>)
 8007824:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007828:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800782a:	4b10      	ldr	r3, [pc, #64]	; (800786c <BSP_QSPI_MspInit+0x78>)
 800782c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800782e:	4a0f      	ldr	r2, [pc, #60]	; (800786c <BSP_QSPI_MspInit+0x78>)
 8007830:	f043 0310 	orr.w	r3, r3, #16
 8007834:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007836:	4b0d      	ldr	r3, [pc, #52]	; (800786c <BSP_QSPI_MspInit+0x78>)
 8007838:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800783a:	f003 0310 	and.w	r3, r3, #16
 800783e:	607b      	str	r3, [r7, #4]
 8007840:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 8007842:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8007846:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8007848:	2302      	movs	r3, #2
 800784a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 800784c:	2300      	movs	r3, #0
 800784e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8007850:	2303      	movs	r3, #3
 8007852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8007854:	230a      	movs	r3, #10
 8007856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007858:	f107 030c 	add.w	r3, r7, #12
 800785c:	4619      	mov	r1, r3
 800785e:	4804      	ldr	r0, [pc, #16]	; (8007870 <BSP_QSPI_MspInit+0x7c>)
 8007860:	f7fa f9ec 	bl	8001c3c <HAL_GPIO_Init>
}
 8007864:	bf00      	nop
 8007866:	3720      	adds	r7, #32
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}
 800786c:	40021000 	.word	0x40021000
 8007870:	48001000 	.word	0x48001000

08007874 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b096      	sub	sp, #88	; 0x58
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800787c:	2300      	movs	r3, #0
 800787e:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007880:	2300      	movs	r3, #0
 8007882:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8007884:	2366      	movs	r3, #102	; 0x66
 8007886:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007888:	2301      	movs	r3, #1
 800788a:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800788c:	2300      	movs	r3, #0
 800788e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007890:	2300      	movs	r3, #0
 8007892:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007894:	2300      	movs	r3, #0
 8007896:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007898:	2300      	movs	r3, #0
 800789a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800789c:	2300      	movs	r3, #0
 800789e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 80078a0:	2300      	movs	r3, #0
 80078a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80078a4:	2300      	movs	r3, #0
 80078a6:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80078a8:	2300      	movs	r3, #0
 80078aa:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80078ac:	f107 0308 	add.w	r3, r7, #8
 80078b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80078b4:	4619      	mov	r1, r3
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f7fa fe85 	bl	80025c6 <HAL_OSPI_Command>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 80078c2:	2301      	movs	r3, #1
 80078c4:	e019      	b.n	80078fa <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 80078c6:	2399      	movs	r3, #153	; 0x99
 80078c8:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80078ca:	f107 0308 	add.w	r3, r7, #8
 80078ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80078d2:	4619      	mov	r1, r3
 80078d4:	6878      	ldr	r0, [r7, #4]
 80078d6:	f7fa fe76 	bl	80025c6 <HAL_OSPI_Command>
 80078da:	4603      	mov	r3, r0
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d001      	beq.n	80078e4 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e00a      	b.n	80078fa <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 80078e4:	f241 3188 	movw	r1, #5000	; 0x1388
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 f866 	bl	80079ba <QSPI_AutoPollingMemReady>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 80078f4:	2301      	movs	r3, #1
 80078f6:	e000      	b.n	80078fa <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 80078f8:	2300      	movs	r3, #0
}
 80078fa:	4618      	mov	r0, r3
 80078fc:	3758      	adds	r7, #88	; 0x58
 80078fe:	46bd      	mov	sp, r7
 8007900:	bd80      	pop	{r7, pc}

08007902 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 8007902:	b580      	push	{r7, lr}
 8007904:	b09c      	sub	sp, #112	; 0x70
 8007906:	af00      	add	r7, sp, #0
 8007908:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800790a:	2300      	movs	r3, #0
 800790c:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 800790e:	2300      	movs	r3, #0
 8007910:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 8007912:	2306      	movs	r3, #6
 8007914:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007916:	2301      	movs	r3, #1
 8007918:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800791a:	2300      	movs	r3, #0
 800791c:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 800791e:	2300      	movs	r3, #0
 8007920:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007922:	2300      	movs	r3, #0
 8007924:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007926:	2300      	movs	r3, #0
 8007928:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800792a:	2300      	movs	r3, #0
 800792c:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 800792e:	2300      	movs	r3, #0
 8007930:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007932:	2300      	movs	r3, #0
 8007934:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007936:	2300      	movs	r3, #0
 8007938:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800793a:	f107 0320 	add.w	r3, r7, #32
 800793e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f7fa fe3e 	bl	80025c6 <HAL_OSPI_Command>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d001      	beq.n	8007954 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e02e      	b.n	80079b2 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 8007954:	2302      	movs	r3, #2
 8007956:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 8007958:	2302      	movs	r3, #2
 800795a:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 800795c:	2300      	movs	r3, #0
 800795e:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8007960:	2310      	movs	r3, #16
 8007962:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8007964:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007968:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800796a:	2305      	movs	r3, #5
 800796c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 800796e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007972:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8007974:	2301      	movs	r3, #1
 8007976:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8007978:	2300      	movs	r3, #0
 800797a:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800797c:	f107 0320 	add.w	r3, r7, #32
 8007980:	f241 3288 	movw	r2, #5000	; 0x1388
 8007984:	4619      	mov	r1, r3
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7fa fe1d 	bl	80025c6 <HAL_OSPI_Command>
 800798c:	4603      	mov	r3, r0
 800798e:	2b00      	cmp	r3, #0
 8007990:	d001      	beq.n	8007996 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e00d      	b.n	80079b2 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007996:	f107 030c 	add.w	r3, r7, #12
 800799a:	f241 3288 	movw	r2, #5000	; 0x1388
 800799e:	4619      	mov	r1, r3
 80079a0:	6878      	ldr	r0, [r7, #4]
 80079a2:	f7fa ffa7 	bl	80028f4 <HAL_OSPI_AutoPolling>
 80079a6:	4603      	mov	r3, r0
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 80079ac:	2301      	movs	r3, #1
 80079ae:	e000      	b.n	80079b2 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3770      	adds	r7, #112	; 0x70
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}

080079ba <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80079ba:	b580      	push	{r7, lr}
 80079bc:	b09c      	sub	sp, #112	; 0x70
 80079be:	af00      	add	r7, sp, #0
 80079c0:	6078      	str	r0, [r7, #4]
 80079c2:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80079c4:	2300      	movs	r3, #0
 80079c6:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80079c8:	2300      	movs	r3, #0
 80079ca:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 80079cc:	2305      	movs	r3, #5
 80079ce:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80079d0:	2301      	movs	r3, #1
 80079d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80079d4:	2300      	movs	r3, #0
 80079d6:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80079d8:	2300      	movs	r3, #0
 80079da:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80079dc:	2300      	movs	r3, #0
 80079de:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80079e0:	2300      	movs	r3, #0
 80079e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 80079e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80079e8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 80079ea:	2301      	movs	r3, #1
 80079ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 80079ee:	2300      	movs	r3, #0
 80079f0:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 80079f2:	2300      	movs	r3, #0
 80079f4:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80079f6:	2300      	movs	r3, #0
 80079f8:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80079fa:	2300      	movs	r3, #0
 80079fc:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 80079fe:	2300      	movs	r3, #0
 8007a00:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 8007a02:	2301      	movs	r3, #1
 8007a04:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 8007a06:	2300      	movs	r3, #0
 8007a08:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8007a0a:	2310      	movs	r3, #16
 8007a0c:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8007a0e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007a12:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a14:	f107 0320 	add.w	r3, r7, #32
 8007a18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a1c:	4619      	mov	r1, r3
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7fa fdd1 	bl	80025c6 <HAL_OSPI_Command>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e00c      	b.n	8007a48 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 8007a2e:	f107 030c 	add.w	r3, r7, #12
 8007a32:	683a      	ldr	r2, [r7, #0]
 8007a34:	4619      	mov	r1, r3
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7fa ff5c 	bl	80028f4 <HAL_OSPI_AutoPolling>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d001      	beq.n	8007a46 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e000      	b.n	8007a48 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3770      	adds	r7, #112	; 0x70
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}

08007a50 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b098      	sub	sp, #96	; 0x60
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	6078      	str	r0, [r7, #4]
 8007a58:	460b      	mov	r3, r1
 8007a5a:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007a60:	2300      	movs	r3, #0
 8007a62:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8007a64:	2305      	movs	r3, #5
 8007a66:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007a68:	2301      	movs	r3, #1
 8007a6a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007a70:	2300      	movs	r3, #0
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007a74:	2300      	movs	r3, #0
 8007a76:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007a78:	2300      	movs	r3, #0
 8007a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8007a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a80:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8007a82:	2300      	movs	r3, #0
 8007a84:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8007a86:	2300      	movs	r3, #0
 8007a88:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007a8e:	2300      	movs	r3, #0
 8007a90:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007a92:	2300      	movs	r3, #0
 8007a94:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a96:	f107 0310 	add.w	r3, r7, #16
 8007a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a9e:	4619      	mov	r1, r3
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f7fa fd90 	bl	80025c6 <HAL_OSPI_Command>
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d001      	beq.n	8007ab0 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8007aac:	2301      	movs	r3, #1
 8007aae:	e077      	b.n	8007ba0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007ab0:	f107 030f 	add.w	r3, r7, #15
 8007ab4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab8:	4619      	mov	r1, r3
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	f7fa fe77 	bl	80027ae <HAL_OSPI_Receive>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d001      	beq.n	8007aca <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 8007ac6:	2301      	movs	r3, #1
 8007ac8:	e06a      	b.n	8007ba0 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8007aca:	6878      	ldr	r0, [r7, #4]
 8007acc:	f7ff ff19 	bl	8007902 <QSPI_WriteEnable>
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d001      	beq.n	8007ada <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e062      	b.n	8007ba0 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8007ada:	78fb      	ldrb	r3, [r7, #3]
 8007adc:	2b01      	cmp	r3, #1
 8007ade:	d105      	bne.n	8007aec <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8007ae0:	7bfb      	ldrb	r3, [r7, #15]
 8007ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ae6:	b2db      	uxtb	r3, r3
 8007ae8:	73fb      	strb	r3, [r7, #15]
 8007aea:	e004      	b.n	8007af6 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8007aec:	7bfb      	ldrb	r3, [r7, #15]
 8007aee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8007af6:	2301      	movs	r3, #1
 8007af8:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007afa:	f107 0310 	add.w	r3, r7, #16
 8007afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b02:	4619      	mov	r1, r3
 8007b04:	6878      	ldr	r0, [r7, #4]
 8007b06:	f7fa fd5e 	bl	80025c6 <HAL_OSPI_Command>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8007b10:	2301      	movs	r3, #1
 8007b12:	e045      	b.n	8007ba0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007b14:	f107 030f 	add.w	r3, r7, #15
 8007b18:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b1c:	4619      	mov	r1, r3
 8007b1e:	6878      	ldr	r0, [r7, #4]
 8007b20:	f7fa fdd2 	bl	80026c8 <HAL_OSPI_Transmit>
 8007b24:	4603      	mov	r3, r0
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d001      	beq.n	8007b2e <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e038      	b.n	8007ba0 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007b2e:	f241 3188 	movw	r1, #5000	; 0x1388
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f7ff ff41 	bl	80079ba <QSPI_AutoPollingMemReady>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d001      	beq.n	8007b42 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e02e      	b.n	8007ba0 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8007b42:	2305      	movs	r3, #5
 8007b44:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007b46:	f107 0310 	add.w	r3, r7, #16
 8007b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b4e:	4619      	mov	r1, r3
 8007b50:	6878      	ldr	r0, [r7, #4]
 8007b52:	f7fa fd38 	bl	80025c6 <HAL_OSPI_Command>
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8007b5c:	2301      	movs	r3, #1
 8007b5e:	e01f      	b.n	8007ba0 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007b60:	f107 030f 	add.w	r3, r7, #15
 8007b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b68:	4619      	mov	r1, r3
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f7fa fe1f 	bl	80027ae <HAL_OSPI_Receive>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d001      	beq.n	8007b7a <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8007b76:	2301      	movs	r3, #1
 8007b78:	e012      	b.n	8007ba0 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8007b7a:	7bfb      	ldrb	r3, [r7, #15]
 8007b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d102      	bne.n	8007b8a <QSPI_QuadMode+0x13a>
 8007b84:	78fb      	ldrb	r3, [r7, #3]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d007      	beq.n	8007b9a <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8007b8a:	7bfb      	ldrb	r3, [r7, #15]
 8007b8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d004      	beq.n	8007b9e <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8007b94:	78fb      	ldrb	r3, [r7, #3]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d101      	bne.n	8007b9e <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8007b9a:	2301      	movs	r3, #1
 8007b9c:	e000      	b.n	8007ba0 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8007b9e:	2300      	movs	r3, #0
}
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	3760      	adds	r7, #96	; 0x60
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	bd80      	pop	{r7, pc}

08007ba8 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b098      	sub	sp, #96	; 0x60
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	460b      	mov	r3, r1
 8007bb2:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007bb8:	2300      	movs	r3, #0
 8007bba:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8007bbc:	2305      	movs	r3, #5
 8007bbe:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007bc0:	2301      	movs	r3, #1
 8007bc2:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8007bd4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007bd8:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8007bda:	2300      	movs	r3, #0
 8007bdc:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8007bde:	2300      	movs	r3, #0
 8007be0:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8007be2:	2301      	movs	r3, #1
 8007be4:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007be6:	2300      	movs	r3, #0
 8007be8:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007bea:	2300      	movs	r3, #0
 8007bec:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007bee:	f107 0310 	add.w	r3, r7, #16
 8007bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bf6:	4619      	mov	r1, r3
 8007bf8:	6878      	ldr	r0, [r7, #4]
 8007bfa:	f7fa fce4 	bl	80025c6 <HAL_OSPI_Command>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d001      	beq.n	8007c08 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8007c04:	2301      	movs	r3, #1
 8007c06:	e09a      	b.n	8007d3e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c08:	f107 030c 	add.w	r3, r7, #12
 8007c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c10:	4619      	mov	r1, r3
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f7fa fdcb 	bl	80027ae <HAL_OSPI_Receive>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e08d      	b.n	8007d3e <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8007c22:	2315      	movs	r3, #21
 8007c24:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8007c26:	2302      	movs	r3, #2
 8007c28:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c2a:	f107 0310 	add.w	r3, r7, #16
 8007c2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c32:	4619      	mov	r1, r3
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7fa fcc6 	bl	80025c6 <HAL_OSPI_Command>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d001      	beq.n	8007c44 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8007c40:	2301      	movs	r3, #1
 8007c42:	e07c      	b.n	8007d3e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c44:	f107 030c 	add.w	r3, r7, #12
 8007c48:	3301      	adds	r3, #1
 8007c4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c4e:	4619      	mov	r1, r3
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f7fa fdac 	bl	80027ae <HAL_OSPI_Receive>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	e06e      	b.n	8007d3e <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f7ff fe4e 	bl	8007902 <QSPI_WriteEnable>
 8007c66:	4603      	mov	r3, r0
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d001      	beq.n	8007c70 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e066      	b.n	8007d3e <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8007c70:	78fb      	ldrb	r3, [r7, #3]
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d105      	bne.n	8007c82 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	f043 0302 	orr.w	r3, r3, #2
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	73bb      	strb	r3, [r7, #14]
 8007c80:	e004      	b.n	8007c8c <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8007c82:	7bbb      	ldrb	r3, [r7, #14]
 8007c84:	f023 0302 	bic.w	r3, r3, #2
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8007c8c:	2301      	movs	r3, #1
 8007c8e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8007c90:	2303      	movs	r3, #3
 8007c92:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c94:	f107 0310 	add.w	r3, r7, #16
 8007c98:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c9c:	4619      	mov	r1, r3
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f7fa fc91 	bl	80025c6 <HAL_OSPI_Command>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d001      	beq.n	8007cae <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8007caa:	2301      	movs	r3, #1
 8007cac:	e047      	b.n	8007d3e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007cae:	f107 030c 	add.w	r3, r7, #12
 8007cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cb6:	4619      	mov	r1, r3
 8007cb8:	6878      	ldr	r0, [r7, #4]
 8007cba:	f7fa fd05 	bl	80026c8 <HAL_OSPI_Transmit>
 8007cbe:	4603      	mov	r3, r0
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d001      	beq.n	8007cc8 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8007cc4:	2301      	movs	r3, #1
 8007cc6:	e03a      	b.n	8007d3e <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007cc8:	f241 3188 	movw	r1, #5000	; 0x1388
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f7ff fe74 	bl	80079ba <QSPI_AutoPollingMemReady>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d001      	beq.n	8007cdc <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e030      	b.n	8007d3e <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8007cdc:	2315      	movs	r3, #21
 8007cde:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8007ce0:	2302      	movs	r3, #2
 8007ce2:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007ce4:	f107 0310 	add.w	r3, r7, #16
 8007ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cec:	4619      	mov	r1, r3
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7fa fc69 	bl	80025c6 <HAL_OSPI_Command>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	e01f      	b.n	8007d3e <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007cfe:	f107 030c 	add.w	r3, r7, #12
 8007d02:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d06:	4619      	mov	r1, r3
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f7fa fd50 	bl	80027ae <HAL_OSPI_Receive>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d001      	beq.n	8007d18 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8007d14:	2301      	movs	r3, #1
 8007d16:	e012      	b.n	8007d3e <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8007d18:	7b7b      	ldrb	r3, [r7, #13]
 8007d1a:	f003 0302 	and.w	r3, r3, #2
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d102      	bne.n	8007d28 <QSPI_HighPerfMode+0x180>
 8007d22:	78fb      	ldrb	r3, [r7, #3]
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d007      	beq.n	8007d38 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8007d28:	7b7b      	ldrb	r3, [r7, #13]
 8007d2a:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d004      	beq.n	8007d3c <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8007d32:	78fb      	ldrb	r3, [r7, #3]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d101      	bne.n	8007d3c <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	e000      	b.n	8007d3e <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8007d3c:	2300      	movs	r3, #0
}
 8007d3e:	4618      	mov	r0, r3
 8007d40:	3760      	adds	r7, #96	; 0x60
 8007d42:	46bd      	mov	sp, r7
 8007d44:	bd80      	pop	{r7, pc}
	...

08007d48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b083      	sub	sp, #12
 8007d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007d4e:	4b0f      	ldr	r3, [pc, #60]	; (8007d8c <HAL_MspInit+0x44>)
 8007d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d52:	4a0e      	ldr	r2, [pc, #56]	; (8007d8c <HAL_MspInit+0x44>)
 8007d54:	f043 0301 	orr.w	r3, r3, #1
 8007d58:	6613      	str	r3, [r2, #96]	; 0x60
 8007d5a:	4b0c      	ldr	r3, [pc, #48]	; (8007d8c <HAL_MspInit+0x44>)
 8007d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	607b      	str	r3, [r7, #4]
 8007d64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d66:	4b09      	ldr	r3, [pc, #36]	; (8007d8c <HAL_MspInit+0x44>)
 8007d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d6a:	4a08      	ldr	r2, [pc, #32]	; (8007d8c <HAL_MspInit+0x44>)
 8007d6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d70:	6593      	str	r3, [r2, #88]	; 0x58
 8007d72:	4b06      	ldr	r3, [pc, #24]	; (8007d8c <HAL_MspInit+0x44>)
 8007d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d7a:	603b      	str	r3, [r7, #0]
 8007d7c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	40021000 	.word	0x40021000

08007d90 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08a      	sub	sp, #40	; 0x28
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d98:	f107 0314 	add.w	r3, r7, #20
 8007d9c:	2200      	movs	r2, #0
 8007d9e:	601a      	str	r2, [r3, #0]
 8007da0:	605a      	str	r2, [r3, #4]
 8007da2:	609a      	str	r2, [r3, #8]
 8007da4:	60da      	str	r2, [r3, #12]
 8007da6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	4a2b      	ldr	r2, [pc, #172]	; (8007e5c <HAL_DAC_MspInit+0xcc>)
 8007dae:	4293      	cmp	r3, r2
 8007db0:	d14f      	bne.n	8007e52 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8007db2:	4b2b      	ldr	r3, [pc, #172]	; (8007e60 <HAL_DAC_MspInit+0xd0>)
 8007db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007db6:	4a2a      	ldr	r2, [pc, #168]	; (8007e60 <HAL_DAC_MspInit+0xd0>)
 8007db8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dbc:	6593      	str	r3, [r2, #88]	; 0x58
 8007dbe:	4b28      	ldr	r3, [pc, #160]	; (8007e60 <HAL_DAC_MspInit+0xd0>)
 8007dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007dc6:	613b      	str	r3, [r7, #16]
 8007dc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007dca:	4b25      	ldr	r3, [pc, #148]	; (8007e60 <HAL_DAC_MspInit+0xd0>)
 8007dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dce:	4a24      	ldr	r2, [pc, #144]	; (8007e60 <HAL_DAC_MspInit+0xd0>)
 8007dd0:	f043 0301 	orr.w	r3, r3, #1
 8007dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007dd6:	4b22      	ldr	r3, [pc, #136]	; (8007e60 <HAL_DAC_MspInit+0xd0>)
 8007dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007dda:	f003 0301 	and.w	r3, r3, #1
 8007dde:	60fb      	str	r3, [r7, #12]
 8007de0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007de2:	2310      	movs	r3, #16
 8007de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007de6:	2303      	movs	r3, #3
 8007de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007dea:	2300      	movs	r3, #0
 8007dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007dee:	f107 0314 	add.w	r3, r7, #20
 8007df2:	4619      	mov	r1, r3
 8007df4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007df8:	f7f9 ff20 	bl	8001c3c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8007dfc:	4b19      	ldr	r3, [pc, #100]	; (8007e64 <HAL_DAC_MspInit+0xd4>)
 8007dfe:	4a1a      	ldr	r2, [pc, #104]	; (8007e68 <HAL_DAC_MspInit+0xd8>)
 8007e00:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8007e02:	4b18      	ldr	r3, [pc, #96]	; (8007e64 <HAL_DAC_MspInit+0xd4>)
 8007e04:	2206      	movs	r2, #6
 8007e06:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007e08:	4b16      	ldr	r3, [pc, #88]	; (8007e64 <HAL_DAC_MspInit+0xd4>)
 8007e0a:	2210      	movs	r2, #16
 8007e0c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007e0e:	4b15      	ldr	r3, [pc, #84]	; (8007e64 <HAL_DAC_MspInit+0xd4>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007e14:	4b13      	ldr	r3, [pc, #76]	; (8007e64 <HAL_DAC_MspInit+0xd4>)
 8007e16:	2280      	movs	r2, #128	; 0x80
 8007e18:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007e1a:	4b12      	ldr	r3, [pc, #72]	; (8007e64 <HAL_DAC_MspInit+0xd4>)
 8007e1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e20:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007e22:	4b10      	ldr	r3, [pc, #64]	; (8007e64 <HAL_DAC_MspInit+0xd4>)
 8007e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e28:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8007e2a:	4b0e      	ldr	r3, [pc, #56]	; (8007e64 <HAL_DAC_MspInit+0xd4>)
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007e30:	4b0c      	ldr	r3, [pc, #48]	; (8007e64 <HAL_DAC_MspInit+0xd4>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007e36:	480b      	ldr	r0, [pc, #44]	; (8007e64 <HAL_DAC_MspInit+0xd4>)
 8007e38:	f7f9 fbd2 	bl	80015e0 <HAL_DMA_Init>
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d001      	beq.n	8007e46 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8007e42:	f7ff fb2b 	bl	800749c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4a06      	ldr	r2, [pc, #24]	; (8007e64 <HAL_DAC_MspInit+0xd4>)
 8007e4a:	609a      	str	r2, [r3, #8]
 8007e4c:	4a05      	ldr	r2, [pc, #20]	; (8007e64 <HAL_DAC_MspInit+0xd4>)
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8007e52:	bf00      	nop
 8007e54:	3728      	adds	r7, #40	; 0x28
 8007e56:	46bd      	mov	sp, r7
 8007e58:	bd80      	pop	{r7, pc}
 8007e5a:	bf00      	nop
 8007e5c:	40007400 	.word	0x40007400
 8007e60:	40021000 	.word	0x40021000
 8007e64:	20000098 	.word	0x20000098
 8007e68:	40020008 	.word	0x40020008

08007e6c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b0ae      	sub	sp, #184	; 0xb8
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e74:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007e78:	2200      	movs	r2, #0
 8007e7a:	601a      	str	r2, [r3, #0]
 8007e7c:	605a      	str	r2, [r3, #4]
 8007e7e:	609a      	str	r2, [r3, #8]
 8007e80:	60da      	str	r2, [r3, #12]
 8007e82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007e84:	f107 0310 	add.w	r3, r7, #16
 8007e88:	2294      	movs	r2, #148	; 0x94
 8007e8a:	2100      	movs	r1, #0
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f000 fb3b 	bl	8008508 <memset>
  if(DFSDM1_Init == 0)
 8007e92:	4b45      	ldr	r3, [pc, #276]	; (8007fa8 <HAL_DFSDM_FilterMspInit+0x13c>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d14b      	bne.n	8007f32 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8007e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e9e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ea6:	f107 0310 	add.w	r3, r7, #16
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f7fc fad2 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 8007eb0:	4603      	mov	r3, r0
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d001      	beq.n	8007eba <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8007eb6:	f7ff faf1 	bl	800749c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8007eba:	4b3c      	ldr	r3, [pc, #240]	; (8007fac <HAL_DFSDM_FilterMspInit+0x140>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	3301      	adds	r3, #1
 8007ec0:	4a3a      	ldr	r2, [pc, #232]	; (8007fac <HAL_DFSDM_FilterMspInit+0x140>)
 8007ec2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8007ec4:	4b39      	ldr	r3, [pc, #228]	; (8007fac <HAL_DFSDM_FilterMspInit+0x140>)
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	2b01      	cmp	r3, #1
 8007eca:	d10b      	bne.n	8007ee4 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8007ecc:	4b38      	ldr	r3, [pc, #224]	; (8007fb0 <HAL_DFSDM_FilterMspInit+0x144>)
 8007ece:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ed0:	4a37      	ldr	r2, [pc, #220]	; (8007fb0 <HAL_DFSDM_FilterMspInit+0x144>)
 8007ed2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ed6:	6613      	str	r3, [r2, #96]	; 0x60
 8007ed8:	4b35      	ldr	r3, [pc, #212]	; (8007fb0 <HAL_DFSDM_FilterMspInit+0x144>)
 8007eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007edc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007ee0:	60fb      	str	r3, [r7, #12]
 8007ee2:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007ee4:	4b32      	ldr	r3, [pc, #200]	; (8007fb0 <HAL_DFSDM_FilterMspInit+0x144>)
 8007ee6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ee8:	4a31      	ldr	r2, [pc, #196]	; (8007fb0 <HAL_DFSDM_FilterMspInit+0x144>)
 8007eea:	f043 0310 	orr.w	r3, r3, #16
 8007eee:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007ef0:	4b2f      	ldr	r3, [pc, #188]	; (8007fb0 <HAL_DFSDM_FilterMspInit+0x144>)
 8007ef2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef4:	f003 0310 	and.w	r3, r3, #16
 8007ef8:	60bb      	str	r3, [r7, #8]
 8007efa:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8007efc:	f44f 7320 	mov.w	r3, #640	; 0x280
 8007f00:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f04:	2302      	movs	r3, #2
 8007f06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007f10:	2300      	movs	r3, #0
 8007f12:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8007f16:	2306      	movs	r3, #6
 8007f18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007f1c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007f20:	4619      	mov	r1, r3
 8007f22:	4824      	ldr	r0, [pc, #144]	; (8007fb4 <HAL_DFSDM_FilterMspInit+0x148>)
 8007f24:	f7f9 fe8a 	bl	8001c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8007f28:	4b1f      	ldr	r3, [pc, #124]	; (8007fa8 <HAL_DFSDM_FilterMspInit+0x13c>)
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	3301      	adds	r3, #1
 8007f2e:	4a1e      	ldr	r2, [pc, #120]	; (8007fa8 <HAL_DFSDM_FilterMspInit+0x13c>)
 8007f30:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	4a20      	ldr	r2, [pc, #128]	; (8007fb8 <HAL_DFSDM_FilterMspInit+0x14c>)
 8007f38:	4293      	cmp	r3, r2
 8007f3a:	d130      	bne.n	8007f9e <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 8007f3c:	4b1f      	ldr	r3, [pc, #124]	; (8007fbc <HAL_DFSDM_FilterMspInit+0x150>)
 8007f3e:	4a20      	ldr	r2, [pc, #128]	; (8007fc0 <HAL_DFSDM_FilterMspInit+0x154>)
 8007f40:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8007f42:	4b1e      	ldr	r3, [pc, #120]	; (8007fbc <HAL_DFSDM_FilterMspInit+0x150>)
 8007f44:	2256      	movs	r2, #86	; 0x56
 8007f46:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007f48:	4b1c      	ldr	r3, [pc, #112]	; (8007fbc <HAL_DFSDM_FilterMspInit+0x150>)
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8007f4e:	4b1b      	ldr	r3, [pc, #108]	; (8007fbc <HAL_DFSDM_FilterMspInit+0x150>)
 8007f50:	2200      	movs	r2, #0
 8007f52:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8007f54:	4b19      	ldr	r3, [pc, #100]	; (8007fbc <HAL_DFSDM_FilterMspInit+0x150>)
 8007f56:	2280      	movs	r2, #128	; 0x80
 8007f58:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007f5a:	4b18      	ldr	r3, [pc, #96]	; (8007fbc <HAL_DFSDM_FilterMspInit+0x150>)
 8007f5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f60:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007f62:	4b16      	ldr	r3, [pc, #88]	; (8007fbc <HAL_DFSDM_FilterMspInit+0x150>)
 8007f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f68:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8007f6a:	4b14      	ldr	r3, [pc, #80]	; (8007fbc <HAL_DFSDM_FilterMspInit+0x150>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8007f70:	4b12      	ldr	r3, [pc, #72]	; (8007fbc <HAL_DFSDM_FilterMspInit+0x150>)
 8007f72:	2200      	movs	r2, #0
 8007f74:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8007f76:	4811      	ldr	r0, [pc, #68]	; (8007fbc <HAL_DFSDM_FilterMspInit+0x150>)
 8007f78:	f7f9 fb32 	bl	80015e0 <HAL_DMA_Init>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8007f82:	f7ff fa8b 	bl	800749c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	4a0c      	ldr	r2, [pc, #48]	; (8007fbc <HAL_DFSDM_FilterMspInit+0x150>)
 8007f8a:	62da      	str	r2, [r3, #44]	; 0x2c
 8007f8c:	4a0b      	ldr	r2, [pc, #44]	; (8007fbc <HAL_DFSDM_FilterMspInit+0x150>)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a09      	ldr	r2, [pc, #36]	; (8007fbc <HAL_DFSDM_FilterMspInit+0x150>)
 8007f96:	629a      	str	r2, [r3, #40]	; 0x28
 8007f98:	4a08      	ldr	r2, [pc, #32]	; (8007fbc <HAL_DFSDM_FilterMspInit+0x150>)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8007f9e:	bf00      	nop
 8007fa0:	37b8      	adds	r7, #184	; 0xb8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	2004e5cc 	.word	0x2004e5cc
 8007fac:	2004e5c8 	.word	0x2004e5c8
 8007fb0:	40021000 	.word	0x40021000
 8007fb4:	48001000 	.word	0x48001000
 8007fb8:	40016100 	.word	0x40016100
 8007fbc:	20000184 	.word	0x20000184
 8007fc0:	4002001c 	.word	0x4002001c

08007fc4 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b0ae      	sub	sp, #184	; 0xb8
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007fcc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	605a      	str	r2, [r3, #4]
 8007fd6:	609a      	str	r2, [r3, #8]
 8007fd8:	60da      	str	r2, [r3, #12]
 8007fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007fdc:	f107 0310 	add.w	r3, r7, #16
 8007fe0:	2294      	movs	r2, #148	; 0x94
 8007fe2:	2100      	movs	r1, #0
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	f000 fa8f 	bl	8008508 <memset>
  if(DFSDM1_Init == 0)
 8007fea:	4b2a      	ldr	r3, [pc, #168]	; (8008094 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d14b      	bne.n	800808a <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8007ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ff6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ffe:	f107 0310 	add.w	r3, r7, #16
 8008002:	4618      	mov	r0, r3
 8008004:	f7fc fa26 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 800800e:	f7ff fa45 	bl	800749c <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8008012:	4b21      	ldr	r3, [pc, #132]	; (8008098 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	3301      	adds	r3, #1
 8008018:	4a1f      	ldr	r2, [pc, #124]	; (8008098 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800801a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 800801c:	4b1e      	ldr	r3, [pc, #120]	; (8008098 <HAL_DFSDM_ChannelMspInit+0xd4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d10b      	bne.n	800803c <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8008024:	4b1d      	ldr	r3, [pc, #116]	; (800809c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8008026:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008028:	4a1c      	ldr	r2, [pc, #112]	; (800809c <HAL_DFSDM_ChannelMspInit+0xd8>)
 800802a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800802e:	6613      	str	r3, [r2, #96]	; 0x60
 8008030:	4b1a      	ldr	r3, [pc, #104]	; (800809c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8008032:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008034:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008038:	60fb      	str	r3, [r7, #12]
 800803a:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800803c:	4b17      	ldr	r3, [pc, #92]	; (800809c <HAL_DFSDM_ChannelMspInit+0xd8>)
 800803e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008040:	4a16      	ldr	r2, [pc, #88]	; (800809c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8008042:	f043 0310 	orr.w	r3, r3, #16
 8008046:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008048:	4b14      	ldr	r3, [pc, #80]	; (800809c <HAL_DFSDM_ChannelMspInit+0xd8>)
 800804a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800804c:	f003 0310 	and.w	r3, r3, #16
 8008050:	60bb      	str	r3, [r7, #8]
 8008052:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8008054:	f44f 7320 	mov.w	r3, #640	; 0x280
 8008058:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800805c:	2302      	movs	r3, #2
 800805e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008062:	2300      	movs	r3, #0
 8008064:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008068:	2300      	movs	r3, #0
 800806a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800806e:	2306      	movs	r3, #6
 8008070:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008074:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008078:	4619      	mov	r1, r3
 800807a:	4809      	ldr	r0, [pc, #36]	; (80080a0 <HAL_DFSDM_ChannelMspInit+0xdc>)
 800807c:	f7f9 fdde 	bl	8001c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8008080:	4b04      	ldr	r3, [pc, #16]	; (8008094 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	3301      	adds	r3, #1
 8008086:	4a03      	ldr	r2, [pc, #12]	; (8008094 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8008088:	6013      	str	r3, [r2, #0]
  }

}
 800808a:	bf00      	nop
 800808c:	37b8      	adds	r7, #184	; 0xb8
 800808e:	46bd      	mov	sp, r7
 8008090:	bd80      	pop	{r7, pc}
 8008092:	bf00      	nop
 8008094:	2004e5cc 	.word	0x2004e5cc
 8008098:	2004e5c8 	.word	0x2004e5c8
 800809c:	40021000 	.word	0x40021000
 80080a0:	48001000 	.word	0x48001000

080080a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b0ae      	sub	sp, #184	; 0xb8
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080ac:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80080b0:	2200      	movs	r2, #0
 80080b2:	601a      	str	r2, [r3, #0]
 80080b4:	605a      	str	r2, [r3, #4]
 80080b6:	609a      	str	r2, [r3, #8]
 80080b8:	60da      	str	r2, [r3, #12]
 80080ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80080bc:	f107 0310 	add.w	r3, r7, #16
 80080c0:	2294      	movs	r2, #148	; 0x94
 80080c2:	2100      	movs	r1, #0
 80080c4:	4618      	mov	r0, r3
 80080c6:	f000 fa1f 	bl	8008508 <memset>
  if(hi2c->Instance==I2C2)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	4a21      	ldr	r2, [pc, #132]	; (8008154 <HAL_I2C_MspInit+0xb0>)
 80080d0:	4293      	cmp	r3, r2
 80080d2:	d13b      	bne.n	800814c <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80080d4:	2380      	movs	r3, #128	; 0x80
 80080d6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80080d8:	2300      	movs	r3, #0
 80080da:	66bb      	str	r3, [r7, #104]	; 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80080dc:	f107 0310 	add.w	r3, r7, #16
 80080e0:	4618      	mov	r0, r3
 80080e2:	f7fc f9b7 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 80080e6:	4603      	mov	r3, r0
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 80080ec:	f7ff f9d6 	bl	800749c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80080f0:	4b19      	ldr	r3, [pc, #100]	; (8008158 <HAL_I2C_MspInit+0xb4>)
 80080f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080f4:	4a18      	ldr	r2, [pc, #96]	; (8008158 <HAL_I2C_MspInit+0xb4>)
 80080f6:	f043 0302 	orr.w	r3, r3, #2
 80080fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080fc:	4b16      	ldr	r3, [pc, #88]	; (8008158 <HAL_I2C_MspInit+0xb4>)
 80080fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008100:	f003 0302 	and.w	r3, r3, #2
 8008104:	60fb      	str	r3, [r7, #12]
 8008106:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8008108:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800810c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008110:	2312      	movs	r3, #18
 8008112:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008116:	2300      	movs	r3, #0
 8008118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800811c:	2303      	movs	r3, #3
 800811e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8008122:	2304      	movs	r3, #4
 8008124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008128:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800812c:	4619      	mov	r1, r3
 800812e:	480b      	ldr	r0, [pc, #44]	; (800815c <HAL_I2C_MspInit+0xb8>)
 8008130:	f7f9 fd84 	bl	8001c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8008134:	4b08      	ldr	r3, [pc, #32]	; (8008158 <HAL_I2C_MspInit+0xb4>)
 8008136:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008138:	4a07      	ldr	r2, [pc, #28]	; (8008158 <HAL_I2C_MspInit+0xb4>)
 800813a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800813e:	6593      	str	r3, [r2, #88]	; 0x58
 8008140:	4b05      	ldr	r3, [pc, #20]	; (8008158 <HAL_I2C_MspInit+0xb4>)
 8008142:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008144:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008148:	60bb      	str	r3, [r7, #8]
 800814a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800814c:	bf00      	nop
 800814e:	37b8      	adds	r7, #184	; 0xb8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	40005800 	.word	0x40005800
 8008158:	40021000 	.word	0x40021000
 800815c:	48000400 	.word	0x48000400

08008160 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b0b0      	sub	sp, #192	; 0xc0
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008168:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800816c:	2200      	movs	r2, #0
 800816e:	601a      	str	r2, [r3, #0]
 8008170:	605a      	str	r2, [r3, #4]
 8008172:	609a      	str	r2, [r3, #8]
 8008174:	60da      	str	r2, [r3, #12]
 8008176:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8008178:	f107 0318 	add.w	r3, r7, #24
 800817c:	2294      	movs	r2, #148	; 0x94
 800817e:	2100      	movs	r1, #0
 8008180:	4618      	mov	r0, r3
 8008182:	f000 f9c1 	bl	8008508 <memset>
  if(hospi->Instance==OCTOSPI1)
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a28      	ldr	r2, [pc, #160]	; (800822c <HAL_OSPI_MspInit+0xcc>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d149      	bne.n	8008224 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8008190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008194:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8008196:	2300      	movs	r3, #0
 8008198:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800819c:	f107 0318 	add.w	r3, r7, #24
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7fc f957 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d001      	beq.n	80081b0 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 80081ac:	f7ff f976 	bl	800749c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 80081b0:	4b1f      	ldr	r3, [pc, #124]	; (8008230 <HAL_OSPI_MspInit+0xd0>)
 80081b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b4:	4a1e      	ldr	r2, [pc, #120]	; (8008230 <HAL_OSPI_MspInit+0xd0>)
 80081b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80081ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081bc:	4b1c      	ldr	r3, [pc, #112]	; (8008230 <HAL_OSPI_MspInit+0xd0>)
 80081be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80081c4:	617b      	str	r3, [r7, #20]
 80081c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80081c8:	4b19      	ldr	r3, [pc, #100]	; (8008230 <HAL_OSPI_MspInit+0xd0>)
 80081ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081cc:	4a18      	ldr	r2, [pc, #96]	; (8008230 <HAL_OSPI_MspInit+0xd0>)
 80081ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80081d2:	6513      	str	r3, [r2, #80]	; 0x50
 80081d4:	4b16      	ldr	r3, [pc, #88]	; (8008230 <HAL_OSPI_MspInit+0xd0>)
 80081d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80081dc:	613b      	str	r3, [r7, #16]
 80081de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80081e0:	4b13      	ldr	r3, [pc, #76]	; (8008230 <HAL_OSPI_MspInit+0xd0>)
 80081e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081e4:	4a12      	ldr	r2, [pc, #72]	; (8008230 <HAL_OSPI_MspInit+0xd0>)
 80081e6:	f043 0310 	orr.w	r3, r3, #16
 80081ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081ec:	4b10      	ldr	r3, [pc, #64]	; (8008230 <HAL_OSPI_MspInit+0xd0>)
 80081ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081f0:	f003 0310 	and.w	r3, r3, #16
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80081f8:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80081fc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008200:	2302      	movs	r3, #2
 8008202:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008206:	2300      	movs	r3, #0
 8008208:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800820c:	2303      	movs	r3, #3
 800820e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 8008212:	230a      	movs	r3, #10
 8008214:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008218:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800821c:	4619      	mov	r1, r3
 800821e:	4805      	ldr	r0, [pc, #20]	; (8008234 <HAL_OSPI_MspInit+0xd4>)
 8008220:	f7f9 fd0c 	bl	8001c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8008224:	bf00      	nop
 8008226:	37c0      	adds	r7, #192	; 0xc0
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	a0001000 	.word	0xa0001000
 8008230:	40021000 	.word	0x40021000
 8008234:	48001000 	.word	0x48001000

08008238 <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	4a0b      	ldr	r2, [pc, #44]	; (8008274 <HAL_OSPI_MspDeInit+0x3c>)
 8008246:	4293      	cmp	r3, r2
 8008248:	d110      	bne.n	800826c <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 800824a:	4b0b      	ldr	r3, [pc, #44]	; (8008278 <HAL_OSPI_MspDeInit+0x40>)
 800824c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800824e:	4a0a      	ldr	r2, [pc, #40]	; (8008278 <HAL_OSPI_MspDeInit+0x40>)
 8008250:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008254:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 8008256:	4b08      	ldr	r3, [pc, #32]	; (8008278 <HAL_OSPI_MspDeInit+0x40>)
 8008258:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800825a:	4a07      	ldr	r2, [pc, #28]	; (8008278 <HAL_OSPI_MspDeInit+0x40>)
 800825c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008260:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8008262:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 8008266:	4805      	ldr	r0, [pc, #20]	; (800827c <HAL_OSPI_MspDeInit+0x44>)
 8008268:	f7f9 fe7a 	bl	8001f60 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 800826c:	bf00      	nop
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}
 8008274:	a0001000 	.word	0xa0001000
 8008278:	40021000 	.word	0x40021000
 800827c:	48001000 	.word	0x48001000

08008280 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008290:	d113      	bne.n	80082ba <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008292:	4b0c      	ldr	r3, [pc, #48]	; (80082c4 <HAL_TIM_Base_MspInit+0x44>)
 8008294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008296:	4a0b      	ldr	r2, [pc, #44]	; (80082c4 <HAL_TIM_Base_MspInit+0x44>)
 8008298:	f043 0301 	orr.w	r3, r3, #1
 800829c:	6593      	str	r3, [r2, #88]	; 0x58
 800829e:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <HAL_TIM_Base_MspInit+0x44>)
 80082a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	60fb      	str	r3, [r7, #12]
 80082a8:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80082aa:	2200      	movs	r2, #0
 80082ac:	2100      	movs	r1, #0
 80082ae:	201c      	movs	r0, #28
 80082b0:	f7f8 fa99 	bl	80007e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80082b4:	201c      	movs	r0, #28
 80082b6:	f7f8 fab2 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80082ba:	bf00      	nop
 80082bc:	3710      	adds	r7, #16
 80082be:	46bd      	mov	sp, r7
 80082c0:	bd80      	pop	{r7, pc}
 80082c2:	bf00      	nop
 80082c4:	40021000 	.word	0x40021000

080082c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b0ae      	sub	sp, #184	; 0xb8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80082d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80082d4:	2200      	movs	r2, #0
 80082d6:	601a      	str	r2, [r3, #0]
 80082d8:	605a      	str	r2, [r3, #4]
 80082da:	609a      	str	r2, [r3, #8]
 80082dc:	60da      	str	r2, [r3, #12]
 80082de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80082e0:	f107 0310 	add.w	r3, r7, #16
 80082e4:	2294      	movs	r2, #148	; 0x94
 80082e6:	2100      	movs	r1, #0
 80082e8:	4618      	mov	r0, r3
 80082ea:	f000 f90d 	bl	8008508 <memset>
  if(huart->Instance==USART1)
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	4a25      	ldr	r2, [pc, #148]	; (8008388 <HAL_UART_MspInit+0xc0>)
 80082f4:	4293      	cmp	r3, r2
 80082f6:	d142      	bne.n	800837e <HAL_UART_MspInit+0xb6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80082f8:	2301      	movs	r3, #1
 80082fa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80082fc:	2300      	movs	r3, #0
 80082fe:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008300:	f107 0310 	add.w	r3, r7, #16
 8008304:	4618      	mov	r0, r3
 8008306:	f7fc f8a5 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 800830a:	4603      	mov	r3, r0
 800830c:	2b00      	cmp	r3, #0
 800830e:	d001      	beq.n	8008314 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8008310:	f7ff f8c4 	bl	800749c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008314:	4b1d      	ldr	r3, [pc, #116]	; (800838c <HAL_UART_MspInit+0xc4>)
 8008316:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008318:	4a1c      	ldr	r2, [pc, #112]	; (800838c <HAL_UART_MspInit+0xc4>)
 800831a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800831e:	6613      	str	r3, [r2, #96]	; 0x60
 8008320:	4b1a      	ldr	r3, [pc, #104]	; (800838c <HAL_UART_MspInit+0xc4>)
 8008322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008324:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008328:	60fb      	str	r3, [r7, #12]
 800832a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800832c:	4b17      	ldr	r3, [pc, #92]	; (800838c <HAL_UART_MspInit+0xc4>)
 800832e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008330:	4a16      	ldr	r2, [pc, #88]	; (800838c <HAL_UART_MspInit+0xc4>)
 8008332:	f043 0302 	orr.w	r3, r3, #2
 8008336:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008338:	4b14      	ldr	r3, [pc, #80]	; (800838c <HAL_UART_MspInit+0xc4>)
 800833a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800833c:	f003 0302 	and.w	r3, r3, #2
 8008340:	60bb      	str	r3, [r7, #8]
 8008342:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008344:	23c0      	movs	r3, #192	; 0xc0
 8008346:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800834a:	2302      	movs	r3, #2
 800834c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008350:	2300      	movs	r3, #0
 8008352:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008356:	2303      	movs	r3, #3
 8008358:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800835c:	2307      	movs	r3, #7
 800835e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008362:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008366:	4619      	mov	r1, r3
 8008368:	4809      	ldr	r0, [pc, #36]	; (8008390 <HAL_UART_MspInit+0xc8>)
 800836a:	f7f9 fc67 	bl	8001c3c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800836e:	2200      	movs	r2, #0
 8008370:	2100      	movs	r1, #0
 8008372:	2025      	movs	r0, #37	; 0x25
 8008374:	f7f8 fa37 	bl	80007e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008378:	2025      	movs	r0, #37	; 0x25
 800837a:	f7f8 fa50 	bl	800081e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800837e:	bf00      	nop
 8008380:	37b8      	adds	r7, #184	; 0xb8
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	40013800 	.word	0x40013800
 800838c:	40021000 	.word	0x40021000
 8008390:	48000400 	.word	0x48000400

08008394 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008394:	b480      	push	{r7}
 8008396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008398:	e7fe      	b.n	8008398 <NMI_Handler+0x4>

0800839a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800839a:	b480      	push	{r7}
 800839c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800839e:	e7fe      	b.n	800839e <HardFault_Handler+0x4>

080083a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80083a0:	b480      	push	{r7}
 80083a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80083a4:	e7fe      	b.n	80083a4 <MemManage_Handler+0x4>

080083a6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80083a6:	b480      	push	{r7}
 80083a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80083aa:	e7fe      	b.n	80083aa <BusFault_Handler+0x4>

080083ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80083ac:	b480      	push	{r7}
 80083ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80083b0:	e7fe      	b.n	80083b0 <UsageFault_Handler+0x4>

080083b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80083b2:	b480      	push	{r7}
 80083b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80083b6:	bf00      	nop
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr

080083c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80083c0:	b480      	push	{r7}
 80083c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80083c4:	bf00      	nop
 80083c6:	46bd      	mov	sp, r7
 80083c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083cc:	4770      	bx	lr

080083ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80083ce:	b480      	push	{r7}
 80083d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80083d2:	bf00      	nop
 80083d4:	46bd      	mov	sp, r7
 80083d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083da:	4770      	bx	lr

080083dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80083e0:	f7f8 f8e2 	bl	80005a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80083e4:	bf00      	nop
 80083e6:	bd80      	pop	{r7, pc}

080083e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80083e8:	b580      	push	{r7, lr}
 80083ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 80083ec:	4802      	ldr	r0, [pc, #8]	; (80083f8 <DMA1_Channel1_IRQHandler+0x10>)
 80083ee:	f7f9 fad5 	bl	800199c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80083f2:	bf00      	nop
 80083f4:	bd80      	pop	{r7, pc}
 80083f6:	bf00      	nop
 80083f8:	20000098 	.word	0x20000098

080083fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 8008400:	4802      	ldr	r0, [pc, #8]	; (800840c <DMA1_Channel2_IRQHandler+0x10>)
 8008402:	f7f9 facb 	bl	800199c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008406:	bf00      	nop
 8008408:	bd80      	pop	{r7, pc}
 800840a:	bf00      	nop
 800840c:	20000184 	.word	0x20000184

08008410 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008414:	4802      	ldr	r0, [pc, #8]	; (8008420 <TIM2_IRQHandler+0x10>)
 8008416:	f7fc fdfd 	bl	8005014 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800841a:	bf00      	nop
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	20000288 	.word	0x20000288

08008424 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008428:	4802      	ldr	r0, [pc, #8]	; (8008434 <USART1_IRQHandler+0x10>)
 800842a:	f7fd fa37 	bl	800589c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800842e:	bf00      	nop
 8008430:	bd80      	pop	{r7, pc}
 8008432:	bf00      	nop
 8008434:	200002d4 	.word	0x200002d4

08008438 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008438:	b580      	push	{r7, lr}
 800843a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pushButton_Pin);
 800843c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008440:	f7f9 feb2 	bl	80021a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008444:	bf00      	nop
 8008446:	bd80      	pop	{r7, pc}

08008448 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008448:	b480      	push	{r7}
 800844a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800844c:	4b06      	ldr	r3, [pc, #24]	; (8008468 <SystemInit+0x20>)
 800844e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008452:	4a05      	ldr	r2, [pc, #20]	; (8008468 <SystemInit+0x20>)
 8008454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800845c:	bf00      	nop
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	e000ed00 	.word	0xe000ed00

0800846c <Reset_Handler>:
 800846c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80084a4 <LoopForever+0x2>
 8008470:	f7ff ffea 	bl	8008448 <SystemInit>
 8008474:	480c      	ldr	r0, [pc, #48]	; (80084a8 <LoopForever+0x6>)
 8008476:	490d      	ldr	r1, [pc, #52]	; (80084ac <LoopForever+0xa>)
 8008478:	4a0d      	ldr	r2, [pc, #52]	; (80084b0 <LoopForever+0xe>)
 800847a:	2300      	movs	r3, #0
 800847c:	e002      	b.n	8008484 <LoopCopyDataInit>

0800847e <CopyDataInit>:
 800847e:	58d4      	ldr	r4, [r2, r3]
 8008480:	50c4      	str	r4, [r0, r3]
 8008482:	3304      	adds	r3, #4

08008484 <LoopCopyDataInit>:
 8008484:	18c4      	adds	r4, r0, r3
 8008486:	428c      	cmp	r4, r1
 8008488:	d3f9      	bcc.n	800847e <CopyDataInit>
 800848a:	4a0a      	ldr	r2, [pc, #40]	; (80084b4 <LoopForever+0x12>)
 800848c:	4c0a      	ldr	r4, [pc, #40]	; (80084b8 <LoopForever+0x16>)
 800848e:	2300      	movs	r3, #0
 8008490:	e001      	b.n	8008496 <LoopFillZerobss>

08008492 <FillZerobss>:
 8008492:	6013      	str	r3, [r2, #0]
 8008494:	3204      	adds	r2, #4

08008496 <LoopFillZerobss>:
 8008496:	42a2      	cmp	r2, r4
 8008498:	d3fb      	bcc.n	8008492 <FillZerobss>
 800849a:	f000 f811 	bl	80084c0 <__libc_init_array>
 800849e:	f7fe fbaf 	bl	8006c00 <main>

080084a2 <LoopForever>:
 80084a2:	e7fe      	b.n	80084a2 <LoopForever>
 80084a4:	200a0000 	.word	0x200a0000
 80084a8:	20000000 	.word	0x20000000
 80084ac:	20000040 	.word	0x20000040
 80084b0:	080085b0 	.word	0x080085b0
 80084b4:	20000040 	.word	0x20000040
 80084b8:	2004e5d0 	.word	0x2004e5d0

080084bc <ADC1_IRQHandler>:
 80084bc:	e7fe      	b.n	80084bc <ADC1_IRQHandler>
	...

080084c0 <__libc_init_array>:
 80084c0:	b570      	push	{r4, r5, r6, lr}
 80084c2:	4d0d      	ldr	r5, [pc, #52]	; (80084f8 <__libc_init_array+0x38>)
 80084c4:	4c0d      	ldr	r4, [pc, #52]	; (80084fc <__libc_init_array+0x3c>)
 80084c6:	1b64      	subs	r4, r4, r5
 80084c8:	10a4      	asrs	r4, r4, #2
 80084ca:	2600      	movs	r6, #0
 80084cc:	42a6      	cmp	r6, r4
 80084ce:	d109      	bne.n	80084e4 <__libc_init_array+0x24>
 80084d0:	4d0b      	ldr	r5, [pc, #44]	; (8008500 <__libc_init_array+0x40>)
 80084d2:	4c0c      	ldr	r4, [pc, #48]	; (8008504 <__libc_init_array+0x44>)
 80084d4:	f000 f820 	bl	8008518 <_init>
 80084d8:	1b64      	subs	r4, r4, r5
 80084da:	10a4      	asrs	r4, r4, #2
 80084dc:	2600      	movs	r6, #0
 80084de:	42a6      	cmp	r6, r4
 80084e0:	d105      	bne.n	80084ee <__libc_init_array+0x2e>
 80084e2:	bd70      	pop	{r4, r5, r6, pc}
 80084e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084e8:	4798      	blx	r3
 80084ea:	3601      	adds	r6, #1
 80084ec:	e7ee      	b.n	80084cc <__libc_init_array+0xc>
 80084ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f2:	4798      	blx	r3
 80084f4:	3601      	adds	r6, #1
 80084f6:	e7f2      	b.n	80084de <__libc_init_array+0x1e>
 80084f8:	080085a8 	.word	0x080085a8
 80084fc:	080085a8 	.word	0x080085a8
 8008500:	080085a8 	.word	0x080085a8
 8008504:	080085ac 	.word	0x080085ac

08008508 <memset>:
 8008508:	4402      	add	r2, r0
 800850a:	4603      	mov	r3, r0
 800850c:	4293      	cmp	r3, r2
 800850e:	d100      	bne.n	8008512 <memset+0xa>
 8008510:	4770      	bx	lr
 8008512:	f803 1b01 	strb.w	r1, [r3], #1
 8008516:	e7f9      	b.n	800850c <memset+0x4>

08008518 <_init>:
 8008518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800851a:	bf00      	nop
 800851c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800851e:	bc08      	pop	{r3}
 8008520:	469e      	mov	lr, r3
 8008522:	4770      	bx	lr

08008524 <_fini>:
 8008524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008526:	bf00      	nop
 8008528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800852a:	bc08      	pop	{r3}
 800852c:	469e      	mov	lr, r3
 800852e:	4770      	bx	lr
