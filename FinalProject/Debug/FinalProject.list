
FinalProject.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c14  080001c0  080001c0  000101c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  08008dd4  08008dd4  00018dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008e78  08008e78  00020594  2**0
                  CONTENTS
  4 .ARM          00000008  08008e78  08008e78  00018e78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008e80  08008e80  00020594  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008e80  08008e80  00018e80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008e84  08008e84  00018e84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000594  20000000  08008e88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0002755c  20000594  0800941c  00020594  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20027af0  0800941c  00027af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020594  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bc8a  00000000  00000000  000205c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000301c  00000000  00000000  0003c24e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  0003f270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001528  00000000  00000000  000408c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002cda1  00000000  00000000  00041de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019af0  00000000  00000000  0006eb89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00115772  00000000  00000000  00088679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0019ddeb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000637c  00000000  00000000  0019de3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	20000594 	.word	0x20000594
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08008dbc 	.word	0x08008dbc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000598 	.word	0x20000598
 80001fc:	08008dbc 	.word	0x08008dbc

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005ba:	2300      	movs	r3, #0
 80005bc:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005be:	2003      	movs	r0, #3
 80005c0:	f000 f960 	bl	8000884 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005c4:	2000      	movs	r0, #0
 80005c6:	f000 f80d 	bl	80005e4 <HAL_InitTick>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d002      	beq.n	80005d6 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005d0:	2301      	movs	r3, #1
 80005d2:	71fb      	strb	r3, [r7, #7]
 80005d4:	e001      	b.n	80005da <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005d6:	f007 fb87 	bl	8007ce8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005da:	79fb      	ldrb	r3, [r7, #7]
}
 80005dc:	4618      	mov	r0, r3
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005ec:	2300      	movs	r3, #0
 80005ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <HAL_InitTick+0x6c>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d023      	beq.n	8000640 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80005f8:	4b16      	ldr	r3, [pc, #88]	; (8000654 <HAL_InitTick+0x70>)
 80005fa:	681a      	ldr	r2, [r3, #0]
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <HAL_InitTick+0x6c>)
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	4619      	mov	r1, r3
 8000602:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000606:	fbb3 f3f1 	udiv	r3, r3, r1
 800060a:	fbb2 f3f3 	udiv	r3, r2, r3
 800060e:	4618      	mov	r0, r3
 8000610:	f000 f96d 	bl	80008ee <HAL_SYSTICK_Config>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d10f      	bne.n	800063a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2b0f      	cmp	r3, #15
 800061e:	d809      	bhi.n	8000634 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000620:	2200      	movs	r2, #0
 8000622:	6879      	ldr	r1, [r7, #4]
 8000624:	f04f 30ff 	mov.w	r0, #4294967295
 8000628:	f000 f937 	bl	800089a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800062c:	4a0a      	ldr	r2, [pc, #40]	; (8000658 <HAL_InitTick+0x74>)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	6013      	str	r3, [r2, #0]
 8000632:	e007      	b.n	8000644 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000634:	2301      	movs	r3, #1
 8000636:	73fb      	strb	r3, [r7, #15]
 8000638:	e004      	b.n	8000644 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800063a:	2301      	movs	r3, #1
 800063c:	73fb      	strb	r3, [r7, #15]
 800063e:	e001      	b.n	8000644 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000640:	2301      	movs	r3, #1
 8000642:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000644:	7bfb      	ldrb	r3, [r7, #15]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	20000004 	.word	0x20000004
 8000654:	2000052c 	.word	0x2000052c
 8000658:	20000000 	.word	0x20000000

0800065c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000660:	4b06      	ldr	r3, [pc, #24]	; (800067c <HAL_IncTick+0x20>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	461a      	mov	r2, r3
 8000666:	4b06      	ldr	r3, [pc, #24]	; (8000680 <HAL_IncTick+0x24>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4413      	add	r3, r2
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <HAL_IncTick+0x24>)
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	20000004 	.word	0x20000004
 8000680:	200005b0 	.word	0x200005b0

08000684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000684:	b480      	push	{r7}
 8000686:	af00      	add	r7, sp, #0
  return uwTick;
 8000688:	4b03      	ldr	r3, [pc, #12]	; (8000698 <HAL_GetTick+0x14>)
 800068a:	681b      	ldr	r3, [r3, #0]
}
 800068c:	4618      	mov	r0, r3
 800068e:	46bd      	mov	sp, r7
 8000690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000694:	4770      	bx	lr
 8000696:	bf00      	nop
 8000698:	200005b0 	.word	0x200005b0

0800069c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006a4:	f7ff ffee 	bl	8000684 <HAL_GetTick>
 80006a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80006b4:	d005      	beq.n	80006c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_Delay+0x44>)
 80006b8:	781b      	ldrb	r3, [r3, #0]
 80006ba:	461a      	mov	r2, r3
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	4413      	add	r3, r2
 80006c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80006c2:	bf00      	nop
 80006c4:	f7ff ffde 	bl	8000684 <HAL_GetTick>
 80006c8:	4602      	mov	r2, r0
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	1ad3      	subs	r3, r2, r3
 80006ce:	68fa      	ldr	r2, [r7, #12]
 80006d0:	429a      	cmp	r2, r3
 80006d2:	d8f7      	bhi.n	80006c4 <HAL_Delay+0x28>
  {
  }
}
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop
 80006d8:	3710      	adds	r7, #16
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000004 	.word	0x20000004

080006e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b085      	sub	sp, #20
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	f003 0307 	and.w	r3, r3, #7
 80006f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 80006f6:	68db      	ldr	r3, [r3, #12]
 80006f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006fa:	68ba      	ldr	r2, [r7, #8]
 80006fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000708:	68bb      	ldr	r3, [r7, #8]
 800070a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800070c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000716:	4a04      	ldr	r2, [pc, #16]	; (8000728 <__NVIC_SetPriorityGrouping+0x44>)
 8000718:	68bb      	ldr	r3, [r7, #8]
 800071a:	60d3      	str	r3, [r2, #12]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	e000ed00 	.word	0xe000ed00

0800072c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000730:	4b04      	ldr	r3, [pc, #16]	; (8000744 <__NVIC_GetPriorityGrouping+0x18>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	0a1b      	lsrs	r3, r3, #8
 8000736:	f003 0307 	and.w	r3, r3, #7
}
 800073a:	4618      	mov	r0, r3
 800073c:	46bd      	mov	sp, r7
 800073e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000742:	4770      	bx	lr
 8000744:	e000ed00 	.word	0xe000ed00

08000748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000748:	b480      	push	{r7}
 800074a:	b083      	sub	sp, #12
 800074c:	af00      	add	r7, sp, #0
 800074e:	4603      	mov	r3, r0
 8000750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000756:	2b00      	cmp	r3, #0
 8000758:	db0b      	blt.n	8000772 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f003 021f 	and.w	r2, r3, #31
 8000760:	4907      	ldr	r1, [pc, #28]	; (8000780 <__NVIC_EnableIRQ+0x38>)
 8000762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000766:	095b      	lsrs	r3, r3, #5
 8000768:	2001      	movs	r0, #1
 800076a:	fa00 f202 	lsl.w	r2, r0, r2
 800076e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000772:	bf00      	nop
 8000774:	370c      	adds	r7, #12
 8000776:	46bd      	mov	sp, r7
 8000778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000e100 	.word	0xe000e100

08000784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	6039      	str	r1, [r7, #0]
 800078e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000794:	2b00      	cmp	r3, #0
 8000796:	db0a      	blt.n	80007ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	b2da      	uxtb	r2, r3
 800079c:	490c      	ldr	r1, [pc, #48]	; (80007d0 <__NVIC_SetPriority+0x4c>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	0112      	lsls	r2, r2, #4
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	440b      	add	r3, r1
 80007a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007ac:	e00a      	b.n	80007c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ae:	683b      	ldr	r3, [r7, #0]
 80007b0:	b2da      	uxtb	r2, r3
 80007b2:	4908      	ldr	r1, [pc, #32]	; (80007d4 <__NVIC_SetPriority+0x50>)
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	f003 030f 	and.w	r3, r3, #15
 80007ba:	3b04      	subs	r3, #4
 80007bc:	0112      	lsls	r2, r2, #4
 80007be:	b2d2      	uxtb	r2, r2
 80007c0:	440b      	add	r3, r1
 80007c2:	761a      	strb	r2, [r3, #24]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000e100 	.word	0xe000e100
 80007d4:	e000ed00 	.word	0xe000ed00

080007d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b089      	sub	sp, #36	; 0x24
 80007dc:	af00      	add	r7, sp, #0
 80007de:	60f8      	str	r0, [r7, #12]
 80007e0:	60b9      	str	r1, [r7, #8]
 80007e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	f003 0307 	and.w	r3, r3, #7
 80007ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80007ec:	69fb      	ldr	r3, [r7, #28]
 80007ee:	f1c3 0307 	rsb	r3, r3, #7
 80007f2:	2b04      	cmp	r3, #4
 80007f4:	bf28      	it	cs
 80007f6:	2304      	movcs	r3, #4
 80007f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	3304      	adds	r3, #4
 80007fe:	2b06      	cmp	r3, #6
 8000800:	d902      	bls.n	8000808 <NVIC_EncodePriority+0x30>
 8000802:	69fb      	ldr	r3, [r7, #28]
 8000804:	3b03      	subs	r3, #3
 8000806:	e000      	b.n	800080a <NVIC_EncodePriority+0x32>
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800080c:	f04f 32ff 	mov.w	r2, #4294967295
 8000810:	69bb      	ldr	r3, [r7, #24]
 8000812:	fa02 f303 	lsl.w	r3, r2, r3
 8000816:	43da      	mvns	r2, r3
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	401a      	ands	r2, r3
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000820:	f04f 31ff 	mov.w	r1, #4294967295
 8000824:	697b      	ldr	r3, [r7, #20]
 8000826:	fa01 f303 	lsl.w	r3, r1, r3
 800082a:	43d9      	mvns	r1, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000830:	4313      	orrs	r3, r2
         );
}
 8000832:	4618      	mov	r0, r3
 8000834:	3724      	adds	r7, #36	; 0x24
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr
	...

08000840 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	3b01      	subs	r3, #1
 800084c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000850:	d301      	bcc.n	8000856 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000852:	2301      	movs	r3, #1
 8000854:	e00f      	b.n	8000876 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000856:	4a0a      	ldr	r2, [pc, #40]	; (8000880 <SysTick_Config+0x40>)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	3b01      	subs	r3, #1
 800085c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800085e:	210f      	movs	r1, #15
 8000860:	f04f 30ff 	mov.w	r0, #4294967295
 8000864:	f7ff ff8e 	bl	8000784 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000868:	4b05      	ldr	r3, [pc, #20]	; (8000880 <SysTick_Config+0x40>)
 800086a:	2200      	movs	r2, #0
 800086c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800086e:	4b04      	ldr	r3, [pc, #16]	; (8000880 <SysTick_Config+0x40>)
 8000870:	2207      	movs	r2, #7
 8000872:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	e000e010 	.word	0xe000e010

08000884 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800088c:	6878      	ldr	r0, [r7, #4]
 800088e:	f7ff ff29 	bl	80006e4 <__NVIC_SetPriorityGrouping>
}
 8000892:	bf00      	nop
 8000894:	3708      	adds	r7, #8
 8000896:	46bd      	mov	sp, r7
 8000898:	bd80      	pop	{r7, pc}

0800089a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800089a:	b580      	push	{r7, lr}
 800089c:	b086      	sub	sp, #24
 800089e:	af00      	add	r7, sp, #0
 80008a0:	4603      	mov	r3, r0
 80008a2:	60b9      	str	r1, [r7, #8]
 80008a4:	607a      	str	r2, [r7, #4]
 80008a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008a8:	2300      	movs	r3, #0
 80008aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008ac:	f7ff ff3e 	bl	800072c <__NVIC_GetPriorityGrouping>
 80008b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008b2:	687a      	ldr	r2, [r7, #4]
 80008b4:	68b9      	ldr	r1, [r7, #8]
 80008b6:	6978      	ldr	r0, [r7, #20]
 80008b8:	f7ff ff8e 	bl	80007d8 <NVIC_EncodePriority>
 80008bc:	4602      	mov	r2, r0
 80008be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008c2:	4611      	mov	r1, r2
 80008c4:	4618      	mov	r0, r3
 80008c6:	f7ff ff5d 	bl	8000784 <__NVIC_SetPriority>
}
 80008ca:	bf00      	nop
 80008cc:	3718      	adds	r7, #24
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}

080008d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008d2:	b580      	push	{r7, lr}
 80008d4:	b082      	sub	sp, #8
 80008d6:	af00      	add	r7, sp, #0
 80008d8:	4603      	mov	r3, r0
 80008da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80008dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff ff31 	bl	8000748 <__NVIC_EnableIRQ>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b082      	sub	sp, #8
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff ffa2 	bl	8000840 <SysTick_Config>
 80008fc:	4603      	mov	r3, r0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	2b00      	cmp	r3, #0
 8000912:	d101      	bne.n	8000918 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000914:	2301      	movs	r3, #1
 8000916:	e014      	b.n	8000942 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	791b      	ldrb	r3, [r3, #4]
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d105      	bne.n	800092e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	2200      	movs	r2, #0
 8000926:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f007 fa01 	bl	8007d30 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2202      	movs	r2, #2
 8000932:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	2201      	movs	r2, #1
 800093e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000940:	2300      	movs	r3, #0
}
 8000942:	4618      	mov	r0, r3
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
	...

0800094c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b086      	sub	sp, #24
 8000950:	af00      	add	r7, sp, #0
 8000952:	60f8      	str	r0, [r7, #12]
 8000954:	60b9      	str	r1, [r7, #8]
 8000956:	607a      	str	r2, [r7, #4]
 8000958:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	795b      	ldrb	r3, [r3, #5]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d101      	bne.n	800096a <HAL_DAC_Start_DMA+0x1e>
 8000966:	2302      	movs	r3, #2
 8000968:	e0ab      	b.n	8000ac2 <HAL_DAC_Start_DMA+0x176>
 800096a:	68fb      	ldr	r3, [r7, #12]
 800096c:	2201      	movs	r2, #1
 800096e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2202      	movs	r2, #2
 8000974:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d12f      	bne.n	80009dc <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	4a52      	ldr	r2, [pc, #328]	; (8000acc <HAL_DAC_Start_DMA+0x180>)
 8000982:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	4a51      	ldr	r2, [pc, #324]	; (8000ad0 <HAL_DAC_Start_DMA+0x184>)
 800098a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	689b      	ldr	r3, [r3, #8]
 8000990:	4a50      	ldr	r2, [pc, #320]	; (8000ad4 <HAL_DAC_Start_DMA+0x188>)
 8000992:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	681a      	ldr	r2, [r3, #0]
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80009a2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80009a4:	6a3b      	ldr	r3, [r7, #32]
 80009a6:	2b08      	cmp	r3, #8
 80009a8:	d013      	beq.n	80009d2 <HAL_DAC_Start_DMA+0x86>
 80009aa:	6a3b      	ldr	r3, [r7, #32]
 80009ac:	2b08      	cmp	r3, #8
 80009ae:	d845      	bhi.n	8000a3c <HAL_DAC_Start_DMA+0xf0>
 80009b0:	6a3b      	ldr	r3, [r7, #32]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d003      	beq.n	80009be <HAL_DAC_Start_DMA+0x72>
 80009b6:	6a3b      	ldr	r3, [r7, #32]
 80009b8:	2b04      	cmp	r3, #4
 80009ba:	d005      	beq.n	80009c8 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80009bc:	e03e      	b.n	8000a3c <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80009be:	68fb      	ldr	r3, [r7, #12]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	3308      	adds	r3, #8
 80009c4:	613b      	str	r3, [r7, #16]
        break;
 80009c6:	e03c      	b.n	8000a42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	330c      	adds	r3, #12
 80009ce:	613b      	str	r3, [r7, #16]
        break;
 80009d0:	e037      	b.n	8000a42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	3310      	adds	r3, #16
 80009d8:	613b      	str	r3, [r7, #16]
        break;
 80009da:	e032      	b.n	8000a42 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	68db      	ldr	r3, [r3, #12]
 80009e0:	4a3d      	ldr	r2, [pc, #244]	; (8000ad8 <HAL_DAC_Start_DMA+0x18c>)
 80009e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	68db      	ldr	r3, [r3, #12]
 80009e8:	4a3c      	ldr	r2, [pc, #240]	; (8000adc <HAL_DAC_Start_DMA+0x190>)
 80009ea:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	4a3b      	ldr	r2, [pc, #236]	; (8000ae0 <HAL_DAC_Start_DMA+0x194>)
 80009f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80009f4:	68fb      	ldr	r3, [r7, #12]
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	681a      	ldr	r2, [r3, #0]
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a02:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8000a04:	6a3b      	ldr	r3, [r7, #32]
 8000a06:	2b08      	cmp	r3, #8
 8000a08:	d013      	beq.n	8000a32 <HAL_DAC_Start_DMA+0xe6>
 8000a0a:	6a3b      	ldr	r3, [r7, #32]
 8000a0c:	2b08      	cmp	r3, #8
 8000a0e:	d817      	bhi.n	8000a40 <HAL_DAC_Start_DMA+0xf4>
 8000a10:	6a3b      	ldr	r3, [r7, #32]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d003      	beq.n	8000a1e <HAL_DAC_Start_DMA+0xd2>
 8000a16:	6a3b      	ldr	r3, [r7, #32]
 8000a18:	2b04      	cmp	r3, #4
 8000a1a:	d005      	beq.n	8000a28 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8000a1c:	e010      	b.n	8000a40 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	3314      	adds	r3, #20
 8000a24:	613b      	str	r3, [r7, #16]
        break;
 8000a26:	e00c      	b.n	8000a42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	3318      	adds	r3, #24
 8000a2e:	613b      	str	r3, [r7, #16]
        break;
 8000a30:	e007      	b.n	8000a42 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	331c      	adds	r3, #28
 8000a38:	613b      	str	r3, [r7, #16]
        break;
 8000a3a:	e002      	b.n	8000a42 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000a3c:	bf00      	nop
 8000a3e:	e000      	b.n	8000a42 <HAL_DAC_Start_DMA+0xf6>
        break;
 8000a40:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d111      	bne.n	8000a6c <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	68fb      	ldr	r3, [r7, #12]
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000a56:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	6898      	ldr	r0, [r3, #8]
 8000a5c:	6879      	ldr	r1, [r7, #4]
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	693a      	ldr	r2, [r7, #16]
 8000a62:	f000 fd37 	bl	80014d4 <HAL_DMA_Start_IT>
 8000a66:	4603      	mov	r3, r0
 8000a68:	75fb      	strb	r3, [r7, #23]
 8000a6a:	e010      	b.n	8000a8e <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000a6c:	68fb      	ldr	r3, [r7, #12]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8000a7a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	68d8      	ldr	r0, [r3, #12]
 8000a80:	6879      	ldr	r1, [r7, #4]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	693a      	ldr	r2, [r7, #16]
 8000a86:	f000 fd25 	bl	80014d4 <HAL_DMA_Start_IT>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2200      	movs	r2, #0
 8000a92:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8000a94:	7dfb      	ldrb	r3, [r7, #23]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d10c      	bne.n	8000ab4 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	6819      	ldr	r1, [r3, #0]
 8000aa0:	68bb      	ldr	r3, [r7, #8]
 8000aa2:	f003 0310 	and.w	r3, r3, #16
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	409a      	lsls	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	430a      	orrs	r2, r1
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	e005      	b.n	8000ac0 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	691b      	ldr	r3, [r3, #16]
 8000ab8:	f043 0204 	orr.w	r2, r3, #4
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8000ac0:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	3718      	adds	r7, #24
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	08000e19 	.word	0x08000e19
 8000ad0:	08000e3b 	.word	0x08000e3b
 8000ad4:	08000e57 	.word	0x08000e57
 8000ad8:	08000ec1 	.word	0x08000ec1
 8000adc:	08000ee3 	.word	0x08000ee3
 8000ae0:	08000eff 	.word	0x08000eff

08000ae4 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b082      	sub	sp, #8
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	6819      	ldr	r1, [r3, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	f003 0310 	and.w	r3, r3, #16
 8000afa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000afe:	fa02 f303 	lsl.w	r3, r2, r3
 8000b02:	43da      	mvns	r2, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	400a      	ands	r2, r1
 8000b0a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	6819      	ldr	r1, [r3, #0]
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	f003 0310 	and.w	r3, r3, #16
 8000b18:	2201      	movs	r2, #1
 8000b1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b1e:	43da      	mvns	r2, r3
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	400a      	ands	r2, r1
 8000b26:	601a      	str	r2, [r3, #0]
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d10d      	bne.n	8000b4a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	689b      	ldr	r3, [r3, #8]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 fd49 	bl	80015ca <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000b46:	601a      	str	r2, [r3, #0]
 8000b48:	e00c      	b.n	8000b64 <HAL_DAC_Stop_DMA+0x80>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	68db      	ldr	r3, [r3, #12]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fd3b 	bl	80015ca <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	681a      	ldr	r2, [r3, #0]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8000b62:	601a      	str	r2, [r3, #0]
  /* Disable the DAC DMA underrun interrupt */
  __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
#endif /* STM32L451xx STM32L452xx STM32L462xx */

  /* Return function status */
  return HAL_OK;
 8000b64:	2300      	movs	r3, #0
}
 8000b66:	4618      	mov	r0, r3
 8000b68:	3708      	adds	r7, #8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}

08000b6e <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	b083      	sub	sp, #12
 8000b72:	af00      	add	r7, sp, #0
 8000b74:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8000b76:	bf00      	nop
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr

08000b82 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000b82:	b480      	push	{r7}
 8000b84:	b083      	sub	sp, #12
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8000b8a:	bf00      	nop
 8000b8c:	370c      	adds	r7, #12
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b94:	4770      	bx	lr
	...

08000b98 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b088      	sub	sp, #32
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	60f8      	str	r0, [r7, #12]
 8000ba0:	60b9      	str	r1, [r7, #8]
 8000ba2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	61bb      	str	r3, [r7, #24]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	795b      	ldrb	r3, [r3, #5]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d101      	bne.n	8000bb4 <HAL_DAC_ConfigChannel+0x1c>
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	e12a      	b.n	8000e0a <HAL_DAC_ConfigChannel+0x272>
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	2202      	movs	r2, #2
 8000bbe:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b04      	cmp	r3, #4
 8000bc6:	d174      	bne.n	8000cb2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8000bc8:	f7ff fd5c 	bl	8000684 <HAL_GetTick>
 8000bcc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d134      	bne.n	8000c3e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000bd4:	e011      	b.n	8000bfa <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000bd6:	f7ff fd55 	bl	8000684 <HAL_GetTick>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	69bb      	ldr	r3, [r7, #24]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	2b01      	cmp	r3, #1
 8000be2:	d90a      	bls.n	8000bfa <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	691b      	ldr	r3, [r3, #16]
 8000be8:	f043 0208 	orr.w	r2, r3, #8
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2203      	movs	r2, #3
 8000bf4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000bf6:	2303      	movs	r3, #3
 8000bf8:	e107      	b.n	8000e0a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d1e6      	bne.n	8000bd6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff fd47 	bl	800069c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	68ba      	ldr	r2, [r7, #8]
 8000c14:	69d2      	ldr	r2, [r2, #28]
 8000c16:	641a      	str	r2, [r3, #64]	; 0x40
 8000c18:	e01e      	b.n	8000c58 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8000c1a:	f7ff fd33 	bl	8000684 <HAL_GetTick>
 8000c1e:	4602      	mov	r2, r0
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	1ad3      	subs	r3, r2, r3
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d90a      	bls.n	8000c3e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	691b      	ldr	r3, [r3, #16]
 8000c2c:	f043 0208 	orr.w	r2, r3, #8
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	2203      	movs	r2, #3
 8000c38:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e0e5      	b.n	8000e0a <HAL_DAC_ConfigChannel+0x272>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8000c3e:	68fb      	ldr	r3, [r7, #12]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	dbe8      	blt.n	8000c1a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8000c48:	2001      	movs	r0, #1
 8000c4a:	f7ff fd27 	bl	800069c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	69d2      	ldr	r2, [r2, #28]
 8000c56:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	f003 0310 	and.w	r3, r3, #16
 8000c64:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8000c68:	fa01 f303 	lsl.w	r3, r1, r3
 8000c6c:	43db      	mvns	r3, r3
 8000c6e:	ea02 0103 	and.w	r1, r2, r3
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	6a1a      	ldr	r2, [r3, #32]
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f003 0310 	and.w	r3, r3, #16
 8000c7c:	409a      	lsls	r2, r3
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	430a      	orrs	r2, r1
 8000c84:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	f003 0310 	and.w	r3, r3, #16
 8000c92:	21ff      	movs	r1, #255	; 0xff
 8000c94:	fa01 f303 	lsl.w	r3, r1, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	ea02 0103 	and.w	r1, r2, r3
 8000c9e:	68bb      	ldr	r3, [r7, #8]
 8000ca0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f003 0310 	and.w	r3, r3, #16
 8000ca8:	409a      	lsls	r2, r3
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	430a      	orrs	r2, r1
 8000cb0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	695b      	ldr	r3, [r3, #20]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d11d      	bne.n	8000cf6 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cc0:	61fb      	str	r3, [r7, #28]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f003 0310 	and.w	r3, r3, #16
 8000cc8:	221f      	movs	r2, #31
 8000cca:	fa02 f303 	lsl.w	r3, r2, r3
 8000cce:	43db      	mvns	r3, r3
 8000cd0:	69fa      	ldr	r2, [r7, #28]
 8000cd2:	4013      	ands	r3, r2
 8000cd4:	61fb      	str	r3, [r7, #28]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8000cd6:	68bb      	ldr	r3, [r7, #8]
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0310 	and.w	r3, r3, #16
 8000ce2:	697a      	ldr	r2, [r7, #20]
 8000ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce8:	69fa      	ldr	r2, [r7, #28]
 8000cea:	4313      	orrs	r3, r2
 8000cec:	61fb      	str	r3, [r7, #28]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	69fa      	ldr	r2, [r7, #28]
 8000cf4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cfc:	61fb      	str	r3, [r7, #28]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f003 0310 	and.w	r3, r3, #16
 8000d04:	2207      	movs	r2, #7
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	43db      	mvns	r3, r3
 8000d0c:	69fa      	ldr	r2, [r7, #28]
 8000d0e:	4013      	ands	r3, r2
 8000d10:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	685a      	ldr	r2, [r3, #4]
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	68db      	ldr	r3, [r3, #12]
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	691b      	ldr	r3, [r3, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	f003 0310 	and.w	r3, r3, #16
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d30:	69fa      	ldr	r2, [r7, #28]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	61fb      	str	r3, [r7, #28]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	69fa      	ldr	r2, [r7, #28]
 8000d3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	6819      	ldr	r1, [r3, #0]
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f003 0310 	and.w	r3, r3, #16
 8000d4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d52:	43da      	mvns	r2, r3
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	400a      	ands	r2, r1
 8000d5a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	61fb      	str	r3, [r7, #28]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0310 	and.w	r3, r3, #16
 8000d6a:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	69fa      	ldr	r2, [r7, #28]
 8000d76:	4013      	ands	r3, r2
 8000d78:	61fb      	str	r3, [r7, #28]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8000d7a:	68bb      	ldr	r3, [r7, #8]
 8000d7c:	689b      	ldr	r3, [r3, #8]
 8000d7e:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f003 0310 	and.w	r3, r3, #16
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69fa      	ldr	r2, [r7, #28]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61fb      	str	r3, [r7, #28]
#if defined (STM32L4P5xx) || defined (STM32L4Q5xx) || defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ == sConfig->DAC_HighFrequency)
 8000d92:	68bb      	ldr	r3, [r7, #8]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d9a:	d104      	bne.n	8000da6 <HAL_DAC_ConfigChannel+0x20e>
  {
    tmpreg1 |= DAC_CR_HFSEL;
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000da2:	61fb      	str	r3, [r7, #28]
 8000da4:	e018      	b.n	8000dd8 <HAL_DAC_ConfigChannel+0x240>
  }
  else
  {
    if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE == sConfig->DAC_HighFrequency)
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d104      	bne.n	8000db8 <HAL_DAC_ConfigChannel+0x220>
    {
      tmpreg1 &= ~(DAC_CR_HFSEL);
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000db4:	61fb      	str	r3, [r7, #28]
 8000db6:	e00f      	b.n	8000dd8 <HAL_DAC_ConfigChannel+0x240>
    }
    else /* Automatic selection */
    {
      hclkfreq = HAL_RCC_GetHCLKFreq();
 8000db8:	f003 f800 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8000dbc:	6138      	str	r0, [r7, #16]
      if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8000dbe:	693b      	ldr	r3, [r7, #16]
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <HAL_DAC_ConfigChannel+0x27c>)
 8000dc2:	4293      	cmp	r3, r2
 8000dc4:	d904      	bls.n	8000dd0 <HAL_DAC_ConfigChannel+0x238>
      {
        /* High frequency enable when HCLK frequency higher than 80   */
         tmpreg1 |= DAC_CR_HFSEL;
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000dcc:	61fb      	str	r3, [r7, #28]
 8000dce:	e003      	b.n	8000dd8 <HAL_DAC_ConfigChannel+0x240>
      }
      else
      {
        /* High frequency disable when HCLK frequency higher than 80  */
        tmpreg1 &= ~(DAC_CR_HFSEL);
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000dd6:	61fb      	str	r3, [r7, #28]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	69fa      	ldr	r2, [r7, #28]
 8000dde:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	6819      	ldr	r1, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	f003 0310 	and.w	r3, r3, #16
 8000dec:	22c0      	movs	r2, #192	; 0xc0
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	43da      	mvns	r2, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	400a      	ands	r2, r1
 8000dfa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	2201      	movs	r2, #1
 8000e00:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	2200      	movs	r2, #0
 8000e06:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3720      	adds	r7, #32
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	04c4b400 	.word	0x04c4b400

08000e18 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e24:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8000e26:	68f8      	ldr	r0, [r7, #12]
 8000e28:	f006 fb0c 	bl	8007444 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	2201      	movs	r2, #1
 8000e30:	711a      	strb	r2, [r3, #4]
}
 8000e32:	bf00      	nop
 8000e34:	3710      	adds	r7, #16
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b084      	sub	sp, #16
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e46:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8000e48:	68f8      	ldr	r0, [r7, #12]
 8000e4a:	f7ff fe90 	bl	8000b6e <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b084      	sub	sp, #16
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e62:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	691b      	ldr	r3, [r3, #16]
 8000e68:	f043 0204 	orr.w	r2, r3, #4
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8000e70:	68f8      	ldr	r0, [r7, #12]
 8000e72:	f7ff fe86 	bl	8000b82 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	2201      	movs	r2, #1
 8000e7a:	711a      	strb	r2, [r3, #4]
}
 8000e7c:	bf00      	nop
 8000e7e:	3710      	adds	r7, #16
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8000e8c:	bf00      	nop
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	b083      	sub	sp, #12
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8000ea0:	bf00      	nop
 8000ea2:	370c      	adds	r7, #12
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ecc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8000ece:	68f8      	ldr	r0, [r7, #12]
 8000ed0:	f7ff ffd8 	bl	8000e84 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	711a      	strb	r2, [r3, #4]
}
 8000eda:	bf00      	nop
 8000edc:	3710      	adds	r7, #16
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}

08000ee2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	b084      	sub	sp, #16
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eee:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8000ef0:	68f8      	ldr	r0, [r7, #12]
 8000ef2:	f7ff ffd1 	bl	8000e98 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}

08000efe <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b084      	sub	sp, #16
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	691b      	ldr	r3, [r3, #16]
 8000f10:	f043 0204 	orr.w	r2, r3, #4
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f7ff ffc7 	bl	8000eac <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	2201      	movs	r2, #1
 8000f22:	711a      	strb	r2, [r3, #4]
}
 8000f24:	bf00      	nop
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d101      	bne.n	8000f3e <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e0ac      	b.n	8001098 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4618      	mov	r0, r3
 8000f44:	f000 f9d2 	bl	80012ec <DFSDM_GetChannelFromInstance>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	4a55      	ldr	r2, [pc, #340]	; (80010a0 <HAL_DFSDM_ChannelInit+0x174>)
 8000f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e09f      	b.n	8001098 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f007 f803 	bl	8007f64 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8000f5e:	4b51      	ldr	r3, [pc, #324]	; (80010a4 <HAL_DFSDM_ChannelInit+0x178>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	3301      	adds	r3, #1
 8000f64:	4a4f      	ldr	r2, [pc, #316]	; (80010a4 <HAL_DFSDM_ChannelInit+0x178>)
 8000f66:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8000f68:	4b4e      	ldr	r3, [pc, #312]	; (80010a4 <HAL_DFSDM_ChannelInit+0x178>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	d125      	bne.n	8000fbc <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8000f70:	4b4d      	ldr	r3, [pc, #308]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	4a4c      	ldr	r2, [pc, #304]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000f7a:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689b      	ldr	r3, [r3, #8]
 8000f84:	4948      	ldr	r1, [pc, #288]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8000f8a:	4b47      	ldr	r3, [pc, #284]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4a46      	ldr	r2, [pc, #280]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000f90:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 8000f94:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	791b      	ldrb	r3, [r3, #4]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d108      	bne.n	8000fb0 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8000f9e:	4b42      	ldr	r3, [pc, #264]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fa0:	681a      	ldr	r2, [r3, #0]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	3b01      	subs	r3, #1
 8000fa8:	041b      	lsls	r3, r3, #16
 8000faa:	493f      	ldr	r1, [pc, #252]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fac:	4313      	orrs	r3, r2
 8000fae:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8000fb0:	4b3d      	ldr	r3, [pc, #244]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a3c      	ldr	r2, [pc, #240]	; (80010a8 <HAL_DFSDM_ChannelInit+0x17c>)
 8000fb6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fba:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8000fca:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6819      	ldr	r1, [r3, #0]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000fda:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8000fe0:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	430a      	orrs	r2, r1
 8000fe8:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	681a      	ldr	r2, [r3, #0]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f022 020f 	bic.w	r2, r2, #15
 8000ff8:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	6819      	ldr	r1, [r3, #0]
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8001008:	431a      	orrs	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	430a      	orrs	r2, r1
 8001010:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8001020:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	6899      	ldr	r1, [r3, #8]
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	3b01      	subs	r3, #1
 8001032:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8001034:	431a      	orrs	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	430a      	orrs	r2, r1
 800103c:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	685a      	ldr	r2, [r3, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f002 0207 	and.w	r2, r2, #7
 800104c:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	6859      	ldr	r1, [r3, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001058:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8001060:	431a      	orrs	r2, r3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	430a      	orrs	r2, r1
 8001068:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001078:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2201      	movs	r2, #1
 800107e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f000 f930 	bl	80012ec <DFSDM_GetChannelFromInstance>
 800108c:	4602      	mov	r2, r0
 800108e:	4904      	ldr	r1, [pc, #16]	; (80010a0 <HAL_DFSDM_ChannelInit+0x174>)
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8001096:	2300      	movs	r3, #0
}
 8001098:	4618      	mov	r0, r3
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	200005b8 	.word	0x200005b8
 80010a4:	200005b4 	.word	0x200005b4
 80010a8:	40016000 	.word	0x40016000

080010ac <HAL_DFSDM_FilterInit>:
  *         in the DFSDM_FilterInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_filter DFSDM filter handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_FilterInit(DFSDM_Filter_HandleTypeDef *hdfsdm_filter)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_filter == NULL)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d101      	bne.n	80010be <HAL_DFSDM_FilterInit+0x12>
  {
    return HAL_ERROR;
 80010ba:	2301      	movs	r3, #1
 80010bc:	e0ca      	b.n	8001254 <HAL_DFSDM_FilterInit+0x1a8>
  assert_param(IS_DFSDM_FILTER_SINC_ORDER(hdfsdm_filter->Init.FilterParam.SincOrder));
  assert_param(IS_DFSDM_FILTER_OVS_RATIO(hdfsdm_filter->Init.FilterParam.Oversampling));
  assert_param(IS_DFSDM_FILTER_INTEGRATOR_OVS_RATIO(hdfsdm_filter->Init.FilterParam.IntOversampling));

  /* Check parameters compatibility */
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a66      	ldr	r2, [pc, #408]	; (800125c <HAL_DFSDM_FilterInit+0x1b0>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d109      	bne.n	80010dc <HAL_DFSDM_FilterInit+0x30>
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
  if ((hdfsdm_filter->Instance == DFSDM1_Filter0) &&
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d003      	beq.n	80010d8 <HAL_DFSDM_FilterInit+0x2c>
       (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_SYNC_TRIGGER)))
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	68db      	ldr	r3, [r3, #12]
      ((hdfsdm_filter->Init.RegularParam.Trigger  == DFSDM_FILTER_SYNC_TRIGGER) ||
 80010d4:	2b01      	cmp	r3, #1
 80010d6:	d101      	bne.n	80010dc <HAL_DFSDM_FilterInit+0x30>
  {
    return HAL_ERROR;
 80010d8:	2301      	movs	r3, #1
 80010da:	e0bb      	b.n	8001254 <HAL_DFSDM_FilterInit+0x1a8>
  }

  /* Initialize DFSDM filter variables with default values */
  hdfsdm_filter->RegularContMode     = DFSDM_CONTINUOUS_CONV_OFF;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2200      	movs	r2, #0
 80010e0:	631a      	str	r2, [r3, #48]	; 0x30
  hdfsdm_filter->InjectedChannelsNbr = 1;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	645a      	str	r2, [r3, #68]	; 0x44
  hdfsdm_filter->InjConvRemaining    = 1;
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	2201      	movs	r2, #1
 80010ec:	649a      	str	r2, [r3, #72]	; 0x48
  hdfsdm_filter->ErrorCode           = DFSDM_FILTER_ERROR_NONE;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	651a      	str	r2, [r3, #80]	; 0x50
    hdfsdm_filter->MspInitCallback = HAL_DFSDM_FilterMspInit;
  }
  hdfsdm_filter->MspInitCallback(hdfsdm_filter);
#else
  /* Call MSP init function */
  HAL_DFSDM_FilterMspInit(hdfsdm_filter);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f006 fe89 	bl	8007e0c <HAL_DFSDM_FilterMspInit>
#endif

  /* Set regular parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RSYNC);
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f422 2200 	bic.w	r2, r2, #524288	; 0x80000
 8001108:	601a      	str	r2, [r3, #0]
  if (hdfsdm_filter->Init.RegularParam.FastMode == ENABLE)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	7a1b      	ldrb	r3, [r3, #8]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d108      	bne.n	8001124 <HAL_DFSDM_FilterInit+0x78>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_FAST;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	e007      	b.n	8001134 <HAL_DFSDM_FilterInit+0x88>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_FAST);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8001132:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.RegularParam.DmaMode == ENABLE)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7a5b      	ldrb	r3, [r3, #9]
 8001138:	2b01      	cmp	r3, #1
 800113a:	d108      	bne.n	800114e <HAL_DFSDM_FilterInit+0xa2>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_RDMAEN;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e007      	b.n	800115e <HAL_DFSDM_FilterInit+0xb2>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RDMAEN);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
 800115c:	601a      	str	r2, [r3, #0]
  }

  /* Set injected parameters */
  hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSYNC | DFSDM_FLTCR1_JEXTEN | DFSDM_FLTCR1_JEXTSEL);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	687a      	ldr	r2, [r7, #4]
 8001166:	6812      	ldr	r2, [r2, #0]
 8001168:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800116c:	f023 0308 	bic.w	r3, r3, #8
 8001170:	6013      	str	r3, [r2, #0]
  if (hdfsdm_filter->Init.InjectedParam.Trigger == DFSDM_FILTER_EXT_TRIGGER)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	68db      	ldr	r3, [r3, #12]
 8001176:	2b02      	cmp	r3, #2
 8001178:	d108      	bne.n	800118c <HAL_DFSDM_FilterInit+0xe0>
  {
    assert_param(IS_DFSDM_FILTER_EXT_TRIG(hdfsdm_filter->Init.InjectedParam.ExtTrigger));
    assert_param(IS_DFSDM_FILTER_EXT_TRIG_EDGE(hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge));
    hdfsdm_filter->Instance->FLTCR1 |= (hdfsdm_filter->Init.InjectedParam.ExtTrigger);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	6819      	ldr	r1, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	695a      	ldr	r2, [r3, #20]
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	430a      	orrs	r2, r1
 800118a:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.ScanMode == ENABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7c1b      	ldrb	r3, [r3, #16]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d108      	bne.n	80011a6 <HAL_DFSDM_FilterInit+0xfa>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JSCAN;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f042 0210 	orr.w	r2, r2, #16
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	e007      	b.n	80011b6 <HAL_DFSDM_FilterInit+0x10a>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JSCAN);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	681a      	ldr	r2, [r3, #0]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f022 0210 	bic.w	r2, r2, #16
 80011b4:	601a      	str	r2, [r3, #0]
  }

  if (hdfsdm_filter->Init.InjectedParam.DmaMode == ENABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7c5b      	ldrb	r3, [r3, #17]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d108      	bne.n	80011d0 <HAL_DFSDM_FilterInit+0x124>
  {
    hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_JDMAEN;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f042 0220 	orr.w	r2, r2, #32
 80011cc:	601a      	str	r2, [r3, #0]
 80011ce:	e007      	b.n	80011e0 <HAL_DFSDM_FilterInit+0x134>
  }
  else
  {
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_JDMAEN);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f022 0220 	bic.w	r2, r2, #32
 80011de:	601a      	str	r2, [r3, #0]
  }

  /* Set filter parameters */
  hdfsdm_filter->Instance->FLTFCR &= ~(DFSDM_FLTFCR_FORD | DFSDM_FLTFCR_FOSR | DFSDM_FLTFCR_IOSR);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	695b      	ldr	r3, [r3, #20]
 80011e6:	687a      	ldr	r2, [r7, #4]
 80011e8:	6812      	ldr	r2, [r2, #0]
 80011ea:	f023 4363 	bic.w	r3, r3, #3808428032	; 0xe3000000
 80011ee:	f003 23ff 	and.w	r3, r3, #4278255360	; 0xff00ff00
 80011f2:	6153      	str	r3, [r2, #20]
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	6959      	ldr	r1, [r3, #20]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	69da      	ldr	r2, [r3, #28]
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	3b01      	subs	r3, #1
 8001204:	041b      	lsls	r3, r3, #16
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001206:	431a      	orrs	r2, r3
                                      (hdfsdm_filter->Init.FilterParam.IntOversampling - 1U));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	3b01      	subs	r3, #1
                                      ((hdfsdm_filter->Init.FilterParam.Oversampling - 1U) << DFSDM_FLTFCR_FOSR_Pos) |
 800120e:	431a      	orrs	r2, r3
  hdfsdm_filter->Instance->FLTFCR |= (hdfsdm_filter->Init.FilterParam.SincOrder |
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	430a      	orrs	r2, r1
 8001216:	615a      	str	r2, [r3, #20]

  /* Store regular and injected triggers and injected scan mode*/
  hdfsdm_filter->RegularTrigger   = hdfsdm_filter->Init.RegularParam.Trigger;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	685a      	ldr	r2, [r3, #4]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	635a      	str	r2, [r3, #52]	; 0x34
  hdfsdm_filter->InjectedTrigger  = hdfsdm_filter->Init.InjectedParam.Trigger;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	68da      	ldr	r2, [r3, #12]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
  hdfsdm_filter->ExtTriggerEdge   = hdfsdm_filter->Init.InjectedParam.ExtTriggerEdge;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	699a      	ldr	r2, [r3, #24]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	63da      	str	r2, [r3, #60]	; 0x3c
  hdfsdm_filter->InjectedScanMode = hdfsdm_filter->Init.InjectedParam.ScanMode;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	7c1a      	ldrb	r2, [r3, #16]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Enable DFSDM filter */
  hdfsdm_filter->Instance->FLTCR1 |= DFSDM_FLTCR1_DFEN;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f042 0201 	orr.w	r2, r2, #1
 8001248:	601a      	str	r2, [r3, #0]

  /* Set DFSDM filter to ready state */
  hdfsdm_filter->State = HAL_DFSDM_FILTER_STATE_READY;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2201      	movs	r2, #1
 800124e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  return HAL_OK;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40016100 	.word	0x40016100

08001260 <HAL_DFSDM_FilterConfigRegChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DFSDM_FilterConfigRegChannel(DFSDM_Filter_HandleTypeDef *hdfsdm_filter,
                                                   uint32_t                    Channel,
                                                   uint32_t                    ContinuousMode)
{
 8001260:	b480      	push	{r7}
 8001262:	b087      	sub	sp, #28
 8001264:	af00      	add	r7, sp, #0
 8001266:	60f8      	str	r0, [r7, #12]
 8001268:	60b9      	str	r1, [r7, #8]
 800126a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800126c:	2300      	movs	r3, #0
 800126e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_DFSDM_FILTER_ALL_INSTANCE(hdfsdm_filter->Instance));
  assert_param(IS_DFSDM_REGULAR_CHANNEL(Channel));
  assert_param(IS_DFSDM_CONTINUOUS_MODE(ContinuousMode));

  /* Check DFSDM filter state */
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8001276:	2b00      	cmp	r3, #0
 8001278:	d02e      	beq.n	80012d8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
      (hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_ERROR))
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
  if ((hdfsdm_filter->State != HAL_DFSDM_FILTER_STATE_RESET) &&
 8001280:	2bff      	cmp	r3, #255	; 0xff
 8001282:	d029      	beq.n	80012d8 <HAL_DFSDM_FilterConfigRegChannel+0x78>
  {
    /* Configure channel and continuous mode for regular conversion */
    hdfsdm_filter->Instance->FLTCR1 &= ~(DFSDM_FLTCR1_RCH | DFSDM_FLTCR1_RCONT);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	6812      	ldr	r2, [r2, #0]
 800128e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001296:	6013      	str	r3, [r2, #0]
    if (ContinuousMode == DFSDM_CONTINUOUS_CONV_ON)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b01      	cmp	r3, #1
 800129c:	d10d      	bne.n	80012ba <HAL_DFSDM_FilterConfigRegChannel+0x5a>
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)(((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET) |
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	021b      	lsls	r3, r3, #8
 80012a8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80012ac:	431a      	orrs	r2, r3
 80012ae:	68fb      	ldr	r3, [r7, #12]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80012b6:	601a      	str	r2, [r3, #0]
 80012b8:	e00a      	b.n	80012d0 <HAL_DFSDM_FilterConfigRegChannel+0x70>
                                                    DFSDM_FLTCR1_RCONT);
    }
    else
    {
      hdfsdm_filter->Instance->FLTCR1 |= (uint32_t)((Channel & DFSDM_MSB_MASK) << DFSDM_FLTCR1_MSB_RCH_OFFSET);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	6819      	ldr	r1, [r3, #0]
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	021b      	lsls	r3, r3, #8
 80012c4:	f003 427f 	and.w	r2, r3, #4278190080	; 0xff000000
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	430a      	orrs	r2, r1
 80012ce:	601a      	str	r2, [r3, #0]
    }
    /* Store continuous mode information */
    hdfsdm_filter->RegularContMode = ContinuousMode;
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	687a      	ldr	r2, [r7, #4]
 80012d4:	631a      	str	r2, [r3, #48]	; 0x30
 80012d6:	e001      	b.n	80012dc <HAL_DFSDM_FilterConfigRegChannel+0x7c>
  }
  else
  {
    status = HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return status;
 80012dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	371c      	adds	r7, #28
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
	...

080012ec <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	4a1c      	ldr	r2, [pc, #112]	; (8001368 <DFSDM_GetChannelFromInstance+0x7c>)
 80012f8:	4293      	cmp	r3, r2
 80012fa:	d102      	bne.n	8001302 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e02b      	b.n	800135a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a19      	ldr	r2, [pc, #100]	; (800136c <DFSDM_GetChannelFromInstance+0x80>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d102      	bne.n	8001310 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 800130a:	2301      	movs	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
 800130e:	e024      	b.n	800135a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a17      	ldr	r2, [pc, #92]	; (8001370 <DFSDM_GetChannelFromInstance+0x84>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d102      	bne.n	800131e <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8001318:	2302      	movs	r3, #2
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	e01d      	b.n	800135a <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a14      	ldr	r2, [pc, #80]	; (8001374 <DFSDM_GetChannelFromInstance+0x88>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d102      	bne.n	800132c <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8001326:	2304      	movs	r3, #4
 8001328:	60fb      	str	r3, [r7, #12]
 800132a:	e016      	b.n	800135a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a12      	ldr	r2, [pc, #72]	; (8001378 <DFSDM_GetChannelFromInstance+0x8c>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d102      	bne.n	800133a <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8001334:	2305      	movs	r3, #5
 8001336:	60fb      	str	r3, [r7, #12]
 8001338:	e00f      	b.n	800135a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a0f      	ldr	r2, [pc, #60]	; (800137c <DFSDM_GetChannelFromInstance+0x90>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d102      	bne.n	8001348 <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8001342:	2306      	movs	r3, #6
 8001344:	60fb      	str	r3, [r7, #12]
 8001346:	e008      	b.n	800135a <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	4a0d      	ldr	r2, [pc, #52]	; (8001380 <DFSDM_GetChannelFromInstance+0x94>)
 800134c:	4293      	cmp	r3, r2
 800134e:	d102      	bne.n	8001356 <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8001350:	2307      	movs	r3, #7
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	e001      	b.n	800135a <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8001356:	2303      	movs	r3, #3
 8001358:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 800135a:	68fb      	ldr	r3, [r7, #12]
}
 800135c:	4618      	mov	r0, r3
 800135e:	3714      	adds	r7, #20
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr
 8001368:	40016000 	.word	0x40016000
 800136c:	40016020 	.word	0x40016020
 8001370:	40016040 	.word	0x40016040
 8001374:	40016080 	.word	0x40016080
 8001378:	400160a0 	.word	0x400160a0
 800137c:	400160c0 	.word	0x400160c0
 8001380:	400160e0 	.word	0x400160e0

08001384 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e08d      	b.n	80014b2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	461a      	mov	r2, r3
 800139c:	4b47      	ldr	r3, [pc, #284]	; (80014bc <HAL_DMA_Init+0x138>)
 800139e:	429a      	cmp	r2, r3
 80013a0:	d80f      	bhi.n	80013c2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	461a      	mov	r2, r3
 80013a8:	4b45      	ldr	r3, [pc, #276]	; (80014c0 <HAL_DMA_Init+0x13c>)
 80013aa:	4413      	add	r3, r2
 80013ac:	4a45      	ldr	r2, [pc, #276]	; (80014c4 <HAL_DMA_Init+0x140>)
 80013ae:	fba2 2303 	umull	r2, r3, r2, r3
 80013b2:	091b      	lsrs	r3, r3, #4
 80013b4:	009a      	lsls	r2, r3, #2
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a42      	ldr	r2, [pc, #264]	; (80014c8 <HAL_DMA_Init+0x144>)
 80013be:	641a      	str	r2, [r3, #64]	; 0x40
 80013c0:	e00e      	b.n	80013e0 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4b40      	ldr	r3, [pc, #256]	; (80014cc <HAL_DMA_Init+0x148>)
 80013ca:	4413      	add	r3, r2
 80013cc:	4a3d      	ldr	r2, [pc, #244]	; (80014c4 <HAL_DMA_Init+0x140>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	091b      	lsrs	r3, r3, #4
 80013d4:	009a      	lsls	r2, r3, #2
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4a3c      	ldr	r2, [pc, #240]	; (80014d0 <HAL_DMA_Init+0x14c>)
 80013de:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2202      	movs	r2, #2
 80013e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80013f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80013fa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001404:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	691b      	ldr	r3, [r3, #16]
 800140a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001410:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800141c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001424:	68fa      	ldr	r2, [r7, #12]
 8001426:	4313      	orrs	r3, r2
 8001428:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f000 fa72 	bl	800191c <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001440:	d102      	bne.n	8001448 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	2200      	movs	r2, #0
 8001446:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685a      	ldr	r2, [r3, #4]
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001450:	b2d2      	uxtb	r2, r2
 8001452:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001458:	687a      	ldr	r2, [r7, #4]
 800145a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800145c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d010      	beq.n	8001488 <HAL_DMA_Init+0x104>
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	2b04      	cmp	r3, #4
 800146c:	d80c      	bhi.n	8001488 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f000 fa92 	bl	8001998 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001478:	2200      	movs	r2, #0
 800147a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001480:	687a      	ldr	r2, [r7, #4]
 8001482:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	e008      	b.n	800149a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2200      	movs	r2, #0
 8001492:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2200      	movs	r2, #0
 8001498:	65da      	str	r2, [r3, #92]	; 0x5c
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2200      	movs	r2, #0
 800149e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2200      	movs	r2, #0
 80014ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80014b0:	2300      	movs	r3, #0
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	40020407 	.word	0x40020407
 80014c0:	bffdfff8 	.word	0xbffdfff8
 80014c4:	cccccccd 	.word	0xcccccccd
 80014c8:	40020000 	.word	0x40020000
 80014cc:	bffdfbf8 	.word	0xbffdfbf8
 80014d0:	40020400 	.word	0x40020400

080014d4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b086      	sub	sp, #24
 80014d8:	af00      	add	r7, sp, #0
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014e2:	2300      	movs	r3, #0
 80014e4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d101      	bne.n	80014f4 <HAL_DMA_Start_IT+0x20>
 80014f0:	2302      	movs	r3, #2
 80014f2:	e066      	b.n	80015c2 <HAL_DMA_Start_IT+0xee>
 80014f4:	68fb      	ldr	r3, [r7, #12]
 80014f6:	2201      	movs	r2, #1
 80014f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001502:	b2db      	uxtb	r3, r3
 8001504:	2b01      	cmp	r3, #1
 8001506:	d155      	bne.n	80015b4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	2202      	movs	r2, #2
 800150c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	2200      	movs	r2, #0
 8001514:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 0201 	bic.w	r2, r2, #1
 8001524:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	68b9      	ldr	r1, [r7, #8]
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 f9b6 	bl	800189e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	2b00      	cmp	r3, #0
 8001538:	d008      	beq.n	800154c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 020e 	orr.w	r2, r2, #14
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	e00f      	b.n	800156c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681a      	ldr	r2, [r3, #0]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f022 0204 	bic.w	r2, r2, #4
 800155a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f042 020a 	orr.w	r2, r2, #10
 800156a:	601a      	str	r2, [r3, #0]
    }

#ifdef DMAMUX1

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d007      	beq.n	800158a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001584:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001588:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800158e:	2b00      	cmp	r3, #0
 8001590:	d007      	beq.n	80015a2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800159c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015a0:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f042 0201 	orr.w	r2, r2, #1
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	e005      	b.n	80015c0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80015bc:	2302      	movs	r3, #2
 80015be:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d2:	2300      	movs	r3, #0
 80015d4:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d008      	beq.n	80015f4 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2204      	movs	r2, #4
 80015e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2200      	movs	r2, #0
 80015ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015f0:	2301      	movs	r3, #1
 80015f2:	e040      	b.n	8001676 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	681a      	ldr	r2, [r3, #0]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f022 020e 	bic.w	r2, r2, #14
 8001602:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800160e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001612:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	681a      	ldr	r2, [r3, #0]
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f022 0201 	bic.w	r2, r2, #1
 8001622:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001628:	f003 021c 	and.w	r2, r3, #28
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001630:	2101      	movs	r1, #1
 8001632:	fa01 f202 	lsl.w	r2, r1, r2
 8001636:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001640:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001646:	2b00      	cmp	r3, #0
 8001648:	d00c      	beq.n	8001664 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001654:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001658:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001662:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2201      	movs	r2, #1
 8001668:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001674:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr

08001682 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001682:	b580      	push	{r7, lr}
 8001684:	b084      	sub	sp, #16
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800168a:	2300      	movs	r3, #0
 800168c:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001694:	b2db      	uxtb	r3, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d005      	beq.n	80016a6 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2204      	movs	r2, #4
 800169e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	73fb      	strb	r3, [r7, #15]
 80016a4:	e047      	b.n	8001736 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 020e 	bic.w	r2, r2, #14
 80016b4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016da:	f003 021c 	and.w	r2, r3, #28
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	2101      	movs	r1, #1
 80016e4:	fa01 f202 	lsl.w	r2, r1, r2
 80016e8:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80016f2:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d00c      	beq.n	8001716 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001706:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800170a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001714:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	4798      	blx	r3
    }
  }
  return status;
 8001736:	7bfb      	ldrb	r3, [r7, #15]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3710      	adds	r7, #16
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175c:	f003 031c 	and.w	r3, r3, #28
 8001760:	2204      	movs	r2, #4
 8001762:	409a      	lsls	r2, r3
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4013      	ands	r3, r2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d026      	beq.n	80017ba <HAL_DMA_IRQHandler+0x7a>
 800176c:	68bb      	ldr	r3, [r7, #8]
 800176e:	f003 0304 	and.w	r3, r3, #4
 8001772:	2b00      	cmp	r3, #0
 8001774:	d021      	beq.n	80017ba <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0320 	and.w	r3, r3, #32
 8001780:	2b00      	cmp	r3, #0
 8001782:	d107      	bne.n	8001794 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f022 0204 	bic.w	r2, r2, #4
 8001792:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001798:	f003 021c 	and.w	r2, r3, #28
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	2104      	movs	r1, #4
 80017a2:	fa01 f202 	lsl.w	r2, r1, r2
 80017a6:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d071      	beq.n	8001894 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	6878      	ldr	r0, [r7, #4]
 80017b6:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 80017b8:	e06c      	b.n	8001894 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017be:	f003 031c 	and.w	r3, r3, #28
 80017c2:	2202      	movs	r2, #2
 80017c4:	409a      	lsls	r2, r3
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	4013      	ands	r3, r2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d02e      	beq.n	800182c <HAL_DMA_IRQHandler+0xec>
 80017ce:	68bb      	ldr	r3, [r7, #8]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d029      	beq.n	800182c <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d10b      	bne.n	80017fe <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 020a 	bic.w	r2, r2, #10
 80017f4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2201      	movs	r2, #1
 80017fa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f003 021c 	and.w	r2, r3, #28
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	2102      	movs	r1, #2
 800180c:	fa01 f202 	lsl.w	r2, r1, r2
 8001810:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2200      	movs	r2, #0
 8001816:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181e:	2b00      	cmp	r3, #0
 8001820:	d038      	beq.n	8001894 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800182a:	e033      	b.n	8001894 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001830:	f003 031c 	and.w	r3, r3, #28
 8001834:	2208      	movs	r2, #8
 8001836:	409a      	lsls	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d02a      	beq.n	8001896 <HAL_DMA_IRQHandler+0x156>
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	f003 0308 	and.w	r3, r3, #8
 8001846:	2b00      	cmp	r3, #0
 8001848:	d025      	beq.n	8001896 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 020e 	bic.w	r2, r2, #14
 8001858:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185e:	f003 021c 	and.w	r2, r3, #28
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	2101      	movs	r1, #1
 8001868:	fa01 f202 	lsl.w	r2, r1, r2
 800186c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2201      	movs	r2, #1
 8001872:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	2200      	movs	r2, #0
 8001880:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001888:	2b00      	cmp	r3, #0
 800188a:	d004      	beq.n	8001896 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001890:	6878      	ldr	r0, [r7, #4]
 8001892:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001894:	bf00      	nop
 8001896:	bf00      	nop
}
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800189e:	b480      	push	{r7}
 80018a0:	b085      	sub	sp, #20
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	60f8      	str	r0, [r7, #12]
 80018a6:	60b9      	str	r1, [r7, #8]
 80018a8:	607a      	str	r2, [r7, #4]
 80018aa:	603b      	str	r3, [r7, #0]
#if defined(DMAMUX1)
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80018b0:	68fa      	ldr	r2, [r7, #12]
 80018b2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80018b4:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d004      	beq.n	80018c8 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80018c6:	605a      	str	r2, [r3, #4]
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018cc:	f003 021c 	and.w	r2, r3, #28
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2101      	movs	r1, #1
 80018d6:	fa01 f202 	lsl.w	r2, r1, r2
 80018da:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	683a      	ldr	r2, [r7, #0]
 80018e2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	2b10      	cmp	r3, #16
 80018ea:	d108      	bne.n	80018fe <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	687a      	ldr	r2, [r7, #4]
 80018f2:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	68ba      	ldr	r2, [r7, #8]
 80018fa:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80018fc:	e007      	b.n	800190e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	68ba      	ldr	r2, [r7, #8]
 8001904:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	60da      	str	r2, [r3, #12]
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800191c:	b480      	push	{r7}
 800191e:	b085      	sub	sp, #20
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	461a      	mov	r2, r3
 800192a:	4b17      	ldr	r3, [pc, #92]	; (8001988 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800192c:	429a      	cmp	r2, r3
 800192e:	d80a      	bhi.n	8001946 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001934:	089b      	lsrs	r3, r3, #2
 8001936:	009b      	lsls	r3, r3, #2
 8001938:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800193c:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	6493      	str	r3, [r2, #72]	; 0x48
 8001944:	e007      	b.n	8001956 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel7 + (hdma->ChannelIndex >> 2U));
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	009a      	lsls	r2, r3, #2
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001950:	4413      	add	r3, r2
 8001952:	687a      	ldr	r2, [r7, #4]
 8001954:	6493      	str	r3, [r2, #72]	; 0x48
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	b2db      	uxtb	r3, r3
 800195c:	3b08      	subs	r3, #8
 800195e:	4a0c      	ldr	r2, [pc, #48]	; (8001990 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001960:	fba2 2303 	umull	r2, r3, r2, r3
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800196c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	2201      	movs	r2, #1
 8001976:	409a      	lsls	r2, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	651a      	str	r2, [r3, #80]	; 0x50
}
 800197c:	bf00      	nop
 800197e:	3714      	adds	r7, #20
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	40020407 	.word	0x40020407
 800198c:	4002081c 	.word	0x4002081c
 8001990:	cccccccd 	.word	0xcccccccd
 8001994:	40020880 	.word	0x40020880

08001998 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	685b      	ldr	r3, [r3, #4]
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80019ac:	4413      	add	r3, r2
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	461a      	mov	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a08      	ldr	r2, [pc, #32]	; (80019dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019ba:	659a      	str	r2, [r3, #88]	; 0x58

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	3b01      	subs	r3, #1
 80019c0:	f003 0303 	and.w	r3, r3, #3
 80019c4:	2201      	movs	r2, #1
 80019c6:	409a      	lsls	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80019cc:	bf00      	nop
 80019ce:	3714      	adds	r7, #20
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	1000823f 	.word	0x1000823f
 80019dc:	40020940 	.word	0x40020940

080019e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
 80019e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019ea:	2300      	movs	r3, #0
 80019ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019ee:	e166      	b.n	8001cbe <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2101      	movs	r1, #1
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	4013      	ands	r3, r2
 80019fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	f000 8158 	beq.w	8001cb8 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d005      	beq.n	8001a20 <HAL_GPIO_Init+0x40>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0303 	and.w	r3, r3, #3
 8001a1c:	2b02      	cmp	r3, #2
 8001a1e:	d130      	bne.n	8001a82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	2203      	movs	r2, #3
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	43db      	mvns	r3, r3
 8001a32:	693a      	ldr	r2, [r7, #16]
 8001a34:	4013      	ands	r3, r2
 8001a36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	fa02 f303 	lsl.w	r3, r2, r3
 8001a44:	693a      	ldr	r2, [r7, #16]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	693a      	ldr	r2, [r7, #16]
 8001a4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a56:	2201      	movs	r2, #1
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5e:	43db      	mvns	r3, r3
 8001a60:	693a      	ldr	r2, [r7, #16]
 8001a62:	4013      	ands	r3, r2
 8001a64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	091b      	lsrs	r3, r3, #4
 8001a6c:	f003 0201 	and.w	r2, r3, #1
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	fa02 f303 	lsl.w	r3, r2, r3
 8001a76:	693a      	ldr	r2, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	693a      	ldr	r2, [r7, #16]
 8001a80:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
 8001a8a:	2b03      	cmp	r3, #3
 8001a8c:	d017      	beq.n	8001abe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	693a      	ldr	r2, [r7, #16]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	689a      	ldr	r2, [r3, #8]
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	693a      	ldr	r2, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d123      	bne.n	8001b12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	08da      	lsrs	r2, r3, #3
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	3208      	adds	r2, #8
 8001ad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ad6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	009b      	lsls	r3, r3, #2
 8001ae0:	220f      	movs	r2, #15
 8001ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae6:	43db      	mvns	r3, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4013      	ands	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	691a      	ldr	r2, [r3, #16]
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f003 0307 	and.w	r3, r3, #7
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	693a      	ldr	r2, [r7, #16]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	08da      	lsrs	r2, r3, #3
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	3208      	adds	r2, #8
 8001b0c:	6939      	ldr	r1, [r7, #16]
 8001b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b18:	697b      	ldr	r3, [r7, #20]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b22:	43db      	mvns	r3, r3
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	4013      	ands	r3, r2
 8001b28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 0203 	and.w	r2, r3, #3
 8001b32:	697b      	ldr	r3, [r7, #20]
 8001b34:	005b      	lsls	r3, r3, #1
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	693a      	ldr	r2, [r7, #16]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	693a      	ldr	r2, [r7, #16]
 8001b44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80b2 	beq.w	8001cb8 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b54:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <HAL_GPIO_Init+0x2fc>)
 8001b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b58:	4a60      	ldr	r2, [pc, #384]	; (8001cdc <HAL_GPIO_Init+0x2fc>)
 8001b5a:	f043 0301 	orr.w	r3, r3, #1
 8001b5e:	6613      	str	r3, [r2, #96]	; 0x60
 8001b60:	4b5e      	ldr	r3, [pc, #376]	; (8001cdc <HAL_GPIO_Init+0x2fc>)
 8001b62:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b64:	f003 0301 	and.w	r3, r3, #1
 8001b68:	60bb      	str	r3, [r7, #8]
 8001b6a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b6c:	4a5c      	ldr	r2, [pc, #368]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3302      	adds	r3, #2
 8001b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b78:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	f003 0303 	and.w	r3, r3, #3
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	220f      	movs	r2, #15
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	693a      	ldr	r2, [r7, #16]
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001b96:	d02b      	beq.n	8001bf0 <HAL_GPIO_Init+0x210>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	4a52      	ldr	r2, [pc, #328]	; (8001ce4 <HAL_GPIO_Init+0x304>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d025      	beq.n	8001bec <HAL_GPIO_Init+0x20c>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	4a51      	ldr	r2, [pc, #324]	; (8001ce8 <HAL_GPIO_Init+0x308>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d01f      	beq.n	8001be8 <HAL_GPIO_Init+0x208>
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a50      	ldr	r2, [pc, #320]	; (8001cec <HAL_GPIO_Init+0x30c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d019      	beq.n	8001be4 <HAL_GPIO_Init+0x204>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	4a4f      	ldr	r2, [pc, #316]	; (8001cf0 <HAL_GPIO_Init+0x310>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d013      	beq.n	8001be0 <HAL_GPIO_Init+0x200>
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	4a4e      	ldr	r2, [pc, #312]	; (8001cf4 <HAL_GPIO_Init+0x314>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d00d      	beq.n	8001bdc <HAL_GPIO_Init+0x1fc>
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4a4d      	ldr	r2, [pc, #308]	; (8001cf8 <HAL_GPIO_Init+0x318>)
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d007      	beq.n	8001bd8 <HAL_GPIO_Init+0x1f8>
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	4a4c      	ldr	r2, [pc, #304]	; (8001cfc <HAL_GPIO_Init+0x31c>)
 8001bcc:	4293      	cmp	r3, r2
 8001bce:	d101      	bne.n	8001bd4 <HAL_GPIO_Init+0x1f4>
 8001bd0:	2307      	movs	r3, #7
 8001bd2:	e00e      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bd4:	2308      	movs	r3, #8
 8001bd6:	e00c      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bd8:	2306      	movs	r3, #6
 8001bda:	e00a      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bdc:	2305      	movs	r3, #5
 8001bde:	e008      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001be0:	2304      	movs	r3, #4
 8001be2:	e006      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001be4:	2303      	movs	r3, #3
 8001be6:	e004      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001be8:	2302      	movs	r3, #2
 8001bea:	e002      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bec:	2301      	movs	r3, #1
 8001bee:	e000      	b.n	8001bf2 <HAL_GPIO_Init+0x212>
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	f002 0203 	and.w	r2, r2, #3
 8001bf8:	0092      	lsls	r2, r2, #2
 8001bfa:	4093      	lsls	r3, r2
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c02:	4937      	ldr	r1, [pc, #220]	; (8001ce0 <HAL_GPIO_Init+0x300>)
 8001c04:	697b      	ldr	r3, [r7, #20]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	3302      	adds	r3, #2
 8001c0a:	693a      	ldr	r2, [r7, #16]
 8001c0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c10:	4b3b      	ldr	r3, [pc, #236]	; (8001d00 <HAL_GPIO_Init+0x320>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	693a      	ldr	r2, [r7, #16]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c34:	4a32      	ldr	r2, [pc, #200]	; (8001d00 <HAL_GPIO_Init+0x320>)
 8001c36:	693b      	ldr	r3, [r7, #16]
 8001c38:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c3a:	4b31      	ldr	r3, [pc, #196]	; (8001d00 <HAL_GPIO_Init+0x320>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c40:	68fb      	ldr	r3, [r7, #12]
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d003      	beq.n	8001c5e <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c5e:	4a28      	ldr	r2, [pc, #160]	; (8001d00 <HAL_GPIO_Init+0x320>)
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c64:	4b26      	ldr	r3, [pc, #152]	; (8001d00 <HAL_GPIO_Init+0x320>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	43db      	mvns	r3, r3
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	4013      	ands	r3, r2
 8001c72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4313      	orrs	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c88:	4a1d      	ldr	r2, [pc, #116]	; (8001d00 <HAL_GPIO_Init+0x320>)
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <HAL_GPIO_Init+0x320>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	43db      	mvns	r3, r3
 8001c98:	693a      	ldr	r2, [r7, #16]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d003      	beq.n	8001cb2 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001caa:	693a      	ldr	r2, [r7, #16]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cb2:	4a13      	ldr	r2, [pc, #76]	; (8001d00 <HAL_GPIO_Init+0x320>)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	3301      	adds	r3, #1
 8001cbc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	681a      	ldr	r2, [r3, #0]
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f47f ae91 	bne.w	80019f0 <HAL_GPIO_Init+0x10>
  }
}
 8001cce:	bf00      	nop
 8001cd0:	bf00      	nop
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000
 8001ce4:	48000400 	.word	0x48000400
 8001ce8:	48000800 	.word	0x48000800
 8001cec:	48000c00 	.word	0x48000c00
 8001cf0:	48001000 	.word	0x48001000
 8001cf4:	48001400 	.word	0x48001400
 8001cf8:	48001800 	.word	0x48001800
 8001cfc:	48001c00 	.word	0x48001c00
 8001d00:	40010400 	.word	0x40010400

08001d04 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b087      	sub	sp, #28
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001d12:	e0c9      	b.n	8001ea8 <HAL_GPIO_DeInit+0x1a4>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001d14:	2201      	movs	r2, #1
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	4013      	ands	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	f000 80bc 	beq.w	8001ea2 <HAL_GPIO_DeInit+0x19e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8001d2a:	4a66      	ldr	r2, [pc, #408]	; (8001ec4 <HAL_GPIO_DeInit+0x1c0>)
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d36:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8001d38:	697b      	ldr	r3, [r7, #20]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	220f      	movs	r2, #15
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001d52:	d02b      	beq.n	8001dac <HAL_GPIO_DeInit+0xa8>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a5c      	ldr	r2, [pc, #368]	; (8001ec8 <HAL_GPIO_DeInit+0x1c4>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d025      	beq.n	8001da8 <HAL_GPIO_DeInit+0xa4>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a5b      	ldr	r2, [pc, #364]	; (8001ecc <HAL_GPIO_DeInit+0x1c8>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d01f      	beq.n	8001da4 <HAL_GPIO_DeInit+0xa0>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a5a      	ldr	r2, [pc, #360]	; (8001ed0 <HAL_GPIO_DeInit+0x1cc>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d019      	beq.n	8001da0 <HAL_GPIO_DeInit+0x9c>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a59      	ldr	r2, [pc, #356]	; (8001ed4 <HAL_GPIO_DeInit+0x1d0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d013      	beq.n	8001d9c <HAL_GPIO_DeInit+0x98>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	4a58      	ldr	r2, [pc, #352]	; (8001ed8 <HAL_GPIO_DeInit+0x1d4>)
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d00d      	beq.n	8001d98 <HAL_GPIO_DeInit+0x94>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4a57      	ldr	r2, [pc, #348]	; (8001edc <HAL_GPIO_DeInit+0x1d8>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d007      	beq.n	8001d94 <HAL_GPIO_DeInit+0x90>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	4a56      	ldr	r2, [pc, #344]	; (8001ee0 <HAL_GPIO_DeInit+0x1dc>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d101      	bne.n	8001d90 <HAL_GPIO_DeInit+0x8c>
 8001d8c:	2307      	movs	r3, #7
 8001d8e:	e00e      	b.n	8001dae <HAL_GPIO_DeInit+0xaa>
 8001d90:	2308      	movs	r3, #8
 8001d92:	e00c      	b.n	8001dae <HAL_GPIO_DeInit+0xaa>
 8001d94:	2306      	movs	r3, #6
 8001d96:	e00a      	b.n	8001dae <HAL_GPIO_DeInit+0xaa>
 8001d98:	2305      	movs	r3, #5
 8001d9a:	e008      	b.n	8001dae <HAL_GPIO_DeInit+0xaa>
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	e006      	b.n	8001dae <HAL_GPIO_DeInit+0xaa>
 8001da0:	2303      	movs	r3, #3
 8001da2:	e004      	b.n	8001dae <HAL_GPIO_DeInit+0xaa>
 8001da4:	2302      	movs	r3, #2
 8001da6:	e002      	b.n	8001dae <HAL_GPIO_DeInit+0xaa>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_GPIO_DeInit+0xaa>
 8001dac:	2300      	movs	r3, #0
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	f002 0203 	and.w	r2, r2, #3
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	4093      	lsls	r3, r2
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d132      	bne.n	8001e24 <HAL_GPIO_DeInit+0x120>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001dbe:	4b49      	ldr	r3, [pc, #292]	; (8001ee4 <HAL_GPIO_DeInit+0x1e0>)
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	4947      	ldr	r1, [pc, #284]	; (8001ee4 <HAL_GPIO_DeInit+0x1e0>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8001dcc:	4b45      	ldr	r3, [pc, #276]	; (8001ee4 <HAL_GPIO_DeInit+0x1e0>)
 8001dce:	685a      	ldr	r2, [r3, #4]
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	4943      	ldr	r1, [pc, #268]	; (8001ee4 <HAL_GPIO_DeInit+0x1e0>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8001dda:	4b42      	ldr	r3, [pc, #264]	; (8001ee4 <HAL_GPIO_DeInit+0x1e0>)
 8001ddc:	68da      	ldr	r2, [r3, #12]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	43db      	mvns	r3, r3
 8001de2:	4940      	ldr	r1, [pc, #256]	; (8001ee4 <HAL_GPIO_DeInit+0x1e0>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 8001de8:	4b3e      	ldr	r3, [pc, #248]	; (8001ee4 <HAL_GPIO_DeInit+0x1e0>)
 8001dea:	689a      	ldr	r2, [r3, #8]
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	493c      	ldr	r1, [pc, #240]	; (8001ee4 <HAL_GPIO_DeInit+0x1e0>)
 8001df2:	4013      	ands	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	f003 0303 	and.w	r3, r3, #3
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8001e06:	4a2f      	ldr	r2, [pc, #188]	; (8001ec4 <HAL_GPIO_DeInit+0x1c0>)
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	089b      	lsrs	r3, r3, #2
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	43da      	mvns	r2, r3
 8001e16:	482b      	ldr	r0, [pc, #172]	; (8001ec4 <HAL_GPIO_DeInit+0x1c0>)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	3302      	adds	r3, #2
 8001e20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	005b      	lsls	r3, r3, #1
 8001e2c:	2103      	movs	r1, #3
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001e38:	697b      	ldr	r3, [r7, #20]
 8001e3a:	08da      	lsrs	r2, r3, #3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	3208      	adds	r2, #8
 8001e40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	220f      	movs	r2, #15
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43db      	mvns	r3, r3
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	08d2      	lsrs	r2, r2, #3
 8001e58:	4019      	ands	r1, r3
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3208      	adds	r2, #8
 8001e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	2103      	movs	r1, #3
 8001e6c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e70:	43db      	mvns	r3, r3
 8001e72:	401a      	ands	r2, r3
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	685a      	ldr	r2, [r3, #4]
 8001e7c:	2101      	movs	r1, #1
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	fa01 f303 	lsl.w	r3, r1, r3
 8001e84:	43db      	mvns	r3, r3
 8001e86:	401a      	ands	r2, r3
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	005b      	lsls	r3, r3, #1
 8001e94:	2103      	movs	r1, #3
 8001e96:	fa01 f303 	lsl.w	r3, r1, r3
 8001e9a:	43db      	mvns	r3, r3
 8001e9c:	401a      	ands	r2, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	60da      	str	r2, [r3, #12]
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	fa22 f303 	lsr.w	r3, r2, r3
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f47f af2f 	bne.w	8001d14 <HAL_GPIO_DeInit+0x10>
  }
}
 8001eb6:	bf00      	nop
 8001eb8:	bf00      	nop
 8001eba:	371c      	adds	r7, #28
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec2:	4770      	bx	lr
 8001ec4:	40010000 	.word	0x40010000
 8001ec8:	48000400 	.word	0x48000400
 8001ecc:	48000800 	.word	0x48000800
 8001ed0:	48000c00 	.word	0x48000c00
 8001ed4:	48001000 	.word	0x48001000
 8001ed8:	48001400 	.word	0x48001400
 8001edc:	48001800 	.word	0x48001800
 8001ee0:	48001c00 	.word	0x48001c00
 8001ee4:	40010400 	.word	0x40010400

08001ee8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	807b      	strh	r3, [r7, #2]
 8001ef4:	4613      	mov	r3, r2
 8001ef6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef8:	787b      	ldrb	r3, [r7, #1]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d003      	beq.n	8001f06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001efe:	887a      	ldrh	r2, [r7, #2]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f04:	e002      	b.n	8001f0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f0c:	bf00      	nop
 8001f0e:	370c      	adds	r7, #12
 8001f10:	46bd      	mov	sp, r7
 8001f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f16:	4770      	bx	lr

08001f18 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b085      	sub	sp, #20
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	6078      	str	r0, [r7, #4]
 8001f20:	460b      	mov	r3, r1
 8001f22:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	695b      	ldr	r3, [r3, #20]
 8001f28:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f2a:	887a      	ldrh	r2, [r7, #2]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	041a      	lsls	r2, r3, #16
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	43d9      	mvns	r1, r3
 8001f36:	887b      	ldrh	r3, [r7, #2]
 8001f38:	400b      	ands	r3, r1
 8001f3a:	431a      	orrs	r2, r3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	619a      	str	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	3714      	adds	r7, #20
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr

08001f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b082      	sub	sp, #8
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	4603      	mov	r3, r0
 8001f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f58:	695a      	ldr	r2, [r3, #20]
 8001f5a:	88fb      	ldrh	r3, [r7, #6]
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d006      	beq.n	8001f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f62:	4a05      	ldr	r2, [pc, #20]	; (8001f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f64:	88fb      	ldrh	r3, [r7, #6]
 8001f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f005 fa50 	bl	8007410 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f70:	bf00      	nop
 8001f72:	3708      	adds	r7, #8
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	40010400 	.word	0x40010400

08001f7c <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b086      	sub	sp, #24
 8001f80:	af02      	add	r7, sp, #8
 8001f82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f84:	2300      	movs	r3, #0
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8001f88:	f7fe fb7c 	bl	8000684 <HAL_GetTick>
 8001f8c:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d102      	bne.n	8001f9a <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8001f94:	2301      	movs	r3, #1
 8001f96:	73fb      	strb	r3, [r7, #15]
 8001f98:	e092      	b.n	80020c0 <HAL_OSPI_Init+0x144>
#if   defined (OCTOSPI_DCR3_MAXTRAN)
    assert_param(IS_OSPI_MAXTRAN        (hospi->Init.MaxTran));
#endif

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	649a      	str	r2, [r3, #72]	; 0x48

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f040 808b 	bne.w	80020c0 <HAL_OSPI_Init+0x144>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f006 f84a 	bl	8008044 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8001fb0:	f241 3188 	movw	r1, #5000	; 0x1388
 8001fb4:	6878      	ldr	r0, [r7, #4]
 8001fb6:	f000 fad0 	bl	800255a <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	689a      	ldr	r2, [r3, #8]
 8001fc0:	4b42      	ldr	r3, [pc, #264]	; (80020cc <HAL_OSPI_Init+0x150>)
 8001fc2:	4013      	ands	r3, r2
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	68d1      	ldr	r1, [r2, #12]
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6912      	ldr	r2, [r2, #16]
 8001fcc:	3a01      	subs	r2, #1
 8001fce:	0412      	lsls	r2, r2, #16
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6952      	ldr	r2, [r2, #20]
 8001fd6:	3a01      	subs	r2, #1
 8001fd8:	0212      	lsls	r2, r2, #8
 8001fda:	4311      	orrs	r1, r2
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fe0:	4311      	orrs	r1, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	69d2      	ldr	r2, [r2, #28]
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	6812      	ldr	r2, [r2, #0]
 8001fec:	430b      	orrs	r3, r1
 8001fee:	6093      	str	r3, [r2, #8]
      /* Configure chip select boundary and maximum transfer */
      hospi->Instance->DCR3 = ((hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos) |
                               (hospi->Init.MaxTran << OCTOSPI_DCR3_MAXTRAN_Pos));
#else
      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	0412      	lsls	r2, r2, #16
 8001ffa:	611a      	str	r2, [r3, #16]
      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
#endif

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	3b01      	subs	r3, #1
 800200c:	021a      	lsls	r2, r3, #8
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201a:	9300      	str	r3, [sp, #0]
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	2200      	movs	r2, #0
 8002020:	2120      	movs	r1, #32
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f000 fddc 	bl	8002be0 <OSPI_WaitFlagStateUntilTimeout>
 8002028:	4603      	mov	r3, r0
 800202a:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 800202c:	7bfb      	ldrb	r3, [r7, #15]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d146      	bne.n	80020c0 <HAL_OSPI_Init+0x144>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6a1b      	ldr	r3, [r3, #32]
 8002040:	1e5a      	subs	r2, r3, #1
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	430a      	orrs	r2, r1
 8002048:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8002068:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f042 0201 	orr.w	r2, r2, #1
 800208e:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2b02      	cmp	r3, #2
 8002096:	d107      	bne.n	80020a8 <HAL_OSPI_Init+0x12c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f042 0202 	orr.w	r2, r2, #2
 80020a6:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80020b0:	d103      	bne.n	80020ba <HAL_OSPI_Init+0x13e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	645a      	str	r2, [r3, #68]	; 0x44
 80020b8:	e002      	b.n	80020c0 <HAL_OSPI_Init+0x144>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2202      	movs	r2, #2
 80020be:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
  }

  /* Return function status */
  return status;
 80020c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3710      	adds	r7, #16
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	f8e0f8f4 	.word	0xf8e0f8f4

080020d0 <HAL_OSPI_DeInit>:
  * @brief  De-Initialize the OSPI peripheral.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_DeInit(OSPI_HandleTypeDef *hospi)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020d8:	2300      	movs	r3, #0
 80020da:	73fb      	strb	r3, [r7, #15]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d102      	bne.n	80020e8 <HAL_OSPI_DeInit+0x18>
  {
    status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
 80020e6:	e015      	b.n	8002114 <HAL_OSPI_DeInit+0x44>
    /* No error code can be set set as the handler is null */
  }
  else
  {
     /* Disable OctoSPI */
     __HAL_OSPI_DISABLE(hospi);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 0201 	bic.w	r2, r2, #1
 80020f6:	601a      	str	r2, [r3, #0]

     /* Disable free running clock if needed : must be done after OSPI disable */
     CLEAR_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f022 0202 	bic.w	r2, r2, #2
 8002106:	609a      	str	r2, [r3, #8]

     /* DeInit the low level hardware */
     hospi->MspDeInitCallback(hospi);
#else
     /* De-initialize the low-level hardware */
     HAL_OSPI_MspDeInit(hospi);
 8002108:	6878      	ldr	r0, [r7, #4]
 800210a:	f006 f807 	bl	800811c <HAL_OSPI_MspDeInit>
#endif /* (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

     /* Reset the driver state */
     hospi->State = HAL_OSPI_STATE_RESET;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2200      	movs	r2, #0
 8002112:	645a      	str	r2, [r3, #68]	; 0x44
  }

  return status;
 8002114:	7bfb      	ldrb	r3, [r7, #15]
}
 8002116:	4618      	mov	r0, r3
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_OSPI_Command>:
  * @param  cmd     : structure that contains the command configuration information
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Command(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd, uint32_t Timeout)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b08a      	sub	sp, #40	; 0x28
 8002122:	af02      	add	r7, sp, #8
 8002124:	60f8      	str	r0, [r7, #12]
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t state;
  uint32_t tickstart = HAL_GetTick();
 800212a:	f7fe faab 	bl	8000684 <HAL_GetTick>
 800212e:	61b8      	str	r0, [r7, #24]
    assert_param(IS_OSPI_ALT_BYTES_SIZE    (cmd->AlternateBytesSize));
    assert_param(IS_OSPI_ALT_BYTES_DTR_MODE(cmd->AlternateBytesDtrMode));
  }

  assert_param(IS_OSPI_DATA_MODE(cmd->DataMode));
  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002134:	2b00      	cmp	r3, #0

  assert_param(IS_OSPI_DQS_MODE (cmd->DQSMode));
  assert_param(IS_OSPI_SIOO_MODE(cmd->SIOOMode));

  /* Check the state of the driver */
  state = hospi->State;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	617b      	str	r3, [r7, #20]
  if (((state == HAL_OSPI_STATE_READY)         && (hospi->Init.MemoryType != HAL_OSPI_MEMTYPE_HYPERBUS)) ||
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	2b02      	cmp	r3, #2
 8002140:	d104      	bne.n	800214c <HAL_OSPI_Command+0x2e>
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800214a:	d10d      	bne.n	8002168 <HAL_OSPI_Command+0x4a>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2b14      	cmp	r3, #20
 8002150:	d103      	bne.n	800215a <HAL_OSPI_Command+0x3c>
      ((state == HAL_OSPI_STATE_READ_CMD_CFG)  && (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG))     ||
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d006      	beq.n	8002168 <HAL_OSPI_Command+0x4a>
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b24      	cmp	r3, #36	; 0x24
 800215e:	d153      	bne.n	8002208 <HAL_OSPI_Command+0xea>
      ((state == HAL_OSPI_STATE_WRITE_CMD_CFG) && (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)))
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d14f      	bne.n	8002208 <HAL_OSPI_Command+0xea>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	69bb      	ldr	r3, [r7, #24]
 800216e:	2200      	movs	r2, #0
 8002170:	2120      	movs	r1, #32
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f000 fd34 	bl	8002be0 <OSPI_WaitFlagStateUntilTimeout>
 8002178:	4603      	mov	r3, r0
 800217a:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 800217c:	7ffb      	ldrb	r3, [r7, #31]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d148      	bne.n	8002214 <HAL_OSPI_Command+0xf6>
    {
      /* Initialize error code */
      hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2200      	movs	r2, #0
 8002186:	649a      	str	r2, [r3, #72]	; 0x48

      /* Configure the registers */
      status = OSPI_ConfigCmd(hospi, cmd);
 8002188:	68b9      	ldr	r1, [r7, #8]
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f000 fd60 	bl	8002c50 <OSPI_ConfigCmd>
 8002190:	4603      	mov	r3, r0
 8002192:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 8002194:	7ffb      	ldrb	r3, [r7, #31]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d13c      	bne.n	8002214 <HAL_OSPI_Command+0xf6>
      {
        if (cmd->DataMode == HAL_OSPI_DATA_NONE)
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d10e      	bne.n	80021c0 <HAL_OSPI_Command+0xa2>
        {
          /* When there is no data phase, the transfer start as soon as the configuration is done
             so wait until TC flag is set to go back in idle state */
          status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	9300      	str	r3, [sp, #0]
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2201      	movs	r2, #1
 80021aa:	2102      	movs	r1, #2
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f000 fd17 	bl	8002be0 <OSPI_WaitFlagStateUntilTimeout>
 80021b2:	4603      	mov	r3, r0
 80021b4:	77fb      	strb	r3, [r7, #31]

          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	2202      	movs	r2, #2
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
    if (status == HAL_OK)
 80021be:	e029      	b.n	8002214 <HAL_OSPI_Command+0xf6>
        }
        else
        {
          /* Update the state */
          if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d103      	bne.n	80021d0 <HAL_OSPI_Command+0xb2>
          {
            hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2204      	movs	r2, #4
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80021ce:	e021      	b.n	8002214 <HAL_OSPI_Command+0xf6>
          }
          else if (cmd->OperationType == HAL_OSPI_OPTYPE_READ_CFG)
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d10b      	bne.n	80021f0 <HAL_OSPI_Command+0xd2>
          {
            if (hospi->State == HAL_OSPI_STATE_WRITE_CMD_CFG)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021dc:	2b24      	cmp	r3, #36	; 0x24
 80021de:	d103      	bne.n	80021e8 <HAL_OSPI_Command+0xca>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2204      	movs	r2, #4
 80021e4:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80021e6:	e015      	b.n	8002214 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_READ_CMD_CFG;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	2214      	movs	r2, #20
 80021ec:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80021ee:	e011      	b.n	8002214 <HAL_OSPI_Command+0xf6>
            }
          }
          else
          {
            if (hospi->State == HAL_OSPI_STATE_READ_CMD_CFG)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021f4:	2b14      	cmp	r3, #20
 80021f6:	d103      	bne.n	8002200 <HAL_OSPI_Command+0xe2>
            {
              hospi->State = HAL_OSPI_STATE_CMD_CFG;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2204      	movs	r2, #4
 80021fc:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 80021fe:	e009      	b.n	8002214 <HAL_OSPI_Command+0xf6>
            }
            else
            {
              hospi->State = HAL_OSPI_STATE_WRITE_CMD_CFG;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2224      	movs	r2, #36	; 0x24
 8002204:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002206:	e005      	b.n	8002214 <HAL_OSPI_Command+0xf6>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2210      	movs	r2, #16
 8002210:	649a      	str	r2, [r3, #72]	; 0x48
 8002212:	e000      	b.n	8002216 <HAL_OSPI_Command+0xf8>
    if (status == HAL_OK)
 8002214:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002216:	7ffb      	ldrb	r3, [r7, #31]
}
 8002218:	4618      	mov	r0, r3
 800221a:	3720      	adds	r7, #32
 800221c:	46bd      	mov	sp, r7
 800221e:	bd80      	pop	{r7, pc}

08002220 <HAL_OSPI_Transmit>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Transmit(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b08a      	sub	sp, #40	; 0x28
 8002224:	af02      	add	r7, sp, #8
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 800222c:	f7fe fa2a 	bl	8000684 <HAL_GetTick>
 8002230:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	3350      	adds	r3, #80	; 0x50
 8002238:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 800223a:	68bb      	ldr	r3, [r7, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d105      	bne.n	800224c <HAL_OSPI_Transmit+0x2c>
  {
    status = HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	2208      	movs	r2, #8
 8002248:	649a      	str	r2, [r3, #72]	; 0x48
 800224a:	e057      	b.n	80022fc <HAL_OSPI_Transmit+0xdc>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002250:	2b04      	cmp	r3, #4
 8002252:	d14e      	bne.n	80022f2 <HAL_OSPI_Transmit+0xd2>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225a:	1c5a      	adds	r2, r3, #1
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect write */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800227c:	601a      	str	r2, [r3, #0]

      do
      {
        /* Wait till fifo threshold flag is set to send data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_FT, SET, tickstart, Timeout);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	9300      	str	r3, [sp, #0]
 8002282:	69bb      	ldr	r3, [r7, #24]
 8002284:	2201      	movs	r2, #1
 8002286:	2104      	movs	r1, #4
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fca9 	bl	8002be0 <OSPI_WaitFlagStateUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8002292:	7ffb      	ldrb	r3, [r7, #31]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d113      	bne.n	80022c0 <HAL_OSPI_Transmit+0xa0>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hospi->pBuffPtr;
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800229c:	781a      	ldrb	r2, [r3, #0]
 800229e:	697b      	ldr	r3, [r7, #20]
 80022a0:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	1c5a      	adds	r2, r3, #1
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022b0:	1e5a      	subs	r2, r3, #1
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	63da      	str	r2, [r3, #60]	; 0x3c
      } while (hospi->XferCount > 0U);
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1df      	bne.n	800227e <HAL_OSPI_Transmit+0x5e>
 80022be:	e000      	b.n	80022c2 <HAL_OSPI_Transmit+0xa2>
          break;
 80022c0:	bf00      	nop

      if (status == HAL_OK)
 80022c2:	7ffb      	ldrb	r3, [r7, #31]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d119      	bne.n	80022fc <HAL_OSPI_Transmit+0xdc>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	9300      	str	r3, [sp, #0]
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	2201      	movs	r2, #1
 80022d0:	2102      	movs	r1, #2
 80022d2:	68f8      	ldr	r0, [r7, #12]
 80022d4:	f000 fc84 	bl	8002be0 <OSPI_WaitFlagStateUntilTimeout>
 80022d8:	4603      	mov	r3, r0
 80022da:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 80022dc:	7ffb      	ldrb	r3, [r7, #31]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d10c      	bne.n	80022fc <HAL_OSPI_Transmit+0xdc>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	2202      	movs	r2, #2
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2202      	movs	r2, #2
 80022ee:	645a      	str	r2, [r3, #68]	; 0x44
 80022f0:	e004      	b.n	80022fc <HAL_OSPI_Transmit+0xdc>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2210      	movs	r2, #16
 80022fa:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 80022fc:	7ffb      	ldrb	r3, [r7, #31]
}
 80022fe:	4618      	mov	r0, r3
 8002300:	3720      	adds	r7, #32
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_OSPI_Receive>:
  * @param  Timeout : Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Receive(OSPI_HandleTypeDef *hospi, uint8_t *pData, uint32_t Timeout)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b08c      	sub	sp, #48	; 0x30
 800230a:	af02      	add	r7, sp, #8
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002312:	f7fe f9b7 	bl	8000684 <HAL_GetTick>
 8002316:	6238      	str	r0, [r7, #32]
  __IO uint32_t *data_reg = &hospi->Instance->DR;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	3350      	adds	r3, #80	; 0x50
 800231e:	61fb      	str	r3, [r7, #28]
  uint32_t addr_reg = hospi->Instance->AR;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002326:	61bb      	str	r3, [r7, #24]
  uint32_t ir_reg = hospi->Instance->IR;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 8002330:	617b      	str	r3, [r7, #20]

  /* Check the data pointer allocation */
  if (pData == NULL)
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d106      	bne.n	8002346 <HAL_OSPI_Receive+0x40>
  {
    status = HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2208      	movs	r2, #8
 8002342:	649a      	str	r2, [r3, #72]	; 0x48
 8002344:	e07c      	b.n	8002440 <HAL_OSPI_Receive+0x13a>
  }
  else
  {
    /* Check the state */
    if (hospi->State == HAL_OSPI_STATE_CMD_CFG)
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234a:	2b04      	cmp	r3, #4
 800234c:	d172      	bne.n	8002434 <HAL_OSPI_Receive+0x12e>
    {
      /* Configure counters and size */
      hospi->XferCount = READ_REG(hospi->Instance->DLR) + 1U;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	1c5a      	adds	r2, r3, #1
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	63da      	str	r2, [r3, #60]	; 0x3c
      hospi->XferSize  = hospi->XferCount;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	639a      	str	r2, [r3, #56]	; 0x38
      hospi->pBuffPtr  = pData;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	68ba      	ldr	r2, [r7, #8]
 8002366:	635a      	str	r2, [r3, #52]	; 0x34

      /* Configure CR register with functional mode as indirect read */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, OSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800237a:	601a      	str	r2, [r3, #0]

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002384:	d104      	bne.n	8002390 <HAL_OSPI_Receive+0x8a>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	649a      	str	r2, [r3, #72]	; 0x48
 800238e:	e011      	b.n	80023b4 <HAL_OSPI_Receive+0xae>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8002398:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800239c:	2b00      	cmp	r3, #0
 800239e:	d004      	beq.n	80023aa <HAL_OSPI_Receive+0xa4>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	69ba      	ldr	r2, [r7, #24]
 80023a6:	649a      	str	r2, [r3, #72]	; 0x48
 80023a8:	e004      	b.n	80023b4 <HAL_OSPI_Receive+0xae>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
      }

      do
      {
        /* Wait till fifo threshold or transfer complete flags are set to read received data */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, (HAL_OSPI_FLAG_FT | HAL_OSPI_FLAG_TC), SET, tickstart, Timeout);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	9300      	str	r3, [sp, #0]
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	2201      	movs	r2, #1
 80023bc:	2106      	movs	r1, #6
 80023be:	68f8      	ldr	r0, [r7, #12]
 80023c0:	f000 fc0e 	bl	8002be0 <OSPI_WaitFlagStateUntilTimeout>
 80023c4:	4603      	mov	r3, r0
 80023c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status != HAL_OK)
 80023ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d114      	bne.n	80023fc <HAL_OSPI_Receive+0xf6>
        {
          break;
        }

        *hospi->pBuffPtr = *((__IO uint8_t *)data_reg);
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d6:	69fa      	ldr	r2, [r7, #28]
 80023d8:	7812      	ldrb	r2, [r2, #0]
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	701a      	strb	r2, [r3, #0]
        hospi->pBuffPtr++;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023e2:	1c5a      	adds	r2, r3, #1
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	635a      	str	r2, [r3, #52]	; 0x34
        hospi->XferCount--;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ec:	1e5a      	subs	r2, r3, #1
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	63da      	str	r2, [r3, #60]	; 0x3c
      } while(hospi->XferCount > 0U);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d1dc      	bne.n	80023b4 <HAL_OSPI_Receive+0xae>
 80023fa:	e000      	b.n	80023fe <HAL_OSPI_Receive+0xf8>
          break;
 80023fc:	bf00      	nop

      if (status == HAL_OK)
 80023fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002402:	2b00      	cmp	r3, #0
 8002404:	d11c      	bne.n	8002440 <HAL_OSPI_Receive+0x13a>
      {
        /* Wait till transfer complete flag is set to go back in idle state */
        status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_TC, SET, tickstart, Timeout);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	9300      	str	r3, [sp, #0]
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	2201      	movs	r2, #1
 800240e:	2102      	movs	r1, #2
 8002410:	68f8      	ldr	r0, [r7, #12]
 8002412:	f000 fbe5 	bl	8002be0 <OSPI_WaitFlagStateUntilTimeout>
 8002416:	4603      	mov	r3, r0
 8002418:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

        if (status == HAL_OK)
 800241c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10d      	bne.n	8002440 <HAL_OSPI_Receive+0x13a>
        {
          /* Clear transfer complete flag */
          __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_TC);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	2202      	movs	r2, #2
 800242a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update state */
          hospi->State = HAL_OSPI_STATE_READY;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	2202      	movs	r2, #2
 8002430:	645a      	str	r2, [r3, #68]	; 0x44
 8002432:	e005      	b.n	8002440 <HAL_OSPI_Receive+0x13a>
        }
      }
    }
    else
    {
      status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2210      	movs	r2, #16
 800243e:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8002440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002444:	4618      	mov	r0, r3
 8002446:	3728      	adds	r7, #40	; 0x28
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}

0800244c <HAL_OSPI_AutoPolling>:
  * @note   This function is used only in Automatic Polling Mode
  * @note   This function should not be used when the memory is in octal mode (see Errata Sheet)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_AutoPolling(OSPI_HandleTypeDef *hospi, OSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08a      	sub	sp, #40	; 0x28
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8002458:	f7fe f914 	bl	8000684 <HAL_GetTick>
 800245c:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = hospi->Instance->AR;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002464:	617b      	str	r3, [r7, #20]
  uint32_t ir_reg = hospi->Instance->IR;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
 800246e:	613b      	str	r3, [r7, #16]
  assert_param(IS_OSPI_AUTOMATIC_STOP   (cfg->AutomaticStop));
  assert_param(IS_OSPI_INTERVAL         (cfg->Interval));
  assert_param(IS_OSPI_STATUS_BYTES_SIZE(dlr_reg+1U));

  /* Check the state */
  if ((hospi->State == HAL_OSPI_STATE_CMD_CFG) && (cfg->AutomaticStop == HAL_OSPI_AUTOMATIC_STOP_ENABLE))
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002474:	2b04      	cmp	r3, #4
 8002476:	d164      	bne.n	8002542 <HAL_OSPI_AutoPolling+0xf6>
 8002478:	68bb      	ldr	r3, [r7, #8]
 800247a:	68db      	ldr	r3, [r3, #12]
 800247c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002480:	d15f      	bne.n	8002542 <HAL_OSPI_AutoPolling+0xf6>
  {
    /* Wait till busy flag is reset */
    status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	9300      	str	r3, [sp, #0]
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	2200      	movs	r2, #0
 800248a:	2120      	movs	r1, #32
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 fba7 	bl	8002be0 <OSPI_WaitFlagStateUntilTimeout>
 8002492:	4603      	mov	r3, r0
 8002494:	77fb      	strb	r3, [r7, #31]

    if (status == HAL_OK)
 8002496:	7ffb      	ldrb	r3, [r7, #31]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d158      	bne.n	800254e <HAL_OSPI_AutoPolling+0x102>
    {
      /* Configure registers */
      WRITE_REG (hospi->Instance->PSMAR, cfg->Match);
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	6812      	ldr	r2, [r2, #0]
 80024a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      WRITE_REG (hospi->Instance->PSMKR, cfg->Mask);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68ba      	ldr	r2, [r7, #8]
 80024ae:	6852      	ldr	r2, [r2, #4]
 80024b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      WRITE_REG (hospi->Instance->PIR,   cfg->Interval);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	68ba      	ldr	r2, [r7, #8]
 80024ba:	6912      	ldr	r2, [r2, #16]
 80024bc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      MODIFY_REG(hospi->Instance->CR,    (OCTOSPI_CR_PMM | OCTOSPI_CR_APMS | OCTOSPI_CR_FMODE),
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f023 5243 	bic.w	r2, r3, #817889280	; 0x30c00000
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	6899      	ldr	r1, [r3, #8]
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	430b      	orrs	r3, r1
 80024d4:	431a      	orrs	r2, r3
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80024de:	601a      	str	r2, [r3, #0]
                 (cfg->MatchMode | cfg->AutomaticStop | OSPI_FUNCTIONAL_MODE_AUTO_POLLING));

      /* Trig the transfer by re-writing address or instruction register */
      if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	68db      	ldr	r3, [r3, #12]
 80024e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024e8:	d104      	bne.n	80024f4 <HAL_OSPI_AutoPolling+0xa8>
      {
        WRITE_REG(hospi->Instance->AR, addr_reg);
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	649a      	str	r2, [r3, #72]	; 0x48
 80024f2:	e011      	b.n	8002518 <HAL_OSPI_AutoPolling+0xcc>
      }
      else
      {
        if (READ_BIT(hospi->Instance->CCR, OCTOSPI_CCR_ADMODE) != HAL_OSPI_ADDRESS_NONE)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80024fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002500:	2b00      	cmp	r3, #0
 8002502:	d004      	beq.n	800250e <HAL_OSPI_AutoPolling+0xc2>
        {
          WRITE_REG(hospi->Instance->AR, addr_reg);
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	697a      	ldr	r2, [r7, #20]
 800250a:	649a      	str	r2, [r3, #72]	; 0x48
 800250c:	e004      	b.n	8002518 <HAL_OSPI_AutoPolling+0xcc>
        }
        else
        {
          WRITE_REG(hospi->Instance->IR, ir_reg);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	693a      	ldr	r2, [r7, #16]
 8002514:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        }
      }

      /* Wait till status match flag is set to go back in idle state */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_SM, SET, tickstart, Timeout);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	2201      	movs	r2, #1
 8002520:	2108      	movs	r1, #8
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 fb5c 	bl	8002be0 <OSPI_WaitFlagStateUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	77fb      	strb	r3, [r7, #31]

      if (status == HAL_OK)
 800252c:	7ffb      	ldrb	r3, [r7, #31]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10d      	bne.n	800254e <HAL_OSPI_AutoPolling+0x102>
      {
        /* Clear status match flag */
        __HAL_OSPI_CLEAR_FLAG(hospi, HAL_OSPI_FLAG_SM);
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2208      	movs	r2, #8
 8002538:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update state */
        hospi->State = HAL_OSPI_STATE_READY;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2202      	movs	r2, #2
 800253e:	645a      	str	r2, [r3, #68]	; 0x44
    if (status == HAL_OK)
 8002540:	e005      	b.n	800254e <HAL_OSPI_AutoPolling+0x102>
      }
    }
  }
  else
  {
    status = HAL_ERROR;
 8002542:	2301      	movs	r3, #1
 8002544:	77fb      	strb	r3, [r7, #31]
    hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_SEQUENCE;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2210      	movs	r2, #16
 800254a:	649a      	str	r2, [r3, #72]	; 0x48
 800254c:	e000      	b.n	8002550 <HAL_OSPI_AutoPolling+0x104>
    if (status == HAL_OK)
 800254e:	bf00      	nop
  }

  /* Return function status */
  return status;
 8002550:	7ffb      	ldrb	r3, [r7, #31]
}
 8002552:	4618      	mov	r0, r3
 8002554:	3720      	adds	r7, #32
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}

0800255a <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
 8002562:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	64da      	str	r2, [r3, #76]	; 0x4c
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <HAL_OSPIM_Config>:
  * @param  cfg     : Configuration of the IO Manager for the instance
  * @param  Timeout : Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPIM_Config(OSPI_HandleTypeDef *hospi, OSPIM_CfgTypeDef *cfg, uint32_t Timeout)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b092      	sub	sp, #72	; 0x48
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t instance;
  uint8_t index;
  uint8_t ospi_enabled = 0U;
 800258a:	2300      	movs	r3, #0
 800258c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  assert_param(IS_OSPIM_IO_PORT(cfg->IOHighPort));
#if   defined (OCTOSPIM_CR_MUXEN)
  assert_param(IS_OSPIM_REQ2ACKTIME(cfg->Req2AckTime));
#endif

  if (hospi->Instance == OCTOSPI1)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <HAL_OSPIM_Config+0x40>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d105      	bne.n	80025a6 <HAL_OSPIM_Config+0x2e>
  {
    instance = 0U;
 800259a:	2300      	movs	r3, #0
 800259c:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 1U;
 800259e:	2301      	movs	r3, #1
 80025a0:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 80025a4:	e004      	b.n	80025b0 <HAL_OSPIM_Config+0x38>
  }
  else
  {
    instance = 1U;
 80025a6:	2301      	movs	r3, #1
 80025a8:	643b      	str	r3, [r7, #64]	; 0x40
    other_instance = 0U;
 80025aa:	2300      	movs	r3, #0
 80025ac:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  }

  /**************** Get current configuration of the instances ****************/
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80025b6:	e01f      	b.n	80025f8 <HAL_OSPIM_Config+0x80>
 80025b8:	a0001000 	.word	0xa0001000
  {
    if (OSPIM_GetConfig(index+1U, &(IOM_cfg[index])) != HAL_OK)
 80025bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80025c0:	3301      	adds	r3, #1
 80025c2:	b2d8      	uxtb	r0, r3
 80025c4:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80025c8:	f107 0114 	add.w	r1, r7, #20
 80025cc:	4613      	mov	r3, r2
 80025ce:	009b      	lsls	r3, r3, #2
 80025d0:	4413      	add	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	440b      	add	r3, r1
 80025d6:	4619      	mov	r1, r3
 80025d8:	f000 fc9c 	bl	8002f14 <OSPIM_GetConfig>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d005      	beq.n	80025ee <HAL_OSPIM_Config+0x76>
    {
      status = HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2208      	movs	r2, #8
 80025ec:	649a      	str	r2, [r3, #72]	; 0x48
  for (index = 0U; index < OSPI_NB_INSTANCE; index++)
 80025ee:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80025f2:	3301      	adds	r3, #1
 80025f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 80025f8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d9dd      	bls.n	80025bc <HAL_OSPIM_Config+0x44>
    }
  }

  if (status == HAL_OK)
 8002600:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002604:	2b00      	cmp	r3, #0
 8002606:	f040 82de 	bne.w	8002bc6 <HAL_OSPIM_Config+0x64e>
  {
    /********** Disable both OctoSPI to configure OctoSPI IO Manager **********/
    if ((OCTOSPI1->CR & OCTOSPI_CR_EN) != 0U)
 800260a:	4bc6      	ldr	r3, [pc, #792]	; (8002924 <HAL_OSPIM_Config+0x3ac>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d00b      	beq.n	800262e <HAL_OSPIM_Config+0xb6>
    {
      CLEAR_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002616:	4bc3      	ldr	r3, [pc, #780]	; (8002924 <HAL_OSPIM_Config+0x3ac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4ac2      	ldr	r2, [pc, #776]	; (8002924 <HAL_OSPIM_Config+0x3ac>)
 800261c:	f023 0301 	bic.w	r3, r3, #1
 8002620:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x1U;
 8002622:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002626:	f043 0301 	orr.w	r3, r3, #1
 800262a:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }
    if ((OCTOSPI2->CR & OCTOSPI_CR_EN) != 0U)
 800262e:	4bbe      	ldr	r3, [pc, #760]	; (8002928 <HAL_OSPIM_Config+0x3b0>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <HAL_OSPIM_Config+0xda>
    {
      CLEAR_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 800263a:	4bbb      	ldr	r3, [pc, #748]	; (8002928 <HAL_OSPIM_Config+0x3b0>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4aba      	ldr	r2, [pc, #744]	; (8002928 <HAL_OSPIM_Config+0x3b0>)
 8002640:	f023 0301 	bic.w	r3, r3, #1
 8002644:	6013      	str	r3, [r2, #0]
      ospi_enabled |= 0x2U;
 8002646:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 800264a:	f043 0302 	orr.w	r3, r3, #2
 800264e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
    }

    /***************** Deactivation of previous configuration *****************/
    CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 8002652:	49b6      	ldr	r1, [pc, #728]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 8002654:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002656:	4613      	mov	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4413      	add	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	3348      	adds	r3, #72	; 0x48
 8002660:	443b      	add	r3, r7
 8002662:	3b2c      	subs	r3, #44	; 0x2c
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	3b01      	subs	r3, #1
 8002668:	009b      	lsls	r3, r3, #2
 800266a:	440b      	add	r3, r1
 800266c:	6859      	ldr	r1, [r3, #4]
 800266e:	48af      	ldr	r0, [pc, #700]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 8002670:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002672:	4613      	mov	r3, r2
 8002674:	009b      	lsls	r3, r3, #2
 8002676:	4413      	add	r3, r2
 8002678:	009b      	lsls	r3, r3, #2
 800267a:	3348      	adds	r3, #72	; 0x48
 800267c:	443b      	add	r3, r7
 800267e:	3b2c      	subs	r3, #44	; 0x2c
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	3b01      	subs	r3, #1
 8002684:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	4403      	add	r3, r0
 800268c:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      if (IOM_cfg[instance].ClkPort != 0U)
 800268e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002690:	4613      	mov	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	3348      	adds	r3, #72	; 0x48
 800269a:	443b      	add	r3, r7
 800269c:	3b34      	subs	r3, #52	; 0x34
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	f000 80a1 	beq.w	80027e8 <HAL_OSPIM_Config+0x270>
      {
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 80026a6:	49a1      	ldr	r1, [pc, #644]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 80026a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026aa:	4613      	mov	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	4413      	add	r3, r2
 80026b0:	009b      	lsls	r3, r3, #2
 80026b2:	3348      	adds	r3, #72	; 0x48
 80026b4:	443b      	add	r3, r7
 80026b6:	3b34      	subs	r3, #52	; 0x34
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	6859      	ldr	r1, [r3, #4]
 80026c2:	489a      	ldr	r0, [pc, #616]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 80026c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026c6:	4613      	mov	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	4413      	add	r3, r2
 80026cc:	009b      	lsls	r3, r3, #2
 80026ce:	3348      	adds	r3, #72	; 0x48
 80026d0:	443b      	add	r3, r7
 80026d2:	3b34      	subs	r3, #52	; 0x34
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	3b01      	subs	r3, #1
 80026d8:	f021 0201 	bic.w	r2, r1, #1
 80026dc:	009b      	lsls	r3, r3, #2
 80026de:	4403      	add	r3, r0
 80026e0:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[instance].DQSPort != 0U)
 80026e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026e4:	4613      	mov	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	3348      	adds	r3, #72	; 0x48
 80026ee:	443b      	add	r3, r7
 80026f0:	3b30      	subs	r3, #48	; 0x30
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01d      	beq.n	8002734 <HAL_OSPIM_Config+0x1bc>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80026f8:	498c      	ldr	r1, [pc, #560]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 80026fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026fc:	4613      	mov	r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	4413      	add	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	3348      	adds	r3, #72	; 0x48
 8002706:	443b      	add	r3, r7
 8002708:	3b30      	subs	r3, #48	; 0x30
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	3b01      	subs	r3, #1
 800270e:	009b      	lsls	r3, r3, #2
 8002710:	440b      	add	r3, r1
 8002712:	6859      	ldr	r1, [r3, #4]
 8002714:	4885      	ldr	r0, [pc, #532]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 8002716:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002718:	4613      	mov	r3, r2
 800271a:	009b      	lsls	r3, r3, #2
 800271c:	4413      	add	r3, r2
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	3348      	adds	r3, #72	; 0x48
 8002722:	443b      	add	r3, r7
 8002724:	3b30      	subs	r3, #48	; 0x30
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	3b01      	subs	r3, #1
 800272a:	f021 0210 	bic.w	r2, r1, #16
 800272e:	009b      	lsls	r3, r3, #2
 8002730:	4403      	add	r3, r0
 8002732:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002734:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002736:	4613      	mov	r3, r2
 8002738:	009b      	lsls	r3, r3, #2
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	3348      	adds	r3, #72	; 0x48
 8002740:	443b      	add	r3, r7
 8002742:	3b28      	subs	r3, #40	; 0x28
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d021      	beq.n	800278e <HAL_OSPIM_Config+0x216>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOLEN);
 800274a:	4978      	ldr	r1, [pc, #480]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 800274c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800274e:	4613      	mov	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4413      	add	r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	3348      	adds	r3, #72	; 0x48
 8002758:	443b      	add	r3, r7
 800275a:	3b28      	subs	r3, #40	; 0x28
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	3b01      	subs	r3, #1
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	6859      	ldr	r1, [r3, #4]
 800276a:	4870      	ldr	r0, [pc, #448]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 800276c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800276e:	4613      	mov	r3, r2
 8002770:	009b      	lsls	r3, r3, #2
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	3348      	adds	r3, #72	; 0x48
 8002778:	443b      	add	r3, r7
 800277a:	3b28      	subs	r3, #40	; 0x28
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	3b01      	subs	r3, #1
 8002780:	f003 0301 	and.w	r3, r3, #1
 8002784:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 8002788:	009b      	lsls	r3, r3, #2
 800278a:	4403      	add	r3, r0
 800278c:	605a      	str	r2, [r3, #4]
        }
        if (IOM_cfg[instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 800278e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002790:	4613      	mov	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	3348      	adds	r3, #72	; 0x48
 800279a:	443b      	add	r3, r7
 800279c:	3b24      	subs	r3, #36	; 0x24
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d021      	beq.n	80027e8 <HAL_OSPIM_Config+0x270>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)], OCTOSPIM_PCR_IOHEN);
 80027a4:	4961      	ldr	r1, [pc, #388]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 80027a6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	009b      	lsls	r3, r3, #2
 80027b0:	3348      	adds	r3, #72	; 0x48
 80027b2:	443b      	add	r3, r7
 80027b4:	3b24      	subs	r3, #36	; 0x24
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	3b01      	subs	r3, #1
 80027ba:	f003 0301 	and.w	r3, r3, #1
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	440b      	add	r3, r1
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	4859      	ldr	r0, [pc, #356]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 80027c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027c8:	4613      	mov	r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	4413      	add	r3, r2
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	3348      	adds	r3, #72	; 0x48
 80027d2:	443b      	add	r3, r7
 80027d4:	3b24      	subs	r3, #36	; 0x24
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	3b01      	subs	r3, #1
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4403      	add	r3, r0
 80027e6:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /********************* Deactivation of other instance *********************/
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 80027e8:	68bb      	ldr	r3, [r7, #8]
 80027ea:	6819      	ldr	r1, [r3, #0]
 80027ec:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80027f0:	4613      	mov	r3, r2
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	4413      	add	r3, r2
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	3348      	adds	r3, #72	; 0x48
 80027fa:	443b      	add	r3, r7
 80027fc:	3b34      	subs	r3, #52	; 0x34
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4299      	cmp	r1, r3
 8002802:	d038      	beq.n	8002876 <HAL_OSPIM_Config+0x2fe>
 8002804:	68bb      	ldr	r3, [r7, #8]
 8002806:	6859      	ldr	r1, [r3, #4]
 8002808:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800280c:	4613      	mov	r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	3348      	adds	r3, #72	; 0x48
 8002816:	443b      	add	r3, r7
 8002818:	3b30      	subs	r3, #48	; 0x30
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4299      	cmp	r1, r3
 800281e:	d02a      	beq.n	8002876 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	6899      	ldr	r1, [r3, #8]
 8002824:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002828:	4613      	mov	r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	4413      	add	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	3348      	adds	r3, #72	; 0x48
 8002832:	443b      	add	r3, r7
 8002834:	3b2c      	subs	r3, #44	; 0x2c
 8002836:	681b      	ldr	r3, [r3, #0]
    if ((cfg->ClkPort == IOM_cfg[other_instance].ClkPort) || (cfg->DQSPort == IOM_cfg[other_instance].DQSPort)     ||
 8002838:	4299      	cmp	r1, r3
 800283a:	d01c      	beq.n	8002876 <HAL_OSPIM_Config+0x2fe>
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	68d9      	ldr	r1, [r3, #12]
 8002840:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002844:	4613      	mov	r3, r2
 8002846:	009b      	lsls	r3, r3, #2
 8002848:	4413      	add	r3, r2
 800284a:	009b      	lsls	r3, r3, #2
 800284c:	3348      	adds	r3, #72	; 0x48
 800284e:	443b      	add	r3, r7
 8002850:	3b28      	subs	r3, #40	; 0x28
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4299      	cmp	r1, r3
 8002856:	d00e      	beq.n	8002876 <HAL_OSPIM_Config+0x2fe>
        (cfg->IOHighPort == IOM_cfg[other_instance].IOHighPort))
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	6919      	ldr	r1, [r3, #16]
 800285c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	3348      	adds	r3, #72	; 0x48
 800286a:	443b      	add	r3, r7
 800286c:	3b24      	subs	r3, #36	; 0x24
 800286e:	681b      	ldr	r3, [r3, #0]
        (cfg->NCSPort == IOM_cfg[other_instance].NCSPort) || (cfg->IOLowPort == IOM_cfg[other_instance].IOLowPort) ||
 8002870:	4299      	cmp	r1, r3
 8002872:	f040 80d3 	bne.w	8002a1c <HAL_OSPIM_Config+0x4a4>
        SET_BIT(OCTOSPIM->CR, OCTOSPIM_CR_MUXEN);
      }
      else
      {
#endif
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].ClkPort-1U)], OCTOSPIM_PCR_CLKEN);
 8002876:	492d      	ldr	r1, [pc, #180]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 8002878:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	009b      	lsls	r3, r3, #2
 8002884:	3348      	adds	r3, #72	; 0x48
 8002886:	443b      	add	r3, r7
 8002888:	3b34      	subs	r3, #52	; 0x34
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	3b01      	subs	r3, #1
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	6859      	ldr	r1, [r3, #4]
 8002894:	4825      	ldr	r0, [pc, #148]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 8002896:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800289a:	4613      	mov	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	4413      	add	r3, r2
 80028a0:	009b      	lsls	r3, r3, #2
 80028a2:	3348      	adds	r3, #72	; 0x48
 80028a4:	443b      	add	r3, r7
 80028a6:	3b34      	subs	r3, #52	; 0x34
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	3b01      	subs	r3, #1
 80028ac:	f021 0201 	bic.w	r2, r1, #1
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4403      	add	r3, r0
 80028b4:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].DQSPort != 0U)
 80028b6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80028ba:	4613      	mov	r3, r2
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	3348      	adds	r3, #72	; 0x48
 80028c4:	443b      	add	r3, r7
 80028c6:	3b30      	subs	r3, #48	; 0x30
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d01f      	beq.n	800290e <HAL_OSPIM_Config+0x396>
        {
          CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].DQSPort-1U)], OCTOSPIM_PCR_DQSEN);
 80028ce:	4917      	ldr	r1, [pc, #92]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 80028d0:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	009b      	lsls	r3, r3, #2
 80028dc:	3348      	adds	r3, #72	; 0x48
 80028de:	443b      	add	r3, r7
 80028e0:	3b30      	subs	r3, #48	; 0x30
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	3b01      	subs	r3, #1
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	6859      	ldr	r1, [r3, #4]
 80028ec:	480f      	ldr	r0, [pc, #60]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 80028ee:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80028f2:	4613      	mov	r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	3348      	adds	r3, #72	; 0x48
 80028fc:	443b      	add	r3, r7
 80028fe:	3b30      	subs	r3, #48	; 0x30
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	3b01      	subs	r3, #1
 8002904:	f021 0210 	bic.w	r2, r1, #16
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	4403      	add	r3, r0
 800290c:	605a      	str	r2, [r3, #4]
        }
        CLEAR_BIT(OCTOSPIM->PCR[(IOM_cfg[other_instance].NCSPort-1U)], OCTOSPIM_PCR_NCSEN);
 800290e:	4907      	ldr	r1, [pc, #28]	; (800292c <HAL_OSPIM_Config+0x3b4>)
 8002910:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002914:	4613      	mov	r3, r2
 8002916:	009b      	lsls	r3, r3, #2
 8002918:	4413      	add	r3, r2
 800291a:	009b      	lsls	r3, r3, #2
 800291c:	3348      	adds	r3, #72	; 0x48
 800291e:	443b      	add	r3, r7
 8002920:	3b2c      	subs	r3, #44	; 0x2c
 8002922:	e005      	b.n	8002930 <HAL_OSPIM_Config+0x3b8>
 8002924:	a0001000 	.word	0xa0001000
 8002928:	a0001400 	.word	0xa0001400
 800292c:	50061c00 	.word	0x50061c00
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	3b01      	subs	r3, #1
 8002934:	009b      	lsls	r3, r3, #2
 8002936:	440b      	add	r3, r1
 8002938:	6859      	ldr	r1, [r3, #4]
 800293a:	48a6      	ldr	r0, [pc, #664]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 800293c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002940:	4613      	mov	r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	3348      	adds	r3, #72	; 0x48
 800294a:	443b      	add	r3, r7
 800294c:	3b2c      	subs	r3, #44	; 0x2c
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	3b01      	subs	r3, #1
 8002952:	f421 7280 	bic.w	r2, r1, #256	; 0x100
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	4403      	add	r3, r0
 800295a:	605a      	str	r2, [r3, #4]
        if (IOM_cfg[other_instance].IOLowPort != HAL_OSPIM_IOPORT_NONE)
 800295c:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 8002960:	4613      	mov	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	4413      	add	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	3348      	adds	r3, #72	; 0x48
 800296a:	443b      	add	r3, r7
 800296c:	3b28      	subs	r3, #40	; 0x28
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d023      	beq.n	80029bc <HAL_OSPIM_Config+0x444>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002974:	4997      	ldr	r1, [pc, #604]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002976:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800297a:	4613      	mov	r3, r2
 800297c:	009b      	lsls	r3, r3, #2
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	3348      	adds	r3, #72	; 0x48
 8002984:	443b      	add	r3, r7
 8002986:	3b28      	subs	r3, #40	; 0x28
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	3b01      	subs	r3, #1
 800298c:	f003 0301 	and.w	r3, r3, #1
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	440b      	add	r3, r1
 8002994:	6859      	ldr	r1, [r3, #4]
 8002996:	488f      	ldr	r0, [pc, #572]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002998:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 800299c:	4613      	mov	r3, r2
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	3348      	adds	r3, #72	; 0x48
 80029a6:	443b      	add	r3, r7
 80029a8:	3b28      	subs	r3, #40	; 0x28
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	3b01      	subs	r3, #1
 80029ae:	f003 0301 	and.w	r3, r3, #1
 80029b2:	f421 3280 	bic.w	r2, r1, #65536	; 0x10000
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	4403      	add	r3, r0
 80029ba:	605a      	str	r2, [r3, #4]
                    OCTOSPIM_PCR_IOLEN);
        }
        if (IOM_cfg[other_instance].IOHighPort != HAL_OSPIM_IOPORT_NONE)
 80029bc:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	009b      	lsls	r3, r3, #2
 80029c8:	3348      	adds	r3, #72	; 0x48
 80029ca:	443b      	add	r3, r7
 80029cc:	3b24      	subs	r3, #36	; 0x24
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d023      	beq.n	8002a1c <HAL_OSPIM_Config+0x4a4>
        {
          CLEAR_BIT(OCTOSPIM->PCR[((IOM_cfg[other_instance].IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 80029d4:	497f      	ldr	r1, [pc, #508]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 80029d6:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80029da:	4613      	mov	r3, r2
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	4413      	add	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	3348      	adds	r3, #72	; 0x48
 80029e4:	443b      	add	r3, r7
 80029e6:	3b24      	subs	r3, #36	; 0x24
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	3b01      	subs	r3, #1
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	440b      	add	r3, r1
 80029f4:	6859      	ldr	r1, [r3, #4]
 80029f6:	4877      	ldr	r0, [pc, #476]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 80029f8:	f897 203d 	ldrb.w	r2, [r7, #61]	; 0x3d
 80029fc:	4613      	mov	r3, r2
 80029fe:	009b      	lsls	r3, r3, #2
 8002a00:	4413      	add	r3, r2
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	3348      	adds	r3, #72	; 0x48
 8002a06:	443b      	add	r3, r7
 8002a08:	3b24      	subs	r3, #36	; 0x24
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	3b01      	subs	r3, #1
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	f021 7280 	bic.w	r2, r1, #16777216	; 0x1000000
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	4403      	add	r3, r0
 8002a1a:	605a      	str	r2, [r3, #4]
      }
#endif
    }

    /******************** Activation of new configuration *********************/
        MODIFY_REG(OCTOSPIM->PCR[(cfg->NCSPort - 1U)], (OCTOSPIM_PCR_NCSEN | OCTOSPIM_PCR_NCSSRC),
 8002a1c:	4a6d      	ldr	r2, [pc, #436]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002a1e:	68bb      	ldr	r3, [r7, #8]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a30:	025b      	lsls	r3, r3, #9
 8002a32:	431a      	orrs	r2, r3
 8002a34:	4967      	ldr	r1, [pc, #412]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	3b01      	subs	r3, #1
 8002a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	440b      	add	r3, r1
 8002a44:	605a      	str	r2, [r3, #4]
      }
    }
    else
    {
#endif
      MODIFY_REG(OCTOSPIM->PCR[(cfg->ClkPort-1U)], (OCTOSPIM_PCR_CLKEN | OCTOSPIM_PCR_CLKSRC),
 8002a46:	4a63      	ldr	r2, [pc, #396]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f023 0203 	bic.w	r2, r3, #3
 8002a58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	431a      	orrs	r2, r3
 8002a5e:	495d      	ldr	r1, [pc, #372]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	3b01      	subs	r3, #1
 8002a66:	f042 0201 	orr.w	r2, r2, #1
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	605a      	str	r2, [r3, #4]
                (OCTOSPIM_PCR_CLKEN | (instance << OCTOSPIM_PCR_CLKSRC_Pos)));
      if (cfg->DQSPort != 0U)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d014      	beq.n	8002aa2 <HAL_OSPIM_Config+0x52a>
      {
        MODIFY_REG(OCTOSPIM->PCR[(cfg->DQSPort-1U)], (OCTOSPIM_PCR_DQSEN | OCTOSPIM_PCR_DQSSRC),
 8002a78:	4a56      	ldr	r2, [pc, #344]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	4413      	add	r3, r2
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8c:	015b      	lsls	r3, r3, #5
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	4950      	ldr	r1, [pc, #320]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	f042 0210 	orr.w	r2, r2, #16
 8002a9c:	009b      	lsls	r3, r3, #2
 8002a9e:	440b      	add	r3, r1
 8002aa0:	605a      	str	r2, [r3, #4]
                  (OCTOSPIM_PCR_DQSEN | (instance << OCTOSPIM_PCR_DQSSRC_Pos)));
      }

      if ((cfg->IOLowPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d019      	beq.n	8002ae2 <HAL_OSPIM_Config+0x56a>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002aae:	4a49      	ldr	r2, [pc, #292]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	4413      	add	r3, r2
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002ac4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ac6:	049b      	lsls	r3, r3, #18
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	4942      	ldr	r1, [pc, #264]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	68db      	ldr	r3, [r3, #12]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	440b      	add	r3, r1
 8002ade:	605a      	str	r2, [r3, #4]
 8002ae0:	e01c      	b.n	8002b1c <HAL_OSPIM_Config+0x5a4>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOLowPort != HAL_OSPIM_IOPORT_NONE)
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	68db      	ldr	r3, [r3, #12]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d018      	beq.n	8002b1c <HAL_OSPIM_Config+0x5a4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOLowPort-1U)& OSPI_IOM_PORT_MASK)],
 8002aea:	4a3a      	ldr	r2, [pc, #232]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	68db      	ldr	r3, [r3, #12]
 8002af0:	3b01      	subs	r3, #1
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	4413      	add	r3, r2
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002b00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b02:	069b      	lsls	r3, r3, #26
 8002b04:	431a      	orrs	r2, r3
 8002b06:	4933      	ldr	r1, [pc, #204]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	3b01      	subs	r3, #1
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	440b      	add	r3, r1
 8002b1a:	605a      	str	r2, [r3, #4]
      else
      {
         /* Nothing to do */
      }

      if ((cfg->IOHighPort & OCTOSPIM_PCR_IOLEN) != 0U)
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	691b      	ldr	r3, [r3, #16]
 8002b20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d019      	beq.n	8002b5c <HAL_OSPIM_Config+0x5e4>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002b28:	4a2a      	ldr	r2, [pc, #168]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	691b      	ldr	r3, [r3, #16]
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	f003 0301 	and.w	r3, r3, #1
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	4413      	add	r3, r2
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8002b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b40:	049b      	lsls	r3, r3, #18
 8002b42:	431a      	orrs	r2, r3
 8002b44:	4923      	ldr	r1, [pc, #140]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	3b01      	subs	r3, #1
 8002b4c:	f003 0301 	and.w	r3, r3, #1
 8002b50:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
 8002b54:	009b      	lsls	r3, r3, #2
 8002b56:	440b      	add	r3, r1
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	e01c      	b.n	8002b96 <HAL_OSPIM_Config+0x61e>
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC),
                  (OCTOSPIM_PCR_IOLEN | OCTOSPIM_PCR_IOLSRC_0 | (instance << (OCTOSPIM_PCR_IOLSRC_Pos+1U))));
      }
      else if (cfg->IOHighPort != HAL_OSPIM_IOPORT_NONE)
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d018      	beq.n	8002b96 <HAL_OSPIM_Config+0x61e>
      {
        MODIFY_REG(OCTOSPIM->PCR[((cfg->IOHighPort-1U)& OSPI_IOM_PORT_MASK)],
 8002b64:	4a1b      	ldr	r2, [pc, #108]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002b66:	68bb      	ldr	r3, [r7, #8]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8002b7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b7c:	069b      	lsls	r3, r3, #26
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	4914      	ldr	r1, [pc, #80]	; (8002bd4 <HAL_OSPIM_Config+0x65c>)
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	f042 7240 	orr.w	r2, r2, #50331648	; 0x3000000
 8002b90:	009b      	lsls	r3, r3, #2
 8002b92:	440b      	add	r3, r1
 8002b94:	605a      	str	r2, [r3, #4]
#if   defined (OCTOSPIM_CR_MUXEN)
    }
#endif

    /******* Re-enable both OctoSPI after configure OctoSPI IO Manager ********/
    if ((ospi_enabled & 0x1U) != 0U)
 8002b96:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <HAL_OSPIM_Config+0x636>
    {
      SET_BIT(OCTOSPI1->CR, OCTOSPI_CR_EN);
 8002ba2:	4b0d      	ldr	r3, [pc, #52]	; (8002bd8 <HAL_OSPIM_Config+0x660>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a0c      	ldr	r2, [pc, #48]	; (8002bd8 <HAL_OSPIM_Config+0x660>)
 8002ba8:	f043 0301 	orr.w	r3, r3, #1
 8002bac:	6013      	str	r3, [r2, #0]
    }
    if ((ospi_enabled & 0x2U) != 0U)
 8002bae:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d005      	beq.n	8002bc6 <HAL_OSPIM_Config+0x64e>
    {
      SET_BIT(OCTOSPI2->CR, OCTOSPI_CR_EN);
 8002bba:	4b08      	ldr	r3, [pc, #32]	; (8002bdc <HAL_OSPIM_Config+0x664>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a07      	ldr	r2, [pc, #28]	; (8002bdc <HAL_OSPIM_Config+0x664>)
 8002bc0:	f043 0301 	orr.w	r3, r3, #1
 8002bc4:	6013      	str	r3, [r2, #0]
    }
  }

  /* Return function status */
  return status;
 8002bc6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8002bca:	4618      	mov	r0, r3
 8002bcc:	3748      	adds	r7, #72	; 0x48
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}
 8002bd2:	bf00      	nop
 8002bd4:	50061c00 	.word	0x50061c00
 8002bd8:	a0001000 	.word	0xa0001000
 8002bdc:	a0001400 	.word	0xa0001400

08002be0 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b084      	sub	sp, #16
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	60f8      	str	r0, [r7, #12]
 8002be8:	60b9      	str	r1, [r7, #8]
 8002bea:	603b      	str	r3, [r7, #0]
 8002bec:	4613      	mov	r3, r2
 8002bee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002bf0:	e01a      	b.n	8002c28 <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf2:	69bb      	ldr	r3, [r7, #24]
 8002bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bf8:	d016      	beq.n	8002c28 <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfa:	f7fd fd43 	bl	8000684 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	429a      	cmp	r2, r3
 8002c08:	d302      	bcc.n	8002c10 <OSPI_WaitFlagStateUntilTimeout+0x30>
 8002c0a:	69bb      	ldr	r3, [r7, #24]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d10b      	bne.n	8002c28 <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c16:	645a      	str	r2, [r3, #68]	; 0x44
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	649a      	str	r2, [r3, #72]	; 0x48

        return HAL_ERROR;
 8002c24:	2301      	movs	r3, #1
 8002c26:	e00e      	b.n	8002c46 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	6a1a      	ldr	r2, [r3, #32]
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	4013      	ands	r3, r2
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	bf14      	ite	ne
 8002c36:	2301      	movne	r3, #1
 8002c38:	2300      	moveq	r3, #0
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	79fb      	ldrb	r3, [r7, #7]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d1d6      	bne.n	8002bf2 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
	...

08002c50 <OSPI_ConfigCmd>:
  * @param  hospi : OSPI handle
  * @param  cmd   : structure that contains the command configuration information
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_ConfigCmd(OSPI_HandleTypeDef *hospi, OSPI_RegularCmdTypeDef *cmd)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	; 0x24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
 8002c58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	77fb      	strb	r3, [r7, #31]
  __IO uint32_t *tcr_reg;
  __IO uint32_t *ir_reg;
  __IO uint32_t *abr_reg;

  /* Re-initialize the value of the functional mode */
  MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FMODE, 0U);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002c6c:	601a      	str	r2, [r3, #0]

  /* Configure the flash ID */
  if (hospi->Init.DualQuad == HAL_OSPI_DUALQUAD_DISABLE)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10a      	bne.n	8002c8c <OSPI_ConfigCmd+0x3c>
  {
    MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FSEL, cmd->FlashId);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	430a      	orrs	r2, r1
 8002c8a:	601a      	str	r2, [r3, #0]
  }

  if (cmd->OperationType == HAL_OSPI_OPTYPE_WRITE_CFG)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d114      	bne.n	8002cbe <OSPI_ConfigCmd+0x6e>
  {
    ccr_reg = &(hospi->Instance->WCCR);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8002c9c:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->WTCR);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002ca6:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->WIR);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002cb0:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->WABR);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8002cba:	60fb      	str	r3, [r7, #12]
 8002cbc:	e013      	b.n	8002ce6 <OSPI_ConfigCmd+0x96>
  }
  else
  {
    ccr_reg = &(hospi->Instance->CCR);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8002cc6:	61bb      	str	r3, [r7, #24]
    tcr_reg = &(hospi->Instance->TCR);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8002cd0:	617b      	str	r3, [r7, #20]
    ir_reg  = &(hospi->Instance->IR);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f503 7388 	add.w	r3, r3, #272	; 0x110
 8002cda:	613b      	str	r3, [r7, #16]
    abr_reg = &(hospi->Instance->ABR);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8002ce4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CCR register with DQS and SIOO modes */
  *ccr_reg = (cmd->DQSMode | cmd->SIOOMode);
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	601a      	str	r2, [r3, #0]

  if (cmd->AlternateBytesMode != HAL_OSPI_ALTERNATE_BYTES_NONE)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d012      	beq.n	8002d22 <OSPI_ConfigCmd+0xd2>
  {
    /* Configure the ABR register with alternate bytes value */
    *abr_reg = cmd->AlternateBytes;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	601a      	str	r2, [r3, #0]

    /* Configure the CCR register with alternate bytes communication parameters */
    MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ABMODE | OCTOSPI_CCR_ABDTR | OCTOSPI_CCR_ABSIZE),
 8002d04:	69bb      	ldr	r3, [r7, #24]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d14:	4319      	orrs	r1, r3
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	431a      	orrs	r2, r3
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	601a      	str	r2, [r3, #0]
                           (cmd->AlternateBytesMode | cmd->AlternateBytesDtrMode | cmd->AlternateBytesSize));
  }

  /* Configure the TCR register with the number of dummy cycles */
  MODIFY_REG((*tcr_reg), OCTOSPI_TCR_DCYC, cmd->DummyCycles);
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 021f 	bic.w	r2, r3, #31
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	601a      	str	r2, [r3, #0]

  if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d009      	beq.n	8002d50 <OSPI_ConfigCmd+0x100>
  {
    if (cmd->OperationType == HAL_OSPI_OPTYPE_COMMON_CFG)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d105      	bne.n	8002d50 <OSPI_ConfigCmd+0x100>
    {
      /* Configure the DLR register with the number of data */
      hospi->Instance->DLR = (cmd->NbData - 1U);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	3a01      	subs	r2, #1
 8002d4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (cmd->InstructionMode != HAL_OSPI_INSTRUCTION_NONE)
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 8099 	beq.w	8002e8c <OSPI_ConfigCmd+0x23c>
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	69db      	ldr	r3, [r3, #28]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d055      	beq.n	8002e0e <OSPI_ConfigCmd+0x1be>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d01e      	beq.n	8002da8 <OSPI_ConfigCmd+0x158>
      {
        /* ---- Command with instruction, address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002d6a:	69bb      	ldr	r3, [r7, #24]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	4b68      	ldr	r3, [pc, #416]	; (8002f10 <OSPI_ConfigCmd+0x2c0>)
 8002d70:	4013      	ands	r3, r2
 8002d72:	683a      	ldr	r2, [r7, #0]
 8002d74:	68d1      	ldr	r1, [r2, #12]
 8002d76:	683a      	ldr	r2, [r7, #0]
 8002d78:	6952      	ldr	r2, [r2, #20]
 8002d7a:	4311      	orrs	r1, r2
 8002d7c:	683a      	ldr	r2, [r7, #0]
 8002d7e:	6912      	ldr	r2, [r2, #16]
 8002d80:	4311      	orrs	r1, r2
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	69d2      	ldr	r2, [r2, #28]
 8002d86:	4311      	orrs	r1, r2
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002d8c:	4311      	orrs	r1, r2
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	6a12      	ldr	r2, [r2, #32]
 8002d92:	4311      	orrs	r1, r2
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d98:	4311      	orrs	r1, r2
 8002d9a:	683a      	ldr	r2, [r7, #0]
 8002d9c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	431a      	orrs	r2, r3
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	e028      	b.n	8002dfa <OSPI_ConfigCmd+0x1aa>
      else
      {
        /* ---- Command with instruction and address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE  | OCTOSPI_CCR_IDTR  | OCTOSPI_CCR_ISIZE  |
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002db0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002db4:	683a      	ldr	r2, [r7, #0]
 8002db6:	68d1      	ldr	r1, [r2, #12]
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	6952      	ldr	r2, [r2, #20]
 8002dbc:	4311      	orrs	r1, r2
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	6912      	ldr	r2, [r2, #16]
 8002dc2:	4311      	orrs	r1, r2
 8002dc4:	683a      	ldr	r2, [r7, #0]
 8002dc6:	69d2      	ldr	r2, [r2, #28]
 8002dc8:	4311      	orrs	r1, r2
 8002dca:	683a      	ldr	r2, [r7, #0]
 8002dcc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dce:	4311      	orrs	r1, r2
 8002dd0:	683a      	ldr	r2, [r7, #0]
 8002dd2:	6a12      	ldr	r2, [r2, #32]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	601a      	str	r2, [r3, #0]
                                OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize |
                                cmd->AddressMode     | cmd->AddressDtrMode     | cmd->AddressSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002de0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002de4:	d109      	bne.n	8002dfa <OSPI_ConfigCmd+0x1aa>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d105      	bne.n	8002dfa <OSPI_ConfigCmd+0x1aa>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002dee:	69bb      	ldr	r3, [r7, #24]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	689a      	ldr	r2, [r3, #8]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	601a      	str	r2, [r3, #0]

      /* Configure the AR register with the address value */
      hospi->Instance->AR = cmd->Address;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	6992      	ldr	r2, [r2, #24]
 8002e0a:	649a      	str	r2, [r3, #72]	; 0x48
 8002e0c:	e078      	b.n	8002f00 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d017      	beq.n	8002e46 <OSPI_ConfigCmd+0x1f6>
      {
        /* ---- Command with instruction and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE |
 8002e16:	69bb      	ldr	r3, [r7, #24]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002e1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e22:	683a      	ldr	r2, [r7, #0]
 8002e24:	68d1      	ldr	r1, [r2, #12]
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	6952      	ldr	r2, [r2, #20]
 8002e2a:	4311      	orrs	r1, r2
 8002e2c:	683a      	ldr	r2, [r7, #0]
 8002e2e:	6912      	ldr	r2, [r2, #16]
 8002e30:	4311      	orrs	r1, r2
 8002e32:	683a      	ldr	r2, [r7, #0]
 8002e34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002e36:	4311      	orrs	r1, r2
 8002e38:	683a      	ldr	r2, [r7, #0]
 8002e3a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	431a      	orrs	r2, r3
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	e01d      	b.n	8002e82 <OSPI_ConfigCmd+0x232>
      else
      {
        /* ---- Command with only instruction ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_IMODE | OCTOSPI_CCR_IDTR | OCTOSPI_CCR_ISIZE),
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68d9      	ldr	r1, [r3, #12]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	4319      	orrs	r1, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	691b      	ldr	r3, [r3, #16]
 8002e5c:	430b      	orrs	r3, r1
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	601a      	str	r2, [r3, #0]
                               (cmd->InstructionMode | cmd->InstructionDtrMode | cmd->InstructionSize));

        /* The DHQC bit is linked with DDTR bit which should be activated */
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e68:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002e6c:	d109      	bne.n	8002e82 <OSPI_ConfigCmd+0x232>
            (cmd->InstructionDtrMode == HAL_OSPI_INSTRUCTION_DTR_ENABLE))
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	695b      	ldr	r3, [r3, #20]
        if ((hospi->Init.DelayHoldQuarterCycle == HAL_OSPI_DHQC_ENABLE) &&
 8002e72:	2b08      	cmp	r3, #8
 8002e74:	d105      	bne.n	8002e82 <OSPI_ConfigCmd+0x232>
        {
          MODIFY_REG((*ccr_reg), OCTOSPI_CCR_DDTR, HAL_OSPI_DATA_DTR_ENABLE);
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	601a      	str	r2, [r3, #0]
        }
      }

      /* Configure the IR register with the instruction value */
      *ir_reg = cmd->Instruction;
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	689a      	ldr	r2, [r3, #8]
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	601a      	str	r2, [r3, #0]
 8002e8a:	e039      	b.n	8002f00 <OSPI_ConfigCmd+0x2b0>

    }
  }
  else
  {
    if (cmd->AddressMode != HAL_OSPI_ADDRESS_NONE)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	69db      	ldr	r3, [r3, #28]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d030      	beq.n	8002ef6 <OSPI_ConfigCmd+0x2a6>
    {
      if (cmd->DataMode != HAL_OSPI_DATA_NONE)
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d017      	beq.n	8002ecc <OSPI_ConfigCmd+0x27c>
      {
        /* ---- Command with address and data ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE |
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8002ea4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002ea8:	683a      	ldr	r2, [r7, #0]
 8002eaa:	69d1      	ldr	r1, [r2, #28]
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002eb0:	4311      	orrs	r1, r2
 8002eb2:	683a      	ldr	r2, [r7, #0]
 8002eb4:	6a12      	ldr	r2, [r2, #32]
 8002eb6:	4311      	orrs	r1, r2
 8002eb8:	683a      	ldr	r2, [r7, #0]
 8002eba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002ebc:	4311      	orrs	r1, r2
 8002ebe:	683a      	ldr	r2, [r7, #0]
 8002ec0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	69bb      	ldr	r3, [r7, #24]
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	e00e      	b.n	8002eea <OSPI_ConfigCmd+0x29a>
      else
      {
        /* ---- Command with only address ---- */

        /* Configure the CCR register with all communication parameters */
        MODIFY_REG((*ccr_reg), (OCTOSPI_CCR_ADMODE | OCTOSPI_CCR_ADDTR | OCTOSPI_CCR_ADSIZE),
 8002ecc:	69bb      	ldr	r3, [r7, #24]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	69d9      	ldr	r1, [r3, #28]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002edc:	4319      	orrs	r1, r3
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	6a1b      	ldr	r3, [r3, #32]
 8002ee2:	430b      	orrs	r3, r1
 8002ee4:	431a      	orrs	r2, r3
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	601a      	str	r2, [r3, #0]
                               (cmd->AddressMode | cmd->AddressDtrMode | cmd->AddressSize));
      }

      /* Configure the AR register with the instruction value */
      hospi->Instance->AR = cmd->Address;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	683a      	ldr	r2, [r7, #0]
 8002ef0:	6992      	ldr	r2, [r2, #24]
 8002ef2:	649a      	str	r2, [r3, #72]	; 0x48
 8002ef4:	e004      	b.n	8002f00 <OSPI_ConfigCmd+0x2b0>
    }
    else
    {
      /* ---- Invalid command configuration (no instruction, no address) ---- */
      status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	77fb      	strb	r3, [r7, #31]
      hospi->ErrorCode = HAL_OSPI_ERROR_INVALID_PARAM;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2208      	movs	r2, #8
 8002efe:	649a      	str	r2, [r3, #72]	; 0x48
    }
  }

  /* Return function status */
  return status;
 8002f00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3724      	adds	r7, #36	; 0x24
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr
 8002f0e:	bf00      	nop
 8002f10:	f0ffc0c0 	.word	0xf0ffc0c0

08002f14 <OSPIM_GetConfig>:
  * @param  instance_nb : number of the instance
  * @param  cfg         : configuration of the IO Manager for the instance
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPIM_GetConfig(uint8_t instance_nb, OSPIM_CfgTypeDef *cfg)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b087      	sub	sp, #28
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	6039      	str	r1, [r7, #0]
 8002f1e:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8002f20:	2300      	movs	r3, #0
 8002f22:	75fb      	strb	r3, [r7, #23]
  uint32_t reg;
  uint32_t value = 0U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	613b      	str	r3, [r7, #16]
  uint32_t index;

  if ((instance_nb == 0U) || (instance_nb > OSPI_NB_INSTANCE) || (cfg == NULL))
 8002f28:	79fb      	ldrb	r3, [r7, #7]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d005      	beq.n	8002f3a <OSPIM_GetConfig+0x26>
 8002f2e:	79fb      	ldrb	r3, [r7, #7]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d802      	bhi.n	8002f3a <OSPIM_GetConfig+0x26>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <OSPIM_GetConfig+0x2c>
  {
    /* Invalid parameter -> error returned */
    status = HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	75fb      	strb	r3, [r7, #23]
 8002f3e:	e08e      	b.n	800305e <OSPIM_GetConfig+0x14a>
  }
  else
  {
    /* Initialize the structure */
    cfg->ClkPort    = 0U;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	2200      	movs	r2, #0
 8002f44:	601a      	str	r2, [r3, #0]
    cfg->DQSPort    = 0U;
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	605a      	str	r2, [r3, #4]
    cfg->NCSPort    = 0U;
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	2200      	movs	r2, #0
 8002f50:	609a      	str	r2, [r3, #8]
    cfg->IOLowPort  = 0U;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	2200      	movs	r2, #0
 8002f56:	60da      	str	r2, [r3, #12]
    cfg->IOHighPort = 0U;
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	611a      	str	r2, [r3, #16]

    if (instance_nb == 2U)
 8002f5e:	79fb      	ldrb	r3, [r7, #7]
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d101      	bne.n	8002f68 <OSPIM_GetConfig+0x54>
    {
#if   defined (OCTOSPIM_CR_MUXEN)
      if ((OCTOSPIM->CR & OCTOSPIM_CR_MUXEN) == 0U)
      {
#endif
        value = (OCTOSPIM_PCR_CLKSRC | OCTOSPIM_PCR_DQSSRC | OCTOSPIM_PCR_NCSSRC
 8002f64:	4b41      	ldr	r3, [pc, #260]	; (800306c <OSPIM_GetConfig+0x158>)
 8002f66:	613b      	str	r3, [r7, #16]
      }
#endif
    }

    /* Get the information about the instance */
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8002f68:	2300      	movs	r3, #0
 8002f6a:	60fb      	str	r3, [r7, #12]
 8002f6c:	e074      	b.n	8003058 <OSPIM_GetConfig+0x144>
    {
      reg = OCTOSPIM->PCR[index];
 8002f6e:	4a40      	ldr	r2, [pc, #256]	; (8003070 <OSPIM_GetConfig+0x15c>)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	60bb      	str	r3, [r7, #8]

      if ((reg & OCTOSPIM_PCR_CLKEN) != 0U)
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	f003 0301 	and.w	r3, r3, #1
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <OSPIM_GetConfig+0x86>
      {
        /* The clock is enabled on this port */
        if ((reg & OCTOSPIM_PCR_CLKSRC) == (value & OCTOSPIM_PCR_CLKSRC))
 8002f84:	68ba      	ldr	r2, [r7, #8]
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	4053      	eors	r3, r2
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d103      	bne.n	8002f9a <OSPIM_GetConfig+0x86>
        {
          /* The clock correspond to the instance passed as parameter */
          cfg->ClkPort = index+1U;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	1c5a      	adds	r2, r3, #1
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	601a      	str	r2, [r3, #0]
        }
      }

      if ((reg & OCTOSPIM_PCR_DQSEN) != 0U)
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	f003 0310 	and.w	r3, r3, #16
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d00a      	beq.n	8002fba <OSPIM_GetConfig+0xa6>
      {
        /* The DQS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_DQSSRC) == (value & OCTOSPIM_PCR_DQSSRC))
 8002fa4:	68ba      	ldr	r2, [r7, #8]
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	4053      	eors	r3, r2
 8002faa:	f003 0320 	and.w	r3, r3, #32
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d103      	bne.n	8002fba <OSPIM_GetConfig+0xa6>
        {
          /* The DQS correspond to the instance passed as parameter */
          cfg->DQSPort = index+1U;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	1c5a      	adds	r2, r3, #1
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	605a      	str	r2, [r3, #4]
        }
      }

      if ((reg & OCTOSPIM_PCR_NCSEN) != 0U)
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d00a      	beq.n	8002fda <OSPIM_GetConfig+0xc6>
      {
        /* The nCS is enabled on this port */
        if ((reg & OCTOSPIM_PCR_NCSSRC) == (value & OCTOSPIM_PCR_NCSSRC))
 8002fc4:	68ba      	ldr	r2, [r7, #8]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4053      	eors	r3, r2
 8002fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d103      	bne.n	8002fda <OSPIM_GetConfig+0xc6>
        {
          /* The nCS correspond to the instance passed as parameter */
          cfg->NCSPort = index+1U;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	1c5a      	adds	r2, r3, #1
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	609a      	str	r2, [r3, #8]
        }
      }

      if ((reg & OCTOSPIM_PCR_IOLEN) != 0U)
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d018      	beq.n	8003016 <OSPIM_GetConfig+0x102>
      {
        /* The IO Low is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOLSRC_1) == (value & OCTOSPIM_PCR_IOLSRC_1))
 8002fe4:	68ba      	ldr	r2, [r7, #8]
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	4053      	eors	r3, r2
 8002fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d111      	bne.n	8003016 <OSPIM_GetConfig+0x102>
        {
          /* The IO Low correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOLSRC_0) == 0U)
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d106      	bne.n	800300a <OSPIM_GetConfig+0xf6>
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	3301      	adds	r3, #1
 8003000:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	60da      	str	r2, [r3, #12]
 8003008:	e005      	b.n	8003016 <OSPIM_GetConfig+0x102>
          }
          else
          {
            cfg->IOLowPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	3301      	adds	r3, #1
 800300e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	60da      	str	r2, [r3, #12]
          }
        }
      }

      if ((reg & OCTOSPIM_PCR_IOHEN) != 0U)
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800301c:	2b00      	cmp	r3, #0
 800301e:	d018      	beq.n	8003052 <OSPIM_GetConfig+0x13e>
      {
        /* The IO High is enabled on this port */
        if ((reg & OCTOSPIM_PCR_IOHSRC_1) == (value & OCTOSPIM_PCR_IOHSRC_1))
 8003020:	68ba      	ldr	r2, [r7, #8]
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4053      	eors	r3, r2
 8003026:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d111      	bne.n	8003052 <OSPIM_GetConfig+0x13e>
        {
          /* The IO High correspond to the instance passed as parameter */
          if ((reg & OCTOSPIM_PCR_IOHSRC_0) == 0U)
 800302e:	68bb      	ldr	r3, [r7, #8]
 8003030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d106      	bne.n	8003046 <OSPIM_GetConfig+0x132>
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOLEN | (index+1U));
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	3301      	adds	r3, #1
 800303c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	611a      	str	r2, [r3, #16]
 8003044:	e005      	b.n	8003052 <OSPIM_GetConfig+0x13e>
          }
          else
          {
            cfg->IOHighPort = (OCTOSPIM_PCR_IOHEN | (index+1U));
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	3301      	adds	r3, #1
 800304a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	611a      	str	r2, [r3, #16]
    for (index = 0U; index < OSPI_IOM_NB_PORTS; index ++)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	3301      	adds	r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b01      	cmp	r3, #1
 800305c:	d987      	bls.n	8002f6e <OSPIM_GetConfig+0x5a>
      }
    }
  }

  /* Return function status */
  return status;
 800305e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003060:	4618      	mov	r0, r3
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	04040222 	.word	0x04040222
 8003070:	50061c00 	.word	0x50061c00

08003074 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003074:	b480      	push	{r7}
 8003076:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003078:	4b0d      	ldr	r3, [pc, #52]	; (80030b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003080:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003084:	d102      	bne.n	800308c <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8003086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800308a:	e00b      	b.n	80030a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 800308c:	4b08      	ldr	r3, [pc, #32]	; (80030b0 <HAL_PWREx_GetVoltageRange+0x3c>)
 800308e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003092:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800309a:	d102      	bne.n	80030a2 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 800309c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80030a0:	e000      	b.n	80030a4 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80030a2:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80030a4:	4618      	mov	r0, r3
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	40007000 	.word	0x40007000

080030b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d141      	bne.n	8003146 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80030c2:	4b4b      	ldr	r3, [pc, #300]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80030ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ce:	d131      	bne.n	8003134 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80030d0:	4b47      	ldr	r3, [pc, #284]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030d6:	4a46      	ldr	r2, [pc, #280]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80030dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80030e0:	4b43      	ldr	r3, [pc, #268]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80030e8:	4a41      	ldr	r2, [pc, #260]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80030ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80030ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80030f0:	4b40      	ldr	r3, [pc, #256]	; (80031f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	2232      	movs	r2, #50	; 0x32
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	4a3f      	ldr	r2, [pc, #252]	; (80031f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	0c9b      	lsrs	r3, r3, #18
 8003102:	3301      	adds	r3, #1
 8003104:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003106:	e002      	b.n	800310e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	3b01      	subs	r3, #1
 800310c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800310e:	4b38      	ldr	r3, [pc, #224]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003116:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800311a:	d102      	bne.n	8003122 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d1f2      	bne.n	8003108 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003122:	4b33      	ldr	r3, [pc, #204]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003124:	695b      	ldr	r3, [r3, #20]
 8003126:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800312a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800312e:	d158      	bne.n	80031e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003130:	2303      	movs	r3, #3
 8003132:	e057      	b.n	80031e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003134:	4b2e      	ldr	r3, [pc, #184]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003136:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800313a:	4a2d      	ldr	r2, [pc, #180]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800313c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003140:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003144:	e04d      	b.n	80031e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800314c:	d141      	bne.n	80031d2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800314e:	4b28      	ldr	r3, [pc, #160]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003156:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800315a:	d131      	bne.n	80031c0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800315c:	4b24      	ldr	r3, [pc, #144]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800315e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003162:	4a23      	ldr	r2, [pc, #140]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003168:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800316c:	4b20      	ldr	r3, [pc, #128]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003174:	4a1e      	ldr	r2, [pc, #120]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003176:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800317a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 800317c:	4b1d      	ldr	r3, [pc, #116]	; (80031f4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2232      	movs	r2, #50	; 0x32
 8003182:	fb02 f303 	mul.w	r3, r2, r3
 8003186:	4a1c      	ldr	r2, [pc, #112]	; (80031f8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003188:	fba2 2303 	umull	r2, r3, r2, r3
 800318c:	0c9b      	lsrs	r3, r3, #18
 800318e:	3301      	adds	r3, #1
 8003190:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003192:	e002      	b.n	800319a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	3b01      	subs	r3, #1
 8003198:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800319a:	4b15      	ldr	r3, [pc, #84]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800319c:	695b      	ldr	r3, [r3, #20]
 800319e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031a6:	d102      	bne.n	80031ae <HAL_PWREx_ControlVoltageScaling+0xfa>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f2      	bne.n	8003194 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80031ae:	4b10      	ldr	r3, [pc, #64]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031b0:	695b      	ldr	r3, [r3, #20]
 80031b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ba:	d112      	bne.n	80031e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80031bc:	2303      	movs	r3, #3
 80031be:	e011      	b.n	80031e4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80031c0:	4b0b      	ldr	r3, [pc, #44]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031c6:	4a0a      	ldr	r2, [pc, #40]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80031d0:	e007      	b.n	80031e2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80031d2:	4b07      	ldr	r3, [pc, #28]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80031da:	4a05      	ldr	r2, [pc, #20]	; (80031f0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80031dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80031e0:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	4618      	mov	r0, r3
 80031e6:	3714      	adds	r7, #20
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr
 80031f0:	40007000 	.word	0x40007000
 80031f4:	2000052c 	.word	0x2000052c
 80031f8:	431bde83 	.word	0x431bde83

080031fc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d102      	bne.n	8003210 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	f000 bc08 	b.w	8003a20 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003210:	4b96      	ldr	r3, [pc, #600]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800321a:	4b94      	ldr	r3, [pc, #592]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	f003 0303 	and.w	r3, r3, #3
 8003222:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 0310 	and.w	r3, r3, #16
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 80e4 	beq.w	80033fa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <HAL_RCC_OscConfig+0x4c>
 8003238:	69bb      	ldr	r3, [r7, #24]
 800323a:	2b0c      	cmp	r3, #12
 800323c:	f040 808b 	bne.w	8003356 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	2b01      	cmp	r3, #1
 8003244:	f040 8087 	bne.w	8003356 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003248:	4b88      	ldr	r3, [pc, #544]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <HAL_RCC_OscConfig+0x64>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e3df      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a1a      	ldr	r2, [r3, #32]
 8003264:	4b81      	ldr	r3, [pc, #516]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f003 0308 	and.w	r3, r3, #8
 800326c:	2b00      	cmp	r3, #0
 800326e:	d004      	beq.n	800327a <HAL_RCC_OscConfig+0x7e>
 8003270:	4b7e      	ldr	r3, [pc, #504]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003278:	e005      	b.n	8003286 <HAL_RCC_OscConfig+0x8a>
 800327a:	4b7c      	ldr	r3, [pc, #496]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800327c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003280:	091b      	lsrs	r3, r3, #4
 8003282:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003286:	4293      	cmp	r3, r2
 8003288:	d223      	bcs.n	80032d2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6a1b      	ldr	r3, [r3, #32]
 800328e:	4618      	mov	r0, r3
 8003290:	f000 fdcc 	bl	8003e2c <RCC_SetFlashLatencyFromMSIRange>
 8003294:	4603      	mov	r3, r0
 8003296:	2b00      	cmp	r3, #0
 8003298:	d001      	beq.n	800329e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e3c0      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800329e:	4b73      	ldr	r3, [pc, #460]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a72      	ldr	r2, [pc, #456]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032a4:	f043 0308 	orr.w	r3, r3, #8
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	4b70      	ldr	r3, [pc, #448]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a1b      	ldr	r3, [r3, #32]
 80032b6:	496d      	ldr	r1, [pc, #436]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032bc:	4b6b      	ldr	r3, [pc, #428]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69db      	ldr	r3, [r3, #28]
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	4968      	ldr	r1, [pc, #416]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	604b      	str	r3, [r1, #4]
 80032d0:	e025      	b.n	800331e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80032d2:	4b66      	ldr	r3, [pc, #408]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a65      	ldr	r2, [pc, #404]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032d8:	f043 0308 	orr.w	r3, r3, #8
 80032dc:	6013      	str	r3, [r2, #0]
 80032de:	4b63      	ldr	r3, [pc, #396]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	4960      	ldr	r1, [pc, #384]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032ec:	4313      	orrs	r3, r2
 80032ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80032f0:	4b5e      	ldr	r3, [pc, #376]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	69db      	ldr	r3, [r3, #28]
 80032fc:	021b      	lsls	r3, r3, #8
 80032fe:	495b      	ldr	r1, [pc, #364]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003300:	4313      	orrs	r3, r2
 8003302:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d109      	bne.n	800331e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	4618      	mov	r0, r3
 8003310:	f000 fd8c 	bl	8003e2c <RCC_SetFlashLatencyFromMSIRange>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800331a:	2301      	movs	r3, #1
 800331c:	e380      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800331e:	f000 fcc1 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 8003322:	4602      	mov	r2, r0
 8003324:	4b51      	ldr	r3, [pc, #324]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	091b      	lsrs	r3, r3, #4
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	4950      	ldr	r1, [pc, #320]	; (8003470 <HAL_RCC_OscConfig+0x274>)
 8003330:	5ccb      	ldrb	r3, [r1, r3]
 8003332:	f003 031f 	and.w	r3, r3, #31
 8003336:	fa22 f303 	lsr.w	r3, r2, r3
 800333a:	4a4e      	ldr	r2, [pc, #312]	; (8003474 <HAL_RCC_OscConfig+0x278>)
 800333c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800333e:	4b4e      	ldr	r3, [pc, #312]	; (8003478 <HAL_RCC_OscConfig+0x27c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4618      	mov	r0, r3
 8003344:	f7fd f94e 	bl	80005e4 <HAL_InitTick>
 8003348:	4603      	mov	r3, r0
 800334a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d052      	beq.n	80033f8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8003352:	7bfb      	ldrb	r3, [r7, #15]
 8003354:	e364      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	699b      	ldr	r3, [r3, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d032      	beq.n	80033c4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800335e:	4b43      	ldr	r3, [pc, #268]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a42      	ldr	r2, [pc, #264]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800336a:	f7fd f98b 	bl	8000684 <HAL_GetTick>
 800336e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003370:	e008      	b.n	8003384 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003372:	f7fd f987 	bl	8000684 <HAL_GetTick>
 8003376:	4602      	mov	r2, r0
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	1ad3      	subs	r3, r2, r3
 800337c:	2b02      	cmp	r3, #2
 800337e:	d901      	bls.n	8003384 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e34d      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003384:	4b39      	ldr	r3, [pc, #228]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d0f0      	beq.n	8003372 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003390:	4b36      	ldr	r3, [pc, #216]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a35      	ldr	r2, [pc, #212]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003396:	f043 0308 	orr.w	r3, r3, #8
 800339a:	6013      	str	r3, [r2, #0]
 800339c:	4b33      	ldr	r3, [pc, #204]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a1b      	ldr	r3, [r3, #32]
 80033a8:	4930      	ldr	r1, [pc, #192]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80033ae:	4b2f      	ldr	r3, [pc, #188]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	021b      	lsls	r3, r3, #8
 80033bc:	492b      	ldr	r1, [pc, #172]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	604b      	str	r3, [r1, #4]
 80033c2:	e01a      	b.n	80033fa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80033c4:	4b29      	ldr	r3, [pc, #164]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a28      	ldr	r2, [pc, #160]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80033d0:	f7fd f958 	bl	8000684 <HAL_GetTick>
 80033d4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033d6:	e008      	b.n	80033ea <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80033d8:	f7fd f954 	bl	8000684 <HAL_GetTick>
 80033dc:	4602      	mov	r2, r0
 80033de:	693b      	ldr	r3, [r7, #16]
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b02      	cmp	r3, #2
 80033e4:	d901      	bls.n	80033ea <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	e31a      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80033ea:	4b20      	ldr	r3, [pc, #128]	; (800346c <HAL_RCC_OscConfig+0x270>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d1f0      	bne.n	80033d8 <HAL_RCC_OscConfig+0x1dc>
 80033f6:	e000      	b.n	80033fa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80033f8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f003 0301 	and.w	r3, r3, #1
 8003402:	2b00      	cmp	r3, #0
 8003404:	d073      	beq.n	80034ee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	2b08      	cmp	r3, #8
 800340a:	d005      	beq.n	8003418 <HAL_RCC_OscConfig+0x21c>
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	2b0c      	cmp	r3, #12
 8003410:	d10e      	bne.n	8003430 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	2b03      	cmp	r3, #3
 8003416:	d10b      	bne.n	8003430 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d063      	beq.n	80034ec <HAL_RCC_OscConfig+0x2f0>
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d15f      	bne.n	80034ec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e2f7      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003438:	d106      	bne.n	8003448 <HAL_RCC_OscConfig+0x24c>
 800343a:	4b0c      	ldr	r3, [pc, #48]	; (800346c <HAL_RCC_OscConfig+0x270>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a0b      	ldr	r2, [pc, #44]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e025      	b.n	8003494 <HAL_RCC_OscConfig+0x298>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003450:	d114      	bne.n	800347c <HAL_RCC_OscConfig+0x280>
 8003452:	4b06      	ldr	r3, [pc, #24]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a05      	ldr	r2, [pc, #20]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b03      	ldr	r3, [pc, #12]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a02      	ldr	r2, [pc, #8]	; (800346c <HAL_RCC_OscConfig+0x270>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e013      	b.n	8003494 <HAL_RCC_OscConfig+0x298>
 800346c:	40021000 	.word	0x40021000
 8003470:	08008dfc 	.word	0x08008dfc
 8003474:	2000052c 	.word	0x2000052c
 8003478:	20000000 	.word	0x20000000
 800347c:	4ba0      	ldr	r3, [pc, #640]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a9f      	ldr	r2, [pc, #636]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003486:	6013      	str	r3, [r2, #0]
 8003488:	4b9d      	ldr	r3, [pc, #628]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a9c      	ldr	r2, [pc, #624]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800348e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003492:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	2b00      	cmp	r3, #0
 800349a:	d013      	beq.n	80034c4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800349c:	f7fd f8f2 	bl	8000684 <HAL_GetTick>
 80034a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a2:	e008      	b.n	80034b6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034a4:	f7fd f8ee 	bl	8000684 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	1ad3      	subs	r3, r2, r3
 80034ae:	2b64      	cmp	r3, #100	; 0x64
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e2b4      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034b6:	4b92      	ldr	r3, [pc, #584]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d0f0      	beq.n	80034a4 <HAL_RCC_OscConfig+0x2a8>
 80034c2:	e014      	b.n	80034ee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c4:	f7fd f8de 	bl	8000684 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034cc:	f7fd f8da 	bl	8000684 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e2a0      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80034de:	4b88      	ldr	r3, [pc, #544]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x2d0>
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f003 0302 	and.w	r3, r3, #2
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d060      	beq.n	80035bc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d005      	beq.n	800350c <HAL_RCC_OscConfig+0x310>
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	2b0c      	cmp	r3, #12
 8003504:	d119      	bne.n	800353a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003506:	697b      	ldr	r3, [r7, #20]
 8003508:	2b02      	cmp	r3, #2
 800350a:	d116      	bne.n	800353a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800350c:	4b7c      	ldr	r3, [pc, #496]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003514:	2b00      	cmp	r3, #0
 8003516:	d005      	beq.n	8003524 <HAL_RCC_OscConfig+0x328>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d101      	bne.n	8003524 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e27d      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003524:	4b76      	ldr	r3, [pc, #472]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	691b      	ldr	r3, [r3, #16]
 8003530:	061b      	lsls	r3, r3, #24
 8003532:	4973      	ldr	r1, [pc, #460]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003534:	4313      	orrs	r3, r2
 8003536:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003538:	e040      	b.n	80035bc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68db      	ldr	r3, [r3, #12]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d023      	beq.n	800358a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003542:	4b6f      	ldr	r3, [pc, #444]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a6e      	ldr	r2, [pc, #440]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800354c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354e:	f7fd f899 	bl	8000684 <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003554:	e008      	b.n	8003568 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003556:	f7fd f895 	bl	8000684 <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	2b02      	cmp	r3, #2
 8003562:	d901      	bls.n	8003568 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e25b      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003568:	4b65      	ldr	r3, [pc, #404]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0f0      	beq.n	8003556 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003574:	4b62      	ldr	r3, [pc, #392]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	691b      	ldr	r3, [r3, #16]
 8003580:	061b      	lsls	r3, r3, #24
 8003582:	495f      	ldr	r1, [pc, #380]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003584:	4313      	orrs	r3, r2
 8003586:	604b      	str	r3, [r1, #4]
 8003588:	e018      	b.n	80035bc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358a:	4b5d      	ldr	r3, [pc, #372]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a5c      	ldr	r2, [pc, #368]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003590:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003594:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003596:	f7fd f875 	bl	8000684 <HAL_GetTick>
 800359a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800359c:	e008      	b.n	80035b0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800359e:	f7fd f871 	bl	8000684 <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b02      	cmp	r3, #2
 80035aa:	d901      	bls.n	80035b0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80035ac:	2303      	movs	r3, #3
 80035ae:	e237      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80035b0:	4b53      	ldr	r3, [pc, #332]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f0      	bne.n	800359e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0308 	and.w	r3, r3, #8
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d03c      	beq.n	8003642 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d01c      	beq.n	800360a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d0:	4b4b      	ldr	r3, [pc, #300]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80035d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d6:	4a4a      	ldr	r2, [pc, #296]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fd f850 	bl	8000684 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035e6:	e008      	b.n	80035fa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e8:	f7fd f84c 	bl	8000684 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d901      	bls.n	80035fa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e212      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035fa:	4b41      	ldr	r3, [pc, #260]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80035fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0ef      	beq.n	80035e8 <HAL_RCC_OscConfig+0x3ec>
 8003608:	e01b      	b.n	8003642 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800360a:	4b3d      	ldr	r3, [pc, #244]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800360c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003610:	4a3b      	ldr	r2, [pc, #236]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003612:	f023 0301 	bic.w	r3, r3, #1
 8003616:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361a:	f7fd f833 	bl	8000684 <HAL_GetTick>
 800361e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003620:	e008      	b.n	8003634 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003622:	f7fd f82f 	bl	8000684 <HAL_GetTick>
 8003626:	4602      	mov	r2, r0
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	1ad3      	subs	r3, r2, r3
 800362c:	2b02      	cmp	r3, #2
 800362e:	d901      	bls.n	8003634 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003630:	2303      	movs	r3, #3
 8003632:	e1f5      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003634:	4b32      	ldr	r3, [pc, #200]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003636:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1ef      	bne.n	8003622 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b00      	cmp	r3, #0
 800364c:	f000 80a6 	beq.w	800379c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003650:	2300      	movs	r3, #0
 8003652:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003654:	4b2a      	ldr	r3, [pc, #168]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003656:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d10d      	bne.n	800367c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003660:	4b27      	ldr	r3, [pc, #156]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003662:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003664:	4a26      	ldr	r2, [pc, #152]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 8003666:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800366a:	6593      	str	r3, [r2, #88]	; 0x58
 800366c:	4b24      	ldr	r3, [pc, #144]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 800366e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003678:	2301      	movs	r3, #1
 800367a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367c:	4b21      	ldr	r3, [pc, #132]	; (8003704 <HAL_RCC_OscConfig+0x508>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d118      	bne.n	80036ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003688:	4b1e      	ldr	r3, [pc, #120]	; (8003704 <HAL_RCC_OscConfig+0x508>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <HAL_RCC_OscConfig+0x508>)
 800368e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003692:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003694:	f7fc fff6 	bl	8000684 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800369c:	f7fc fff2 	bl	8000684 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e1b8      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036ae:	4b15      	ldr	r3, [pc, #84]	; (8003704 <HAL_RCC_OscConfig+0x508>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d0f0      	beq.n	800369c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d108      	bne.n	80036d4 <HAL_RCC_OscConfig+0x4d8>
 80036c2:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036ca:	f043 0301 	orr.w	r3, r3, #1
 80036ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036d2:	e029      	b.n	8003728 <HAL_RCC_OscConfig+0x52c>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b05      	cmp	r3, #5
 80036da:	d115      	bne.n	8003708 <HAL_RCC_OscConfig+0x50c>
 80036dc:	4b08      	ldr	r3, [pc, #32]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	4a07      	ldr	r2, [pc, #28]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036e4:	f043 0304 	orr.w	r3, r3, #4
 80036e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ec:	4b04      	ldr	r3, [pc, #16]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036f2:	4a03      	ldr	r2, [pc, #12]	; (8003700 <HAL_RCC_OscConfig+0x504>)
 80036f4:	f043 0301 	orr.w	r3, r3, #1
 80036f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036fc:	e014      	b.n	8003728 <HAL_RCC_OscConfig+0x52c>
 80036fe:	bf00      	nop
 8003700:	40021000 	.word	0x40021000
 8003704:	40007000 	.word	0x40007000
 8003708:	4b9d      	ldr	r3, [pc, #628]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	4a9c      	ldr	r2, [pc, #624]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003718:	4b99      	ldr	r3, [pc, #612]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 800371a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800371e:	4a98      	ldr	r2, [pc, #608]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 8003720:	f023 0304 	bic.w	r3, r3, #4
 8003724:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d016      	beq.n	800375e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003730:	f7fc ffa8 	bl	8000684 <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003736:	e00a      	b.n	800374e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003738:	f7fc ffa4 	bl	8000684 <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	f241 3288 	movw	r2, #5000	; 0x1388
 8003746:	4293      	cmp	r3, r2
 8003748:	d901      	bls.n	800374e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e168      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800374e:	4b8c      	ldr	r3, [pc, #560]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 8003750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003754:	f003 0302 	and.w	r3, r3, #2
 8003758:	2b00      	cmp	r3, #0
 800375a:	d0ed      	beq.n	8003738 <HAL_RCC_OscConfig+0x53c>
 800375c:	e015      	b.n	800378a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375e:	f7fc ff91 	bl	8000684 <HAL_GetTick>
 8003762:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003766:	f7fc ff8d 	bl	8000684 <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	1ad3      	subs	r3, r2, r3
 8003770:	f241 3288 	movw	r2, #5000	; 0x1388
 8003774:	4293      	cmp	r3, r2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e151      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800377c:	4b80      	ldr	r3, [pc, #512]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 800377e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d1ed      	bne.n	8003766 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800378a:	7ffb      	ldrb	r3, [r7, #31]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d105      	bne.n	800379c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003790:	4b7b      	ldr	r3, [pc, #492]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 8003792:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003794:	4a7a      	ldr	r2, [pc, #488]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 8003796:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800379a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f003 0320 	and.w	r3, r3, #32
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d03c      	beq.n	8003822 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d01c      	beq.n	80037ea <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80037b0:	4b73      	ldr	r3, [pc, #460]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 80037b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b6:	4a72      	ldr	r2, [pc, #456]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 80037b8:	f043 0301 	orr.w	r3, r3, #1
 80037bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c0:	f7fc ff60 	bl	8000684 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037c8:	f7fc ff5c 	bl	8000684 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e122      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037da:	4b69      	ldr	r3, [pc, #420]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 80037dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037e0:	f003 0302 	and.w	r3, r3, #2
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d0ef      	beq.n	80037c8 <HAL_RCC_OscConfig+0x5cc>
 80037e8:	e01b      	b.n	8003822 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ea:	4b65      	ldr	r3, [pc, #404]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 80037ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037f0:	4a63      	ldr	r2, [pc, #396]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 80037f2:	f023 0301 	bic.w	r3, r3, #1
 80037f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037fa:	f7fc ff43 	bl	8000684 <HAL_GetTick>
 80037fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003800:	e008      	b.n	8003814 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003802:	f7fc ff3f 	bl	8000684 <HAL_GetTick>
 8003806:	4602      	mov	r2, r0
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	1ad3      	subs	r3, r2, r3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d901      	bls.n	8003814 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8003810:	2303      	movs	r3, #3
 8003812:	e105      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003814:	4b5a      	ldr	r3, [pc, #360]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 8003816:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1ef      	bne.n	8003802 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003826:	2b00      	cmp	r3, #0
 8003828:	f000 80f9 	beq.w	8003a1e <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003830:	2b02      	cmp	r3, #2
 8003832:	f040 80cf 	bne.w	80039d4 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003836:	4b52      	ldr	r3, [pc, #328]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	f003 0203 	and.w	r2, r3, #3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003846:	429a      	cmp	r2, r3
 8003848:	d12c      	bne.n	80038a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800384a:	697b      	ldr	r3, [r7, #20]
 800384c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003854:	3b01      	subs	r3, #1
 8003856:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003858:	429a      	cmp	r2, r3
 800385a:	d123      	bne.n	80038a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003866:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003868:	429a      	cmp	r2, r3
 800386a:	d11b      	bne.n	80038a4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003876:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003878:	429a      	cmp	r2, r3
 800387a:	d113      	bne.n	80038a4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003886:	085b      	lsrs	r3, r3, #1
 8003888:	3b01      	subs	r3, #1
 800388a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800388c:	429a      	cmp	r2, r3
 800388e:	d109      	bne.n	80038a4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	085b      	lsrs	r3, r3, #1
 800389c:	3b01      	subs	r3, #1
 800389e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038a0:	429a      	cmp	r2, r3
 80038a2:	d071      	beq.n	8003988 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	2b0c      	cmp	r3, #12
 80038a8:	d068      	beq.n	800397c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80038aa:	4b35      	ldr	r3, [pc, #212]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d105      	bne.n	80038c2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80038b6:	4b32      	ldr	r3, [pc, #200]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d001      	beq.n	80038c6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0ac      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80038c6:	4b2e      	ldr	r3, [pc, #184]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a2d      	ldr	r2, [pc, #180]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 80038cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80038d2:	f7fc fed7 	bl	8000684 <HAL_GetTick>
 80038d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038d8:	e008      	b.n	80038ec <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038da:	f7fc fed3 	bl	8000684 <HAL_GetTick>
 80038de:	4602      	mov	r2, r0
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	2b02      	cmp	r3, #2
 80038e6:	d901      	bls.n	80038ec <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80038e8:	2303      	movs	r3, #3
 80038ea:	e099      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038ec:	4b24      	ldr	r3, [pc, #144]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d1f0      	bne.n	80038da <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80038f8:	4b21      	ldr	r3, [pc, #132]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 80038fa:	68da      	ldr	r2, [r3, #12]
 80038fc:	4b21      	ldr	r3, [pc, #132]	; (8003984 <HAL_RCC_OscConfig+0x788>)
 80038fe:	4013      	ands	r3, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003908:	3a01      	subs	r2, #1
 800390a:	0112      	lsls	r2, r2, #4
 800390c:	4311      	orrs	r1, r2
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003912:	0212      	lsls	r2, r2, #8
 8003914:	4311      	orrs	r1, r2
 8003916:	687a      	ldr	r2, [r7, #4]
 8003918:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800391a:	0852      	lsrs	r2, r2, #1
 800391c:	3a01      	subs	r2, #1
 800391e:	0552      	lsls	r2, r2, #21
 8003920:	4311      	orrs	r1, r2
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003926:	0852      	lsrs	r2, r2, #1
 8003928:	3a01      	subs	r2, #1
 800392a:	0652      	lsls	r2, r2, #25
 800392c:	4311      	orrs	r1, r2
 800392e:	687a      	ldr	r2, [r7, #4]
 8003930:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003932:	06d2      	lsls	r2, r2, #27
 8003934:	430a      	orrs	r2, r1
 8003936:	4912      	ldr	r1, [pc, #72]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 8003938:	4313      	orrs	r3, r2
 800393a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800393c:	4b10      	ldr	r3, [pc, #64]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a0f      	ldr	r2, [pc, #60]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 8003942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003946:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003948:	4b0d      	ldr	r3, [pc, #52]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 800394a:	68db      	ldr	r3, [r3, #12]
 800394c:	4a0c      	ldr	r2, [pc, #48]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 800394e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003952:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003954:	f7fc fe96 	bl	8000684 <HAL_GetTick>
 8003958:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800395a:	e008      	b.n	800396e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800395c:	f7fc fe92 	bl	8000684 <HAL_GetTick>
 8003960:	4602      	mov	r2, r0
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	1ad3      	subs	r3, r2, r3
 8003966:	2b02      	cmp	r3, #2
 8003968:	d901      	bls.n	800396e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800396a:	2303      	movs	r3, #3
 800396c:	e058      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800396e:	4b04      	ldr	r3, [pc, #16]	; (8003980 <HAL_RCC_OscConfig+0x784>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003976:	2b00      	cmp	r3, #0
 8003978:	d0f0      	beq.n	800395c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800397a:	e050      	b.n	8003a1e <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e04f      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
 8003980:	40021000 	.word	0x40021000
 8003984:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_RCC_OscConfig+0x82c>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d144      	bne.n	8003a1e <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003994:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <HAL_RCC_OscConfig+0x82c>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a23      	ldr	r2, [pc, #140]	; (8003a28 <HAL_RCC_OscConfig+0x82c>)
 800399a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800399e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80039a0:	4b21      	ldr	r3, [pc, #132]	; (8003a28 <HAL_RCC_OscConfig+0x82c>)
 80039a2:	68db      	ldr	r3, [r3, #12]
 80039a4:	4a20      	ldr	r2, [pc, #128]	; (8003a28 <HAL_RCC_OscConfig+0x82c>)
 80039a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80039aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80039ac:	f7fc fe6a 	bl	8000684 <HAL_GetTick>
 80039b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039b2:	e008      	b.n	80039c6 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b4:	f7fc fe66 	bl	8000684 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e02c      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80039c6:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <HAL_RCC_OscConfig+0x82c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d0f0      	beq.n	80039b4 <HAL_RCC_OscConfig+0x7b8>
 80039d2:	e024      	b.n	8003a1e <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	2b0c      	cmp	r3, #12
 80039d8:	d01f      	beq.n	8003a1a <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <HAL_RCC_OscConfig+0x82c>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4a12      	ldr	r2, [pc, #72]	; (8003a28 <HAL_RCC_OscConfig+0x82c>)
 80039e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80039e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e6:	f7fc fe4d 	bl	8000684 <HAL_GetTick>
 80039ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80039ec:	e008      	b.n	8003a00 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039ee:	f7fc fe49 	bl	8000684 <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d901      	bls.n	8003a00 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e00f      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003a00:	4b09      	ldr	r3, [pc, #36]	; (8003a28 <HAL_RCC_OscConfig+0x82c>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1f0      	bne.n	80039ee <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003a0c:	4b06      	ldr	r3, [pc, #24]	; (8003a28 <HAL_RCC_OscConfig+0x82c>)
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	4905      	ldr	r1, [pc, #20]	; (8003a28 <HAL_RCC_OscConfig+0x82c>)
 8003a12:	4b06      	ldr	r3, [pc, #24]	; (8003a2c <HAL_RCC_OscConfig+0x830>)
 8003a14:	4013      	ands	r3, r2
 8003a16:	60cb      	str	r3, [r1, #12]
 8003a18:	e001      	b.n	8003a1e <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e000      	b.n	8003a20 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3720      	adds	r7, #32
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40021000 	.word	0x40021000
 8003a2c:	feeefffc 	.word	0xfeeefffc

08003a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b086      	sub	sp, #24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e11d      	b.n	8003c84 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003a48:	4b90      	ldr	r3, [pc, #576]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 030f 	and.w	r3, r3, #15
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	429a      	cmp	r2, r3
 8003a54:	d910      	bls.n	8003a78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a56:	4b8d      	ldr	r3, [pc, #564]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 020f 	bic.w	r2, r3, #15
 8003a5e:	498b      	ldr	r1, [pc, #556]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b89      	ldr	r3, [pc, #548]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 030f 	and.w	r3, r3, #15
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e105      	b.n	8003c84 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0302 	and.w	r3, r3, #2
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d010      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	689a      	ldr	r2, [r3, #8]
 8003a88:	4b81      	ldr	r3, [pc, #516]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a90:	429a      	cmp	r2, r3
 8003a92:	d908      	bls.n	8003aa6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a94:	4b7e      	ldr	r3, [pc, #504]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	497b      	ldr	r1, [pc, #492]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d079      	beq.n	8003ba6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b03      	cmp	r3, #3
 8003ab8:	d11e      	bne.n	8003af8 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003aba:	4b75      	ldr	r3, [pc, #468]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e0dc      	b.n	8003c84 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8003aca:	f000 fa09 	bl	8003ee0 <RCC_GetSysClockFreqFromPLLSource>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	4a70      	ldr	r2, [pc, #448]	; (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d946      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003ad6:	4b6e      	ldr	r3, [pc, #440]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003ad8:	689b      	ldr	r3, [r3, #8]
 8003ada:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d140      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003ae2:	4b6b      	ldr	r3, [pc, #428]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aea:	4a69      	ldr	r2, [pc, #420]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003aec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003af0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003af2:	2380      	movs	r3, #128	; 0x80
 8003af4:	617b      	str	r3, [r7, #20]
 8003af6:	e035      	b.n	8003b64 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d107      	bne.n	8003b10 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003b00:	4b63      	ldr	r3, [pc, #396]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d115      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e0b9      	b.n	8003c84 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d107      	bne.n	8003b28 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b18:	4b5d      	ldr	r3, [pc, #372]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d109      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e0ad      	b.n	8003c84 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b28:	4b59      	ldr	r3, [pc, #356]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d101      	bne.n	8003b38 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	e0a5      	b.n	8003c84 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8003b38:	f000 f8b4 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	4a55      	ldr	r2, [pc, #340]	; (8003c94 <HAL_RCC_ClockConfig+0x264>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d90f      	bls.n	8003b64 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003b44:	4b52      	ldr	r3, [pc, #328]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d109      	bne.n	8003b64 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003b50:	4b4f      	ldr	r3, [pc, #316]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b58:	4a4d      	ldr	r2, [pc, #308]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003b5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b5e:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003b60:	2380      	movs	r3, #128	; 0x80
 8003b62:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003b64:	4b4a      	ldr	r3, [pc, #296]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f023 0203 	bic.w	r2, r3, #3
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	4947      	ldr	r1, [pc, #284]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003b72:	4313      	orrs	r3, r2
 8003b74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b76:	f7fc fd85 	bl	8000684 <HAL_GetTick>
 8003b7a:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b7c:	e00a      	b.n	8003b94 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b7e:	f7fc fd81 	bl	8000684 <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d901      	bls.n	8003b94 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8003b90:	2303      	movs	r3, #3
 8003b92:	e077      	b.n	8003c84 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b94:	4b3e      	ldr	r3, [pc, #248]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 020c 	and.w	r2, r3, #12
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	429a      	cmp	r2, r3
 8003ba4:	d1eb      	bne.n	8003b7e <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	2b80      	cmp	r3, #128	; 0x80
 8003baa:	d105      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003bac:	4b38      	ldr	r3, [pc, #224]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003bae:	689b      	ldr	r3, [r3, #8]
 8003bb0:	4a37      	ldr	r2, [pc, #220]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bb6:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d010      	beq.n	8003be6 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	689a      	ldr	r2, [r3, #8]
 8003bc8:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d208      	bcs.n	8003be6 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bd4:	4b2e      	ldr	r3, [pc, #184]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	492b      	ldr	r1, [pc, #172]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003be2:	4313      	orrs	r3, r2
 8003be4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be6:	4b29      	ldr	r3, [pc, #164]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 030f 	and.w	r3, r3, #15
 8003bee:	683a      	ldr	r2, [r7, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d210      	bcs.n	8003c16 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bf4:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f023 020f 	bic.w	r2, r3, #15
 8003bfc:	4923      	ldr	r1, [pc, #140]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	4313      	orrs	r3, r2
 8003c02:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c04:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <HAL_RCC_ClockConfig+0x25c>)
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f003 030f 	and.w	r3, r3, #15
 8003c0c:	683a      	ldr	r2, [r7, #0]
 8003c0e:	429a      	cmp	r2, r3
 8003c10:	d001      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e036      	b.n	8003c84 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f003 0304 	and.w	r3, r3, #4
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d008      	beq.n	8003c34 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c22:	4b1b      	ldr	r3, [pc, #108]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	4918      	ldr	r1, [pc, #96]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003c30:	4313      	orrs	r3, r2
 8003c32:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0308 	and.w	r3, r3, #8
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d009      	beq.n	8003c54 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c40:	4b13      	ldr	r3, [pc, #76]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	00db      	lsls	r3, r3, #3
 8003c4e:	4910      	ldr	r1, [pc, #64]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003c50:	4313      	orrs	r3, r2
 8003c52:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003c54:	f000 f826 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 8003c58:	4602      	mov	r2, r0
 8003c5a:	4b0d      	ldr	r3, [pc, #52]	; (8003c90 <HAL_RCC_ClockConfig+0x260>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	091b      	lsrs	r3, r3, #4
 8003c60:	f003 030f 	and.w	r3, r3, #15
 8003c64:	490c      	ldr	r1, [pc, #48]	; (8003c98 <HAL_RCC_ClockConfig+0x268>)
 8003c66:	5ccb      	ldrb	r3, [r1, r3]
 8003c68:	f003 031f 	and.w	r3, r3, #31
 8003c6c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c70:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <HAL_RCC_ClockConfig+0x26c>)
 8003c72:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003c74:	4b0a      	ldr	r3, [pc, #40]	; (8003ca0 <HAL_RCC_ClockConfig+0x270>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fcb3 	bl	80005e4 <HAL_InitTick>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	73fb      	strb	r3, [r7, #15]

  return status;
 8003c82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3718      	adds	r7, #24
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}
 8003c8c:	40022000 	.word	0x40022000
 8003c90:	40021000 	.word	0x40021000
 8003c94:	04c4b400 	.word	0x04c4b400
 8003c98:	08008dfc 	.word	0x08008dfc
 8003c9c:	2000052c 	.word	0x2000052c
 8003ca0:	20000000 	.word	0x20000000

08003ca4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b089      	sub	sp, #36	; 0x24
 8003ca8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8003caa:	2300      	movs	r3, #0
 8003cac:	61fb      	str	r3, [r7, #28]
 8003cae:	2300      	movs	r3, #0
 8003cb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cb2:	4b3e      	ldr	r3, [pc, #248]	; (8003dac <HAL_RCC_GetSysClockFreq+0x108>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
 8003cba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cbc:	4b3b      	ldr	r3, [pc, #236]	; (8003dac <HAL_RCC_GetSysClockFreq+0x108>)
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0303 	and.w	r3, r3, #3
 8003cc4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d005      	beq.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	2b0c      	cmp	r3, #12
 8003cd0:	d121      	bne.n	8003d16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d11e      	bne.n	8003d16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003cd8:	4b34      	ldr	r3, [pc, #208]	; (8003dac <HAL_RCC_GetSysClockFreq+0x108>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 0308 	and.w	r3, r3, #8
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d107      	bne.n	8003cf4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003ce4:	4b31      	ldr	r3, [pc, #196]	; (8003dac <HAL_RCC_GetSysClockFreq+0x108>)
 8003ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003cea:	0a1b      	lsrs	r3, r3, #8
 8003cec:	f003 030f 	and.w	r3, r3, #15
 8003cf0:	61fb      	str	r3, [r7, #28]
 8003cf2:	e005      	b.n	8003d00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003cf4:	4b2d      	ldr	r3, [pc, #180]	; (8003dac <HAL_RCC_GetSysClockFreq+0x108>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	091b      	lsrs	r3, r3, #4
 8003cfa:	f003 030f 	and.w	r3, r3, #15
 8003cfe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003d00:	4a2b      	ldr	r2, [pc, #172]	; (8003db0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10d      	bne.n	8003d2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d14:	e00a      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003d16:	693b      	ldr	r3, [r7, #16]
 8003d18:	2b04      	cmp	r3, #4
 8003d1a:	d102      	bne.n	8003d22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003d1c:	4b25      	ldr	r3, [pc, #148]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d1e:	61bb      	str	r3, [r7, #24]
 8003d20:	e004      	b.n	8003d2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	2b08      	cmp	r3, #8
 8003d26:	d101      	bne.n	8003d2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003d28:	4b23      	ldr	r3, [pc, #140]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	2b0c      	cmp	r3, #12
 8003d30:	d134      	bne.n	8003d9c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003d32:	4b1e      	ldr	r3, [pc, #120]	; (8003dac <HAL_RCC_GetSysClockFreq+0x108>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	d003      	beq.n	8003d4a <HAL_RCC_GetSysClockFreq+0xa6>
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d003      	beq.n	8003d50 <HAL_RCC_GetSysClockFreq+0xac>
 8003d48:	e005      	b.n	8003d56 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003d4a:	4b1a      	ldr	r3, [pc, #104]	; (8003db4 <HAL_RCC_GetSysClockFreq+0x110>)
 8003d4c:	617b      	str	r3, [r7, #20]
      break;
 8003d4e:	e005      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003d50:	4b19      	ldr	r3, [pc, #100]	; (8003db8 <HAL_RCC_GetSysClockFreq+0x114>)
 8003d52:	617b      	str	r3, [r7, #20]
      break;
 8003d54:	e002      	b.n	8003d5c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	617b      	str	r3, [r7, #20]
      break;
 8003d5a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003d5c:	4b13      	ldr	r3, [pc, #76]	; (8003dac <HAL_RCC_GetSysClockFreq+0x108>)
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	091b      	lsrs	r3, r3, #4
 8003d62:	f003 030f 	and.w	r3, r3, #15
 8003d66:	3301      	adds	r3, #1
 8003d68:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003d6a:	4b10      	ldr	r3, [pc, #64]	; (8003dac <HAL_RCC_GetSysClockFreq+0x108>)
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	0a1b      	lsrs	r3, r3, #8
 8003d70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	fb03 f202 	mul.w	r2, r3, r2
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d82:	4b0a      	ldr	r3, [pc, #40]	; (8003dac <HAL_RCC_GetSysClockFreq+0x108>)
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	0e5b      	lsrs	r3, r3, #25
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	3301      	adds	r3, #1
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d9a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003d9c:	69bb      	ldr	r3, [r7, #24]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3724      	adds	r7, #36	; 0x24
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
 8003daa:	bf00      	nop
 8003dac:	40021000 	.word	0x40021000
 8003db0:	08008e14 	.word	0x08008e14
 8003db4:	00f42400 	.word	0x00f42400
 8003db8:	007a1200 	.word	0x007a1200

08003dbc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dc0:	4b03      	ldr	r3, [pc, #12]	; (8003dd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dcc:	4770      	bx	lr
 8003dce:	bf00      	nop
 8003dd0:	2000052c 	.word	0x2000052c

08003dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003dd8:	f7ff fff0 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	4b06      	ldr	r3, [pc, #24]	; (8003df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	0a1b      	lsrs	r3, r3, #8
 8003de4:	f003 0307 	and.w	r3, r3, #7
 8003de8:	4904      	ldr	r1, [pc, #16]	; (8003dfc <HAL_RCC_GetPCLK1Freq+0x28>)
 8003dea:	5ccb      	ldrb	r3, [r1, r3]
 8003dec:	f003 031f 	and.w	r3, r3, #31
 8003df0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	40021000 	.word	0x40021000
 8003dfc:	08008e0c 	.word	0x08008e0c

08003e00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003e04:	f7ff ffda 	bl	8003dbc <HAL_RCC_GetHCLKFreq>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	0adb      	lsrs	r3, r3, #11
 8003e10:	f003 0307 	and.w	r3, r3, #7
 8003e14:	4904      	ldr	r1, [pc, #16]	; (8003e28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003e16:	5ccb      	ldrb	r3, [r1, r3]
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	40021000 	.word	0x40021000
 8003e28:	08008e0c 	.word	0x08008e0c

08003e2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b086      	sub	sp, #24
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003e34:	2300      	movs	r3, #0
 8003e36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003e38:	4b27      	ldr	r3, [pc, #156]	; (8003ed8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d003      	beq.n	8003e4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003e44:	f7ff f916 	bl	8003074 <HAL_PWREx_GetVoltageRange>
 8003e48:	6178      	str	r0, [r7, #20]
 8003e4a:	e014      	b.n	8003e76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e4c:	4b22      	ldr	r3, [pc, #136]	; (8003ed8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e50:	4a21      	ldr	r2, [pc, #132]	; (8003ed8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e56:	6593      	str	r3, [r2, #88]	; 0x58
 8003e58:	4b1f      	ldr	r3, [pc, #124]	; (8003ed8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e60:	60fb      	str	r3, [r7, #12]
 8003e62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003e64:	f7ff f906 	bl	8003074 <HAL_PWREx_GetVoltageRange>
 8003e68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003e6a:	4b1b      	ldr	r3, [pc, #108]	; (8003ed8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6e:	4a1a      	ldr	r2, [pc, #104]	; (8003ed8 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003e70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e7c:	d10b      	bne.n	8003e96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2b80      	cmp	r3, #128	; 0x80
 8003e82:	d913      	bls.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2ba0      	cmp	r3, #160	; 0xa0
 8003e88:	d902      	bls.n	8003e90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	e00d      	b.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003e90:	2301      	movs	r3, #1
 8003e92:	613b      	str	r3, [r7, #16]
 8003e94:	e00a      	b.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2b7f      	cmp	r3, #127	; 0x7f
 8003e9a:	d902      	bls.n	8003ea2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8003e9c:	2302      	movs	r3, #2
 8003e9e:	613b      	str	r3, [r7, #16]
 8003ea0:	e004      	b.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2b70      	cmp	r3, #112	; 0x70
 8003ea6:	d101      	bne.n	8003eac <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003eac:	4b0b      	ldr	r3, [pc, #44]	; (8003edc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f023 020f 	bic.w	r2, r3, #15
 8003eb4:	4909      	ldr	r1, [pc, #36]	; (8003edc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003ebc:	4b07      	ldr	r3, [pc, #28]	; (8003edc <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 030f 	and.w	r3, r3, #15
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d001      	beq.n	8003ece <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8003ece:	2300      	movs	r3, #0
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	3718      	adds	r7, #24
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bd80      	pop	{r7, pc}
 8003ed8:	40021000 	.word	0x40021000
 8003edc:	40022000 	.word	0x40022000

08003ee0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b087      	sub	sp, #28
 8003ee4:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ee6:	4b2d      	ldr	r3, [pc, #180]	; (8003f9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	f003 0303 	and.w	r3, r3, #3
 8003eee:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2b03      	cmp	r3, #3
 8003ef4:	d00b      	beq.n	8003f0e <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	2b03      	cmp	r3, #3
 8003efa:	d825      	bhi.n	8003f48 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d008      	beq.n	8003f14 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d11f      	bne.n	8003f48 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003f08:	4b25      	ldr	r3, [pc, #148]	; (8003fa0 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003f0a:	613b      	str	r3, [r7, #16]
    break;
 8003f0c:	e01f      	b.n	8003f4e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003f0e:	4b25      	ldr	r3, [pc, #148]	; (8003fa4 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003f10:	613b      	str	r3, [r7, #16]
    break;
 8003f12:	e01c      	b.n	8003f4e <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003f14:	4b21      	ldr	r3, [pc, #132]	; (8003f9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d107      	bne.n	8003f30 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003f20:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f26:	0a1b      	lsrs	r3, r3, #8
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e005      	b.n	8003f3c <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003f30:	4b1a      	ldr	r3, [pc, #104]	; (8003f9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	091b      	lsrs	r3, r3, #4
 8003f36:	f003 030f 	and.w	r3, r3, #15
 8003f3a:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8003f3c:	4a1a      	ldr	r2, [pc, #104]	; (8003fa8 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f44:	613b      	str	r3, [r7, #16]
    break;
 8003f46:	e002      	b.n	8003f4e <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	613b      	str	r3, [r7, #16]
    break;
 8003f4c:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f4e:	4b13      	ldr	r3, [pc, #76]	; (8003f9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f50:	68db      	ldr	r3, [r3, #12]
 8003f52:	091b      	lsrs	r3, r3, #4
 8003f54:	f003 030f 	and.w	r3, r3, #15
 8003f58:	3301      	adds	r3, #1
 8003f5a:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003f5c:	4b0f      	ldr	r3, [pc, #60]	; (8003f9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	0a1b      	lsrs	r3, r3, #8
 8003f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	fb03 f202 	mul.w	r2, r3, r2
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f72:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f74:	4b09      	ldr	r3, [pc, #36]	; (8003f9c <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	0e5b      	lsrs	r3, r3, #25
 8003f7a:	f003 0303 	and.w	r3, r3, #3
 8003f7e:	3301      	adds	r3, #1
 8003f80:	005b      	lsls	r3, r3, #1
 8003f82:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f8c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8003f8e:	683b      	ldr	r3, [r7, #0]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	371c      	adds	r7, #28
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	00f42400 	.word	0x00f42400
 8003fa4:	007a1200 	.word	0x007a1200
 8003fa8:	08008e14 	.word	0x08008e14

08003fac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003fb8:	2300      	movs	r3, #0
 8003fba:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d040      	beq.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fcc:	2b80      	cmp	r3, #128	; 0x80
 8003fce:	d02a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fd0:	2b80      	cmp	r3, #128	; 0x80
 8003fd2:	d825      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fd4:	2b60      	cmp	r3, #96	; 0x60
 8003fd6:	d026      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003fd8:	2b60      	cmp	r3, #96	; 0x60
 8003fda:	d821      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fdc:	2b40      	cmp	r3, #64	; 0x40
 8003fde:	d006      	beq.n	8003fee <HAL_RCCEx_PeriphCLKConfig+0x42>
 8003fe0:	2b40      	cmp	r3, #64	; 0x40
 8003fe2:	d81d      	bhi.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d009      	beq.n	8003ffc <HAL_RCCEx_PeriphCLKConfig+0x50>
 8003fe8:	2b20      	cmp	r3, #32
 8003fea:	d010      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x62>
 8003fec:	e018      	b.n	8004020 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003fee:	4b89      	ldr	r3, [pc, #548]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff0:	68db      	ldr	r3, [r3, #12]
 8003ff2:	4a88      	ldr	r2, [pc, #544]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8003ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff8:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003ffa:	e015      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	3304      	adds	r3, #4
 8004000:	2100      	movs	r1, #0
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fb02 	bl	800460c <RCCEx_PLLSAI1_Config>
 8004008:	4603      	mov	r3, r0
 800400a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800400c:	e00c      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	3320      	adds	r3, #32
 8004012:	2100      	movs	r1, #0
 8004014:	4618      	mov	r0, r3
 8004016:	f000 fbed 	bl	80047f4 <RCCEx_PLLSAI2_Config>
 800401a:	4603      	mov	r3, r0
 800401c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800401e:	e003      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	74fb      	strb	r3, [r7, #19]
      break;
 8004024:	e000      	b.n	8004028 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8004026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004028:	7cfb      	ldrb	r3, [r7, #19]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d10b      	bne.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800402e:	4b79      	ldr	r3, [pc, #484]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004030:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004034:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800403c:	4975      	ldr	r1, [pc, #468]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8004044:	e001      	b.n	800404a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004046:	7cfb      	ldrb	r3, [r7, #19]
 8004048:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d047      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800405a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405e:	d030      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8004060:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004064:	d82a      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004066:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800406a:	d02a      	beq.n	80040c2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800406c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004070:	d824      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 8004072:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004076:	d008      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0xde>
 8004078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407c:	d81e      	bhi.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x110>
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00a      	beq.n	8004098 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8004082:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004086:	d010      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8004088:	e018      	b.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800408a:	4b62      	ldr	r3, [pc, #392]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800408c:	68db      	ldr	r3, [r3, #12]
 800408e:	4a61      	ldr	r2, [pc, #388]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004090:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004094:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004096:	e015      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	3304      	adds	r3, #4
 800409c:	2100      	movs	r1, #0
 800409e:	4618      	mov	r0, r3
 80040a0:	f000 fab4 	bl	800460c <RCCEx_PLLSAI1_Config>
 80040a4:	4603      	mov	r3, r0
 80040a6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040a8:	e00c      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	3320      	adds	r3, #32
 80040ae:	2100      	movs	r1, #0
 80040b0:	4618      	mov	r0, r3
 80040b2:	f000 fb9f 	bl	80047f4 <RCCEx_PLLSAI2_Config>
 80040b6:	4603      	mov	r3, r0
 80040b8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80040ba:	e003      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	74fb      	strb	r3, [r7, #19]
      break;
 80040c0:	e000      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80040c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80040c4:	7cfb      	ldrb	r3, [r7, #19]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d10b      	bne.n	80040e2 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80040ca:	4b52      	ldr	r3, [pc, #328]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d8:	494e      	ldr	r1, [pc, #312]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80040e0:	e001      	b.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040e2:	7cfb      	ldrb	r3, [r7, #19]
 80040e4:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	f000 809f 	beq.w	8004232 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040f4:	2300      	movs	r3, #0
 80040f6:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80040f8:	4b46      	ldr	r3, [pc, #280]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80040fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d101      	bne.n	8004108 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004108:	2300      	movs	r3, #0
 800410a:	2b00      	cmp	r3, #0
 800410c:	d00d      	beq.n	800412a <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800410e:	4b41      	ldr	r3, [pc, #260]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004110:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004112:	4a40      	ldr	r2, [pc, #256]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004118:	6593      	str	r3, [r2, #88]	; 0x58
 800411a:	4b3e      	ldr	r3, [pc, #248]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800411c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800411e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004122:	60bb      	str	r3, [r7, #8]
 8004124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004126:	2301      	movs	r3, #1
 8004128:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800412a:	4b3b      	ldr	r3, [pc, #236]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a3a      	ldr	r2, [pc, #232]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004130:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004134:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004136:	f7fc faa5 	bl	8000684 <HAL_GetTick>
 800413a:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800413c:	e009      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800413e:	f7fc faa1 	bl	8000684 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	2b02      	cmp	r3, #2
 800414a:	d902      	bls.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 800414c:	2303      	movs	r3, #3
 800414e:	74fb      	strb	r3, [r7, #19]
        break;
 8004150:	e005      	b.n	800415e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004152:	4b31      	ldr	r3, [pc, #196]	; (8004218 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800415a:	2b00      	cmp	r3, #0
 800415c:	d0ef      	beq.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 800415e:	7cfb      	ldrb	r3, [r7, #19]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d15b      	bne.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004164:	4b2b      	ldr	r3, [pc, #172]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004166:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800416a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800416e:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	2b00      	cmp	r3, #0
 8004174:	d01f      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417c:	697a      	ldr	r2, [r7, #20]
 800417e:	429a      	cmp	r2, r3
 8004180:	d019      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004182:	4b24      	ldr	r3, [pc, #144]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004188:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800418e:	4b21      	ldr	r3, [pc, #132]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004194:	4a1f      	ldr	r2, [pc, #124]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800419a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800419e:	4b1d      	ldr	r3, [pc, #116]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041a4:	4a1b      	ldr	r2, [pc, #108]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041ae:	4a19      	ldr	r2, [pc, #100]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f003 0301 	and.w	r3, r3, #1
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d016      	beq.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041c0:	f7fc fa60 	bl	8000684 <HAL_GetTick>
 80041c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041c6:	e00b      	b.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041c8:	f7fc fa5c 	bl	8000684 <HAL_GetTick>
 80041cc:	4602      	mov	r2, r0
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	1ad3      	subs	r3, r2, r3
 80041d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d902      	bls.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	74fb      	strb	r3, [r7, #19]
            break;
 80041de:	e006      	b.n	80041ee <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041e0:	4b0c      	ldr	r3, [pc, #48]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0ec      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 80041ee:	7cfb      	ldrb	r3, [r7, #19]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d10c      	bne.n	800420e <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80041f4:	4b07      	ldr	r3, [pc, #28]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80041f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004204:	4903      	ldr	r1, [pc, #12]	; (8004214 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800420c:	e008      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800420e:	7cfb      	ldrb	r3, [r7, #19]
 8004210:	74bb      	strb	r3, [r7, #18]
 8004212:	e005      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8004214:	40021000 	.word	0x40021000
 8004218:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421c:	7cfb      	ldrb	r3, [r7, #19]
 800421e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004220:	7c7b      	ldrb	r3, [r7, #17]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d105      	bne.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004226:	4ba0      	ldr	r3, [pc, #640]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004228:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800422a:	4a9f      	ldr	r2, [pc, #636]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800422c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004230:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d00a      	beq.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800423e:	4b9a      	ldr	r3, [pc, #616]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004244:	f023 0203 	bic.w	r2, r3, #3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800424c:	4996      	ldr	r1, [pc, #600]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800424e:	4313      	orrs	r3, r2
 8004250:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0302 	and.w	r3, r3, #2
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00a      	beq.n	8004276 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004260:	4b91      	ldr	r3, [pc, #580]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004266:	f023 020c 	bic.w	r2, r3, #12
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800426e:	498e      	ldr	r1, [pc, #568]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004270:	4313      	orrs	r3, r2
 8004272:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0304 	and.w	r3, r3, #4
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004282:	4b89      	ldr	r3, [pc, #548]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004284:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004288:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004290:	4985      	ldr	r1, [pc, #532]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d00a      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042a4:	4b80      	ldr	r3, [pc, #512]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042aa:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b2:	497d      	ldr	r1, [pc, #500]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042b4:	4313      	orrs	r3, r2
 80042b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0310 	and.w	r3, r3, #16
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d00a      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042c6:	4b78      	ldr	r3, [pc, #480]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042cc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d4:	4974      	ldr	r1, [pc, #464]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f003 0320 	and.w	r3, r3, #32
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d00a      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80042e8:	4b6f      	ldr	r3, [pc, #444]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80042ee:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f6:	496c      	ldr	r1, [pc, #432]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004306:	2b00      	cmp	r3, #0
 8004308:	d00a      	beq.n	8004320 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800430a:	4b67      	ldr	r3, [pc, #412]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800430c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004310:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004318:	4963      	ldr	r1, [pc, #396]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800431a:	4313      	orrs	r3, r2
 800431c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00a      	beq.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800432c:	4b5e      	ldr	r3, [pc, #376]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800432e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004332:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800433a:	495b      	ldr	r1, [pc, #364]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800433c:	4313      	orrs	r3, r2
 800433e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d00a      	beq.n	8004364 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800434e:	4b56      	ldr	r3, [pc, #344]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004350:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004354:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800435c:	4952      	ldr	r1, [pc, #328]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800436c:	2b00      	cmp	r3, #0
 800436e:	d00a      	beq.n	8004386 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004370:	4b4d      	ldr	r3, [pc, #308]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004372:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004376:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800437e:	494a      	ldr	r1, [pc, #296]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004380:	4313      	orrs	r3, r2
 8004382:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004392:	4b45      	ldr	r3, [pc, #276]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004398:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a0:	4941      	ldr	r1, [pc, #260]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043a2:	4313      	orrs	r3, r2
 80043a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d00a      	beq.n	80043ca <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043b4:	4b3c      	ldr	r3, [pc, #240]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80043ba:	f023 0203 	bic.w	r2, r3, #3
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c2:	4939      	ldr	r1, [pc, #228]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043c4:	4313      	orrs	r3, r2
 80043c6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d028      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80043d6:	4b34      	ldr	r3, [pc, #208]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043dc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043e4:	4930      	ldr	r1, [pc, #192]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043e6:	4313      	orrs	r3, r2
 80043e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80043f4:	d106      	bne.n	8004404 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80043f6:	4b2c      	ldr	r3, [pc, #176]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043f8:	68db      	ldr	r3, [r3, #12]
 80043fa:	4a2b      	ldr	r2, [pc, #172]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80043fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004400:	60d3      	str	r3, [r2, #12]
 8004402:	e011      	b.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004408:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800440c:	d10c      	bne.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	3304      	adds	r3, #4
 8004412:	2101      	movs	r1, #1
 8004414:	4618      	mov	r0, r3
 8004416:	f000 f8f9 	bl	800460c <RCCEx_PLLSAI1_Config>
 800441a:	4603      	mov	r3, r0
 800441c:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800441e:	7cfb      	ldrb	r3, [r7, #19]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d001      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8004424:	7cfb      	ldrb	r3, [r7, #19]
 8004426:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d04d      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800443c:	d108      	bne.n	8004450 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 800443e:	4b1a      	ldr	r3, [pc, #104]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004440:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004444:	4a18      	ldr	r2, [pc, #96]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004446:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800444a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800444e:	e012      	b.n	8004476 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8004450:	4b15      	ldr	r3, [pc, #84]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004452:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004456:	4a14      	ldr	r2, [pc, #80]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004458:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800445c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8004460:	4b11      	ldr	r3, [pc, #68]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004462:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004466:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800446e:	490e      	ldr	r1, [pc, #56]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004470:	4313      	orrs	r3, r2
 8004472:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800447a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800447e:	d106      	bne.n	800448e <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004480:	4b09      	ldr	r3, [pc, #36]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	4a08      	ldr	r2, [pc, #32]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8004486:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800448a:	60d3      	str	r3, [r2, #12]
 800448c:	e020      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004492:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004496:	d109      	bne.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004498:	4b03      	ldr	r3, [pc, #12]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800449a:	68db      	ldr	r3, [r3, #12]
 800449c:	4a02      	ldr	r2, [pc, #8]	; (80044a8 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800449e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044a2:	60d3      	str	r3, [r2, #12]
 80044a4:	e014      	b.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80044b4:	d10c      	bne.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	3304      	adds	r3, #4
 80044ba:	2101      	movs	r1, #1
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 f8a5 	bl	800460c <RCCEx_PLLSAI1_Config>
 80044c2:	4603      	mov	r3, r0
 80044c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80044c6:	7cfb      	ldrb	r3, [r7, #19]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d001      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80044cc:	7cfb      	ldrb	r3, [r7, #19]
 80044ce:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d028      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044dc:	4b4a      	ldr	r3, [pc, #296]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044ea:	4947      	ldr	r1, [pc, #284]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044ec:	4313      	orrs	r3, r2
 80044ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80044f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80044fa:	d106      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044fc:	4b42      	ldr	r3, [pc, #264]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	4a41      	ldr	r2, [pc, #260]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004502:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004506:	60d3      	str	r3, [r2, #12]
 8004508:	e011      	b.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800450e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004512:	d10c      	bne.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	3304      	adds	r3, #4
 8004518:	2101      	movs	r1, #1
 800451a:	4618      	mov	r0, r3
 800451c:	f000 f876 	bl	800460c <RCCEx_PLLSAI1_Config>
 8004520:	4603      	mov	r3, r0
 8004522:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004524:	7cfb      	ldrb	r3, [r7, #19]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d001      	beq.n	800452e <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 800452a:	7cfb      	ldrb	r3, [r7, #19]
 800452c:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d01e      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800453a:	4b33      	ldr	r3, [pc, #204]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004540:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800454a:	492f      	ldr	r1, [pc, #188]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800454c:	4313      	orrs	r3, r2
 800454e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004558:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800455c:	d10c      	bne.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	3304      	adds	r3, #4
 8004562:	2102      	movs	r1, #2
 8004564:	4618      	mov	r0, r3
 8004566:	f000 f851 	bl	800460c <RCCEx_PLLSAI1_Config>
 800456a:	4603      	mov	r3, r0
 800456c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800456e:	7cfb      	ldrb	r3, [r7, #19]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8004574:	7cfb      	ldrb	r3, [r7, #19]
 8004576:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00b      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004584:	4b20      	ldr	r3, [pc, #128]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004586:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800458a:	f023 0204 	bic.w	r2, r3, #4
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004594:	491c      	ldr	r1, [pc, #112]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004596:	4313      	orrs	r3, r2
 8004598:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d00b      	beq.n	80045c0 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80045a8:	4b17      	ldr	r3, [pc, #92]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045aa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045ae:	f023 0218 	bic.w	r2, r3, #24
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045b8:	4913      	ldr	r1, [pc, #76]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d017      	beq.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80045cc:	4b0e      	ldr	r3, [pc, #56]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80045d2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045dc:	490a      	ldr	r1, [pc, #40]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045de:	4313      	orrs	r3, r2
 80045e0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045ea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80045ee:	d105      	bne.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80045f0:	4b05      	ldr	r3, [pc, #20]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	4a04      	ldr	r2, [pc, #16]	; (8004608 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80045f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80045fa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80045fc:	7cbb      	ldrb	r3, [r7, #18]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop
 8004608:	40021000 	.word	0x40021000

0800460c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b084      	sub	sp, #16
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800461a:	4b72      	ldr	r3, [pc, #456]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00e      	beq.n	8004644 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004626:	4b6f      	ldr	r3, [pc, #444]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	f003 0203 	and.w	r2, r3, #3
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	429a      	cmp	r2, r3
 8004634:	d103      	bne.n	800463e <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
       ||
 800463a:	2b00      	cmp	r3, #0
 800463c:	d142      	bne.n	80046c4 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800463e:	2301      	movs	r3, #1
 8004640:	73fb      	strb	r3, [r7, #15]
 8004642:	e03f      	b.n	80046c4 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	2b03      	cmp	r3, #3
 800464a:	d018      	beq.n	800467e <RCCEx_PLLSAI1_Config+0x72>
 800464c:	2b03      	cmp	r3, #3
 800464e:	d825      	bhi.n	800469c <RCCEx_PLLSAI1_Config+0x90>
 8004650:	2b01      	cmp	r3, #1
 8004652:	d002      	beq.n	800465a <RCCEx_PLLSAI1_Config+0x4e>
 8004654:	2b02      	cmp	r3, #2
 8004656:	d009      	beq.n	800466c <RCCEx_PLLSAI1_Config+0x60>
 8004658:	e020      	b.n	800469c <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800465a:	4b62      	ldr	r3, [pc, #392]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d11d      	bne.n	80046a2 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800466a:	e01a      	b.n	80046a2 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800466c:	4b5d      	ldr	r3, [pc, #372]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004674:	2b00      	cmp	r3, #0
 8004676:	d116      	bne.n	80046a6 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800467c:	e013      	b.n	80046a6 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800467e:	4b59      	ldr	r3, [pc, #356]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d10f      	bne.n	80046aa <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800468a:	4b56      	ldr	r3, [pc, #344]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800469a:	e006      	b.n	80046aa <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	73fb      	strb	r3, [r7, #15]
      break;
 80046a0:	e004      	b.n	80046ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80046a2:	bf00      	nop
 80046a4:	e002      	b.n	80046ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80046a6:	bf00      	nop
 80046a8:	e000      	b.n	80046ac <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80046aa:	bf00      	nop
    }

    if(status == HAL_OK)
 80046ac:	7bfb      	ldrb	r3, [r7, #15]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d108      	bne.n	80046c4 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80046b2:	4b4c      	ldr	r3, [pc, #304]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046b4:	68db      	ldr	r3, [r3, #12]
 80046b6:	f023 0203 	bic.w	r2, r3, #3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4949      	ldr	r1, [pc, #292]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046c0:	4313      	orrs	r3, r2
 80046c2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80046c4:	7bfb      	ldrb	r3, [r7, #15]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f040 8086 	bne.w	80047d8 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80046cc:	4b45      	ldr	r3, [pc, #276]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a44      	ldr	r2, [pc, #272]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80046d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046d8:	f7fb ffd4 	bl	8000684 <HAL_GetTick>
 80046dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046de:	e009      	b.n	80046f4 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80046e0:	f7fb ffd0 	bl	8000684 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	2b02      	cmp	r3, #2
 80046ec:	d902      	bls.n	80046f4 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	73fb      	strb	r3, [r7, #15]
        break;
 80046f2:	e005      	b.n	8004700 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80046f4:	4b3b      	ldr	r3, [pc, #236]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d1ef      	bne.n	80046e0 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8004700:	7bfb      	ldrb	r3, [r7, #15]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d168      	bne.n	80047d8 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004706:	683b      	ldr	r3, [r7, #0]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d113      	bne.n	8004734 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800470c:	4b35      	ldr	r3, [pc, #212]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800470e:	691a      	ldr	r2, [r3, #16]
 8004710:	4b35      	ldr	r3, [pc, #212]	; (80047e8 <RCCEx_PLLSAI1_Config+0x1dc>)
 8004712:	4013      	ands	r3, r2
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	6892      	ldr	r2, [r2, #8]
 8004718:	0211      	lsls	r1, r2, #8
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	68d2      	ldr	r2, [r2, #12]
 800471e:	06d2      	lsls	r2, r2, #27
 8004720:	4311      	orrs	r1, r2
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	6852      	ldr	r2, [r2, #4]
 8004726:	3a01      	subs	r2, #1
 8004728:	0112      	lsls	r2, r2, #4
 800472a:	430a      	orrs	r2, r1
 800472c:	492d      	ldr	r1, [pc, #180]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800472e:	4313      	orrs	r3, r2
 8004730:	610b      	str	r3, [r1, #16]
 8004732:	e02d      	b.n	8004790 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	2b01      	cmp	r3, #1
 8004738:	d115      	bne.n	8004766 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800473a:	4b2a      	ldr	r3, [pc, #168]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800473c:	691a      	ldr	r2, [r3, #16]
 800473e:	4b2b      	ldr	r3, [pc, #172]	; (80047ec <RCCEx_PLLSAI1_Config+0x1e0>)
 8004740:	4013      	ands	r3, r2
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	6892      	ldr	r2, [r2, #8]
 8004746:	0211      	lsls	r1, r2, #8
 8004748:	687a      	ldr	r2, [r7, #4]
 800474a:	6912      	ldr	r2, [r2, #16]
 800474c:	0852      	lsrs	r2, r2, #1
 800474e:	3a01      	subs	r2, #1
 8004750:	0552      	lsls	r2, r2, #21
 8004752:	4311      	orrs	r1, r2
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	6852      	ldr	r2, [r2, #4]
 8004758:	3a01      	subs	r2, #1
 800475a:	0112      	lsls	r2, r2, #4
 800475c:	430a      	orrs	r2, r1
 800475e:	4921      	ldr	r1, [pc, #132]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004760:	4313      	orrs	r3, r2
 8004762:	610b      	str	r3, [r1, #16]
 8004764:	e014      	b.n	8004790 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004766:	4b1f      	ldr	r3, [pc, #124]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004768:	691a      	ldr	r2, [r3, #16]
 800476a:	4b21      	ldr	r3, [pc, #132]	; (80047f0 <RCCEx_PLLSAI1_Config+0x1e4>)
 800476c:	4013      	ands	r3, r2
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	6892      	ldr	r2, [r2, #8]
 8004772:	0211      	lsls	r1, r2, #8
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	6952      	ldr	r2, [r2, #20]
 8004778:	0852      	lsrs	r2, r2, #1
 800477a:	3a01      	subs	r2, #1
 800477c:	0652      	lsls	r2, r2, #25
 800477e:	4311      	orrs	r1, r2
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	6852      	ldr	r2, [r2, #4]
 8004784:	3a01      	subs	r2, #1
 8004786:	0112      	lsls	r2, r2, #4
 8004788:	430a      	orrs	r2, r1
 800478a:	4916      	ldr	r1, [pc, #88]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 800478c:	4313      	orrs	r3, r2
 800478e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004790:	4b14      	ldr	r3, [pc, #80]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a13      	ldr	r2, [pc, #76]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 8004796:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800479a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800479c:	f7fb ff72 	bl	8000684 <HAL_GetTick>
 80047a0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047a2:	e009      	b.n	80047b8 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80047a4:	f7fb ff6e 	bl	8000684 <HAL_GetTick>
 80047a8:	4602      	mov	r2, r0
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	1ad3      	subs	r3, r2, r3
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d902      	bls.n	80047b8 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80047b2:	2303      	movs	r3, #3
 80047b4:	73fb      	strb	r3, [r7, #15]
          break;
 80047b6:	e005      	b.n	80047c4 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80047b8:	4b0a      	ldr	r3, [pc, #40]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d0ef      	beq.n	80047a4 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80047c4:	7bfb      	ldrb	r3, [r7, #15]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d106      	bne.n	80047d8 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047cc:	691a      	ldr	r2, [r3, #16]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	4904      	ldr	r1, [pc, #16]	; (80047e4 <RCCEx_PLLSAI1_Config+0x1d8>)
 80047d4:	4313      	orrs	r3, r2
 80047d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80047d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40021000 	.word	0x40021000
 80047e8:	07ff800f 	.word	0x07ff800f
 80047ec:	ff9f800f 	.word	0xff9f800f
 80047f0:	f9ff800f 	.word	0xf9ff800f

080047f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047fe:	2300      	movs	r3, #0
 8004800:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004802:	4b72      	ldr	r3, [pc, #456]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	2b00      	cmp	r3, #0
 800480c:	d00e      	beq.n	800482c <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800480e:	4b6f      	ldr	r3, [pc, #444]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f003 0203 	and.w	r2, r3, #3
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	429a      	cmp	r2, r3
 800481c:	d103      	bne.n	8004826 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
       ||
 8004822:	2b00      	cmp	r3, #0
 8004824:	d142      	bne.n	80048ac <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	73fb      	strb	r3, [r7, #15]
 800482a:	e03f      	b.n	80048ac <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b03      	cmp	r3, #3
 8004832:	d018      	beq.n	8004866 <RCCEx_PLLSAI2_Config+0x72>
 8004834:	2b03      	cmp	r3, #3
 8004836:	d825      	bhi.n	8004884 <RCCEx_PLLSAI2_Config+0x90>
 8004838:	2b01      	cmp	r3, #1
 800483a:	d002      	beq.n	8004842 <RCCEx_PLLSAI2_Config+0x4e>
 800483c:	2b02      	cmp	r3, #2
 800483e:	d009      	beq.n	8004854 <RCCEx_PLLSAI2_Config+0x60>
 8004840:	e020      	b.n	8004884 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004842:	4b62      	ldr	r3, [pc, #392]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d11d      	bne.n	800488a <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004852:	e01a      	b.n	800488a <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004854:	4b5d      	ldr	r3, [pc, #372]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485c:	2b00      	cmp	r3, #0
 800485e:	d116      	bne.n	800488e <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004864:	e013      	b.n	800488e <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004866:	4b59      	ldr	r3, [pc, #356]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10f      	bne.n	8004892 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004872:	4b56      	ldr	r3, [pc, #344]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d109      	bne.n	8004892 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004882:	e006      	b.n	8004892 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8004884:	2301      	movs	r3, #1
 8004886:	73fb      	strb	r3, [r7, #15]
      break;
 8004888:	e004      	b.n	8004894 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800488a:	bf00      	nop
 800488c:	e002      	b.n	8004894 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800488e:	bf00      	nop
 8004890:	e000      	b.n	8004894 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8004892:	bf00      	nop
    }

    if(status == HAL_OK)
 8004894:	7bfb      	ldrb	r3, [r7, #15]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d108      	bne.n	80048ac <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800489a:	4b4c      	ldr	r3, [pc, #304]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 800489c:	68db      	ldr	r3, [r3, #12]
 800489e:	f023 0203 	bic.w	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4949      	ldr	r1, [pc, #292]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80048ac:	7bfb      	ldrb	r3, [r7, #15]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f040 8086 	bne.w	80049c0 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80048b4:	4b45      	ldr	r3, [pc, #276]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a44      	ldr	r2, [pc, #272]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80048ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80048c0:	f7fb fee0 	bl	8000684 <HAL_GetTick>
 80048c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048c6:	e009      	b.n	80048dc <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80048c8:	f7fb fedc 	bl	8000684 <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d902      	bls.n	80048dc <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	73fb      	strb	r3, [r7, #15]
        break;
 80048da:	e005      	b.n	80048e8 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80048dc:	4b3b      	ldr	r3, [pc, #236]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d1ef      	bne.n	80048c8 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80048e8:	7bfb      	ldrb	r3, [r7, #15]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d168      	bne.n	80049c0 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d113      	bne.n	800491c <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80048f4:	4b35      	ldr	r3, [pc, #212]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80048f6:	695a      	ldr	r2, [r3, #20]
 80048f8:	4b35      	ldr	r3, [pc, #212]	; (80049d0 <RCCEx_PLLSAI2_Config+0x1dc>)
 80048fa:	4013      	ands	r3, r2
 80048fc:	687a      	ldr	r2, [r7, #4]
 80048fe:	6892      	ldr	r2, [r2, #8]
 8004900:	0211      	lsls	r1, r2, #8
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	68d2      	ldr	r2, [r2, #12]
 8004906:	06d2      	lsls	r2, r2, #27
 8004908:	4311      	orrs	r1, r2
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	6852      	ldr	r2, [r2, #4]
 800490e:	3a01      	subs	r2, #1
 8004910:	0112      	lsls	r2, r2, #4
 8004912:	430a      	orrs	r2, r1
 8004914:	492d      	ldr	r1, [pc, #180]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004916:	4313      	orrs	r3, r2
 8004918:	614b      	str	r3, [r1, #20]
 800491a:	e02d      	b.n	8004978 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	2b01      	cmp	r3, #1
 8004920:	d115      	bne.n	800494e <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004922:	4b2a      	ldr	r3, [pc, #168]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004924:	695a      	ldr	r2, [r3, #20]
 8004926:	4b2b      	ldr	r3, [pc, #172]	; (80049d4 <RCCEx_PLLSAI2_Config+0x1e0>)
 8004928:	4013      	ands	r3, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6892      	ldr	r2, [r2, #8]
 800492e:	0211      	lsls	r1, r2, #8
 8004930:	687a      	ldr	r2, [r7, #4]
 8004932:	6912      	ldr	r2, [r2, #16]
 8004934:	0852      	lsrs	r2, r2, #1
 8004936:	3a01      	subs	r2, #1
 8004938:	0552      	lsls	r2, r2, #21
 800493a:	4311      	orrs	r1, r2
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	6852      	ldr	r2, [r2, #4]
 8004940:	3a01      	subs	r2, #1
 8004942:	0112      	lsls	r2, r2, #4
 8004944:	430a      	orrs	r2, r1
 8004946:	4921      	ldr	r1, [pc, #132]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004948:	4313      	orrs	r3, r2
 800494a:	614b      	str	r3, [r1, #20]
 800494c:	e014      	b.n	8004978 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800494e:	4b1f      	ldr	r3, [pc, #124]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004950:	695a      	ldr	r2, [r3, #20]
 8004952:	4b21      	ldr	r3, [pc, #132]	; (80049d8 <RCCEx_PLLSAI2_Config+0x1e4>)
 8004954:	4013      	ands	r3, r2
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	6892      	ldr	r2, [r2, #8]
 800495a:	0211      	lsls	r1, r2, #8
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6952      	ldr	r2, [r2, #20]
 8004960:	0852      	lsrs	r2, r2, #1
 8004962:	3a01      	subs	r2, #1
 8004964:	0652      	lsls	r2, r2, #25
 8004966:	4311      	orrs	r1, r2
 8004968:	687a      	ldr	r2, [r7, #4]
 800496a:	6852      	ldr	r2, [r2, #4]
 800496c:	3a01      	subs	r2, #1
 800496e:	0112      	lsls	r2, r2, #4
 8004970:	430a      	orrs	r2, r1
 8004972:	4916      	ldr	r1, [pc, #88]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 8004974:	4313      	orrs	r3, r2
 8004976:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004978:	4b14      	ldr	r3, [pc, #80]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a13      	ldr	r2, [pc, #76]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 800497e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004982:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004984:	f7fb fe7e 	bl	8000684 <HAL_GetTick>
 8004988:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800498a:	e009      	b.n	80049a0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800498c:	f7fb fe7a 	bl	8000684 <HAL_GetTick>
 8004990:	4602      	mov	r2, r0
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	1ad3      	subs	r3, r2, r3
 8004996:	2b02      	cmp	r3, #2
 8004998:	d902      	bls.n	80049a0 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800499a:	2303      	movs	r3, #3
 800499c:	73fb      	strb	r3, [r7, #15]
          break;
 800499e:	e005      	b.n	80049ac <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80049a0:	4b0a      	ldr	r3, [pc, #40]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0ef      	beq.n	800498c <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80049ac:	7bfb      	ldrb	r3, [r7, #15]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d106      	bne.n	80049c0 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80049b2:	4b06      	ldr	r3, [pc, #24]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049b4:	695a      	ldr	r2, [r3, #20]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	699b      	ldr	r3, [r3, #24]
 80049ba:	4904      	ldr	r1, [pc, #16]	; (80049cc <RCCEx_PLLSAI2_Config+0x1d8>)
 80049bc:	4313      	orrs	r3, r2
 80049be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40021000 	.word	0x40021000
 80049d0:	07ff800f 	.word	0x07ff800f
 80049d4:	ff9f800f 	.word	0xff9f800f
 80049d8:	f9ff800f 	.word	0xf9ff800f

080049dc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e049      	b.n	8004a82 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d106      	bne.n	8004a08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f003 fbae 	bl	8008164 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681a      	ldr	r2, [r3, #0]
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3304      	adds	r3, #4
 8004a18:	4619      	mov	r1, r3
 8004a1a:	4610      	mov	r0, r2
 8004a1c:	f000 fac0 	bl	8004fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2201      	movs	r2, #1
 8004a24:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2201      	movs	r2, #1
 8004a44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2201      	movs	r2, #1
 8004a54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3708      	adds	r7, #8
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d001      	beq.n	8004aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e04f      	b.n	8004b44 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68da      	ldr	r2, [r3, #12]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f042 0201 	orr.w	r2, r2, #1
 8004aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a23      	ldr	r2, [pc, #140]	; (8004b50 <HAL_TIM_Base_Start_IT+0xc4>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d01d      	beq.n	8004b02 <HAL_TIM_Base_Start_IT+0x76>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ace:	d018      	beq.n	8004b02 <HAL_TIM_Base_Start_IT+0x76>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1f      	ldr	r2, [pc, #124]	; (8004b54 <HAL_TIM_Base_Start_IT+0xc8>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d013      	beq.n	8004b02 <HAL_TIM_Base_Start_IT+0x76>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a1e      	ldr	r2, [pc, #120]	; (8004b58 <HAL_TIM_Base_Start_IT+0xcc>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d00e      	beq.n	8004b02 <HAL_TIM_Base_Start_IT+0x76>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a1c      	ldr	r2, [pc, #112]	; (8004b5c <HAL_TIM_Base_Start_IT+0xd0>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d009      	beq.n	8004b02 <HAL_TIM_Base_Start_IT+0x76>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a1b      	ldr	r2, [pc, #108]	; (8004b60 <HAL_TIM_Base_Start_IT+0xd4>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d004      	beq.n	8004b02 <HAL_TIM_Base_Start_IT+0x76>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a19      	ldr	r2, [pc, #100]	; (8004b64 <HAL_TIM_Base_Start_IT+0xd8>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d115      	bne.n	8004b2e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	4b17      	ldr	r3, [pc, #92]	; (8004b68 <HAL_TIM_Base_Start_IT+0xdc>)
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2b06      	cmp	r3, #6
 8004b12:	d015      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0xb4>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b1a:	d011      	beq.n	8004b40 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f042 0201 	orr.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b2c:	e008      	b.n	8004b40 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f042 0201 	orr.w	r2, r2, #1
 8004b3c:	601a      	str	r2, [r3, #0]
 8004b3e:	e000      	b.n	8004b42 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3714      	adds	r7, #20
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr
 8004b50:	40012c00 	.word	0x40012c00
 8004b54:	40000400 	.word	0x40000400
 8004b58:	40000800 	.word	0x40000800
 8004b5c:	40000c00 	.word	0x40000c00
 8004b60:	40013400 	.word	0x40013400
 8004b64:	40014000 	.word	0x40014000
 8004b68:	00010007 	.word	0x00010007

08004b6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	691b      	ldr	r3, [r3, #16]
 8004b7a:	f003 0302 	and.w	r3, r3, #2
 8004b7e:	2b02      	cmp	r3, #2
 8004b80:	d122      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b02      	cmp	r3, #2
 8004b8e:	d11b      	bne.n	8004bc8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f06f 0202 	mvn.w	r2, #2
 8004b98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	699b      	ldr	r3, [r3, #24]
 8004ba6:	f003 0303 	and.w	r3, r3, #3
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d003      	beq.n	8004bb6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f000 f9d8 	bl	8004f64 <HAL_TIM_IC_CaptureCallback>
 8004bb4:	e005      	b.n	8004bc2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f000 f9ca 	bl	8004f50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 f9db 	bl	8004f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	691b      	ldr	r3, [r3, #16]
 8004bce:	f003 0304 	and.w	r3, r3, #4
 8004bd2:	2b04      	cmp	r3, #4
 8004bd4:	d122      	bne.n	8004c1c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	f003 0304 	and.w	r3, r3, #4
 8004be0:	2b04      	cmp	r3, #4
 8004be2:	d11b      	bne.n	8004c1c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f06f 0204 	mvn.w	r2, #4
 8004bec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2202      	movs	r2, #2
 8004bf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	699b      	ldr	r3, [r3, #24]
 8004bfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c02:	6878      	ldr	r0, [r7, #4]
 8004c04:	f000 f9ae 	bl	8004f64 <HAL_TIM_IC_CaptureCallback>
 8004c08:	e005      	b.n	8004c16 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 f9a0 	bl	8004f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f9b1 	bl	8004f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	f003 0308 	and.w	r3, r3, #8
 8004c26:	2b08      	cmp	r3, #8
 8004c28:	d122      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	f003 0308 	and.w	r3, r3, #8
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d11b      	bne.n	8004c70 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	f06f 0208 	mvn.w	r2, #8
 8004c40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2204      	movs	r2, #4
 8004c46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	69db      	ldr	r3, [r3, #28]
 8004c4e:	f003 0303 	and.w	r3, r3, #3
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d003      	beq.n	8004c5e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c56:	6878      	ldr	r0, [r7, #4]
 8004c58:	f000 f984 	bl	8004f64 <HAL_TIM_IC_CaptureCallback>
 8004c5c:	e005      	b.n	8004c6a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f976 	bl	8004f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c64:	6878      	ldr	r0, [r7, #4]
 8004c66:	f000 f987 	bl	8004f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	f003 0310 	and.w	r3, r3, #16
 8004c7a:	2b10      	cmp	r3, #16
 8004c7c:	d122      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b10      	cmp	r3, #16
 8004c8a:	d11b      	bne.n	8004cc4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0210 	mvn.w	r2, #16
 8004c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2208      	movs	r2, #8
 8004c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f95a 	bl	8004f64 <HAL_TIM_IC_CaptureCallback>
 8004cb0:	e005      	b.n	8004cbe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f94c 	bl	8004f50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 f95d 	bl	8004f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0301 	and.w	r3, r3, #1
 8004cce:	2b01      	cmp	r3, #1
 8004cd0:	d10e      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68db      	ldr	r3, [r3, #12]
 8004cd8:	f003 0301 	and.w	r3, r3, #1
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d107      	bne.n	8004cf0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f06f 0201 	mvn.w	r2, #1
 8004ce8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004cea:	6878      	ldr	r0, [r7, #4]
 8004cec:	f000 f926 	bl	8004f3c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	691b      	ldr	r3, [r3, #16]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	2b80      	cmp	r3, #128	; 0x80
 8004cfc:	d10e      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d08:	2b80      	cmp	r3, #128	; 0x80
 8004d0a:	d107      	bne.n	8004d1c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004d14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fb08 	bl	800532c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	691b      	ldr	r3, [r3, #16]
 8004d22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d2a:	d10e      	bne.n	8004d4a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d36:	2b80      	cmp	r3, #128	; 0x80
 8004d38:	d107      	bne.n	8004d4a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004d42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d44:	6878      	ldr	r0, [r7, #4]
 8004d46:	f000 fafb 	bl	8005340 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691b      	ldr	r3, [r3, #16]
 8004d50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d54:	2b40      	cmp	r3, #64	; 0x40
 8004d56:	d10e      	bne.n	8004d76 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d62:	2b40      	cmp	r3, #64	; 0x40
 8004d64:	d107      	bne.n	8004d76 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004d6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 f90b 	bl	8004f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	691b      	ldr	r3, [r3, #16]
 8004d7c:	f003 0320 	and.w	r3, r3, #32
 8004d80:	2b20      	cmp	r3, #32
 8004d82:	d10e      	bne.n	8004da2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f003 0320 	and.w	r3, r3, #32
 8004d8e:	2b20      	cmp	r3, #32
 8004d90:	d107      	bne.n	8004da2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f06f 0220 	mvn.w	r2, #32
 8004d9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	f000 fabb 	bl	8005318 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
 8004db2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dbe:	2b01      	cmp	r3, #1
 8004dc0:	d101      	bne.n	8004dc6 <HAL_TIM_ConfigClockSource+0x1c>
 8004dc2:	2302      	movs	r3, #2
 8004dc4:	e0b6      	b.n	8004f34 <HAL_TIM_ConfigClockSource+0x18a>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2201      	movs	r2, #1
 8004dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2202      	movs	r2, #2
 8004dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004de8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004df0:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	68ba      	ldr	r2, [r7, #8]
 8004df8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e02:	d03e      	beq.n	8004e82 <HAL_TIM_ConfigClockSource+0xd8>
 8004e04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e08:	f200 8087 	bhi.w	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e10:	f000 8086 	beq.w	8004f20 <HAL_TIM_ConfigClockSource+0x176>
 8004e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e18:	d87f      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e1a:	2b70      	cmp	r3, #112	; 0x70
 8004e1c:	d01a      	beq.n	8004e54 <HAL_TIM_ConfigClockSource+0xaa>
 8004e1e:	2b70      	cmp	r3, #112	; 0x70
 8004e20:	d87b      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e22:	2b60      	cmp	r3, #96	; 0x60
 8004e24:	d050      	beq.n	8004ec8 <HAL_TIM_ConfigClockSource+0x11e>
 8004e26:	2b60      	cmp	r3, #96	; 0x60
 8004e28:	d877      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e2a:	2b50      	cmp	r3, #80	; 0x50
 8004e2c:	d03c      	beq.n	8004ea8 <HAL_TIM_ConfigClockSource+0xfe>
 8004e2e:	2b50      	cmp	r3, #80	; 0x50
 8004e30:	d873      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e32:	2b40      	cmp	r3, #64	; 0x40
 8004e34:	d058      	beq.n	8004ee8 <HAL_TIM_ConfigClockSource+0x13e>
 8004e36:	2b40      	cmp	r3, #64	; 0x40
 8004e38:	d86f      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e3a:	2b30      	cmp	r3, #48	; 0x30
 8004e3c:	d064      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x15e>
 8004e3e:	2b30      	cmp	r3, #48	; 0x30
 8004e40:	d86b      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e42:	2b20      	cmp	r3, #32
 8004e44:	d060      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x15e>
 8004e46:	2b20      	cmp	r3, #32
 8004e48:	d867      	bhi.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d05c      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x15e>
 8004e4e:	2b10      	cmp	r3, #16
 8004e50:	d05a      	beq.n	8004f08 <HAL_TIM_ConfigClockSource+0x15e>
 8004e52:	e062      	b.n	8004f1a <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	6899      	ldr	r1, [r3, #8]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f000 f9b0 	bl	80051c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e76:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68ba      	ldr	r2, [r7, #8]
 8004e7e:	609a      	str	r2, [r3, #8]
      break;
 8004e80:	e04f      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6818      	ldr	r0, [r3, #0]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	6899      	ldr	r1, [r3, #8]
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685a      	ldr	r2, [r3, #4]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	68db      	ldr	r3, [r3, #12]
 8004e92:	f000 f999 	bl	80051c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ea4:	609a      	str	r2, [r3, #8]
      break;
 8004ea6:	e03c      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6818      	ldr	r0, [r3, #0]
 8004eac:	683b      	ldr	r3, [r7, #0]
 8004eae:	6859      	ldr	r1, [r3, #4]
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	f000 f90d 	bl	80050d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2150      	movs	r1, #80	; 0x50
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f000 f966 	bl	8005192 <TIM_ITRx_SetConfig>
      break;
 8004ec6:	e02c      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6818      	ldr	r0, [r3, #0]
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	6859      	ldr	r1, [r3, #4]
 8004ed0:	683b      	ldr	r3, [r7, #0]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	461a      	mov	r2, r3
 8004ed6:	f000 f92c 	bl	8005132 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2160      	movs	r1, #96	; 0x60
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 f956 	bl	8005192 <TIM_ITRx_SetConfig>
      break;
 8004ee6:	e01c      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6818      	ldr	r0, [r3, #0]
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	6859      	ldr	r1, [r3, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	461a      	mov	r2, r3
 8004ef6:	f000 f8ed 	bl	80050d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	2140      	movs	r1, #64	; 0x40
 8004f00:	4618      	mov	r0, r3
 8004f02:	f000 f946 	bl	8005192 <TIM_ITRx_SetConfig>
      break;
 8004f06:	e00c      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681a      	ldr	r2, [r3, #0]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4619      	mov	r1, r3
 8004f12:	4610      	mov	r0, r2
 8004f14:	f000 f93d 	bl	8005192 <TIM_ITRx_SetConfig>
      break;
 8004f18:	e003      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004f1e:	e000      	b.n	8004f22 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004f20:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	2201      	movs	r2, #1
 8004f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3710      	adds	r7, #16
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004f44:	bf00      	nop
 8004f46:	370c      	adds	r7, #12
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr

08004f50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f50:	b480      	push	{r7}
 8004f52:	b083      	sub	sp, #12
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f58:	bf00      	nop
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f80:	bf00      	nop
 8004f82:	370c      	adds	r7, #12
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f94:	bf00      	nop
 8004f96:	370c      	adds	r7, #12
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a40      	ldr	r2, [pc, #256]	; (80050b4 <TIM_Base_SetConfig+0x114>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d013      	beq.n	8004fe0 <TIM_Base_SetConfig+0x40>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fbe:	d00f      	beq.n	8004fe0 <TIM_Base_SetConfig+0x40>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	4a3d      	ldr	r2, [pc, #244]	; (80050b8 <TIM_Base_SetConfig+0x118>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d00b      	beq.n	8004fe0 <TIM_Base_SetConfig+0x40>
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a3c      	ldr	r2, [pc, #240]	; (80050bc <TIM_Base_SetConfig+0x11c>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d007      	beq.n	8004fe0 <TIM_Base_SetConfig+0x40>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a3b      	ldr	r2, [pc, #236]	; (80050c0 <TIM_Base_SetConfig+0x120>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <TIM_Base_SetConfig+0x40>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a3a      	ldr	r2, [pc, #232]	; (80050c4 <TIM_Base_SetConfig+0x124>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d108      	bne.n	8004ff2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a2f      	ldr	r2, [pc, #188]	; (80050b4 <TIM_Base_SetConfig+0x114>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d01f      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005000:	d01b      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a2c      	ldr	r2, [pc, #176]	; (80050b8 <TIM_Base_SetConfig+0x118>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d017      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a2b      	ldr	r2, [pc, #172]	; (80050bc <TIM_Base_SetConfig+0x11c>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a2a      	ldr	r2, [pc, #168]	; (80050c0 <TIM_Base_SetConfig+0x120>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d00f      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a29      	ldr	r2, [pc, #164]	; (80050c4 <TIM_Base_SetConfig+0x124>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d00b      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a28      	ldr	r2, [pc, #160]	; (80050c8 <TIM_Base_SetConfig+0x128>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d007      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a27      	ldr	r2, [pc, #156]	; (80050cc <TIM_Base_SetConfig+0x12c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d003      	beq.n	800503a <TIM_Base_SetConfig+0x9a>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a26      	ldr	r2, [pc, #152]	; (80050d0 <TIM_Base_SetConfig+0x130>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d108      	bne.n	800504c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005040:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	68fa      	ldr	r2, [r7, #12]
 8005048:	4313      	orrs	r3, r2
 800504a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	695b      	ldr	r3, [r3, #20]
 8005056:	4313      	orrs	r3, r2
 8005058:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	689a      	ldr	r2, [r3, #8]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	4a10      	ldr	r2, [pc, #64]	; (80050b4 <TIM_Base_SetConfig+0x114>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d00f      	beq.n	8005098 <TIM_Base_SetConfig+0xf8>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	4a12      	ldr	r2, [pc, #72]	; (80050c4 <TIM_Base_SetConfig+0x124>)
 800507c:	4293      	cmp	r3, r2
 800507e:	d00b      	beq.n	8005098 <TIM_Base_SetConfig+0xf8>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	4a11      	ldr	r2, [pc, #68]	; (80050c8 <TIM_Base_SetConfig+0x128>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d007      	beq.n	8005098 <TIM_Base_SetConfig+0xf8>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a10      	ldr	r2, [pc, #64]	; (80050cc <TIM_Base_SetConfig+0x12c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d003      	beq.n	8005098 <TIM_Base_SetConfig+0xf8>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	4a0f      	ldr	r2, [pc, #60]	; (80050d0 <TIM_Base_SetConfig+0x130>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d103      	bne.n	80050a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	691a      	ldr	r2, [r3, #16]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2201      	movs	r2, #1
 80050a4:	615a      	str	r2, [r3, #20]
}
 80050a6:	bf00      	nop
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40012c00 	.word	0x40012c00
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800
 80050c0:	40000c00 	.word	0x40000c00
 80050c4:	40013400 	.word	0x40013400
 80050c8:	40014000 	.word	0x40014000
 80050cc:	40014400 	.word	0x40014400
 80050d0:	40014800 	.word	0x40014800

080050d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b087      	sub	sp, #28
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	6a1b      	ldr	r3, [r3, #32]
 80050ea:	f023 0201 	bic.w	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80050fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	011b      	lsls	r3, r3, #4
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	4313      	orrs	r3, r2
 8005108:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	f023 030a 	bic.w	r3, r3, #10
 8005110:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	697a      	ldr	r2, [r7, #20]
 8005124:	621a      	str	r2, [r3, #32]
}
 8005126:	bf00      	nop
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005130:	4770      	bx	lr

08005132 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005132:	b480      	push	{r7}
 8005134:	b087      	sub	sp, #28
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6a1b      	ldr	r3, [r3, #32]
 8005142:	f023 0210 	bic.w	r2, r3, #16
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6a1b      	ldr	r3, [r3, #32]
 8005154:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800515c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	031b      	lsls	r3, r3, #12
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	4313      	orrs	r3, r2
 8005166:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800516e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005170:	68bb      	ldr	r3, [r7, #8]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	693a      	ldr	r2, [r7, #16]
 8005184:	621a      	str	r2, [r3, #32]
}
 8005186:	bf00      	nop
 8005188:	371c      	adds	r7, #28
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr

08005192 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005192:	b480      	push	{r7}
 8005194:	b085      	sub	sp, #20
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051aa:	683a      	ldr	r2, [r7, #0]
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f043 0307 	orr.w	r3, r3, #7
 80051b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	68fa      	ldr	r2, [r7, #12]
 80051ba:	609a      	str	r2, [r3, #8]
}
 80051bc:	bf00      	nop
 80051be:	3714      	adds	r7, #20
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b087      	sub	sp, #28
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80051e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	021a      	lsls	r2, r3, #8
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	431a      	orrs	r2, r3
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	697a      	ldr	r2, [r7, #20]
 80051f2:	4313      	orrs	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	697a      	ldr	r2, [r7, #20]
 80051fa:	609a      	str	r2, [r3, #8]
}
 80051fc:	bf00      	nop
 80051fe:	371c      	adds	r7, #28
 8005200:	46bd      	mov	sp, r7
 8005202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005206:	4770      	bx	lr

08005208 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005218:	2b01      	cmp	r3, #1
 800521a:	d101      	bne.n	8005220 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800521c:	2302      	movs	r3, #2
 800521e:	e068      	b.n	80052f2 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2201      	movs	r2, #1
 8005224:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a2e      	ldr	r2, [pc, #184]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d004      	beq.n	8005254 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a2d      	ldr	r2, [pc, #180]	; (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d108      	bne.n	8005266 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800525a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800526c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1e      	ldr	r2, [pc, #120]	; (8005300 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d01d      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005292:	d018      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1b      	ldr	r2, [pc, #108]	; (8005308 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d013      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a1a      	ldr	r2, [pc, #104]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d00e      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a18      	ldr	r2, [pc, #96]	; (8005310 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d009      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	4a13      	ldr	r2, [pc, #76]	; (8005304 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d004      	beq.n	80052c6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a14      	ldr	r2, [pc, #80]	; (8005314 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d10c      	bne.n	80052e0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	68ba      	ldr	r2, [r7, #8]
 80052d4:	4313      	orrs	r3, r2
 80052d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	68ba      	ldr	r2, [r7, #8]
 80052de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2201      	movs	r2, #1
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	40012c00 	.word	0x40012c00
 8005304:	40013400 	.word	0x40013400
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40000c00 	.word	0x40000c00
 8005314:	40014000 	.word	0x40014000

08005318 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005318:	b480      	push	{r7}
 800531a:	b083      	sub	sp, #12
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005348:	bf00      	nop
 800534a:	370c      	adds	r7, #12
 800534c:	46bd      	mov	sp, r7
 800534e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005352:	4770      	bx	lr

08005354 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d101      	bne.n	8005366 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005362:	2301      	movs	r3, #1
 8005364:	e042      	b.n	80053ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f002 ff17 	bl	80081ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2224      	movs	r2, #36	; 0x24
 8005382:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f022 0201 	bic.w	r2, r2, #1
 8005394:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f000 fcd0 	bl	8005d3c <UART_SetConfig>
 800539c:	4603      	mov	r3, r0
 800539e:	2b01      	cmp	r3, #1
 80053a0:	d101      	bne.n	80053a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80053a2:	2301      	movs	r3, #1
 80053a4:	e022      	b.n	80053ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d002      	beq.n	80053b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 ffc0 	bl	8006334 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	685a      	ldr	r2, [r3, #4]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80053c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689a      	ldr	r2, [r3, #8]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	681a      	ldr	r2, [r3, #0]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f001 f847 	bl	8006478 <UART_CheckIdleState>
 80053ea:	4603      	mov	r3, r0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b08a      	sub	sp, #40	; 0x28
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	603b      	str	r3, [r7, #0]
 8005400:	4613      	mov	r3, r2
 8005402:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800540a:	2b20      	cmp	r3, #32
 800540c:	f040 8084 	bne.w	8005518 <HAL_UART_Transmit+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <HAL_UART_Transmit+0x28>
 8005416:	88fb      	ldrh	r3, [r7, #6]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800541c:	2301      	movs	r3, #1
 800541e:	e07c      	b.n	800551a <HAL_UART_Transmit+0x126>
    }

    __HAL_LOCK(huart);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005426:	2b01      	cmp	r3, #1
 8005428:	d101      	bne.n	800542e <HAL_UART_Transmit+0x3a>
 800542a:	2302      	movs	r3, #2
 800542c:	e075      	b.n	800551a <HAL_UART_Transmit+0x126>
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2201      	movs	r2, #1
 8005432:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2200      	movs	r2, #0
 800543a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	2221      	movs	r2, #33	; 0x21
 8005442:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005446:	f7fb f91d 	bl	8000684 <HAL_GetTick>
 800544a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	88fa      	ldrh	r2, [r7, #6]
 8005450:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	88fa      	ldrh	r2, [r7, #6]
 8005458:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005464:	d108      	bne.n	8005478 <HAL_UART_Transmit+0x84>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d104      	bne.n	8005478 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800546e:	2300      	movs	r3, #0
 8005470:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	61bb      	str	r3, [r7, #24]
 8005476:	e003      	b.n	8005480 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800547c:	2300      	movs	r3, #0
 800547e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	2200      	movs	r2, #0
 8005484:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005488:	e02d      	b.n	80054e6 <HAL_UART_Transmit+0xf2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	2200      	movs	r2, #0
 8005492:	2180      	movs	r1, #128	; 0x80
 8005494:	68f8      	ldr	r0, [r7, #12]
 8005496:	f001 f83a 	bl	800650e <UART_WaitOnFlagUntilTimeout>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d001      	beq.n	80054a4 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80054a0:	2303      	movs	r3, #3
 80054a2:	e03a      	b.n	800551a <HAL_UART_Transmit+0x126>
      }
      if (pdata8bits == NULL)
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10b      	bne.n	80054c2 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	881a      	ldrh	r2, [r3, #0]
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054b6:	b292      	uxth	r2, r2
 80054b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80054ba:	69bb      	ldr	r3, [r7, #24]
 80054bc:	3302      	adds	r3, #2
 80054be:	61bb      	str	r3, [r7, #24]
 80054c0:	e008      	b.n	80054d4 <HAL_UART_Transmit+0xe0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	781a      	ldrb	r2, [r3, #0]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	b292      	uxth	r2, r2
 80054cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	3301      	adds	r3, #1
 80054d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054da:	b29b      	uxth	r3, r3
 80054dc:	3b01      	subs	r3, #1
 80054de:	b29a      	uxth	r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80054ec:	b29b      	uxth	r3, r3
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d1cb      	bne.n	800548a <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	9300      	str	r3, [sp, #0]
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	2200      	movs	r2, #0
 80054fa:	2140      	movs	r1, #64	; 0x40
 80054fc:	68f8      	ldr	r0, [r7, #12]
 80054fe:	f001 f806 	bl	800650e <UART_WaitOnFlagUntilTimeout>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d001      	beq.n	800550c <HAL_UART_Transmit+0x118>
    {
      return HAL_TIMEOUT;
 8005508:	2303      	movs	r3, #3
 800550a:	e006      	b.n	800551a <HAL_UART_Transmit+0x126>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2220      	movs	r2, #32
 8005510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005514:	2300      	movs	r3, #0
 8005516:	e000      	b.n	800551a <HAL_UART_Transmit+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005518:	2302      	movs	r3, #2
  }
}
 800551a:	4618      	mov	r0, r3
 800551c:	3720      	adds	r7, #32
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b08a      	sub	sp, #40	; 0x28
 8005526:	af02      	add	r7, sp, #8
 8005528:	60f8      	str	r0, [r7, #12]
 800552a:	60b9      	str	r1, [r7, #8]
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	4613      	mov	r3, r2
 8005530:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005538:	2b20      	cmp	r3, #32
 800553a:	f040 80c1 	bne.w	80056c0 <HAL_UART_Receive+0x19e>
  {
    if ((pData == NULL) || (Size == 0U))
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d002      	beq.n	800554a <HAL_UART_Receive+0x28>
 8005544:	88fb      	ldrh	r3, [r7, #6]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e0b9      	b.n	80056c2 <HAL_UART_Receive+0x1a0>
    }

    __HAL_LOCK(huart);
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005554:	2b01      	cmp	r3, #1
 8005556:	d101      	bne.n	800555c <HAL_UART_Receive+0x3a>
 8005558:	2302      	movs	r3, #2
 800555a:	e0b2      	b.n	80056c2 <HAL_UART_Receive+0x1a0>
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2222      	movs	r2, #34	; 0x22
 8005570:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800557a:	f7fb f883 	bl	8000684 <HAL_GetTick>
 800557e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	88fa      	ldrh	r2, [r7, #6]
 8005584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	88fa      	ldrh	r2, [r7, #6]
 800558c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005598:	d10e      	bne.n	80055b8 <HAL_UART_Receive+0x96>
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d105      	bne.n	80055ae <HAL_UART_Receive+0x8c>
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f240 12ff 	movw	r2, #511	; 0x1ff
 80055a8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80055ac:	e02d      	b.n	800560a <HAL_UART_Receive+0xe8>
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	22ff      	movs	r2, #255	; 0xff
 80055b2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80055b6:	e028      	b.n	800560a <HAL_UART_Receive+0xe8>
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10d      	bne.n	80055dc <HAL_UART_Receive+0xba>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	691b      	ldr	r3, [r3, #16]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d104      	bne.n	80055d2 <HAL_UART_Receive+0xb0>
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	22ff      	movs	r2, #255	; 0xff
 80055cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80055d0:	e01b      	b.n	800560a <HAL_UART_Receive+0xe8>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	227f      	movs	r2, #127	; 0x7f
 80055d6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80055da:	e016      	b.n	800560a <HAL_UART_Receive+0xe8>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055e4:	d10d      	bne.n	8005602 <HAL_UART_Receive+0xe0>
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	691b      	ldr	r3, [r3, #16]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d104      	bne.n	80055f8 <HAL_UART_Receive+0xd6>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	227f      	movs	r2, #127	; 0x7f
 80055f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80055f6:	e008      	b.n	800560a <HAL_UART_Receive+0xe8>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	223f      	movs	r2, #63	; 0x3f
 80055fc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005600:	e003      	b.n	800560a <HAL_UART_Receive+0xe8>
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005610:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800561a:	d108      	bne.n	800562e <HAL_UART_Receive+0x10c>
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	691b      	ldr	r3, [r3, #16]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d104      	bne.n	800562e <HAL_UART_Receive+0x10c>
    {
      pdata8bits  = NULL;
 8005624:	2300      	movs	r3, #0
 8005626:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	61bb      	str	r3, [r7, #24]
 800562c:	e003      	b.n	8005636 <HAL_UART_Receive+0x114>
    }
    else
    {
      pdata8bits  = pData;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005632:	2300      	movs	r3, #0
 8005634:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800563e:	e033      	b.n	80056a8 <HAL_UART_Receive+0x186>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	2200      	movs	r2, #0
 8005648:	2120      	movs	r1, #32
 800564a:	68f8      	ldr	r0, [r7, #12]
 800564c:	f000 ff5f 	bl	800650e <UART_WaitOnFlagUntilTimeout>
 8005650:	4603      	mov	r3, r0
 8005652:	2b00      	cmp	r3, #0
 8005654:	d001      	beq.n	800565a <HAL_UART_Receive+0x138>
      {
        return HAL_TIMEOUT;
 8005656:	2303      	movs	r3, #3
 8005658:	e033      	b.n	80056c2 <HAL_UART_Receive+0x1a0>
      }
      if (pdata8bits == NULL)
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d10c      	bne.n	800567a <HAL_UART_Receive+0x158>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005666:	b29a      	uxth	r2, r3
 8005668:	8a7b      	ldrh	r3, [r7, #18]
 800566a:	4013      	ands	r3, r2
 800566c:	b29a      	uxth	r2, r3
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005672:	69bb      	ldr	r3, [r7, #24]
 8005674:	3302      	adds	r3, #2
 8005676:	61bb      	str	r3, [r7, #24]
 8005678:	e00d      	b.n	8005696 <HAL_UART_Receive+0x174>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8005680:	b29b      	uxth	r3, r3
 8005682:	b2da      	uxtb	r2, r3
 8005684:	8a7b      	ldrh	r3, [r7, #18]
 8005686:	b2db      	uxtb	r3, r3
 8005688:	4013      	ands	r3, r2
 800568a:	b2da      	uxtb	r2, r3
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005690:	69fb      	ldr	r3, [r7, #28]
 8005692:	3301      	adds	r3, #1
 8005694:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800569c:	b29b      	uxth	r3, r3
 800569e:	3b01      	subs	r3, #1
 80056a0:	b29a      	uxth	r2, r3
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056ae:	b29b      	uxth	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d1c5      	bne.n	8005640 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2220      	movs	r2, #32
 80056b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 80056bc:	2300      	movs	r3, #0
 80056be:	e000      	b.n	80056c2 <HAL_UART_Receive+0x1a0>
  }
  else
  {
    return HAL_BUSY;
 80056c0:	2302      	movs	r3, #2
  }
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
	...

080056cc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b0ba      	sub	sp, #232	; 0xe8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80056f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80056f6:	f640 030f 	movw	r3, #2063	; 0x80f
 80056fa:	4013      	ands	r3, r2
 80056fc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005700:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005704:	2b00      	cmp	r3, #0
 8005706:	d11b      	bne.n	8005740 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005708:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800570c:	f003 0320 	and.w	r3, r3, #32
 8005710:	2b00      	cmp	r3, #0
 8005712:	d015      	beq.n	8005740 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005714:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005718:	f003 0320 	and.w	r3, r3, #32
 800571c:	2b00      	cmp	r3, #0
 800571e:	d105      	bne.n	800572c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005720:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005724:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d009      	beq.n	8005740 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005730:	2b00      	cmp	r3, #0
 8005732:	f000 82d6 	beq.w	8005ce2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	4798      	blx	r3
      }
      return;
 800573e:	e2d0      	b.n	8005ce2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8005740:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005744:	2b00      	cmp	r3, #0
 8005746:	f000 811f 	beq.w	8005988 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800574a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800574e:	4b8b      	ldr	r3, [pc, #556]	; (800597c <HAL_UART_IRQHandler+0x2b0>)
 8005750:	4013      	ands	r3, r2
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005756:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800575a:	4b89      	ldr	r3, [pc, #548]	; (8005980 <HAL_UART_IRQHandler+0x2b4>)
 800575c:	4013      	ands	r3, r2
 800575e:	2b00      	cmp	r3, #0
 8005760:	f000 8112 	beq.w	8005988 <HAL_UART_IRQHandler+0x2bc>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005768:	f003 0301 	and.w	r3, r3, #1
 800576c:	2b00      	cmp	r3, #0
 800576e:	d011      	beq.n	8005794 <HAL_UART_IRQHandler+0xc8>
 8005770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005774:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00b      	beq.n	8005794 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2201      	movs	r2, #1
 8005782:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800578a:	f043 0201 	orr.w	r2, r3, #1
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005794:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d011      	beq.n	80057c4 <HAL_UART_IRQHandler+0xf8>
 80057a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d00b      	beq.n	80057c4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	2202      	movs	r2, #2
 80057b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ba:	f043 0204 	orr.w	r2, r3, #4
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80057c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d011      	beq.n	80057f4 <HAL_UART_IRQHandler+0x128>
 80057d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d00b      	beq.n	80057f4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	2204      	movs	r2, #4
 80057e2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80057ea:	f043 0202 	orr.w	r2, r3, #2
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80057f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057f8:	f003 0308 	and.w	r3, r3, #8
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d017      	beq.n	8005830 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005800:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005804:	f003 0320 	and.w	r3, r3, #32
 8005808:	2b00      	cmp	r3, #0
 800580a:	d105      	bne.n	8005818 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800580c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005810:	4b5a      	ldr	r3, [pc, #360]	; (800597c <HAL_UART_IRQHandler+0x2b0>)
 8005812:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00b      	beq.n	8005830 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2208      	movs	r2, #8
 800581e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005826:	f043 0208 	orr.w	r2, r3, #8
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005830:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005834:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005838:	2b00      	cmp	r3, #0
 800583a:	d012      	beq.n	8005862 <HAL_UART_IRQHandler+0x196>
 800583c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005840:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005844:	2b00      	cmp	r3, #0
 8005846:	d00c      	beq.n	8005862 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005850:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005858:	f043 0220 	orr.w	r2, r3, #32
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005868:	2b00      	cmp	r3, #0
 800586a:	f000 823c 	beq.w	8005ce6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800586e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005872:	f003 0320 	and.w	r3, r3, #32
 8005876:	2b00      	cmp	r3, #0
 8005878:	d013      	beq.n	80058a2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800587a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800587e:	f003 0320 	and.w	r3, r3, #32
 8005882:	2b00      	cmp	r3, #0
 8005884:	d105      	bne.n	8005892 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005886:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800588a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800588e:	2b00      	cmp	r3, #0
 8005890:	d007      	beq.n	80058a2 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005896:	2b00      	cmp	r3, #0
 8005898:	d003      	beq.n	80058a2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058a8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689b      	ldr	r3, [r3, #8]
 80058b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b6:	2b40      	cmp	r3, #64	; 0x40
 80058b8:	d005      	beq.n	80058c6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80058ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80058be:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d04f      	beq.n	8005966 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 fee9 	bl	800669e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058d6:	2b40      	cmp	r3, #64	; 0x40
 80058d8:	d141      	bne.n	800595e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	3308      	adds	r3, #8
 80058e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80058e8:	e853 3f00 	ldrex	r3, [r3]
 80058ec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80058f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80058f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058f8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	3308      	adds	r3, #8
 8005902:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005906:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800590a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800590e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005912:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005916:	e841 2300 	strex	r3, r2, [r1]
 800591a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800591e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d1d9      	bne.n	80058da <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800592a:	2b00      	cmp	r3, #0
 800592c:	d013      	beq.n	8005956 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005932:	4a14      	ldr	r2, [pc, #80]	; (8005984 <HAL_UART_IRQHandler+0x2b8>)
 8005934:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800593a:	4618      	mov	r0, r3
 800593c:	f7fb fea1 	bl	8001682 <HAL_DMA_Abort_IT>
 8005940:	4603      	mov	r3, r0
 8005942:	2b00      	cmp	r3, #0
 8005944:	d017      	beq.n	8005976 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	687a      	ldr	r2, [r7, #4]
 800594e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8005950:	4610      	mov	r0, r2
 8005952:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005954:	e00f      	b.n	8005976 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005956:	6878      	ldr	r0, [r7, #4]
 8005958:	f000 f9da 	bl	8005d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800595c:	e00b      	b.n	8005976 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f000 f9d6 	bl	8005d10 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005964:	e007      	b.n	8005976 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 f9d2 	bl	8005d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2200      	movs	r2, #0
 8005970:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005974:	e1b7      	b.n	8005ce6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005976:	bf00      	nop
    return;
 8005978:	e1b5      	b.n	8005ce6 <HAL_UART_IRQHandler+0x61a>
 800597a:	bf00      	nop
 800597c:	10000001 	.word	0x10000001
 8005980:	04000120 	.word	0x04000120
 8005984:	0800676b 	.word	0x0800676b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800598c:	2b01      	cmp	r3, #1
 800598e:	f040 814a 	bne.w	8005c26 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005992:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005996:	f003 0310 	and.w	r3, r3, #16
 800599a:	2b00      	cmp	r3, #0
 800599c:	f000 8143 	beq.w	8005c26 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80059a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80059a4:	f003 0310 	and.w	r3, r3, #16
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f000 813c 	beq.w	8005c26 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2210      	movs	r2, #16
 80059b4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059c0:	2b40      	cmp	r3, #64	; 0x40
 80059c2:	f040 80b5 	bne.w	8005b30 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80059d2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	f000 8187 	beq.w	8005cea <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80059e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059e6:	429a      	cmp	r2, r3
 80059e8:	f080 817f 	bcs.w	8005cea <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80059f2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f003 0320 	and.w	r3, r3, #32
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	f040 8086 	bne.w	8005b14 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005a1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005a20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005a32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005a36:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005a3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005a42:	e841 2300 	strex	r3, r2, [r1]
 8005a46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005a4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d1da      	bne.n	8005a08 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3308      	adds	r3, #8
 8005a58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a5c:	e853 3f00 	ldrex	r3, [r3]
 8005a60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a64:	f023 0301 	bic.w	r3, r3, #1
 8005a68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3308      	adds	r3, #8
 8005a72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005a76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005a7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005a7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005a82:	e841 2300 	strex	r3, r2, [r1]
 8005a86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005a88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d1e1      	bne.n	8005a52 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	3308      	adds	r3, #8
 8005a94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a98:	e853 3f00 	ldrex	r3, [r3]
 8005a9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005aa4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3308      	adds	r3, #8
 8005aae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005ab2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005ab4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005ab8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005aba:	e841 2300 	strex	r3, r2, [r1]
 8005abe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005ac0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d1e3      	bne.n	8005a8e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2220      	movs	r2, #32
 8005aca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005ae2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ae4:	f023 0310 	bic.w	r3, r3, #16
 8005ae8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	461a      	mov	r2, r3
 8005af2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005af6:	65bb      	str	r3, [r7, #88]	; 0x58
 8005af8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005afc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005b04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e4      	bne.n	8005ad4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7fb fd5b 	bl	80015ca <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b20:	b29b      	uxth	r3, r3
 8005b22:	1ad3      	subs	r3, r2, r3
 8005b24:	b29b      	uxth	r3, r3
 8005b26:	4619      	mov	r1, r3
 8005b28:	6878      	ldr	r0, [r7, #4]
 8005b2a:	f000 f8fb 	bl	8005d24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b2e:	e0dc      	b.n	8005cea <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	1ad3      	subs	r3, r2, r3
 8005b40:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 80ce 	beq.w	8005cee <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8005b52:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	f000 80c9 	beq.w	8005cee <HAL_UART_IRQHandler+0x622>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b64:	e853 3f00 	ldrex	r3, [r3]
 8005b68:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b70:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	461a      	mov	r2, r3
 8005b7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005b7e:	647b      	str	r3, [r7, #68]	; 0x44
 8005b80:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b82:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b84:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b86:	e841 2300 	strex	r3, r2, [r1]
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d1e4      	bne.n	8005b5c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	3308      	adds	r3, #8
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b9c:	e853 3f00 	ldrex	r3, [r3]
 8005ba0:	623b      	str	r3, [r7, #32]
   return(result);
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ba8:	f023 0301 	bic.w	r3, r3, #1
 8005bac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3308      	adds	r3, #8
 8005bb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005bba:	633a      	str	r2, [r7, #48]	; 0x30
 8005bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc2:	e841 2300 	strex	r3, r2, [r1]
 8005bc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d1e1      	bne.n	8005b92 <HAL_UART_IRQHandler+0x4c6>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2220      	movs	r2, #32
 8005bd2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2200      	movs	r2, #0
 8005be0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	e853 3f00 	ldrex	r3, [r3]
 8005bee:	60fb      	str	r3, [r7, #12]
   return(result);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f023 0310 	bic.w	r3, r3, #16
 8005bf6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	461a      	mov	r2, r3
 8005c00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c04:	61fb      	str	r3, [r7, #28]
 8005c06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c08:	69b9      	ldr	r1, [r7, #24]
 8005c0a:	69fa      	ldr	r2, [r7, #28]
 8005c0c:	e841 2300 	strex	r3, r2, [r1]
 8005c10:	617b      	str	r3, [r7, #20]
   return(result);
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d1e4      	bne.n	8005be2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f880 	bl	8005d24 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c24:	e063      	b.n	8005cee <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00e      	beq.n	8005c50 <HAL_UART_IRQHandler+0x584>
 8005c32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d008      	beq.n	8005c50 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fdcf 	bl	80067ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c4e:	e051      	b.n	8005cf4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d014      	beq.n	8005c86 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d105      	bne.n	8005c74 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d008      	beq.n	8005c86 <HAL_UART_IRQHandler+0x5ba>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d03a      	beq.n	8005cf2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	4798      	blx	r3
    }
    return;
 8005c84:	e035      	b.n	8005cf2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005c86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d009      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x5da>
 8005c92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 fd79 	bl	8006796 <UART_EndTransmit_IT>
    return;
 8005ca4:	e026      	b.n	8005cf4 <HAL_UART_IRQHandler+0x628>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005caa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d009      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x5fa>
 8005cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cb6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d003      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 fda8 	bl	8006814 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005cc4:	e016      	b.n	8005cf4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d010      	beq.n	8005cf4 <HAL_UART_IRQHandler+0x628>
 8005cd2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	da0c      	bge.n	8005cf4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f000 fd90 	bl	8006800 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005ce0:	e008      	b.n	8005cf4 <HAL_UART_IRQHandler+0x628>
      return;
 8005ce2:	bf00      	nop
 8005ce4:	e006      	b.n	8005cf4 <HAL_UART_IRQHandler+0x628>
    return;
 8005ce6:	bf00      	nop
 8005ce8:	e004      	b.n	8005cf4 <HAL_UART_IRQHandler+0x628>
      return;
 8005cea:	bf00      	nop
 8005cec:	e002      	b.n	8005cf4 <HAL_UART_IRQHandler+0x628>
      return;
 8005cee:	bf00      	nop
 8005cf0:	e000      	b.n	8005cf4 <HAL_UART_IRQHandler+0x628>
    return;
 8005cf2:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8005cf4:	37e8      	adds	r7, #232	; 0xe8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
 8005cfa:	bf00      	nop

08005cfc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d04:	bf00      	nop
 8005d06:	370c      	adds	r7, #12
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0e:	4770      	bx	lr

08005d10 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b083      	sub	sp, #12
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d18:	bf00      	nop
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d30:	bf00      	nop
 8005d32:	370c      	adds	r7, #12
 8005d34:	46bd      	mov	sp, r7
 8005d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3a:	4770      	bx	lr

08005d3c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d40:	b08c      	sub	sp, #48	; 0x30
 8005d42:	af00      	add	r7, sp, #0
 8005d44:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d46:	2300      	movs	r3, #0
 8005d48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d4c:	697b      	ldr	r3, [r7, #20]
 8005d4e:	689a      	ldr	r2, [r3, #8]
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	431a      	orrs	r2, r3
 8005d56:	697b      	ldr	r3, [r7, #20]
 8005d58:	695b      	ldr	r3, [r3, #20]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	69db      	ldr	r3, [r3, #28]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	4baa      	ldr	r3, [pc, #680]	; (8006014 <UART_SetConfig+0x2d8>)
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	697a      	ldr	r2, [r7, #20]
 8005d70:	6812      	ldr	r2, [r2, #0]
 8005d72:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005d74:	430b      	orrs	r3, r1
 8005d76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	68da      	ldr	r2, [r3, #12]
 8005d86:	697b      	ldr	r3, [r7, #20]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	430a      	orrs	r2, r1
 8005d8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	699b      	ldr	r3, [r3, #24]
 8005d92:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005d94:	697b      	ldr	r3, [r7, #20]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a9f      	ldr	r2, [pc, #636]	; (8006018 <UART_SetConfig+0x2dc>)
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d004      	beq.n	8005da8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	6a1b      	ldr	r3, [r3, #32]
 8005da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da4:	4313      	orrs	r3, r2
 8005da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8005db2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	6812      	ldr	r2, [r2, #0]
 8005dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005dbc:	430b      	orrs	r3, r1
 8005dbe:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc6:	f023 010f 	bic.w	r1, r3, #15
 8005dca:	697b      	ldr	r3, [r7, #20]
 8005dcc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a90      	ldr	r2, [pc, #576]	; (800601c <UART_SetConfig+0x2e0>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d125      	bne.n	8005e2c <UART_SetConfig+0xf0>
 8005de0:	4b8f      	ldr	r3, [pc, #572]	; (8006020 <UART_SetConfig+0x2e4>)
 8005de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de6:	f003 0303 	and.w	r3, r3, #3
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d81a      	bhi.n	8005e24 <UART_SetConfig+0xe8>
 8005dee:	a201      	add	r2, pc, #4	; (adr r2, 8005df4 <UART_SetConfig+0xb8>)
 8005df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005df4:	08005e05 	.word	0x08005e05
 8005df8:	08005e15 	.word	0x08005e15
 8005dfc:	08005e0d 	.word	0x08005e0d
 8005e00:	08005e1d 	.word	0x08005e1d
 8005e04:	2301      	movs	r3, #1
 8005e06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e0a:	e116      	b.n	800603a <UART_SetConfig+0x2fe>
 8005e0c:	2302      	movs	r3, #2
 8005e0e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e12:	e112      	b.n	800603a <UART_SetConfig+0x2fe>
 8005e14:	2304      	movs	r3, #4
 8005e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e1a:	e10e      	b.n	800603a <UART_SetConfig+0x2fe>
 8005e1c:	2308      	movs	r3, #8
 8005e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e22:	e10a      	b.n	800603a <UART_SetConfig+0x2fe>
 8005e24:	2310      	movs	r3, #16
 8005e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e2a:	e106      	b.n	800603a <UART_SetConfig+0x2fe>
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	4a7c      	ldr	r2, [pc, #496]	; (8006024 <UART_SetConfig+0x2e8>)
 8005e32:	4293      	cmp	r3, r2
 8005e34:	d138      	bne.n	8005ea8 <UART_SetConfig+0x16c>
 8005e36:	4b7a      	ldr	r3, [pc, #488]	; (8006020 <UART_SetConfig+0x2e4>)
 8005e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e3c:	f003 030c 	and.w	r3, r3, #12
 8005e40:	2b0c      	cmp	r3, #12
 8005e42:	d82d      	bhi.n	8005ea0 <UART_SetConfig+0x164>
 8005e44:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <UART_SetConfig+0x110>)
 8005e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4a:	bf00      	nop
 8005e4c:	08005e81 	.word	0x08005e81
 8005e50:	08005ea1 	.word	0x08005ea1
 8005e54:	08005ea1 	.word	0x08005ea1
 8005e58:	08005ea1 	.word	0x08005ea1
 8005e5c:	08005e91 	.word	0x08005e91
 8005e60:	08005ea1 	.word	0x08005ea1
 8005e64:	08005ea1 	.word	0x08005ea1
 8005e68:	08005ea1 	.word	0x08005ea1
 8005e6c:	08005e89 	.word	0x08005e89
 8005e70:	08005ea1 	.word	0x08005ea1
 8005e74:	08005ea1 	.word	0x08005ea1
 8005e78:	08005ea1 	.word	0x08005ea1
 8005e7c:	08005e99 	.word	0x08005e99
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e86:	e0d8      	b.n	800603a <UART_SetConfig+0x2fe>
 8005e88:	2302      	movs	r3, #2
 8005e8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e8e:	e0d4      	b.n	800603a <UART_SetConfig+0x2fe>
 8005e90:	2304      	movs	r3, #4
 8005e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e96:	e0d0      	b.n	800603a <UART_SetConfig+0x2fe>
 8005e98:	2308      	movs	r3, #8
 8005e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005e9e:	e0cc      	b.n	800603a <UART_SetConfig+0x2fe>
 8005ea0:	2310      	movs	r3, #16
 8005ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ea6:	e0c8      	b.n	800603a <UART_SetConfig+0x2fe>
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a5e      	ldr	r2, [pc, #376]	; (8006028 <UART_SetConfig+0x2ec>)
 8005eae:	4293      	cmp	r3, r2
 8005eb0:	d125      	bne.n	8005efe <UART_SetConfig+0x1c2>
 8005eb2:	4b5b      	ldr	r3, [pc, #364]	; (8006020 <UART_SetConfig+0x2e4>)
 8005eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eb8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005ebc:	2b30      	cmp	r3, #48	; 0x30
 8005ebe:	d016      	beq.n	8005eee <UART_SetConfig+0x1b2>
 8005ec0:	2b30      	cmp	r3, #48	; 0x30
 8005ec2:	d818      	bhi.n	8005ef6 <UART_SetConfig+0x1ba>
 8005ec4:	2b20      	cmp	r3, #32
 8005ec6:	d00a      	beq.n	8005ede <UART_SetConfig+0x1a2>
 8005ec8:	2b20      	cmp	r3, #32
 8005eca:	d814      	bhi.n	8005ef6 <UART_SetConfig+0x1ba>
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d002      	beq.n	8005ed6 <UART_SetConfig+0x19a>
 8005ed0:	2b10      	cmp	r3, #16
 8005ed2:	d008      	beq.n	8005ee6 <UART_SetConfig+0x1aa>
 8005ed4:	e00f      	b.n	8005ef6 <UART_SetConfig+0x1ba>
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005edc:	e0ad      	b.n	800603a <UART_SetConfig+0x2fe>
 8005ede:	2302      	movs	r3, #2
 8005ee0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ee4:	e0a9      	b.n	800603a <UART_SetConfig+0x2fe>
 8005ee6:	2304      	movs	r3, #4
 8005ee8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005eec:	e0a5      	b.n	800603a <UART_SetConfig+0x2fe>
 8005eee:	2308      	movs	r3, #8
 8005ef0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ef4:	e0a1      	b.n	800603a <UART_SetConfig+0x2fe>
 8005ef6:	2310      	movs	r3, #16
 8005ef8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005efc:	e09d      	b.n	800603a <UART_SetConfig+0x2fe>
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	4a4a      	ldr	r2, [pc, #296]	; (800602c <UART_SetConfig+0x2f0>)
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d125      	bne.n	8005f54 <UART_SetConfig+0x218>
 8005f08:	4b45      	ldr	r3, [pc, #276]	; (8006020 <UART_SetConfig+0x2e4>)
 8005f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f0e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005f12:	2bc0      	cmp	r3, #192	; 0xc0
 8005f14:	d016      	beq.n	8005f44 <UART_SetConfig+0x208>
 8005f16:	2bc0      	cmp	r3, #192	; 0xc0
 8005f18:	d818      	bhi.n	8005f4c <UART_SetConfig+0x210>
 8005f1a:	2b80      	cmp	r3, #128	; 0x80
 8005f1c:	d00a      	beq.n	8005f34 <UART_SetConfig+0x1f8>
 8005f1e:	2b80      	cmp	r3, #128	; 0x80
 8005f20:	d814      	bhi.n	8005f4c <UART_SetConfig+0x210>
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d002      	beq.n	8005f2c <UART_SetConfig+0x1f0>
 8005f26:	2b40      	cmp	r3, #64	; 0x40
 8005f28:	d008      	beq.n	8005f3c <UART_SetConfig+0x200>
 8005f2a:	e00f      	b.n	8005f4c <UART_SetConfig+0x210>
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f32:	e082      	b.n	800603a <UART_SetConfig+0x2fe>
 8005f34:	2302      	movs	r3, #2
 8005f36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f3a:	e07e      	b.n	800603a <UART_SetConfig+0x2fe>
 8005f3c:	2304      	movs	r3, #4
 8005f3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f42:	e07a      	b.n	800603a <UART_SetConfig+0x2fe>
 8005f44:	2308      	movs	r3, #8
 8005f46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f4a:	e076      	b.n	800603a <UART_SetConfig+0x2fe>
 8005f4c:	2310      	movs	r3, #16
 8005f4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f52:	e072      	b.n	800603a <UART_SetConfig+0x2fe>
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	4a35      	ldr	r2, [pc, #212]	; (8006030 <UART_SetConfig+0x2f4>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d12a      	bne.n	8005fb4 <UART_SetConfig+0x278>
 8005f5e:	4b30      	ldr	r3, [pc, #192]	; (8006020 <UART_SetConfig+0x2e4>)
 8005f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f6c:	d01a      	beq.n	8005fa4 <UART_SetConfig+0x268>
 8005f6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f72:	d81b      	bhi.n	8005fac <UART_SetConfig+0x270>
 8005f74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f78:	d00c      	beq.n	8005f94 <UART_SetConfig+0x258>
 8005f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f7e:	d815      	bhi.n	8005fac <UART_SetConfig+0x270>
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d003      	beq.n	8005f8c <UART_SetConfig+0x250>
 8005f84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f88:	d008      	beq.n	8005f9c <UART_SetConfig+0x260>
 8005f8a:	e00f      	b.n	8005fac <UART_SetConfig+0x270>
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f92:	e052      	b.n	800603a <UART_SetConfig+0x2fe>
 8005f94:	2302      	movs	r3, #2
 8005f96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005f9a:	e04e      	b.n	800603a <UART_SetConfig+0x2fe>
 8005f9c:	2304      	movs	r3, #4
 8005f9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fa2:	e04a      	b.n	800603a <UART_SetConfig+0x2fe>
 8005fa4:	2308      	movs	r3, #8
 8005fa6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005faa:	e046      	b.n	800603a <UART_SetConfig+0x2fe>
 8005fac:	2310      	movs	r3, #16
 8005fae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005fb2:	e042      	b.n	800603a <UART_SetConfig+0x2fe>
 8005fb4:	697b      	ldr	r3, [r7, #20]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a17      	ldr	r2, [pc, #92]	; (8006018 <UART_SetConfig+0x2dc>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d13a      	bne.n	8006034 <UART_SetConfig+0x2f8>
 8005fbe:	4b18      	ldr	r3, [pc, #96]	; (8006020 <UART_SetConfig+0x2e4>)
 8005fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005fc8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fcc:	d01a      	beq.n	8006004 <UART_SetConfig+0x2c8>
 8005fce:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005fd2:	d81b      	bhi.n	800600c <UART_SetConfig+0x2d0>
 8005fd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fd8:	d00c      	beq.n	8005ff4 <UART_SetConfig+0x2b8>
 8005fda:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fde:	d815      	bhi.n	800600c <UART_SetConfig+0x2d0>
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d003      	beq.n	8005fec <UART_SetConfig+0x2b0>
 8005fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe8:	d008      	beq.n	8005ffc <UART_SetConfig+0x2c0>
 8005fea:	e00f      	b.n	800600c <UART_SetConfig+0x2d0>
 8005fec:	2300      	movs	r3, #0
 8005fee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ff2:	e022      	b.n	800603a <UART_SetConfig+0x2fe>
 8005ff4:	2302      	movs	r3, #2
 8005ff6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8005ffa:	e01e      	b.n	800603a <UART_SetConfig+0x2fe>
 8005ffc:	2304      	movs	r3, #4
 8005ffe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006002:	e01a      	b.n	800603a <UART_SetConfig+0x2fe>
 8006004:	2308      	movs	r3, #8
 8006006:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800600a:	e016      	b.n	800603a <UART_SetConfig+0x2fe>
 800600c:	2310      	movs	r3, #16
 800600e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006012:	e012      	b.n	800603a <UART_SetConfig+0x2fe>
 8006014:	cfff69f3 	.word	0xcfff69f3
 8006018:	40008000 	.word	0x40008000
 800601c:	40013800 	.word	0x40013800
 8006020:	40021000 	.word	0x40021000
 8006024:	40004400 	.word	0x40004400
 8006028:	40004800 	.word	0x40004800
 800602c:	40004c00 	.word	0x40004c00
 8006030:	40005000 	.word	0x40005000
 8006034:	2310      	movs	r3, #16
 8006036:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4aae      	ldr	r2, [pc, #696]	; (80062f8 <UART_SetConfig+0x5bc>)
 8006040:	4293      	cmp	r3, r2
 8006042:	f040 8097 	bne.w	8006174 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006046:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800604a:	2b08      	cmp	r3, #8
 800604c:	d823      	bhi.n	8006096 <UART_SetConfig+0x35a>
 800604e:	a201      	add	r2, pc, #4	; (adr r2, 8006054 <UART_SetConfig+0x318>)
 8006050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006054:	08006079 	.word	0x08006079
 8006058:	08006097 	.word	0x08006097
 800605c:	08006081 	.word	0x08006081
 8006060:	08006097 	.word	0x08006097
 8006064:	08006087 	.word	0x08006087
 8006068:	08006097 	.word	0x08006097
 800606c:	08006097 	.word	0x08006097
 8006070:	08006097 	.word	0x08006097
 8006074:	0800608f 	.word	0x0800608f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006078:	f7fd feac 	bl	8003dd4 <HAL_RCC_GetPCLK1Freq>
 800607c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800607e:	e010      	b.n	80060a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006080:	4b9e      	ldr	r3, [pc, #632]	; (80062fc <UART_SetConfig+0x5c0>)
 8006082:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006084:	e00d      	b.n	80060a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006086:	f7fd fe0d 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 800608a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800608c:	e009      	b.n	80060a2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800608e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006092:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006094:	e005      	b.n	80060a2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006096:	2300      	movs	r3, #0
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800609a:	2301      	movs	r3, #1
 800609c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80060a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	f000 8130 	beq.w	800630a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ae:	4a94      	ldr	r2, [pc, #592]	; (8006300 <UART_SetConfig+0x5c4>)
 80060b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060b4:	461a      	mov	r2, r3
 80060b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80060bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	685a      	ldr	r2, [r3, #4]
 80060c2:	4613      	mov	r3, r2
 80060c4:	005b      	lsls	r3, r3, #1
 80060c6:	4413      	add	r3, r2
 80060c8:	69ba      	ldr	r2, [r7, #24]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d305      	bcc.n	80060da <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80060ce:	697b      	ldr	r3, [r7, #20]
 80060d0:	685b      	ldr	r3, [r3, #4]
 80060d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	429a      	cmp	r2, r3
 80060d8:	d903      	bls.n	80060e2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80060da:	2301      	movs	r3, #1
 80060dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80060e0:	e113      	b.n	800630a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80060e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e4:	2200      	movs	r2, #0
 80060e6:	60bb      	str	r3, [r7, #8]
 80060e8:	60fa      	str	r2, [r7, #12]
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ee:	4a84      	ldr	r2, [pc, #528]	; (8006300 <UART_SetConfig+0x5c4>)
 80060f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	2200      	movs	r2, #0
 80060f8:	603b      	str	r3, [r7, #0]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006100:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006104:	f7fa f8d4 	bl	80002b0 <__aeabi_uldivmod>
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	4610      	mov	r0, r2
 800610e:	4619      	mov	r1, r3
 8006110:	f04f 0200 	mov.w	r2, #0
 8006114:	f04f 0300 	mov.w	r3, #0
 8006118:	020b      	lsls	r3, r1, #8
 800611a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800611e:	0202      	lsls	r2, r0, #8
 8006120:	6979      	ldr	r1, [r7, #20]
 8006122:	6849      	ldr	r1, [r1, #4]
 8006124:	0849      	lsrs	r1, r1, #1
 8006126:	2000      	movs	r0, #0
 8006128:	460c      	mov	r4, r1
 800612a:	4605      	mov	r5, r0
 800612c:	eb12 0804 	adds.w	r8, r2, r4
 8006130:	eb43 0905 	adc.w	r9, r3, r5
 8006134:	697b      	ldr	r3, [r7, #20]
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	2200      	movs	r2, #0
 800613a:	469a      	mov	sl, r3
 800613c:	4693      	mov	fp, r2
 800613e:	4652      	mov	r2, sl
 8006140:	465b      	mov	r3, fp
 8006142:	4640      	mov	r0, r8
 8006144:	4649      	mov	r1, r9
 8006146:	f7fa f8b3 	bl	80002b0 <__aeabi_uldivmod>
 800614a:	4602      	mov	r2, r0
 800614c:	460b      	mov	r3, r1
 800614e:	4613      	mov	r3, r2
 8006150:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006152:	6a3b      	ldr	r3, [r7, #32]
 8006154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006158:	d308      	bcc.n	800616c <UART_SetConfig+0x430>
 800615a:	6a3b      	ldr	r3, [r7, #32]
 800615c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006160:	d204      	bcs.n	800616c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	6a3a      	ldr	r2, [r7, #32]
 8006168:	60da      	str	r2, [r3, #12]
 800616a:	e0ce      	b.n	800630a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800616c:	2301      	movs	r3, #1
 800616e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006172:	e0ca      	b.n	800630a <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800617c:	d166      	bne.n	800624c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800617e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006182:	2b08      	cmp	r3, #8
 8006184:	d827      	bhi.n	80061d6 <UART_SetConfig+0x49a>
 8006186:	a201      	add	r2, pc, #4	; (adr r2, 800618c <UART_SetConfig+0x450>)
 8006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800618c:	080061b1 	.word	0x080061b1
 8006190:	080061b9 	.word	0x080061b9
 8006194:	080061c1 	.word	0x080061c1
 8006198:	080061d7 	.word	0x080061d7
 800619c:	080061c7 	.word	0x080061c7
 80061a0:	080061d7 	.word	0x080061d7
 80061a4:	080061d7 	.word	0x080061d7
 80061a8:	080061d7 	.word	0x080061d7
 80061ac:	080061cf 	.word	0x080061cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061b0:	f7fd fe10 	bl	8003dd4 <HAL_RCC_GetPCLK1Freq>
 80061b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061b6:	e014      	b.n	80061e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061b8:	f7fd fe22 	bl	8003e00 <HAL_RCC_GetPCLK2Freq>
 80061bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061be:	e010      	b.n	80061e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061c0:	4b4e      	ldr	r3, [pc, #312]	; (80062fc <UART_SetConfig+0x5c0>)
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061c4:	e00d      	b.n	80061e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061c6:	f7fd fd6d 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 80061ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80061cc:	e009      	b.n	80061e2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80061d4:	e005      	b.n	80061e2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80061d6:	2300      	movs	r3, #0
 80061d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80061da:	2301      	movs	r3, #1
 80061dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80061e0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8090 	beq.w	800630a <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ee:	4a44      	ldr	r2, [pc, #272]	; (8006300 <UART_SetConfig+0x5c4>)
 80061f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80061f4:	461a      	mov	r2, r3
 80061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061fc:	005a      	lsls	r2, r3, #1
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	685b      	ldr	r3, [r3, #4]
 8006202:	085b      	lsrs	r3, r3, #1
 8006204:	441a      	add	r2, r3
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	fbb2 f3f3 	udiv	r3, r2, r3
 800620e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	2b0f      	cmp	r3, #15
 8006214:	d916      	bls.n	8006244 <UART_SetConfig+0x508>
 8006216:	6a3b      	ldr	r3, [r7, #32]
 8006218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800621c:	d212      	bcs.n	8006244 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800621e:	6a3b      	ldr	r3, [r7, #32]
 8006220:	b29b      	uxth	r3, r3
 8006222:	f023 030f 	bic.w	r3, r3, #15
 8006226:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	085b      	lsrs	r3, r3, #1
 800622c:	b29b      	uxth	r3, r3
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	b29a      	uxth	r2, r3
 8006234:	8bfb      	ldrh	r3, [r7, #30]
 8006236:	4313      	orrs	r3, r2
 8006238:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800623a:	697b      	ldr	r3, [r7, #20]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	8bfa      	ldrh	r2, [r7, #30]
 8006240:	60da      	str	r2, [r3, #12]
 8006242:	e062      	b.n	800630a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006244:	2301      	movs	r3, #1
 8006246:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800624a:	e05e      	b.n	800630a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800624c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006250:	2b08      	cmp	r3, #8
 8006252:	d828      	bhi.n	80062a6 <UART_SetConfig+0x56a>
 8006254:	a201      	add	r2, pc, #4	; (adr r2, 800625c <UART_SetConfig+0x520>)
 8006256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800625a:	bf00      	nop
 800625c:	08006281 	.word	0x08006281
 8006260:	08006289 	.word	0x08006289
 8006264:	08006291 	.word	0x08006291
 8006268:	080062a7 	.word	0x080062a7
 800626c:	08006297 	.word	0x08006297
 8006270:	080062a7 	.word	0x080062a7
 8006274:	080062a7 	.word	0x080062a7
 8006278:	080062a7 	.word	0x080062a7
 800627c:	0800629f 	.word	0x0800629f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006280:	f7fd fda8 	bl	8003dd4 <HAL_RCC_GetPCLK1Freq>
 8006284:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006286:	e014      	b.n	80062b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006288:	f7fd fdba 	bl	8003e00 <HAL_RCC_GetPCLK2Freq>
 800628c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800628e:	e010      	b.n	80062b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006290:	4b1a      	ldr	r3, [pc, #104]	; (80062fc <UART_SetConfig+0x5c0>)
 8006292:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006294:	e00d      	b.n	80062b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006296:	f7fd fd05 	bl	8003ca4 <HAL_RCC_GetSysClockFreq>
 800629a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800629c:	e009      	b.n	80062b2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800629e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80062a4:	e005      	b.n	80062b2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80062a6:	2300      	movs	r3, #0
 80062a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80062b0:	bf00      	nop
    }

    if (pclk != 0U)
 80062b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d028      	beq.n	800630a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062bc:	4a10      	ldr	r2, [pc, #64]	; (8006300 <UART_SetConfig+0x5c4>)
 80062be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80062c2:	461a      	mov	r2, r3
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	fbb3 f2f2 	udiv	r2, r3, r2
 80062ca:	697b      	ldr	r3, [r7, #20]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	085b      	lsrs	r3, r3, #1
 80062d0:	441a      	add	r2, r3
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062da:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	2b0f      	cmp	r3, #15
 80062e0:	d910      	bls.n	8006304 <UART_SetConfig+0x5c8>
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062e8:	d20c      	bcs.n	8006304 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80062ea:	6a3b      	ldr	r3, [r7, #32]
 80062ec:	b29a      	uxth	r2, r3
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	60da      	str	r2, [r3, #12]
 80062f4:	e009      	b.n	800630a <UART_SetConfig+0x5ce>
 80062f6:	bf00      	nop
 80062f8:	40008000 	.word	0x40008000
 80062fc:	00f42400 	.word	0x00f42400
 8006300:	08008dd4 	.word	0x08008dd4
      }
      else
      {
        ret = HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800630a:	697b      	ldr	r3, [r7, #20]
 800630c:	2201      	movs	r2, #1
 800630e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	2201      	movs	r2, #1
 8006316:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2200      	movs	r2, #0
 800631e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2200      	movs	r2, #0
 8006324:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006326:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800632a:	4618      	mov	r0, r3
 800632c:	3730      	adds	r7, #48	; 0x30
 800632e:	46bd      	mov	sp, r7
 8006330:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006334 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006334:	b480      	push	{r7}
 8006336:	b083      	sub	sp, #12
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006340:	f003 0301 	and.w	r3, r3, #1
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00a      	beq.n	800635e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006362:	f003 0302 	and.w	r3, r3, #2
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	430a      	orrs	r2, r1
 800637e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006384:	f003 0304 	and.w	r3, r3, #4
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00a      	beq.n	80063a2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	f003 0308 	and.w	r3, r3, #8
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d00a      	beq.n	80063c4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	685b      	ldr	r3, [r3, #4]
 80063b4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c8:	f003 0310 	and.w	r3, r3, #16
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d00a      	beq.n	80063e6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	430a      	orrs	r2, r1
 80063e4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ea:	f003 0320 	and.w	r3, r3, #32
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d00a      	beq.n	8006408 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800640c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d01a      	beq.n	800644a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	430a      	orrs	r2, r1
 8006428:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800642e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006432:	d10a      	bne.n	800644a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	430a      	orrs	r2, r1
 8006448:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800644e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00a      	beq.n	800646c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	685b      	ldr	r3, [r3, #4]
 800645c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	605a      	str	r2, [r3, #4]
  }
}
 800646c:	bf00      	nop
 800646e:	370c      	adds	r7, #12
 8006470:	46bd      	mov	sp, r7
 8006472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006476:	4770      	bx	lr

08006478 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006478:	b580      	push	{r7, lr}
 800647a:	b086      	sub	sp, #24
 800647c:	af02      	add	r7, sp, #8
 800647e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2200      	movs	r2, #0
 8006484:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006488:	f7fa f8fc 	bl	8000684 <HAL_GetTick>
 800648c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f003 0308 	and.w	r3, r3, #8
 8006498:	2b08      	cmp	r3, #8
 800649a:	d10e      	bne.n	80064ba <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800649c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064a0:	9300      	str	r3, [sp, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f82f 	bl	800650e <UART_WaitOnFlagUntilTimeout>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d001      	beq.n	80064ba <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e025      	b.n	8006506 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f003 0304 	and.w	r3, r3, #4
 80064c4:	2b04      	cmp	r3, #4
 80064c6:	d10e      	bne.n	80064e6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064c8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80064cc:	9300      	str	r3, [sp, #0]
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 f819 	bl	800650e <UART_WaitOnFlagUntilTimeout>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064e2:	2303      	movs	r3, #3
 80064e4:	e00f      	b.n	8006506 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2220      	movs	r2, #32
 80064f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	2200      	movs	r2, #0
 80064fa:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3710      	adds	r7, #16
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b09c      	sub	sp, #112	; 0x70
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	60b9      	str	r1, [r7, #8]
 8006518:	603b      	str	r3, [r7, #0]
 800651a:	4613      	mov	r3, r2
 800651c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800651e:	e0a9      	b.n	8006674 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006520:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006526:	f000 80a5 	beq.w	8006674 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800652a:	f7fa f8ab 	bl	8000684 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006536:	429a      	cmp	r2, r3
 8006538:	d302      	bcc.n	8006540 <UART_WaitOnFlagUntilTimeout+0x32>
 800653a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800653c:	2b00      	cmp	r3, #0
 800653e:	d140      	bne.n	80065c2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006546:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006548:	e853 3f00 	ldrex	r3, [r3]
 800654c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800654e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006550:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006554:	667b      	str	r3, [r7, #100]	; 0x64
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	461a      	mov	r2, r3
 800655c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800655e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006560:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006562:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006564:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006566:	e841 2300 	strex	r3, r2, [r1]
 800656a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800656c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800656e:	2b00      	cmp	r3, #0
 8006570:	d1e6      	bne.n	8006540 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	3308      	adds	r3, #8
 8006578:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800657a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800657c:	e853 3f00 	ldrex	r3, [r3]
 8006580:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006584:	f023 0301 	bic.w	r3, r3, #1
 8006588:	663b      	str	r3, [r7, #96]	; 0x60
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	3308      	adds	r3, #8
 8006590:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006592:	64ba      	str	r2, [r7, #72]	; 0x48
 8006594:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006596:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006598:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800659a:	e841 2300 	strex	r3, r2, [r1]
 800659e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80065a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d1e5      	bne.n	8006572 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2220      	movs	r2, #32
 80065aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e069      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d051      	beq.n	8006674 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69db      	ldr	r3, [r3, #28]
 80065d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80065da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065de:	d149      	bne.n	8006674 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065e8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f2:	e853 3f00 	ldrex	r3, [r3]
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80065fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	461a      	mov	r2, r3
 8006606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006608:	637b      	str	r3, [r7, #52]	; 0x34
 800660a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800660c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800660e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006610:	e841 2300 	strex	r3, r2, [r1]
 8006614:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1e6      	bne.n	80065ea <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	3308      	adds	r3, #8
 8006622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	e853 3f00 	ldrex	r3, [r3]
 800662a:	613b      	str	r3, [r7, #16]
   return(result);
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	f023 0301 	bic.w	r3, r3, #1
 8006632:	66bb      	str	r3, [r7, #104]	; 0x68
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	3308      	adds	r3, #8
 800663a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800663c:	623a      	str	r2, [r7, #32]
 800663e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006640:	69f9      	ldr	r1, [r7, #28]
 8006642:	6a3a      	ldr	r2, [r7, #32]
 8006644:	e841 2300 	strex	r3, r2, [r1]
 8006648:	61bb      	str	r3, [r7, #24]
   return(result);
 800664a:	69bb      	ldr	r3, [r7, #24]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d1e5      	bne.n	800661c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2220      	movs	r2, #32
 8006654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2220      	movs	r2, #32
 800665c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2220      	movs	r2, #32
 8006664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006670:	2303      	movs	r3, #3
 8006672:	e010      	b.n	8006696 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	69da      	ldr	r2, [r3, #28]
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	4013      	ands	r3, r2
 800667e:	68ba      	ldr	r2, [r7, #8]
 8006680:	429a      	cmp	r2, r3
 8006682:	bf0c      	ite	eq
 8006684:	2301      	moveq	r3, #1
 8006686:	2300      	movne	r3, #0
 8006688:	b2db      	uxtb	r3, r3
 800668a:	461a      	mov	r2, r3
 800668c:	79fb      	ldrb	r3, [r7, #7]
 800668e:	429a      	cmp	r2, r3
 8006690:	f43f af46 	beq.w	8006520 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006694:	2300      	movs	r3, #0
}
 8006696:	4618      	mov	r0, r3
 8006698:	3770      	adds	r7, #112	; 0x70
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800669e:	b480      	push	{r7}
 80066a0:	b095      	sub	sp, #84	; 0x54
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ae:	e853 3f00 	ldrex	r3, [r3]
 80066b2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80066b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80066ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	461a      	mov	r2, r3
 80066c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80066c4:	643b      	str	r3, [r7, #64]	; 0x40
 80066c6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066c8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80066ca:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80066cc:	e841 2300 	strex	r3, r2, [r1]
 80066d0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80066d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d1e6      	bne.n	80066a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	3308      	adds	r3, #8
 80066de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	e853 3f00 	ldrex	r3, [r3]
 80066e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80066e8:	69fb      	ldr	r3, [r7, #28]
 80066ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066ee:	f023 0301 	bic.w	r3, r3, #1
 80066f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	3308      	adds	r3, #8
 80066fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006700:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006702:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006704:	e841 2300 	strex	r3, r2, [r1]
 8006708:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800670a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	d1e3      	bne.n	80066d8 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006714:	2b01      	cmp	r3, #1
 8006716:	d118      	bne.n	800674a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	e853 3f00 	ldrex	r3, [r3]
 8006724:	60bb      	str	r3, [r7, #8]
   return(result);
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	f023 0310 	bic.w	r3, r3, #16
 800672c:	647b      	str	r3, [r7, #68]	; 0x44
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	461a      	mov	r2, r3
 8006734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006736:	61bb      	str	r3, [r7, #24]
 8006738:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673a:	6979      	ldr	r1, [r7, #20]
 800673c:	69ba      	ldr	r2, [r7, #24]
 800673e:	e841 2300 	strex	r3, r2, [r1]
 8006742:	613b      	str	r3, [r7, #16]
   return(result);
 8006744:	693b      	ldr	r3, [r7, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1e6      	bne.n	8006718 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2220      	movs	r2, #32
 800674e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2200      	movs	r2, #0
 8006756:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	671a      	str	r2, [r3, #112]	; 0x70
}
 800675e:	bf00      	nop
 8006760:	3754      	adds	r7, #84	; 0x54
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800676a:	b580      	push	{r7, lr}
 800676c:	b084      	sub	sp, #16
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006776:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2200      	movs	r2, #0
 800677c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006788:	68f8      	ldr	r0, [r7, #12]
 800678a:	f7ff fac1 	bl	8005d10 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800678e:	bf00      	nop
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b088      	sub	sp, #32
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	e853 3f00 	ldrex	r3, [r3]
 80067aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80067ac:	68bb      	ldr	r3, [r7, #8]
 80067ae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80067b2:	61fb      	str	r3, [r7, #28]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	461a      	mov	r2, r3
 80067ba:	69fb      	ldr	r3, [r7, #28]
 80067bc:	61bb      	str	r3, [r7, #24]
 80067be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067c0:	6979      	ldr	r1, [r7, #20]
 80067c2:	69ba      	ldr	r2, [r7, #24]
 80067c4:	e841 2300 	strex	r3, r2, [r1]
 80067c8:	613b      	str	r3, [r7, #16]
   return(result);
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1e6      	bne.n	800679e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2220      	movs	r2, #32
 80067d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	f7ff fa8c 	bl	8005cfc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80067e4:	bf00      	nop
 80067e6:	3720      	adds	r7, #32
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80067ec:	b480      	push	{r7}
 80067ee:	b083      	sub	sp, #12
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80067f4:	bf00      	nop
 80067f6:	370c      	adds	r7, #12
 80067f8:	46bd      	mov	sp, r7
 80067fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fe:	4770      	bx	lr

08006800 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8006800:	b480      	push	{r7}
 8006802:	b083      	sub	sp, #12
 8006804:	af00      	add	r7, sp, #0
 8006806:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800681c:	bf00      	nop
 800681e:	370c      	adds	r7, #12
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006828:	b480      	push	{r7}
 800682a:	b085      	sub	sp, #20
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006836:	2b01      	cmp	r3, #1
 8006838:	d101      	bne.n	800683e <HAL_UARTEx_DisableFifoMode+0x16>
 800683a:	2302      	movs	r3, #2
 800683c:	e027      	b.n	800688e <HAL_UARTEx_DisableFifoMode+0x66>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2224      	movs	r2, #36	; 0x24
 800684a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	681a      	ldr	r2, [r3, #0]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	f022 0201 	bic.w	r2, r2, #1
 8006864:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800686c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	68fa      	ldr	r2, [r7, #12]
 800687a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2220      	movs	r2, #32
 8006880:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800688c:	2300      	movs	r3, #0
}
 800688e:	4618      	mov	r0, r3
 8006890:	3714      	adds	r7, #20
 8006892:	46bd      	mov	sp, r7
 8006894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006898:	4770      	bx	lr

0800689a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800689a:	b580      	push	{r7, lr}
 800689c:	b084      	sub	sp, #16
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
 80068a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80068aa:	2b01      	cmp	r3, #1
 80068ac:	d101      	bne.n	80068b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80068ae:	2302      	movs	r3, #2
 80068b0:	e02d      	b.n	800690e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	2224      	movs	r2, #36	; 0x24
 80068be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	681a      	ldr	r2, [r3, #0]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f022 0201 	bic.w	r2, r2, #1
 80068d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	430a      	orrs	r2, r1
 80068ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 f850 	bl	8006994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2220      	movs	r2, #32
 8006900:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	2200      	movs	r2, #0
 8006908:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800690c:	2300      	movs	r3, #0
}
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b084      	sub	sp, #16
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8006926:	2b01      	cmp	r3, #1
 8006928:	d101      	bne.n	800692e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800692a:	2302      	movs	r3, #2
 800692c:	e02d      	b.n	800698a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2201      	movs	r2, #1
 8006932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	2224      	movs	r2, #36	; 0x24
 800693a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0201 	bic.w	r2, r2, #1
 8006954:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	683a      	ldr	r2, [r7, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800696a:	6878      	ldr	r0, [r7, #4]
 800696c:	f000 f812 	bl	8006994 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	68fa      	ldr	r2, [r7, #12]
 8006976:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	2220      	movs	r2, #32
 800697c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2200      	movs	r2, #0
 8006984:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3710      	adds	r7, #16
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
	...

08006994 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d108      	bne.n	80069b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80069b4:	e031      	b.n	8006a1a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80069b6:	2308      	movs	r3, #8
 80069b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80069ba:	2308      	movs	r3, #8
 80069bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	689b      	ldr	r3, [r3, #8]
 80069c4:	0e5b      	lsrs	r3, r3, #25
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	f003 0307 	and.w	r3, r3, #7
 80069cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	689b      	ldr	r3, [r3, #8]
 80069d4:	0f5b      	lsrs	r3, r3, #29
 80069d6:	b2db      	uxtb	r3, r3
 80069d8:	f003 0307 	and.w	r3, r3, #7
 80069dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069de:	7bbb      	ldrb	r3, [r7, #14]
 80069e0:	7b3a      	ldrb	r2, [r7, #12]
 80069e2:	4911      	ldr	r1, [pc, #68]	; (8006a28 <UARTEx_SetNbDataToProcess+0x94>)
 80069e4:	5c8a      	ldrb	r2, [r1, r2]
 80069e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80069ea:	7b3a      	ldrb	r2, [r7, #12]
 80069ec:	490f      	ldr	r1, [pc, #60]	; (8006a2c <UARTEx_SetNbDataToProcess+0x98>)
 80069ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80069f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80069fc:	7bfb      	ldrb	r3, [r7, #15]
 80069fe:	7b7a      	ldrb	r2, [r7, #13]
 8006a00:	4909      	ldr	r1, [pc, #36]	; (8006a28 <UARTEx_SetNbDataToProcess+0x94>)
 8006a02:	5c8a      	ldrb	r2, [r1, r2]
 8006a04:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006a08:	7b7a      	ldrb	r2, [r7, #13]
 8006a0a:	4908      	ldr	r1, [pc, #32]	; (8006a2c <UARTEx_SetNbDataToProcess+0x98>)
 8006a0c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006a0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006a12:	b29a      	uxth	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006a1a:	bf00      	nop
 8006a1c:	3714      	adds	r7, #20
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	08008dec 	.word	0x08008dec
 8006a2c:	08008df4 	.word	0x08008df4

08006a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006a36:	f7f9 fdbd 	bl	80005b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006a3a:	f000 fa4d 	bl	8006ed8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8006a3e:	f000 fc61 	bl	8007304 <MX_GPIO_Init>
  MX_DMA_Init();
 8006a42:	f000 fc25 	bl	8007290 <MX_DMA_Init>
  MX_DAC1_Init();
 8006a46:	f000 fa99 	bl	8006f7c <MX_DAC1_Init>
  MX_TIM2_Init();
 8006a4a:	f000 fb87 	bl	800715c <MX_TIM2_Init>
  MX_DFSDM1_Init();
 8006a4e:	f000 fac9 	bl	8006fe4 <MX_DFSDM1_Init>
  MX_OCTOSPI1_Init();
 8006a52:	f000 fb2d 	bl	80070b0 <MX_OCTOSPI1_Init>
  MX_USART1_UART_Init();
 8006a56:	f000 fbcf 	bl	80071f8 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  BSP_QSPI_Init();
 8006a5a:	f000 fdcb 	bl	80075f4 <BSP_QSPI_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 8006a5e:	4894      	ldr	r0, [pc, #592]	; (8006cb0 <main+0x280>)
 8006a60:	f7fe f814 	bl	8004a8c <HAL_TIM_Base_Start_IT>

  HAL_UART_Transmit(&huart1, clearCommand, sizeof(clearCommand), 100);
 8006a64:	2364      	movs	r3, #100	; 0x64
 8006a66:	2264      	movs	r2, #100	; 0x64
 8006a68:	4992      	ldr	r1, [pc, #584]	; (8006cb4 <main+0x284>)
 8006a6a:	4893      	ldr	r0, [pc, #588]	; (8006cb8 <main+0x288>)
 8006a6c:	f7fe fcc2 	bl	80053f4 <HAL_UART_Transmit>
  // Send start message of the game
  sprintf(msg_buffer,startMessage);
 8006a70:	4992      	ldr	r1, [pc, #584]	; (8006cbc <main+0x28c>)
 8006a72:	4893      	ldr	r0, [pc, #588]	; (8006cc0 <main+0x290>)
 8006a74:	f001 fd34 	bl	80084e0 <siprintf>
  HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006a78:	4891      	ldr	r0, [pc, #580]	; (8006cc0 <main+0x290>)
 8006a7a:	f7f9 fbc1 	bl	8000200 <strlen>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	2364      	movs	r3, #100	; 0x64
 8006a84:	498e      	ldr	r1, [pc, #568]	; (8006cc0 <main+0x290>)
 8006a86:	488c      	ldr	r0, [pc, #560]	; (8006cb8 <main+0x288>)
 8006a88:	f7fe fcb4 	bl	80053f4 <HAL_UART_Transmit>

  //Choose the game mode
  //wait until user enters if they played before - polling manner (for this rendition)
  while(rxdata[0] == '\000')
 8006a8c:	e005      	b.n	8006a9a <main+0x6a>
	  HAL_UART_Receive(&huart1, rxdata, sizeof(rxdata), 100);
 8006a8e:	2364      	movs	r3, #100	; 0x64
 8006a90:	221e      	movs	r2, #30
 8006a92:	498c      	ldr	r1, [pc, #560]	; (8006cc4 <main+0x294>)
 8006a94:	4888      	ldr	r0, [pc, #544]	; (8006cb8 <main+0x288>)
 8006a96:	f7fe fd44 	bl	8005522 <HAL_UART_Receive>
  while(rxdata[0] == '\000')
 8006a9a:	4b8a      	ldr	r3, [pc, #552]	; (8006cc4 <main+0x294>)
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d0f5      	beq.n	8006a8e <main+0x5e>

  if (rxdata[0] == '0'){
 8006aa2:	4b88      	ldr	r3, [pc, #544]	; (8006cc4 <main+0x294>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	2b30      	cmp	r3, #48	; 0x30
 8006aa8:	d116      	bne.n	8006ad8 <main+0xa8>
	 sprintf(msg_buffer,eraserMessage);
 8006aaa:	4987      	ldr	r1, [pc, #540]	; (8006cc8 <main+0x298>)
 8006aac:	4884      	ldr	r0, [pc, #528]	; (8006cc0 <main+0x290>)
 8006aae:	f001 fd17 	bl	80084e0 <siprintf>
	 HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006ab2:	4883      	ldr	r0, [pc, #524]	; (8006cc0 <main+0x290>)
 8006ab4:	f7f9 fba4 	bl	8000200 <strlen>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	2364      	movs	r3, #100	; 0x64
 8006abe:	4980      	ldr	r1, [pc, #512]	; (8006cc0 <main+0x290>)
 8006ac0:	487d      	ldr	r0, [pc, #500]	; (8006cb8 <main+0x288>)
 8006ac2:	f7fe fc97 	bl	80053f4 <HAL_UART_Transmit>
 	 recorder = 1;
 8006ac6:	4b81      	ldr	r3, [pc, #516]	; (8006ccc <main+0x29c>)
 8006ac8:	2201      	movs	r2, #1
 8006aca:	701a      	strb	r2, [r3, #0]
 	 player = 0;
 8006acc:	4b80      	ldr	r3, [pc, #512]	; (8006cd0 <main+0x2a0>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	701a      	strb	r2, [r3, #0]
 	 rxdata[0] ='\000';
 8006ad2:	4b7c      	ldr	r3, [pc, #496]	; (8006cc4 <main+0x294>)
 8006ad4:	2200      	movs	r2, #0
 8006ad6:	701a      	strb	r2, [r3, #0]
   }
  if (rxdata[0] == '1'){
 8006ad8:	4b7a      	ldr	r3, [pc, #488]	; (8006cc4 <main+0x294>)
 8006ada:	781b      	ldrb	r3, [r3, #0]
 8006adc:	2b31      	cmp	r3, #49	; 0x31
 8006ade:	d116      	bne.n	8006b0e <main+0xde>
	 sprintf(msg_buffer,playerMessage);
 8006ae0:	497c      	ldr	r1, [pc, #496]	; (8006cd4 <main+0x2a4>)
 8006ae2:	4877      	ldr	r0, [pc, #476]	; (8006cc0 <main+0x290>)
 8006ae4:	f001 fcfc 	bl	80084e0 <siprintf>
	 HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006ae8:	4875      	ldr	r0, [pc, #468]	; (8006cc0 <main+0x290>)
 8006aea:	f7f9 fb89 	bl	8000200 <strlen>
 8006aee:	4603      	mov	r3, r0
 8006af0:	b29a      	uxth	r2, r3
 8006af2:	2364      	movs	r3, #100	; 0x64
 8006af4:	4972      	ldr	r1, [pc, #456]	; (8006cc0 <main+0x290>)
 8006af6:	4870      	ldr	r0, [pc, #448]	; (8006cb8 <main+0x288>)
 8006af8:	f7fe fc7c 	bl	80053f4 <HAL_UART_Transmit>
 	 recorder = 0;
 8006afc:	4b73      	ldr	r3, [pc, #460]	; (8006ccc <main+0x29c>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	701a      	strb	r2, [r3, #0]
 	 player = 1;
 8006b02:	4b73      	ldr	r3, [pc, #460]	; (8006cd0 <main+0x2a0>)
 8006b04:	2201      	movs	r2, #1
 8006b06:	701a      	strb	r2, [r3, #0]
 	 rxdata[0] ='\000';
 8006b08:	4b6e      	ldr	r3, [pc, #440]	; (8006cc4 <main+0x294>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	701a      	strb	r2, [r3, #0]
   }

  if(recorder) {
 8006b0e:	4b6f      	ldr	r3, [pc, #444]	; (8006ccc <main+0x29c>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d039      	beq.n	8006b8a <main+0x15a>
 		  	Error_Handler();
 		  addr = 0x010000*i;
 	  }*/


	  while(sequence_user[0] == '\000')
 8006b16:	e005      	b.n	8006b24 <main+0xf4>
		  HAL_UART_Receive(&huart1, sequence_user, sizeof(sequence_user), 100);
 8006b18:	2364      	movs	r3, #100	; 0x64
 8006b1a:	2205      	movs	r2, #5
 8006b1c:	496e      	ldr	r1, [pc, #440]	; (8006cd8 <main+0x2a8>)
 8006b1e:	4866      	ldr	r0, [pc, #408]	; (8006cb8 <main+0x288>)
 8006b20:	f7fe fcff 	bl	8005522 <HAL_UART_Receive>
	  while(sequence_user[0] == '\000')
 8006b24:	4b6c      	ldr	r3, [pc, #432]	; (8006cd8 <main+0x2a8>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d0f5      	beq.n	8006b18 <main+0xe8>

	  for (int i = 0; i < (sizeof(sequence_user)/sizeof(sequence_user[0])); i++){
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]
 8006b30:	e00c      	b.n	8006b4c <main+0x11c>

	  int_converter[i] = sequence_user[i] - '0';
 8006b32:	4a69      	ldr	r2, [pc, #420]	; (8006cd8 <main+0x2a8>)
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	4413      	add	r3, r2
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8006b3e:	4967      	ldr	r1, [pc, #412]	; (8006cdc <main+0x2ac>)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	  for (int i = 0; i < (sizeof(sequence_user)/sizeof(sequence_user[0])); i++){
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	3301      	adds	r3, #1
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	2b04      	cmp	r3, #4
 8006b50:	d9ef      	bls.n	8006b32 <main+0x102>

	  }

	//  seq = int_converter;
	 // charseq = sequence_user;
 	  sprintf(msg_buffer,recorderMessage);
 8006b52:	4963      	ldr	r1, [pc, #396]	; (8006ce0 <main+0x2b0>)
 8006b54:	485a      	ldr	r0, [pc, #360]	; (8006cc0 <main+0x290>)
 8006b56:	f001 fcc3 	bl	80084e0 <siprintf>
 	  HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006b5a:	4859      	ldr	r0, [pc, #356]	; (8006cc0 <main+0x290>)
 8006b5c:	f7f9 fb50 	bl	8000200 <strlen>
 8006b60:	4603      	mov	r3, r0
 8006b62:	b29a      	uxth	r2, r3
 8006b64:	2364      	movs	r3, #100	; 0x64
 8006b66:	4956      	ldr	r1, [pc, #344]	; (8006cc0 <main+0x290>)
 8006b68:	4853      	ldr	r0, [pc, #332]	; (8006cb8 <main+0x288>)
 8006b6a:	f7fe fc43 	bl	80053f4 <HAL_UART_Transmit>

 	  while(recorder_wait);
 8006b6e:	bf00      	nop
 8006b70:	4b5c      	ldr	r3, [pc, #368]	; (8006ce4 <main+0x2b4>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d1fb      	bne.n	8006b70 <main+0x140>
 	  HAL_UART_Transmit(&huart1, clearCommand, sizeof(clearCommand), 100);
 8006b78:	2364      	movs	r3, #100	; 0x64
 8006b7a:	2264      	movs	r2, #100	; 0x64
 8006b7c:	494d      	ldr	r1, [pc, #308]	; (8006cb4 <main+0x284>)
 8006b7e:	484e      	ldr	r0, [pc, #312]	; (8006cb8 <main+0x288>)
 8006b80:	f7fe fc38 	bl	80053f4 <HAL_UART_Transmit>
 	  rxdata[0] = '\000';
 8006b84:	4b4f      	ldr	r3, [pc, #316]	; (8006cc4 <main+0x294>)
 8006b86:	2200      	movs	r2, #0
 8006b88:	701a      	strb	r2, [r3, #0]
 	 	// HAL_UART_Receive(&huart1, rxdata, sizeof(rxdata), 100);
   }



  sprintf(msg_buffer,chooseModeMessage);
 8006b8a:	4957      	ldr	r1, [pc, #348]	; (8006ce8 <main+0x2b8>)
 8006b8c:	484c      	ldr	r0, [pc, #304]	; (8006cc0 <main+0x290>)
 8006b8e:	f001 fca7 	bl	80084e0 <siprintf>
  HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006b92:	484b      	ldr	r0, [pc, #300]	; (8006cc0 <main+0x290>)
 8006b94:	f7f9 fb34 	bl	8000200 <strlen>
 8006b98:	4603      	mov	r3, r0
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	2364      	movs	r3, #100	; 0x64
 8006b9e:	4948      	ldr	r1, [pc, #288]	; (8006cc0 <main+0x290>)
 8006ba0:	4845      	ldr	r0, [pc, #276]	; (8006cb8 <main+0x288>)
 8006ba2:	f7fe fc27 	bl	80053f4 <HAL_UART_Transmit>
  while(rxdata[0] == '\000')
 8006ba6:	e005      	b.n	8006bb4 <main+0x184>
 	  HAL_UART_Receive(&huart1, rxdata, sizeof(rxdata), 100);
 8006ba8:	2364      	movs	r3, #100	; 0x64
 8006baa:	221e      	movs	r2, #30
 8006bac:	4945      	ldr	r1, [pc, #276]	; (8006cc4 <main+0x294>)
 8006bae:	4842      	ldr	r0, [pc, #264]	; (8006cb8 <main+0x288>)
 8006bb0:	f7fe fcb7 	bl	8005522 <HAL_UART_Receive>
  while(rxdata[0] == '\000')
 8006bb4:	4b43      	ldr	r3, [pc, #268]	; (8006cc4 <main+0x294>)
 8006bb6:	781b      	ldrb	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d0f5      	beq.n	8006ba8 <main+0x178>

  //Print starting message of memory game
  if (rxdata[0] == '0'){
 8006bbc:	4b41      	ldr	r3, [pc, #260]	; (8006cc4 <main+0x294>)
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	2b30      	cmp	r3, #48	; 0x30
 8006bc2:	d113      	bne.n	8006bec <main+0x1bc>
	 HAL_UART_Transmit(&huart1, clearCommand, sizeof(clearCommand), 100);
 8006bc4:	2364      	movs	r3, #100	; 0x64
 8006bc6:	2264      	movs	r2, #100	; 0x64
 8006bc8:	493a      	ldr	r1, [pc, #232]	; (8006cb4 <main+0x284>)
 8006bca:	483b      	ldr	r0, [pc, #236]	; (8006cb8 <main+0x288>)
 8006bcc:	f7fe fc12 	bl	80053f4 <HAL_UART_Transmit>

	 sprintf(msg_buffer,gameChosenMessage[0]);
 8006bd0:	4946      	ldr	r1, [pc, #280]	; (8006cec <main+0x2bc>)
 8006bd2:	483b      	ldr	r0, [pc, #236]	; (8006cc0 <main+0x290>)
 8006bd4:	f001 fc84 	bl	80084e0 <siprintf>
	 HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006bd8:	4839      	ldr	r0, [pc, #228]	; (8006cc0 <main+0x290>)
 8006bda:	f7f9 fb11 	bl	8000200 <strlen>
 8006bde:	4603      	mov	r3, r0
 8006be0:	b29a      	uxth	r2, r3
 8006be2:	2364      	movs	r3, #100	; 0x64
 8006be4:	4936      	ldr	r1, [pc, #216]	; (8006cc0 <main+0x290>)
 8006be6:	4834      	ldr	r0, [pc, #208]	; (8006cb8 <main+0x288>)
 8006be8:	f7fe fc04 	bl	80053f4 <HAL_UART_Transmit>
  }
  //Print starting message of direction game
  if (rxdata[0] == '1'){
 8006bec:	4b35      	ldr	r3, [pc, #212]	; (8006cc4 <main+0x294>)
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	2b31      	cmp	r3, #49	; 0x31
 8006bf2:	d113      	bne.n	8006c1c <main+0x1ec>
	 HAL_UART_Transmit(&huart1, clearCommand, sizeof(clearCommand), 100);
 8006bf4:	2364      	movs	r3, #100	; 0x64
 8006bf6:	2264      	movs	r2, #100	; 0x64
 8006bf8:	492e      	ldr	r1, [pc, #184]	; (8006cb4 <main+0x284>)
 8006bfa:	482f      	ldr	r0, [pc, #188]	; (8006cb8 <main+0x288>)
 8006bfc:	f7fe fbfa 	bl	80053f4 <HAL_UART_Transmit>

	 sprintf(msg_buffer,gameChosenMessage[1]);
 8006c00:	493b      	ldr	r1, [pc, #236]	; (8006cf0 <main+0x2c0>)
 8006c02:	482f      	ldr	r0, [pc, #188]	; (8006cc0 <main+0x290>)
 8006c04:	f001 fc6c 	bl	80084e0 <siprintf>
	 HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006c08:	482d      	ldr	r0, [pc, #180]	; (8006cc0 <main+0x290>)
 8006c0a:	f7f9 faf9 	bl	8000200 <strlen>
 8006c0e:	4603      	mov	r3, r0
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	2364      	movs	r3, #100	; 0x64
 8006c14:	492a      	ldr	r1, [pc, #168]	; (8006cc0 <main+0x290>)
 8006c16:	4828      	ldr	r0, [pc, #160]	; (8006cb8 <main+0x288>)
 8006c18:	f7fe fbec 	bl	80053f4 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(digitLevelSelector == 0){
 8006c1c:	4b35      	ldr	r3, [pc, #212]	; (8006cf4 <main+0x2c4>)
 8006c1e:	781b      	ldrb	r3, [r3, #0]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f040 80b4 	bne.w	8006d8e <main+0x35e>
		  if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  address[seq[0]], sizeof(SEQUENCE)) != QSPI_OK)
 8006c26:	4b34      	ldr	r3, [pc, #208]	; (8006cf8 <main+0x2c8>)
 8006c28:	781b      	ldrb	r3, [r3, #0]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	4b33      	ldr	r3, [pc, #204]	; (8006cfc <main+0x2cc>)
 8006c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c32:	4a33      	ldr	r2, [pc, #204]	; (8006d00 <main+0x2d0>)
 8006c34:	4619      	mov	r1, r3
 8006c36:	4833      	ldr	r0, [pc, #204]	; (8006d04 <main+0x2d4>)
 8006c38:	f000 fd5a 	bl	80076f0 <BSP_QSPI_Read>
 8006c3c:	4603      	mov	r3, r0
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d001      	beq.n	8006c46 <main+0x216>
					Error_Handler();
 8006c42:	f000 fcc3 	bl	80075cc <Error_Handler>
		  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 8006c46:	2300      	movs	r3, #0
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006c4e:	4a2d      	ldr	r2, [pc, #180]	; (8006d04 <main+0x2d4>)
 8006c50:	2100      	movs	r1, #0
 8006c52:	482d      	ldr	r0, [pc, #180]	; (8006d08 <main+0x2d8>)
 8006c54:	f7f9 fe7a 	bl	800094c <HAL_DAC_Start_DMA>
		  while(stay_here);
 8006c58:	bf00      	nop
 8006c5a:	4b2c      	ldr	r3, [pc, #176]	; (8006d0c <main+0x2dc>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d1fb      	bne.n	8006c5a <main+0x22a>
		  answers[0] = '\000';
 8006c62:	4b2b      	ldr	r3, [pc, #172]	; (8006d10 <main+0x2e0>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	701a      	strb	r2, [r3, #0]
		  while(answers[0] == '\000')
 8006c68:	e005      	b.n	8006c76 <main+0x246>
			  HAL_UART_Receive(&huart1, answers, sizeof(answers), 100);
 8006c6a:	2364      	movs	r3, #100	; 0x64
 8006c6c:	2206      	movs	r2, #6
 8006c6e:	4928      	ldr	r1, [pc, #160]	; (8006d10 <main+0x2e0>)
 8006c70:	4811      	ldr	r0, [pc, #68]	; (8006cb8 <main+0x288>)
 8006c72:	f7fe fc56 	bl	8005522 <HAL_UART_Receive>
		  while(answers[0] == '\000')
 8006c76:	4b26      	ldr	r3, [pc, #152]	; (8006d10 <main+0x2e0>)
 8006c78:	781b      	ldrb	r3, [r3, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f5      	beq.n	8006c6a <main+0x23a>
		//  HAL_Delay(timedelay); //this causes the answers array to be inaccurate
		  if(answers[0] != '\000'){
 8006c7e:	4b24      	ldr	r3, [pc, #144]	; (8006d10 <main+0x2e0>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	f000 8083 	beq.w	8006d8e <main+0x35e>
			  for (int i = 0 ; i < 5; i++) {
 8006c88:	2300      	movs	r3, #0
 8006c8a:	60bb      	str	r3, [r7, #8]
 8006c8c:	e049      	b.n	8006d22 <main+0x2f2>
					  if (charseq[i] != (answers[i])) {
 8006c8e:	4a21      	ldr	r2, [pc, #132]	; (8006d14 <main+0x2e4>)
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c96:	491e      	ldr	r1, [pc, #120]	; (8006d10 <main+0x2e0>)
 8006c98:	68ba      	ldr	r2, [r7, #8]
 8006c9a:	440a      	add	r2, r1
 8006c9c:	7812      	ldrb	r2, [r2, #0]
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d03c      	beq.n	8006d1c <main+0x2ec>
						  wrongAnswer++;
 8006ca2:	4b1d      	ldr	r3, [pc, #116]	; (8006d18 <main+0x2e8>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	3301      	adds	r3, #1
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	4b1b      	ldr	r3, [pc, #108]	; (8006d18 <main+0x2e8>)
 8006cac:	701a      	strb	r2, [r3, #0]
						  break;
 8006cae:	e03b      	b.n	8006d28 <main+0x2f8>
 8006cb0:	20000788 	.word	0x20000788
 8006cb4:	200004c8 	.word	0x200004c8
 8006cb8:	200007d4 	.word	0x200007d4
 8006cbc:	20000144 	.word	0x20000144
 8006cc0:	200279f8 	.word	0x200279f8
 8006cc4:	20027a5c 	.word	0x20027a5c
 8006cc8:	2000020c 	.word	0x2000020c
 8006ccc:	200279c4 	.word	0x200279c4
 8006cd0:	200279c5 	.word	0x200279c5
 8006cd4:	200001a8 	.word	0x200001a8
 8006cd8:	20027a7c 	.word	0x20027a7c
 8006cdc:	200279e4 	.word	0x200279e4
 8006ce0:	20000270 	.word	0x20000270
 8006ce4:	20000048 	.word	0x20000048
 8006ce8:	20000338 	.word	0x20000338
 8006cec:	20000400 	.word	0x20000400
 8006cf0:	20000464 	.word	0x20000464
 8006cf4:	20027a81 	.word	0x20027a81
 8006cf8:	20000030 	.word	0x20000030
 8006cfc:	20000008 	.word	0x20000008
 8006d00:	00027100 	.word	0x00027100
 8006d04:	200008c4 	.word	0x200008c4
 8006d08:	200005d8 	.word	0x200005d8
 8006d0c:	20000040 	.word	0x20000040
 8006d10:	200279d0 	.word	0x200279d0
 8006d14:	20000068 	.word	0x20000068
 8006d18:	200279df 	.word	0x200279df
			  for (int i = 0 ; i < 5; i++) {
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	3301      	adds	r3, #1
 8006d20:	60bb      	str	r3, [r7, #8]
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	ddb2      	ble.n	8006c8e <main+0x25e>
					  }
			  }
			 if (wrongAnswer == 0){
 8006d28:	4b5b      	ldr	r3, [pc, #364]	; (8006e98 <main+0x468>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d117      	bne.n	8006d60 <main+0x330>
				 sprintf(msg_buffer,roundWin);
 8006d30:	495a      	ldr	r1, [pc, #360]	; (8006e9c <main+0x46c>)
 8006d32:	485b      	ldr	r0, [pc, #364]	; (8006ea0 <main+0x470>)
 8006d34:	f001 fbd4 	bl	80084e0 <siprintf>
				 HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006d38:	4859      	ldr	r0, [pc, #356]	; (8006ea0 <main+0x470>)
 8006d3a:	f7f9 fa61 	bl	8000200 <strlen>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	b29a      	uxth	r2, r3
 8006d42:	2364      	movs	r3, #100	; 0x64
 8006d44:	4956      	ldr	r1, [pc, #344]	; (8006ea0 <main+0x470>)
 8006d46:	4857      	ldr	r0, [pc, #348]	; (8006ea4 <main+0x474>)
 8006d48:	f7fe fb54 	bl	80053f4 <HAL_UART_Transmit>

				// timedelay -= 2000;
				 answers[0] = '\000';
 8006d4c:	4b56      	ldr	r3, [pc, #344]	; (8006ea8 <main+0x478>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	701a      	strb	r2, [r3, #0]
				 digitLevelSelector++;
 8006d52:	4b56      	ldr	r3, [pc, #344]	; (8006eac <main+0x47c>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	3301      	adds	r3, #1
 8006d58:	b2da      	uxtb	r2, r3
 8006d5a:	4b54      	ldr	r3, [pc, #336]	; (8006eac <main+0x47c>)
 8006d5c:	701a      	strb	r2, [r3, #0]
 8006d5e:	e016      	b.n	8006d8e <main+0x35e>
			 }

			 else{

				 sprintf(msg_buffer,roundLoss);
 8006d60:	4953      	ldr	r1, [pc, #332]	; (8006eb0 <main+0x480>)
 8006d62:	484f      	ldr	r0, [pc, #316]	; (8006ea0 <main+0x470>)
 8006d64:	f001 fbbc 	bl	80084e0 <siprintf>
				 HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006d68:	484d      	ldr	r0, [pc, #308]	; (8006ea0 <main+0x470>)
 8006d6a:	f7f9 fa49 	bl	8000200 <strlen>
 8006d6e:	4603      	mov	r3, r0
 8006d70:	b29a      	uxth	r2, r3
 8006d72:	2364      	movs	r3, #100	; 0x64
 8006d74:	494a      	ldr	r1, [pc, #296]	; (8006ea0 <main+0x470>)
 8006d76:	484b      	ldr	r0, [pc, #300]	; (8006ea4 <main+0x474>)
 8006d78:	f7fe fb3c 	bl	80053f4 <HAL_UART_Transmit>
				 wrongAnswer = 0;
 8006d7c:	4b46      	ldr	r3, [pc, #280]	; (8006e98 <main+0x468>)
 8006d7e:	2200      	movs	r2, #0
 8006d80:	701a      	strb	r2, [r3, #0]
				 answers[0] = '\000';
 8006d82:	4b49      	ldr	r3, [pc, #292]	; (8006ea8 <main+0x478>)
 8006d84:	2200      	movs	r2, #0
 8006d86:	701a      	strb	r2, [r3, #0]
				 digitLevelSelector = 54;
 8006d88:	4b48      	ldr	r3, [pc, #288]	; (8006eac <main+0x47c>)
 8006d8a:	2236      	movs	r2, #54	; 0x36
 8006d8c:	701a      	strb	r2, [r3, #0]
			 }
		  }

	  }
		if(digitLevelSelector == 1){
 8006d8e:	4b47      	ldr	r3, [pc, #284]	; (8006eac <main+0x47c>)
 8006d90:	781b      	ldrb	r3, [r3, #0]
 8006d92:	2b01      	cmp	r3, #1
 8006d94:	f47f af42 	bne.w	8006c1c <main+0x1ec>
			 if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  address[seq2[0]], sizeof(SEQUENCE)) != QSPI_OK)
 8006d98:	4b46      	ldr	r3, [pc, #280]	; (8006eb4 <main+0x484>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4b46      	ldr	r3, [pc, #280]	; (8006eb8 <main+0x488>)
 8006da0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006da4:	4a45      	ldr	r2, [pc, #276]	; (8006ebc <main+0x48c>)
 8006da6:	4619      	mov	r1, r3
 8006da8:	4845      	ldr	r0, [pc, #276]	; (8006ec0 <main+0x490>)
 8006daa:	f000 fca1 	bl	80076f0 <BSP_QSPI_Read>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <main+0x388>
					  Error_Handler();
 8006db4:	f000 fc0a 	bl	80075cc <Error_Handler>

					  HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 8006db8:	2300      	movs	r3, #0
 8006dba:	9300      	str	r3, [sp, #0]
 8006dbc:	f649 4340 	movw	r3, #40000	; 0x9c40
 8006dc0:	4a3f      	ldr	r2, [pc, #252]	; (8006ec0 <main+0x490>)
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	483f      	ldr	r0, [pc, #252]	; (8006ec4 <main+0x494>)
 8006dc6:	f7f9 fdc1 	bl	800094c <HAL_DAC_Start_DMA>
					  while(stay_here2);
 8006dca:	bf00      	nop
 8006dcc:	4b3e      	ldr	r3, [pc, #248]	; (8006ec8 <main+0x498>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d1fb      	bne.n	8006dcc <main+0x39c>
					  answers2[0] = '\000';
 8006dd4:	4b3d      	ldr	r3, [pc, #244]	; (8006ecc <main+0x49c>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	701a      	strb	r2, [r3, #0]

					  while(answers2[0] == '\000')
 8006dda:	e005      	b.n	8006de8 <main+0x3b8>
						  HAL_UART_Receive(&huart1, answers2, sizeof(answers), 100);
 8006ddc:	2364      	movs	r3, #100	; 0x64
 8006dde:	2206      	movs	r2, #6
 8006de0:	493a      	ldr	r1, [pc, #232]	; (8006ecc <main+0x49c>)
 8006de2:	4830      	ldr	r0, [pc, #192]	; (8006ea4 <main+0x474>)
 8006de4:	f7fe fb9d 	bl	8005522 <HAL_UART_Receive>
					  while(answers2[0] == '\000')
 8006de8:	4b38      	ldr	r3, [pc, #224]	; (8006ecc <main+0x49c>)
 8006dea:	781b      	ldrb	r3, [r3, #0]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d0f5      	beq.n	8006ddc <main+0x3ac>

					//  HAL_Delay(timedelay); //this causes the answers array to be inaccurate
					  if(answers2[0] != '\000'){
 8006df0:	4b36      	ldr	r3, [pc, #216]	; (8006ecc <main+0x49c>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f43f af11 	beq.w	8006c1c <main+0x1ec>
						  for (int i = 0 ; i < 6; i++) {
 8006dfa:	2300      	movs	r3, #0
 8006dfc:	607b      	str	r3, [r7, #4]
 8006dfe:	e013      	b.n	8006e28 <main+0x3f8>
								  if (charseq2[i] != (answers2[i])) {
 8006e00:	4a33      	ldr	r2, [pc, #204]	; (8006ed0 <main+0x4a0>)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e08:	4930      	ldr	r1, [pc, #192]	; (8006ecc <main+0x49c>)
 8006e0a:	687a      	ldr	r2, [r7, #4]
 8006e0c:	440a      	add	r2, r1
 8006e0e:	7812      	ldrb	r2, [r2, #0]
 8006e10:	4293      	cmp	r3, r2
 8006e12:	d006      	beq.n	8006e22 <main+0x3f2>
									  wrongAnswer2++;
 8006e14:	4b2f      	ldr	r3, [pc, #188]	; (8006ed4 <main+0x4a4>)
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	3301      	adds	r3, #1
 8006e1a:	b2da      	uxtb	r2, r3
 8006e1c:	4b2d      	ldr	r3, [pc, #180]	; (8006ed4 <main+0x4a4>)
 8006e1e:	701a      	strb	r2, [r3, #0]
									  break;
 8006e20:	e005      	b.n	8006e2e <main+0x3fe>
						  for (int i = 0 ; i < 6; i++) {
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	3301      	adds	r3, #1
 8006e26:	607b      	str	r3, [r7, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b05      	cmp	r3, #5
 8006e2c:	dde8      	ble.n	8006e00 <main+0x3d0>
								  }
						  }
						 if (wrongAnswer2 == 0){
 8006e2e:	4b29      	ldr	r3, [pc, #164]	; (8006ed4 <main+0x4a4>)
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d117      	bne.n	8006e66 <main+0x436>
							 sprintf(msg_buffer,roundWin);
 8006e36:	4919      	ldr	r1, [pc, #100]	; (8006e9c <main+0x46c>)
 8006e38:	4819      	ldr	r0, [pc, #100]	; (8006ea0 <main+0x470>)
 8006e3a:	f001 fb51 	bl	80084e0 <siprintf>
							 HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006e3e:	4818      	ldr	r0, [pc, #96]	; (8006ea0 <main+0x470>)
 8006e40:	f7f9 f9de 	bl	8000200 <strlen>
 8006e44:	4603      	mov	r3, r0
 8006e46:	b29a      	uxth	r2, r3
 8006e48:	2364      	movs	r3, #100	; 0x64
 8006e4a:	4915      	ldr	r1, [pc, #84]	; (8006ea0 <main+0x470>)
 8006e4c:	4815      	ldr	r0, [pc, #84]	; (8006ea4 <main+0x474>)
 8006e4e:	f7fe fad1 	bl	80053f4 <HAL_UART_Transmit>
							 answers2[0] = '\000';
 8006e52:	4b1e      	ldr	r3, [pc, #120]	; (8006ecc <main+0x49c>)
 8006e54:	2200      	movs	r2, #0
 8006e56:	701a      	strb	r2, [r3, #0]
							 digitLevelSelector++;
 8006e58:	4b14      	ldr	r3, [pc, #80]	; (8006eac <main+0x47c>)
 8006e5a:	781b      	ldrb	r3, [r3, #0]
 8006e5c:	3301      	adds	r3, #1
 8006e5e:	b2da      	uxtb	r2, r3
 8006e60:	4b12      	ldr	r3, [pc, #72]	; (8006eac <main+0x47c>)
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	e6da      	b.n	8006c1c <main+0x1ec>
						 }
						 else{
							 sprintf(msg_buffer,roundLoss);
 8006e66:	4912      	ldr	r1, [pc, #72]	; (8006eb0 <main+0x480>)
 8006e68:	480d      	ldr	r0, [pc, #52]	; (8006ea0 <main+0x470>)
 8006e6a:	f001 fb39 	bl	80084e0 <siprintf>
							 HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8006e6e:	480c      	ldr	r0, [pc, #48]	; (8006ea0 <main+0x470>)
 8006e70:	f7f9 f9c6 	bl	8000200 <strlen>
 8006e74:	4603      	mov	r3, r0
 8006e76:	b29a      	uxth	r2, r3
 8006e78:	2364      	movs	r3, #100	; 0x64
 8006e7a:	4909      	ldr	r1, [pc, #36]	; (8006ea0 <main+0x470>)
 8006e7c:	4809      	ldr	r0, [pc, #36]	; (8006ea4 <main+0x474>)
 8006e7e:	f7fe fab9 	bl	80053f4 <HAL_UART_Transmit>
							 wrongAnswer2 = 0;
 8006e82:	4b14      	ldr	r3, [pc, #80]	; (8006ed4 <main+0x4a4>)
 8006e84:	2200      	movs	r2, #0
 8006e86:	701a      	strb	r2, [r3, #0]
							 answers2[0] = '\000';
 8006e88:	4b10      	ldr	r3, [pc, #64]	; (8006ecc <main+0x49c>)
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	701a      	strb	r2, [r3, #0]
							 digitLevelSelector = 55;
 8006e8e:	4b07      	ldr	r3, [pc, #28]	; (8006eac <main+0x47c>)
 8006e90:	2237      	movs	r2, #55	; 0x37
 8006e92:	701a      	strb	r2, [r3, #0]
	  if(digitLevelSelector == 0){
 8006e94:	e6c2      	b.n	8006c1c <main+0x1ec>
 8006e96:	bf00      	nop
 8006e98:	200279df 	.word	0x200279df
 8006e9c:	2000007c 	.word	0x2000007c
 8006ea0:	200279f8 	.word	0x200279f8
 8006ea4:	200007d4 	.word	0x200007d4
 8006ea8:	200279d0 	.word	0x200279d0
 8006eac:	20027a81 	.word	0x20027a81
 8006eb0:	200000e0 	.word	0x200000e0
 8006eb4:	20000038 	.word	0x20000038
 8006eb8:	20000008 	.word	0x20000008
 8006ebc:	00027100 	.word	0x00027100
 8006ec0:	200008c4 	.word	0x200008c4
 8006ec4:	200005d8 	.word	0x200005d8
 8006ec8:	20000044 	.word	0x20000044
 8006ecc:	200279d8 	.word	0x200279d8
 8006ed0:	2000004c 	.word	0x2000004c
 8006ed4:	200279e0 	.word	0x200279e0

08006ed8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006ed8:	b580      	push	{r7, lr}
 8006eda:	b096      	sub	sp, #88	; 0x58
 8006edc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006ede:	f107 0314 	add.w	r3, r7, #20
 8006ee2:	2244      	movs	r2, #68	; 0x44
 8006ee4:	2100      	movs	r1, #0
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f001 faf2 	bl	80084d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006eec:	463b      	mov	r3, r7
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	605a      	str	r2, [r3, #4]
 8006ef4:	609a      	str	r2, [r3, #8]
 8006ef6:	60da      	str	r2, [r3, #12]
 8006ef8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8006efa:	f44f 7000 	mov.w	r0, #512	; 0x200
 8006efe:	f7fc f8d9 	bl	80030b4 <HAL_PWREx_ControlVoltageScaling>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d001      	beq.n	8006f0c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8006f08:	f000 fb60 	bl	80075cc <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8006f0c:	2310      	movs	r3, #16
 8006f0e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8006f10:	2301      	movs	r3, #1
 8006f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8006f14:	2300      	movs	r3, #0
 8006f16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8006f18:	2360      	movs	r3, #96	; 0x60
 8006f1a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8006f20:	2301      	movs	r3, #1
 8006f22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006f24:	2301      	movs	r3, #1
 8006f26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8006f28:	2328      	movs	r3, #40	; 0x28
 8006f2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006f2c:	2302      	movs	r3, #2
 8006f2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006f30:	2302      	movs	r3, #2
 8006f32:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006f34:	2302      	movs	r3, #2
 8006f36:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006f38:	f107 0314 	add.w	r3, r7, #20
 8006f3c:	4618      	mov	r0, r3
 8006f3e:	f7fc f95d 	bl	80031fc <HAL_RCC_OscConfig>
 8006f42:	4603      	mov	r3, r0
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8006f48:	f000 fb40 	bl	80075cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006f4c:	230f      	movs	r3, #15
 8006f4e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006f50:	2303      	movs	r3, #3
 8006f52:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006f54:	2300      	movs	r3, #0
 8006f56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8006f60:	463b      	mov	r3, r7
 8006f62:	2103      	movs	r1, #3
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fc fd63 	bl	8003a30 <HAL_RCC_ClockConfig>
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d001      	beq.n	8006f74 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8006f70:	f000 fb2c 	bl	80075cc <Error_Handler>
  }
}
 8006f74:	bf00      	nop
 8006f76:	3758      	adds	r7, #88	; 0x58
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	bd80      	pop	{r7, pc}

08006f7c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08a      	sub	sp, #40	; 0x28
 8006f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8006f82:	463b      	mov	r3, r7
 8006f84:	2228      	movs	r2, #40	; 0x28
 8006f86:	2100      	movs	r1, #0
 8006f88:	4618      	mov	r0, r3
 8006f8a:	f001 faa1 	bl	80084d0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8006f8e:	4b13      	ldr	r3, [pc, #76]	; (8006fdc <MX_DAC1_Init+0x60>)
 8006f90:	4a13      	ldr	r2, [pc, #76]	; (8006fe0 <MX_DAC1_Init+0x64>)
 8006f92:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006f94:	4811      	ldr	r0, [pc, #68]	; (8006fdc <MX_DAC1_Init+0x60>)
 8006f96:	f7f9 fcb6 	bl	8000906 <HAL_DAC_Init>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006fa0:	f000 fb14 	bl	80075cc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8006fa8:	230a      	movs	r3, #10
 8006faa:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006fac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fb0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006fbe:	463b      	mov	r3, r7
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	4619      	mov	r1, r3
 8006fc4:	4805      	ldr	r0, [pc, #20]	; (8006fdc <MX_DAC1_Init+0x60>)
 8006fc6:	f7f9 fde7 	bl	8000b98 <HAL_DAC_ConfigChannel>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d001      	beq.n	8006fd4 <MX_DAC1_Init+0x58>
  {
    Error_Handler();
 8006fd0:	f000 fafc 	bl	80075cc <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8006fd4:	bf00      	nop
 8006fd6:	3728      	adds	r7, #40	; 0x28
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	200005d8 	.word	0x200005d8
 8006fe0:	40007400 	.word	0x40007400

08006fe4 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_filter0.Instance = DFSDM1_Filter0;
 8006fe8:	4b2c      	ldr	r3, [pc, #176]	; (800709c <MX_DFSDM1_Init+0xb8>)
 8006fea:	4a2d      	ldr	r2, [pc, #180]	; (80070a0 <MX_DFSDM1_Init+0xbc>)
 8006fec:	601a      	str	r2, [r3, #0]
  hdfsdm1_filter0.Init.RegularParam.Trigger = DFSDM_FILTER_SW_TRIGGER;
 8006fee:	4b2b      	ldr	r3, [pc, #172]	; (800709c <MX_DFSDM1_Init+0xb8>)
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	605a      	str	r2, [r3, #4]
  hdfsdm1_filter0.Init.RegularParam.FastMode = ENABLE;
 8006ff4:	4b29      	ldr	r3, [pc, #164]	; (800709c <MX_DFSDM1_Init+0xb8>)
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	721a      	strb	r2, [r3, #8]
  hdfsdm1_filter0.Init.RegularParam.DmaMode = ENABLE;
 8006ffa:	4b28      	ldr	r3, [pc, #160]	; (800709c <MX_DFSDM1_Init+0xb8>)
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	725a      	strb	r2, [r3, #9]
  hdfsdm1_filter0.Init.FilterParam.SincOrder = DFSDM_FILTER_SINC3_ORDER;
 8007000:	4b26      	ldr	r3, [pc, #152]	; (800709c <MX_DFSDM1_Init+0xb8>)
 8007002:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 8007006:	61da      	str	r2, [r3, #28]
  hdfsdm1_filter0.Init.FilterParam.Oversampling = 240;
 8007008:	4b24      	ldr	r3, [pc, #144]	; (800709c <MX_DFSDM1_Init+0xb8>)
 800700a:	22f0      	movs	r2, #240	; 0xf0
 800700c:	621a      	str	r2, [r3, #32]
  hdfsdm1_filter0.Init.FilterParam.IntOversampling = 1;
 800700e:	4b23      	ldr	r3, [pc, #140]	; (800709c <MX_DFSDM1_Init+0xb8>)
 8007010:	2201      	movs	r2, #1
 8007012:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_DFSDM_FilterInit(&hdfsdm1_filter0) != HAL_OK)
 8007014:	4821      	ldr	r0, [pc, #132]	; (800709c <MX_DFSDM1_Init+0xb8>)
 8007016:	f7fa f849 	bl	80010ac <HAL_DFSDM_FilterInit>
 800701a:	4603      	mov	r3, r0
 800701c:	2b00      	cmp	r3, #0
 800701e:	d001      	beq.n	8007024 <MX_DFSDM1_Init+0x40>
  {
    Error_Handler();
 8007020:	f000 fad4 	bl	80075cc <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 8007024:	4b1f      	ldr	r3, [pc, #124]	; (80070a4 <MX_DFSDM1_Init+0xc0>)
 8007026:	4a20      	ldr	r2, [pc, #128]	; (80070a8 <MX_DFSDM1_Init+0xc4>)
 8007028:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 800702a:	4b1e      	ldr	r3, [pc, #120]	; (80070a4 <MX_DFSDM1_Init+0xc0>)
 800702c:	2201      	movs	r2, #1
 800702e:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8007030:	4b1c      	ldr	r3, [pc, #112]	; (80070a4 <MX_DFSDM1_Init+0xc0>)
 8007032:	2200      	movs	r2, #0
 8007034:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 34;
 8007036:	4b1b      	ldr	r3, [pc, #108]	; (80070a4 <MX_DFSDM1_Init+0xc0>)
 8007038:	2222      	movs	r2, #34	; 0x22
 800703a:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 800703c:	4b19      	ldr	r3, [pc, #100]	; (80070a4 <MX_DFSDM1_Init+0xc0>)
 800703e:	2200      	movs	r2, #0
 8007040:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8007042:	4b18      	ldr	r3, [pc, #96]	; (80070a4 <MX_DFSDM1_Init+0xc0>)
 8007044:	2200      	movs	r2, #0
 8007046:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8007048:	4b16      	ldr	r3, [pc, #88]	; (80070a4 <MX_DFSDM1_Init+0xc0>)
 800704a:	2200      	movs	r2, #0
 800704c:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 800704e:	4b15      	ldr	r3, [pc, #84]	; (80070a4 <MX_DFSDM1_Init+0xc0>)
 8007050:	2200      	movs	r2, #0
 8007052:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 8007054:	4b13      	ldr	r3, [pc, #76]	; (80070a4 <MX_DFSDM1_Init+0xc0>)
 8007056:	2204      	movs	r2, #4
 8007058:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 800705a:	4b12      	ldr	r3, [pc, #72]	; (80070a4 <MX_DFSDM1_Init+0xc0>)
 800705c:	2200      	movs	r2, #0
 800705e:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8007060:	4b10      	ldr	r3, [pc, #64]	; (80070a4 <MX_DFSDM1_Init+0xc0>)
 8007062:	2201      	movs	r2, #1
 8007064:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0;
 8007066:	4b0f      	ldr	r3, [pc, #60]	; (80070a4 <MX_DFSDM1_Init+0xc0>)
 8007068:	2200      	movs	r2, #0
 800706a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 800706c:	4b0d      	ldr	r3, [pc, #52]	; (80070a4 <MX_DFSDM1_Init+0xc0>)
 800706e:	2200      	movs	r2, #0
 8007070:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 8007072:	480c      	ldr	r0, [pc, #48]	; (80070a4 <MX_DFSDM1_Init+0xc0>)
 8007074:	f7f9 ff5a 	bl	8000f2c <HAL_DFSDM_ChannelInit>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <MX_DFSDM1_Init+0x9e>
  {
    Error_Handler();
 800707e:	f000 faa5 	bl	80075cc <Error_Handler>
  }
  if (HAL_DFSDM_FilterConfigRegChannel(&hdfsdm1_filter0, DFSDM_CHANNEL_2, DFSDM_CONTINUOUS_CONV_ON) != HAL_OK)
 8007082:	2201      	movs	r2, #1
 8007084:	4909      	ldr	r1, [pc, #36]	; (80070ac <MX_DFSDM1_Init+0xc8>)
 8007086:	4805      	ldr	r0, [pc, #20]	; (800709c <MX_DFSDM1_Init+0xb8>)
 8007088:	f7fa f8ea 	bl	8001260 <HAL_DFSDM_FilterConfigRegChannel>
 800708c:	4603      	mov	r3, r0
 800708e:	2b00      	cmp	r3, #0
 8007090:	d001      	beq.n	8007096 <MX_DFSDM1_Init+0xb2>
  {
    Error_Handler();
 8007092:	f000 fa9b 	bl	80075cc <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8007096:	bf00      	nop
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	2000064c 	.word	0x2000064c
 80070a0:	40016100 	.word	0x40016100
 80070a4:	200006a0 	.word	0x200006a0
 80070a8:	40016040 	.word	0x40016040
 80070ac:	00020004 	.word	0x00020004

080070b0 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b086      	sub	sp, #24
 80070b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 0 */

  /* USER CODE END OCTOSPI1_Init 0 */

  OSPIM_CfgTypeDef OSPIM_Cfg_Struct = {0};
 80070b6:	1d3b      	adds	r3, r7, #4
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]
 80070bc:	605a      	str	r2, [r3, #4]
 80070be:	609a      	str	r2, [r3, #8]
 80070c0:	60da      	str	r2, [r3, #12]
 80070c2:	611a      	str	r2, [r3, #16]

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80070c4:	4b23      	ldr	r3, [pc, #140]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 80070c6:	4a24      	ldr	r2, [pc, #144]	; (8007158 <MX_OCTOSPI1_Init+0xa8>)
 80070c8:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80070ca:	4b22      	ldr	r3, [pc, #136]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 80070cc:	2201      	movs	r2, #1
 80070ce:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80070d0:	4b20      	ldr	r3, [pc, #128]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 80070d2:	2200      	movs	r2, #0
 80070d4:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MACRONIX;
 80070d6:	4b1f      	ldr	r3, [pc, #124]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 80070d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80070dc:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80070de:	4b1d      	ldr	r3, [pc, #116]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 80070e0:	2220      	movs	r2, #32
 80070e2:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80070e4:	4b1b      	ldr	r3, [pc, #108]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 80070e6:	2201      	movs	r2, #1
 80070e8:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 80070ea:	4b1a      	ldr	r3, [pc, #104]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 80070ec:	2200      	movs	r2, #0
 80070ee:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 80070f0:	4b18      	ldr	r3, [pc, #96]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	61da      	str	r2, [r3, #28]
  hospi1.Init.ClockPrescaler = 1;
 80070f6:	4b17      	ldr	r3, [pc, #92]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 80070f8:	2201      	movs	r2, #1
 80070fa:	621a      	str	r2, [r3, #32]
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 80070fc:	4b15      	ldr	r3, [pc, #84]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 80070fe:	2200      	movs	r2, #0
 8007100:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 8007102:	4b14      	ldr	r3, [pc, #80]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 8007104:	2200      	movs	r2, #0
 8007106:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.ChipSelectBoundary = 0;
 8007108:	4b12      	ldr	r3, [pc, #72]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 800710a:	2200      	movs	r2, #0
 800710c:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 800710e:	4b11      	ldr	r3, [pc, #68]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 8007110:	2208      	movs	r2, #8
 8007112:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8007114:	480f      	ldr	r0, [pc, #60]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 8007116:	f7fa ff31 	bl	8001f7c <HAL_OSPI_Init>
 800711a:	4603      	mov	r3, r0
 800711c:	2b00      	cmp	r3, #0
 800711e:	d001      	beq.n	8007124 <MX_OCTOSPI1_Init+0x74>
  {
    Error_Handler();
 8007120:	f000 fa54 	bl	80075cc <Error_Handler>
  }
  OSPIM_Cfg_Struct.ClkPort = 1;
 8007124:	2301      	movs	r3, #1
 8007126:	607b      	str	r3, [r7, #4]
  OSPIM_Cfg_Struct.NCSPort = 1;
 8007128:	2301      	movs	r3, #1
 800712a:	60fb      	str	r3, [r7, #12]
  OSPIM_Cfg_Struct.IOLowPort = HAL_OSPIM_IOPORT_1_LOW;
 800712c:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8007130:	613b      	str	r3, [r7, #16]
  if (HAL_OSPIM_Config(&hospi1, &OSPIM_Cfg_Struct, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007132:	1d3b      	adds	r3, r7, #4
 8007134:	f241 3288 	movw	r2, #5000	; 0x1388
 8007138:	4619      	mov	r1, r3
 800713a:	4806      	ldr	r0, [pc, #24]	; (8007154 <MX_OCTOSPI1_Init+0xa4>)
 800713c:	f7fb fa1c 	bl	8002578 <HAL_OSPIM_Config>
 8007140:	4603      	mov	r3, r0
 8007142:	2b00      	cmp	r3, #0
 8007144:	d001      	beq.n	800714a <MX_OCTOSPI1_Init+0x9a>
  {
    Error_Handler();
 8007146:	f000 fa41 	bl	80075cc <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 800714a:	bf00      	nop
 800714c:	3718      	adds	r7, #24
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	20000738 	.word	0x20000738
 8007158:	a0001000 	.word	0xa0001000

0800715c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b088      	sub	sp, #32
 8007160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007162:	f107 0310 	add.w	r3, r7, #16
 8007166:	2200      	movs	r2, #0
 8007168:	601a      	str	r2, [r3, #0]
 800716a:	605a      	str	r2, [r3, #4]
 800716c:	609a      	str	r2, [r3, #8]
 800716e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007170:	1d3b      	adds	r3, r7, #4
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
 8007176:	605a      	str	r2, [r3, #4]
 8007178:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800717a:	4b1e      	ldr	r3, [pc, #120]	; (80071f4 <MX_TIM2_Init+0x98>)
 800717c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007180:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007182:	4b1c      	ldr	r3, [pc, #112]	; (80071f4 <MX_TIM2_Init+0x98>)
 8007184:	2200      	movs	r2, #0
 8007186:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007188:	4b1a      	ldr	r3, [pc, #104]	; (80071f4 <MX_TIM2_Init+0x98>)
 800718a:	2200      	movs	r2, #0
 800718c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4000;
 800718e:	4b19      	ldr	r3, [pc, #100]	; (80071f4 <MX_TIM2_Init+0x98>)
 8007190:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8007194:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007196:	4b17      	ldr	r3, [pc, #92]	; (80071f4 <MX_TIM2_Init+0x98>)
 8007198:	2200      	movs	r2, #0
 800719a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800719c:	4b15      	ldr	r3, [pc, #84]	; (80071f4 <MX_TIM2_Init+0x98>)
 800719e:	2200      	movs	r2, #0
 80071a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80071a2:	4814      	ldr	r0, [pc, #80]	; (80071f4 <MX_TIM2_Init+0x98>)
 80071a4:	f7fd fc1a 	bl	80049dc <HAL_TIM_Base_Init>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d001      	beq.n	80071b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80071ae:	f000 fa0d 	bl	80075cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80071b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80071b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80071b8:	f107 0310 	add.w	r3, r7, #16
 80071bc:	4619      	mov	r1, r3
 80071be:	480d      	ldr	r0, [pc, #52]	; (80071f4 <MX_TIM2_Init+0x98>)
 80071c0:	f7fd fdf3 	bl	8004daa <HAL_TIM_ConfigClockSource>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d001      	beq.n	80071ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80071ca:	f000 f9ff 	bl	80075cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80071ce:	2320      	movs	r3, #32
 80071d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80071d6:	1d3b      	adds	r3, r7, #4
 80071d8:	4619      	mov	r1, r3
 80071da:	4806      	ldr	r0, [pc, #24]	; (80071f4 <MX_TIM2_Init+0x98>)
 80071dc:	f7fe f814 	bl	8005208 <HAL_TIMEx_MasterConfigSynchronization>
 80071e0:	4603      	mov	r3, r0
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d001      	beq.n	80071ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80071e6:	f000 f9f1 	bl	80075cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80071ea:	bf00      	nop
 80071ec:	3720      	adds	r7, #32
 80071ee:	46bd      	mov	sp, r7
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	bf00      	nop
 80071f4:	20000788 	.word	0x20000788

080071f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80071f8:	b580      	push	{r7, lr}
 80071fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80071fc:	4b22      	ldr	r3, [pc, #136]	; (8007288 <MX_USART1_UART_Init+0x90>)
 80071fe:	4a23      	ldr	r2, [pc, #140]	; (800728c <MX_USART1_UART_Init+0x94>)
 8007200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007202:	4b21      	ldr	r3, [pc, #132]	; (8007288 <MX_USART1_UART_Init+0x90>)
 8007204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800720a:	4b1f      	ldr	r3, [pc, #124]	; (8007288 <MX_USART1_UART_Init+0x90>)
 800720c:	2200      	movs	r2, #0
 800720e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007210:	4b1d      	ldr	r3, [pc, #116]	; (8007288 <MX_USART1_UART_Init+0x90>)
 8007212:	2200      	movs	r2, #0
 8007214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007216:	4b1c      	ldr	r3, [pc, #112]	; (8007288 <MX_USART1_UART_Init+0x90>)
 8007218:	2200      	movs	r2, #0
 800721a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800721c:	4b1a      	ldr	r3, [pc, #104]	; (8007288 <MX_USART1_UART_Init+0x90>)
 800721e:	220c      	movs	r2, #12
 8007220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007222:	4b19      	ldr	r3, [pc, #100]	; (8007288 <MX_USART1_UART_Init+0x90>)
 8007224:	2200      	movs	r2, #0
 8007226:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007228:	4b17      	ldr	r3, [pc, #92]	; (8007288 <MX_USART1_UART_Init+0x90>)
 800722a:	2200      	movs	r2, #0
 800722c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800722e:	4b16      	ldr	r3, [pc, #88]	; (8007288 <MX_USART1_UART_Init+0x90>)
 8007230:	2200      	movs	r2, #0
 8007232:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8007234:	4b14      	ldr	r3, [pc, #80]	; (8007288 <MX_USART1_UART_Init+0x90>)
 8007236:	2200      	movs	r2, #0
 8007238:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800723a:	4b13      	ldr	r3, [pc, #76]	; (8007288 <MX_USART1_UART_Init+0x90>)
 800723c:	2200      	movs	r2, #0
 800723e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007240:	4811      	ldr	r0, [pc, #68]	; (8007288 <MX_USART1_UART_Init+0x90>)
 8007242:	f7fe f887 	bl	8005354 <HAL_UART_Init>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d001      	beq.n	8007250 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800724c:	f000 f9be 	bl	80075cc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007250:	2100      	movs	r1, #0
 8007252:	480d      	ldr	r0, [pc, #52]	; (8007288 <MX_USART1_UART_Init+0x90>)
 8007254:	f7ff fb21 	bl	800689a <HAL_UARTEx_SetTxFifoThreshold>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d001      	beq.n	8007262 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800725e:	f000 f9b5 	bl	80075cc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8007262:	2100      	movs	r1, #0
 8007264:	4808      	ldr	r0, [pc, #32]	; (8007288 <MX_USART1_UART_Init+0x90>)
 8007266:	f7ff fb56 	bl	8006916 <HAL_UARTEx_SetRxFifoThreshold>
 800726a:	4603      	mov	r3, r0
 800726c:	2b00      	cmp	r3, #0
 800726e:	d001      	beq.n	8007274 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8007270:	f000 f9ac 	bl	80075cc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8007274:	4804      	ldr	r0, [pc, #16]	; (8007288 <MX_USART1_UART_Init+0x90>)
 8007276:	f7ff fad7 	bl	8006828 <HAL_UARTEx_DisableFifoMode>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8007280:	f000 f9a4 	bl	80075cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007284:	bf00      	nop
 8007286:	bd80      	pop	{r7, pc}
 8007288:	200007d4 	.word	0x200007d4
 800728c:	40013800 	.word	0x40013800

08007290 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b082      	sub	sp, #8
 8007294:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007296:	4b1a      	ldr	r3, [pc, #104]	; (8007300 <MX_DMA_Init+0x70>)
 8007298:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800729a:	4a19      	ldr	r2, [pc, #100]	; (8007300 <MX_DMA_Init+0x70>)
 800729c:	f043 0304 	orr.w	r3, r3, #4
 80072a0:	6493      	str	r3, [r2, #72]	; 0x48
 80072a2:	4b17      	ldr	r3, [pc, #92]	; (8007300 <MX_DMA_Init+0x70>)
 80072a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072a6:	f003 0304 	and.w	r3, r3, #4
 80072aa:	607b      	str	r3, [r7, #4]
 80072ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80072ae:	4b14      	ldr	r3, [pc, #80]	; (8007300 <MX_DMA_Init+0x70>)
 80072b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072b2:	4a13      	ldr	r2, [pc, #76]	; (8007300 <MX_DMA_Init+0x70>)
 80072b4:	f043 0301 	orr.w	r3, r3, #1
 80072b8:	6493      	str	r3, [r2, #72]	; 0x48
 80072ba:	4b11      	ldr	r3, [pc, #68]	; (8007300 <MX_DMA_Init+0x70>)
 80072bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072be:	f003 0301 	and.w	r3, r3, #1
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80072c6:	2200      	movs	r2, #0
 80072c8:	2100      	movs	r1, #0
 80072ca:	200b      	movs	r0, #11
 80072cc:	f7f9 fae5 	bl	800089a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80072d0:	200b      	movs	r0, #11
 80072d2:	f7f9 fafe 	bl	80008d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80072d6:	2200      	movs	r2, #0
 80072d8:	2100      	movs	r1, #0
 80072da:	200c      	movs	r0, #12
 80072dc:	f7f9 fadd 	bl	800089a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80072e0:	200c      	movs	r0, #12
 80072e2:	f7f9 faf6 	bl	80008d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80072e6:	2200      	movs	r2, #0
 80072e8:	2100      	movs	r1, #0
 80072ea:	200d      	movs	r0, #13
 80072ec:	f7f9 fad5 	bl	800089a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80072f0:	200d      	movs	r0, #13
 80072f2:	f7f9 faee 	bl	80008d2 <HAL_NVIC_EnableIRQ>

}
 80072f6:	bf00      	nop
 80072f8:	3708      	adds	r7, #8
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	40021000 	.word	0x40021000

08007304 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b08a      	sub	sp, #40	; 0x28
 8007308:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800730a:	f107 0314 	add.w	r3, r7, #20
 800730e:	2200      	movs	r2, #0
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	605a      	str	r2, [r3, #4]
 8007314:	609a      	str	r2, [r3, #8]
 8007316:	60da      	str	r2, [r3, #12]
 8007318:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800731a:	4b39      	ldr	r3, [pc, #228]	; (8007400 <MX_GPIO_Init+0xfc>)
 800731c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800731e:	4a38      	ldr	r2, [pc, #224]	; (8007400 <MX_GPIO_Init+0xfc>)
 8007320:	f043 0310 	orr.w	r3, r3, #16
 8007324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007326:	4b36      	ldr	r3, [pc, #216]	; (8007400 <MX_GPIO_Init+0xfc>)
 8007328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800732a:	f003 0310 	and.w	r3, r3, #16
 800732e:	613b      	str	r3, [r7, #16]
 8007330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007332:	4b33      	ldr	r3, [pc, #204]	; (8007400 <MX_GPIO_Init+0xfc>)
 8007334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007336:	4a32      	ldr	r2, [pc, #200]	; (8007400 <MX_GPIO_Init+0xfc>)
 8007338:	f043 0304 	orr.w	r3, r3, #4
 800733c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800733e:	4b30      	ldr	r3, [pc, #192]	; (8007400 <MX_GPIO_Init+0xfc>)
 8007340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007342:	f003 0304 	and.w	r3, r3, #4
 8007346:	60fb      	str	r3, [r7, #12]
 8007348:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800734a:	4b2d      	ldr	r3, [pc, #180]	; (8007400 <MX_GPIO_Init+0xfc>)
 800734c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800734e:	4a2c      	ldr	r2, [pc, #176]	; (8007400 <MX_GPIO_Init+0xfc>)
 8007350:	f043 0301 	orr.w	r3, r3, #1
 8007354:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007356:	4b2a      	ldr	r3, [pc, #168]	; (8007400 <MX_GPIO_Init+0xfc>)
 8007358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	60bb      	str	r3, [r7, #8]
 8007360:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007362:	4b27      	ldr	r3, [pc, #156]	; (8007400 <MX_GPIO_Init+0xfc>)
 8007364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007366:	4a26      	ldr	r2, [pc, #152]	; (8007400 <MX_GPIO_Init+0xfc>)
 8007368:	f043 0302 	orr.w	r3, r3, #2
 800736c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800736e:	4b24      	ldr	r3, [pc, #144]	; (8007400 <MX_GPIO_Init+0xfc>)
 8007370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007372:	f003 0302 	and.w	r3, r3, #2
 8007376:	607b      	str	r3, [r7, #4]
 8007378:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
 800737a:	2200      	movs	r2, #0
 800737c:	2108      	movs	r1, #8
 800737e:	4821      	ldr	r0, [pc, #132]	; (8007404 <MX_GPIO_Init+0x100>)
 8007380:	f7fa fdb2 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(greenLED_GPIO_Port, greenLED_Pin, GPIO_PIN_RESET);
 8007384:	2200      	movs	r2, #0
 8007386:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800738a:	481f      	ldr	r0, [pc, #124]	; (8007408 <MX_GPIO_Init+0x104>)
 800738c:	f7fa fdac 	bl	8001ee8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : redLED_Pin */
  GPIO_InitStruct.Pin = redLED_Pin;
 8007390:	2308      	movs	r3, #8
 8007392:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007394:	2301      	movs	r3, #1
 8007396:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007398:	2300      	movs	r3, #0
 800739a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800739c:	2300      	movs	r3, #0
 800739e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(redLED_GPIO_Port, &GPIO_InitStruct);
 80073a0:	f107 0314 	add.w	r3, r7, #20
 80073a4:	4619      	mov	r1, r3
 80073a6:	4817      	ldr	r0, [pc, #92]	; (8007404 <MX_GPIO_Init+0x100>)
 80073a8:	f7fa fb1a 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : pushButton_Pin */
  GPIO_InitStruct.Pin = pushButton_Pin;
 80073ac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80073b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80073b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b8:	2300      	movs	r3, #0
 80073ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(pushButton_GPIO_Port, &GPIO_InitStruct);
 80073bc:	f107 0314 	add.w	r3, r7, #20
 80073c0:	4619      	mov	r1, r3
 80073c2:	4812      	ldr	r0, [pc, #72]	; (800740c <MX_GPIO_Init+0x108>)
 80073c4:	f7fa fb0c 	bl	80019e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : greenLED_Pin */
  GPIO_InitStruct.Pin = greenLED_Pin;
 80073c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80073ce:	2301      	movs	r3, #1
 80073d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073d2:	2300      	movs	r3, #0
 80073d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80073d6:	2300      	movs	r3, #0
 80073d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(greenLED_GPIO_Port, &GPIO_InitStruct);
 80073da:	f107 0314 	add.w	r3, r7, #20
 80073de:	4619      	mov	r1, r3
 80073e0:	4809      	ldr	r0, [pc, #36]	; (8007408 <MX_GPIO_Init+0x104>)
 80073e2:	f7fa fafd 	bl	80019e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80073e6:	2200      	movs	r2, #0
 80073e8:	2100      	movs	r1, #0
 80073ea:	2028      	movs	r0, #40	; 0x28
 80073ec:	f7f9 fa55 	bl	800089a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80073f0:	2028      	movs	r0, #40	; 0x28
 80073f2:	f7f9 fa6e 	bl	80008d2 <HAL_NVIC_EnableIRQ>

}
 80073f6:	bf00      	nop
 80073f8:	3728      	adds	r7, #40	; 0x28
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
 80073fe:	bf00      	nop
 8007400:	40021000 	.word	0x40021000
 8007404:	48001000 	.word	0x48001000
 8007408:	48000400 	.word	0x48000400
 800740c:	48000800 	.word	0x48000800

08007410 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	4603      	mov	r3, r0
 8007418:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == pushButton_Pin) {
 800741a:	88fb      	ldrh	r3, [r7, #6]
 800741c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007420:	d107      	bne.n	8007432 <HAL_GPIO_EXTI_Callback+0x22>
	//	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
		recorder_wait = 0;
 8007422:	4b06      	ldr	r3, [pc, #24]	; (800743c <HAL_GPIO_EXTI_Callback+0x2c>)
 8007424:	2200      	movs	r2, #0
 8007426:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(greenLED_GPIO_Port, greenLED_Pin);
 8007428:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800742c:	4804      	ldr	r0, [pc, #16]	; (8007440 <HAL_GPIO_EXTI_Callback+0x30>)
 800742e:	f7fa fd73 	bl	8001f18 <HAL_GPIO_TogglePin>
		}*/
/*
	 	  sprintf(msg_buffer,startTypingMessage);
	 	  HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);*/
	}
}
 8007432:	bf00      	nop
 8007434:	3708      	adds	r7, #8
 8007436:	46bd      	mov	sp, r7
 8007438:	bd80      	pop	{r7, pc}
 800743a:	bf00      	nop
 800743c:	20000048 	.word	0x20000048
 8007440:	48000400 	.word	0x48000400

08007444 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8007444:	b580      	push	{r7, lr}
 8007446:	b084      	sub	sp, #16
 8007448:	af02      	add	r7, sp, #8
 800744a:	6078      	str	r0, [r7, #4]

//	HAL_GPIO_TogglePin(greenLED_GPIO_Port, greenLED_Pin);
	if(player) {
 800744c:	4b4e      	ldr	r3, [pc, #312]	; (8007588 <HAL_DAC_ConvCpltCallbackCh1+0x144>)
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	f000 8094 	beq.w	800757e <HAL_DAC_ConvCpltCallbackCh1+0x13a>
	if (digitLevelSelector ==0){
 8007456:	4b4d      	ldr	r3, [pc, #308]	; (800758c <HAL_DAC_ConvCpltCallbackCh1+0x148>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d145      	bne.n	80074ea <HAL_DAC_ConvCpltCallbackCh1+0xa6>
	j = j + 1;
 800745e:	4b4c      	ldr	r3, [pc, #304]	; (8007590 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	3301      	adds	r3, #1
 8007464:	b2da      	uxtb	r2, r3
 8007466:	4b4a      	ldr	r3, [pc, #296]	; (8007590 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 8007468:	701a      	strb	r2, [r3, #0]
	test = address[seq[j]];
 800746a:	4b49      	ldr	r3, [pc, #292]	; (8007590 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 800746c:	781b      	ldrb	r3, [r3, #0]
 800746e:	461a      	mov	r2, r3
 8007470:	4b48      	ldr	r3, [pc, #288]	; (8007594 <HAL_DAC_ConvCpltCallbackCh1+0x150>)
 8007472:	5c9b      	ldrb	r3, [r3, r2]
 8007474:	461a      	mov	r2, r3
 8007476:	4b48      	ldr	r3, [pc, #288]	; (8007598 <HAL_DAC_ConvCpltCallbackCh1+0x154>)
 8007478:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800747c:	461a      	mov	r2, r3
 800747e:	4b47      	ldr	r3, [pc, #284]	; (800759c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 8007480:	601a      	str	r2, [r3, #0]
	if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  test, sizeof(SEQUENCE)) != QSPI_OK)
 8007482:	4b46      	ldr	r3, [pc, #280]	; (800759c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a46      	ldr	r2, [pc, #280]	; (80075a0 <HAL_DAC_ConvCpltCallbackCh1+0x15c>)
 8007488:	4619      	mov	r1, r3
 800748a:	4846      	ldr	r0, [pc, #280]	; (80075a4 <HAL_DAC_ConvCpltCallbackCh1+0x160>)
 800748c:	f000 f930 	bl	80076f0 <BSP_QSPI_Read>
 8007490:	4603      	mov	r3, r0
 8007492:	2b00      	cmp	r3, #0
 8007494:	d001      	beq.n	800749a <HAL_DAC_ConvCpltCallbackCh1+0x56>
		Error_Handler();
 8007496:	f000 f899 	bl	80075cc <Error_Handler>

	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800749a:	2300      	movs	r3, #0
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	f649 4340 	movw	r3, #40000	; 0x9c40
 80074a2:	4a40      	ldr	r2, [pc, #256]	; (80075a4 <HAL_DAC_ConvCpltCallbackCh1+0x160>)
 80074a4:	2100      	movs	r1, #0
 80074a6:	4840      	ldr	r0, [pc, #256]	; (80075a8 <HAL_DAC_ConvCpltCallbackCh1+0x164>)
 80074a8:	f7f9 fa50 	bl	800094c <HAL_DAC_Start_DMA>

	if (j == 5) {
 80074ac:	4b38      	ldr	r3, [pc, #224]	; (8007590 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 80074ae:	781b      	ldrb	r3, [r3, #0]
 80074b0:	2b05      	cmp	r3, #5
 80074b2:	d11a      	bne.n	80074ea <HAL_DAC_ConvCpltCallbackCh1+0xa6>
		HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80074b4:	2100      	movs	r1, #0
 80074b6:	483c      	ldr	r0, [pc, #240]	; (80075a8 <HAL_DAC_ConvCpltCallbackCh1+0x164>)
 80074b8:	f7f9 fb14 	bl	8000ae4 <HAL_DAC_Stop_DMA>
		sprintf(msg_buffer,startTypingMessage);
 80074bc:	493b      	ldr	r1, [pc, #236]	; (80075ac <HAL_DAC_ConvCpltCallbackCh1+0x168>)
 80074be:	483c      	ldr	r0, [pc, #240]	; (80075b0 <HAL_DAC_ConvCpltCallbackCh1+0x16c>)
 80074c0:	f001 f80e 	bl	80084e0 <siprintf>
		HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 80074c4:	483a      	ldr	r0, [pc, #232]	; (80075b0 <HAL_DAC_ConvCpltCallbackCh1+0x16c>)
 80074c6:	f7f8 fe9b 	bl	8000200 <strlen>
 80074ca:	4603      	mov	r3, r0
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	2364      	movs	r3, #100	; 0x64
 80074d0:	4937      	ldr	r1, [pc, #220]	; (80075b0 <HAL_DAC_ConvCpltCallbackCh1+0x16c>)
 80074d2:	4838      	ldr	r0, [pc, #224]	; (80075b4 <HAL_DAC_ConvCpltCallbackCh1+0x170>)
 80074d4:	f7fd ff8e 	bl	80053f4 <HAL_UART_Transmit>
		answers[0] = '\000';
 80074d8:	4b37      	ldr	r3, [pc, #220]	; (80075b8 <HAL_DAC_ConvCpltCallbackCh1+0x174>)
 80074da:	2200      	movs	r2, #0
 80074dc:	701a      	strb	r2, [r3, #0]
		stay_here = 0;
 80074de:	4b37      	ldr	r3, [pc, #220]	; (80075bc <HAL_DAC_ConvCpltCallbackCh1+0x178>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]
		j=0;
 80074e4:	4b2a      	ldr	r3, [pc, #168]	; (8007590 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 80074e6:	2200      	movs	r2, #0
 80074e8:	701a      	strb	r2, [r3, #0]
	}
	}

	if (digitLevelSelector ==1){
 80074ea:	4b28      	ldr	r3, [pc, #160]	; (800758c <HAL_DAC_ConvCpltCallbackCh1+0x148>)
 80074ec:	781b      	ldrb	r3, [r3, #0]
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d145      	bne.n	800757e <HAL_DAC_ConvCpltCallbackCh1+0x13a>
		j = j + 1;
 80074f2:	4b27      	ldr	r3, [pc, #156]	; (8007590 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	3301      	adds	r3, #1
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	4b25      	ldr	r3, [pc, #148]	; (8007590 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 80074fc:	701a      	strb	r2, [r3, #0]
		test = address[seq2[j]];
 80074fe:	4b24      	ldr	r3, [pc, #144]	; (8007590 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 8007500:	781b      	ldrb	r3, [r3, #0]
 8007502:	461a      	mov	r2, r3
 8007504:	4b2e      	ldr	r3, [pc, #184]	; (80075c0 <HAL_DAC_ConvCpltCallbackCh1+0x17c>)
 8007506:	5c9b      	ldrb	r3, [r3, r2]
 8007508:	461a      	mov	r2, r3
 800750a:	4b23      	ldr	r3, [pc, #140]	; (8007598 <HAL_DAC_ConvCpltCallbackCh1+0x154>)
 800750c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007510:	461a      	mov	r2, r3
 8007512:	4b22      	ldr	r3, [pc, #136]	; (800759c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 8007514:	601a      	str	r2, [r3, #0]
		if(BSP_QSPI_Read((uint8_t *) SEQUENCE_COPY, (uint32_t)  test, sizeof(SEQUENCE)) != QSPI_OK)
 8007516:	4b21      	ldr	r3, [pc, #132]	; (800759c <HAL_DAC_ConvCpltCallbackCh1+0x158>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	4a21      	ldr	r2, [pc, #132]	; (80075a0 <HAL_DAC_ConvCpltCallbackCh1+0x15c>)
 800751c:	4619      	mov	r1, r3
 800751e:	4821      	ldr	r0, [pc, #132]	; (80075a4 <HAL_DAC_ConvCpltCallbackCh1+0x160>)
 8007520:	f000 f8e6 	bl	80076f0 <BSP_QSPI_Read>
 8007524:	4603      	mov	r3, r0
 8007526:	2b00      	cmp	r3, #0
 8007528:	d001      	beq.n	800752e <HAL_DAC_ConvCpltCallbackCh1+0xea>
			Error_Handler();
 800752a:	f000 f84f 	bl	80075cc <Error_Handler>

		HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*) SEQUENCE_COPY, SEQUENCE_LENGTH, DAC_ALIGN_12B_R);
 800752e:	2300      	movs	r3, #0
 8007530:	9300      	str	r3, [sp, #0]
 8007532:	f649 4340 	movw	r3, #40000	; 0x9c40
 8007536:	4a1b      	ldr	r2, [pc, #108]	; (80075a4 <HAL_DAC_ConvCpltCallbackCh1+0x160>)
 8007538:	2100      	movs	r1, #0
 800753a:	481b      	ldr	r0, [pc, #108]	; (80075a8 <HAL_DAC_ConvCpltCallbackCh1+0x164>)
 800753c:	f7f9 fa06 	bl	800094c <HAL_DAC_Start_DMA>

		if (j == 7) {
 8007540:	4b13      	ldr	r3, [pc, #76]	; (8007590 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b07      	cmp	r3, #7
 8007546:	d11a      	bne.n	800757e <HAL_DAC_ConvCpltCallbackCh1+0x13a>
			HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 8007548:	2100      	movs	r1, #0
 800754a:	4817      	ldr	r0, [pc, #92]	; (80075a8 <HAL_DAC_ConvCpltCallbackCh1+0x164>)
 800754c:	f7f9 faca 	bl	8000ae4 <HAL_DAC_Stop_DMA>
			sprintf(msg_buffer,startTypingMessage);
 8007550:	4916      	ldr	r1, [pc, #88]	; (80075ac <HAL_DAC_ConvCpltCallbackCh1+0x168>)
 8007552:	4817      	ldr	r0, [pc, #92]	; (80075b0 <HAL_DAC_ConvCpltCallbackCh1+0x16c>)
 8007554:	f000 ffc4 	bl	80084e0 <siprintf>
			HAL_UART_Transmit(&huart1, msg_buffer, strlen((char const *)msg_buffer), 100);
 8007558:	4815      	ldr	r0, [pc, #84]	; (80075b0 <HAL_DAC_ConvCpltCallbackCh1+0x16c>)
 800755a:	f7f8 fe51 	bl	8000200 <strlen>
 800755e:	4603      	mov	r3, r0
 8007560:	b29a      	uxth	r2, r3
 8007562:	2364      	movs	r3, #100	; 0x64
 8007564:	4912      	ldr	r1, [pc, #72]	; (80075b0 <HAL_DAC_ConvCpltCallbackCh1+0x16c>)
 8007566:	4813      	ldr	r0, [pc, #76]	; (80075b4 <HAL_DAC_ConvCpltCallbackCh1+0x170>)
 8007568:	f7fd ff44 	bl	80053f4 <HAL_UART_Transmit>
			answers2[0] = '\000';
 800756c:	4b15      	ldr	r3, [pc, #84]	; (80075c4 <HAL_DAC_ConvCpltCallbackCh1+0x180>)
 800756e:	2200      	movs	r2, #0
 8007570:	701a      	strb	r2, [r3, #0]
			stay_here2 = 0;
 8007572:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <HAL_DAC_ConvCpltCallbackCh1+0x184>)
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]
			j =0;
 8007578:	4b05      	ldr	r3, [pc, #20]	; (8007590 <HAL_DAC_ConvCpltCallbackCh1+0x14c>)
 800757a:	2200      	movs	r2, #0
 800757c:	701a      	strb	r2, [r3, #0]
		}
		}

	}

}
 800757e:	bf00      	nop
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	200279c5 	.word	0x200279c5
 800758c:	20027a81 	.word	0x20027a81
 8007590:	200279cc 	.word	0x200279cc
 8007594:	20000030 	.word	0x20000030
 8007598:	20000008 	.word	0x20000008
 800759c:	200279c8 	.word	0x200279c8
 80075a0:	00027100 	.word	0x00027100
 80075a4:	200008c4 	.word	0x200008c4
 80075a8:	200005d8 	.word	0x200005d8
 80075ac:	2000039c 	.word	0x2000039c
 80075b0:	200279f8 	.word	0x200279f8
 80075b4:	200007d4 	.word	0x200007d4
 80075b8:	200279d0 	.word	0x200279d0
 80075bc:	20000040 	.word	0x20000040
 80075c0:	20000038 	.word	0x20000038
 80075c4:	200279d8 	.word	0x200279d8
 80075c8:	20000044 	.word	0x20000044

080075cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	HAL_GPIO_WritePin(redLED_GPIO_Port, redLED_Pin, GPIO_PIN_RESET);
 80075d0:	2200      	movs	r2, #0
 80075d2:	2108      	movs	r1, #8
 80075d4:	4805      	ldr	r0, [pc, #20]	; (80075ec <Error_Handler+0x20>)
 80075d6:	f7fa fc87 	bl	8001ee8 <HAL_GPIO_WritePin>
	HAL_GPIO_TogglePin(greenLED_GPIO_Port, greenLED_Pin);
 80075da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80075de:	4804      	ldr	r0, [pc, #16]	; (80075f0 <Error_Handler+0x24>)
 80075e0:	f7fa fc9a 	bl	8001f18 <HAL_GPIO_TogglePin>
	__BKPT();
 80075e4:	be00      	bkpt	0x0000

  /* USER CODE END Error_Handler_Debug */
}
 80075e6:	bf00      	nop
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	bf00      	nop
 80075ec:	48001000 	.word	0x48001000
 80075f0:	48000400 	.word	0x48000400

080075f4 <BSP_QSPI_Init>:
/**
  * @brief  Initializes the QSPI interface.
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Init(void)
{ 
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b084      	sub	sp, #16
 80075f8:	af00      	add	r7, sp, #0
  OSPIHandle.Instance = OCTOSPI1;
 80075fa:	4b3b      	ldr	r3, [pc, #236]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 80075fc:	4a3b      	ldr	r2, [pc, #236]	; (80076ec <BSP_QSPI_Init+0xf8>)
 80075fe:	601a      	str	r2, [r3, #0]

  /* Call the DeInit function to reset the driver */
  if (HAL_OSPI_DeInit(&OSPIHandle) != HAL_OK)
 8007600:	4839      	ldr	r0, [pc, #228]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 8007602:	f7fa fd65 	bl	80020d0 <HAL_OSPI_DeInit>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d001      	beq.n	8007610 <BSP_QSPI_Init+0x1c>
  {
    return QSPI_ERROR;
 800760c:	2301      	movs	r3, #1
 800760e:	e067      	b.n	80076e0 <BSP_QSPI_Init+0xec>
  }
        
  /* System level initialization */
  BSP_QSPI_MspInit();
 8007610:	f000 f8c0 	bl	8007794 <BSP_QSPI_MspInit>
  
  /* QSPI initialization */
  OSPIHandle.Init.FifoThreshold         = 4;
 8007614:	4b34      	ldr	r3, [pc, #208]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 8007616:	2204      	movs	r2, #4
 8007618:	605a      	str	r2, [r3, #4]
  OSPIHandle.Init.DualQuad              = HAL_OSPI_DUALQUAD_DISABLE;
 800761a:	4b33      	ldr	r3, [pc, #204]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 800761c:	2200      	movs	r2, #0
 800761e:	609a      	str	r2, [r3, #8]
  OSPIHandle.Init.MemoryType            = HAL_OSPI_MEMTYPE_MACRONIX;
 8007620:	4b31      	ldr	r3, [pc, #196]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 8007622:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007626:	60da      	str	r2, [r3, #12]
 8007628:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800762c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	fa93 f3a3 	rbit	r3, r3
 8007634:	607b      	str	r3, [r7, #4]
  return result;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	60fb      	str	r3, [r7, #12]
  if (value == 0U)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d101      	bne.n	8007644 <BSP_QSPI_Init+0x50>
    return 32U;
 8007640:	2320      	movs	r3, #32
 8007642:	e003      	b.n	800764c <BSP_QSPI_Init+0x58>
  return __builtin_clz(value);
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	fab3 f383 	clz	r3, r3
 800764a:	b2db      	uxtb	r3, r3
  OSPIHandle.Init.DeviceSize            = POSITION_VAL(MX25R6435F_FLASH_SIZE);
 800764c:	461a      	mov	r2, r3
 800764e:	4b26      	ldr	r3, [pc, #152]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 8007650:	611a      	str	r2, [r3, #16]
  OSPIHandle.Init.ChipSelectHighTime    = 1;
 8007652:	4b25      	ldr	r3, [pc, #148]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 8007654:	2201      	movs	r2, #1
 8007656:	615a      	str	r2, [r3, #20]
  OSPIHandle.Init.FreeRunningClock      = HAL_OSPI_FREERUNCLK_DISABLE;
 8007658:	4b23      	ldr	r3, [pc, #140]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 800765a:	2200      	movs	r2, #0
 800765c:	619a      	str	r2, [r3, #24]
  OSPIHandle.Init.ClockMode             = HAL_OSPI_CLOCK_MODE_0;
 800765e:	4b22      	ldr	r3, [pc, #136]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 8007660:	2200      	movs	r2, #0
 8007662:	61da      	str	r2, [r3, #28]
  OSPIHandle.Init.ClockPrescaler        = 4; /* QSPI clock = 110MHz / ClockPrescaler = 27.5 MHz */
 8007664:	4b20      	ldr	r3, [pc, #128]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 8007666:	2204      	movs	r2, #4
 8007668:	621a      	str	r2, [r3, #32]
  OSPIHandle.Init.SampleShifting        = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 800766a:	4b1f      	ldr	r3, [pc, #124]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 800766c:	2200      	movs	r2, #0
 800766e:	625a      	str	r2, [r3, #36]	; 0x24
  OSPIHandle.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_ENABLE;
 8007670:	4b1d      	ldr	r3, [pc, #116]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 8007672:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007676:	629a      	str	r2, [r3, #40]	; 0x28
  OSPIHandle.Init.ChipSelectBoundary    = 0;
 8007678:	4b1b      	ldr	r3, [pc, #108]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 800767a:	2200      	movs	r2, #0
 800767c:	62da      	str	r2, [r3, #44]	; 0x2c
  OSPIHandle.Init.DelayBlockBypass      = HAL_OSPI_DELAY_BLOCK_USED;
 800767e:	4b1a      	ldr	r3, [pc, #104]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 8007680:	2200      	movs	r2, #0
 8007682:	631a      	str	r2, [r3, #48]	; 0x30

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 8007684:	4818      	ldr	r0, [pc, #96]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 8007686:	f7fa fc79 	bl	8001f7c <HAL_OSPI_Init>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <BSP_QSPI_Init+0xa0>
  {
    return QSPI_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e025      	b.n	80076e0 <BSP_QSPI_Init+0xec>
  }

  /* QSPI memory reset */
  if (QSPI_ResetMemory(&OSPIHandle) != QSPI_OK)
 8007694:	4814      	ldr	r0, [pc, #80]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 8007696:	f000 f8bd 	bl	8007814 <QSPI_ResetMemory>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d001      	beq.n	80076a4 <BSP_QSPI_Init+0xb0>
  {
    return QSPI_NOT_SUPPORTED;
 80076a0:	2304      	movs	r3, #4
 80076a2:	e01d      	b.n	80076e0 <BSP_QSPI_Init+0xec>
  }
 
  /* QSPI quad enable */
  if (QSPI_QuadMode(&OSPIHandle, QSPI_QUAD_ENABLE) != QSPI_OK)
 80076a4:	2101      	movs	r1, #1
 80076a6:	4810      	ldr	r0, [pc, #64]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 80076a8:	f000 f9a2 	bl	80079f0 <QSPI_QuadMode>
 80076ac:	4603      	mov	r3, r0
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d001      	beq.n	80076b6 <BSP_QSPI_Init+0xc2>
  {
    return QSPI_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e014      	b.n	80076e0 <BSP_QSPI_Init+0xec>
  }
 
  /* High performance mode enable */
  if (QSPI_HighPerfMode(&OSPIHandle, QSPI_HIGH_PERF_ENABLE) != QSPI_OK)
 80076b6:	2101      	movs	r1, #1
 80076b8:	480b      	ldr	r0, [pc, #44]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 80076ba:	f000 fa45 	bl	8007b48 <QSPI_HighPerfMode>
 80076be:	4603      	mov	r3, r0
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d001      	beq.n	80076c8 <BSP_QSPI_Init+0xd4>
  {
    return QSPI_ERROR;
 80076c4:	2301      	movs	r3, #1
 80076c6:	e00b      	b.n	80076e0 <BSP_QSPI_Init+0xec>
  }
  
  /* Re-configure the clock for the high performance mode */
  OSPIHandle.Init.ClockPrescaler = 2; /* QSPI clock = 110MHz / ClockPrescaler = 55 MHz */
 80076c8:	4b07      	ldr	r3, [pc, #28]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 80076ca:	2202      	movs	r2, #2
 80076cc:	621a      	str	r2, [r3, #32]

  if (HAL_OSPI_Init(&OSPIHandle) != HAL_OK)
 80076ce:	4806      	ldr	r0, [pc, #24]	; (80076e8 <BSP_QSPI_Init+0xf4>)
 80076d0:	f7fa fc54 	bl	8001f7c <HAL_OSPI_Init>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <BSP_QSPI_Init+0xea>
  {
    return QSPI_ERROR;
 80076da:	2301      	movs	r3, #1
 80076dc:	e000      	b.n	80076e0 <BSP_QSPI_Init+0xec>
  }

  return QSPI_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	20027a84 	.word	0x20027a84
 80076ec:	a0001000 	.word	0xa0001000

080076f0 <BSP_QSPI_Read>:
  * @param  ReadAddr : Read start address
  * @param  Size     : Size of data to read    
  * @retval QSPI memory status
  */
uint8_t BSP_QSPI_Read(uint8_t* pData, uint32_t ReadAddr, uint32_t Size)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b098      	sub	sp, #96	; 0x60
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the read command */
  sCommand.OperationType         = HAL_OSPI_OPTYPE_COMMON_CFG;
 80076fc:	2300      	movs	r3, #0
 80076fe:	613b      	str	r3, [r7, #16]
  sCommand.FlashId               = HAL_OSPI_FLASH_ID_1;
 8007700:	2300      	movs	r3, #0
 8007702:	617b      	str	r3, [r7, #20]
  sCommand.Instruction           = QUAD_INOUT_READ_CMD;
 8007704:	23eb      	movs	r3, #235	; 0xeb
 8007706:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode       = HAL_OSPI_INSTRUCTION_1_LINE;
 8007708:	2301      	movs	r3, #1
 800770a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize       = HAL_OSPI_INSTRUCTION_8_BITS;
 800770c:	2300      	movs	r3, #0
 800770e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode    = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007710:	2300      	movs	r3, #0
 8007712:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Address               = ReadAddr;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.AddressMode           = HAL_OSPI_ADDRESS_4_LINES;
 8007718:	f44f 7340 	mov.w	r3, #768	; 0x300
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AddressSize           = HAL_OSPI_ADDRESS_24_BITS;
 800771e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007722:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.AddressDtrMode        = HAL_OSPI_ADDRESS_DTR_DISABLE;
 8007724:	2300      	movs	r3, #0
 8007726:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AlternateBytes        = MX25R6435F_ALT_BYTES_NO_PE_MODE;
 8007728:	23aa      	movs	r3, #170	; 0xaa
 800772a:	63bb      	str	r3, [r7, #56]	; 0x38
  sCommand.AlternateBytesMode    = HAL_OSPI_ALTERNATE_BYTES_4_LINES;
 800772c:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8007730:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesSize    = HAL_OSPI_ALTERNATE_BYTES_8_BITS;
 8007732:	2300      	movs	r3, #0
 8007734:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.AlternateBytesDtrMode = HAL_OSPI_ALTERNATE_BYTES_DTR_DISABLE;
 8007736:	2300      	movs	r3, #0
 8007738:	647b      	str	r3, [r7, #68]	; 0x44
  sCommand.DataMode              = HAL_OSPI_DATA_4_LINES;
 800773a:	f04f 7340 	mov.w	r3, #50331648	; 0x3000000
 800773e:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.NbData                = Size;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataDtrMode           = HAL_OSPI_DATA_DTR_DISABLE;
 8007744:	2300      	movs	r3, #0
 8007746:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles           = MX25R6435F_DUMMY_CYCLES_READ_QUAD;
 8007748:	2304      	movs	r3, #4
 800774a:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.DQSMode               = HAL_OSPI_DQS_DISABLE;
 800774c:	2300      	movs	r3, #0
 800774e:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode              = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007750:	2300      	movs	r3, #0
 8007752:	65fb      	str	r3, [r7, #92]	; 0x5c
  
  /* Configure the command */
  if (HAL_OSPI_Command(&OSPIHandle, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007754:	f107 0310 	add.w	r3, r7, #16
 8007758:	f241 3288 	movw	r2, #5000	; 0x1388
 800775c:	4619      	mov	r1, r3
 800775e:	480c      	ldr	r0, [pc, #48]	; (8007790 <BSP_QSPI_Read+0xa0>)
 8007760:	f7fa fcdd 	bl	800211e <HAL_OSPI_Command>
 8007764:	4603      	mov	r3, r0
 8007766:	2b00      	cmp	r3, #0
 8007768:	d001      	beq.n	800776e <BSP_QSPI_Read+0x7e>
  {
    return QSPI_ERROR;
 800776a:	2301      	movs	r3, #1
 800776c:	e00b      	b.n	8007786 <BSP_QSPI_Read+0x96>
  }
  
  /* Reception of the data */
  if (HAL_OSPI_Receive(&OSPIHandle, pData, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800776e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007772:	68f9      	ldr	r1, [r7, #12]
 8007774:	4806      	ldr	r0, [pc, #24]	; (8007790 <BSP_QSPI_Read+0xa0>)
 8007776:	f7fa fdc6 	bl	8002306 <HAL_OSPI_Receive>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <BSP_QSPI_Read+0x94>
  {
    return QSPI_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	e000      	b.n	8007786 <BSP_QSPI_Read+0x96>
  }

  return QSPI_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3760      	adds	r7, #96	; 0x60
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}
 800778e:	bf00      	nop
 8007790:	20027a84 	.word	0x20027a84

08007794 <BSP_QSPI_MspInit>:
/**
  * @brief  Initializes the QSPI MSP.
  * @retval None
  */
__weak void BSP_QSPI_MspInit(void)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b088      	sub	sp, #32
 8007798:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct;

  /* Enable the QuadSPI memory interface clock */
  __HAL_RCC_OSPI1_CLK_ENABLE();
 800779a:	4b1c      	ldr	r3, [pc, #112]	; (800780c <BSP_QSPI_MspInit+0x78>)
 800779c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800779e:	4a1b      	ldr	r2, [pc, #108]	; (800780c <BSP_QSPI_MspInit+0x78>)
 80077a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077a4:	6513      	str	r3, [r2, #80]	; 0x50
 80077a6:	4b19      	ldr	r3, [pc, #100]	; (800780c <BSP_QSPI_MspInit+0x78>)
 80077a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077ae:	60bb      	str	r3, [r7, #8]
 80077b0:	68bb      	ldr	r3, [r7, #8]

  /* Reset the QuadSPI memory interface */
  __HAL_RCC_OSPI1_FORCE_RESET();
 80077b2:	4b16      	ldr	r3, [pc, #88]	; (800780c <BSP_QSPI_MspInit+0x78>)
 80077b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b6:	4a15      	ldr	r2, [pc, #84]	; (800780c <BSP_QSPI_MspInit+0x78>)
 80077b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077bc:	6313      	str	r3, [r2, #48]	; 0x30
  __HAL_RCC_OSPI1_RELEASE_RESET();
 80077be:	4b13      	ldr	r3, [pc, #76]	; (800780c <BSP_QSPI_MspInit+0x78>)
 80077c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077c2:	4a12      	ldr	r2, [pc, #72]	; (800780c <BSP_QSPI_MspInit+0x78>)
 80077c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80077c8:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable GPIO clocks */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80077ca:	4b10      	ldr	r3, [pc, #64]	; (800780c <BSP_QSPI_MspInit+0x78>)
 80077cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077ce:	4a0f      	ldr	r2, [pc, #60]	; (800780c <BSP_QSPI_MspInit+0x78>)
 80077d0:	f043 0310 	orr.w	r3, r3, #16
 80077d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80077d6:	4b0d      	ldr	r3, [pc, #52]	; (800780c <BSP_QSPI_MspInit+0x78>)
 80077d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80077da:	f003 0310 	and.w	r3, r3, #16
 80077de:	607b      	str	r3, [r7, #4]
 80077e0:	687b      	ldr	r3, [r7, #4]

  /* QSPI CLK, CS, D0, D1, D2 and D3 GPIO pins configuration  */
  GPIO_InitStruct.Pin       = GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 |\
 80077e2:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80077e6:	60fb      	str	r3, [r7, #12]
                              GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 80077e8:	2302      	movs	r3, #2
 80077ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull      = GPIO_NOPULL;
 80077ec:	2300      	movs	r3, #0
 80077ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80077f0:	2303      	movs	r3, #3
 80077f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80077f4:	230a      	movs	r3, #10
 80077f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80077f8:	f107 030c 	add.w	r3, r7, #12
 80077fc:	4619      	mov	r1, r3
 80077fe:	4804      	ldr	r0, [pc, #16]	; (8007810 <BSP_QSPI_MspInit+0x7c>)
 8007800:	f7fa f8ee 	bl	80019e0 <HAL_GPIO_Init>
}
 8007804:	bf00      	nop
 8007806:	3720      	adds	r7, #32
 8007808:	46bd      	mov	sp, r7
 800780a:	bd80      	pop	{r7, pc}
 800780c:	40021000 	.word	0x40021000
 8007810:	48001000 	.word	0x48001000

08007814 <QSPI_ResetMemory>:
  * @brief  This function reset the QSPI memory.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_ResetMemory(OSPI_HandleTypeDef *hospi)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b096      	sub	sp, #88	; 0x58
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;

  /* Initialize the reset enable command */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 800781c:	2300      	movs	r3, #0
 800781e:	60bb      	str	r3, [r7, #8]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007820:	2300      	movs	r3, #0
 8007822:	60fb      	str	r3, [r7, #12]
  sCommand.Instruction        = RESET_ENABLE_CMD;
 8007824:	2366      	movs	r3, #102	; 0x66
 8007826:	613b      	str	r3, [r7, #16]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007828:	2301      	movs	r3, #1
 800782a:	617b      	str	r3, [r7, #20]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 800782c:	2300      	movs	r3, #0
 800782e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007830:	2300      	movs	r3, #0
 8007832:	61fb      	str	r3, [r7, #28]
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007834:	2300      	movs	r3, #0
 8007836:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007838:	2300      	movs	r3, #0
 800783a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 800783c:	2300      	movs	r3, #0
 800783e:	643b      	str	r3, [r7, #64]	; 0x40
  sCommand.DummyCycles        = 0;
 8007840:	2300      	movs	r3, #0
 8007842:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007844:	2300      	movs	r3, #0
 8007846:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007848:	2300      	movs	r3, #0
 800784a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Send the command */
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800784c:	f107 0308 	add.w	r3, r7, #8
 8007850:	f241 3288 	movw	r2, #5000	; 0x1388
 8007854:	4619      	mov	r1, r3
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f7fa fc61 	bl	800211e <HAL_OSPI_Command>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d001      	beq.n	8007866 <QSPI_ResetMemory+0x52>
  {
    return QSPI_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e019      	b.n	800789a <QSPI_ResetMemory+0x86>
  }

  /* Send the reset memory command */
  sCommand.Instruction = RESET_MEMORY_CMD;
 8007866:	2399      	movs	r3, #153	; 0x99
 8007868:	613b      	str	r3, [r7, #16]
  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800786a:	f107 0308 	add.w	r3, r7, #8
 800786e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007872:	4619      	mov	r1, r3
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f7fa fc52 	bl	800211e <HAL_OSPI_Command>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d001      	beq.n	8007884 <QSPI_ResetMemory+0x70>
  {
    return QSPI_ERROR;
 8007880:	2301      	movs	r3, #1
 8007882:	e00a      	b.n	800789a <QSPI_ResetMemory+0x86>
  }

  /* Configure automatic polling mode to wait the memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007884:	f241 3188 	movw	r1, #5000	; 0x1388
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f866 	bl	800795a <QSPI_AutoPollingMemReady>
 800788e:	4603      	mov	r3, r0
 8007890:	2b00      	cmp	r3, #0
 8007892:	d001      	beq.n	8007898 <QSPI_ResetMemory+0x84>
  {
    return QSPI_ERROR;
 8007894:	2301      	movs	r3, #1
 8007896:	e000      	b.n	800789a <QSPI_ResetMemory+0x86>
  }

  return QSPI_OK;
 8007898:	2300      	movs	r3, #0
}
 800789a:	4618      	mov	r0, r3
 800789c:	3758      	adds	r7, #88	; 0x58
 800789e:	46bd      	mov	sp, r7
 80078a0:	bd80      	pop	{r7, pc}

080078a2 <QSPI_WriteEnable>:
  * @brief  This function send a Write Enable and wait it is effective.
  * @param  hospi : QSPI handle
  * @retval None
  */
static uint8_t QSPI_WriteEnable(OSPI_HandleTypeDef *hospi)
{
 80078a2:	b580      	push	{r7, lr}
 80078a4:	b09c      	sub	sp, #112	; 0x70
 80078a6:	af00      	add	r7, sp, #0
 80078a8:	6078      	str	r0, [r7, #4]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Enable write operations */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80078aa:	2300      	movs	r3, #0
 80078ac:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 80078ae:	2300      	movs	r3, #0
 80078b0:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = WRITE_ENABLE_CMD;
 80078b2:	2306      	movs	r3, #6
 80078b4:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 80078b6:	2301      	movs	r3, #1
 80078b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 80078ba:	2300      	movs	r3, #0
 80078bc:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 80078be:	2300      	movs	r3, #0
 80078c0:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 80078c2:	2300      	movs	r3, #0
 80078c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 80078c6:	2300      	movs	r3, #0
 80078c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_NONE;
 80078ca:	2300      	movs	r3, #0
 80078cc:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.DummyCycles        = 0;
 80078ce:	2300      	movs	r3, #0
 80078d0:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 80078d2:	2300      	movs	r3, #0
 80078d4:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 80078d6:	2300      	movs	r3, #0
 80078d8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80078da:	f107 0320 	add.w	r3, r7, #32
 80078de:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e2:	4619      	mov	r1, r3
 80078e4:	6878      	ldr	r0, [r7, #4]
 80078e6:	f7fa fc1a 	bl	800211e <HAL_OSPI_Command>
 80078ea:	4603      	mov	r3, r0
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d001      	beq.n	80078f4 <QSPI_WriteEnable+0x52>
  {
    return QSPI_ERROR;
 80078f0:	2301      	movs	r3, #1
 80078f2:	e02e      	b.n	8007952 <QSPI_WriteEnable+0xb0>
  }
  
  /* Configure automatic polling mode to wait for write enabling */  
  sConfig.Match         = MX25R6435F_SR_WEL;
 80078f4:	2302      	movs	r3, #2
 80078f6:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WEL;
 80078f8:	2302      	movs	r3, #2
 80078fa:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 8007900:	2310      	movs	r3, #16
 8007902:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 8007904:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007908:	61bb      	str	r3, [r7, #24]

  sCommand.Instruction  = READ_STATUS_REG_CMD;
 800790a:	2305      	movs	r3, #5
 800790c:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.DataMode     = HAL_OSPI_DATA_1_LINE;
 800790e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007912:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData       = 1;
 8007914:	2301      	movs	r3, #1
 8007916:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode  = HAL_OSPI_DATA_DTR_DISABLE;
 8007918:	2300      	movs	r3, #0
 800791a:	663b      	str	r3, [r7, #96]	; 0x60

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800791c:	f107 0320 	add.w	r3, r7, #32
 8007920:	f241 3288 	movw	r2, #5000	; 0x1388
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7fa fbf9 	bl	800211e <HAL_OSPI_Command>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <QSPI_WriteEnable+0x94>
  {
    return QSPI_ERROR;
 8007932:	2301      	movs	r3, #1
 8007934:	e00d      	b.n	8007952 <QSPI_WriteEnable+0xb0>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007936:	f107 030c 	add.w	r3, r7, #12
 800793a:	f241 3288 	movw	r2, #5000	; 0x1388
 800793e:	4619      	mov	r1, r3
 8007940:	6878      	ldr	r0, [r7, #4]
 8007942:	f7fa fd83 	bl	800244c <HAL_OSPI_AutoPolling>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <QSPI_WriteEnable+0xae>
  {
    return QSPI_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e000      	b.n	8007952 <QSPI_WriteEnable+0xb0>
  }

  return QSPI_OK;
 8007950:	2300      	movs	r3, #0
}
 8007952:	4618      	mov	r0, r3
 8007954:	3770      	adds	r7, #112	; 0x70
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}

0800795a <QSPI_AutoPollingMemReady>:
  * @param  hospi   : QSPI handle
  * @param  Timeout : Timeout for auto-polling
  * @retval None
  */
static uint8_t QSPI_AutoPollingMemReady(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 800795a:	b580      	push	{r7, lr}
 800795c:	b09c      	sub	sp, #112	; 0x70
 800795e:	af00      	add	r7, sp, #0
 8007960:	6078      	str	r0, [r7, #4]
 8007962:	6039      	str	r1, [r7, #0]
  OSPI_RegularCmdTypeDef sCommand;
  OSPI_AutoPollingTypeDef sConfig;

  /* Configure automatic polling mode to wait for memory ready */  
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007964:	2300      	movs	r3, #0
 8007966:	623b      	str	r3, [r7, #32]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007968:	2300      	movs	r3, #0
 800796a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 800796c:	2305      	movs	r3, #5
 800796e:	62bb      	str	r3, [r7, #40]	; 0x28
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007970:	2301      	movs	r3, #1
 8007972:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007974:	2300      	movs	r3, #0
 8007976:	633b      	str	r3, [r7, #48]	; 0x30
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007978:	2300      	movs	r3, #0
 800797a:	637b      	str	r3, [r7, #52]	; 0x34
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 800797c:	2300      	movs	r3, #0
 800797e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007980:	2300      	movs	r3, #0
 8007982:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8007984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007988:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.NbData             = 1;
 800798a:	2301      	movs	r3, #1
 800798c:	65fb      	str	r3, [r7, #92]	; 0x5c
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 800798e:	2300      	movs	r3, #0
 8007990:	663b      	str	r3, [r7, #96]	; 0x60
  sCommand.DummyCycles        = 0;
 8007992:	2300      	movs	r3, #0
 8007994:	667b      	str	r3, [r7, #100]	; 0x64
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007996:	2300      	movs	r3, #0
 8007998:	66bb      	str	r3, [r7, #104]	; 0x68
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 800799a:	2300      	movs	r3, #0
 800799c:	66fb      	str	r3, [r7, #108]	; 0x6c

  sConfig.Match         = 0;
 800799e:	2300      	movs	r3, #0
 80079a0:	60fb      	str	r3, [r7, #12]
  sConfig.Mask          = MX25R6435F_SR_WIP;
 80079a2:	2301      	movs	r3, #1
 80079a4:	613b      	str	r3, [r7, #16]
  sConfig.MatchMode     = HAL_OSPI_MATCH_MODE_AND;
 80079a6:	2300      	movs	r3, #0
 80079a8:	617b      	str	r3, [r7, #20]
  sConfig.Interval      = 0x10;
 80079aa:	2310      	movs	r3, #16
 80079ac:	61fb      	str	r3, [r7, #28]
  sConfig.AutomaticStop = HAL_OSPI_AUTOMATIC_STOP_ENABLE;
 80079ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80079b2:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80079b4:	f107 0320 	add.w	r3, r7, #32
 80079b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80079bc:	4619      	mov	r1, r3
 80079be:	6878      	ldr	r0, [r7, #4]
 80079c0:	f7fa fbad 	bl	800211e <HAL_OSPI_Command>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <QSPI_AutoPollingMemReady+0x74>
  {
    return QSPI_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e00c      	b.n	80079e8 <QSPI_AutoPollingMemReady+0x8e>
  }

  if (HAL_OSPI_AutoPolling(hospi, &sConfig, Timeout) != HAL_OK)
 80079ce:	f107 030c 	add.w	r3, r7, #12
 80079d2:	683a      	ldr	r2, [r7, #0]
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f7fa fd38 	bl	800244c <HAL_OSPI_AutoPolling>
 80079dc:	4603      	mov	r3, r0
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d001      	beq.n	80079e6 <QSPI_AutoPollingMemReady+0x8c>
  {
    return QSPI_ERROR;
 80079e2:	2301      	movs	r3, #1
 80079e4:	e000      	b.n	80079e8 <QSPI_AutoPollingMemReady+0x8e>
  }

  return QSPI_OK;
 80079e6:	2300      	movs	r3, #0
}
 80079e8:	4618      	mov	r0, r3
 80079ea:	3770      	adds	r7, #112	; 0x70
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bd80      	pop	{r7, pc}

080079f0 <QSPI_QuadMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_QUAD_ENABLE or QSPI_QUAD_DISABLE mode  
  * @retval None
  */
static uint8_t QSPI_QuadMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b098      	sub	sp, #96	; 0x60
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	460b      	mov	r3, r1
 80079fa:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg;

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 80079fc:	2300      	movs	r3, #0
 80079fe:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007a00:	2300      	movs	r3, #0
 8007a02:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8007a04:	2305      	movs	r3, #5
 8007a06:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007a10:	2300      	movs	r3, #0
 8007a12:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007a14:	2300      	movs	r3, #0
 8007a16:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8007a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a20:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8007a22:	2300      	movs	r3, #0
 8007a24:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8007a26:	2300      	movs	r3, #0
 8007a28:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007a32:	2300      	movs	r3, #0
 8007a34:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a36:	f107 0310 	add.w	r3, r7, #16
 8007a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7fa fb6c 	bl	800211e <HAL_OSPI_Command>
 8007a46:	4603      	mov	r3, r0
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d001      	beq.n	8007a50 <QSPI_QuadMode+0x60>
  {
    return QSPI_ERROR;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	e077      	b.n	8007b40 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a50:	f107 030f 	add.w	r3, r7, #15
 8007a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a58:	4619      	mov	r1, r3
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7fa fc53 	bl	8002306 <HAL_OSPI_Receive>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <QSPI_QuadMode+0x7a>
  {
    return QSPI_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e06a      	b.n	8007b40 <QSPI_QuadMode+0x150>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8007a6a:	6878      	ldr	r0, [r7, #4]
 8007a6c:	f7ff ff19 	bl	80078a2 <QSPI_WriteEnable>
 8007a70:	4603      	mov	r3, r0
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d001      	beq.n	8007a7a <QSPI_QuadMode+0x8a>
  {
    return QSPI_ERROR;
 8007a76:	2301      	movs	r3, #1
 8007a78:	e062      	b.n	8007b40 <QSPI_QuadMode+0x150>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_QUAD_ENABLE)
 8007a7a:	78fb      	ldrb	r3, [r7, #3]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d105      	bne.n	8007a8c <QSPI_QuadMode+0x9c>
  {
    SET_BIT(reg, MX25R6435F_SR_QE);
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
 8007a82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007a86:	b2db      	uxtb	r3, r3
 8007a88:	73fb      	strb	r3, [r7, #15]
 8007a8a:	e004      	b.n	8007a96 <QSPI_QuadMode+0xa6>
  }
  else
  {
    CLEAR_BIT(reg, MX25R6435F_SR_QE);
 8007a8c:	7bfb      	ldrb	r3, [r7, #15]
 8007a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	73fb      	strb	r3, [r7, #15]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8007a96:	2301      	movs	r3, #1
 8007a98:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007a9a:	f107 0310 	add.w	r3, r7, #16
 8007a9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aa2:	4619      	mov	r1, r3
 8007aa4:	6878      	ldr	r0, [r7, #4]
 8007aa6:	f7fa fb3a 	bl	800211e <HAL_OSPI_Command>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d001      	beq.n	8007ab4 <QSPI_QuadMode+0xc4>
  {
    return QSPI_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e045      	b.n	8007b40 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Transmit(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007ab4:	f107 030f 	add.w	r3, r7, #15
 8007ab8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007abc:	4619      	mov	r1, r3
 8007abe:	6878      	ldr	r0, [r7, #4]
 8007ac0:	f7fa fbae 	bl	8002220 <HAL_OSPI_Transmit>
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d001      	beq.n	8007ace <QSPI_QuadMode+0xde>
  {
    return QSPI_ERROR;
 8007aca:	2301      	movs	r3, #1
 8007acc:	e038      	b.n	8007b40 <QSPI_QuadMode+0x150>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007ace:	f241 3188 	movw	r1, #5000	; 0x1388
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff ff41 	bl	800795a <QSPI_AutoPollingMemReady>
 8007ad8:	4603      	mov	r3, r0
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <QSPI_QuadMode+0xf2>
  {
    return QSPI_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e02e      	b.n	8007b40 <QSPI_QuadMode+0x150>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_STATUS_REG_CMD;
 8007ae2:	2305      	movs	r3, #5
 8007ae4:	61bb      	str	r3, [r7, #24]

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007ae6:	f107 0310 	add.w	r3, r7, #16
 8007aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aee:	4619      	mov	r1, r3
 8007af0:	6878      	ldr	r0, [r7, #4]
 8007af2:	f7fa fb14 	bl	800211e <HAL_OSPI_Command>
 8007af6:	4603      	mov	r3, r0
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d001      	beq.n	8007b00 <QSPI_QuadMode+0x110>
  {
    return QSPI_ERROR;
 8007afc:	2301      	movs	r3, #1
 8007afe:	e01f      	b.n	8007b40 <QSPI_QuadMode+0x150>
  }

  if (HAL_OSPI_Receive(hospi, &reg, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007b00:	f107 030f 	add.w	r3, r7, #15
 8007b04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f7fa fbfb 	bl	8002306 <HAL_OSPI_Receive>
 8007b10:	4603      	mov	r3, r0
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d001      	beq.n	8007b1a <QSPI_QuadMode+0x12a>
  {
    return QSPI_ERROR;
 8007b16:	2301      	movs	r3, #1
 8007b18:	e012      	b.n	8007b40 <QSPI_QuadMode+0x150>
  }
  
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8007b1a:	7bfb      	ldrb	r3, [r7, #15]
 8007b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d102      	bne.n	8007b2a <QSPI_QuadMode+0x13a>
 8007b24:	78fb      	ldrb	r3, [r7, #3]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d007      	beq.n	8007b3a <QSPI_QuadMode+0x14a>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8007b2a:	7bfb      	ldrb	r3, [r7, #15]
 8007b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((reg & MX25R6435F_SR_QE) == 0) && (Operation == QSPI_QUAD_ENABLE)) ||
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d004      	beq.n	8007b3e <QSPI_QuadMode+0x14e>
      (((reg & MX25R6435F_SR_QE) != 0) && (Operation == QSPI_QUAD_DISABLE)))
 8007b34:	78fb      	ldrb	r3, [r7, #3]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d101      	bne.n	8007b3e <QSPI_QuadMode+0x14e>
  {
    return QSPI_ERROR;
 8007b3a:	2301      	movs	r3, #1
 8007b3c:	e000      	b.n	8007b40 <QSPI_QuadMode+0x150>
  }

  return QSPI_OK;
 8007b3e:	2300      	movs	r3, #0
}
 8007b40:	4618      	mov	r0, r3
 8007b42:	3760      	adds	r7, #96	; 0x60
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}

08007b48 <QSPI_HighPerfMode>:
  * @param  hospi     : QSPI handle
  * @param  Operation : QSPI_HIGH_PERF_ENABLE or QSPI_HIGH_PERF_DISABLE high performance mode    
  * @retval None
  */
static uint8_t QSPI_HighPerfMode(OSPI_HandleTypeDef *hospi, uint8_t Operation)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b098      	sub	sp, #96	; 0x60
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70fb      	strb	r3, [r7, #3]
  OSPI_RegularCmdTypeDef sCommand;
  uint8_t reg[3];

  /* Read status register */
  sCommand.OperationType      = HAL_OSPI_OPTYPE_COMMON_CFG;
 8007b54:	2300      	movs	r3, #0
 8007b56:	613b      	str	r3, [r7, #16]
  sCommand.FlashId            = HAL_OSPI_FLASH_ID_1;
 8007b58:	2300      	movs	r3, #0
 8007b5a:	617b      	str	r3, [r7, #20]
  sCommand.Instruction        = READ_STATUS_REG_CMD;
 8007b5c:	2305      	movs	r3, #5
 8007b5e:	61bb      	str	r3, [r7, #24]
  sCommand.InstructionMode    = HAL_OSPI_INSTRUCTION_1_LINE;
 8007b60:	2301      	movs	r3, #1
 8007b62:	61fb      	str	r3, [r7, #28]
  sCommand.InstructionSize    = HAL_OSPI_INSTRUCTION_8_BITS;
 8007b64:	2300      	movs	r3, #0
 8007b66:	623b      	str	r3, [r7, #32]
  sCommand.InstructionDtrMode = HAL_OSPI_INSTRUCTION_DTR_DISABLE;
 8007b68:	2300      	movs	r3, #0
 8007b6a:	627b      	str	r3, [r7, #36]	; 0x24
  sCommand.AddressMode        = HAL_OSPI_ADDRESS_NONE;
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sCommand.AlternateBytesMode = HAL_OSPI_ALTERNATE_BYTES_NONE;
 8007b70:	2300      	movs	r3, #0
 8007b72:	63fb      	str	r3, [r7, #60]	; 0x3c
  sCommand.DataMode           = HAL_OSPI_DATA_1_LINE;
 8007b74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b78:	64bb      	str	r3, [r7, #72]	; 0x48
  sCommand.DataDtrMode        = HAL_OSPI_DATA_DTR_DISABLE;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	653b      	str	r3, [r7, #80]	; 0x50
  sCommand.DummyCycles        = 0;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	657b      	str	r3, [r7, #84]	; 0x54
  sCommand.NbData             = 1;
 8007b82:	2301      	movs	r3, #1
 8007b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  sCommand.DQSMode            = HAL_OSPI_DQS_DISABLE;
 8007b86:	2300      	movs	r3, #0
 8007b88:	65bb      	str	r3, [r7, #88]	; 0x58
  sCommand.SIOOMode           = HAL_OSPI_SIOO_INST_EVERY_CMD;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	65fb      	str	r3, [r7, #92]	; 0x5c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007b8e:	f107 0310 	add.w	r3, r7, #16
 8007b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b96:	4619      	mov	r1, r3
 8007b98:	6878      	ldr	r0, [r7, #4]
 8007b9a:	f7fa fac0 	bl	800211e <HAL_OSPI_Command>
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d001      	beq.n	8007ba8 <QSPI_HighPerfMode+0x60>
  {
    return QSPI_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	e09a      	b.n	8007cde <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007ba8:	f107 030c 	add.w	r3, r7, #12
 8007bac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f7fa fba7 	bl	8002306 <HAL_OSPI_Receive>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d001      	beq.n	8007bc2 <QSPI_HighPerfMode+0x7a>
  {
    return QSPI_ERROR;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	e08d      	b.n	8007cde <QSPI_HighPerfMode+0x196>
  }

  /* Read configuration registers */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8007bc2:	2315      	movs	r3, #21
 8007bc4:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8007bc6:	2302      	movs	r3, #2
 8007bc8:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007bca:	f107 0310 	add.w	r3, r7, #16
 8007bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f7fa faa2 	bl	800211e <HAL_OSPI_Command>
 8007bda:	4603      	mov	r3, r0
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d001      	beq.n	8007be4 <QSPI_HighPerfMode+0x9c>
  {
    return QSPI_ERROR;
 8007be0:	2301      	movs	r3, #1
 8007be2:	e07c      	b.n	8007cde <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[1]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007be4:	f107 030c 	add.w	r3, r7, #12
 8007be8:	3301      	adds	r3, #1
 8007bea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bee:	4619      	mov	r1, r3
 8007bf0:	6878      	ldr	r0, [r7, #4]
 8007bf2:	f7fa fb88 	bl	8002306 <HAL_OSPI_Receive>
 8007bf6:	4603      	mov	r3, r0
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d001      	beq.n	8007c00 <QSPI_HighPerfMode+0xb8>
  {
    return QSPI_ERROR;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	e06e      	b.n	8007cde <QSPI_HighPerfMode+0x196>
  }

  /* Enable write operations */
  if (QSPI_WriteEnable(hospi) != QSPI_OK)
 8007c00:	6878      	ldr	r0, [r7, #4]
 8007c02:	f7ff fe4e 	bl	80078a2 <QSPI_WriteEnable>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d001      	beq.n	8007c10 <QSPI_HighPerfMode+0xc8>
  {
    return QSPI_ERROR;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	e066      	b.n	8007cde <QSPI_HighPerfMode+0x196>
  }
  
  /* Activate/deactivate the Quad mode */
  if (Operation == QSPI_HIGH_PERF_ENABLE)
 8007c10:	78fb      	ldrb	r3, [r7, #3]
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d105      	bne.n	8007c22 <QSPI_HighPerfMode+0xda>
  {
    SET_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8007c16:	7bbb      	ldrb	r3, [r7, #14]
 8007c18:	f043 0302 	orr.w	r3, r3, #2
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	73bb      	strb	r3, [r7, #14]
 8007c20:	e004      	b.n	8007c2c <QSPI_HighPerfMode+0xe4>
  }
  else
  {
    CLEAR_BIT(reg[2], MX25R6435F_CR2_LH_SWITCH);
 8007c22:	7bbb      	ldrb	r3, [r7, #14]
 8007c24:	f023 0302 	bic.w	r3, r3, #2
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	73bb      	strb	r3, [r7, #14]
  }

  sCommand.Instruction = WRITE_STATUS_CFG_REG_CMD;
 8007c2c:	2301      	movs	r3, #1
 8007c2e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 3;
 8007c30:	2303      	movs	r3, #3
 8007c32:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c34:	f107 0310 	add.w	r3, r7, #16
 8007c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f7fa fa6d 	bl	800211e <HAL_OSPI_Command>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d001      	beq.n	8007c4e <QSPI_HighPerfMode+0x106>
  {
    return QSPI_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e047      	b.n	8007cde <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Transmit(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c4e:	f107 030c 	add.w	r3, r7, #12
 8007c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c56:	4619      	mov	r1, r3
 8007c58:	6878      	ldr	r0, [r7, #4]
 8007c5a:	f7fa fae1 	bl	8002220 <HAL_OSPI_Transmit>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d001      	beq.n	8007c68 <QSPI_HighPerfMode+0x120>
  {
    return QSPI_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e03a      	b.n	8007cde <QSPI_HighPerfMode+0x196>
  }

  /* Wait that memory is ready */  
  if (QSPI_AutoPollingMemReady(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != QSPI_OK)
 8007c68:	f241 3188 	movw	r1, #5000	; 0x1388
 8007c6c:	6878      	ldr	r0, [r7, #4]
 8007c6e:	f7ff fe74 	bl	800795a <QSPI_AutoPollingMemReady>
 8007c72:	4603      	mov	r3, r0
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d001      	beq.n	8007c7c <QSPI_HighPerfMode+0x134>
  {
    return QSPI_ERROR;
 8007c78:	2301      	movs	r3, #1
 8007c7a:	e030      	b.n	8007cde <QSPI_HighPerfMode+0x196>
  }
  
  /* Check the configuration has been correctly done */
  sCommand.Instruction = READ_CFG_REG_CMD;
 8007c7c:	2315      	movs	r3, #21
 8007c7e:	61bb      	str	r3, [r7, #24]
  sCommand.NbData      = 2;
 8007c80:	2302      	movs	r3, #2
 8007c82:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (HAL_OSPI_Command(hospi, &sCommand, HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c84:	f107 0310 	add.w	r3, r7, #16
 8007c88:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f7fa fa45 	bl	800211e <HAL_OSPI_Command>
 8007c94:	4603      	mov	r3, r0
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d001      	beq.n	8007c9e <QSPI_HighPerfMode+0x156>
  {
    return QSPI_ERROR;
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	e01f      	b.n	8007cde <QSPI_HighPerfMode+0x196>
  }

  if (HAL_OSPI_Receive(hospi, &(reg[0]), HAL_OSPI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007c9e:	f107 030c 	add.w	r3, r7, #12
 8007ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ca6:	4619      	mov	r1, r3
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f7fa fb2c 	bl	8002306 <HAL_OSPI_Receive>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d001      	beq.n	8007cb8 <QSPI_HighPerfMode+0x170>
  {
    return QSPI_ERROR;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	e012      	b.n	8007cde <QSPI_HighPerfMode+0x196>
  }
  
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8007cb8:	7b7b      	ldrb	r3, [r7, #13]
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d102      	bne.n	8007cc8 <QSPI_HighPerfMode+0x180>
 8007cc2:	78fb      	ldrb	r3, [r7, #3]
 8007cc4:	2b01      	cmp	r3, #1
 8007cc6:	d007      	beq.n	8007cd8 <QSPI_HighPerfMode+0x190>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8007cc8:	7b7b      	ldrb	r3, [r7, #13]
 8007cca:	f003 0302 	and.w	r3, r3, #2
  if ((((reg[1] & MX25R6435F_CR2_LH_SWITCH) == 0) && (Operation == QSPI_HIGH_PERF_ENABLE)) ||
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d004      	beq.n	8007cdc <QSPI_HighPerfMode+0x194>
      (((reg[1] & MX25R6435F_CR2_LH_SWITCH) != 0) && (Operation == QSPI_HIGH_PERF_DISABLE)))
 8007cd2:	78fb      	ldrb	r3, [r7, #3]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d101      	bne.n	8007cdc <QSPI_HighPerfMode+0x194>
  {
    return QSPI_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e000      	b.n	8007cde <QSPI_HighPerfMode+0x196>
  }

  return QSPI_OK;
 8007cdc:	2300      	movs	r3, #0
}
 8007cde:	4618      	mov	r0, r3
 8007ce0:	3760      	adds	r7, #96	; 0x60
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	bd80      	pop	{r7, pc}
	...

08007ce8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007ce8:	b480      	push	{r7}
 8007cea:	b083      	sub	sp, #12
 8007cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cee:	4b0f      	ldr	r3, [pc, #60]	; (8007d2c <HAL_MspInit+0x44>)
 8007cf0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf2:	4a0e      	ldr	r2, [pc, #56]	; (8007d2c <HAL_MspInit+0x44>)
 8007cf4:	f043 0301 	orr.w	r3, r3, #1
 8007cf8:	6613      	str	r3, [r2, #96]	; 0x60
 8007cfa:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <HAL_MspInit+0x44>)
 8007cfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cfe:	f003 0301 	and.w	r3, r3, #1
 8007d02:	607b      	str	r3, [r7, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d06:	4b09      	ldr	r3, [pc, #36]	; (8007d2c <HAL_MspInit+0x44>)
 8007d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d0a:	4a08      	ldr	r2, [pc, #32]	; (8007d2c <HAL_MspInit+0x44>)
 8007d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d10:	6593      	str	r3, [r2, #88]	; 0x58
 8007d12:	4b06      	ldr	r3, [pc, #24]	; (8007d2c <HAL_MspInit+0x44>)
 8007d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d1a:	603b      	str	r3, [r7, #0]
 8007d1c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007d1e:	bf00      	nop
 8007d20:	370c      	adds	r7, #12
 8007d22:	46bd      	mov	sp, r7
 8007d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d28:	4770      	bx	lr
 8007d2a:	bf00      	nop
 8007d2c:	40021000 	.word	0x40021000

08007d30 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b08a      	sub	sp, #40	; 0x28
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007d38:	f107 0314 	add.w	r3, r7, #20
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	605a      	str	r2, [r3, #4]
 8007d42:	609a      	str	r2, [r3, #8]
 8007d44:	60da      	str	r2, [r3, #12]
 8007d46:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	4a2b      	ldr	r2, [pc, #172]	; (8007dfc <HAL_DAC_MspInit+0xcc>)
 8007d4e:	4293      	cmp	r3, r2
 8007d50:	d14f      	bne.n	8007df2 <HAL_DAC_MspInit+0xc2>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8007d52:	4b2b      	ldr	r3, [pc, #172]	; (8007e00 <HAL_DAC_MspInit+0xd0>)
 8007d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d56:	4a2a      	ldr	r2, [pc, #168]	; (8007e00 <HAL_DAC_MspInit+0xd0>)
 8007d58:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007d5c:	6593      	str	r3, [r2, #88]	; 0x58
 8007d5e:	4b28      	ldr	r3, [pc, #160]	; (8007e00 <HAL_DAC_MspInit+0xd0>)
 8007d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d66:	613b      	str	r3, [r7, #16]
 8007d68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007d6a:	4b25      	ldr	r3, [pc, #148]	; (8007e00 <HAL_DAC_MspInit+0xd0>)
 8007d6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d6e:	4a24      	ldr	r2, [pc, #144]	; (8007e00 <HAL_DAC_MspInit+0xd0>)
 8007d70:	f043 0301 	orr.w	r3, r3, #1
 8007d74:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007d76:	4b22      	ldr	r3, [pc, #136]	; (8007e00 <HAL_DAC_MspInit+0xd0>)
 8007d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d7a:	f003 0301 	and.w	r3, r3, #1
 8007d7e:	60fb      	str	r3, [r7, #12]
 8007d80:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8007d82:	2310      	movs	r3, #16
 8007d84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8007d86:	2303      	movs	r3, #3
 8007d88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007d8e:	f107 0314 	add.w	r3, r7, #20
 8007d92:	4619      	mov	r1, r3
 8007d94:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007d98:	f7f9 fe22 	bl	80019e0 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel1;
 8007d9c:	4b19      	ldr	r3, [pc, #100]	; (8007e04 <HAL_DAC_MspInit+0xd4>)
 8007d9e:	4a1a      	ldr	r2, [pc, #104]	; (8007e08 <HAL_DAC_MspInit+0xd8>)
 8007da0:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CH1;
 8007da2:	4b18      	ldr	r3, [pc, #96]	; (8007e04 <HAL_DAC_MspInit+0xd4>)
 8007da4:	2206      	movs	r2, #6
 8007da6:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007da8:	4b16      	ldr	r3, [pc, #88]	; (8007e04 <HAL_DAC_MspInit+0xd4>)
 8007daa:	2210      	movs	r2, #16
 8007dac:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007dae:	4b15      	ldr	r3, [pc, #84]	; (8007e04 <HAL_DAC_MspInit+0xd4>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8007db4:	4b13      	ldr	r3, [pc, #76]	; (8007e04 <HAL_DAC_MspInit+0xd4>)
 8007db6:	2280      	movs	r2, #128	; 0x80
 8007db8:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007dba:	4b12      	ldr	r3, [pc, #72]	; (8007e04 <HAL_DAC_MspInit+0xd4>)
 8007dbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dc0:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007dc2:	4b10      	ldr	r3, [pc, #64]	; (8007e04 <HAL_DAC_MspInit+0xd4>)
 8007dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007dc8:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_NORMAL;
 8007dca:	4b0e      	ldr	r3, [pc, #56]	; (8007e04 <HAL_DAC_MspInit+0xd4>)
 8007dcc:	2200      	movs	r2, #0
 8007dce:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007dd0:	4b0c      	ldr	r3, [pc, #48]	; (8007e04 <HAL_DAC_MspInit+0xd4>)
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8007dd6:	480b      	ldr	r0, [pc, #44]	; (8007e04 <HAL_DAC_MspInit+0xd4>)
 8007dd8:	f7f9 fad4 	bl	8001384 <HAL_DMA_Init>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d001      	beq.n	8007de6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8007de2:	f7ff fbf3 	bl	80075cc <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1_ch1);
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	4a06      	ldr	r2, [pc, #24]	; (8007e04 <HAL_DAC_MspInit+0xd4>)
 8007dea:	609a      	str	r2, [r3, #8]
 8007dec:	4a05      	ldr	r2, [pc, #20]	; (8007e04 <HAL_DAC_MspInit+0xd4>)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8007df2:	bf00      	nop
 8007df4:	3728      	adds	r7, #40	; 0x28
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	40007400 	.word	0x40007400
 8007e00:	40021000 	.word	0x40021000
 8007e04:	200005ec 	.word	0x200005ec
 8007e08:	40020008 	.word	0x40020008

08007e0c <HAL_DFSDM_FilterMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_filter: DFSDM_Filter handle pointer
* @retval None
*/
void HAL_DFSDM_FilterMspInit(DFSDM_Filter_HandleTypeDef* hdfsdm_filter)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b0ae      	sub	sp, #184	; 0xb8
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007e14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]
 8007e1c:	605a      	str	r2, [r3, #4]
 8007e1e:	609a      	str	r2, [r3, #8]
 8007e20:	60da      	str	r2, [r3, #12]
 8007e22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007e24:	f107 0310 	add.w	r3, r7, #16
 8007e28:	2294      	movs	r2, #148	; 0x94
 8007e2a:	2100      	movs	r1, #0
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f000 fb4f 	bl	80084d0 <memset>
  if(DFSDM1_Init == 0)
 8007e32:	4b45      	ldr	r3, [pc, #276]	; (8007f48 <HAL_DFSDM_FilterMspInit+0x13c>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d14b      	bne.n	8007ed2 <HAL_DFSDM_FilterMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8007e3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007e3e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8007e40:	2300      	movs	r3, #0
 8007e42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007e46:	f107 0310 	add.w	r3, r7, #16
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fc f8ae 	bl	8003fac <HAL_RCCEx_PeriphCLKConfig>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <HAL_DFSDM_FilterMspInit+0x4e>
    {
      Error_Handler();
 8007e56:	f7ff fbb9 	bl	80075cc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8007e5a:	4b3c      	ldr	r3, [pc, #240]	; (8007f4c <HAL_DFSDM_FilterMspInit+0x140>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	4a3a      	ldr	r2, [pc, #232]	; (8007f4c <HAL_DFSDM_FilterMspInit+0x140>)
 8007e62:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8007e64:	4b39      	ldr	r3, [pc, #228]	; (8007f4c <HAL_DFSDM_FilterMspInit+0x140>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b01      	cmp	r3, #1
 8007e6a:	d10b      	bne.n	8007e84 <HAL_DFSDM_FilterMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8007e6c:	4b38      	ldr	r3, [pc, #224]	; (8007f50 <HAL_DFSDM_FilterMspInit+0x144>)
 8007e6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e70:	4a37      	ldr	r2, [pc, #220]	; (8007f50 <HAL_DFSDM_FilterMspInit+0x144>)
 8007e72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e76:	6613      	str	r3, [r2, #96]	; 0x60
 8007e78:	4b35      	ldr	r3, [pc, #212]	; (8007f50 <HAL_DFSDM_FilterMspInit+0x144>)
 8007e7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007e7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e80:	60fb      	str	r3, [r7, #12]
 8007e82:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007e84:	4b32      	ldr	r3, [pc, #200]	; (8007f50 <HAL_DFSDM_FilterMspInit+0x144>)
 8007e86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e88:	4a31      	ldr	r2, [pc, #196]	; (8007f50 <HAL_DFSDM_FilterMspInit+0x144>)
 8007e8a:	f043 0310 	orr.w	r3, r3, #16
 8007e8e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007e90:	4b2f      	ldr	r3, [pc, #188]	; (8007f50 <HAL_DFSDM_FilterMspInit+0x144>)
 8007e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e94:	f003 0310 	and.w	r3, r3, #16
 8007e98:	60bb      	str	r3, [r7, #8]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8007e9c:	f44f 7320 	mov.w	r3, #640	; 0x280
 8007ea0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ea4:	2302      	movs	r3, #2
 8007ea6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8007eb6:	2306      	movs	r3, #6
 8007eb8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007ebc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	4824      	ldr	r0, [pc, #144]	; (8007f54 <HAL_DFSDM_FilterMspInit+0x148>)
 8007ec4:	f7f9 fd8c 	bl	80019e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8007ec8:	4b1f      	ldr	r3, [pc, #124]	; (8007f48 <HAL_DFSDM_FilterMspInit+0x13c>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	3301      	adds	r3, #1
 8007ece:	4a1e      	ldr	r2, [pc, #120]	; (8007f48 <HAL_DFSDM_FilterMspInit+0x13c>)
 8007ed0:	6013      	str	r3, [r2, #0]
  }

    /* DFSDM1 DMA Init */
    /* DFSDM1_FLT0 Init */
  if(hdfsdm_filter->Instance == DFSDM1_Filter0){
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a20      	ldr	r2, [pc, #128]	; (8007f58 <HAL_DFSDM_FilterMspInit+0x14c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d130      	bne.n	8007f3e <HAL_DFSDM_FilterMspInit+0x132>
    hdma_dfsdm1_flt0.Instance = DMA1_Channel2;
 8007edc:	4b1f      	ldr	r3, [pc, #124]	; (8007f5c <HAL_DFSDM_FilterMspInit+0x150>)
 8007ede:	4a20      	ldr	r2, [pc, #128]	; (8007f60 <HAL_DFSDM_FilterMspInit+0x154>)
 8007ee0:	601a      	str	r2, [r3, #0]
    hdma_dfsdm1_flt0.Init.Request = DMA_REQUEST_DFSDM1_FLT0;
 8007ee2:	4b1e      	ldr	r3, [pc, #120]	; (8007f5c <HAL_DFSDM_FilterMspInit+0x150>)
 8007ee4:	2256      	movs	r2, #86	; 0x56
 8007ee6:	605a      	str	r2, [r3, #4]
    hdma_dfsdm1_flt0.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007ee8:	4b1c      	ldr	r3, [pc, #112]	; (8007f5c <HAL_DFSDM_FilterMspInit+0x150>)
 8007eea:	2200      	movs	r2, #0
 8007eec:	609a      	str	r2, [r3, #8]
    hdma_dfsdm1_flt0.Init.PeriphInc = DMA_PINC_DISABLE;
 8007eee:	4b1b      	ldr	r3, [pc, #108]	; (8007f5c <HAL_DFSDM_FilterMspInit+0x150>)
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	60da      	str	r2, [r3, #12]
    hdma_dfsdm1_flt0.Init.MemInc = DMA_MINC_ENABLE;
 8007ef4:	4b19      	ldr	r3, [pc, #100]	; (8007f5c <HAL_DFSDM_FilterMspInit+0x150>)
 8007ef6:	2280      	movs	r2, #128	; 0x80
 8007ef8:	611a      	str	r2, [r3, #16]
    hdma_dfsdm1_flt0.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007efa:	4b18      	ldr	r3, [pc, #96]	; (8007f5c <HAL_DFSDM_FilterMspInit+0x150>)
 8007efc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f00:	615a      	str	r2, [r3, #20]
    hdma_dfsdm1_flt0.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007f02:	4b16      	ldr	r3, [pc, #88]	; (8007f5c <HAL_DFSDM_FilterMspInit+0x150>)
 8007f04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f08:	619a      	str	r2, [r3, #24]
    hdma_dfsdm1_flt0.Init.Mode = DMA_NORMAL;
 8007f0a:	4b14      	ldr	r3, [pc, #80]	; (8007f5c <HAL_DFSDM_FilterMspInit+0x150>)
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	61da      	str	r2, [r3, #28]
    hdma_dfsdm1_flt0.Init.Priority = DMA_PRIORITY_LOW;
 8007f10:	4b12      	ldr	r3, [pc, #72]	; (8007f5c <HAL_DFSDM_FilterMspInit+0x150>)
 8007f12:	2200      	movs	r2, #0
 8007f14:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dfsdm1_flt0) != HAL_OK)
 8007f16:	4811      	ldr	r0, [pc, #68]	; (8007f5c <HAL_DFSDM_FilterMspInit+0x150>)
 8007f18:	f7f9 fa34 	bl	8001384 <HAL_DMA_Init>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d001      	beq.n	8007f26 <HAL_DFSDM_FilterMspInit+0x11a>
    {
      Error_Handler();
 8007f22:	f7ff fb53 	bl	80075cc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hdfsdm_filter,hdmaInj,hdma_dfsdm1_flt0);
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	4a0c      	ldr	r2, [pc, #48]	; (8007f5c <HAL_DFSDM_FilterMspInit+0x150>)
 8007f2a:	62da      	str	r2, [r3, #44]	; 0x2c
 8007f2c:	4a0b      	ldr	r2, [pc, #44]	; (8007f5c <HAL_DFSDM_FilterMspInit+0x150>)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6293      	str	r3, [r2, #40]	; 0x28
    __HAL_LINKDMA(hdfsdm_filter,hdmaReg,hdma_dfsdm1_flt0);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a09      	ldr	r2, [pc, #36]	; (8007f5c <HAL_DFSDM_FilterMspInit+0x150>)
 8007f36:	629a      	str	r2, [r3, #40]	; 0x28
 8007f38:	4a08      	ldr	r2, [pc, #32]	; (8007f5c <HAL_DFSDM_FilterMspInit+0x150>)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6293      	str	r3, [r2, #40]	; 0x28
  }

}
 8007f3e:	bf00      	nop
 8007f40:	37b8      	adds	r7, #184	; 0xb8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}
 8007f46:	bf00      	nop
 8007f48:	20027ad8 	.word	0x20027ad8
 8007f4c:	20027ad4 	.word	0x20027ad4
 8007f50:	40021000 	.word	0x40021000
 8007f54:	48001000 	.word	0x48001000
 8007f58:	40016100 	.word	0x40016100
 8007f5c:	200006d8 	.word	0x200006d8
 8007f60:	4002001c 	.word	0x4002001c

08007f64 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b0ae      	sub	sp, #184	; 0xb8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8007f70:	2200      	movs	r2, #0
 8007f72:	601a      	str	r2, [r3, #0]
 8007f74:	605a      	str	r2, [r3, #4]
 8007f76:	609a      	str	r2, [r3, #8]
 8007f78:	60da      	str	r2, [r3, #12]
 8007f7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007f7c:	f107 0310 	add.w	r3, r7, #16
 8007f80:	2294      	movs	r2, #148	; 0x94
 8007f82:	2100      	movs	r1, #0
 8007f84:	4618      	mov	r0, r3
 8007f86:	f000 faa3 	bl	80084d0 <memset>
  if(DFSDM1_Init == 0)
 8007f8a:	4b2a      	ldr	r3, [pc, #168]	; (8008034 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d14b      	bne.n	800802a <HAL_DFSDM_ChannelMspInit+0xc6>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8007f92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007f96:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007f9e:	f107 0310 	add.w	r3, r7, #16
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fc f802 	bl	8003fac <HAL_RCCEx_PeriphCLKConfig>
 8007fa8:	4603      	mov	r3, r0
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d001      	beq.n	8007fb2 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8007fae:	f7ff fb0d 	bl	80075cc <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_DFSDM1_CLK_ENABLED++;
 8007fb2:	4b21      	ldr	r3, [pc, #132]	; (8008038 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	3301      	adds	r3, #1
 8007fb8:	4a1f      	ldr	r2, [pc, #124]	; (8008038 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8007fba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_DFSDM1_CLK_ENABLED==1){
 8007fbc:	4b1e      	ldr	r3, [pc, #120]	; (8008038 <HAL_DFSDM_ChannelMspInit+0xd4>)
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2b01      	cmp	r3, #1
 8007fc2:	d10b      	bne.n	8007fdc <HAL_DFSDM_ChannelMspInit+0x78>
      __HAL_RCC_DFSDM1_CLK_ENABLE();
 8007fc4:	4b1d      	ldr	r3, [pc, #116]	; (800803c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8007fc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fc8:	4a1c      	ldr	r2, [pc, #112]	; (800803c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8007fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fce:	6613      	str	r3, [r2, #96]	; 0x60
 8007fd0:	4b1a      	ldr	r3, [pc, #104]	; (800803c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8007fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fd8:	60fb      	str	r3, [r7, #12]
 8007fda:	68fb      	ldr	r3, [r7, #12]
    }

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8007fdc:	4b17      	ldr	r3, [pc, #92]	; (800803c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8007fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fe0:	4a16      	ldr	r2, [pc, #88]	; (800803c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8007fe2:	f043 0310 	orr.w	r3, r3, #16
 8007fe6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007fe8:	4b14      	ldr	r3, [pc, #80]	; (800803c <HAL_DFSDM_ChannelMspInit+0xd8>)
 8007fea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fec:	f003 0310 	and.w	r3, r3, #16
 8007ff0:	60bb      	str	r3, [r7, #8]
 8007ff2:	68bb      	ldr	r3, [r7, #8]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_9;
 8007ff4:	f44f 7320 	mov.w	r3, #640	; 0x280
 8007ff8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008002:	2300      	movs	r3, #0
 8008004:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008008:	2300      	movs	r3, #0
 800800a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 800800e:	2306      	movs	r3, #6
 8008010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8008014:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8008018:	4619      	mov	r1, r3
 800801a:	4809      	ldr	r0, [pc, #36]	; (8008040 <HAL_DFSDM_ChannelMspInit+0xdc>)
 800801c:	f7f9 fce0 	bl	80019e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8008020:	4b04      	ldr	r3, [pc, #16]	; (8008034 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	3301      	adds	r3, #1
 8008026:	4a03      	ldr	r2, [pc, #12]	; (8008034 <HAL_DFSDM_ChannelMspInit+0xd0>)
 8008028:	6013      	str	r3, [r2, #0]
  }

}
 800802a:	bf00      	nop
 800802c:	37b8      	adds	r7, #184	; 0xb8
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20027ad8 	.word	0x20027ad8
 8008038:	20027ad4 	.word	0x20027ad4
 800803c:	40021000 	.word	0x40021000
 8008040:	48001000 	.word	0x48001000

08008044 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b0b0      	sub	sp, #192	; 0xc0
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800804c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008050:	2200      	movs	r2, #0
 8008052:	601a      	str	r2, [r3, #0]
 8008054:	605a      	str	r2, [r3, #4]
 8008056:	609a      	str	r2, [r3, #8]
 8008058:	60da      	str	r2, [r3, #12]
 800805a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800805c:	f107 0318 	add.w	r3, r7, #24
 8008060:	2294      	movs	r2, #148	; 0x94
 8008062:	2100      	movs	r1, #0
 8008064:	4618      	mov	r0, r3
 8008066:	f000 fa33 	bl	80084d0 <memset>
  if(hospi->Instance==OCTOSPI1)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	4a28      	ldr	r2, [pc, #160]	; (8008110 <HAL_OSPI_MspInit+0xcc>)
 8008070:	4293      	cmp	r3, r2
 8008072:	d149      	bne.n	8008108 <HAL_OSPI_MspInit+0xc4>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8008074:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008078:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 800807a:	2300      	movs	r3, #0
 800807c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8008080:	f107 0318 	add.w	r3, r7, #24
 8008084:	4618      	mov	r0, r3
 8008086:	f7fb ff91 	bl	8003fac <HAL_RCCEx_PeriphCLKConfig>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d001      	beq.n	8008094 <HAL_OSPI_MspInit+0x50>
    {
      Error_Handler();
 8008090:	f7ff fa9c 	bl	80075cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPIM_CLK_ENABLE();
 8008094:	4b1f      	ldr	r3, [pc, #124]	; (8008114 <HAL_OSPI_MspInit+0xd0>)
 8008096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008098:	4a1e      	ldr	r2, [pc, #120]	; (8008114 <HAL_OSPI_MspInit+0xd0>)
 800809a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800809e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080a0:	4b1c      	ldr	r3, [pc, #112]	; (8008114 <HAL_OSPI_MspInit+0xd0>)
 80080a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_OSPI1_CLK_ENABLE();
 80080ac:	4b19      	ldr	r3, [pc, #100]	; (8008114 <HAL_OSPI_MspInit+0xd0>)
 80080ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b0:	4a18      	ldr	r2, [pc, #96]	; (8008114 <HAL_OSPI_MspInit+0xd0>)
 80080b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080b6:	6513      	str	r3, [r2, #80]	; 0x50
 80080b8:	4b16      	ldr	r3, [pc, #88]	; (8008114 <HAL_OSPI_MspInit+0xd0>)
 80080ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c0:	613b      	str	r3, [r7, #16]
 80080c2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80080c4:	4b13      	ldr	r3, [pc, #76]	; (8008114 <HAL_OSPI_MspInit+0xd0>)
 80080c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080c8:	4a12      	ldr	r2, [pc, #72]	; (8008114 <HAL_OSPI_MspInit+0xd0>)
 80080ca:	f043 0310 	orr.w	r3, r3, #16
 80080ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80080d0:	4b10      	ldr	r3, [pc, #64]	; (8008114 <HAL_OSPI_MspInit+0xd0>)
 80080d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80080d4:	f003 0310 	and.w	r3, r3, #16
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 80080dc:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 80080e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_14|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80080e4:	2302      	movs	r3, #2
 80080e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80080ea:	2300      	movs	r3, #0
 80080ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80080f0:	2303      	movs	r3, #3
 80080f2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPIM_P1;
 80080f6:	230a      	movs	r3, #10
 80080f8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80080fc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8008100:	4619      	mov	r1, r3
 8008102:	4805      	ldr	r0, [pc, #20]	; (8008118 <HAL_OSPI_MspInit+0xd4>)
 8008104:	f7f9 fc6c 	bl	80019e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 8008108:	bf00      	nop
 800810a:	37c0      	adds	r7, #192	; 0xc0
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	a0001000 	.word	0xa0001000
 8008114:	40021000 	.word	0x40021000
 8008118:	48001000 	.word	0x48001000

0800811c <HAL_OSPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspDeInit(OSPI_HandleTypeDef* hospi)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  if(hospi->Instance==OCTOSPI1)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a0b      	ldr	r2, [pc, #44]	; (8008158 <HAL_OSPI_MspDeInit+0x3c>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d110      	bne.n	8008150 <HAL_OSPI_MspDeInit+0x34>
  {
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 0 */

  /* USER CODE END OCTOSPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_OSPIM_CLK_DISABLE();
 800812e:	4b0b      	ldr	r3, [pc, #44]	; (800815c <HAL_OSPI_MspDeInit+0x40>)
 8008130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008132:	4a0a      	ldr	r2, [pc, #40]	; (800815c <HAL_OSPI_MspDeInit+0x40>)
 8008134:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008138:	64d3      	str	r3, [r2, #76]	; 0x4c
    __HAL_RCC_OSPI1_CLK_DISABLE();
 800813a:	4b08      	ldr	r3, [pc, #32]	; (800815c <HAL_OSPI_MspDeInit+0x40>)
 800813c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800813e:	4a07      	ldr	r2, [pc, #28]	; (800815c <HAL_OSPI_MspDeInit+0x40>)
 8008140:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008144:	6513      	str	r3, [r2, #80]	; 0x50
    PE12     ------> OCTOSPIM_P1_IO0
    PE13     ------> OCTOSPIM_P1_IO1
    PE14     ------> OCTOSPIM_P1_IO2
    PE15     ------> OCTOSPIM_P1_IO3
    */
    HAL_GPIO_DeInit(GPIOE, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
 8008146:	f44f 417c 	mov.w	r1, #64512	; 0xfc00
 800814a:	4805      	ldr	r0, [pc, #20]	; (8008160 <HAL_OSPI_MspDeInit+0x44>)
 800814c:	f7f9 fdda 	bl	8001d04 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN OCTOSPI1_MspDeInit 1 */

  /* USER CODE END OCTOSPI1_MspDeInit 1 */
  }

}
 8008150:	bf00      	nop
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	a0001000 	.word	0xa0001000
 800815c:	40021000 	.word	0x40021000
 8008160:	48001000 	.word	0x48001000

08008164 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	b084      	sub	sp, #16
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008174:	d113      	bne.n	800819e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008176:	4b0c      	ldr	r3, [pc, #48]	; (80081a8 <HAL_TIM_Base_MspInit+0x44>)
 8008178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800817a:	4a0b      	ldr	r2, [pc, #44]	; (80081a8 <HAL_TIM_Base_MspInit+0x44>)
 800817c:	f043 0301 	orr.w	r3, r3, #1
 8008180:	6593      	str	r3, [r2, #88]	; 0x58
 8008182:	4b09      	ldr	r3, [pc, #36]	; (80081a8 <HAL_TIM_Base_MspInit+0x44>)
 8008184:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008186:	f003 0301 	and.w	r3, r3, #1
 800818a:	60fb      	str	r3, [r7, #12]
 800818c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800818e:	2200      	movs	r2, #0
 8008190:	2100      	movs	r1, #0
 8008192:	201c      	movs	r0, #28
 8008194:	f7f8 fb81 	bl	800089a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8008198:	201c      	movs	r0, #28
 800819a:	f7f8 fb9a 	bl	80008d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800819e:	bf00      	nop
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	40021000 	.word	0x40021000

080081ac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80081ac:	b580      	push	{r7, lr}
 80081ae:	b0ae      	sub	sp, #184	; 0xb8
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80081b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80081b8:	2200      	movs	r2, #0
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	605a      	str	r2, [r3, #4]
 80081be:	609a      	str	r2, [r3, #8]
 80081c0:	60da      	str	r2, [r3, #12]
 80081c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80081c4:	f107 0310 	add.w	r3, r7, #16
 80081c8:	2294      	movs	r2, #148	; 0x94
 80081ca:	2100      	movs	r1, #0
 80081cc:	4618      	mov	r0, r3
 80081ce:	f000 f97f 	bl	80084d0 <memset>
  if(huart->Instance==USART1)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a39      	ldr	r2, [pc, #228]	; (80082bc <HAL_UART_MspInit+0x110>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	d16b      	bne.n	80082b4 <HAL_UART_MspInit+0x108>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80081dc:	2301      	movs	r3, #1
 80081de:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80081e0:	2300      	movs	r3, #0
 80081e2:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80081e4:	f107 0310 	add.w	r3, r7, #16
 80081e8:	4618      	mov	r0, r3
 80081ea:	f7fb fedf 	bl	8003fac <HAL_RCCEx_PeriphCLKConfig>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d001      	beq.n	80081f8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80081f4:	f7ff f9ea 	bl	80075cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80081f8:	4b31      	ldr	r3, [pc, #196]	; (80082c0 <HAL_UART_MspInit+0x114>)
 80081fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081fc:	4a30      	ldr	r2, [pc, #192]	; (80082c0 <HAL_UART_MspInit+0x114>)
 80081fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008202:	6613      	str	r3, [r2, #96]	; 0x60
 8008204:	4b2e      	ldr	r3, [pc, #184]	; (80082c0 <HAL_UART_MspInit+0x114>)
 8008206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800820c:	60fb      	str	r3, [r7, #12]
 800820e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008210:	4b2b      	ldr	r3, [pc, #172]	; (80082c0 <HAL_UART_MspInit+0x114>)
 8008212:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008214:	4a2a      	ldr	r2, [pc, #168]	; (80082c0 <HAL_UART_MspInit+0x114>)
 8008216:	f043 0302 	orr.w	r3, r3, #2
 800821a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800821c:	4b28      	ldr	r3, [pc, #160]	; (80082c0 <HAL_UART_MspInit+0x114>)
 800821e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008220:	f003 0302 	and.w	r3, r3, #2
 8008224:	60bb      	str	r3, [r7, #8]
 8008226:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008228:	23c0      	movs	r3, #192	; 0xc0
 800822a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800822e:	2302      	movs	r3, #2
 8008230:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008234:	2300      	movs	r3, #0
 8008236:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800823a:	2303      	movs	r3, #3
 800823c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008240:	2307      	movs	r3, #7
 8008242:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008246:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800824a:	4619      	mov	r1, r3
 800824c:	481d      	ldr	r0, [pc, #116]	; (80082c4 <HAL_UART_MspInit+0x118>)
 800824e:	f7f9 fbc7 	bl	80019e0 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel3;
 8008252:	4b1d      	ldr	r3, [pc, #116]	; (80082c8 <HAL_UART_MspInit+0x11c>)
 8008254:	4a1d      	ldr	r2, [pc, #116]	; (80082cc <HAL_UART_MspInit+0x120>)
 8008256:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 8008258:	4b1b      	ldr	r3, [pc, #108]	; (80082c8 <HAL_UART_MspInit+0x11c>)
 800825a:	2218      	movs	r2, #24
 800825c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800825e:	4b1a      	ldr	r3, [pc, #104]	; (80082c8 <HAL_UART_MspInit+0x11c>)
 8008260:	2200      	movs	r2, #0
 8008262:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008264:	4b18      	ldr	r3, [pc, #96]	; (80082c8 <HAL_UART_MspInit+0x11c>)
 8008266:	2200      	movs	r2, #0
 8008268:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800826a:	4b17      	ldr	r3, [pc, #92]	; (80082c8 <HAL_UART_MspInit+0x11c>)
 800826c:	2280      	movs	r2, #128	; 0x80
 800826e:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008270:	4b15      	ldr	r3, [pc, #84]	; (80082c8 <HAL_UART_MspInit+0x11c>)
 8008272:	2200      	movs	r2, #0
 8008274:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008276:	4b14      	ldr	r3, [pc, #80]	; (80082c8 <HAL_UART_MspInit+0x11c>)
 8008278:	2200      	movs	r2, #0
 800827a:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 800827c:	4b12      	ldr	r3, [pc, #72]	; (80082c8 <HAL_UART_MspInit+0x11c>)
 800827e:	2200      	movs	r2, #0
 8008280:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008282:	4b11      	ldr	r3, [pc, #68]	; (80082c8 <HAL_UART_MspInit+0x11c>)
 8008284:	2200      	movs	r2, #0
 8008286:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8008288:	480f      	ldr	r0, [pc, #60]	; (80082c8 <HAL_UART_MspInit+0x11c>)
 800828a:	f7f9 f87b 	bl	8001384 <HAL_DMA_Init>
 800828e:	4603      	mov	r3, r0
 8008290:	2b00      	cmp	r3, #0
 8008292:	d001      	beq.n	8008298 <HAL_UART_MspInit+0xec>
    {
      Error_Handler();
 8008294:	f7ff f99a 	bl	80075cc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	4a0b      	ldr	r2, [pc, #44]	; (80082c8 <HAL_UART_MspInit+0x11c>)
 800829c:	67da      	str	r2, [r3, #124]	; 0x7c
 800829e:	4a0a      	ldr	r2, [pc, #40]	; (80082c8 <HAL_UART_MspInit+0x11c>)
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80082a4:	2200      	movs	r2, #0
 80082a6:	2100      	movs	r1, #0
 80082a8:	2025      	movs	r0, #37	; 0x25
 80082aa:	f7f8 faf6 	bl	800089a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80082ae:	2025      	movs	r0, #37	; 0x25
 80082b0:	f7f8 fb0f 	bl	80008d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80082b4:	bf00      	nop
 80082b6:	37b8      	adds	r7, #184	; 0xb8
 80082b8:	46bd      	mov	sp, r7
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	40013800 	.word	0x40013800
 80082c0:	40021000 	.word	0x40021000
 80082c4:	48000400 	.word	0x48000400
 80082c8:	20000864 	.word	0x20000864
 80082cc:	40020030 	.word	0x40020030

080082d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80082d0:	b480      	push	{r7}
 80082d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80082d4:	e7fe      	b.n	80082d4 <NMI_Handler+0x4>

080082d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80082d6:	b480      	push	{r7}
 80082d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80082da:	e7fe      	b.n	80082da <HardFault_Handler+0x4>

080082dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80082dc:	b480      	push	{r7}
 80082de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80082e0:	e7fe      	b.n	80082e0 <MemManage_Handler+0x4>

080082e2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80082e2:	b480      	push	{r7}
 80082e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80082e6:	e7fe      	b.n	80082e6 <BusFault_Handler+0x4>

080082e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80082e8:	b480      	push	{r7}
 80082ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80082ec:	e7fe      	b.n	80082ec <UsageFault_Handler+0x4>

080082ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80082ee:	b480      	push	{r7}
 80082f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80082f2:	bf00      	nop
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80082fc:	b480      	push	{r7}
 80082fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008300:	bf00      	nop
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr

0800830a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800830a:	b480      	push	{r7}
 800830c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800830e:	bf00      	nop
 8008310:	46bd      	mov	sp, r7
 8008312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008316:	4770      	bx	lr

08008318 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800831c:	f7f8 f99e 	bl	800065c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008320:	bf00      	nop
 8008322:	bd80      	pop	{r7, pc}

08008324 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008324:	b580      	push	{r7, lr}
 8008326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8008328:	4802      	ldr	r0, [pc, #8]	; (8008334 <DMA1_Channel1_IRQHandler+0x10>)
 800832a:	f7f9 fa09 	bl	8001740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800832e:	bf00      	nop
 8008330:	bd80      	pop	{r7, pc}
 8008332:	bf00      	nop
 8008334:	200005ec 	.word	0x200005ec

08008338 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dfsdm1_flt0);
 800833c:	4802      	ldr	r0, [pc, #8]	; (8008348 <DMA1_Channel2_IRQHandler+0x10>)
 800833e:	f7f9 f9ff 	bl	8001740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008342:	bf00      	nop
 8008344:	bd80      	pop	{r7, pc}
 8008346:	bf00      	nop
 8008348:	200006d8 	.word	0x200006d8

0800834c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8008350:	4802      	ldr	r0, [pc, #8]	; (800835c <DMA1_Channel3_IRQHandler+0x10>)
 8008352:	f7f9 f9f5 	bl	8001740 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8008356:	bf00      	nop
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	20000864 	.word	0x20000864

08008360 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8008364:	4802      	ldr	r0, [pc, #8]	; (8008370 <TIM2_IRQHandler+0x10>)
 8008366:	f7fc fc01 	bl	8004b6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800836a:	bf00      	nop
 800836c:	bd80      	pop	{r7, pc}
 800836e:	bf00      	nop
 8008370:	20000788 	.word	0x20000788

08008374 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008378:	4802      	ldr	r0, [pc, #8]	; (8008384 <USART1_IRQHandler+0x10>)
 800837a:	f7fd f9a7 	bl	80056cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800837e:	bf00      	nop
 8008380:	bd80      	pop	{r7, pc}
 8008382:	bf00      	nop
 8008384:	200007d4 	.word	0x200007d4

08008388 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(pushButton_Pin);
 800838c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8008390:	f7f9 fddc 	bl	8001f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8008394:	bf00      	nop
 8008396:	bd80      	pop	{r7, pc}

08008398 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b086      	sub	sp, #24
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80083a0:	4a14      	ldr	r2, [pc, #80]	; (80083f4 <_sbrk+0x5c>)
 80083a2:	4b15      	ldr	r3, [pc, #84]	; (80083f8 <_sbrk+0x60>)
 80083a4:	1ad3      	subs	r3, r2, r3
 80083a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80083ac:	4b13      	ldr	r3, [pc, #76]	; (80083fc <_sbrk+0x64>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d102      	bne.n	80083ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80083b4:	4b11      	ldr	r3, [pc, #68]	; (80083fc <_sbrk+0x64>)
 80083b6:	4a12      	ldr	r2, [pc, #72]	; (8008400 <_sbrk+0x68>)
 80083b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80083ba:	4b10      	ldr	r3, [pc, #64]	; (80083fc <_sbrk+0x64>)
 80083bc:	681a      	ldr	r2, [r3, #0]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	4413      	add	r3, r2
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	429a      	cmp	r2, r3
 80083c6:	d207      	bcs.n	80083d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80083c8:	f000 f858 	bl	800847c <__errno>
 80083cc:	4603      	mov	r3, r0
 80083ce:	220c      	movs	r2, #12
 80083d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80083d2:	f04f 33ff 	mov.w	r3, #4294967295
 80083d6:	e009      	b.n	80083ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80083d8:	4b08      	ldr	r3, [pc, #32]	; (80083fc <_sbrk+0x64>)
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80083de:	4b07      	ldr	r3, [pc, #28]	; (80083fc <_sbrk+0x64>)
 80083e0:	681a      	ldr	r2, [r3, #0]
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4413      	add	r3, r2
 80083e6:	4a05      	ldr	r2, [pc, #20]	; (80083fc <_sbrk+0x64>)
 80083e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80083ea:	68fb      	ldr	r3, [r7, #12]
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3718      	adds	r7, #24
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}
 80083f4:	200a0000 	.word	0x200a0000
 80083f8:	00000400 	.word	0x00000400
 80083fc:	20027adc 	.word	0x20027adc
 8008400:	20027af0 	.word	0x20027af0

08008404 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8008408:	4b06      	ldr	r3, [pc, #24]	; (8008424 <SystemInit+0x20>)
 800840a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800840e:	4a05      	ldr	r2, [pc, #20]	; (8008424 <SystemInit+0x20>)
 8008410:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008414:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8008418:	bf00      	nop
 800841a:	46bd      	mov	sp, r7
 800841c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008420:	4770      	bx	lr
 8008422:	bf00      	nop
 8008424:	e000ed00 	.word	0xe000ed00

08008428 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8008428:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008460 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800842c:	f7ff ffea 	bl	8008404 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008430:	480c      	ldr	r0, [pc, #48]	; (8008464 <LoopForever+0x6>)
  ldr r1, =_edata
 8008432:	490d      	ldr	r1, [pc, #52]	; (8008468 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008434:	4a0d      	ldr	r2, [pc, #52]	; (800846c <LoopForever+0xe>)
  movs r3, #0
 8008436:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008438:	e002      	b.n	8008440 <LoopCopyDataInit>

0800843a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800843a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800843c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800843e:	3304      	adds	r3, #4

08008440 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008440:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008442:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008444:	d3f9      	bcc.n	800843a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008446:	4a0a      	ldr	r2, [pc, #40]	; (8008470 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008448:	4c0a      	ldr	r4, [pc, #40]	; (8008474 <LoopForever+0x16>)
  movs r3, #0
 800844a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800844c:	e001      	b.n	8008452 <LoopFillZerobss>

0800844e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800844e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008450:	3204      	adds	r2, #4

08008452 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008452:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008454:	d3fb      	bcc.n	800844e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008456:	f000 f817 	bl	8008488 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800845a:	f7fe fae9 	bl	8006a30 <main>

0800845e <LoopForever>:

LoopForever:
    b LoopForever
 800845e:	e7fe      	b.n	800845e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8008460:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8008464:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008468:	20000594 	.word	0x20000594
  ldr r2, =_sidata
 800846c:	08008e88 	.word	0x08008e88
  ldr r2, =_sbss
 8008470:	20000594 	.word	0x20000594
  ldr r4, =_ebss
 8008474:	20027af0 	.word	0x20027af0

08008478 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008478:	e7fe      	b.n	8008478 <ADC1_IRQHandler>
	...

0800847c <__errno>:
 800847c:	4b01      	ldr	r3, [pc, #4]	; (8008484 <__errno+0x8>)
 800847e:	6818      	ldr	r0, [r3, #0]
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	20000530 	.word	0x20000530

08008488 <__libc_init_array>:
 8008488:	b570      	push	{r4, r5, r6, lr}
 800848a:	4d0d      	ldr	r5, [pc, #52]	; (80084c0 <__libc_init_array+0x38>)
 800848c:	4c0d      	ldr	r4, [pc, #52]	; (80084c4 <__libc_init_array+0x3c>)
 800848e:	1b64      	subs	r4, r4, r5
 8008490:	10a4      	asrs	r4, r4, #2
 8008492:	2600      	movs	r6, #0
 8008494:	42a6      	cmp	r6, r4
 8008496:	d109      	bne.n	80084ac <__libc_init_array+0x24>
 8008498:	4d0b      	ldr	r5, [pc, #44]	; (80084c8 <__libc_init_array+0x40>)
 800849a:	4c0c      	ldr	r4, [pc, #48]	; (80084cc <__libc_init_array+0x44>)
 800849c:	f000 fc8e 	bl	8008dbc <_init>
 80084a0:	1b64      	subs	r4, r4, r5
 80084a2:	10a4      	asrs	r4, r4, #2
 80084a4:	2600      	movs	r6, #0
 80084a6:	42a6      	cmp	r6, r4
 80084a8:	d105      	bne.n	80084b6 <__libc_init_array+0x2e>
 80084aa:	bd70      	pop	{r4, r5, r6, pc}
 80084ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80084b0:	4798      	blx	r3
 80084b2:	3601      	adds	r6, #1
 80084b4:	e7ee      	b.n	8008494 <__libc_init_array+0xc>
 80084b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084ba:	4798      	blx	r3
 80084bc:	3601      	adds	r6, #1
 80084be:	e7f2      	b.n	80084a6 <__libc_init_array+0x1e>
 80084c0:	08008e80 	.word	0x08008e80
 80084c4:	08008e80 	.word	0x08008e80
 80084c8:	08008e80 	.word	0x08008e80
 80084cc:	08008e84 	.word	0x08008e84

080084d0 <memset>:
 80084d0:	4402      	add	r2, r0
 80084d2:	4603      	mov	r3, r0
 80084d4:	4293      	cmp	r3, r2
 80084d6:	d100      	bne.n	80084da <memset+0xa>
 80084d8:	4770      	bx	lr
 80084da:	f803 1b01 	strb.w	r1, [r3], #1
 80084de:	e7f9      	b.n	80084d4 <memset+0x4>

080084e0 <siprintf>:
 80084e0:	b40e      	push	{r1, r2, r3}
 80084e2:	b500      	push	{lr}
 80084e4:	b09c      	sub	sp, #112	; 0x70
 80084e6:	ab1d      	add	r3, sp, #116	; 0x74
 80084e8:	9002      	str	r0, [sp, #8]
 80084ea:	9006      	str	r0, [sp, #24]
 80084ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80084f0:	4809      	ldr	r0, [pc, #36]	; (8008518 <siprintf+0x38>)
 80084f2:	9107      	str	r1, [sp, #28]
 80084f4:	9104      	str	r1, [sp, #16]
 80084f6:	4909      	ldr	r1, [pc, #36]	; (800851c <siprintf+0x3c>)
 80084f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80084fc:	9105      	str	r1, [sp, #20]
 80084fe:	6800      	ldr	r0, [r0, #0]
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	a902      	add	r1, sp, #8
 8008504:	f000 f868 	bl	80085d8 <_svfiprintf_r>
 8008508:	9b02      	ldr	r3, [sp, #8]
 800850a:	2200      	movs	r2, #0
 800850c:	701a      	strb	r2, [r3, #0]
 800850e:	b01c      	add	sp, #112	; 0x70
 8008510:	f85d eb04 	ldr.w	lr, [sp], #4
 8008514:	b003      	add	sp, #12
 8008516:	4770      	bx	lr
 8008518:	20000530 	.word	0x20000530
 800851c:	ffff0208 	.word	0xffff0208

08008520 <__ssputs_r>:
 8008520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008524:	688e      	ldr	r6, [r1, #8]
 8008526:	429e      	cmp	r6, r3
 8008528:	4682      	mov	sl, r0
 800852a:	460c      	mov	r4, r1
 800852c:	4690      	mov	r8, r2
 800852e:	461f      	mov	r7, r3
 8008530:	d838      	bhi.n	80085a4 <__ssputs_r+0x84>
 8008532:	898a      	ldrh	r2, [r1, #12]
 8008534:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008538:	d032      	beq.n	80085a0 <__ssputs_r+0x80>
 800853a:	6825      	ldr	r5, [r4, #0]
 800853c:	6909      	ldr	r1, [r1, #16]
 800853e:	eba5 0901 	sub.w	r9, r5, r1
 8008542:	6965      	ldr	r5, [r4, #20]
 8008544:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008548:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800854c:	3301      	adds	r3, #1
 800854e:	444b      	add	r3, r9
 8008550:	106d      	asrs	r5, r5, #1
 8008552:	429d      	cmp	r5, r3
 8008554:	bf38      	it	cc
 8008556:	461d      	movcc	r5, r3
 8008558:	0553      	lsls	r3, r2, #21
 800855a:	d531      	bpl.n	80085c0 <__ssputs_r+0xa0>
 800855c:	4629      	mov	r1, r5
 800855e:	f000 fb63 	bl	8008c28 <_malloc_r>
 8008562:	4606      	mov	r6, r0
 8008564:	b950      	cbnz	r0, 800857c <__ssputs_r+0x5c>
 8008566:	230c      	movs	r3, #12
 8008568:	f8ca 3000 	str.w	r3, [sl]
 800856c:	89a3      	ldrh	r3, [r4, #12]
 800856e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008572:	81a3      	strh	r3, [r4, #12]
 8008574:	f04f 30ff 	mov.w	r0, #4294967295
 8008578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857c:	6921      	ldr	r1, [r4, #16]
 800857e:	464a      	mov	r2, r9
 8008580:	f000 fabe 	bl	8008b00 <memcpy>
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800858a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800858e:	81a3      	strh	r3, [r4, #12]
 8008590:	6126      	str	r6, [r4, #16]
 8008592:	6165      	str	r5, [r4, #20]
 8008594:	444e      	add	r6, r9
 8008596:	eba5 0509 	sub.w	r5, r5, r9
 800859a:	6026      	str	r6, [r4, #0]
 800859c:	60a5      	str	r5, [r4, #8]
 800859e:	463e      	mov	r6, r7
 80085a0:	42be      	cmp	r6, r7
 80085a2:	d900      	bls.n	80085a6 <__ssputs_r+0x86>
 80085a4:	463e      	mov	r6, r7
 80085a6:	6820      	ldr	r0, [r4, #0]
 80085a8:	4632      	mov	r2, r6
 80085aa:	4641      	mov	r1, r8
 80085ac:	f000 fab6 	bl	8008b1c <memmove>
 80085b0:	68a3      	ldr	r3, [r4, #8]
 80085b2:	1b9b      	subs	r3, r3, r6
 80085b4:	60a3      	str	r3, [r4, #8]
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	4433      	add	r3, r6
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	2000      	movs	r0, #0
 80085be:	e7db      	b.n	8008578 <__ssputs_r+0x58>
 80085c0:	462a      	mov	r2, r5
 80085c2:	f000 fba5 	bl	8008d10 <_realloc_r>
 80085c6:	4606      	mov	r6, r0
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d1e1      	bne.n	8008590 <__ssputs_r+0x70>
 80085cc:	6921      	ldr	r1, [r4, #16]
 80085ce:	4650      	mov	r0, sl
 80085d0:	f000 fabe 	bl	8008b50 <_free_r>
 80085d4:	e7c7      	b.n	8008566 <__ssputs_r+0x46>
	...

080085d8 <_svfiprintf_r>:
 80085d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085dc:	4698      	mov	r8, r3
 80085de:	898b      	ldrh	r3, [r1, #12]
 80085e0:	061b      	lsls	r3, r3, #24
 80085e2:	b09d      	sub	sp, #116	; 0x74
 80085e4:	4607      	mov	r7, r0
 80085e6:	460d      	mov	r5, r1
 80085e8:	4614      	mov	r4, r2
 80085ea:	d50e      	bpl.n	800860a <_svfiprintf_r+0x32>
 80085ec:	690b      	ldr	r3, [r1, #16]
 80085ee:	b963      	cbnz	r3, 800860a <_svfiprintf_r+0x32>
 80085f0:	2140      	movs	r1, #64	; 0x40
 80085f2:	f000 fb19 	bl	8008c28 <_malloc_r>
 80085f6:	6028      	str	r0, [r5, #0]
 80085f8:	6128      	str	r0, [r5, #16]
 80085fa:	b920      	cbnz	r0, 8008606 <_svfiprintf_r+0x2e>
 80085fc:	230c      	movs	r3, #12
 80085fe:	603b      	str	r3, [r7, #0]
 8008600:	f04f 30ff 	mov.w	r0, #4294967295
 8008604:	e0d1      	b.n	80087aa <_svfiprintf_r+0x1d2>
 8008606:	2340      	movs	r3, #64	; 0x40
 8008608:	616b      	str	r3, [r5, #20]
 800860a:	2300      	movs	r3, #0
 800860c:	9309      	str	r3, [sp, #36]	; 0x24
 800860e:	2320      	movs	r3, #32
 8008610:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008614:	f8cd 800c 	str.w	r8, [sp, #12]
 8008618:	2330      	movs	r3, #48	; 0x30
 800861a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80087c4 <_svfiprintf_r+0x1ec>
 800861e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008622:	f04f 0901 	mov.w	r9, #1
 8008626:	4623      	mov	r3, r4
 8008628:	469a      	mov	sl, r3
 800862a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800862e:	b10a      	cbz	r2, 8008634 <_svfiprintf_r+0x5c>
 8008630:	2a25      	cmp	r2, #37	; 0x25
 8008632:	d1f9      	bne.n	8008628 <_svfiprintf_r+0x50>
 8008634:	ebba 0b04 	subs.w	fp, sl, r4
 8008638:	d00b      	beq.n	8008652 <_svfiprintf_r+0x7a>
 800863a:	465b      	mov	r3, fp
 800863c:	4622      	mov	r2, r4
 800863e:	4629      	mov	r1, r5
 8008640:	4638      	mov	r0, r7
 8008642:	f7ff ff6d 	bl	8008520 <__ssputs_r>
 8008646:	3001      	adds	r0, #1
 8008648:	f000 80aa 	beq.w	80087a0 <_svfiprintf_r+0x1c8>
 800864c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800864e:	445a      	add	r2, fp
 8008650:	9209      	str	r2, [sp, #36]	; 0x24
 8008652:	f89a 3000 	ldrb.w	r3, [sl]
 8008656:	2b00      	cmp	r3, #0
 8008658:	f000 80a2 	beq.w	80087a0 <_svfiprintf_r+0x1c8>
 800865c:	2300      	movs	r3, #0
 800865e:	f04f 32ff 	mov.w	r2, #4294967295
 8008662:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008666:	f10a 0a01 	add.w	sl, sl, #1
 800866a:	9304      	str	r3, [sp, #16]
 800866c:	9307      	str	r3, [sp, #28]
 800866e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008672:	931a      	str	r3, [sp, #104]	; 0x68
 8008674:	4654      	mov	r4, sl
 8008676:	2205      	movs	r2, #5
 8008678:	f814 1b01 	ldrb.w	r1, [r4], #1
 800867c:	4851      	ldr	r0, [pc, #324]	; (80087c4 <_svfiprintf_r+0x1ec>)
 800867e:	f7f7 fdc7 	bl	8000210 <memchr>
 8008682:	9a04      	ldr	r2, [sp, #16]
 8008684:	b9d8      	cbnz	r0, 80086be <_svfiprintf_r+0xe6>
 8008686:	06d0      	lsls	r0, r2, #27
 8008688:	bf44      	itt	mi
 800868a:	2320      	movmi	r3, #32
 800868c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008690:	0711      	lsls	r1, r2, #28
 8008692:	bf44      	itt	mi
 8008694:	232b      	movmi	r3, #43	; 0x2b
 8008696:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800869a:	f89a 3000 	ldrb.w	r3, [sl]
 800869e:	2b2a      	cmp	r3, #42	; 0x2a
 80086a0:	d015      	beq.n	80086ce <_svfiprintf_r+0xf6>
 80086a2:	9a07      	ldr	r2, [sp, #28]
 80086a4:	4654      	mov	r4, sl
 80086a6:	2000      	movs	r0, #0
 80086a8:	f04f 0c0a 	mov.w	ip, #10
 80086ac:	4621      	mov	r1, r4
 80086ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086b2:	3b30      	subs	r3, #48	; 0x30
 80086b4:	2b09      	cmp	r3, #9
 80086b6:	d94e      	bls.n	8008756 <_svfiprintf_r+0x17e>
 80086b8:	b1b0      	cbz	r0, 80086e8 <_svfiprintf_r+0x110>
 80086ba:	9207      	str	r2, [sp, #28]
 80086bc:	e014      	b.n	80086e8 <_svfiprintf_r+0x110>
 80086be:	eba0 0308 	sub.w	r3, r0, r8
 80086c2:	fa09 f303 	lsl.w	r3, r9, r3
 80086c6:	4313      	orrs	r3, r2
 80086c8:	9304      	str	r3, [sp, #16]
 80086ca:	46a2      	mov	sl, r4
 80086cc:	e7d2      	b.n	8008674 <_svfiprintf_r+0x9c>
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	1d19      	adds	r1, r3, #4
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	9103      	str	r1, [sp, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	bfbb      	ittet	lt
 80086da:	425b      	neglt	r3, r3
 80086dc:	f042 0202 	orrlt.w	r2, r2, #2
 80086e0:	9307      	strge	r3, [sp, #28]
 80086e2:	9307      	strlt	r3, [sp, #28]
 80086e4:	bfb8      	it	lt
 80086e6:	9204      	strlt	r2, [sp, #16]
 80086e8:	7823      	ldrb	r3, [r4, #0]
 80086ea:	2b2e      	cmp	r3, #46	; 0x2e
 80086ec:	d10c      	bne.n	8008708 <_svfiprintf_r+0x130>
 80086ee:	7863      	ldrb	r3, [r4, #1]
 80086f0:	2b2a      	cmp	r3, #42	; 0x2a
 80086f2:	d135      	bne.n	8008760 <_svfiprintf_r+0x188>
 80086f4:	9b03      	ldr	r3, [sp, #12]
 80086f6:	1d1a      	adds	r2, r3, #4
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	9203      	str	r2, [sp, #12]
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	bfb8      	it	lt
 8008700:	f04f 33ff 	movlt.w	r3, #4294967295
 8008704:	3402      	adds	r4, #2
 8008706:	9305      	str	r3, [sp, #20]
 8008708:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80087d4 <_svfiprintf_r+0x1fc>
 800870c:	7821      	ldrb	r1, [r4, #0]
 800870e:	2203      	movs	r2, #3
 8008710:	4650      	mov	r0, sl
 8008712:	f7f7 fd7d 	bl	8000210 <memchr>
 8008716:	b140      	cbz	r0, 800872a <_svfiprintf_r+0x152>
 8008718:	2340      	movs	r3, #64	; 0x40
 800871a:	eba0 000a 	sub.w	r0, r0, sl
 800871e:	fa03 f000 	lsl.w	r0, r3, r0
 8008722:	9b04      	ldr	r3, [sp, #16]
 8008724:	4303      	orrs	r3, r0
 8008726:	3401      	adds	r4, #1
 8008728:	9304      	str	r3, [sp, #16]
 800872a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800872e:	4826      	ldr	r0, [pc, #152]	; (80087c8 <_svfiprintf_r+0x1f0>)
 8008730:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008734:	2206      	movs	r2, #6
 8008736:	f7f7 fd6b 	bl	8000210 <memchr>
 800873a:	2800      	cmp	r0, #0
 800873c:	d038      	beq.n	80087b0 <_svfiprintf_r+0x1d8>
 800873e:	4b23      	ldr	r3, [pc, #140]	; (80087cc <_svfiprintf_r+0x1f4>)
 8008740:	bb1b      	cbnz	r3, 800878a <_svfiprintf_r+0x1b2>
 8008742:	9b03      	ldr	r3, [sp, #12]
 8008744:	3307      	adds	r3, #7
 8008746:	f023 0307 	bic.w	r3, r3, #7
 800874a:	3308      	adds	r3, #8
 800874c:	9303      	str	r3, [sp, #12]
 800874e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008750:	4433      	add	r3, r6
 8008752:	9309      	str	r3, [sp, #36]	; 0x24
 8008754:	e767      	b.n	8008626 <_svfiprintf_r+0x4e>
 8008756:	fb0c 3202 	mla	r2, ip, r2, r3
 800875a:	460c      	mov	r4, r1
 800875c:	2001      	movs	r0, #1
 800875e:	e7a5      	b.n	80086ac <_svfiprintf_r+0xd4>
 8008760:	2300      	movs	r3, #0
 8008762:	3401      	adds	r4, #1
 8008764:	9305      	str	r3, [sp, #20]
 8008766:	4619      	mov	r1, r3
 8008768:	f04f 0c0a 	mov.w	ip, #10
 800876c:	4620      	mov	r0, r4
 800876e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008772:	3a30      	subs	r2, #48	; 0x30
 8008774:	2a09      	cmp	r2, #9
 8008776:	d903      	bls.n	8008780 <_svfiprintf_r+0x1a8>
 8008778:	2b00      	cmp	r3, #0
 800877a:	d0c5      	beq.n	8008708 <_svfiprintf_r+0x130>
 800877c:	9105      	str	r1, [sp, #20]
 800877e:	e7c3      	b.n	8008708 <_svfiprintf_r+0x130>
 8008780:	fb0c 2101 	mla	r1, ip, r1, r2
 8008784:	4604      	mov	r4, r0
 8008786:	2301      	movs	r3, #1
 8008788:	e7f0      	b.n	800876c <_svfiprintf_r+0x194>
 800878a:	ab03      	add	r3, sp, #12
 800878c:	9300      	str	r3, [sp, #0]
 800878e:	462a      	mov	r2, r5
 8008790:	4b0f      	ldr	r3, [pc, #60]	; (80087d0 <_svfiprintf_r+0x1f8>)
 8008792:	a904      	add	r1, sp, #16
 8008794:	4638      	mov	r0, r7
 8008796:	f3af 8000 	nop.w
 800879a:	1c42      	adds	r2, r0, #1
 800879c:	4606      	mov	r6, r0
 800879e:	d1d6      	bne.n	800874e <_svfiprintf_r+0x176>
 80087a0:	89ab      	ldrh	r3, [r5, #12]
 80087a2:	065b      	lsls	r3, r3, #25
 80087a4:	f53f af2c 	bmi.w	8008600 <_svfiprintf_r+0x28>
 80087a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087aa:	b01d      	add	sp, #116	; 0x74
 80087ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087b0:	ab03      	add	r3, sp, #12
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	462a      	mov	r2, r5
 80087b6:	4b06      	ldr	r3, [pc, #24]	; (80087d0 <_svfiprintf_r+0x1f8>)
 80087b8:	a904      	add	r1, sp, #16
 80087ba:	4638      	mov	r0, r7
 80087bc:	f000 f87a 	bl	80088b4 <_printf_i>
 80087c0:	e7eb      	b.n	800879a <_svfiprintf_r+0x1c2>
 80087c2:	bf00      	nop
 80087c4:	08008e44 	.word	0x08008e44
 80087c8:	08008e4e 	.word	0x08008e4e
 80087cc:	00000000 	.word	0x00000000
 80087d0:	08008521 	.word	0x08008521
 80087d4:	08008e4a 	.word	0x08008e4a

080087d8 <_printf_common>:
 80087d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087dc:	4616      	mov	r6, r2
 80087de:	4699      	mov	r9, r3
 80087e0:	688a      	ldr	r2, [r1, #8]
 80087e2:	690b      	ldr	r3, [r1, #16]
 80087e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087e8:	4293      	cmp	r3, r2
 80087ea:	bfb8      	it	lt
 80087ec:	4613      	movlt	r3, r2
 80087ee:	6033      	str	r3, [r6, #0]
 80087f0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087f4:	4607      	mov	r7, r0
 80087f6:	460c      	mov	r4, r1
 80087f8:	b10a      	cbz	r2, 80087fe <_printf_common+0x26>
 80087fa:	3301      	adds	r3, #1
 80087fc:	6033      	str	r3, [r6, #0]
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	0699      	lsls	r1, r3, #26
 8008802:	bf42      	ittt	mi
 8008804:	6833      	ldrmi	r3, [r6, #0]
 8008806:	3302      	addmi	r3, #2
 8008808:	6033      	strmi	r3, [r6, #0]
 800880a:	6825      	ldr	r5, [r4, #0]
 800880c:	f015 0506 	ands.w	r5, r5, #6
 8008810:	d106      	bne.n	8008820 <_printf_common+0x48>
 8008812:	f104 0a19 	add.w	sl, r4, #25
 8008816:	68e3      	ldr	r3, [r4, #12]
 8008818:	6832      	ldr	r2, [r6, #0]
 800881a:	1a9b      	subs	r3, r3, r2
 800881c:	42ab      	cmp	r3, r5
 800881e:	dc26      	bgt.n	800886e <_printf_common+0x96>
 8008820:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008824:	1e13      	subs	r3, r2, #0
 8008826:	6822      	ldr	r2, [r4, #0]
 8008828:	bf18      	it	ne
 800882a:	2301      	movne	r3, #1
 800882c:	0692      	lsls	r2, r2, #26
 800882e:	d42b      	bmi.n	8008888 <_printf_common+0xb0>
 8008830:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008834:	4649      	mov	r1, r9
 8008836:	4638      	mov	r0, r7
 8008838:	47c0      	blx	r8
 800883a:	3001      	adds	r0, #1
 800883c:	d01e      	beq.n	800887c <_printf_common+0xa4>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	68e5      	ldr	r5, [r4, #12]
 8008842:	6832      	ldr	r2, [r6, #0]
 8008844:	f003 0306 	and.w	r3, r3, #6
 8008848:	2b04      	cmp	r3, #4
 800884a:	bf08      	it	eq
 800884c:	1aad      	subeq	r5, r5, r2
 800884e:	68a3      	ldr	r3, [r4, #8]
 8008850:	6922      	ldr	r2, [r4, #16]
 8008852:	bf0c      	ite	eq
 8008854:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008858:	2500      	movne	r5, #0
 800885a:	4293      	cmp	r3, r2
 800885c:	bfc4      	itt	gt
 800885e:	1a9b      	subgt	r3, r3, r2
 8008860:	18ed      	addgt	r5, r5, r3
 8008862:	2600      	movs	r6, #0
 8008864:	341a      	adds	r4, #26
 8008866:	42b5      	cmp	r5, r6
 8008868:	d11a      	bne.n	80088a0 <_printf_common+0xc8>
 800886a:	2000      	movs	r0, #0
 800886c:	e008      	b.n	8008880 <_printf_common+0xa8>
 800886e:	2301      	movs	r3, #1
 8008870:	4652      	mov	r2, sl
 8008872:	4649      	mov	r1, r9
 8008874:	4638      	mov	r0, r7
 8008876:	47c0      	blx	r8
 8008878:	3001      	adds	r0, #1
 800887a:	d103      	bne.n	8008884 <_printf_common+0xac>
 800887c:	f04f 30ff 	mov.w	r0, #4294967295
 8008880:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008884:	3501      	adds	r5, #1
 8008886:	e7c6      	b.n	8008816 <_printf_common+0x3e>
 8008888:	18e1      	adds	r1, r4, r3
 800888a:	1c5a      	adds	r2, r3, #1
 800888c:	2030      	movs	r0, #48	; 0x30
 800888e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008892:	4422      	add	r2, r4
 8008894:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008898:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800889c:	3302      	adds	r3, #2
 800889e:	e7c7      	b.n	8008830 <_printf_common+0x58>
 80088a0:	2301      	movs	r3, #1
 80088a2:	4622      	mov	r2, r4
 80088a4:	4649      	mov	r1, r9
 80088a6:	4638      	mov	r0, r7
 80088a8:	47c0      	blx	r8
 80088aa:	3001      	adds	r0, #1
 80088ac:	d0e6      	beq.n	800887c <_printf_common+0xa4>
 80088ae:	3601      	adds	r6, #1
 80088b0:	e7d9      	b.n	8008866 <_printf_common+0x8e>
	...

080088b4 <_printf_i>:
 80088b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088b8:	7e0f      	ldrb	r7, [r1, #24]
 80088ba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088bc:	2f78      	cmp	r7, #120	; 0x78
 80088be:	4691      	mov	r9, r2
 80088c0:	4680      	mov	r8, r0
 80088c2:	460c      	mov	r4, r1
 80088c4:	469a      	mov	sl, r3
 80088c6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088ca:	d807      	bhi.n	80088dc <_printf_i+0x28>
 80088cc:	2f62      	cmp	r7, #98	; 0x62
 80088ce:	d80a      	bhi.n	80088e6 <_printf_i+0x32>
 80088d0:	2f00      	cmp	r7, #0
 80088d2:	f000 80d8 	beq.w	8008a86 <_printf_i+0x1d2>
 80088d6:	2f58      	cmp	r7, #88	; 0x58
 80088d8:	f000 80a3 	beq.w	8008a22 <_printf_i+0x16e>
 80088dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088e0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088e4:	e03a      	b.n	800895c <_printf_i+0xa8>
 80088e6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088ea:	2b15      	cmp	r3, #21
 80088ec:	d8f6      	bhi.n	80088dc <_printf_i+0x28>
 80088ee:	a101      	add	r1, pc, #4	; (adr r1, 80088f4 <_printf_i+0x40>)
 80088f0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088f4:	0800894d 	.word	0x0800894d
 80088f8:	08008961 	.word	0x08008961
 80088fc:	080088dd 	.word	0x080088dd
 8008900:	080088dd 	.word	0x080088dd
 8008904:	080088dd 	.word	0x080088dd
 8008908:	080088dd 	.word	0x080088dd
 800890c:	08008961 	.word	0x08008961
 8008910:	080088dd 	.word	0x080088dd
 8008914:	080088dd 	.word	0x080088dd
 8008918:	080088dd 	.word	0x080088dd
 800891c:	080088dd 	.word	0x080088dd
 8008920:	08008a6d 	.word	0x08008a6d
 8008924:	08008991 	.word	0x08008991
 8008928:	08008a4f 	.word	0x08008a4f
 800892c:	080088dd 	.word	0x080088dd
 8008930:	080088dd 	.word	0x080088dd
 8008934:	08008a8f 	.word	0x08008a8f
 8008938:	080088dd 	.word	0x080088dd
 800893c:	08008991 	.word	0x08008991
 8008940:	080088dd 	.word	0x080088dd
 8008944:	080088dd 	.word	0x080088dd
 8008948:	08008a57 	.word	0x08008a57
 800894c:	682b      	ldr	r3, [r5, #0]
 800894e:	1d1a      	adds	r2, r3, #4
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	602a      	str	r2, [r5, #0]
 8008954:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008958:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800895c:	2301      	movs	r3, #1
 800895e:	e0a3      	b.n	8008aa8 <_printf_i+0x1f4>
 8008960:	6820      	ldr	r0, [r4, #0]
 8008962:	6829      	ldr	r1, [r5, #0]
 8008964:	0606      	lsls	r6, r0, #24
 8008966:	f101 0304 	add.w	r3, r1, #4
 800896a:	d50a      	bpl.n	8008982 <_printf_i+0xce>
 800896c:	680e      	ldr	r6, [r1, #0]
 800896e:	602b      	str	r3, [r5, #0]
 8008970:	2e00      	cmp	r6, #0
 8008972:	da03      	bge.n	800897c <_printf_i+0xc8>
 8008974:	232d      	movs	r3, #45	; 0x2d
 8008976:	4276      	negs	r6, r6
 8008978:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800897c:	485e      	ldr	r0, [pc, #376]	; (8008af8 <_printf_i+0x244>)
 800897e:	230a      	movs	r3, #10
 8008980:	e019      	b.n	80089b6 <_printf_i+0x102>
 8008982:	680e      	ldr	r6, [r1, #0]
 8008984:	602b      	str	r3, [r5, #0]
 8008986:	f010 0f40 	tst.w	r0, #64	; 0x40
 800898a:	bf18      	it	ne
 800898c:	b236      	sxthne	r6, r6
 800898e:	e7ef      	b.n	8008970 <_printf_i+0xbc>
 8008990:	682b      	ldr	r3, [r5, #0]
 8008992:	6820      	ldr	r0, [r4, #0]
 8008994:	1d19      	adds	r1, r3, #4
 8008996:	6029      	str	r1, [r5, #0]
 8008998:	0601      	lsls	r1, r0, #24
 800899a:	d501      	bpl.n	80089a0 <_printf_i+0xec>
 800899c:	681e      	ldr	r6, [r3, #0]
 800899e:	e002      	b.n	80089a6 <_printf_i+0xf2>
 80089a0:	0646      	lsls	r6, r0, #25
 80089a2:	d5fb      	bpl.n	800899c <_printf_i+0xe8>
 80089a4:	881e      	ldrh	r6, [r3, #0]
 80089a6:	4854      	ldr	r0, [pc, #336]	; (8008af8 <_printf_i+0x244>)
 80089a8:	2f6f      	cmp	r7, #111	; 0x6f
 80089aa:	bf0c      	ite	eq
 80089ac:	2308      	moveq	r3, #8
 80089ae:	230a      	movne	r3, #10
 80089b0:	2100      	movs	r1, #0
 80089b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089b6:	6865      	ldr	r5, [r4, #4]
 80089b8:	60a5      	str	r5, [r4, #8]
 80089ba:	2d00      	cmp	r5, #0
 80089bc:	bfa2      	ittt	ge
 80089be:	6821      	ldrge	r1, [r4, #0]
 80089c0:	f021 0104 	bicge.w	r1, r1, #4
 80089c4:	6021      	strge	r1, [r4, #0]
 80089c6:	b90e      	cbnz	r6, 80089cc <_printf_i+0x118>
 80089c8:	2d00      	cmp	r5, #0
 80089ca:	d04d      	beq.n	8008a68 <_printf_i+0x1b4>
 80089cc:	4615      	mov	r5, r2
 80089ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80089d2:	fb03 6711 	mls	r7, r3, r1, r6
 80089d6:	5dc7      	ldrb	r7, [r0, r7]
 80089d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089dc:	4637      	mov	r7, r6
 80089de:	42bb      	cmp	r3, r7
 80089e0:	460e      	mov	r6, r1
 80089e2:	d9f4      	bls.n	80089ce <_printf_i+0x11a>
 80089e4:	2b08      	cmp	r3, #8
 80089e6:	d10b      	bne.n	8008a00 <_printf_i+0x14c>
 80089e8:	6823      	ldr	r3, [r4, #0]
 80089ea:	07de      	lsls	r6, r3, #31
 80089ec:	d508      	bpl.n	8008a00 <_printf_i+0x14c>
 80089ee:	6923      	ldr	r3, [r4, #16]
 80089f0:	6861      	ldr	r1, [r4, #4]
 80089f2:	4299      	cmp	r1, r3
 80089f4:	bfde      	ittt	le
 80089f6:	2330      	movle	r3, #48	; 0x30
 80089f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008a00:	1b52      	subs	r2, r2, r5
 8008a02:	6122      	str	r2, [r4, #16]
 8008a04:	f8cd a000 	str.w	sl, [sp]
 8008a08:	464b      	mov	r3, r9
 8008a0a:	aa03      	add	r2, sp, #12
 8008a0c:	4621      	mov	r1, r4
 8008a0e:	4640      	mov	r0, r8
 8008a10:	f7ff fee2 	bl	80087d8 <_printf_common>
 8008a14:	3001      	adds	r0, #1
 8008a16:	d14c      	bne.n	8008ab2 <_printf_i+0x1fe>
 8008a18:	f04f 30ff 	mov.w	r0, #4294967295
 8008a1c:	b004      	add	sp, #16
 8008a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a22:	4835      	ldr	r0, [pc, #212]	; (8008af8 <_printf_i+0x244>)
 8008a24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a28:	6829      	ldr	r1, [r5, #0]
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a30:	6029      	str	r1, [r5, #0]
 8008a32:	061d      	lsls	r5, r3, #24
 8008a34:	d514      	bpl.n	8008a60 <_printf_i+0x1ac>
 8008a36:	07df      	lsls	r7, r3, #31
 8008a38:	bf44      	itt	mi
 8008a3a:	f043 0320 	orrmi.w	r3, r3, #32
 8008a3e:	6023      	strmi	r3, [r4, #0]
 8008a40:	b91e      	cbnz	r6, 8008a4a <_printf_i+0x196>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	f023 0320 	bic.w	r3, r3, #32
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	2310      	movs	r3, #16
 8008a4c:	e7b0      	b.n	80089b0 <_printf_i+0xfc>
 8008a4e:	6823      	ldr	r3, [r4, #0]
 8008a50:	f043 0320 	orr.w	r3, r3, #32
 8008a54:	6023      	str	r3, [r4, #0]
 8008a56:	2378      	movs	r3, #120	; 0x78
 8008a58:	4828      	ldr	r0, [pc, #160]	; (8008afc <_printf_i+0x248>)
 8008a5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a5e:	e7e3      	b.n	8008a28 <_printf_i+0x174>
 8008a60:	0659      	lsls	r1, r3, #25
 8008a62:	bf48      	it	mi
 8008a64:	b2b6      	uxthmi	r6, r6
 8008a66:	e7e6      	b.n	8008a36 <_printf_i+0x182>
 8008a68:	4615      	mov	r5, r2
 8008a6a:	e7bb      	b.n	80089e4 <_printf_i+0x130>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	6826      	ldr	r6, [r4, #0]
 8008a70:	6961      	ldr	r1, [r4, #20]
 8008a72:	1d18      	adds	r0, r3, #4
 8008a74:	6028      	str	r0, [r5, #0]
 8008a76:	0635      	lsls	r5, r6, #24
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	d501      	bpl.n	8008a80 <_printf_i+0x1cc>
 8008a7c:	6019      	str	r1, [r3, #0]
 8008a7e:	e002      	b.n	8008a86 <_printf_i+0x1d2>
 8008a80:	0670      	lsls	r0, r6, #25
 8008a82:	d5fb      	bpl.n	8008a7c <_printf_i+0x1c8>
 8008a84:	8019      	strh	r1, [r3, #0]
 8008a86:	2300      	movs	r3, #0
 8008a88:	6123      	str	r3, [r4, #16]
 8008a8a:	4615      	mov	r5, r2
 8008a8c:	e7ba      	b.n	8008a04 <_printf_i+0x150>
 8008a8e:	682b      	ldr	r3, [r5, #0]
 8008a90:	1d1a      	adds	r2, r3, #4
 8008a92:	602a      	str	r2, [r5, #0]
 8008a94:	681d      	ldr	r5, [r3, #0]
 8008a96:	6862      	ldr	r2, [r4, #4]
 8008a98:	2100      	movs	r1, #0
 8008a9a:	4628      	mov	r0, r5
 8008a9c:	f7f7 fbb8 	bl	8000210 <memchr>
 8008aa0:	b108      	cbz	r0, 8008aa6 <_printf_i+0x1f2>
 8008aa2:	1b40      	subs	r0, r0, r5
 8008aa4:	6060      	str	r0, [r4, #4]
 8008aa6:	6863      	ldr	r3, [r4, #4]
 8008aa8:	6123      	str	r3, [r4, #16]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ab0:	e7a8      	b.n	8008a04 <_printf_i+0x150>
 8008ab2:	6923      	ldr	r3, [r4, #16]
 8008ab4:	462a      	mov	r2, r5
 8008ab6:	4649      	mov	r1, r9
 8008ab8:	4640      	mov	r0, r8
 8008aba:	47d0      	blx	sl
 8008abc:	3001      	adds	r0, #1
 8008abe:	d0ab      	beq.n	8008a18 <_printf_i+0x164>
 8008ac0:	6823      	ldr	r3, [r4, #0]
 8008ac2:	079b      	lsls	r3, r3, #30
 8008ac4:	d413      	bmi.n	8008aee <_printf_i+0x23a>
 8008ac6:	68e0      	ldr	r0, [r4, #12]
 8008ac8:	9b03      	ldr	r3, [sp, #12]
 8008aca:	4298      	cmp	r0, r3
 8008acc:	bfb8      	it	lt
 8008ace:	4618      	movlt	r0, r3
 8008ad0:	e7a4      	b.n	8008a1c <_printf_i+0x168>
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	4632      	mov	r2, r6
 8008ad6:	4649      	mov	r1, r9
 8008ad8:	4640      	mov	r0, r8
 8008ada:	47d0      	blx	sl
 8008adc:	3001      	adds	r0, #1
 8008ade:	d09b      	beq.n	8008a18 <_printf_i+0x164>
 8008ae0:	3501      	adds	r5, #1
 8008ae2:	68e3      	ldr	r3, [r4, #12]
 8008ae4:	9903      	ldr	r1, [sp, #12]
 8008ae6:	1a5b      	subs	r3, r3, r1
 8008ae8:	42ab      	cmp	r3, r5
 8008aea:	dcf2      	bgt.n	8008ad2 <_printf_i+0x21e>
 8008aec:	e7eb      	b.n	8008ac6 <_printf_i+0x212>
 8008aee:	2500      	movs	r5, #0
 8008af0:	f104 0619 	add.w	r6, r4, #25
 8008af4:	e7f5      	b.n	8008ae2 <_printf_i+0x22e>
 8008af6:	bf00      	nop
 8008af8:	08008e55 	.word	0x08008e55
 8008afc:	08008e66 	.word	0x08008e66

08008b00 <memcpy>:
 8008b00:	440a      	add	r2, r1
 8008b02:	4291      	cmp	r1, r2
 8008b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8008b08:	d100      	bne.n	8008b0c <memcpy+0xc>
 8008b0a:	4770      	bx	lr
 8008b0c:	b510      	push	{r4, lr}
 8008b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b16:	4291      	cmp	r1, r2
 8008b18:	d1f9      	bne.n	8008b0e <memcpy+0xe>
 8008b1a:	bd10      	pop	{r4, pc}

08008b1c <memmove>:
 8008b1c:	4288      	cmp	r0, r1
 8008b1e:	b510      	push	{r4, lr}
 8008b20:	eb01 0402 	add.w	r4, r1, r2
 8008b24:	d902      	bls.n	8008b2c <memmove+0x10>
 8008b26:	4284      	cmp	r4, r0
 8008b28:	4623      	mov	r3, r4
 8008b2a:	d807      	bhi.n	8008b3c <memmove+0x20>
 8008b2c:	1e43      	subs	r3, r0, #1
 8008b2e:	42a1      	cmp	r1, r4
 8008b30:	d008      	beq.n	8008b44 <memmove+0x28>
 8008b32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b3a:	e7f8      	b.n	8008b2e <memmove+0x12>
 8008b3c:	4402      	add	r2, r0
 8008b3e:	4601      	mov	r1, r0
 8008b40:	428a      	cmp	r2, r1
 8008b42:	d100      	bne.n	8008b46 <memmove+0x2a>
 8008b44:	bd10      	pop	{r4, pc}
 8008b46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008b4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008b4e:	e7f7      	b.n	8008b40 <memmove+0x24>

08008b50 <_free_r>:
 8008b50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b52:	2900      	cmp	r1, #0
 8008b54:	d044      	beq.n	8008be0 <_free_r+0x90>
 8008b56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b5a:	9001      	str	r0, [sp, #4]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	f1a1 0404 	sub.w	r4, r1, #4
 8008b62:	bfb8      	it	lt
 8008b64:	18e4      	addlt	r4, r4, r3
 8008b66:	f000 f913 	bl	8008d90 <__malloc_lock>
 8008b6a:	4a1e      	ldr	r2, [pc, #120]	; (8008be4 <_free_r+0x94>)
 8008b6c:	9801      	ldr	r0, [sp, #4]
 8008b6e:	6813      	ldr	r3, [r2, #0]
 8008b70:	b933      	cbnz	r3, 8008b80 <_free_r+0x30>
 8008b72:	6063      	str	r3, [r4, #4]
 8008b74:	6014      	str	r4, [r2, #0]
 8008b76:	b003      	add	sp, #12
 8008b78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008b7c:	f000 b90e 	b.w	8008d9c <__malloc_unlock>
 8008b80:	42a3      	cmp	r3, r4
 8008b82:	d908      	bls.n	8008b96 <_free_r+0x46>
 8008b84:	6825      	ldr	r5, [r4, #0]
 8008b86:	1961      	adds	r1, r4, r5
 8008b88:	428b      	cmp	r3, r1
 8008b8a:	bf01      	itttt	eq
 8008b8c:	6819      	ldreq	r1, [r3, #0]
 8008b8e:	685b      	ldreq	r3, [r3, #4]
 8008b90:	1949      	addeq	r1, r1, r5
 8008b92:	6021      	streq	r1, [r4, #0]
 8008b94:	e7ed      	b.n	8008b72 <_free_r+0x22>
 8008b96:	461a      	mov	r2, r3
 8008b98:	685b      	ldr	r3, [r3, #4]
 8008b9a:	b10b      	cbz	r3, 8008ba0 <_free_r+0x50>
 8008b9c:	42a3      	cmp	r3, r4
 8008b9e:	d9fa      	bls.n	8008b96 <_free_r+0x46>
 8008ba0:	6811      	ldr	r1, [r2, #0]
 8008ba2:	1855      	adds	r5, r2, r1
 8008ba4:	42a5      	cmp	r5, r4
 8008ba6:	d10b      	bne.n	8008bc0 <_free_r+0x70>
 8008ba8:	6824      	ldr	r4, [r4, #0]
 8008baa:	4421      	add	r1, r4
 8008bac:	1854      	adds	r4, r2, r1
 8008bae:	42a3      	cmp	r3, r4
 8008bb0:	6011      	str	r1, [r2, #0]
 8008bb2:	d1e0      	bne.n	8008b76 <_free_r+0x26>
 8008bb4:	681c      	ldr	r4, [r3, #0]
 8008bb6:	685b      	ldr	r3, [r3, #4]
 8008bb8:	6053      	str	r3, [r2, #4]
 8008bba:	4421      	add	r1, r4
 8008bbc:	6011      	str	r1, [r2, #0]
 8008bbe:	e7da      	b.n	8008b76 <_free_r+0x26>
 8008bc0:	d902      	bls.n	8008bc8 <_free_r+0x78>
 8008bc2:	230c      	movs	r3, #12
 8008bc4:	6003      	str	r3, [r0, #0]
 8008bc6:	e7d6      	b.n	8008b76 <_free_r+0x26>
 8008bc8:	6825      	ldr	r5, [r4, #0]
 8008bca:	1961      	adds	r1, r4, r5
 8008bcc:	428b      	cmp	r3, r1
 8008bce:	bf04      	itt	eq
 8008bd0:	6819      	ldreq	r1, [r3, #0]
 8008bd2:	685b      	ldreq	r3, [r3, #4]
 8008bd4:	6063      	str	r3, [r4, #4]
 8008bd6:	bf04      	itt	eq
 8008bd8:	1949      	addeq	r1, r1, r5
 8008bda:	6021      	streq	r1, [r4, #0]
 8008bdc:	6054      	str	r4, [r2, #4]
 8008bde:	e7ca      	b.n	8008b76 <_free_r+0x26>
 8008be0:	b003      	add	sp, #12
 8008be2:	bd30      	pop	{r4, r5, pc}
 8008be4:	20027ae0 	.word	0x20027ae0

08008be8 <sbrk_aligned>:
 8008be8:	b570      	push	{r4, r5, r6, lr}
 8008bea:	4e0e      	ldr	r6, [pc, #56]	; (8008c24 <sbrk_aligned+0x3c>)
 8008bec:	460c      	mov	r4, r1
 8008bee:	6831      	ldr	r1, [r6, #0]
 8008bf0:	4605      	mov	r5, r0
 8008bf2:	b911      	cbnz	r1, 8008bfa <sbrk_aligned+0x12>
 8008bf4:	f000 f8bc 	bl	8008d70 <_sbrk_r>
 8008bf8:	6030      	str	r0, [r6, #0]
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	4628      	mov	r0, r5
 8008bfe:	f000 f8b7 	bl	8008d70 <_sbrk_r>
 8008c02:	1c43      	adds	r3, r0, #1
 8008c04:	d00a      	beq.n	8008c1c <sbrk_aligned+0x34>
 8008c06:	1cc4      	adds	r4, r0, #3
 8008c08:	f024 0403 	bic.w	r4, r4, #3
 8008c0c:	42a0      	cmp	r0, r4
 8008c0e:	d007      	beq.n	8008c20 <sbrk_aligned+0x38>
 8008c10:	1a21      	subs	r1, r4, r0
 8008c12:	4628      	mov	r0, r5
 8008c14:	f000 f8ac 	bl	8008d70 <_sbrk_r>
 8008c18:	3001      	adds	r0, #1
 8008c1a:	d101      	bne.n	8008c20 <sbrk_aligned+0x38>
 8008c1c:	f04f 34ff 	mov.w	r4, #4294967295
 8008c20:	4620      	mov	r0, r4
 8008c22:	bd70      	pop	{r4, r5, r6, pc}
 8008c24:	20027ae4 	.word	0x20027ae4

08008c28 <_malloc_r>:
 8008c28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2c:	1ccd      	adds	r5, r1, #3
 8008c2e:	f025 0503 	bic.w	r5, r5, #3
 8008c32:	3508      	adds	r5, #8
 8008c34:	2d0c      	cmp	r5, #12
 8008c36:	bf38      	it	cc
 8008c38:	250c      	movcc	r5, #12
 8008c3a:	2d00      	cmp	r5, #0
 8008c3c:	4607      	mov	r7, r0
 8008c3e:	db01      	blt.n	8008c44 <_malloc_r+0x1c>
 8008c40:	42a9      	cmp	r1, r5
 8008c42:	d905      	bls.n	8008c50 <_malloc_r+0x28>
 8008c44:	230c      	movs	r3, #12
 8008c46:	603b      	str	r3, [r7, #0]
 8008c48:	2600      	movs	r6, #0
 8008c4a:	4630      	mov	r0, r6
 8008c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c50:	4e2e      	ldr	r6, [pc, #184]	; (8008d0c <_malloc_r+0xe4>)
 8008c52:	f000 f89d 	bl	8008d90 <__malloc_lock>
 8008c56:	6833      	ldr	r3, [r6, #0]
 8008c58:	461c      	mov	r4, r3
 8008c5a:	bb34      	cbnz	r4, 8008caa <_malloc_r+0x82>
 8008c5c:	4629      	mov	r1, r5
 8008c5e:	4638      	mov	r0, r7
 8008c60:	f7ff ffc2 	bl	8008be8 <sbrk_aligned>
 8008c64:	1c43      	adds	r3, r0, #1
 8008c66:	4604      	mov	r4, r0
 8008c68:	d14d      	bne.n	8008d06 <_malloc_r+0xde>
 8008c6a:	6834      	ldr	r4, [r6, #0]
 8008c6c:	4626      	mov	r6, r4
 8008c6e:	2e00      	cmp	r6, #0
 8008c70:	d140      	bne.n	8008cf4 <_malloc_r+0xcc>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	4631      	mov	r1, r6
 8008c76:	4638      	mov	r0, r7
 8008c78:	eb04 0803 	add.w	r8, r4, r3
 8008c7c:	f000 f878 	bl	8008d70 <_sbrk_r>
 8008c80:	4580      	cmp	r8, r0
 8008c82:	d13a      	bne.n	8008cfa <_malloc_r+0xd2>
 8008c84:	6821      	ldr	r1, [r4, #0]
 8008c86:	3503      	adds	r5, #3
 8008c88:	1a6d      	subs	r5, r5, r1
 8008c8a:	f025 0503 	bic.w	r5, r5, #3
 8008c8e:	3508      	adds	r5, #8
 8008c90:	2d0c      	cmp	r5, #12
 8008c92:	bf38      	it	cc
 8008c94:	250c      	movcc	r5, #12
 8008c96:	4629      	mov	r1, r5
 8008c98:	4638      	mov	r0, r7
 8008c9a:	f7ff ffa5 	bl	8008be8 <sbrk_aligned>
 8008c9e:	3001      	adds	r0, #1
 8008ca0:	d02b      	beq.n	8008cfa <_malloc_r+0xd2>
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	442b      	add	r3, r5
 8008ca6:	6023      	str	r3, [r4, #0]
 8008ca8:	e00e      	b.n	8008cc8 <_malloc_r+0xa0>
 8008caa:	6822      	ldr	r2, [r4, #0]
 8008cac:	1b52      	subs	r2, r2, r5
 8008cae:	d41e      	bmi.n	8008cee <_malloc_r+0xc6>
 8008cb0:	2a0b      	cmp	r2, #11
 8008cb2:	d916      	bls.n	8008ce2 <_malloc_r+0xba>
 8008cb4:	1961      	adds	r1, r4, r5
 8008cb6:	42a3      	cmp	r3, r4
 8008cb8:	6025      	str	r5, [r4, #0]
 8008cba:	bf18      	it	ne
 8008cbc:	6059      	strne	r1, [r3, #4]
 8008cbe:	6863      	ldr	r3, [r4, #4]
 8008cc0:	bf08      	it	eq
 8008cc2:	6031      	streq	r1, [r6, #0]
 8008cc4:	5162      	str	r2, [r4, r5]
 8008cc6:	604b      	str	r3, [r1, #4]
 8008cc8:	4638      	mov	r0, r7
 8008cca:	f104 060b 	add.w	r6, r4, #11
 8008cce:	f000 f865 	bl	8008d9c <__malloc_unlock>
 8008cd2:	f026 0607 	bic.w	r6, r6, #7
 8008cd6:	1d23      	adds	r3, r4, #4
 8008cd8:	1af2      	subs	r2, r6, r3
 8008cda:	d0b6      	beq.n	8008c4a <_malloc_r+0x22>
 8008cdc:	1b9b      	subs	r3, r3, r6
 8008cde:	50a3      	str	r3, [r4, r2]
 8008ce0:	e7b3      	b.n	8008c4a <_malloc_r+0x22>
 8008ce2:	6862      	ldr	r2, [r4, #4]
 8008ce4:	42a3      	cmp	r3, r4
 8008ce6:	bf0c      	ite	eq
 8008ce8:	6032      	streq	r2, [r6, #0]
 8008cea:	605a      	strne	r2, [r3, #4]
 8008cec:	e7ec      	b.n	8008cc8 <_malloc_r+0xa0>
 8008cee:	4623      	mov	r3, r4
 8008cf0:	6864      	ldr	r4, [r4, #4]
 8008cf2:	e7b2      	b.n	8008c5a <_malloc_r+0x32>
 8008cf4:	4634      	mov	r4, r6
 8008cf6:	6876      	ldr	r6, [r6, #4]
 8008cf8:	e7b9      	b.n	8008c6e <_malloc_r+0x46>
 8008cfa:	230c      	movs	r3, #12
 8008cfc:	603b      	str	r3, [r7, #0]
 8008cfe:	4638      	mov	r0, r7
 8008d00:	f000 f84c 	bl	8008d9c <__malloc_unlock>
 8008d04:	e7a1      	b.n	8008c4a <_malloc_r+0x22>
 8008d06:	6025      	str	r5, [r4, #0]
 8008d08:	e7de      	b.n	8008cc8 <_malloc_r+0xa0>
 8008d0a:	bf00      	nop
 8008d0c:	20027ae0 	.word	0x20027ae0

08008d10 <_realloc_r>:
 8008d10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d14:	4680      	mov	r8, r0
 8008d16:	4614      	mov	r4, r2
 8008d18:	460e      	mov	r6, r1
 8008d1a:	b921      	cbnz	r1, 8008d26 <_realloc_r+0x16>
 8008d1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d20:	4611      	mov	r1, r2
 8008d22:	f7ff bf81 	b.w	8008c28 <_malloc_r>
 8008d26:	b92a      	cbnz	r2, 8008d34 <_realloc_r+0x24>
 8008d28:	f7ff ff12 	bl	8008b50 <_free_r>
 8008d2c:	4625      	mov	r5, r4
 8008d2e:	4628      	mov	r0, r5
 8008d30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d34:	f000 f838 	bl	8008da8 <_malloc_usable_size_r>
 8008d38:	4284      	cmp	r4, r0
 8008d3a:	4607      	mov	r7, r0
 8008d3c:	d802      	bhi.n	8008d44 <_realloc_r+0x34>
 8008d3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008d42:	d812      	bhi.n	8008d6a <_realloc_r+0x5a>
 8008d44:	4621      	mov	r1, r4
 8008d46:	4640      	mov	r0, r8
 8008d48:	f7ff ff6e 	bl	8008c28 <_malloc_r>
 8008d4c:	4605      	mov	r5, r0
 8008d4e:	2800      	cmp	r0, #0
 8008d50:	d0ed      	beq.n	8008d2e <_realloc_r+0x1e>
 8008d52:	42bc      	cmp	r4, r7
 8008d54:	4622      	mov	r2, r4
 8008d56:	4631      	mov	r1, r6
 8008d58:	bf28      	it	cs
 8008d5a:	463a      	movcs	r2, r7
 8008d5c:	f7ff fed0 	bl	8008b00 <memcpy>
 8008d60:	4631      	mov	r1, r6
 8008d62:	4640      	mov	r0, r8
 8008d64:	f7ff fef4 	bl	8008b50 <_free_r>
 8008d68:	e7e1      	b.n	8008d2e <_realloc_r+0x1e>
 8008d6a:	4635      	mov	r5, r6
 8008d6c:	e7df      	b.n	8008d2e <_realloc_r+0x1e>
	...

08008d70 <_sbrk_r>:
 8008d70:	b538      	push	{r3, r4, r5, lr}
 8008d72:	4d06      	ldr	r5, [pc, #24]	; (8008d8c <_sbrk_r+0x1c>)
 8008d74:	2300      	movs	r3, #0
 8008d76:	4604      	mov	r4, r0
 8008d78:	4608      	mov	r0, r1
 8008d7a:	602b      	str	r3, [r5, #0]
 8008d7c:	f7ff fb0c 	bl	8008398 <_sbrk>
 8008d80:	1c43      	adds	r3, r0, #1
 8008d82:	d102      	bne.n	8008d8a <_sbrk_r+0x1a>
 8008d84:	682b      	ldr	r3, [r5, #0]
 8008d86:	b103      	cbz	r3, 8008d8a <_sbrk_r+0x1a>
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	bd38      	pop	{r3, r4, r5, pc}
 8008d8c:	20027ae8 	.word	0x20027ae8

08008d90 <__malloc_lock>:
 8008d90:	4801      	ldr	r0, [pc, #4]	; (8008d98 <__malloc_lock+0x8>)
 8008d92:	f000 b811 	b.w	8008db8 <__retarget_lock_acquire_recursive>
 8008d96:	bf00      	nop
 8008d98:	20027aec 	.word	0x20027aec

08008d9c <__malloc_unlock>:
 8008d9c:	4801      	ldr	r0, [pc, #4]	; (8008da4 <__malloc_unlock+0x8>)
 8008d9e:	f000 b80c 	b.w	8008dba <__retarget_lock_release_recursive>
 8008da2:	bf00      	nop
 8008da4:	20027aec 	.word	0x20027aec

08008da8 <_malloc_usable_size_r>:
 8008da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dac:	1f18      	subs	r0, r3, #4
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	bfbc      	itt	lt
 8008db2:	580b      	ldrlt	r3, [r1, r0]
 8008db4:	18c0      	addlt	r0, r0, r3
 8008db6:	4770      	bx	lr

08008db8 <__retarget_lock_acquire_recursive>:
 8008db8:	4770      	bx	lr

08008dba <__retarget_lock_release_recursive>:
 8008dba:	4770      	bx	lr

08008dbc <_init>:
 8008dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dbe:	bf00      	nop
 8008dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dc2:	bc08      	pop	{r3}
 8008dc4:	469e      	mov	lr, r3
 8008dc6:	4770      	bx	lr

08008dc8 <_fini>:
 8008dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dca:	bf00      	nop
 8008dcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008dce:	bc08      	pop	{r3}
 8008dd0:	469e      	mov	lr, r3
 8008dd2:	4770      	bx	lr
